
snippet A10
	EXAMPLES:
	- name: install the latest version of Apache
	  yum:
	    name: httpd
	    state: latest
	
	- name: remove the Apache package
	  yum:
	    name: httpd
	    state: absent
	
	- name: install the latest version of Apache from the testing repo
	  yum:
	    name: httpd
	    enablerepo: testing
	    state: present
	
	- name: install one specific version of Apache
	  yum:
	    name: httpd-2.2.29-1.4.amzn1
	    state: present
	
	- name: upgrade all packages
	  yum:
	    name: '*'
	    state: latest
	
	- name: upgrade all packages, excluding kernel & foo related packages
	  yum:
	    name: '*'
	    state: latest
	    exclude: kernel*,foo*
	
	- name: install the nginx rpm from a remote repo
	  yum:
	    name: http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install nginx rpm from a local file
	  yum:
	    name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install the 'Development tools' package group
	  yum:
	    name: "@Development tools"
	    state: present
	
	- name: install the 'Gnome desktop' environment group
	  yum:
	    name: "@^gnome-desktop-environment"
	    state: present
	
	- name: List ansible packages and register result to print with debug later.
	  yum:
	    list: ansible
	  register: result
	

snippet Networks
	EXAMPLES:
	- name: install the latest version of Apache
	  yum:
	    name: httpd
	    state: latest
	
	- name: remove the Apache package
	  yum:
	    name: httpd
	    state: absent
	
	- name: install the latest version of Apache from the testing repo
	  yum:
	    name: httpd
	    enablerepo: testing
	    state: present
	
	- name: install one specific version of Apache
	  yum:
	    name: httpd-2.2.29-1.4.amzn1
	    state: present
	
	- name: upgrade all packages
	  yum:
	    name: '*'
	    state: latest
	
	- name: upgrade all packages, excluding kernel & foo related packages
	  yum:
	    name: '*'
	    state: latest
	    exclude: kernel*,foo*
	
	- name: install the nginx rpm from a remote repo
	  yum:
	    name: http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install nginx rpm from a local file
	  yum:
	    name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install the 'Development tools' package group
	  yum:
	    name: "@Development tools"
	    state: present
	
	- name: install the 'Gnome desktop' environment group
	  yum:
	    name: "@^gnome-desktop-environment"
	    state: present
	
	- name: List ansible packages and register result to print with debug later.
	  yum:
	    list: ansible
	  register: result
	

snippet devices'
	EXAMPLES:
	- name: install the latest version of Apache
	  yum:
	    name: httpd
	    state: latest
	
	- name: remove the Apache package
	  yum:
	    name: httpd
	    state: absent
	
	- name: install the latest version of Apache from the testing repo
	  yum:
	    name: httpd
	    enablerepo: testing
	    state: present
	
	- name: install one specific version of Apache
	  yum:
	    name: httpd-2.2.29-1.4.amzn1
	    state: present
	
	- name: upgrade all packages
	  yum:
	    name: '*'
	    state: latest
	
	- name: upgrade all packages, excluding kernel & foo related packages
	  yum:
	    name: '*'
	    state: latest
	    exclude: kernel*,foo*
	
	- name: install the nginx rpm from a remote repo
	  yum:
	    name: http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install nginx rpm from a local file
	  yum:
	    name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install the 'Development tools' package group
	  yum:
	    name: "@Development tools"
	    state: present
	
	- name: install the 'Gnome desktop' environment group
	  yum:
	    name: "@^gnome-desktop-environment"
	    state: present
	
	- name: List ansible packages and register result to print with debug later.
	  yum:
	    list: ansible
	  register: result
	

snippet server
	EXAMPLES:
	- name: install the latest version of Apache
	  yum:
	    name: httpd
	    state: latest
	
	- name: remove the Apache package
	  yum:
	    name: httpd
	    state: absent
	
	- name: install the latest version of Apache from the testing repo
	  yum:
	    name: httpd
	    enablerepo: testing
	    state: present
	
	- name: install one specific version of Apache
	  yum:
	    name: httpd-2.2.29-1.4.amzn1
	    state: present
	
	- name: upgrade all packages
	  yum:
	    name: '*'
	    state: latest
	
	- name: upgrade all packages, excluding kernel & foo related packages
	  yum:
	    name: '*'
	    state: latest
	    exclude: kernel*,foo*
	
	- name: install the nginx rpm from a remote repo
	  yum:
	    name: http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install nginx rpm from a local file
	  yum:
	    name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install the 'Development tools' package group
	  yum:
	    name: "@Development tools"
	    state: present
	
	- name: install the 'Gnome desktop' environment group
	  yum:
	    name: "@^gnome-desktop-environment"
	    state: present
	
	- name: List ansible packages and register result to print with debug later.
	  yum:
	    list: ansible
	  register: result
	

snippet object.
	EXAMPLES:
	- name: install the latest version of Apache
	  yum:
	    name: httpd
	    state: latest
	
	- name: remove the Apache package
	  yum:
	    name: httpd
	    state: absent
	
	- name: install the latest version of Apache from the testing repo
	  yum:
	    name: httpd
	    enablerepo: testing
	    state: present
	
	- name: install one specific version of Apache
	  yum:
	    name: httpd-2.2.29-1.4.amzn1
	    state: present
	
	- name: upgrade all packages
	  yum:
	    name: '*'
	    state: latest
	
	- name: upgrade all packages, excluding kernel & foo related packages
	  yum:
	    name: '*'
	    state: latest
	    exclude: kernel*,foo*
	
	- name: install the nginx rpm from a remote repo
	  yum:
	    name: http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install nginx rpm from a local file
	  yum:
	    name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install the 'Development tools' package group
	  yum:
	    name: "@Development tools"
	    state: present
	
	- name: install the 'Gnome desktop' environment group
	  yum:
	    name: "@^gnome-desktop-environment"
	    state: present
	
	- name: List ansible packages and register result to print with debug later.
	  yum:
	    list: ansible
	  register: result
	

snippet devices
	EXAMPLES:
	- name: install the latest version of Apache
	  yum:
	    name: httpd
	    state: latest
	
	- name: remove the Apache package
	  yum:
	    name: httpd
	    state: absent
	
	- name: install the latest version of Apache from the testing repo
	  yum:
	    name: httpd
	    enablerepo: testing
	    state: present
	
	- name: install one specific version of Apache
	  yum:
	    name: httpd-2.2.29-1.4.amzn1
	    state: present
	
	- name: upgrade all packages
	  yum:
	    name: '*'
	    state: latest
	
	- name: upgrade all packages, excluding kernel & foo related packages
	  yum:
	    name: '*'
	    state: latest
	    exclude: kernel*,foo*
	
	- name: install the nginx rpm from a remote repo
	  yum:
	    name: http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install nginx rpm from a local file
	  yum:
	    name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install the 'Development tools' package group
	  yum:
	    name: "@Development tools"
	    state: present
	
	- name: install the 'Gnome desktop' environment group
	  yum:
	    name: "@^gnome-desktop-environment"
	    state: present
	
	- name: List ansible packages and register result to print with debug later.
	  yum:
	    list: ansible
	  register: result
	

snippet accelerate
	EXAMPLES:
	# To use accelerate mode, simply add "accelerate: true" to your play. The initial
	# key exchange and starting up of the daemon will occur over SSH, but all commands and
	# subsequent actions will be conducted over the raw socket connection using AES encryption
	
	- hosts: devservers
	  accelerate: true
	  tasks:
	      - command: /usr/bin/anything
	

snippet bzr
	EXAMPLES:
	# Example bzr checkout from Ansible Playbooks
	- bzr:
	    name: bzr+ssh://foosball.example.org/path/to/branch
	    dest: /srv/checkout
	    version: 22
	

snippet acl
	EXAMPLES:
	# Grant user Joe read access to a file
	- acl:
	    path: /etc/foo.conf
	    entity: joe
	    etype: user
	    permissions: r
	    state: present
	
	# Removes the acl for Joe on a specific file
	- acl:
	    path: /etc/foo.conf
	    entity: joe
	    etype: user
	    state: absent
	
	# Sets default acl for joe on foo.d
	- acl:
	    path: /etc/foo.d
	    entity: joe
	    etype: user
	    permissions: rw
	    default: yes
	    state: present
	
	# Same as previous but using entry shorthand
	- acl:
	    path: /etc/foo.d
	    entry: "default:user:joe:rw-"
	    state: present
	
	# Obtain the acl for a specific file
	- acl:
	    path: /etc/foo.conf
	  register: acl_info
	
	RETURN VALUES:
	
	
	acl:
	    description: Current acl on provided path (after changes, if any)
	    returned: success
	    type: list
	    sample: [ "user::rwx", "group::rwx", "other::rwx" ]
	

snippet add_host
	EXAMPLES:
	# add host to group 'just_created' with variable foo=42
	- add_host:
	    name: "{{ ip_from_ec2 }}"
	    groups: just_created
	    foo: 42
	
	# add a host with a non-standard port local to your machines
	- add_host:
	    name: "{{ new_ip }}:{{ new_port }}"
	
	# add a host alias that we reach through a tunnel (Ansible <= 1.9)
	- add_host:
	    hostname: "{{ new_ip }}"
	    ansible_ssh_host: "{{ inventory_hostname }}"
	    ansible_ssh_port: "{{ new_port }}"
	
	# add a host alias that we reach through a tunnel (Ansible >= 2.0)
	- add_host:
	    hostname: "{{ new_ip }}"
	    ansible_host: "{{ inventory_hostname }}"
	    ansible_port: "{{ new_port }}"
	
	- name: Ensure inventory vars are set to the same value as the inventory_hostname has (close to pre 2.4 behaviour)
	  add_host:
	    hostname: charlie
	    inventory_dir: "{{inventory_dir}}"
	

snippet airbrake_deployment
	EXAMPLES:
	- airbrake_deployment:
	    token: AAAAAA
	    environment: staging
	    user: ansible
	    revision: '4.2'
	

snippet aireos_command
	EXAMPLES:
	tasks:
	  - name: run show sysinfo on remote devices
	    aireos_command:
	      commands: show sysinfo
	
	  - name: run show sysinfo and check to see if output contains Cisco Controller
	    aireos_command:
	      commands: show sysinfo
	      wait_for: result[0] contains 'Cisco Controller'
	
	  - name: run multiple commands on remote nodes
	    aireos_command:
	      commands:
	        - show sysinfo
	        - show interface summary
	
	  - name: run multiple commands and evaluate the output
	    aireos_command:
	      commands:
	        - show sysinfo
	        - show interface summary
	      wait_for:
	        - result[0] contains Cisco Controller
	        - result[1] contains Loopback0
	
	RETURN VALUES:
	
	
	stdout:
	  description: The set of responses from the commands
	  returned: always apart from low level errors (such as action plugin)
	  type: list
	  sample: ['...', '...']
	stdout_lines:
	  description: The value of stdout split into a list
	  returned: always apart from low level errors (such as action plugin)
	  type: list
	  sample: [['...', '...'], ['...'], ['...']]
	failed_conditions:
	  description: The list of conditionals that have failed
	  returned: failed
	  type: list
	  sample: ['...', '...']
	

snippet aireos_config
	EXAMPLES:
	- name: configure configuration
	  aireos_config:
	    lines: sysname testDevice
	
	- name: diff the running-config against a provided config
	  aireos_config:
	    diff_against: intended
	    intended: "{{ lookup('file', 'master.cfg') }}"
	
	- name: load new acl into device
	  aireos_config:
	    lines:
	      - acl create testACL
	      - acl rule protocol testACL 1 any
	      - acl rule direction testACL 3 in
	    before: acl delete testACL
	
	RETURN VALUES:
	
	
	commands:
	  description: The set of commands that will be pushed to the remote device
	  returned: always
	  type: list
	  sample: ['hostname foo', 'vlan 1', 'name default']
	updates:
	  description: The set of commands that will be pushed to the remote device
	  returned: always
	  type: list
	  sample: ['hostname foo', 'vlan 1', 'name default']
	backup_path:
	  description: The full path to the backup file
	  returned: when backup is yes
	  type: string
	  sample: /playbooks/ansible/backup/aireos_config.2016-07-16@22:28:34
	

snippet aix_inittab
	EXAMPLES:
	# Add service startmyservice to the inittab, directly after service existingservice.
	- name: Add startmyservice to inittab
	  aix_inittab:
	    name: startmyservice
	    runlevel: 4
	    action: once
	    command: "echo hello"
	    insertafter: existingservice
	    state: present
	  become: yes
	
	# Change inittab entry startmyservice to runlevel "2" and processaction "wait".
	- name: Change startmyservice to inittab
	  aix_inittab:
	    name: startmyservice
	    runlevel: 2
	    action: wait
	    command: "echo hello"
	    state: present
	  become: yes
	
	# Remove inittab entry startmyservice.
	- name: remove startmyservice from inittab
	  aix_inittab:
	    name: startmyservice
	    runlevel: 2
	    action: wait
	    command: "echo hello"
	    state: absent
	  become: yes
	
	RETURN VALUES:
	
	
	name:
	    description: name of the adjusted inittab entry
	    returned: always
	    type: string
	    sample: startmyservice
	msg:
	    description: action done with the inittab entry
	    returned: changed
	    type: string
	    sample: changed inittab entry startmyservice
	changed:
	    description: whether the inittab changed or not
	    returned: always
	    type: boolean
	    sample: true
	

snippet aix_lvol
	EXAMPLES:
	- name: Create a logical volume of 512M
	  aix_lvol:
	    vg: testvg
	    lv: testlv
	    size: 512M
	
	- name: Create a logical volume of 512M with disks hdisk1 and hdisk2
	  aix_lvol:
	    vg: testvg
	    lv: test2lv
	    size: 512M
	    pvs: hdisk1,hdisk2
	
	- name: Create a logical volume of 512M mirrored
	  aix_lvol:
	    vg: testvg
	    lv: test3lv
	    size: 512M
	    copies: 2
	
	- name: Create a logical volume of 1G with a minimum placement policy
	  aix_lvol:
	    vg: rootvg
	    lv: test4lv
	    size: 1G
	    policy: minimum
	
	- name: Create a logical volume with special options like mirror pool
	  aix_lvol:
	    vg: testvg
	    lv: testlv
	    size: 512M
	    opts: -p copy1=poolA -p copy2=poolB
	
	- name: Extend the logical volume to 1200M
	  aix_lvol:
	    vg: testvg
	    lv: test4lv
	    size: 1200M
	
	- name: Remove the logical volume
	  aix_lvol:
	    vg: testvg
	    lv: testlv
	    state: absent
	
	RETURN VALUES:
	
	
	msg:
	  type: string
	  description: A friendly message describing the task result.
	  returned: always
	  sample: Logical volume testlv created.
	

snippet alternatives
	EXAMPLES:
	- name: correct java version selected
	  alternatives:
	    name: java
	    path: /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java
	
	- name: alternatives link created
	  alternatives:
	    name: hadoop-conf
	    link: /etc/hadoop/conf
	    path: /etc/hadoop/conf.ansible
	
	- name: make java 32 bit an alternative with low priority
	  alternatives:
	    name: java
	    path: /usr/lib/jvm/java-7-openjdk-i386/jre/bin/java
	    priority: -10
	

snippet aos_asn_pool
	EXAMPLES:
	- name: "Create ASN Pool"
	  aos_asn_pool:
	    session: "{{ aos_session }}"
	    name: "my-asn-pool"
	    ranges:
	      - [ 100, 200 ]
	    state: present
	  register: asnpool
	
	- name: "Save ASN Pool into a file in JSON"
	  copy:
	    content: "{{ asnpool.value | to_nice_json }}"
	    dest: resources/asn_pool_saved.json
	
	- name: "Save ASN Pool into a file in YAML"
	  copy:
	    content: "{{ asnpool.value | to_nice_yaml }}"
	    dest: resources/asn_pool_saved.yaml
	
	
	- name: "Delete ASN Pool"
	  aos_asn_pool:
	    session: "{{ aos_session }}"
	    name: "my-asn-pool"
	    state: absent
	
	- name: "Load ASN Pool from File(JSON)"
	  aos_asn_pool:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/asn_pool_saved.json') }}"
	    state: present
	
	- name: "Delete ASN Pool from File(JSON)"
	  aos_asn_pool:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/asn_pool_saved.json') }}"
	    state: absent
	
	- name: "Load ASN Pool from File(Yaml)"
	  aos_asn_pool:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/asn_pool_saved.yaml') }}"
	    state: present
	  register: test
	
	- name: "Delete ASN Pool from File(Yaml)"
	  aos_asn_pool:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/asn_pool_saved.yaml') }}"
	    state: absent
	

snippet aos_blueprint
	EXAMPLES:
	- name: Creating blueprint
	  aos_blueprint:
	    session: "{{ aos_session }}"
	    name: "my-blueprint"
	    template: "my-template"
	    reference_arch: two_stage_l3clos
	    state: present
	
	- name: Access a blueprint and get content
	  aos_blueprint:
	    session: "{{ aos_session }}"
	    name: "{{ blueprint_name }}"
	    template: "{{ blueprint_template }}"
	    state: present
	  register: bp
	
	- name: Delete a blueprint
	  aos_blueprint:
	    session: "{{ aos_session }}"
	    name: "my-blueprint"
	    state: absent
	
	- name: Await blueprint build-ready, and obtain contents
	  aos_blueprint:
	    session: "{{ aos_session }}"
	    name: "{{ blueprint_name }}"
	    state: build-ready
	  register: bp
	

snippet aos_blueprint_param
	EXAMPLES:
	- name: Add Logical Device Maps information in a Blueprint
	  aos_blueprint_param:
	    session: "{{ aos_session }}"
	    blueprint: "my-blueprint-l2"
	    name: "logical_device_maps"
	    value:
	      spine_1: CumulusVX-Spine-Switch
	      spine_2: CumulusVX-Spine-Switch
	      leaf_1: CumulusVX-Leaf-Switch
	      leaf_2: CumulusVX-Leaf-Switch
	      leaf_3: CumulusVX-Leaf-Switch
	    state: present
	
	- name: Access Logical Device Maps information from a Blueprint
	  aos_blueprint_param:
	    session: "{{ aos_session }}"
	    blueprint: "my-blueprint-l2"
	    name: "logical_device_maps"
	    state: present
	
	- name: Reset Logical Device Maps information in a Blueprint
	  aos_blueprint_param:
	    session: "{{ aos_session }}"
	    blueprint: "my-blueprint-l2"
	    name: "logical_device_maps"
	    state: absent
	
	- name: Get list of all supported Params for a blueprint
	  aos_blueprint_param:
	    session: "{{ aos_session }}"
	    blueprint: "my-blueprint-l2"
	    get_param_list: yes
	  register: params_list
	- debug: var=params_list
	
	- name: Add Resource Pools information in a Blueprint, by providing a param_map
	  aos_blueprint_param:
	    session: "{{ aos_session }}"
	    blueprint: "my-blueprint-l2"
	    name: "resource_pools"
	    value:
	        leaf_loopback_ips: ['Switches-IpAddrs']
	        spine_loopback_ips: ['Switches-IpAddrs']
	        spine_leaf_link_ips: ['Switches-IpAddrs']
	        spine_asns: ['Private-ASN-pool']
	        leaf_asns: ['Private-ASN-pool']
	        virtual_network_svi_subnets: ['Servers-IpAddrs']
	    param_map:
	        leaf_loopback_ips: IpPools
	        spine_loopback_ips: IpPools
	        spine_leaf_link_ips: IpPools
	        spine_asns: AsnPools
	        leaf_asns: AsnPools
	        virtual_network_svi_subnets: IpPools
	    state: present
	

snippet aos_blueprint_virtnet
	EXAMPLES:
	- name: "Access Existing Virtual Network"
	  aos_blueprint_virtnet:
	    session: "{{ aos_session }}"
	    blueprint: "my-blueprint-l2"
	    name: "my-virtual-network"
	    state: present
	
	- name: "Delete Virtual Network with JSON File"
	  aos_blueprint_virtnet:
	    session: "{{ aos_session }}"
	    blueprint: "my-blueprint-l2"
	    content: "{{ lookup('file', 'resources/virtual-network-02.json') }}"
	    state: absent
	
	- name: "Create Virtual Network"
	  aos_blueprint_virtnet:
	    session: "{{ aos_session }}"
	    blueprint: "my-blueprint-l2"
	    content: "{{ lookup('file', 'resources/virtual-network-02.json') }}"
	    state: present
	

snippet aos_device
	EXAMPLES:
	- name: Approve a new device
	  aos_device:
	    session: "{{ aos_session }}"
	    name: D2060B2F105429GDABCD123
	    state: 'normal'
	    approve: true
	    location: "rack-45, ru-18"
	

snippet aos_external_router
	EXAMPLES:
	- name: "Create an External Router"
	  aos_external_router:
	    session: "{{ aos_session }}"
	    name: "my-external-router"
	    loopback: 10.0.0.1
	    asn: 65000
	    state: present
	
	- name: "Check if an External Router exist by ID"
	  aos_external_router:
	    session: "{{ aos_session }}"
	    name: "45ab26fc-c2ed-4307-b330-0870488fa13e"
	    state: present
	
	- name: "Delete an External Router by name"
	  aos_external_router:
	    session: "{{ aos_session }}"
	    name: "my-external-router"
	    state: absent
	
	- name: "Delete an External Router by id"
	  aos_external_router:
	    session: "{{ aos_session }}"
	    id: "45ab26fc-c2ed-4307-b330-0870488fa13e"
	    state: absent
	
	# Save an External Router to a file
	- name: "Access External Router 1/3"
	  aos_external_router:
	    session: "{{ aos_session }}"
	    name: "my-external-router"
	    state: present
	  register: external_router
	
	- name: "Save External Router into a file in JSON 2/3"
	  copy:
	    content: "{{ external_router.value | to_nice_json }}"
	    dest: external_router_saved.json
	
	- name: "Save External Router into a file in YAML 3/3"
	  copy:
	    content: "{{ external_router.value | to_nice_yaml }}"
	    dest: external_router_saved.yaml
	
	- name: "Load External Router from a JSON file"
	  aos_external_router:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/external_router_saved.json') }}"
	    state: present
	
	- name: "Load External Router from a YAML file"
	  aos_external_router:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/external_router_saved.yaml') }}"
	    state: present
	

snippet aos_ip_pool
	EXAMPLES:
	- name: "Create an IP Pool with one subnet"
	  aos_ip_pool:
	    session: "{{ aos_session }}"
	    name: "my-ip-pool"
	    subnets: [ 172.10.0.0/16 ]
	    state: present
	
	- name: "Create an IP Pool with multiple subnets"
	  aos_ip_pool:
	    session: "{{ aos_session }}"
	    name: "my-other-ip-pool"
	    subnets: [ 172.10.0.0/16, 192.168.0.0./24 ]
	    state: present
	
	- name: "Check if an IP Pool exist with same subnets by ID"
	  aos_ip_pool:
	    session: "{{ aos_session }}"
	    name: "45ab26fc-c2ed-4307-b330-0870488fa13e"
	    subnets: [ 172.10.0.0/16, 192.168.0.0./24 ]
	    state: present
	
	- name: "Delete an IP Pool by name"
	  aos_ip_pool:
	    session: "{{ aos_session }}"
	    name: "my-ip-pool"
	    state: absent
	
	- name: "Delete an IP pool by id"
	  aos_ip_pool:
	    session: "{{ aos_session }}"
	    id: "45ab26fc-c2ed-4307-b330-0870488fa13e"
	    state: absent
	
	# Save an IP Pool to a file
	
	- name: "Access IP Pool 1/3"
	  aos_ip_pool:
	    session: "{{ aos_session }}"
	    name: "my-ip-pool"
	    subnets: [ 172.10.0.0/16, 172.12.0.0/16 ]
	    state: present
	  register: ip_pool
	
	- name: "Save Ip Pool into a file in JSON 2/3"
	  copy:
	    content: "{{ ip_pool.value | to_nice_json }}"
	    dest: ip_pool_saved.json
	
	- name: "Save Ip Pool into a file in YAML 3/3"
	  copy:
	    content: "{{ ip_pool.value | to_nice_yaml }}"
	    dest: ip_pool_saved.yaml
	
	- name: "Load IP Pool from a JSON file"
	  aos_ip_pool:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/ip_pool_saved.json') }}"
	    state: present
	
	- name: "Load IP Pool from a YAML file"
	  aos_ip_pool:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/ip_pool_saved.yaml') }}"
	    state: present
	
	- name: "Load IP Pool from a Variable"
	  aos_ip_pool:
	    session: "{{ aos_session }}"
	    content:
	      display_name: my-ip-pool
	      id: 4276738d-6f86-4034-9656-4bff94a34ea7
	      subnets:
	        - network: 172.10.0.0/16
	        - network: 172.12.0.0/16
	    state: present
	

snippet aos_logical_device
	EXAMPLES:
	- name: "Delete a Logical Device by name"
	  aos_logical_device:
	    session: "{{ aos_session }}"
	    name: "my-logical-device"
	    state: absent
	
	- name: "Delete a Logical Device by id"
	  aos_logical_device:
	    session: "{{ aos_session }}"
	    id: "45ab26fc-c2ed-4307-b330-0870488fa13e"
	    state: absent
	
	# Save a Logical Device to a file
	
	- name: "Access Logical Device 1/3"
	  aos_logical_device:
	    session: "{{ aos_session }}"
	    name: "my-logical-device"
	    state: present
	  register: logical_device
	- name: "Save Logical Device into a JSON file 2/3"
	  copy:
	    content: "{{ logical_device.value | to_nice_json }}"
	    dest: logical_device_saved.json
	- name: "Save Logical Device into a YAML file 3/3"
	  copy:
	    content: "{{ logical_device.value | to_nice_yaml }}"
	    dest: logical_device_saved.yaml
	
	- name: "Load Logical Device from a JSON file"
	  aos_logical_device:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/logical_device_saved.json') }}"
	    state: present
	
	- name: "Load Logical Device from a YAML file"
	  aos_logical_device:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/logical_device_saved.yaml') }}"
	    state: present
	

snippet aos_logical_device_map
	EXAMPLES:
	- name: "Create an Logical Device Map with one subnet"
	  aos_logical_device_map:
	    session: "{{ aos_session }}"
	    name: "my-logical-device-map"
	    state: present
	
	- name: "Create an Logical Device Map with multiple subnets"
	  aos_logical_device_map:
	    session: "{{ aos_session }}"
	    name: "my-other-logical-device-map"
	    state: present
	
	- name: "Check if an Logical Device Map exist with same subnets by ID"
	  aos_logical_device_map:
	    session: "{{ aos_session }}"
	    name: "45ab26fc-c2ed-4307-b330-0870488fa13e"
	    state: present
	
	- name: "Delete an Logical Device Map by name"
	  aos_logical_device_map:
	    session: "{{ aos_session }}"
	    name: "my-logical-device-map"
	    state: absent
	
	- name: "Delete an Logical Device Map by id"
	  aos_logical_device_map:
	    session: "{{ aos_session }}"
	    id: "45ab26fc-c2ed-4307-b330-0870488fa13e"
	    state: absent
	
	# Save an Logical Device Map to a file
	
	- name: "Access Logical Device Map 1/3"
	  aos_logical_device_map:
	    session: "{{ aos_session }}"
	    name: "my-logical-device-map"
	    state: present
	  register: logical_device_map
	
	- name: "Save Logical Device Map into a file in JSON 2/3"
	  copy:
	    content: "{{ logical_device_map.value | to_nice_json }}"
	    dest: logical_device_map_saved.json
	
	- name: "Save Logical Device Map into a file in YAML 3/3"
	  copy:
	    content: "{{ logical_device_map.value | to_nice_yaml }}"
	    dest: logical_device_map_saved.yaml
	
	- name: "Load Logical Device Map from a JSON file"
	  aos_logical_device_map:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/logical_device_map_saved.json') }}"
	    state: present
	
	- name: "Load Logical Device Map from a YAML file"
	  aos_logical_device_map:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/logical_device_map_saved.yaml') }}"
	    state: present
	

snippet aos_login
	EXAMPLES:
	- name: Create a session with the AOS-server
	  aos_login:
	    server: "{{ inventory_hostname }}"
	    user: admin
	    passwd: admin
	
	- name: Use the newly created session (register is not mandatory)
	  aos_ip_pool:
	    session: "{{ aos_session }}"
	    name: my_ip_pool
	    state: present
	

snippet aos_rack_type
	EXAMPLES:
	- name: "Delete a Rack Type by name"
	  aos_rack_type:
	    session: "{{ aos_session }}"
	    name: "my-rack-type"
	    state: absent
	
	- name: "Delete a Rack Type by id"
	  aos_rack_type:
	    session: "{{ aos_session }}"
	    id: "45ab26fc-c2ed-4307-b330-0870488fa13e"
	    state: absent
	
	# Save a Rack Type to a file
	
	- name: "Access Rack Type 1/3"
	  aos_rack_type:
	    session: "{{ aos_session }}"
	    name: "my-rack-type"
	    state: present
	  register: rack_type
	- name: "Save Rack Type into a JSON file 2/3"
	  copy:
	    content: "{{ rack_type.value | to_nice_json }}"
	    dest: rack_type_saved.json
	- name: "Save Rack Type into a YAML file 3/3"
	  copy:
	    content: "{{ rack_type.value | to_nice_yaml }}"
	    dest: rack_type_saved.yaml
	
	- name: "Load Rack Type from a JSON file"
	  aos_rack_type:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/rack_type_saved.json') }}"
	    state: present
	
	- name: "Load Rack Type from a YAML file"
	  aos_rack_type:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/rack_type_saved.yaml') }}"
	    state: present
	

snippet aos_template
	EXAMPLES:
	- name: "Check if an Template exist by name"
	  aos_template:
	    session: "{{ aos_session }}"
	    name: "my-template"
	    state: present
	
	- name: "Check if an Template exist by ID"
	  aos_template:
	    session: "{{ aos_session }}"
	    id: "45ab26fc-c2ed-4307-b330-0870488fa13e"
	    state: present
	
	- name: "Delete an Template by name"
	  aos_template:
	    session: "{{ aos_session }}"
	    name: "my-template"
	    state: absent
	
	- name: "Delete an Template by id"
	  aos_template:
	    session: "{{ aos_session }}"
	    id: "45ab26fc-c2ed-4307-b330-0870488fa13e"
	    state: absent
	
	- name: "Access Template 1/3"
	  aos_template:
	    session: "{{ aos_session }}"
	    name: "my-template"
	    state: present
	  register: template
	- name: "Save Template into a JSON file 2/3"
	  copy:
	    content: "{{ template.value | to_nice_json }}"
	    dest: template_saved.json
	- name: "Save Template into a YAML file 2/3"
	  copy:
	    content: "{{ template.value | to_nice_yaml }}"
	    dest: template_saved.yaml
	
	- name: "Load Template from File (Json)"
	  aos_template:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/template_saved.json') }}"
	    state: present
	
	- name: "Load Template from File (yaml)"
	  aos_template:
	    session: "{{ aos_session }}"
	    content: "{{ lookup('file', 'resources/template_saved.yaml') }}"
	    state: present
	

snippet apache2_mod_proxy
	EXAMPLES:
	# Get all current balancer pool members' attributes:
	- apache2_mod_proxy:
	    balancer_vhost: 10.0.0.2
	
	# Get a specific member's attributes:
	- apache2_mod_proxy:
	    balancer_vhost: myws.mydomain.org
	    balancer_suffix: /lb/
	    member_host: node1.myws.mydomain.org
	
	# Enable all balancer pool members:
	- apache2_mod_proxy:
	    balancer_vhost: '{{ myloadbalancer_host }}'
	  register: result
	- apache2_mod_proxy:
	    balancer_vhost: '{{ myloadbalancer_host }}'
	    member_host: '{{ item.host }}'
	    state: present
	  with_items: '{{ result.members }}'
	
	# Gracefully disable a member from a loadbalancer node:
	- apache2_mod_proxy:
	    balancer_vhost: '{{ vhost_host }}'
	    member_host: '{{ member.host }}'
	    state: drained
	  delegate_to: myloadbalancernode
	- wait_for:
	    host: '{{ member.host }}'
	    port: '{{ member.port }}'
	    state: drained
	  delegate_to: myloadbalancernode
	- apache2_mod_proxy:
	    balancer_vhost: '{{ vhost_host }}'
	    member_host: '{{ member.host }}'
	    state: absent
	  delegate_to: myloadbalancernode
	
	RETURN VALUES:
	
	
	member:
	    description: specific balancer member information dictionary, returned when apache2_mod_proxy module is invoked with member_host parameter.
	    type: dict
	    returned: success
	    sample:
	      {"attributes":
	            {"Busy": "0",
	            "Elected": "42",
	            "Factor": "1",
	            "From": "136K",
	            "Load": "0",
	            "Route": null,
	            "RouteRedir": null,
	            "Set": "0",
	            "Status": "Init Ok ",
	            "To": " 47K",
	            "Worker URL": null
	        },
	        "balancer_url": "http://10.10.0.2/balancer-manager/",
	        "host": "10.10.0.20",
	        "management_url": "http://10.10.0.2/lb/?b=mywsbalancer&w=http://10.10.0.20:8080/ws&nonce=8925436c-79c6-4841-8936-e7d13b79239b",
	        "path": "/ws",
	        "port": 8080,
	        "protocol": "http",
	        "status": {
	            "disabled": false,
	            "drained": false,
	            "hot_standby": false,
	            "ignore_errors": false
	        }
	      }
	members:
	    description: list of member (defined above) dictionaries, returned when apache2_mod_proxy is invoked with no member_host and state args.
	    returned: success
	    type: list
	    sample:
	      [{"attributes": {
	            "Busy": "0",
	            "Elected": "42",
	            "Factor": "1",
	            "From": "136K",
	            "Load": "0",
	            "Route": null,
	            "RouteRedir": null,
	            "Set": "0",
	            "Status": "Init Ok ",
	            "To": " 47K",
	            "Worker URL": null
	        },
	        "balancer_url": "http://10.10.0.2/balancer-manager/",
	        "host": "10.10.0.20",
	        "management_url": "http://10.10.0.2/lb/?b=mywsbalancer&w=http://10.10.0.20:8080/ws&nonce=8925436c-79c6-4841-8936-e7d13b79239b",
	        "path": "/ws",
	        "port": 8080,
	        "protocol": "http",
	        "status": {
	            "disabled": false,
	            "drained": false,
	            "hot_standby": false,
	            "ignore_errors": false
	        }
	        },
	        {"attributes": {
	            "Busy": "0",
	            "Elected": "42",
	            "Factor": "1",
	            "From": "136K",
	            "Load": "0",
	            "Route": null,
	            "RouteRedir": null,
	            "Set": "0",
	            "Status": "Init Ok ",
	            "To": " 47K",
	            "Worker URL": null
	        },
	        "balancer_url": "http://10.10.0.2/balancer-manager/",
	        "host": "10.10.0.21",
	        "management_url": "http://10.10.0.2/lb/?b=mywsbalancer&w=http://10.10.0.21:8080/ws&nonce=8925436c-79c6-4841-8936-e7d13b79239b",
	        "path": "/ws",
	        "port": 8080,
	        "protocol": "http",
	        "status": {
	            "disabled": false,
	            "drained": false,
	            "hot_standby": false,
	            "ignore_errors": false}
	        }
	      ]
	

snippet apache2_module
	EXAMPLES:
	# enables the Apache2 module "wsgi"
	- apache2_module:
	    state: present
	    name: wsgi
	# disables the Apache2 module "wsgi"
	- apache2_module:
	    state: absent
	    name: wsgi
	# disable default modules for Debian
	- apache2_module:
	    state: absent
	    name: autoindex
	    force: True
	# disable mpm_worker and ignore warnings about missing mpm module
	- apache2_module:
	    state: absent
	    name: mpm_worker
	    ignore_configcheck: True
	
	RETURN VALUES:
	
	
	result:
	    description: message about action taken
	    returned: always
	    type: string
	warnings:
	    description: list of warning messages
	    returned: when needed
	    type: list
	rc:
	    description: return code of underlying command
	    returned: failed
	    type: int
	stdout:
	    description: stdout of underlying command
	    returned: failed
	    type: string
	stderr:
	    description: stderr of underlying command
	    returned: failed
	    type: string
	

snippet apk
	EXAMPLES:
	# Update repositories and install "foo" package
	- apk:
	    name: foo
	    update_cache: yes
	
	# Update repositories and install "foo" and "bar" packages
	- apk:
	    name: foo,bar
	    update_cache: yes
	
	# Remove "foo" package
	- apk:
	    name: foo
	    state: absent
	
	# Remove "foo" and "bar" packages
	- apk:
	    name: foo,bar
	    state: absent
	
	# Install the package "foo"
	- apk:
	    name: foo
	    state: present
	
	# Install the packages "foo" and "bar"
	- apk:
	    name: foo,bar
	    state: present
	
	# Update repositories and update package "foo" to latest version
	- apk:
	    name: foo
	    state: latest
	    update_cache: yes
	
	# Update repositories and update packages "foo" and "bar" to latest versions
	- apk:
	    name: foo,bar
	    state: latest
	    update_cache: yes
	
	# Update all installed packages to the latest versions
	- apk:
	    upgrade: yes
	
	# Upgrade / replace / downgrade / uninstall all installed packages to the latest versions available
	- apk:
	    available: yes
	    upgrade: yes
	
	# Update repositories as a separate step
	- apk:
	    update_cache: yes
	
	# Install package from a specific repository
	- apk:
	    name: foo
	    state: latest
	    update_cache: yes
	    repository: http://dl-3.alpinelinux.org/alpine/edge/main
	
	RETURN VALUES:
	
	
	packages:
	    description: a list of packages that have been changed
	    returned: when packages have changed
	    type: list
	    sample: ['package', 'other-package']
	

snippet apt
	EXAMPLES:
	- name: Update repositories cache and install "foo" package
	  apt:
	    name: foo
	    update_cache: yes
	
	- name: Remove "foo" package
	  apt:
	    name: foo
	    state: absent
	
	- name: Install the package "foo"
	  apt:
	    name: foo
	    state: present
	
	- name: Install the version '1.00' of package "foo"
	  apt:
	    name: foo=1.00
	    state: present
	
	- name: Update the repository cache and update package "nginx" to latest version using default release squeeze-backport
	  apt:
	    name: nginx
	    state: latest
	    default_release: squeeze-backports
	    update_cache: yes
	
	- name: Install latest version of "openjdk-6-jdk" ignoring "install-recommends"
	  apt:
	    name: openjdk-6-jdk
	    state: latest
	    install_recommends: no
	
	- name: Upgrade all packages to the latest version
	  apt:
	    name: "*"
	    state: latest
	
	- name: Update all packages to the latest version
	  apt:
	    upgrade: dist
	
	- name: Run the equivalent of "apt-get update" as a separate step
	  apt:
	    update_cache: yes
	
	- name: Only run "update_cache=yes" if the last one is more than 3600 seconds ago
	  apt:
	    update_cache: yes
	    cache_valid_time: 3600
	
	- name: Pass options to dpkg on run
	  apt:
	    upgrade: dist
	    update_cache: yes
	    dpkg_options: 'force-confold,force-confdef'
	
	- name: Install a .deb package
	  apt:
	    deb: /tmp/mypackage.deb
	
	- name: Install the build dependencies for package "foo"
	  apt:
	    pkg: foo
	    state: build-dep
	
	- name: Install a .deb package from the internet.
	  apt:
	    deb: https://example.com/python-ppq_0.1-1_all.deb
	
	- name: Remove useless packages from the cache
	  apt:
	    autoclean: yes
	
	- name: Remove dependencies that are no longer required
	  apt:
	    autoremove: yes
	
	RETURN VALUES:
	
	
	cache_updated:
	    description: if the cache was updated or not
	    returned: success, in some cases
	    type: boolean
	    sample: True
	cache_update_time:
	    description: time of the last cache update (0 if unknown)
	    returned: success, in some cases
	    type: int
	    sample: 1425828348000
	stdout:
	    description: output from apt
	    returned: success, when needed
	    type: string
	    sample: "Reading package lists...
	Building dependency tree...
	Reading state information...
	The following extra packages will be installed:
	  apache2-bin ..."
	stderr:
	    description: error output from apt
	    returned: success, when needed
	    type: string
	    sample: "AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to ..."
	

snippet apt_key
	EXAMPLES:
	- name: Add an apt key by id from a keyserver
	  apt_key:
	    keyserver: keyserver.ubuntu.com
	    id: 36A1D7869245C8950F966E92D8576A8BA88D21E9
	
	- name: Add an Apt signing key, uses whichever key is at the URL
	  apt_key:
	    url: https://ftp-master.debian.org/keys/archive-key-6.0.asc
	    state: present
	
	- name: Add an Apt signing key, will not download if present
	  apt_key:
	    id: 473041FA
	    url: https://ftp-master.debian.org/keys/archive-key-6.0.asc
	    state: present
	
	- name: Remove a Apt specific signing key, leading 0x is valid
	  apt_key:
	    id: 0x473041FA
	    state: absent
	
	# Use armored file since utf-8 string is expected. Must be of "PGP PUBLIC KEY BLOCK" type.
	- name: Add a key from a file on the Ansible server.
	  apt_key:
	    data: "{{ lookup('file', 'apt.asc') }}"
	    state: present
	
	- name: Add an Apt signing key to a specific keyring file
	  apt_key:
	    id: 473041FA
	    url: https://ftp-master.debian.org/keys/archive-key-6.0.asc
	    keyring: /etc/apt/trusted.gpg.d/debian.gpg
	
	- name: Add Apt signing key on remote server to keyring
	  apt_key:
	    id: 473041FA
	    file: /tmp/apt.gpg
	    state: present
	

snippet apt_repository
	EXAMPLES:
	# Add specified repository into sources list.
	- apt_repository:
	    repo: deb http://archive.canonical.com/ubuntu hardy partner
	    state: present
	
	# Add specified repository into sources list using specified filename.
	- apt_repository:
	    repo: deb http://dl.google.com/linux/chrome/deb/ stable main
	    state: present
	    filename: 'google-chrome'
	
	# Add source repository into sources list.
	- apt_repository:
	    repo: deb-src http://archive.canonical.com/ubuntu hardy partner
	    state: present
	
	# Remove specified repository from sources list.
	- apt_repository:
	    repo: deb http://archive.canonical.com/ubuntu hardy partner
	    state: absent
	
	# Add nginx stable repository from PPA and install its signing key.
	# On Ubuntu target:
	- apt_repository:
	    repo: 'ppa:nginx/stable'
	
	# On Debian target
	- apt_repository:
	    repo: 'ppa:nginx/stable'
	    codename: 'trusty'
	

snippet apt_rpm
	EXAMPLES:
	# install package foo
	- apt_rpm:
	    pkg: foo
	    state: present
	
	# remove package foo
	- apt_rpm:
	    pkg: foo
	    state: absent
	
	# description: remove packages foo and bar
	- apt_rpm:
	    pkg: foo,bar
	    state: absent
	
	# description: update the package database and install bar (bar will be the updated if a newer version exists)
	- apt_rpm:
	    name: bar
	    state: present
	    update_cache: yes
	

snippet archive
	EXAMPLES:
	# Compress directory /path/to/foo/ into /path/to/foo.tgz
	- archive:
	    path: /path/to/foo
	    dest: /path/to/foo.tgz
	
	# Compress regular file /path/to/foo into /path/to/foo.gz and remove it
	- archive:
	    path: /path/to/foo
	    remove: True
	
	# Create a zip archive of /path/to/foo
	- archive:
	    path: /path/to/foo
	    format: zip
	
	# Create a bz2 archive of multiple files, rooted at /path
	- archive:
	    path:
	        - /path/to/foo
	        - /path/wong/foo
	    dest: /path/file.tar.bz2
	    format: bz2
	
	# Create a bz2 archive of a globbed path, while excluding specific dirnames - archive:
	    path:
	        - /path/to/foo/*
	    dest: /path/file.tar.bz2
	    exclude_path:
	        - /path/to/foo/bar
	        - /path/to/foo/baz
	    format: bz2
	
	# Create a bz2 archive of a globbed path, while excluding a glob of dirnames
	    path:
	        - /path/to/foo/*
	    dest: /path/file.tar.bz2
	    exclude_path:
	        - /path/to/foo/ba*
	    format: bz2
	
	RETURN VALUES:
	
	
	state:
	    description:
	        The current state of the archived file.
	        If 'absent', then no source files were found and the archive does not exist.
	        If 'compress', then the file source file is in the compressed state.
	        If 'archive', then the source file or paths are currently archived.
	        If 'incomplete', then an archive was created, but not all source paths were found.
	    type: string
	    returned: always
	missing:
	    description: Any files that were missing from the source.
	    type: list
	    returned: success
	archived:
	    description: Any files that were compressed or added to the archive.
	    type: list
	    returned: success
	arcroot:
	    description: The archive root.
	    type: string
	    returned: always
	expanded_paths:
	    description: The list of matching paths from paths argument.
	    type: list
	    returned: always
	expanded_exclude_paths:
	    description: The list of matching exclude paths from the exclude_path argument.
	    type: list
	    returned: always
	

snippet aruba_command
	EXAMPLES:
	tasks:
	  - name: run show version on remote devices
	    aruba_command:
	      commands: show version
	
	  - name: run show version and check to see if output contains Aruba
	    aruba_command:
	      commands: show version
	      wait_for: result[0] contains Aruba
	
	  - name: run multiple commands on remote nodes
	    aruba_command:
	      commands:
	        - show version
	        - show interfaces
	
	  - name: run multiple commands and evaluate the output
	    aruba_command:
	      commands:
	        - show version
	        - show interfaces
	      wait_for:
	        - result[0] contains Aruba
	        - result[1] contains Loopback0
	
	RETURN VALUES:
	
	
	stdout:
	  description: The set of responses from the commands
	  returned: always
	  type: list
	  sample: ['...', '...']
	stdout_lines:
	  description: The value of stdout split into a list
	  returned: always
	  type: list
	  sample: [['...', '...'], ['...'], ['...']]
	failed_conditions:
	  description: The list of conditionals that have failed
	  returned: failed
	  type: list
	  sample: ['...', '...']
	

snippet aruba_config
	EXAMPLES:
	- name: configure top level configuration
	  aruba_config:
	    lines: hostname {{ inventory_hostname }}
	
	- name: diff the running-config against a provided config
	  aruba_config:
	    diff_against: intended
	    intended: "{{ lookup('file', 'master.cfg') }}"
	
	- name: configure interface settings
	  aruba_config:
	    lines:
	      - description test interface
	      - ip access-group 1 in
	    parents: interface gigabitethernet 0/0/0
	
	- name: load new acl into device
	  aruba_config:
	    lines:
	      - permit host 10.10.10.10
	      - ipv6 permit host fda9:97d6:32a3:3e59::3333
	    parents: ip access-list standard 1
	    before: no ip access-list standard 1
	    match: exact
	
	RETURN VALUES:
	
	
	commands:
	  description: The set of commands that will be pushed to the remote device
	  returned: always
	  type: list
	  sample: ['hostname foo', 'vlan 1', 'name default']
	updates:
	  description: The set of commands that will be pushed to the remote device
	  returned: always
	  type: list
	  sample: ['hostname foo', 'vlan 1', 'name default']
	backup_path:
	  description: The full path to the backup file
	  returned: when backup is yes
	  type: string
	  sample: /playbooks/ansible/backup/aruba_config.2016-07-16@22:28:34
	

snippet asa_acl
	EXAMPLES:
	# Note: examples below use the following provider dict to handle
	#       transport and authentication to the node.
	---
	vars:
	  cli:
	    host: "{{ inventory_hostname }}"
	    username: cisco
	    password: cisco
	    transport: cli
	    authorize: yes
	    auth_pass: cisco
	
	---
	- asa_acl:
	    lines:
	      - access-list ACL-ANSIBLE extended permit tcp any any eq 82
	      - access-list ACL-ANSIBLE extended permit tcp any any eq www
	      - access-list ACL-ANSIBLE extended permit tcp any any eq 97
	      - access-list ACL-ANSIBLE extended permit tcp any any eq 98
	      - access-list ACL-ANSIBLE extended permit tcp any any eq 99
	    before: clear configure access-list ACL-ANSIBLE
	    match: strict
	    replace: block
	    provider: "{{ cli }}"
	
	- asa_acl:
	    lines:
	      - access-list ACL-OUTSIDE extended permit tcp any any eq www
	      - access-list ACL-OUTSIDE extended permit tcp any any eq https
	    context: customer_a
	    provider: "{{ cli }}"
	
	RETURN VALUES:
	
	
	updates:
	  description: The set of commands that will be pushed to the remote device
	  returned: always
	  type: list
	  sample: ['access-list ACL-OUTSIDE extended permit tcp any any eq www']
	

snippet asa_command
	EXAMPLES:
	# Note: examples below use the following provider dict to handle
	#       transport and authentication to the node.
	---
	vars:
	  cli:
	    host: "{{ inventory_hostname }}"
	    username: cisco
	    password: cisco
	    authorize: yes
	    auth_pass: cisco
	    transport: cli
	
	---
	- asa_command:
	    commands:
	      - show version
	    provider: "{{ cli }}"
	
	- asa_command:
	    commands:
	      - show asp drop
	      - show memory
	    provider: "{{ cli }}"
	
	- asa_command:
	    commands:
	      - show version
	    provider: "{{ cli }}"
	    context: system
	
	RETURN VALUES:
	
	
	stdout:
	  description: the set of responses from the commands
	  returned: always
	  type: list
	  sample: ['...', '...']
	
	stdout_lines:
	  description: The value of stdout split into a list
	  returned: always
	  type: list
	  sample: [['...', '...'], ['...'], ['...']]
	
	failed_conditions:
	  description: the conditionals that failed
	  returned: failed
	  type: list
	  sample: ['...', '...']
	

snippet asa_config
	EXAMPLES:
	# Note: examples below use the following provider dict to handle
	#       transport and authentication to the node.
	---
	vars:
	  cli:
	    host: "{{ inventory_hostname }}"
	    username: cisco
	    password: cisco
	    authorize: yes
	    auth_pass: cisco
	
	---
	- asa_config:
	    lines:
	      - network-object host 10.80.30.18
	      - network-object host 10.80.30.19
	      - network-object host 10.80.30.20
	    parents: ['object-group network OG-MONITORED-SERVERS']
	    provider: "{{ cli }}"
	
	- asa_config:
	    host: "{{ inventory_hostname }}"
	    lines:
	      - message-length maximum client auto
	      - message-length maximum 512
	    match: line
	    parents: ['policy-map type inspect dns PM-DNS', 'parameters']
	    authorize: yes
	    auth_pass: cisco
	    username: admin
	    password: cisco
	    context: ansible
	
	- asa_config:
	    lines:
	      - ikev1 pre-shared-key MyS3cretVPNK3y
	    parents: tunnel-group 1.1.1.1 ipsec-attributes
	    passwords: yes
	    provider: "{{ cli }}"
	
	RETURN VALUES:
	
	
	updates:
	  description: The set of commands that will be pushed to the remote device
	  returned: always
	  type: list
	  sample: ['...', '...']
	backup_path:
	  description: The full path to the backup file
	  returned: when backup is yes
	  type: string
	  sample: /playbooks/ansible/backup/asa_config.2016-07-16@22:28:34
	

snippet assemble
	EXAMPLES:
	# Example from Ansible Playbooks
	- assemble:
	    src: /etc/someapp/fragments
	    dest: /etc/someapp/someapp.conf
	
	# When a delimiter is specified, it will be inserted in between each fragment
	- assemble:
	    src: /etc/someapp/fragments
	    dest: /etc/someapp/someapp.conf
	    delimiter: '### START FRAGMENT ###'
	
	# Copy a new "sshd_config" file into place, after passing validation with sshd
	- assemble:
	    src: /etc/ssh/conf.d/
	    dest: /etc/ssh/sshd_config
	    validate: '/usr/sbin/sshd -t -f %s'
	

snippet assert
	EXAMPLES:
	- assert: { that: "ansible_os_family != 'RedHat'" }
	
	- assert:
	    that:
	      - "'foo' in some_command_result.stdout"
	      - "number_of_the_counting == 3"
	
	- assert:
	    that:
	      - "my_param <= 100"
	      - "my_param >= 0"
	    msg: "'my_param' must be between 0 and 100"
	

snippet at
	EXAMPLES:
	# Schedule a command to execute in 20 minutes as root.
	- at:
	    command: "ls -d / > /dev/null"
	    count: 20
	    units: minutes
	
	# Match a command to an existing job and delete the job.
	- at:
	    command: "ls -d / > /dev/null"
	    state: absent
	
	# Schedule a command to execute in 20 minutes making sure it is unique in the queue.
	- at:
	    command: "ls -d / > /dev/null"
	    unique: true
	    count: 20
	    units: minutes
	

snippet atomic_container
	EXAMPLES:
	# Install the etcd system container
	- atomic_container:
	    name: etcd
	    image: rhel/etcd
	    backend: ostree
	    state: latest
	    system: True
	    values:
	        - ETCD_NAME=etcd.server
	
	# Uninstall the etcd system container
	- atomic_container:
	    name: etcd
	    image: rhel/etcd
	    backend: ostree
	    state: absent
	    system: True
	
	RETURN VALUES:
	
	
	msg:
	    description: The command standard output
	    returned: always
	    type: string
	    sample: [u'Using default tag: latest ...']
	

snippet atomic_host
	EXAMPLES:
	# Upgrade the atomic host platform to the latest version (atomic host upgrade)
	- atomic_host:
	    revision: latest
	
	# Deploy a specific revision as the atomic host (atomic host deploy 23.130)
	- atomic_host:
	    revision: 23.130
	
	RETURN VALUES:
	
	
	msg:
	    description: The command standard output
	    returned: always
	    type: string
	    sample: 'Already on latest'
	

snippet atomic_image
	EXAMPLES:
	# Execute the run command on rsyslog container image (atomic run rhel7/rsyslog)
	- atomic_image:
	    name: rhel7/rsyslog
	    state: latest
	
	# Pull busybox to the OSTree backend
	- atomic_image:
	    name: busybox
	    state: latest
	    backend: ostree
	
	RETURN VALUES:
	
	
	msg:
	    description: The command standard output
	    returned: always
	    type: string
	    sample: [u'Using default tag: latest ...']
	

snippet authorized_key
	EXAMPLES:
	- name: Set authorized key took from file
	  authorized_key:
	    user: charlie
	    state: present
	    key: "{{ lookup('file', '/home/charlie/.ssh/id_rsa.pub') }}"
	
	- name: Set authorized key took from url
	  authorized_key:
	    user: charlie
	    state: present
	    key: https://github.com/charlie.keys
	
	- name: Set authorized key in alternate location
	  authorized_key:
	    user: charlie
	    state: present
	    key: "{{ lookup('file', '/home/charlie/.ssh/id_rsa.pub') }}"
	    path: /etc/ssh/authorized_keys/charlie
	    manage_dir: False
	
	- name: Set up multiple authorized keys
	  authorized_key:
	    user: deploy
	    state: present
	    key: '{{ item }}'
	  with_file:
	    - public_keys/doe-jane
	    - public_keys/doe-john
	
	- name: Set authorized key defining key options
	  authorized_key:
	    user: charlie
	    state: present
	    key: "{{ lookup('file', '/home/charlie/.ssh/id_rsa.pub') }}"
	    key_options: 'no-port-forwarding,from="10.0.1.1"'
	
	- name: Set authorized key without validating the TLS/SSL certificates
	  authorized_key:
	    user: charlie
	    state: present
	    key: https://github.com/user.keys
	    validate_certs: False
	
	- name: Set authorized key, removing all the authorized key already set
	  authorized_key:
	    user: root
	    key: '{{ item }}'
	    state: present
	    exclusive: True
	  with_file:
	    - public_keys/doe-jane
	
	- name: Set authorized key for user ubuntu copying it from current user
	  authorized_key:
	    user: ubuntu
	    state: present
	    key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
	
	RETURN VALUES:
	
	
	exclusive:
	  description: If the key has been forced to be exclusive or not.
	  returned: success
	  type: boolean
	  sample: False
	key:
	  description: The key that the module was running against.
	  returned: success
	  type: string
	  sample: https://github.com/user.keys
	key_option:
	  description: Key options related to the key.
	  returned: success
	  type: string
	  sample: null
	keyfile:
	  description: Path for authorized key file.
	  returned: success
	  type: string
	  sample: /home/user/.ssh/authorized_keys
	manage_dir:
	  description: Whether this module managed the directory of the authorized key file.
	  returned: success
	  type: boolean
	  sample: True
	path:
	  description: Alternate path to the authorized_keys file
	  returned: success
	  type: string
	  sample: null
	state:
	  description: Whether the given key (with the given key_options) should or should not be in the file
	  returned: success
	  type: string
	  sample: present
	unique:
	  description: Whether the key is unique
	  returned: success
	  type: boolean
	  sample: false
	user:
	  description: The username on the remote host whose authorized_keys file will be modified
	  returned: success
	  type: string
	  sample: user
	validate_certs:
	  description: This only applies if using a https url as the source of the keys. If set to C(no), the SSL certificates will not be validated.
	  returned: success
	  type: boolean
	  sample: true
	

snippet get.sh
	#ansible-doc -l  |awk '{print $1}'  > tmp
	set -x 
	for each in $( cat tmp  ); 
	do  
	    ansible-doc  $each  |sed -n '/^EXAMPLES:/,$p'  > $each; 
	done
	
	rm azure* -f
	rm  bigip_* -f
	rm junos_* -f
	rm avi_* 
	rm avi_*  -f
	rm --rf ce_* 
	rm -rf ce_* 
	rm -rf netapp_e_* -f
	rm -rf aci_*
	rm -rf ec2_* 
	rm -rf nxos_* 
	rm -rf rax* 
	rm -rf ovirt* 
	rm -rf vmware_* 
	rm -rf panos_* 
	rm -rf ios* 
	rm -rf cnos_* 
	rm -rf a10_* 
	rm -rf  tower_* 
	rm -rf vyos_* 
	rm -rf eos_* 
	rm -rf aws_* 
	rm -rf netscaler* 
	rm -rf pn_* 
	rm -rf gce* 
	rm -rf cs_* 
	rm -rf dellos* 
	rm -rf ipa_* 
	rm -rf s3_* 
	rm -rf elb_* 
	rm -rf sros_* 
	rm -rf oneview_* 
	rm -rf cl* 
	rm -rf cyberark_* 
	rm -rf na_*

snippet awall
	EXAMPLES:
	- name: Enable "foo" and "bar" policy
	  awall:
	    name: foo,bar
	    state: enabled
	
	- name: Disable "foo" and "bar" policy and activate new rules
	  awall:
	    name: foo,bar
	    state: disabled
	    activate: False
	
	- name: Activate currently enabled firewall rules
	  awall:
	    activate: True
	
	RETURN VALUES:
	
	 # 

snippet bcf_switch
	EXAMPLES:
	- name: bcf leaf switch
	  bcf_switch:
	    name: Rack1Leaf1
	    fabric_role: leaf
	    leaf_group: R1
	    mac: 00:00:00:02:00:02
	    controller: '{{ inventory_hostname }}'
	    state: present
	    validate_certs: false
	
	RETURN VALUES:
	
	 # 

snippet beadm
	EXAMPLES:
	- name: Create ZFS boot environment
	  beadm:
	    name: upgrade-be
	    state: present
	
	- name: Create ZFS boot environment from existing inactive boot environment
	  beadm:
	    name: upgrade-be
	    snapshot: be@old
	    state: present
	
	- name: Create ZFS boot environment with compression enabled and description "upgrade"
	  beadm:
	    name: upgrade-be
	    options: "compression=on"
	    description: upgrade
	    state: present
	
	- name: Delete ZFS boot environment
	  beadm:
	    name: old-be
	    state: absent
	
	- name: Mount ZFS boot environment on /tmp/be
	  beadm:
	    name: BE
	    mountpoint: /tmp/be
	    state: mounted
	
	- name: Unmount ZFS boot environment
	  beadm:
	    name: BE
	    state: unmounted
	
	- name: Activate ZFS boot environment
	  beadm:
	    name: upgrade-be
	    state: activated
	
	RETURN VALUES:
	
	
	name:
	    description: BE name
	    returned: always
	    type: string
	    sample: pre-upgrade
	snapshot:
	    description: ZFS snapshot to create BE from
	    returned: always
	    type: string
	    sample: rpool/ROOT/oi-hipster@fresh
	description:
	    description: BE description
	    returned: always
	    type: string
	    sample: Upgrade from 9.0 to 10.0
	options:
	    description: BE additional options
	    returned: always
	    type: string
	    sample: compression=on
	mountpoint:
	    description: BE mountpoint
	    returned: always
	    type: string
	    sample: /mnt/be
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: present
	force:
	    description: if forced action is wanted
	    returned: always
	    type: boolean
	    sample: False
	

snippet bearychat
	EXAMPLES:
	- name: Send notification message via BearyChat
	  local_action:
	    module: bearychat
	    url: |
	      https://hook.bearychat.com/=ae2CF/incoming/e61bd5c57b164e04b11ac02e66f47f60
	    text: "{{ inventory_hostname }} completed"
	
	- name: Send notification message via BearyChat all options
	  local_action:
	    module: bearychat
	    url: |
	      https://hook.bearychat.com/=ae2CF/incoming/e61bd5c57b164e04b11ac02e66f47f60
	    text: "{{ inventory_hostname }} completed"
	    markdown: no
	    channel: "#ansible"
	    attachments:
	      - title: "Ansible on {{ inventory_hostname }}"
	        text: "May the Force be with you."
	        color: "#ffffff"
	        images:
	          - http://example.com/index.png
	
	RETURN VALUES:
	
	
	msg:
	    description: execution result
	    returned: success
	    type: string
	    sample: "OK"
	

snippet bigmon_chain
	EXAMPLES:
	- name: bigmon inline service chain
	  bigmon_chain:
	    name: MyChain
	    controller: '{{ inventory_hostname }}'
	    state: present
	    validate_certs: false
	
	RETURN VALUES:
	
	 # 

snippet bigmon_policy
	EXAMPLES:
	- name: policy to aggregate filter and deliver data center (DC) 1 traffic
	  bigmon_policy:
	    name: policy1
	    policy_description: DC 1 traffic policy
	    action: drop
	    controller: '{{ inventory_hostname }}'
	    state: present
	    validate_certs: false
	
	RETURN VALUES:
	
	 # 

snippet bigpanda
	EXAMPLES:
	- bigpanda:
	    component: myapp
	    version: '1.3'
	    token: '{{ bigpanda_token }}'
	    state: started
	
	- bigpanda:
	    component: myapp
	    version: '1.3'
	    token: '{{ bigpanda_token }}'
	    state: finished
	
	# If outside servers aren't reachable from your machine, use delegate_to and override hosts:
	- bigpanda:
	    component: myapp
	    version: '1.3'
	    token: '{{ bigpanda_token }}'
	    hosts: '{{ ansible_hostname }}'
	    state: started
	  delegate_to: localhost
	  register: deployment
	
	- bigpanda:
	    component: '{{ deployment.component }}'
	    version: '{{ deployment.version }}'
	    token: '{{ deployment.token }}'
	    state: finished
	  delegate_to: localhost
	

snippet blockinfile
	EXAMPLES:
	# Before 2.3, option 'dest' or 'name' was used instead of 'path'
	- name: insert/update "Match User" configuration block in /etc/ssh/sshd_config
	  blockinfile:
	    path: /etc/ssh/sshd_config
	    block: |
	      Match User ansible-agent
	      PasswordAuthentication no
	
	- name: insert/update eth0 configuration stanza in /etc/network/interfaces
	        (it might be better to copy files into /etc/network/interfaces.d/)
	  blockinfile:
	    path: /etc/network/interfaces
	    block: |
	      iface eth0 inet static
	          address 192.0.2.23
	          netmask 255.255.255.0
	
	- name: insert/update configuration using a local file and validate it
	  blockinfile:
	    block: "{{ lookup('file', './local/ssh_config') }}"
	    dest: "/etc/ssh/ssh_config"
	    backup: yes
	    validate: "/usr/sbin/sshd -T -f %s"
	
	- name: insert/update HTML surrounded by custom markers after <body> line
	  blockinfile:
	    path: /var/www/html/index.html
	    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
	    insertafter: "<body>"
	    content: |
	      <h1>Welcome to {{ ansible_hostname }}</h1>
	      <p>Last updated on {{ ansible_date_time.iso8601 }}</p>
	
	- name: remove HTML as well as surrounding markers
	  blockinfile:
	    path: /var/www/html/index.html
	    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
	    content: ""
	
	- name: Add mappings to /etc/hosts
	  blockinfile:
	    path: /etc/hosts
	    block: |
	      {{ item.ip }} {{ item.name }}
	    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.name }}"
	  with_items:
	    - { name: host1, ip: 10.10.1.10 }
	    - { name: host2, ip: 10.10.1.11 }
	    - { name: host3, ip: 10.10.1.12 }
	

snippet boundary_meter
	EXAMPLES:
	- name: Create meter
	  boundary_meter:
	    apiid: AAAAAA
	    apikey: BBBBBB
	    state: present
	    name: '{{ inventory_hostname }}'
	
	- name: Delete meter
	  boundary_meter:
	    apiid: AAAAAA
	    apikey: BBBBBB
	    state: absent
	    name: '{{ inventory_hostname }}'
	

snippet bower
	EXAMPLES:
	- name: Install "bootstrap" bower package.
	  bower:
	    name: bootstrap
	
	- name: Install "bootstrap" bower package on version 3.1.1.
	  bower:
	    name: bootstrap
	    version: '3.1.1'
	
	- name: Remove the "bootstrap" bower package.
	  bower:
	    name: bootstrap
	    state: absent
	
	- name: Install packages based on bower.json.
	  bower:
	    path: /app/location
	
	- name: Update packages based on bower.json to their latest version.
	  bower:
	    path: /app/location
	    state: latest
	
	# install bower locally and run from there
	- npm:
	    path: /app/location
	    name: bower
	    global: no
	- bower:
	    path: /app/location
	    relative_execpath: node_modules/.bin
	

snippet bundler
	EXAMPLES:
	# Installs gems from a Gemfile in the current directory
	- bundler:
	    state: present
	    executable: ~/.rvm/gems/2.1.5/bin/bundle
	
	# Excludes the production group from installing
	- bundler:
	    state: present
	    exclude_groups: production
	
	# Only install gems from the default and production groups
	- bundler:
	    state: present
	    deployment_mode: yes
	
	# Installs gems using a Gemfile in another directory
	- bundler:
	    state: present
	    gemfile: ../rails_project/Gemfile
	
	# Updates Gemfile in another directory
	- bundler:
	    state: latest
	    chdir: ~/rails_project
	

snippet campfire
	EXAMPLES:
	- campfire:
	    subscription: foo
	    token: 12345
	    room: 123
	    msg: Task completed.
	
	- campfire:
	    subscription: foo
	    token: 12345
	    room: 123
	    notify: loggins
	    msg: Task completed ... with feeling.
	

snippet capabilities
	EXAMPLES:
	# Set cap_sys_chroot+ep on /foo
	- capabilities:
	    path: /foo
	    capability: cap_sys_chroot+ep
	    state: present
	
	# Remove cap_net_bind_service from /bar
	- capabilities:
	    path: /bar
	    capability: cap_net_bind_service
	    state: absent
	

snippet catapult
	EXAMPLES:
	- name: Send a mms to multiple users
	  catapult:
	    src: "+15035555555"
	    dest:
	      - "+12525089000"
	      - "+12018994225"
	    media: "http://example.com/foobar.jpg"
	    msg: "Task is complete"
	    user_id: "{{ user_id }}"
	    api_token: "{{ api_token }}"
	    api_secret: "{{ api_secret }}"
	
	- name: Send a sms to a single user
	  catapult:
	    src: "+15035555555"
	    dest: "+12018994225"
	    msg: "Consider yourself notified"
	    user_id: "{{ user_id }}"
	    api_token: "{{ api_token }}"
	    api_secret: "{{ api_secret }}"
	
	RETURN VALUES:
	
	
	changed:
	    description: Whether the api accepted the message.
	    returned: always
	    type: boolean
	    sample: True
	

snippet copy
	EXAMPLES:
	# Example from Ansible Playbooks
	- copy:
	    src: /srv/myfiles/foo.conf
	    dest: /etc/foo.conf
	    owner: foo
	    group: foo
	    mode: 0644
	
	# The same example as above, but using a symbolic mode equivalent to 0644
	- copy:
	    src: /srv/myfiles/foo.conf
	    dest: /etc/foo.conf
	    owner: foo
	    group: foo
	    mode: u=rw,g=r,o=r
	
	# Another symbolic mode example, adding some permissions and removing others
	- copy:
	    src: /srv/myfiles/foo.conf
	    dest: /etc/foo.conf
	    owner: foo
	    group: foo
	    mode: u+rw,g-wx,o-rwx
	
	# Copy a new "ntp.conf file into place, backing up the original if it differs from the copied version
	- copy:
	    src: /mine/ntp.conf
	    dest: /etc/ntp.conf
	    owner: root
	    group: root
	    mode: 0644
	    backup: yes
	
	# Copy a new "sudoers" file into place, after passing validation with visudo
	- copy:
	    src: /mine/sudoers
	    dest: /etc/sudoers
	    validate: /usr/sbin/visudo -cf %s
	
	# Copy a "sudoers" file on the remote machine for editing
	- copy:
	    src: /etc/sudoers
	    dest: /etc/sudoers.edit
	    remote_src: yes
	    validate: /usr/sbin/visudo -cf %s
	
	# Create a CSV file from your complete inventory using an inline template
	- hosts: all
	  tasks:
	  - copy:
	      content: |
	        HOSTNAME;IPADDRESS;FQDN;OSNAME;OSVERSION;PROCESSOR;ARCHITECTURE;MEMORY;
	        {% for host in hostvars %}
	        {%   set vars = hostvars[host|string] %}
	        {{ vars.ansible_hostname }};{{ vars.remote_host }};{{ vars.ansible_fqdn }};{{ vars.ansible_distribution }};{{ vars.ansible_distribution_version }};{{ vars.ansible_processor[1] }};{{ vars.ansible_architecture }};{{ (vars.ansible_memtotal_mb/1024)|round|int }};  # NOQA
	        {% endfor %}
	      dest: /some/path/systems.csv
	      backup: yes
	    run_once: yes
	    delegate_to: localhost
	
	RETURN VALUES:
	
	
	dest:
	    description: destination file/path
	    returned: success
	    type: string
	    sample: /path/to/file.txt
	src:
	    description: source file used for the copy on the target machine
	    returned: changed
	    type: string
	    sample: /home/httpd/.ansible/tmp/ansible-tmp-1423796390.97-147729857856000/source
	md5sum:
	    description: md5 checksum of the file after running copy
	    returned: when supported
	    type: string
	    sample: 2a5aeecc61dc98c4d780b14b330e3282
	checksum:
	    description: sha1 checksum of the file after running copy
	    returned: success
	    type: string
	    sample: 6e642bb8dd5c2e027bf21dd923337cbb4214f827
	backup_file:
	    description: name of backup file created
	    returned: changed and if backup=yes
	    type: string
	    sample: /path/to/file.txt.2015-02-12@22:09~
	gid:
	    description: group id of the file, after execution
	    returned: success
	    type: int
	    sample: 100
	group:
	    description: group of the file, after execution
	    returned: success
	    type: string
	    sample: httpd
	owner:
	    description: owner of the file, after execution
	    returned: success
	    type: string
	    sample: httpd
	uid:
	    description: owner id of the file, after execution
	    returned: success
	    type: int
	    sample: 100
	mode:
	    description: permissions of the target, after execution
	    returned: success
	    type: string
	    sample: 0644
	size:
	    description: size of the target, after execution
	    returned: success
	    type: int
	    sample: 1220
	state:
	    description: state of the target, after execution
	    returned: success
	    type: string
	    sample: file
	

snippet circonus_annotation
	EXAMPLES:
	# Create a simple annotation event with a source, defaults to start and end time of now
	- circonus_annotation:
	    api_key: XXXXXXXXXXXXXXXXX
	    title: App Config Change
	    description: This is a detailed description of the config change
	    category: This category groups like annotations
	# Create an annotation with a duration of 5 minutes and a default start time of now
	- circonus_annotation:
	    api_key: XXXXXXXXXXXXXXXXX
	    title: App Config Change
	    description: This is a detailed description of the config change
	    category: This category groups like annotations
	    duration: 300
	# Create an annotation with a start_time and end_time
	- circonus_annotation:
	    api_key: XXXXXXXXXXXXXXXXX
	    title: App Config Change
	    description: This is a detailed description of the config change
	    category: This category groups like annotations
	    start_time: 1395940006
	    end_time: 1395954407
	
	RETURN VALUES:
	
	
	annotation:
	    description: details about the created annotation
	    returned: success
	    type: complex
	    contains:
	        _cid:
	            description: annotation identifier
	            returned: success
	            type: string
	            sample: /annotation/100000
	        _created:
	            description: creation timestamp
	            returned: success
	            type: int
	            sample: 1502236928
	        _last_modified:
	            description: last modification timestamp
	            returned: success
	            type: int
	            sample: 1502236928
	        _last_modified_by:
	            description: last modified by
	            returned: success
	            type: string
	            sample: /user/1000
	        category:
	            description: category of the created annotation
	            returned: success
	            type: string
	            sample: alerts
	        title:
	            description: title of the created annotation
	            returned: success
	            type: string
	            sample: WARNING
	        description:
	            description: description of the created annotation
	            returned: success
	            type: string
	            sample: Host is down.
	        start:
	            description: timestamp, since annotation applies
	            returned: success
	            type: int
	            sample: Host is down.
	        stop:
	            description: timestamp, since annotation ends
	            returned: success
	            type: string
	            sample: Host is down.
	        rel_metrics:
	            description: Array of metrics related to this annotation, each metrics is a string.
	            returned: success
	            type: list
	            sample:
	                - 54321_kbps
	

snippet cisco_spark
	EXAMPLES:
	# Note: The following examples assume a variable file has been imported
	# that contains the appropriate information.
	
	- name: Cisco Spark - Markdown Message to a Room
	  cisco_spark:
	    recipient_type: roomId
	    recipient_id: "{{ room_id }}"
	    message_type: markdown
	    personal_token: "{{ token }}"
	    message: "**Cisco Spark Ansible Module - Room Message in Markdown**"
	
	- name: Cisco Spark - Text Message to a Room
	  cisco_spark:
	    recipient_type: roomId
	    recipient_id: "{{ room_id }}"
	    message_type: text
	    personal_token: "{{ token }}"
	    message: "Cisco Spark Ansible Module - Room Message in Text"
	
	- name: Cisco Spark - Text Message by an Individuals ID
	  cisco_spark:
	    recipient_type: toPersonId
	    recipient_id: "{{ person_id}}"
	    message_type: text
	    personal_token: "{{ token }}"
	    message: "Cisco Spark Ansible Module - Text Message to Individual by ID"
	
	- name: Cisco Spark - Text Message by an Individuals E-Mail Address
	  cisco_spark:
	    recipient_type: toPersonEmail
	    recipient_id: "{{ person_email }}"
	    message_type: text
	    personal_token: "{{ token }}"
	    message: "Cisco Spark Ansible Module - Text Message to Individual by E-Mail"
	
	RETURN VALUES:
	
	
	status_code:
	  description:
	    - The Response Code returned by the Spark API.
	    - Full Responsde Code explanations can be found at U(https://developer.ciscospark.com/endpoint-messages-post.html).
	  returned: always
	  type: int
	  sample: 200
	
	message:
	    description:
	      - The Response Message returned by the Spark API.
	      - Full Responsde Code explanations can be found at U(https://developer.ciscospark.com/endpoint-messages-post.html.
	    returned: always
	    type: string
	    sample: OK (585 bytes)
	

snippet command
	EXAMPLES:
	- name: return motd to registered var
	  command: cat /etc/motd
	  register: mymotd
	
	- name: Run the command if the specified file does not exist.
	  command: /usr/bin/make_database.sh arg1 arg2 creates=/path/to/database
	
	# You can also use the 'args' form to provide the options.
	- name: This command will change the working directory to somedir/ and will only run when /path/to/database doesn't exist.
	  command: /usr/bin/make_database.sh arg1 arg2
	  args:
	    chdir: somedir/
	    creates: /path/to/database
	
	- name: safely use templated variable to run command. Always use the quote filter to avoid injection issues.
	  command: cat {{ myfile|quote }}
	  register: myoutput
	

snippet composer
	EXAMPLES:
	# Downloads and installs all the libs and dependencies outlined in the /path/to/project/composer.lock
	- composer:
	    command: install
	    working_dir: /path/to/project
	
	- composer:
	    command: require
	    arguments: my/package
	    working_dir: /path/to/project
	
	# Clone project and install with all dependencies
	- composer:
	    command: create-project
	    arguments: package/package /path/to/project ~1.0
	    working_dir: /path/to/project
	    prefer_dist: yes
	
	# Installs package globally
	- composer:
	    command: require
	    global_command: yes
	    arguments: my/package
	

snippet consul
	EXAMPLES:
	- name: register nginx service with the local consul agent
	  consul:
	    service_name: nginx
	    service_port: 80
	
	- name: register nginx service with curl check
	  consul:
	    service_name: nginx
	    service_port: 80
	    script: curl http://localhost
	    interval: 60s
	
	- name: register nginx with an http check
	  consul:
	    service_name: nginx
	    service_port: 80
	    interval: 60s
	    http: http://localhost:80/status
	
	- name: register external service nginx available at 10.1.5.23
	  consul:
	    service_name: nginx
	    service_port: 80
	    service_address: 10.1.5.23
	
	- name: register nginx with some service tags
	  consul:
	    service_name: nginx
	    service_port: 80
	    tags:
	      - prod
	      - webservers
	
	- name: remove nginx service
	  consul:
	    service_name: nginx
	    state: absent
	
	- name: register celery worker service
	  consul:
	    service_name: celery-worker
	    tags:
	      - prod
	      - worker
	
	- name: create a node level check to test disk usage
	  consul:
	    check_name: Disk usage
	    check_id: disk_usage
	    script: /opt/disk_usage.py
	    interval: 5m
	
	- name: register an http check against a service that's already registered
	  consul:
	    check_name: nginx-check2
	    check_id: nginx-check2
	    service_id: nginx
	    interval: 60s
	    http: http://localhost:80/morestatus
	

snippet consul_acl
	EXAMPLES:
	- name: create an ACL with rules
	  consul_acl:
	    host: consul1.example.com
	    mgmt_token: some_management_acl
	    name: Foo access
	    rules:
	      - key: "foo"
	        policy: read
	      - key: "private/foo"
	        policy: deny
	
	- name: create an ACL with a specific token
	  consul_acl:
	    host: consul1.example.com
	    mgmt_token: some_management_acl
	    name: Foo access
	    token: my-token
	    rules:
	      - key: "foo"
	        policy: read
	
	- name: update the rules associated to an ACL token
	  consul_acl:
	    host: consul1.example.com
	    mgmt_token: some_management_acl
	    name: Foo access
	    token: some_client_token
	    rules:
	      - event: "bbq"
	        policy: write
	      - key: "foo"
	        policy: read
	      - key: "private"
	        policy: deny
	      - keyring: write
	      - node: "hgs4"
	        policy: write
	      - operator: read
	      - query: ""
	        policy: write
	      - service: "consul"
	        policy: write
	      - session: "standup"
	        policy: write
	
	- name: remove a token
	  consul_acl:
	    host: consul1.example.com
	    mgmt_token: some_management_acl
	    token: 172bd5c8-9fe9-11e4-b1b0-3c15c2c9fd5e
	    state: absent
	
	RETURN VALUES:
	
	
	token:
	    description: the token associated to the ACL (the ACL's ID)
	    returned: success
	    type: string
	    sample: a2ec332f-04cf-6fba-e8b8-acf62444d3da
	rules:
	    description: the HCL JSON representation of the rules associated to the ACL, in the format described in the
	                 Consul documentation (https://www.consul.io/docs/guides/acl.html#rule-specification).
	    returned: I(status) == "present"
	    type: string
	    sample: {
	        "key": {
	            "foo": {
	                "policy": "write"
	            },
	            "bar": {
	                "policy": "deny"
	            }
	        }
	    }
	operation:
	    description: the operation performed on the ACL
	    returned: changed
	    type: string
	    sample: update
	

snippet consul_kv
	EXAMPLES:
	- name: add or update the value associated with a key in the key/value store
	    consul_kv:
	      key: somekey
	      value: somevalue
	
	  - name: remove a key from the store
	    consul_kv:
	      key: somekey
	      state: absent
	
	  - name: add a node to an arbitrary group via consul inventory (see consul.ini)
	    consul_kv:
	      key: ansible/groups/dc1/somenode
	      value: 'top_secret'
	
	  - name: Register a key/value pair with an associated session
	    consul_kv:
	      key: stg/node/server_birthday
	      value: 20160509
	      session: "{{ sessionid }}"
	      state: acquire
	

snippet consul_session
	EXAMPLES:
	- name: register basic session with consul
	  consul_session:
	    name: session1
	
	- name: register a session with an existing check
	  consul_session:
	    name: session_with_check
	    checks:
	      - existing_check_name
	
	- name: register a session with lock_delay
	  consul_session:
	    name: session_with_delay
	    delay: 20s
	
	- name: retrieve info about session by id
	  consul_session: id=session_id state=info
	
	- name: retrieve active sessions
	  consul_session: state=list
	

snippet cpanm
	EXAMPLES:
	# install Dancer perl package
	- cpanm:
	    name: Dancer
	
	# install version 0.99_05 of the Plack perl package
	- cpanm:
	    name: MIYAGAWA/Plack-0.99_05.tar.gz
	
	# install Dancer into the specified locallib
	- cpanm:
	    name: Dancer
	    locallib: /srv/webapps/my_app/extlib
	
	# install perl dependencies from local directory
	- cpanm:
	    from_path: /srv/webapps/my_app/src/
	
	# install Dancer perl package without running the unit tests in indicated locallib
	- cpanm:
	    name: Dancer
	    notest: True
	    locallib: /srv/webapps/my_app/extlib
	
	# install Dancer perl package from a specific mirror
	- cpanm:
	    name: Dancer
	    mirror: 'http://cpan.cpantesters.org/'
	
	# install Dancer perl package into the system root path
	- cpanm:
	    name: Dancer
	    system_lib: yes
	
	# install Dancer if it's not already installed
	# OR the installed version is older than version 1.0
	- cpanm:
	    name: Dancer
	    version: '1.0'
	

snippet cron
	EXAMPLES:
	# Ensure a job that runs at 2 and 5 exists.
	# Creates an entry like "0 5,2 * * ls -alh > /dev/null"
	- cron:
	    name: "check dirs"
	    minute: "0"
	    hour: "5,2"
	    job: "ls -alh > /dev/null"
	
	# Ensure an old job is no longer present. Removes any job that is prefixed
	# by "#Ansible: an old job" from the crontab
	- cron:
	    name: "an old job"
	    state: absent
	
	# Creates an entry like "@reboot /some/job.sh"
	- cron:
	    name: "a job for reboot"
	    special_time: reboot
	    job: "/some/job.sh"
	
	# Creates an entry like "PATH=/opt/bin" on top of crontab
	- cron:
	    name: PATH
	    env: yes
	    value: /opt/bin
	
	# Creates an entry like "APP_HOME=/srv/app" and insert it after PATH
	# declaration
	- cron:
	    name: APP_HOME
	    env: yes
	    value: /srv/app
	    insertafter: PATH
	
	# Creates a cron file under /etc/cron.d
	- cron:
	    name: yum autoupdate
	    weekday: 2
	    minute: 0
	    hour: 12
	    user: root
	    job: "YUMINTERACTIVE: 0 /usr/sbin/yum-autoupdate"
	    cron_file: ansible_yum-autoupdate
	
	# Removes a cron file from under /etc/cron.d
	- cron:
	    name: "yum autoupdate"
	    cron_file: ansible_yum-autoupdate
	    state: absent
	
	# Removes "APP_HOME" environment variable from crontab
	- cron:
	    name: APP_HOME
	    env: yes
	    state: absent
	

snippet cronvar
	EXAMPLES:
	# Ensure a variable exists.
	# Creates an entry like "EMAIL=doug@ansibmod.con.com"
	- cronvar:
	    name: EMAIL
	    value: doug@ansibmod.con.com
	
	# Make sure a variable is gone.  This will remove any variable named
	# "LEGACY"
	- cronvar:
	    name: LEGACY
	    state: absent
	
	# Adds a variable to a file under /etc/cron.d
	- cronvar:
	    name: LOGFILE
	    value: /var/log/yum-autoupdate.log
	    user: root
	    cron_file: ansible_yum-autoupdate
	

snippet crypttab
	EXAMPLES:
	# Since column is a special character in YAML, if your string contains a column, it's better to use quotes around the string
	- name: Set the options explicitly a device which must already exist
	  crypttab:
	    name: luks-home
	    state: present
	    opts: 'discard,cipher=aes-cbc-essiv:sha256'
	
	- name: Add the 'discard' option to any existing options for all devices
	  crypttab:
	    name: '{{ item.device }}'
	    state: opts_present
	    opts: discard
	  with_items: '{{ ansible_mounts }}'
	  when: "'/dev/mapper/luks-' in {{ item.device }}"
	

snippet dnf
	EXAMPLES:
	- name: install the latest version of Apache
	  dnf:
	    name: httpd
	    state: latest
	
	- name: remove the Apache package
	  dnf:
	    name: httpd
	    state: absent
	
	- name: install the latest version of Apache from the testing repo
	  dnf:
	    name: httpd
	    enablerepo: testing
	    state: present
	
	- name: upgrade all packages
	  dnf:
	    name: "*"
	    state: latest
	
	- name: install the nginx rpm from a remote repo
	  dnf:
	    name: 'http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm'
	    state: present
	
	- name: install nginx rpm from a local file
	  dnf:
	    name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install the 'Development tools' package group
	  dnf:
	    name: '@Development tools'
	    state: present
	
	- name: Autoremove unneeded packages installed as dependencies
	  dnf:
	    autoremove: yes
	
	- name: Uninstall httpd but keep its dependencies
	  dnf:
	    name: httpd
	    state: absent
	    autoremove: no
	

snippet cv_server_provision
	EXAMPLES:
	- name: Get current configuration for interface Ethernet2
	  cv_server_provision:
	    host: cvp_node
	    username: cvp_user
	    password: cvp_pass
	    protocol: https
	    server_name: new_server
	    switch_name: eos_switch_1
	    switch_port: 2
	    template: template_file.j2
	    action: show
	
	- name: Remove existing configuration from interface Ethernet2. Run task.
	  cv_server_provision:
	    host: cvp_node
	    username: cvp_user
	    password: cvp_pass
	    protocol: https
	    server_name: new_server
	    switch_name: eos_switch_1
	    switch_port: 2
	    template: template_file.j2
	    action: remove
	    auto_run: True
	
	- name: Add template configuration to interface Ethernet2. No VLAN. Run task.
	  cv_server_provision:
	    host: cvp_node
	    username: cvp_user
	    password: cvp_pass
	    protocol: https
	    server_name: new_server
	    switch_name: eos_switch_1
	    switch_port: 2
	    template: single_attached_trunk.j2
	    action: add
	    auto_run: True
	
	- name: Add template with VLAN configuration to interface Ethernet2. Run task.
	  cv_server_provision:
	    host: cvp_node
	    username: cvp_user
	    password: cvp_pass
	    protocol: https
	    server_name: new_server
	    switch_name: eos_switch_1
	    switch_port: 2
	    port_vlan: 22
	    template: single_attached_vlan.j2
	    action: add
	    auto_run: True
	
	RETURN VALUES:
	
	
	changed:
	  description: Signifies if a change was made to the configlet
	  returned: success
	  type: bool
	  sample: true
	currentConfigBlock:
	  description: The current config block for the user specified interface
	  returned: when action = show
	  type: string
	  sample: |
	    interface Ethernet4
	    !
	newConfigBlock:
	  description: The new config block for the user specified interface
	  returned: when action = add or remove
	  type: string
	  sample: |
	    interface Ethernet3
	        description example
	        no switchport
	    !
	oldConfigBlock:
	  description: The current config block for the user specified interface
	               before any changes are made
	  returned: when action = add or remove
	  type: string
	  sample: |
	    interface Ethernet3
	    !
	fullConfig:
	  description: The full config of the configlet after being updated
	  returned: when action = add or remove
	  type: string
	  sample: |
	    !
	    interface Ethernet3
	    !
	    interface Ethernet4
	    !
	updateConfigletResponse:
	  description: Response returned from CVP when configlet update is triggered
	  returned: when action = add or remove and configuration changes
	  type: string
	  sample: "Configlet veos1-server successfully updated and task initiated."
	portConfigurable:
	  description: Signifies if the user specified port has an entry in the
	               configlet that Ansible has access to
	  returned: success
	  type: bool
	  sample: true
	switchConfigurable:
	  description: Signifies if the user specified switch has a configlet
	               applied to it that CVP is allowed to edit
	  returned: success
	  type: bool
	  sample: true
	switchInfo:
	  description: Information from CVP describing the switch being configured
	  returned: success
	  type: dictionary
	  sample: {"architecture": "i386",
	           "bootupTimeStamp": 1491264298.21,
	           "complianceCode": "0000",
	           "complianceIndication": "NONE",
	           "deviceInfo": "Registered",
	           "deviceStatus": "Registered",
	           "fqdn": "veos1",
	           "hardwareRevision": "",
	           "internalBuildId": "12-12",
	           "internalVersion": "4.17.1F-11111.4171F",
	           "ipAddress": "192.168.1.20",
	           "isDANZEnabled": "no",
	           "isMLAGEnabled": "no",
	           "key": "00:50:56:5d:e5:e0",
	           "lastSyncUp": 1496432895799,
	           "memFree": 472976,
	           "memTotal": 1893460,
	           "modelName": "vEOS",
	           "parentContainerId": "container_13_5776759195930",
	           "serialNumber": "",
	           "systemMacAddress": "00:50:56:5d:e5:e0",
	           "taskIdList": [],
	           "tempAction": null,
	           "type": "netelement",
	           "unAuthorized": false,
	           "version": "4.17.1F",
	           "ztpMode": "false"}
	taskCompleted:
	  description: Signifies if the task created and executed has completed successfully
	  returned: when action = add or remove, and auto_run = true,
	            and configuration changes
	  type: bool
	  sample: true
	taskCreated:
	  description: Signifies if a task was created due to configlet changes
	  returned: when action = add or remove, and auto_run = true or false,
	            and configuration changes
	  type: bool
	  sample: true
	taskExecuted:
	  description: Signifies if the automation executed the spawned task
	  returned: when action = add or remove, and auto_run = true,
	            and configuration changes
	  type: bool
	  sample: true
	taskId:
	  description: The task ID created by CVP because of changes to configlet
	  returned: when action = add or remove, and auto_run = true or false,
	            and configuration changes
	  type: string
	  sample: "500"
	

snippet data_pipeline
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# Create pipeline
	- data_pipeline:
	    name: test-dp
	    region: us-west-2
	    objects: "{{pipelineObjects}}"
	    parameters: "{{pipelineParameters}}"
	    values: "{{pipelineValues}}"
	    tags:
	      key1: val1
	      key2: val2
	    state: present
	
	# Example populating and activating a pipeline that demonstrates two ways of providing pipeline objects
	- data_pipeline:
	  name: test-dp
	  objects:
	    - "id": "DefaultSchedule"
	      "name": "Every 1 day"
	      "fields":
	        - "key": "period"
	          "stringValue": "1 days"
	        - "key": "type"
	          "stringValue": "Schedule"
	        - "key": "startAt"
	          "stringValue": "FIRST_ACTIVATION_DATE_TIME"
	    - "id": "Default"
	      "name": "Default"
	      "fields": [ { "key": "resourceRole", "stringValue": "my_resource_role" },
	                  { "key": "role", "stringValue": "DataPipelineDefaultRole" },
	                  { "key": "pipelineLogUri", "stringValue": "s3://my_s3_log.txt" },
	                  { "key": "scheduleType", "stringValue": "cron" },
	                  { "key": "schedule", "refValue": "DefaultSchedule" },
	                  { "key": "failureAndRerunMode", "stringValue": "CASCADE" } ]
	  state: active
	
	# Activate pipeline
	- data_pipeline:
	    name: test-dp
	    region: us-west-2
	    state: active
	
	# Delete pipeline
	- data_pipeline:
	    name: test-dp
	    region: us-west-2
	    state: absent
	
	RETURN VALUES:
	
	
	changed:
	  description: whether the data pipeline has been modified
	  type: bool
	  returned: always
	  sample:
	    changed: true
	result:
	  description:
	    - Contains the data pipeline data (data_pipeline) and a return message (msg).
	      If the data pipeline exists data_pipeline will contain the keys description, name,
	      pipeline_id, state, tags, and unique_id. If the data pipeline does not exist then
	      data_pipeline will be an empty dict. The msg describes the status of the operation.
	  returned: always
	  type: dict
	

snippet datadog_event
	EXAMPLES:
	# Post an event with low priority
	- datadog_event:
	    title: Testing from ansible
	    text: Test
	    priority: low
	    api_key: 9775a026f1ca7d1c6c5af9d94d9595a4
	    app_key: j4JyCYfefWHhgFgiZUqRm63AXHNZQyPGBfJtAzmN
	# Post an event with several tags
	- datadog_event:
	    title: Testing from ansible
	    text: Test
	    api_key: 9775a026f1ca7d1c6c5af9d94d9595a4
	    app_key: j4JyCYfefWHhgFgiZUqRm63AXHNZQyPGBfJtAzmN
	    tags: 'aa,bb,#host:{{ inventory_hostname }}'
	

snippet datadog_monitor
	EXAMPLES:
	# Create a metric monitor
	datadog_monitor:
	  type: "metric alert"
	  name: "Test monitor"
	  state: "present"
	  query: "datadog.agent.up.over('host:host1').last(2).count_by_status()"
	  message: "Host [[host.name]] with IP [[host.ip]] is failing to report to datadog."
	  api_key: "9775a026f1ca7d1c6c5af9d94d9595a4"
	  app_key: "87ce4a24b5553d2e482ea8a8500e71b8ad4554ff"
	
	# Deletes a monitor
	datadog_monitor:
	  name: "Test monitor"
	  state: "absent"
	  api_key: "9775a026f1ca7d1c6c5af9d94d9595a4"
	  app_key: "87ce4a24b5553d2e482ea8a8500e71b8ad4554ff"
	
	# Mutes a monitor
	datadog_monitor:
	  name: "Test monitor"
	  state: "mute"
	  silenced: '{"*":None}'
	  api_key: "9775a026f1ca7d1c6c5af9d94d9595a4"
	  app_key: "87ce4a24b5553d2e482ea8a8500e71b8ad4554ff"
	
	# Unmutes a monitor
	datadog_monitor:
	  name: "Test monitor"
	  state: "unmute"
	  api_key: "9775a026f1ca7d1c6c5af9d94d9595a4"
	  app_key: "87ce4a24b5553d2e482ea8a8500e71b8ad4554ff"
	

snippet dconf
	EXAMPLES:
	- name: Configure available keyboard layouts in Gnome
	  dconf:
	    key: "/org/gnome/desktop/input-sources/sources"
	    value: "[('xkb', 'us'), ('xkb', 'se')]"
	    state: present
	
	- name: Read currently available keyboard layouts in Gnome
	  dconf:
	    key: "/org/gnome/desktop/input-sources/sources"
	    state: read
	  register: keyboard_layouts
	
	- name: Reset the available keyboard layouts in Gnome
	  dconf:
	    key: "/org/gnome/desktop/input-sources/sources"
	    state: absent
	
	- name: Configure available keyboard layouts in Cinnamon
	  dconf:
	    key: "/org/gnome/libgnomekbd/keyboard/layouts"
	    value: "['us', 'se']"
	    state: present
	
	- name: Read currently available keyboard layouts in Cinnamon
	  dconf:
	    key: "/org/gnome/libgnomekbd/keyboard/layouts"
	    state: read
	  register: keyboard_layouts
	
	- name: Reset the available keyboard layouts in Cinnamon
	  dconf:
	    key: "/org/gnome/libgnomekbd/keyboard/layouts"
	    state: absent
	
	- name: Disable desktop effects in Cinnamon
	  dconf:
	    key: "/org/cinnamon/desktop-effects"
	    value: "false"
	    state: present
	
	RETURN VALUES:
	
	
	value:
	    description: value associated with the requested key
	    returned: success, state was "read"
	    type: string
	    sample: "'Default'"
	

snippet debconf
	EXAMPLES:
	# Set default locale to fr_FR.UTF-8
	- debconf:
	    name: locales
	    question: locales/default_environment_locale
	    value: fr_FR.UTF-8
	    vtype: select
	
	# set to generate locales:
	- debconf:
	    name: locales
	    question: locales/locales_to_be_generated
	    value: en_US.UTF-8 UTF-8, fr_FR.UTF-8 UTF-8
	    vtype: multiselect
	
	# Accept oracle license
	- debconf:
	    name: oracle-java7-installer
	    question: shared/accepted-oracle-license-v1-1
	    value: true
	    vtype: select
	
	# Specifying package you can register/return the list of questions and current values
	- debconf:
	    name: tzdata
	

snippet debug
	EXAMPLES:
	# Example that prints the loopback address and gateway for each host
	- debug:
	    msg: "System {{ inventory_hostname }} has uuid {{ ansible_product_uuid }}"
	
	- debug:
	    msg: "System {{ inventory_hostname }} has gateway {{ ansible_default_ipv4.gateway }}"
	  when: ansible_default_ipv4.gateway is defined
	
	- shell: /usr/bin/uptime
	  register: result
	
	- debug:
	    var: result
	    verbosity: 2
	
	- name: Display all variables/facts known for a host
	  debug:
	    var: hostvars[inventory_hostname]
	    verbosity: 4
	

snippet deploy_helper
	EXAMPLES:
	# General explanation, starting with an example folder structure for a project:
	
	# root:
	#     releases:
	#         - 20140415234508
	#         - 20140415235146
	#         - 20140416082818
	#
	#     shared:
	#         - sessions
	#         - uploads
	#
	#     current: releases/20140416082818
	
	
	# The 'releases' folder holds all the available releases. A release is a complete build of the application being
	# deployed. This can be a clone of a repository for example, or a sync of a local folder on your filesystem.
	# Having timestamped folders is one way of having distinct releases, but you could choose your own strategy like
	# git tags or commit hashes.
	#
	# During a deploy, a new folder should be created in the releases folder and any build steps required should be
	# performed. Once the new build is ready, the deploy procedure is 'finalized' by replacing the 'current' symlink
	# with a link to this build.
	#
	# The 'shared' folder holds any resource that is shared between releases. Examples of this are web-server
	# session files, or files uploaded by users of your application. It's quite common to have symlinks from a release
	# folder pointing to a shared/subfolder, and creating these links would be automated as part of the build steps.
	#
	# The 'current' symlink points to one of the releases. Probably the latest one, unless a deploy is in progress.
	# The web-server's root for the project will go through this symlink, so the 'downtime' when switching to a new
	# release is reduced to the time it takes to switch the link.
	#
	# To distinguish between successful builds and unfinished ones, a file can be placed in the folder of the release
	# that is currently in progress. The existence of this file will mark it as unfinished, and allow an automated
	# procedure to remove it during cleanup.
	
	
	# Typical usage
	- name: Initialize the deploy root and gather facts
	  deploy_helper:
	    path: /path/to/root
	- name: Clone the project to the new release folder
	  git:
	    repo: git://foosball.example.org/path/to/repo.git
	    dest: '{{ deploy_helper.new_release_path }}'
	    version: v1.1.1
	- name: Add an unfinished file, to allow cleanup on successful finalize
	  file:
	    path: '{{ deploy_helper.new_release_path }}/{{ deploy_helper.unfinished_filename }}'
	    state: touch
	- name: Perform some build steps, like running your dependency manager for example
	  composer:
	    command: install
	    working_dir: '{{ deploy_helper.new_release_path }}'
	- name: Create some folders in the shared folder
	  file:
	    path: '{{ deploy_helper.shared_path }}/{{ item }}'
	    state: directory
	  with_items:
	    - sessions
	    - uploads
	- name: Add symlinks from the new release to the shared folder
	  file:
	    path: '{{ deploy_helper.new_release_path }}/{{ item.path }}'
	    src: '{{ deploy_helper.shared_path }}/{{ item.src }}'
	    state: link
	  with_items:
	      - path: app/sessions
	        src: sessions
	      - path: web/uploads
	        src: uploads
	- name: Finalize the deploy, removing the unfinished file and switching the symlink
	  deploy_helper:
	    path: /path/to/root
	    release: '{{ deploy_helper.new_release }}'
	    state: finalize
	
	# Retrieving facts before running a deploy
	- name: Run 'state=query' to gather facts without changing anything
	  deploy_helper:
	    path: /path/to/root
	    state: query
	# Remember to set the 'release' parameter when you actually call 'state=present' later
	- name: Initialize the deploy root
	  deploy_helper:
	    path: /path/to/root
	    release: '{{ deploy_helper.new_release }}'
	    state: present
	
	# all paths can be absolute or relative (to the 'path' parameter)
	- deploy_helper:
	    path: /path/to/root
	    releases_path: /var/www/project/releases
	    shared_path: /var/www/shared
	    current_path: /var/www/active
	
	# Using your own naming strategy for releases (a version tag in this case):
	- deploy_helper:
	    path: /path/to/root
	    release: v1.1.1
	    state: present
	- deploy_helper:
	    path: /path/to/root
	    release: '{{ deploy_helper.new_release }}'
	    state: finalize
	
	# Using a different unfinished_filename:
	- deploy_helper:
	    path: /path/to/root
	    unfinished_filename: README.md
	    release: '{{ deploy_helper.new_release }}'
	    state: finalize
	
	# Postponing the cleanup of older builds:
	- deploy_helper:
	    path: /path/to/root
	    release: '{{ deploy_helper.new_release }}'
	    state: finalize
	    clean: False
	- deploy_helper:
	    path: /path/to/root
	    state: clean
	# Or running the cleanup ahead of the new deploy
	- deploy_helper:
	    path: /path/to/root
	    state: clean
	- deploy_helper:
	    path: /path/to/root
	    state: present
	
	# Keeping more old releases:
	- deploy_helper:
	    path: /path/to/root
	    release: '{{ deploy_helper.new_release }}'
	    state: finalize
	    keep_releases: 10
	# Or, if you use 'clean=false' on finalize:
	- deploy_helper:
	    path: /path/to/root
	    state: clean
	    keep_releases: 10
	
	# Removing the entire project root folder
	- deploy_helper:
	    path: /path/to/root
	    state: absent
	
	# Debugging the facts returned by the module
	- deploy_helper:
	    path: /path/to/root
	- debug:
	    var: deploy_helper
	

snippet digital_ocean
	EXAMPLES:
	# Ensure a SSH key is present
	# If a key matches this name, will return the ssh key id and changed = False
	# If no existing key matches this name, a new key is created, the ssh key id is returned and changed = False
	
	- digital_ocean:
	    state: present
	    command: ssh
	    name: my_ssh_key
	    ssh_pub_key: 'ssh-rsa AAAA...'
	    api_token: XXX
	
	# Create a new Droplet
	# Will return the droplet details including the droplet id (used for idempotence)
	
	- digital_ocean:
	    state: present
	    command: droplet
	    name: mydroplet
	    api_token: XXX
	    size_id: 2gb
	    region_id: ams2
	    image_id: fedora-19-x64
	    wait_timeout: 500
	  register: my_droplet
	
	- debug:
	    msg: "ID is {{ my_droplet.droplet.id }}"
	
	- debug:
	    msg: "IP is {{ my_droplet.droplet.ip_address }}"
	
	# Ensure a droplet is present
	# If droplet id already exist, will return the droplet details and changed = False
	# If no droplet matches the id, a new droplet will be created and the droplet details (including the new id) are returned, changed = True.
	
	- digital_ocean:
	    state: present
	    command: droplet
	    id: 123
	    name: mydroplet
	    api_token: XXX
	    size_id: 2gb
	    region_id: ams2
	    image_id: fedora-19-x64
	    wait_timeout: 500
	
	# Create a droplet with ssh key
	# The ssh key id can be passed as argument at the creation of a droplet (see ssh_key_ids).
	# Several keys can be added to ssh_key_ids as id1,id2,id3
	# The keys are used to connect as root to the droplet.
	
	- digital_ocean:
	    state: present
	    ssh_key_ids: 123,456
	    name: mydroplet
	    api_token: XXX
	    size_id: 2gb
	    region_id: ams2
	    image_id: fedora-19-x64
	

snippet digital_ocean_block_storage
	EXAMPLES:
	# Create new Block Storage
	- digital_ocean_block_storage:
	    state: present
	    command: create
	    api_token: <TOKEN>
	    region: nyc1
	    block_size: 10
	    volume_name: nyc1-block-storage
	# Delete Block Storage
	- digital_ocean_block_storage:
	    state: absent
	    command: create
	    api_token: <TOKEN>
	    region: nyc1
	    volume_name: nyc1-block-storage
	# Attach Block Storage to a Droplet
	- digital_ocean_block_storage:
	    state: present
	    command: attach
	    api_token: <TOKEN>
	    volume_name: nyc1-block-storage
	    region: nyc1
	    droplet_id: <ID>
	# Detach Block Storage from a Droplet
	- digital_ocean_block_storage:
	    state: absent
	    command: attach
	    api_token: <TOKEN>
	    volume_name: nyc1-block-storage
	    region: nyc1
	    droplet_id: <ID>
	
	RETURN VALUES:
	
	
	id:
	    description: Unique identifier of a Block Storage volume returned during creation.
	    returned: changed
	    type: string
	    sample: "69b25d9a-494c-12e6-a5af-001f53126b44"
	

snippet digital_ocean_domain
	EXAMPLES:
	# Create a domain record
	
	- digital_ocean_domain:
	    state: present
	    name: my.digitalocean.domain
	    ip: 127.0.0.1
	
	# Create a droplet and a corresponding domain record
	
	- digital_ocean:
	    state: present
	    name: test_droplet
	    size_id: 1gb
	    region_id: sgp1
	    image_id: ubuntu-14-04-x64
	
	
	  register: test_droplet
	
	- digital_ocean_domain:
	    state: present
	    name: "{{ test_droplet.droplet.name }}.my.domain"
	    ip: "{{ test_droplet.droplet.ip_address }}"
	

snippet digital_ocean_floating_ip
	EXAMPLES:
	- name: "Create a Floating IP in region lon1"
	  digital_ocean_floating_ip:
	    state: present
	    region: lon1
	
	- name: "Create a Floating IP assigned to Droplet ID 123456"
	  digital_ocean_floating_ip:
	    state: present
	    droplet_id: 123456
	
	- name: "Delete a Floating IP with ip 1.2.3.4"
	  digital_ocean_floating_ip:
	    state: absent
	    ip: "1.2.3.4"
	
	RETURN VALUES:
	
	
	# Digital Ocean API info https://developers.digitalocean.com/documentation/v2/#floating-ips
	data:
	    description: a DigitalOcean Floating IP resource
	    returned: success and no resource constraint
	    type: dict
	    sample: {
	      "action": {
	        "id": 68212728,
	        "status": "in-progress",
	        "type": "assign_ip",
	        "started_at": "2015-10-15T17:45:44Z",
	        "completed_at": null,
	        "resource_id": 758603823,
	        "resource_type": "floating_ip",
	        "region": {
	          "name": "New York 3",
	          "slug": "nyc3",
	          "sizes": [
	            "512mb",
	            "1gb",
	            "2gb",
	            "4gb",
	            "8gb",
	            "16gb",
	            "32gb",
	            "48gb",
	            "64gb"
	          ],
	          "features": [
	            "private_networking",
	            "backups",
	            "ipv6",
	            "metadata"
	          ],
	          "available": true
	        },
	        "region_slug": "nyc3"
	      }
	    }
	

snippet digital_ocean_sshkey
	EXAMPLES:
	- name: "Create ssh key"
	  digital_ocean_sshkey:
	    name: "My SSH Public Key"
	    public_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V example"
	  register: result
	
	- name: "Delete ssh key"
	  digital_ocean_sshkey:
	    state: "absent"
	    fingerprint: "3b:16:bf:e4:8b:00:8b:b8:59:8c:a9:d3:f0:19:45:fa"
	
	RETURN VALUES:
	
	
	# Digital Ocean API info https://developers.digitalocean.com/documentation/v2/#list-all-keys
	data:
	    description: This is only present when C(state=present)
	    returned: when C(state=present)
	    type: dict
	    sample: {
	        "ssh_key": {
	            "id": 512189,
	            "fingerprint": "3b:16:bf:e4:8b:00:8b:b8:59:8c:a9:d3:f0:19:45:fa",
	            "name": "My SSH Public Key",
	            "public_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V example"
	        }
	    }
	

snippet digital_ocean_tag
	EXAMPLES:
	- name: create a tag
	  digital_ocean_tag:
	    name: production
	    state: present
	
	- name: tag a resource; creating the tag if it does not exists
	  digital_ocean_tag:
	    name: "{{ item }}"
	    resource_id: YYY
	    state: present
	  with_items:
	    - staging
	    - dbserver
	
	- name: untag a resource
	  digital_ocean_tag:
	    name: staging
	    resource_id: YYY
	    state: absent
	
	# Deleting a tag also untags all the resources that have previously been
	# tagged with it
	- name: remove a tag
	  digital_ocean_tag:
	    name: dbserver
	    state: absent
	
	RETURN VALUES:
	
	
	data:
	    description: a DigitalOcean Tag resource
	    returned: success and no resource constraint
	    type: dict
	    sample: {
	        "tag": {
	        "name": "awesome",
	        "resources": {
	          "droplets": {
	            "count": 0,
	            "last_tagged": null
	          }
	        }
	      }
	    }
	

snippet dimensiondata_network
	EXAMPLES:
	# Create an MCP 1.0 network
	- dimensiondata_network:
	    region: na
	    location: NA5
	    name: mynet
	# Create an MCP 2.0 network
	- dimensiondata_network:
	    region: na
	    mcp_user: my_user
	    mcp_password: my_password
	    location: NA9
	    name: mynet
	    service_plan: ADVANCED
	# Delete a network
	- dimensiondata_network:
	    region: na
	    location: NA1
	    name: mynet
	    state: absent
	
	RETURN VALUES:
	
	
	network:
	    description: Dictionary describing the network.
	    returned: On success when I(state=present).
	    type: complex
	    contains:
	        id:
	            description: Network ID.
	            type: string
	            sample: "8c787000-a000-4050-a215-280893411a7d"
	        name:
	            description: Network name.
	            type: string
	            sample: "My network"
	        description:
	            description: Network description.
	            type: string
	            sample: "My network description"
	        location:
	            description: Datacenter location.
	            type: string
	            sample: NA3
	        status:
	            description: Network status. (MCP 2.0 only)
	            type: string
	            sample: NORMAL
	        private_net:
	            description: Private network subnet. (MCP 1.0 only)
	            type: string
	            sample: "10.2.3.0"
	        multicast:
	            description: Multicast enabled? (MCP 1.0 only)
	            type: boolean
	            sample: false
	

snippet django_manage
	EXAMPLES:
	# Run cleanup on the application installed in 'django_dir'.
	- django_manage:
	    command: cleanup
	    app_path: "{{ django_dir }}"
	
	# Load the initial_data fixture into the application
	- django_manage:
	    command: loaddata
	    app_path: "{{ django_dir }}"
	    fixtures: "{{ initial_data }}"
	
	# Run syncdb on the application
	- django_manage:
	    command: syncdb
	    app_path: "{{ django_dir }}"
	    settings: "{{ settings_app_name }}"
	    pythonpath: "{{ settings_dir }}"
	    virtualenv: "{{ virtualenv_dir }}"
	
	# Run the SmokeTest test case from the main app. Useful for testing deploys.
	- django_manage:
	    command: test
	    app_path: "{{ django_dir }}"
	    apps: main.SmokeTest
	
	# Create an initial superuser.
	- django_manage:
	    command: "createsuperuser --noinput --username=admin --email=admin@example.com"
	    app_path: "{{ django_dir }}"
	

snippet dladm_etherstub
	EXAMPLES:
	# Create 'stub0' etherstub
	- dladm_etherstub:
	    name: stub0
	    state: present
	
	# Remove 'stub0 etherstub
	- dladm_etherstub:
	    name: stub0
	    state: absent
	
	RETURN VALUES:
	
	
	name:
	    description: etherstub name
	    returned: always
	    type: string
	    sample: "switch0"
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: "present"
	temporary:
	    description: etherstub's persistence
	    returned: always
	    type: boolean
	    sample: "True"
	

snippet dladm_iptun
	EXAMPLES:
	name: Create IPv4 tunnel interface 'iptun0'
	dladm_iptun: name=iptun0 local_address=192.0.2.23 remote_address=203.0.113.10 state=present
	
	name: Change IPv4 tunnel remote address
	dladm_iptun: name=iptun0 type=ipv4 local_address=192.0.2.23 remote_address=203.0.113.11
	
	name: Create IPv6 tunnel interface 'tun0'
	dladm_iptun: name=tun0 type=ipv6 local_address=192.0.2.23 remote_address=203.0.113.42
	
	name: Remove 'iptun0' tunnel interface
	dladm_iptun: name=iptun0 state=absent
	
	RETURN VALUES:
	
	
	name:
	    description: tunnel interface name
	    returned: always
	    type: string
	    sample: iptun0
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: present
	temporary:
	    description: specifies if operation will persist across reboots
	    returned: always
	    type: boolean
	    sample: True
	local_address:
	    description: local IP address
	    returned: always
	    type: string
	    sample: 1.1.1.1/32
	remote_address:
	    description: remote IP address
	    returned: always
	    type: string
	    sample: 2.2.2.2/32
	type:
	    description: tunnel type
	    returned: always
	    type: string
	    sample: ipv4
	

snippet dladm_linkprop
	EXAMPLES:
	name: Set 'maxbw' to 100M on e1000g1
	dladm_linkprop: name=e1000g1 property=maxbw value=100M state=present
	
	name: Set 'mtu' to 9000 on e1000g1
	dladm_linkprop: name=e1000g1 property=mtu value=9000
	
	name: Reset 'mtu' property on e1000g1
	dladm_linkprop: name=e1000g1 property=mtu state=reset
	
	RETURN VALUES:
	
	
	property:
	    description: property name
	    returned: always
	    type: string
	    sample: mtu
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: present
	temporary:
	    description: specifies if operation will persist across reboots
	    returned: always
	    type: boolean
	    sample: True
	link:
	    description: link name
	    returned: always
	    type: string
	    sample: e100g0
	value:
	    description: property value
	    returned: always
	    type: string
	    sample: 9000
	

snippet dladm_vlan
	EXAMPLES:
	name: Create 'vlan42' VLAN over 'bnx0' link
	dladm_vlan: name=vlan42 link=bnx0 vlan_id=42 state=present
	
	name: Remove 'vlan1337' VLAN interface
	dladm_vlan: name=vlan1337 state=absent
	
	RETURN VALUES:
	
	
	name:
	    description: VLAN name
	    returned: always
	    type: string
	    sample: vlan42
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: present
	temporary:
	    description: specifies if operation will persist across reboots
	    returned: always
	    type: boolean
	    sample: True
	link:
	    description: VLAN's underlying link name
	    returned: always
	    type: string
	    sample: e100g0
	vlan_id:
	    description: VLAN ID
	    returned: always
	    type: string
	    sample: 42
	

snippet dladm_vnic
	EXAMPLES:
	# Create 'vnic0' VNIC over 'bnx0' link
	- dladm_vnic:
	    name: vnic0
	    link: bnx0
	    state: present
	
	# Create VNIC with specified MAC and VLAN tag over 'aggr0'
	- dladm_vnic:
	    name: vnic1
	    link: aggr0
	    mac: '00:00:5E:00:53:23'
	    vlan: 4
	
	# Remove 'vnic0' VNIC
	- dladm_vnic:
	    name: vnic0
	    link: bnx0
	    state: absent
	
	RETURN VALUES:
	
	
	name:
	    description: VNIC name
	    returned: always
	    type: string
	    sample: "vnic0"
	link:
	    description: VNIC underlying link name
	    returned: always
	    type: string
	    sample: "igb0"
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: "present"
	temporary:
	    description: VNIC's persistence
	    returned: always
	    type: boolean
	    sample: "True"
	mac:
	    description: MAC address to use for VNIC
	    returned: if mac is specified
	    type: string
	    sample: "00:00:5E:00:53:42"
	vlan:
	    description: VLAN to use for VNIC
	    returned: success
	    type: int
	    sample: 42
	

snippet dnsimple
	EXAMPLES:
	# authenticate using email and API token and fetch all domains
	- dnsimple:
	    account_email: test@example.com
	    account_api_token: dummyapitoken
	  delegate_to: localhost
	
	# fetch my.com domain records
	- dnsimple:
	    domain: my.com
	    state: present
	  delegate_to: localhost
	  register: records
	
	# delete a domain
	- dnsimple:
	    domain: my.com
	    state: absent
	  delegate_to: localhost
	
	# create a test.my.com A record to point to 127.0.0.01
	- dnsimple:
	    domain: my.com
	    record: test
	    type: A
	    value: 127.0.0.1
	  delegate_to: localhost
	  register: record
	
	# and then delete it
	- dnsimple:
	    domain: my.com
	    record_ids: '{{ record["id"] }}'
	  delegate_to: localhost
	
	# create a my.com CNAME record to example.com
	- dnsimple:
	    domain: my.com
	    record: ''
	    type: CNAME
	    value: example.com
	    state: present
	  delegate_to: localhost
	
	# change it's ttl
	- dnsimple:
	    domain: my.com
	    record: ''
	    type: CNAME
	    value: example.com
	    ttl: 600
	    state: present
	  delegate_to: localhost
	
	# and delete the record
	- dnsimple:
	    domain: my.com
	    record: ''
	    type: CNAME
	    value: example.com
	    state: absent
	  delegate_to: localhost
	

snippet dnsmadeeasy
	EXAMPLES:
	# fetch my.com domain records
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: present
	  register: response
	
	# create / ensure the presence of a record
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: present
	    record_name: test
	    record_type: A
	    record_value: 127.0.0.1
	
	# update the previously created record
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: present
	    record_name: test
	    record_value: 192.0.2.23
	
	# fetch a specific record
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: present
	    record_name: test
	  register: response
	
	# delete a record / ensure it is absent
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: absent
	    record_name: test
	
	# Add a failover
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: present
	    record_name: test
	    record_type: A
	    record_value: 127.0.0.1
	    failover: True
	    ip1: 127.0.0.2
	    ip2: 127.0.0.3
	
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: present
	    record_name: test
	    record_type: A
	    record_value: 127.0.0.1
	    failover: True
	    ip1: 127.0.0.2
	    ip2: 127.0.0.3
	    ip3: 127.0.0.4
	    ip4: 127.0.0.5
	    ip5: 127.0.0.6
	
	# Add a monitor
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: present
	    record_name: test
	    record_type: A
	    record_value: 127.0.0.1
	    monitor: yes
	    ip1: 127.0.0.2
	    protocol: HTTP  # default
	    port: 80  # default
	    maxEmails: 1
	    systemDescription: Monitor Test A record
	    contactList: my contact list
	
	# Add a monitor with http options
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: present
	    record_name: test
	    record_type: A
	    record_value: 127.0.0.1
	    monitor: yes
	    ip1: 127.0.0.2
	    protocol: HTTP  # default
	    port: 80  # default
	    maxEmails: 1
	    systemDescription: Monitor Test A record
	    contactList: 1174  # contact list id
	    httpFqdn: http://my.com
	    httpFile: example
	    httpQueryString: some string
	
	# Add a monitor and a failover
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: present
	    record_name: test
	    record_type: A
	    record_value: 127.0.0.1
	    failover: True
	    ip1: 127.0.0.2
	    ip2: 127.0.0.3
	    monitor: yes
	    protocol: HTTPS
	    port: 443
	    maxEmails: 1
	    systemDescription: monitoring my.com status
	    contactList: emergencycontacts
	
	# Remove a failover
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: present
	    record_name: test
	    record_type: A
	    record_value: 127.0.0.1
	    failover: no
	
	# Remove a monitor
	- dnsmadeeasy:
	    account_key: key
	    account_secret: secret
	    domain: my.com
	    state: present
	    record_name: test
	    record_type: A
	    record_value: 127.0.0.1
	    monitor: no
	

snippet docker
	EXAMPLES:
	# Containers are matched either by name (if provided) or by an exact match of
	# the image they were launched with and the command they're running. The module
	# can accept either a name to target a container uniquely, or a count to operate
	# on multiple containers at once when it makes sense to do so.
	
	# Ensure that a data container with the name "mydata" exists. If no container
	# by this name exists, it will be created, but not started.
	
	- name: data container
	  docker:
	    name: mydata
	    image: busybox
	    state: present
	    volumes:
	    - /data
	
	# Ensure that a Redis server is running, using the volume from the data
	# container. Expose the default Redis port.
	
	- name: redis container
	  docker:
	    name: myredis
	    image: redis
	    command: redis-server --appendonly yes
	    state: started
	    expose:
	    - 6379
	    volumes_from:
	    - mydata
	
	# Ensure that a container of your application server is running. This will:
	# - pull the latest version of your application image from DockerHub.
	# - ensure that a container is running with the specified name and exact image.
	#   If any configuration options have changed, the existing container will be
	#   stopped and removed, and a new one will be launched in its place.
	# - link this container to the existing redis container launched above with
	#   an alias.
	# - grant the container read write permissions for the host's /dev/sda device
	#   through a node named /dev/xvda
	# - bind TCP port 9000 within the container to port 8080 on all interfaces
	#   on the host.
	# - bind UDP port 9001 within the container to port 8081 on the host, only
	#   listening on localhost.
	# - specify 2 ip resolutions.
	# - set the environment variable SECRET_KEY to "ssssh".
	
	- name: application container
	  docker:
	    name: myapplication
	    image: someuser/appimage
	    state: reloaded
	    pull: always
	    links:
	    - "myredis:aliasedredis"
	    devices:
	    - "/dev/sda:/dev/xvda:rwm"
	    ports:
	    - "8080:9000"
	    - "127.0.0.1:8081:9001/udp"
	    extra_hosts:
	      host1: "192.168.0.1"
	      host2: "192.168.0.2"
	    env:
	        SECRET_KEY: ssssh
	
	# Ensure that exactly five containers of another server are running with this
	# exact image and command. If fewer than five are running, more will be launched;
	# if more are running, the excess will be stopped.
	
	- name: load-balanced containers
	  docker:
	    state: reloaded
	    count: 5
	    image: someuser/anotherappimage
	    command: sleep 1d
	
	# Unconditionally restart a service container. This may be useful within a
	# handler, for example.
	
	- name: application service
	  docker:
	    name: myservice
	    image: someuser/serviceimage
	    state: restarted
	
	# Stop all containers running the specified image.
	
	- name: obsolete container
	  docker:
	    image: someuser/oldandbusted
	    state: stopped
	
	# Stop and remove a container with the specified name.
	
	- name: obsolete container
	  docker:
	    name: ohno
	    image: someuser/oldandbusted
	    state: absent
	
	# Example Syslogging Output
	
	- name: myservice container
	  docker:
	    name: myservice
	    image: someservice/someimage
	    state: reloaded
	    log_driver: syslog
	    log_opt:
	      syslog-address: tcp://my-syslog-server:514
	      syslog-facility: daemon
	      syslog-tag: myservice
	

snippet docker_container
	EXAMPLES:
	- name: Create a data container
	  docker_container:
	    name: mydata
	    image: busybox
	    volumes:
	      - /data
	
	- name: Re-create a redis container
	  docker_container:
	    name: myredis
	    image: redis
	    command: redis-server --appendonly yes
	    state: present
	    recreate: yes
	    exposed_ports:
	      - 6379
	    volumes_from:
	      - mydata
	
	- name: Restart a container
	  docker_container:
	    name: myapplication
	    image: someuser/appimage
	    state: started
	    restart: yes
	    links:
	     - "myredis:aliasedredis"
	    devices:
	     - "/dev/sda:/dev/xvda:rwm"
	    ports:
	     - "8080:9000"
	     - "127.0.0.1:8081:9001/udp"
	    env:
	        SECRET_KEY: ssssh
	
	- name: Container present
	  docker_container:
	    name: mycontainer
	    state: present
	    image: ubuntu:14.04
	    command: sleep infinity
	
	- name: Stop a container
	  docker_container:
	    name: mycontainer
	    state: stopped
	
	- name: Start 4 load-balanced containers
	  docker_container:
	    name: "container{{ item }}"
	    recreate: yes
	    image: someuser/anotherappimage
	    command: sleep 1d
	  with_sequence: count=4
	
	- name: remove container
	  docker_container:
	    name: ohno
	    state: absent
	
	- name: Syslogging output
	  docker_container:
	    name: myservice
	    image: busybox
	    log_driver: syslog
	    log_options:
	      syslog-address: tcp://my-syslog-server:514
	      syslog-facility: daemon
	      # NOTE: in Docker 1.13+ the "syslog-tag" option was renamed to "tag" for
	      # older docker installs, use "syslog-tag" instead
	      tag: myservice
	
	- name: Create db container and connect to network
	  docker_container:
	    name: db_test
	    image: "postgres:latest"
	    networks:
	      - name: "{{ docker_network_name }}"
	
	- name: Start container, connect to network and link
	  docker_container:
	    name: sleeper
	    image: ubuntu:14.04
	    networks:
	      - name: TestingNet
	        ipv4_address: "172.1.1.100"
	        aliases:
	          - sleepyzz
	        links:
	          - db_test:db
	      - name: TestingNet2
	
	- name: Start a container with a command
	  docker_container:
	    name: sleepy
	    image: ubuntu:14.04
	    command: ["sleep", "infinity"]
	
	- name: Add container to networks
	  docker_container:
	    name: sleepy
	    networks:
	      - name: TestingNet
	        ipv4_address: 172.1.1.18
	        links:
	          - sleeper
	      - name: TestingNet2
	        ipv4_address: 172.1.10.20
	
	- name: Update network with aliases
	  docker_container:
	    name: sleepy
	    networks:
	      - name: TestingNet
	        aliases:
	          - sleepyz
	          - zzzz
	
	- name: Remove container from one network
	  docker_container:
	    name: sleepy
	    networks:
	      - name: TestingNet2
	    purge_networks: yes
	
	- name: Remove container from all networks
	  docker_container:
	    name: sleepy
	    purge_networks: yes
	
	RETURN VALUES:
	
	
	docker_container:
	    description:
	      - Before 2.3 this was 'ansible_docker_container' but was renamed due to conflicts with the connection plugin.
	      - Facts representing the current state of the container. Matches the docker inspection output.
	      - Note that facts are not part of registered vars but accessible directly.
	      - Empty if C(state) is I(absent)
	      - If detached is I(False), will include Output attribute containing any output from container run.
	    returned: always
	    type: dict
	    sample: '{
	        "AppArmorProfile": "",
	        "Args": [],
	        "Config": {
	            "AttachStderr": false,
	            "AttachStdin": false,
	            "AttachStdout": false,
	            "Cmd": [
	                "/usr/bin/supervisord"
	            ],
	            "Domainname": "",
	            "Entrypoint": null,
	            "Env": [
	                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
	            ],
	            "ExposedPorts": {
	                "443/tcp": {},
	                "80/tcp": {}
	            },
	            "Hostname": "8e47bf643eb9",
	            "Image": "lnmp_nginx:v1",
	            "Labels": {},
	            "OnBuild": null,
	            "OpenStdin": false,
	            "StdinOnce": false,
	            "Tty": false,
	            "User": "",
	            "Volumes": {
	                "/tmp/lnmp/nginx-sites/logs/": {}
	            },
	            ...
	    }'
	

snippet docker_image
	EXAMPLES:
	- name: pull an image
	  docker_image:
	    name: pacur/centos-7
	
	- name: Tag and push to docker hub
	  docker_image:
	    name: pacur/centos-7
	    repository: dcoppenhagan/myimage
	    tag: 7.0
	    push: yes
	
	- name: Tag and push to local registry
	  docker_image:
	     name: centos
	     repository: localhost:5000/centos
	     tag: 7
	     push: yes
	
	- name: Remove image
	  docker_image:
	    state: absent
	    name: registry.ansible.com/chouseknecht/sinatra
	    tag: v1
	
	- name: Build an image and push it to a private repo
	  docker_image:
	    path: ./sinatra
	    name: registry.ansible.com/chouseknecht/sinatra
	    tag: v1
	    push: yes
	
	- name: Archive image
	  docker_image:
	    name: registry.ansible.com/chouseknecht/sinatra
	    tag: v1
	    archive_path: my_sinatra.tar
	
	- name: Load image from archive and push to a private registry
	  docker_image:
	    name: localhost:5000/myimages/sinatra
	    tag: v1
	    push: yes
	    load_path: my_sinatra.tar
	
	- name: Build image and with buildargs
	  docker_image:
	     path: /path/to/build/dir
	     name: myimage
	     buildargs:
	       log_volume: /var/log/myapp
	       listen_port: 8080
	
	RETURN VALUES:
	
	
	image:
	    description: Image inspection results for the affected image.
	    returned: success
	    type: dict
	    sample: {}
	

snippet docker_image_facts
	EXAMPLES:
	- name: Inspect a single image
	  docker_image_facts:
	    name: pacur/centos-7
	
	- name: Inspect multiple images
	  docker_image_facts:
	    name:
	      - pacur/centos-7
	      - sinatra
	
	RETURN VALUES:
	
	
	images:
	    description: Facts for the selected images.
	    returned: always
	    type: dict
	    sample: [
	        {
	            "Architecture": "amd64",
	            "Author": "",
	            "Comment": "",
	            "Config": {
	                "AttachStderr": false,
	                "AttachStdin": false,
	                "AttachStdout": false,
	                "Cmd": [
	                    "/etc/docker/registry/config.yml"
	                ],
	                "Domainname": "",
	                "Entrypoint": [
	                    "/bin/registry"
	                ],
	                "Env": [
	                    "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
	                ],
	                "ExposedPorts": {
	                    "5000/tcp": {}
	                },
	                "Hostname": "e5c68db50333",
	                "Image": "c72dce2618dc8f7b794d2b2c2b1e64e0205ead5befc294f8111da23bd6a2c799",
	                "Labels": {},
	                "OnBuild": [],
	                "OpenStdin": false,
	                "StdinOnce": false,
	                "Tty": false,
	                "User": "",
	                "Volumes": {
	                    "/var/lib/registry": {}
	                },
	                "WorkingDir": ""
	            },
	            "Container": "e83a452b8fb89d78a25a6739457050131ca5c863629a47639530d9ad2008d610",
	            "ContainerConfig": {
	                "AttachStderr": false,
	                "AttachStdin": false,
	                "AttachStdout": false,
	                "Cmd": [
	                    "/bin/sh",
	                    "-c",
	                    '#(nop) CMD ["/etc/docker/registry/config.yml"]'
	                ],
	                "Domainname": "",
	                "Entrypoint": [
	                    "/bin/registry"
	                ],
	                "Env": [
	                    "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
	                ],
	                "ExposedPorts": {
	                    "5000/tcp": {}
	                },
	                "Hostname": "e5c68db50333",
	                "Image": "c72dce2618dc8f7b794d2b2c2b1e64e0205ead5befc294f8111da23bd6a2c799",
	                "Labels": {},
	                "OnBuild": [],
	                "OpenStdin": false,
	                "StdinOnce": false,
	                "Tty": false,
	                "User": "",
	                "Volumes": {
	                    "/var/lib/registry": {}
	                },
	                "WorkingDir": ""
	            },
	            "Created": "2016-03-08T21:08:15.399680378Z",
	            "DockerVersion": "1.9.1",
	            "GraphDriver": {
	                "Data": null,
	                "Name": "aufs"
	            },
	            "Id": "53773d8552f07b730f3e19979e32499519807d67b344141d965463a950a66e08",
	            "Name": "registry:2",
	            "Os": "linux",
	            "Parent": "f0b1f729f784b755e7bf9c8c2e65d8a0a35a533769c2588f02895f6781ac0805",
	            "RepoDigests": [],
	            "RepoTags": [
	                "registry:2"
	            ],
	            "Size": 0,
	            "VirtualSize": 165808884
	        }
	    ]
	

snippet docker_login
	EXAMPLES:
	- name: Log into DockerHub
	  docker_login:
	    username: docker
	    password: rekcod
	    email: docker@docker.io
	
	- name: Log into private registry and force re-authorization
	  docker_login:
	    registry: your.private.registry.io
	    username: yourself
	    password: secrets3
	    reauthorize: yes
	
	- name: Log into DockerHub using a custom config file
	  docker_login:
	    username: docker
	    password: rekcod
	    email: docker@docker.io
	    config_path: /tmp/.mydockercfg
	
	- name: Log out of DockerHub
	  docker_login:
	    state: absent
	    email: docker@docker.com
	
	RETURN VALUES:
	
	
	login_results:
	    description: Results from the login.
	    returned: when state='present'
	    type: dict
	    sample: {
	        "email": "testuer@yahoo.com",
	        "password": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER",
	        "serveraddress": "localhost:5000",
	        "username": "testuser"
	    }
	

snippet docker_network
	EXAMPLES:
	- name: Create a network
	  docker_network:
	    name: network_one
	
	- name: Remove all but selected list of containers
	  docker_network:
	    name: network_one
	    connected:
	      - container_a
	      - container_b
	      - container_c
	
	- name: Remove a single container
	  docker_network:
	    name: network_one
	    connected: "{{ fulllist|difference(['container_a']) }}"
	
	- name: Add a container to a network, leaving existing containers connected
	  docker_network:
	    name: network_one
	    connected:
	      - container_a
	    appends: yes
	
	- name: Create a network with options
	  docker_network:
	    name: network_two
	    driver_options:
	      com.docker.network.bridge.name: net2
	    ipam_options:
	      subnet: '172.3.26.0/16'
	      gateway: 172.3.26.1
	      iprange: '192.168.1.0/24'
	
	- name: Delete a network, disconnecting all containers
	  docker_network:
	    name: network_one
	    state: absent
	    force: yes
	
	RETURN VALUES:
	
	
	facts:
	    description: Network inspection results for the affected network.
	    returned: success
	    type: dict
	    sample: {}
	

snippet docker_secret
	EXAMPLES:
	- name: Create secret foo
	  docker_secret:
	    name: foo
	    data: Hello World!
	    state: present
	
	- name: Change the secret data
	  docker_secret:
	    name: foo
	    data: Goodnight everyone!
	    labels:
	      bar: baz
	      one: '1'
	    state: present
	
	- name: Add a new label
	  docker_secret:
	    name: foo
	    data: Goodnight everyone!
	    labels:
	      bar: baz
	      one: '1'
	      # Adding a new label will cause a remove/create of the secret
	      two: '2'
	    state: present
	
	- name: No change
	  docker_secret:
	    name: foo
	    data: Goodnight everyone!
	    labels:
	      bar: baz
	      one: '1'
	      # Even though 'two' is missing, there is no change to the existing secret
	    state: present
	
	- name: Update an existing label
	  docker_secret:
	    name: foo
	    data: Goodnight everyone!
	    labels:
	      bar: monkey   # Changing a label will cause a remove/create of the secret
	      one: '1'
	    state: present
	
	- name: Force the removal/creation of the secret
	  docker_secret:
	    name: foo
	    data: Goodnight everyone!
	    force: yes
	    state: present
	
	- name: Remove secret foo
	  docker_secret:
	    name: foo
	    state: absent
	
	RETURN VALUES:
	
	
	secret_id:
	  description:
	    - The ID assigned by Docker to the secret object.
	  returned: success
	  type: string
	  sample: 'hzehrmyjigmcp2gb6nlhmjqcv'
	

snippet docker_service
	EXAMPLES:
	# Examples use the django example at U(https://docs.docker.com/compose/django/). Follow it to create the flask
	# directory
	
	- name: Run using a project directory
	  hosts: localhost
	  connection: local
	  gather_facts: no
	  tasks:
	    - docker_service:
	        project_src: flask
	        state: absent
	
	    - docker_service:
	        project_src: flask
	      register: output
	
	    - debug:
	        var: output
	
	    - docker_service:
	        project_src: flask
	        build: no
	      register: output
	
	    - debug:
	        var: output
	
	    - assert:
	        that: "not output.changed "
	
	    - docker_service:
	        project_src: flask
	        build: no
	        stopped: true
	      register: output
	
	    - debug:
	        var: output
	
	    - assert:
	        that:
	          - "not web.flask_web_1.state.running"
	          - "not db.flask_db_1.state.running"
	
	    - docker_service:
	        project_src: flask
	        build: no
	        restarted: true
	      register: output
	
	    - debug:
	        var: output
	
	    - assert:
	        that:
	          - "web.flask_web_1.state.running"
	          - "db.flask_db_1.state.running"
	
	- name: Scale the web service to 2
	  hosts: localhost
	  connection: local
	  gather_facts: no
	  tasks:
	    - docker_service:
	        project_src: flask
	        scale:
	          web: 2
	      register: output
	
	    - debug:
	        var: output
	
	- name: Run with inline v2 compose
	  hosts: localhost
	  connection: local
	  gather_facts: no
	  tasks:
	    - docker_service:
	        project_src: flask
	        state: absent
	
	    - docker_service:
	        project_name: flask
	        definition:
	          version: '2'
	          services:
	            db:
	              image: postgres
	            web:
	              build: "{{ playbook_dir }}/flask"
	              command: "python manage.py runserver 0.0.0.0:8000"
	              volumes:
	                - "{{ playbook_dir }}/flask:/code"
	              ports:
	                - "8000:8000"
	              depends_on:
	                - db
	      register: output
	
	    - debug:
	        var: output
	
	    - assert:
	        that:
	          - "web.flask_web_1.state.running"
	          - "db.flask_db_1.state.running"
	
	- name: Run with inline v1 compose
	  hosts: localhost
	  connection: local
	  gather_facts: no
	  tasks:
	    - docker_service:
	        project_src: flask
	        state: absent
	
	    - docker_service:
	        project_name: flask
	        definition:
	            db:
	              image: postgres
	            web:
	              build: "{{ playbook_dir }}/flask"
	              command: "python manage.py runserver 0.0.0.0:8000"
	              volumes:
	                - "{{ playbook_dir }}/flask:/code"
	              ports:
	                - "8000:8000"
	              links:
	                - db
	      register: output
	
	    - debug:
	        var: output
	
	    - assert:
	        that:
	          - "web.flask_web_1.state.running"
	          - "db.flask_db_1.state.running"
	
	RETURN VALUES:
	
	
	service:
	  description: Name of the service.
	  returned: success
	  type: complex
	  contains:
	      container_name:
	          description: Name of the container. Format is I(project_service_#).
	          returned: success
	          type: complex
	          contains:
	              cmd:
	                  description: One or more commands to be executed in the container.
	                  returned: success
	                  type: list
	                  example: ["postgres"]
	              image:
	                  description: Name of the image from which the container was built.
	                  returned: success
	                  type: str
	                  example: postgres
	              labels:
	                  description: Meta data assigned to the container.
	                  returned: success
	                  type: complex
	                  example: {...}
	              networks:
	                  description: Contains a dictionary for each network to which the container is a member.
	                  returned: success
	                  type: complex
	                  contains:
	                      IPAddress:
	                          description: The IP address assigned to the container.
	                          returned: success
	                          type: string
	                          example: 172.17.0.2
	                      IPPrefixLen:
	                          description: Number of bits used by the subnet.
	                          returned: success
	                          type: int
	                          example: 16
	                      aliases:
	                          description: Aliases assigned to the container by the network.
	                          returned: success
	                          type: list
	                          example: ['db']
	                      globalIPv6:
	                          description: IPv6 address assigned to the container.
	                          returned: success
	                          type: str
	                          example: ''
	                      globalIPv6PrefixLen:
	                          description: IPv6 subnet length.
	                          returned: success
	                          type: int
	                          example: 0
	                      links:
	                          description: List of container names to which this container is linked.
	                          returned: success
	                          type: list
	                          example: null
	                      macAddress:
	                          description: Mac Address assigned to the virtual NIC.
	                          returned: success
	                          type: str
	                          example: "02:42:ac:11:00:02"
	              state:
	                  description: Information regarding the current disposition of the container.
	                  returned: success
	                  type: complex
	                  contains:
	                      running:
	                          description: Whether or not the container is up with a running process.
	                          returned: success
	                          type: bool
	                          example: true
	                      status:
	                          description: Description of the running state.
	                          returned: success
	                          type: str
	                          example: running
	
	actions:
	  description: Provides the actions to be taken on each service as determined by compose.
	  returned: when in check mode or I(debug) true
	  type: complex
	  contains:
	      service_name:
	          description: Name of the service.
	          returned: always
	          type: complex
	          contains:
	              pulled_image:
	                  description: Provides image details when a new image is pulled for the service.
	                  returned: on image pull
	                  type: complex
	                  contains:
	                      name:
	                          description: name of the image
	                          returned: always
	                          type: string
	                      id:
	                          description: image hash
	                          returned: always
	                          type: string
	              built_image:
	                  description: Provides image details when a new image is built for the service.
	                  returned: on image build
	                  type: complex
	                  contains:
	                      name:
	                          description: name of the image
	                          returned: always
	                          type: string
	                      id:
	                          description: image hash
	                          returned: always
	                          type: string
	
	              action:
	                  description: A descriptive name of the action to be performed on the service's containers.
	                  returned: always
	                  type: list
	                  contains:
	                      id:
	                          description: the container's long ID
	                          returned: always
	                          type: string
	                      name:
	                          description: the container's name
	                          returned: always
	                          type: string
	                      short_id:
	                          description: the container's short ID
	                          returned: always
	                          type: string
	

snippet docker_volume
	EXAMPLES:
	- name: Create a volume
	  docker_volume:
	    name: volume_one
	
	- name: Remove a volume
	  docker_volume:
	    name: volume_one
	    state: absent
	
	- name: Create a volume with options
	  docker_volume:
	    name: volume_two
	    driver_options:
	      type: btrfs
	      device: /dev/sda2
	
	RETURN VALUES:
	
	
	facts:
	    description: Volume inspection results for the affected volume.
	    returned: success
	    type: dict
	    sample: {}
	

snippet dpkg_selections
	EXAMPLES:
	# Prevent python from being upgraded.
	- dpkg_selections:
	    name: python
	    selection: hold
	

snippet dynamodb_table
	EXAMPLES:
	# Create dynamo table with hash and range primary key
	- dynamodb_table:
	    name: my-table
	    region: us-east-1
	    hash_key_name: id
	    hash_key_type: STRING
	    range_key_name: create_time
	    range_key_type: NUMBER
	    read_capacity: 2
	    write_capacity: 2
	    tags:
	      tag_name: tag_value
	
	# Update capacity on existing dynamo table
	- dynamodb_table:
	    name: my-table
	    region: us-east-1
	    read_capacity: 10
	    write_capacity: 10
	
	# set index on existing dynamo table
	- dynamodb_table:
	    name: my-table
	    region: us-east-1
	    indexes:
	      - name: NamedIndex
	        type: global_include
	        hash_key_name: id
	        range_key_name: create_time
	        includes:
	          - other_field
	          - other_field2
	        read_capacity: 10
	        write_capacity: 10
	
	# Delete dynamo table
	- dynamodb_table:
	    name: my-table
	    region: us-east-1
	    state: absent
	
	RETURN VALUES:
	
	
	table_status:
	    description: The current status of the table.
	    returned: success
	    type: string
	    sample: ACTIVE
	

snippet dynamodb_ttl
	EXAMPLES:
	- name: enable TTL on my cowfacts table
	  dynamodb_ttl:
	    state: enable
	    table_name: cowfacts
	    attribute_name: cow_deleted_date
	
	- name: disable TTL on my cowfacts table
	  dynamodb_ttl:
	    state: disable
	    table_name: cowfacts
	    attribute_name: cow_deleted_date
	
	RETURN VALUES:
	
	
	current_status:
	  description: current or new TTL specification.
	  type: dict
	  returned: always
	  sample:
	  - { "AttributeName": "deploy_timestamp", "TimeToLiveStatus": "ENABLED" }
	  - { "AttributeName": "deploy_timestamp", "Enabled": true }
	

snippet easy_install
	EXAMPLES:
	# Examples from Ansible Playbooks
	- easy_install:
	    name: pip
	    state: latest
	
	# Install Bottle into the specified virtualenv.
	- easy_install:
	    name: bottle
	    virtualenv: /webapps/myapp/venv
	

snippet ec2
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# Basic provisioning example
	- ec2:
	    key_name: mykey
	    instance_type: t2.micro
	    image: ami-123456
	    wait: yes
	    group: webserver
	    count: 3
	    vpc_subnet_id: subnet-29e63245
	    assign_public_ip: yes
	
	# Advanced example with tagging and CloudWatch
	- ec2:
	    key_name: mykey
	    group: databases
	    instance_type: t2.micro
	    image: ami-123456
	    wait: yes
	    wait_timeout: 500
	    count: 5
	    instance_tags:
	       db: postgres
	    monitoring: yes
	    vpc_subnet_id: subnet-29e63245
	    assign_public_ip: yes
	
	# Single instance with additional IOPS volume from snapshot and volume delete on termination
	- ec2:
	    key_name: mykey
	    group: webserver
	    instance_type: c3.medium
	    image: ami-123456
	    wait: yes
	    wait_timeout: 500
	    volumes:
	      - device_name: /dev/sdb
	        snapshot: snap-abcdef12
	        volume_type: io1
	        iops: 1000
	        volume_size: 100
	        delete_on_termination: true
	    monitoring: yes
	    vpc_subnet_id: subnet-29e63245
	    assign_public_ip: yes
	
	# Single instance with ssd gp2 root volume
	- ec2:
	    key_name: mykey
	    group: webserver
	    instance_type: c3.medium
	    image: ami-123456
	    wait: yes
	    wait_timeout: 500
	    volumes:
	      - device_name: /dev/xvda
	        volume_type: gp2
	        volume_size: 8
	    vpc_subnet_id: subnet-29e63245
	    assign_public_ip: yes
	    count_tag:
	      Name: dbserver
	    exact_count: 1
	
	# Multiple groups example
	- ec2:
	    key_name: mykey
	    group: ['databases', 'internal-services', 'sshable', 'and-so-forth']
	    instance_type: m1.large
	    image: ami-6e649707
	    wait: yes
	    wait_timeout: 500
	    count: 5
	    instance_tags:
	        db: postgres
	    monitoring: yes
	    vpc_subnet_id: subnet-29e63245
	    assign_public_ip: yes
	
	# Multiple instances with additional volume from snapshot
	- ec2:
	    key_name: mykey
	    group: webserver
	    instance_type: m1.large
	    image: ami-6e649707
	    wait: yes
	    wait_timeout: 500
	    count: 5
	    volumes:
	    - device_name: /dev/sdb
	      snapshot: snap-abcdef12
	      volume_size: 10
	    monitoring: yes
	    vpc_subnet_id: subnet-29e63245
	    assign_public_ip: yes
	
	# Dedicated tenancy example
	- local_action:
	    module: ec2
	    assign_public_ip: yes
	    group_id: sg-1dc53f72
	    key_name: mykey
	    image: ami-6e649707
	    instance_type: m1.small
	    tenancy: dedicated
	    vpc_subnet_id: subnet-29e63245
	    wait: yes
	
	# Spot instance example
	- ec2:
	    spot_price: 0.24
	    spot_wait_timeout: 600
	    keypair: mykey
	    group_id: sg-1dc53f72
	    instance_type: m1.small
	    image: ami-6e649707
	    wait: yes
	    vpc_subnet_id: subnet-29e63245
	    assign_public_ip: yes
	    spot_launch_group: report_generators
	
	# Examples using pre-existing network interfaces
	- ec2:
	    key_name: mykey
	    instance_type: t2.small
	    image: ami-f005ba11
	    network_interface: eni-deadbeef
	
	- ec2:
	    key_name: mykey
	    instance_type: t2.small
	    image: ami-f005ba11
	    network_interfaces: ['eni-deadbeef', 'eni-5ca1ab1e']
	
	# Launch instances, runs some tasks
	# and then terminate them
	
	- name: Create a sandbox instance
	  hosts: localhost
	  gather_facts: False
	  vars:
	    key_name: my_keypair
	    instance_type: m1.small
	    security_group: my_securitygroup
	    image: my_ami_id
	    region: us-east-1
	  tasks:
	    - name: Launch instance
	      ec2:
	         key_name: "{{ keypair }}"
	         group: "{{ security_group }}"
	         instance_type: "{{ instance_type }}"
	         image: "{{ image }}"
	         wait: true
	         region: "{{ region }}"
	         vpc_subnet_id: subnet-29e63245
	         assign_public_ip: yes
	      register: ec2
	
	    - name: Add new instance to host group
	      add_host:
	        hostname: "{{ item.public_ip }}"
	        groupname: launched
	      with_items: "{{ ec2.instances }}"
	
	    - name: Wait for SSH to come up
	      wait_for:
	        host: "{{ item.public_dns_name }}"
	        port: 22
	        delay: 60
	        timeout: 320
	        state: started
	      with_items: "{{ ec2.instances }}"
	
	- name: Configure instance(s)
	  hosts: launched
	  become: True
	  gather_facts: True
	  roles:
	    - my_awesome_role
	    - my_awesome_test
	
	- name: Terminate instances
	  hosts: localhost
	  connection: local
	  tasks:
	    - name: Terminate instances that were previously launched
	      ec2:
	        state: 'absent'
	        instance_ids: '{{ ec2.instance_ids }}'
	
	# Start a few existing instances, run some tasks
	# and stop the instances
	
	- name: Start sandbox instances
	  hosts: localhost
	  gather_facts: false
	  connection: local
	  vars:
	    instance_ids:
	      - 'i-xxxxxx'
	      - 'i-xxxxxx'
	      - 'i-xxxxxx'
	    region: us-east-1
	  tasks:
	    - name: Start the sandbox instances
	      ec2:
	        instance_ids: '{{ instance_ids }}'
	        region: '{{ region }}'
	        state: running
	        wait: True
	        vpc_subnet_id: subnet-29e63245
	        assign_public_ip: yes
	  roles:
	    - do_neat_stuff
	    - do_more_neat_stuff
	
	- name: Stop sandbox instances
	  hosts: localhost
	  gather_facts: false
	  connection: local
	  vars:
	    instance_ids:
	      - 'i-xxxxxx'
	      - 'i-xxxxxx'
	      - 'i-xxxxxx'
	    region: us-east-1
	  tasks:
	    - name: Stop the sandbox instances
	      ec2:
	        instance_ids: '{{ instance_ids }}'
	        region: '{{ region }}'
	        state: stopped
	        wait: True
	        vpc_subnet_id: subnet-29e63245
	        assign_public_ip: yes
	
	#
	# Start stopped instances specified by tag
	#
	- local_action:
	    module: ec2
	    instance_tags:
	        Name: ExtraPower
	    state: running
	
	#
	# Restart instances specified by tag
	#
	- local_action:
	    module: ec2
	    instance_tags:
	        Name: ExtraPower
	    state: restarted
	
	#
	# Enforce that 5 instances with a tag "foo" are running
	# (Highly recommended!)
	#
	
	- ec2:
	    key_name: mykey
	    instance_type: c1.medium
	    image: ami-40603AD1
	    wait: yes
	    group: webserver
	    instance_tags:
	        foo: bar
	    exact_count: 5
	    count_tag: foo
	    vpc_subnet_id: subnet-29e63245
	    assign_public_ip: yes
	
	#
	# Enforce that 5 running instances named "database" with a "dbtype" of "postgres"
	#
	
	- ec2:
	    key_name: mykey
	    instance_type: c1.medium
	    image: ami-40603AD1
	    wait: yes
	    group: webserver
	    instance_tags:
	        Name: database
	        dbtype: postgres
	    exact_count: 5
	    count_tag:
	        Name: database
	        dbtype: postgres
	    vpc_subnet_id: subnet-29e63245
	    assign_public_ip: yes
	
	#
	# count_tag complex argument examples
	#
	
	    # instances with tag foo
	    count_tag:
	        foo:
	
	    # instances with tag foo=bar
	    count_tag:
	        foo: bar
	
	    # instances with tags foo=bar & baz
	    count_tag:
	        foo: bar
	        baz:
	
	    # instances with tags foo & bar & baz=bang
	    count_tag:
	        - foo
	        - bar
	        - baz: bang
	

snippet ecs_attribute
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# Set attributes
	- ecs_attribute:
	    state: present
	    cluster: test-cluster
	    ec2_instance_id: "{{ ec2_id }}"
	    attributes:
	      - flavor: test
	      - migrated
	  delegate_to: localhost
	
	# Delete attributes
	- ecs_attribute:
	    state: absent
	    cluster: test-cluster
	    ec2_instance_id: "{{ ec2_id }}"
	    attributes:
	      - flavor: test
	      - migrated
	  delegate_to: localhost
	
	RETURN VALUES:
	
	
	attributes:
	    description: attributes
	    type: complex
	    returned: always
	    contains:
	        cluster:
	            description: cluster name
	            type: string
	        ec2_instance_id:
	            description: ec2 instance id of ecs container instance
	            type: string
	        attributes:
	            description: list of attributes
	            type: list of complex
	            contains:
	                name:
	                    description: name of the attribute
	                    type: string
	                value:
	                    description: value of the attribute
	                    returned: if present
	                    type: string
	

snippet ecs_cluster
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# Cluster creation
	- ecs_cluster:
	    name: default
	    state: present
	
	# Cluster deletion
	- ecs_cluster:
	    name: default
	    state: absent
	
	- name: Wait for register
	  ecs_cluster:
	    name: "{{ new_cluster }}"
	    state: has_instances
	    delay: 10
	    repeat: 10
	  register: task_output
	
	RETURN VALUES:
	
	
	activeServicesCount:
	    description: how many services are active in this cluster
	    returned: 0 if a new cluster
	    type: int
	clusterArn:
	    description: the ARN of the cluster just created
	    type: string
	    returned: 0 if a new cluster
	    sample: arn:aws:ecs:us-west-2:172139249013:cluster/test-cluster-mfshcdok
	clusterName:
	    description: name of the cluster just created (should match the input argument)
	    type: string
	    returned: always
	    sample: test-cluster-mfshcdok
	pendingTasksCount:
	    description: how many tasks are waiting to run in this cluster
	    returned: 0 if a new cluster
	    type: int
	registeredContainerInstancesCount:
	    description: how many container instances are available in this cluster
	    returned: 0 if a new cluster
	    type: int
	runningTasksCount:
	    description: how many tasks are running in this cluster
	    returned: 0 if a new cluster
	    type: int
	status:
	    description: the status of the new cluster
	    returned: always
	    type: string
	    sample: ACTIVE
	

snippet ecs_ecr
	EXAMPLES:
	# If the repository does not exist, it is created. If it does exist, would not
	# affect any policies already on it.
	- name: ecr-repo
	  ecs_ecr: name=super/cool
	
	- name: destroy-ecr-repo
	  ecs_ecr: name=old/busted state=absent
	
	- name: Cross account ecr-repo
	  ecs_ecr: registry_id=999999999999 name=cross/account
	
	- name: set-policy as object
	  ecs_ecr:
	    name: needs-policy-object
	    policy:
	      Version: '2008-10-17'
	      Statement:
	        - Sid: read-only
	          Effect: Allow
	          Principal:
	            AWS: '{{ read_only_arn }}'
	          Action:
	            - ecr:GetDownloadUrlForLayer
	            - ecr:BatchGetImage
	            - ecr:BatchCheckLayerAvailability
	
	- name: set-policy as string
	  ecs_ecr:
	    name: needs-policy-string
	    policy: "{{ lookup('template', 'policy.json.j2') }}"
	
	- name: delete-policy
	  ecs_ecr:
	    name: needs-no-policy
	    delete_policy: yes
	
	RETURN VALUES:
	
	
	state:
	    type: string
	    description: The asserted state of the repository (present, absent)
	    returned: always
	created:
	    type: boolean
	    description: If true, the repository was created
	    returned: always
	name:
	    type: string
	    description: The name of the repository
	    returned: "when state == 'absent'"
	repository:
	    type: dict
	    description: The created or updated repository
	    returned: "when state == 'present'"
	    sample:
	        createdAt: '2017-01-17T08:41:32-06:00'
	        registryId: '999999999999'
	        repositoryArn: arn:aws:ecr:us-east-1:999999999999:repository/ecr-test-1484664090
	        repositoryName: ecr-test-1484664090
	        repositoryUri: 999999999999.dkr.ecr.us-east-1.amazonaws.com/ecr-test-1484664090
	

snippet ecs_service
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	- ecs_service:
	    state: present
	    name: console-test-service
	    cluster: new_cluster
	    task_definition: 'new_cluster-task:1'
	    desired_count: 0
	
	# Basic provisioning example
	- ecs_service:
	    name: default
	    state: present
	    cluster: new_cluster
	
	# Simple example to delete
	- ecs_service:
	    name: default
	    state: absent
	    cluster: new_cluster
	
	# With custom deployment configuration (added in version 2.3), placement constraints and strategy (added in version 2.4)
	- ecs_service:
	    state: present
	    name: test-service
	    cluster: test-cluster
	    task_definition: test-task-definition
	    desired_count: 3
	    deployment_configuration:
	      minimum_healthy_percent: 75
	      maximum_percent: 150
	    placement_constraints:
	      - type: memberOf
	        expression: 'attribute:flavor==test'
	    placement_strategy:
	      - type: binpack
	        field: memory
	
	RETURN VALUES:
	
	
	service:
	    description: Details of created service.
	    returned: when creating a service
	    type: complex
	    contains:
	        clusterArn:
	            description: The Amazon Resource Name (ARN) of the of the cluster that hosts the service.
	            returned: always
	            type: string
	        desiredCount:
	            description: The desired number of instantiations of the task definition to keep running on the service.
	            returned: always
	            type: int
	        loadBalancers:
	            description: A list of load balancer objects
	            returned: always
	            type: complex
	            contains:
	                loadBalancerName:
	                    description: the name
	                    returned: always
	                    type: string
	                containerName:
	                    description: The name of the container to associate with the load balancer.
	                    returned: always
	                    type: string
	                containerPort:
	                    description: The port on the container to associate with the load balancer.
	                    returned: always
	                    type: int
	        pendingCount:
	            description: The number of tasks in the cluster that are in the PENDING state.
	            returned: always
	            type: int
	        runningCount:
	            description: The number of tasks in the cluster that are in the RUNNING state.
	            returned: always
	            type: int
	        serviceArn:
	            description: The Amazon Resource Name (ARN) that identifies the service. The ARN contains the arn:aws:ecs namespace, followed by the region
	                         of the service, the AWS account ID of the service owner, the service namespace, and then the service name. For example,
	                         arn:aws:ecs:region :012345678910 :service/my-service .
	            returned: always
	            type: string
	        serviceName:
	            description: A user-generated string used to identify the service
	            returned: always
	            type: string
	        status:
	            description: The valid values are ACTIVE, DRAINING, or INACTIVE.
	            returned: always
	            type: string
	        taskDefinition:
	            description: The ARN of a task definition to use for tasks in the service.
	            returned: always
	            type: string
	        deployments:
	            description: list of service deployments
	            returned: always
	            type: list of complex
	        deploymentConfiguration:
	            description: dictionary of deploymentConfiguration
	            returned: always
	            type: complex
	            contains:
	                maximumPercent:
	                    description: maximumPercent param
	                    returned: always
	                    type: int
	                minimumHealthyPercent:
	                    description: minimumHealthyPercent param
	                    returned: always
	                    type: int
	        events:
	            description: list of service events
	            returned: always
	            type: list of complex
	        placementConstraints:
	            description: List of placement constraints objects
	            returned: always
	            type: list of complex
	            contains:
	                type:
	                    description: The type of constraint. Valid values are distinctInstance and memberOf.
	                    returned: always
	                    type: string
	                expression:
	                    description: A cluster query language expression to apply to the constraint. Note you cannot specify an expression if the constraint type is
	                                 distinctInstance.
	                    returned: always
	                    type: string
	        placementStrategy:
	            description: List of placement strategy objects
	            returned: always
	            type: list of complex
	            contains:
	                type:
	                    description: The type of placement strategy. Valid values are random, spread and binpack.
	                    returned: always
	                    type: string
	                field:
	                    description: The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId
	                                 (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance,
	                                 such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are CPU and MEMORY.
	                    returned: always
	                    type: string
	ansible_facts:
	    description: Facts about deleted service.
	    returned: when deleting a service
	    type: complex
	    contains:
	        service:
	            description: Details of deleted service in the same structure described above for service creation.
	            returned: when service existed and was deleted
	            type: complex
	

snippet ecs_service_facts
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# Basic listing example
	- ecs_service_facts:
	    cluster: test-cluster
	    service: console-test-service
	    details: true
	
	# Basic listing example
	- ecs_service_facts:
	    cluster: test-cluster
	
	RETURN VALUES:
	
	
	services:
	    description: When details is false, returns an array of service ARNs, otherwise an array of complex objects as described below.
	    returned: success
	    type: complex
	    contains:
	        clusterArn:
	            description: The Amazon Resource Name (ARN) of the of the cluster that hosts the service.
	            returned: always
	            type: string
	        desiredCount:
	            description: The desired number of instantiations of the task definition to keep running on the service.
	            returned: always
	            type: int
	        loadBalancers:
	            description: A list of load balancer objects
	            returned: always
	            type: complex
	            contains:
	                loadBalancerName:
	                    description: the name
	                    returned: always
	                    type: string
	                containerName:
	                    description: The name of the container to associate with the load balancer.
	                    returned: always
	                    type: string
	                containerPort:
	                    description: The port on the container to associate with the load balancer.
	                    returned: always
	                    type: int
	        pendingCount:
	            description: The number of tasks in the cluster that are in the PENDING state.
	            returned: always
	            type: int
	        runningCount:
	            description: The number of tasks in the cluster that are in the RUNNING state.
	            returned: always
	            type: int
	        serviceArn:
	            description: The Amazon Resource Name (ARN) that identifies the service. The ARN contains the arn:aws:ecs namespace, followed by the region of the service, the AWS account ID of the service owner, the service namespace, and then the service name. For example, arn:aws:ecs:region :012345678910 :service/my-service .
	            returned: always
	            type: string
	        serviceName:
	            description: A user-generated string used to identify the service
	            returned: always
	            type: string
	        status:
	            description: The valid values are ACTIVE, DRAINING, or INACTIVE.
	            returned: always
	            type: string
	        taskDefinition:
	            description: The ARN of a task definition to use for tasks in the service.
	            returned: always
	            type: string
	        deployments:
	            description: list of service deployments
	            returned: always
	            type: list of complex
	        events:
	            description: lost of service events
	            returned: always
	            type: list of complex
	

snippet ecs_task
	EXAMPLES:
	# Simple example of run task
	- name: Run task
	  ecs_task:
	    operation: run
	    cluster: console-sample-app-static-cluster
	    task_definition: console-sample-app-static-taskdef
	    count: 1
	    started_by: ansible_user
	  register: task_output
	
	# Simple example of start task
	
	- name: Start a task
	  ecs_task:
	      operation: start
	      cluster: console-sample-app-static-cluster
	      task_definition: console-sample-app-static-taskdef
	      task: "arn:aws:ecs:us-west-2:172139249013:task/3f8353d1-29a8-4689-bbf6-ad79937ffe8a"
	      container_instances:
	      - arn:aws:ecs:us-west-2:172139249013:container-instance/79c23f22-876c-438a-bddf-55c98a3538a8
	      started_by: ansible_user
	  register: task_output
	
	- name: Stop a task
	  ecs_task:
	      operation: stop
	      cluster: console-sample-app-static-cluster
	      task_definition: console-sample-app-static-taskdef
	      task: "arn:aws:ecs:us-west-2:172139249013:task/3f8353d1-29a8-4689-bbf6-ad79937ffe8a"
	
	RETURN VALUES:
	
	
	task:
	    description: details about the tast that was started
	    returned: success
	    type: complex
	    contains:
	        taskArn:
	            description: The Amazon Resource Name (ARN) that identifies the task.
	            returned: always
	            type: string
	        clusterArn:
	            description: The Amazon Resource Name (ARN) of the of the cluster that hosts the task.
	            returned: only when details is true
	            type: string
	        taskDefinitionArn:
	            description: The Amazon Resource Name (ARN) of the task definition.
	            returned: only when details is true
	            type: string
	        containerInstanceArn:
	            description: The Amazon Resource Name (ARN) of the container running the task.
	            returned: only when details is true
	            type: string
	        overrides:
	            description: The container overrides set for this task.
	            returned: only when details is true
	            type: list of complex
	        lastStatus:
	            description: The last recorded status of the task.
	            returned: only when details is true
	            type: string
	        desiredStatus:
	            description: The desired status of the task.
	            returned: only when details is true
	            type: string
	        containers:
	            description: The container details.
	            returned: only when details is true
	            type: list of complex
	        startedBy:
	            description: The used who started the task.
	            returned: only when details is true
	            type: string
	        stoppedReason:
	            description: The reason why the task was stopped.
	            returned: only when details is true
	            type: string
	        createdAt:
	            description: The timestamp of when the task was created.
	            returned: only when details is true
	            type: string
	        startedAt:
	            description: The timestamp of when the task was started.
	            returned: only when details is true
	            type: string
	        stoppedAt:
	            description: The timestamp of when the task was stopped.
	            returned: only when details is true
	            type: string
	

snippet ecs_taskdefinition
	EXAMPLES:
	- name: Create task definition
	  ecs_taskdefinition:
	    containers:
	    - name: simple-app
	      cpu: 10
	      essential: true
	      image: "httpd:2.4"
	      memory: 300
	      mountPoints:
	      - containerPath: /usr/local/apache2/htdocs
	        sourceVolume: my-vol
	      portMappings:
	      - containerPort: 80
	        hostPort: 80
	    - name: busybox
	      command:
	        - >
	          /bin/sh -c "while true; do echo '<html><head><title>Amazon ECS Sample App</title></head><body><div><h1>Amazon ECS Sample App</h1><h2>Congratulations!
	          </h2><p>Your application is now running on a container in Amazon ECS.</p>' > top; /bin/date > date ; echo '</div></body></html>' > bottom;
	          cat top date bottom > /usr/local/apache2/htdocs/index.html ; sleep 1; done"
	      cpu: 10
	      entryPoint:
	      - sh
	      - "-c"
	      essential: false
	      image: busybox
	      memory: 200
	      volumesFrom:
	      - sourceContainer: simple-app
	    volumes:
	    - name: my-vol
	    family: test-cluster-taskdef
	    state: present
	  register: task_output
	
	RETURN VALUES:
	
	
	taskdefinition:
	    description: a reflection of the input parameters
	    type: dict
	    returned: always
	

snippet efs
	EXAMPLES:
	# EFS provisioning
	- efs:
	    state: present
	    name: myTestEFS
	    tags:
	        name: myTestNameTag
	        purpose: file-storage
	    targets:
	        - subnet_id: subnet-748c5d03
	          security_groups: [ "sg-1a2b3c4d" ]
	
	# Modifying EFS data
	- efs:
	    state: present
	    name: myTestEFS
	    tags:
	        name: myAnotherTestTag
	    targets:
	        - subnet_id: subnet-7654fdca
	          security_groups: [ "sg-4c5d6f7a" ]
	
	# Deleting EFS
	- efs:
	    state: absent
	    name: myTestEFS
	
	RETURN VALUES:
	
	
	creation_time:
	    description: timestamp of creation date
	    returned: always
	    type: string
	    sample: "2015-11-16 07:30:57-05:00"
	creation_token:
	    description: EFS creation token
	    returned: always
	    type: string
	    sample: "console-88609e04-9a0e-4a2e-912c-feaa99509961"
	file_system_id:
	    description: ID of the file system
	    returned: always
	    type: string
	    sample: "fs-xxxxxxxx"
	life_cycle_state:
	    description: state of the EFS file system
	    returned: always
	    type: string
	    sample: "creating, available, deleting, deleted"
	mount_point:
	    description: url of file system
	    returned: always
	    type: string
	    sample: ".fs-xxxxxxxx.efs.us-west-2.amazonaws.com:/"
	mount_targets:
	    description: list of mount targets
	    returned: always
	    type: list
	    sample:
	        [
	            {
	                "file_system_id": "fs-a7ad440e",
	                "ip_address": "172.31.17.173",
	                "life_cycle_state": "available",
	                "mount_target_id": "fsmt-d8907871",
	                "network_interface_id": "eni-6e387e26",
	                "owner_id": "740748460359",
	                "security_groups": [
	                    "sg-a30b22c6"
	                ],
	                "subnet_id": "subnet-e265c895"
	            },
	            ...
	        ]
	name:
	    description: name of the file system
	    returned: always
	    type: string
	    sample: "my-efs"
	number_of_mount_targets:
	    description: the number of targets mounted
	    returned: always
	    type: int
	    sample: 3
	owner_id:
	    description: AWS account ID of EFS owner
	    returned: always
	    type: string
	    sample: "XXXXXXXXXXXX"
	size_in_bytes:
	    description: size of the file system in bytes as of a timestamp
	    returned: always
	    type: dict
	    sample:
	        {
	            "timestamp": "2015-12-21 13:59:59-05:00",
	            "value": 12288
	        }
	performance_mode:
	    description: performance mode of the file system
	    returned: always
	    type: string
	    sample: "generalPurpose"
	tags:
	    description: tags on the efs instance
	    returned: always
	    type: dict
	    sample:
	        {
	            "name": "my-efs",
	            "key": "Value"
	        }
	
	

snippet efs_facts
	EXAMPLES:
	# find all existing efs
	- efs_facts:
	  register: result
	
	- efs_facts:
	    name: myTestNameTag
	
	- efs_facts:
	    id: fs-1234abcd
	
	# Searching all EFS instances with tag Name = 'myTestNameTag', in subnet 'subnet-1a2b3c4d' and with security group 'sg-4d3c2b1a'
	- efs_facts:
	    tags:
	        name: myTestNameTag
	    targets:
	        - subnet-1a2b3c4d
	        - sg-4d3c2b1a
	
	RETURN VALUES:
	
	
	creation_time:
	    description: timestamp of creation date
	    returned: always
	    type: str
	    sample: "2015-11-16 07:30:57-05:00"
	creation_token:
	    description: EFS creation token
	    returned: always
	    type: str
	    sample: console-88609e04-9a0e-4a2e-912c-feaa99509961
	file_system_id:
	    description: ID of the file system
	    returned: always
	    type: str
	    sample: fs-xxxxxxxx
	life_cycle_state:
	    description: state of the EFS file system
	    returned: always
	    type: str
	    sample: creating, available, deleting, deleted
	mount_point:
	    description: url of file system
	    returned: always
	    type: str
	    sample: .fs-xxxxxxxx.efs.us-west-2.amazonaws.com:/
	mount_targets:
	    description: list of mount targets
	    returned: always
	    type: list
	    sample:
	        [
	            {
	                "file_system_id": "fs-a7ad440e",
	                "ip_address": "172.31.17.173",
	                "life_cycle_state": "available",
	                "mount_target_id": "fsmt-d8907871",
	                "network_interface_id": "eni-6e387e26",
	                "owner_id": "740748460359",
	                "security_groups": [
	                    "sg-a30b22c6"
	                ],
	                "subnet_id": "subnet-e265c895"
	            },
	            ...
	        ]
	name:
	    description: name of the file system
	    returned: always
	    type: str
	    sample: my-efs
	number_of_mount_targets:
	    description: the number of targets mounted
	    returned: always
	    type: int
	    sample: 3
	owner_id:
	    description: AWS account ID of EFS owner
	    returned: always
	    type: str
	    sample: XXXXXXXXXXXX
	size_in_bytes:
	    description: size of the file system in bytes as of a timestamp
	    returned: always
	    type: dict
	    sample:
	        {
	            "timestamp": "2015-12-21 13:59:59-05:00",
	            "value": 12288
	        }
	performance_mode:
	    description: performance mode of the file system
	    returned: always
	    type: str
	    sample: "generalPurpose"
	tags:
	    description: tags on the efs instance
	    returned: always
	    type: dict
	    sample:
	        {
	            "name": "my-efs",
	            "key": "Value"
	        }
	
	

snippet ejabberd_user
	EXAMPLES:
	# Example playbook entries using the ejabberd_user module to manage users state.
	
	- name: create a user if it does not exists
	  ejabberd_user:
	    username: test
	    host: server
	    password: password
	
	- name: delete a user if it exists
	  ejabberd_user:
	    username: test
	    host: server
	    state: absent
	

snippet elasticache
	EXAMPLES:
	# Note: None of these examples set aws_access_key, aws_secret_key, or region.
	# It is assumed that their matching environment variables are set.
	
	# Basic example
	- elasticache:
	    name: "test-please-delete"
	    state: present
	    engine: memcached
	    cache_engine_version: 1.4.14
	    node_type: cache.m1.small
	    num_nodes: 1
	    cache_port: 11211
	    cache_security_groups:
	      - default
	    zone: us-east-1d
	
	
	# Ensure cache cluster is gone
	- elasticache:
	    name: "test-please-delete"
	    state: absent
	
	# Reboot cache cluster
	- elasticache:
	    name: "test-please-delete"
	    state: rebooted
	

snippet elasticache_parameter_group
	EXAMPLES:
	# Note: None of these examples set aws_access_key, aws_secret_key, or region.
	# It is assumed that their matching environment variables are set.
	---
	- hosts: localhost
	  connection: local
	  tasks:
	    - name: 'Create a test parameter group'
	      elasticache_parameter_group:
	        name: 'test-param-group'
	        group_family: 'redis3.2'
	        description: 'This is a cache parameter group'
	        state: 'present'
	    - name: 'Modify a test parameter group'
	      elasticache_parameter_group:
	        name: 'test-param-group'
	        values:
	          activerehashing: yes
	          client-output-buffer-limit-normal-hard-limit: 4
	        state: 'present'
	    - name: 'Reset all modifiable parameters for the test parameter group'
	      elasticache_parameter_group:
	        name: 'test-param-group'
	        state: reset
	    - name: 'Delete a test parameter group'
	      elasticache_parameter_group:
	        name: 'test-param-group'
	        state: 'absent'
	
	RETURN VALUES:
	
	
	elasticache:
	  description: cache parameter group information and response metadata
	  returned: always
	  type: dict
	  sample:
	    cache_parameter_group:
	      cache_parameter_group_family: redis3.2
	      cache_parameter_group_name: test-please-delete
	      description: "initial description"
	    response_metadata:
	      http_headers:
	        content-length: "562"
	        content-type: text/xml
	        date: "Mon, 06 Feb 2017 22:14:08 GMT"
	        x-amzn-requestid: 947291f9-ecb9-11e6-85bd-3baa4eca2cc1
	      http_status_code: 200
	      request_id: 947291f9-ecb9-11e6-85bd-3baa4eca2cc1
	      retry_attempts: 0
	changed:
	  description: if the cache parameter group has changed
	  returned: always
	  type: bool
	  sample:
	    changed: true
	

snippet elasticache_snapshot
	EXAMPLES:
	# Note: None of these examples set aws_access_key, aws_secret_key, or region.
	# It is assumed that their matching environment variables are set.
	---
	- hosts: localhost
	  connection: local
	  tasks:
	    - name: 'Create a snapshot'
	      elasticache_snapshot:
	        name: 'test-snapshot'
	        state: 'present'
	        cluster_id: '{{ cluster }}'
	        replication_id: '{{ replication }}'
	
	RETURN VALUES:
	
	
	response_metadata:
	  description: response metadata about the snapshot
	  returned: always
	  type: dict
	  sample:
	    http_headers:
	      content-length: 1490
	      content-type: text/xml
	      date: Tue, 07 Feb 2017 16:43:04 GMT
	      x-amzn-requestid: 7f436dea-ed54-11e6-a04c-ab2372a1f14d
	    http_status_code: 200
	    request_id: 7f436dea-ed54-11e6-a04c-ab2372a1f14d
	    retry_attempts: 0
	snapshot:
	  description: snapshot data
	  returned: always
	  type: dict
	  sample:
	    auto_minor_version_upgrade: true
	    cache_cluster_create_time: 2017-02-01T17:43:58.261000+00:00
	    cache_cluster_id: test-please-delete
	    cache_node_type: cache.m1.small
	    cache_parameter_group_name: default.redis3.2
	    cache_subnet_group_name: default
	    engine: redis
	    engine_version: 3.2.4
	    node_snapshots:
	      cache_node_create_time: 2017-02-01T17:43:58.261000+00:00
	      cache_node_id: 0001
	      cache_size:
	    num_cache_nodes: 1
	    port: 11211
	    preferred_availability_zone: us-east-1d
	    preferred_maintenance_window: wed:03:00-wed:04:00
	    snapshot_name: deletesnapshot
	    snapshot_retention_limit: 0
	    snapshot_source: manual
	    snapshot_status: creating
	    snapshot_window: 10:00-11:00
	    vpc_id: vpc-c248fda4
	changed:
	  description: if a snapshot has been created, deleted, or copied
	  returned: always
	  type: bool
	  sample:
	    changed: true
	

snippet elasticache_subnet_group
	EXAMPLES:
	# Add or change a subnet group
	- elasticache_subnet_group:
	    state: present
	    name: norwegian-blue
	    description: My Fancy Ex Parrot Subnet Group
	    subnets:
	      - subnet-aaaaaaaa
	      - subnet-bbbbbbbb
	
	# Remove a subnet group
	- elasticache_subnet_group:
	    state: absent
	    name: norwegian-blue
	

snippet elasticsearch_plugin
	EXAMPLES:
	# Install Elasticsearch Head plugin in Elasticsearch 2.x
	- elasticsearch_plugin:
	    name: mobz/elasticsearch-head
	    state: present
	
	# Install a specific version of Elasticsearch Head in Elasticsearch 2.x
	- elasticsearch_plugin:
	    name: mobz/elasticsearch-head
	    versino: 2.0.0
	
	# Uninstall Elasticsearch head plugin in Elasticsearch 2.x
	- elasticsearch_plugin:
	    name: mobz/elasticsearch-head
	    state: absent
	
	# Install a specific plugin in Elasticsearch >= 5.0
	- elasticsearch_plugin:
	    name: analysis-icu
	    state: present
	

snippet execute_lambda
	EXAMPLES:
	- execute_lambda:
	    name: test-function
	    # the payload is automatically serialized and sent to the function
	    payload:
	      foo: bar
	      value: 8
	  register: response
	
	# Test that you have sufficient permissions to execute a Lambda function in
	# another account
	- execute_lambda:
	    function_arn: arn:aws:lambda:us-east-1:123456789012:function/some-function
	    dry_run: true
	
	- execute_lambda:
	    name: test-function
	    payload:
	      foo: bar
	      value: 8
	    wait: true
	    tail_log: true
	  register: response
	  # the response will have a `logs` key that will contain a log (up to 4KB) of the function execution in Lambda.
	
	- execute_lambda:
	    name: test-function
	    version_qualifier: PRODUCTION
	
	RETURN VALUES:
	
	
	output:
	    description: Function output if wait=true and the function returns a value
	    returned: success
	    type: dict
	    sample: "{ 'output': 'something' }"
	logs:
	    description: The last 4KB of the function logs. Only provided if I(tail_log) is true
	    type: string
	    returned: if I(tail_log) == true
	status:
	    description: C(StatusCode) of API call exit (200 for synchronous invokes, 202 for async)
	    type: int
	    sample: 200
	    returned: always
	

snippet exo_dns_domain
	EXAMPLES:
	- name: Create a domain
	  local_action:
	    module: exo_dns_domain
	    name: example.com
	
	- name: Remove a domain
	  local_action:
	    module: exo_dns_domain
	    name: example.com
	    state: absent
	
	RETURN VALUES:
	
	
	---
	exo_dns_domain:
	    description: API domain results
	    returned: success
	    type: complex
	    contains:
	        account_id:
	            description: Your account ID
	            returned: success
	            type: int
	            sample: 34569
	        auto_renew:
	            description: Whether domain is auto renewed or not
	            returned: success
	            type: bool
	            sample: false
	        created_at:
	            description: When the domain was created
	            returned: success
	            type: string
	            sample: "2016-08-12T15:24:23.989Z"
	        expires_on:
	            description: When the domain expires
	            returned: success
	            type: string
	            sample: "2016-08-12T15:24:23.989Z"
	        id:
	            description: ID of the domain
	            returned: success
	            type: int
	            sample: "2016-08-12T15:24:23.989Z"
	        lockable:
	            description: Whether the domain is lockable or not
	            returned: success
	            type: bool
	            sample: true
	        name:
	            description: Domain name
	            returned: success
	            type: string
	            sample: example.com
	        record_count:
	            description: Number of records related to this domain
	            returned: success
	            type: int
	            sample: 5
	        registrant_id:
	            description: ID of the registrant
	            returned: success
	            type: int
	            sample: null
	        service_count:
	            description: Number of services
	            returned: success
	            type: int
	            sample: 0
	        state:
	            description: State of the domain
	            returned: success
	            type: string
	            sample: "hosted"
	        token:
	            description: Token
	            returned: success
	            type: string
	            sample: "r4NzTRp6opIeFKfaFYvOd6MlhGyD07jl"
	        unicode_name:
	            description: Domain name as unicode
	            returned: success
	            type: string
	            sample: "example.com"
	        updated_at:
	            description: When the domain was updated last.
	            returned: success
	            type: string
	            sample: "2016-08-12T15:24:23.989Z"
	        user_id:
	            description: ID of the user
	            returned: success
	            type: int
	            sample: null
	        whois_protected:
	            description: Whether the whois is protected or not
	            returned: success
	            type: bool
	            sample: false
	

snippet exo_dns_record
	EXAMPLES:
	- name: Create or update an A record
	  local_action:
	    module: exo_dns_record
	    name: web-vm-1
	    domain: example.com
	    content: 1.2.3.4
	
	- name: Update an existing A record with a new IP
	  local_action:
	    module: exo_dns_record
	    name: web-vm-1
	    domain: example.com
	    content: 1.2.3.5
	
	- name: Create another A record with same name
	  local_action:
	    module: exo_dns_record
	    name: web-vm-1
	    domain: example.com
	    content: 1.2.3.6
	    multiple: yes
	
	- name: Create or update a CNAME record
	  local_action:
	    module: exo_dns_record
	    name: www
	    domain: example.com
	    record_type: CNAME
	    content: web-vm-1
	
	- name: Create or update a MX record
	  local_action:
	    module: exo_dns_record
	    domain: example.com
	    record_type: MX
	    content: mx1.example.com
	    prio: 10
	
	- name: Delete a MX record
	  local_action:
	    module: exo_dns_record
	    domain: example.com
	    record_type: MX
	    content: mx1.example.com
	    state: absent
	
	- name: Remove a record
	  local_action:
	    module: exo_dns_record
	    name: www
	    domain: example.com
	    state: absent
	
	RETURN VALUES:
	
	
	---
	exo_dns_record:
	    description: API record results
	    returned: success
	    type: complex
	    contains:
	        content:
	            description: value of the record
	            returned: success
	            type: string
	            sample: 1.2.3.4
	        created_at:
	            description: When the record was created
	            returned: success
	            type: string
	            sample: "2016-08-12T15:24:23.989Z"
	        domain:
	            description: Name of the domain
	            returned: success
	            type: string
	            sample: example.com
	        domain_id:
	            description: ID of the domain
	            returned: success
	            type: int
	            sample: 254324
	        id:
	            description: ID of the record
	            returned: success
	            type: int
	            sample: 254324
	        name:
	            description: name of the record
	            returned: success
	            type: string
	            sample: www
	        parent_id:
	            description: ID of the parent
	            returned: success
	            type: int
	            sample: null
	        prio:
	            description: Priority of the record
	            returned: success
	            type: int
	            sample: 10
	        record_type:
	            description: Priority of the record
	            returned: success
	            type: string
	            sample: A
	        system_record:
	            description: Whether the record is a system record or not
	            returned: success
	            type: bool
	            sample: false
	        ttl:
	            description: Time to live of the record
	            returned: success
	            type: int
	            sample: 3600
	        updated_at:
	            description: When the record was updated
	            returned: success
	            type: string
	            sample: "2016-08-12T15:24:23.989Z"
	

snippet expect
	EXAMPLES:
	- name: Case insensitve password string match
	  expect:
	    command: passwd username
	    responses:
	      (?i)password: "MySekretPa$$word"
	
	- name: Generic question with multiple different responses
	  expect:
	    command: /path/to/custom/command
	    responses:
	      Question:
	        - response1
	        - response2
	        - response3
	

snippet facter
	EXAMPLES:
	# Example command-line invocation
	ansible www.example.net -m facter
	

snippet fail
	EXAMPLES:
	# Example playbook using fail and when together
	- fail:
	    msg: "The system may not be provisioned according to the CMDB status."
	  when: cmdb_status != "to-be-staged"
	

snippet fetch
	EXAMPLES:
	# Store file into /tmp/fetched/host.example.com/tmp/somefile
	- fetch:
	    src: /tmp/somefile
	    dest: /tmp/fetched
	
	# Specifying a path directly
	- fetch:
	    src: /tmp/somefile
	    dest: /tmp/prefix-{{ inventory_hostname }}
	    flat: yes
	
	# Specifying a destination path
	- fetch:
	    src: /tmp/uniquefile
	    dest: /tmp/special/
	    flat: yes
	
	# Storing in a path relative to the playbook
	- fetch:
	    src: /tmp/uniquefile
	    dest: special/prefix-{{ inventory_hostname }}
	    flat: yes
	

snippet file
	EXAMPLES:
	# change file ownership, group and mode. When specifying mode using octal numbers, first digit should always be 0.
	- file:
	    path: /etc/foo.conf
	    owner: foo
	    group: foo
	    mode: 0644
	- file:
	    src: /file/to/link/to
	    dest: /path/to/symlink
	    owner: foo
	    group: foo
	    state: link
	- file:
	    src: '/tmp/{{ item.src }}'
	    dest: '{{ item.dest }}'
	    state: link
	  with_items:
	    - { src: 'x', dest: 'y' }
	    - { src: 'z', dest: 'k' }
	
	# touch a file, using symbolic modes to set the permissions (equivalent to 0644)
	- file:
	    path: /etc/foo.conf
	    state: touch
	    mode: "u=rw,g=r,o=r"
	
	# touch the same file, but add/remove some permissions
	- file:
	    path: /etc/foo.conf
	    state: touch
	    mode: "u+rw,g-wx,o-rwx"
	
	# create a directory if it doesn't exist
	- file:
	    path: /etc/some_directory
	    state: directory
	    mode: 0755
	

snippet filesystem
	EXAMPLES:
	# Create a ext2 filesystem on /dev/sdb1.
	- filesystem:
	    fstype: ext2
	    dev: /dev/sdb1
	
	# Create a ext4 filesystem on /dev/sdb1 and check disk blocks.
	- filesystem:
	    fstype: ext4
	    dev: /dev/sdb1
	    opts: -cc
	

snippet find
	EXAMPLES:
	- name: Recursively find /tmp files older than 2 days
	  find:
	    paths: /tmp
	    age: 2d
	    recurse: yes
	
	- name: Recursively find /tmp files older than 4 weeks and equal or greater than 1 megabyte
	- find:
	    paths: /tmp
	    age: 4w
	    size: 1m
	    recurse: yes
	
	- name: Recursively find /var/tmp files with last access time greater than 3600 seconds
	- find:
	    paths: /var/tmp
	    age: 3600
	    age_stamp: atime
	    recurse: yes
	
	- name: Find /var/log files equal or greater than 10 megabytes ending with .old or .log.gz
	- find:
	    paths: /var/log
	    patterns: '*.old,*.log.gz'
	    size: 10m
	
	# Note that YAML double quotes require escaping backslashes but yaml single quotes do not.
	- name: Find /var/log files equal or greater than 10 megabytes ending with .old or .log.gz via regex
	- find:
	    paths: /var/log
	    patterns: "^.*?\\.(?:old|log\\.gz)$"
	    size: 10m
	    use_regex: yes
	
	RETURN VALUES:
	
	
	files:
	    description: all matches found with the specified criteria (see stat module for full output of each dictionary)
	    returned: success
	    type: list
	    sample: [
	        { path: "/var/tmp/test1",
	          mode: "0644",
	          "...": "...",
	          checksum: 16fac7be61a6e4591a33ef4b729c5c3302307523
	        },
	        { path: "/var/tmp/test2",
	          "...": "..."
	        },
	        ]
	matched:
	    description: number of matches
	    returned: success
	    type: string
	    sample: 14
	examined:
	    description: number of filesystem objects looked at
	    returned: success
	    type: string
	    sample: 34
	

snippet firewalld
	EXAMPLES:
	- firewalld:
	    service: https
	    permanent: true
	    state: enabled
	
	- firewalld:
	    port: 8081/tcp
	    permanent: true
	    state: disabled
	
	- firewalld:
	    port: 161-162/udp
	    permanent: true
	    state: enabled
	
	- firewalld:
	    zone: dmz
	    service: http
	    permanent: true
	    state: enabled
	
	- firewalld:
	    rich_rule: 'rule service name="ftp" audit limit value="1/m" accept'
	    permanent: true
	    state: enabled
	
	- firewalld:
	    source: 192.0.2.0/24
	    zone: internal
	    state: enabled
	
	- firewalld:
	    zone: trusted
	    interface: eth2
	    permanent: true
	    state: enabled
	
	- firewalld:
	    masquerade: yes
	    state: enabled
	    permanent: true
	    zone: dmz
	

snippet flowadm
	EXAMPLES:
	# Limit SSH traffic to 100M via vnic0 interface
	- flowadm:
	    link: vnic0
	    flow: ssh_out
	    transport: tcp
	    local_port: 22
	    maxbw: 100M
	    state: present
	
	# Reset flow properties
	- flowadm:
	    name: dns
	    state: resetted
	
	# Configure policy for EF PHB (DSCP value of 101110 from RFC 2598) with a bandwidth of 500 Mbps and a high priority.
	- flowadm:
	    link: bge0
	    dsfield: '0x2e:0xfc'
	    maxbw: 500M
	    priority: high
	    flow: efphb-flow
	    state: present
	
	RETURN VALUES:
	
	
	name:
	    description: flow name
	    returned: always
	    type: string
	    sample: "http_drop"
	link:
	    description: flow's link
	    returned: if link is defined
	    type: string
	    sample: "vnic0"
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: "present"
	temporary:
	    description: flow's persistence
	    returned: always
	    type: boolean
	    sample: "True"
	priority:
	    description: flow's priority
	    returned: if priority is defined
	    type: string
	    sample: "low"
	transport:
	    description: flow's transport
	    returned: if transport is defined
	    type: string
	    sample: "tcp"
	maxbw:
	    description: flow's maximum bandwidth
	    returned: if maxbw is defined
	    type: string
	    sample: "100M"
	local_Ip:
	    description: flow's local IP address
	    returned: if local_ip is defined
	    type: string
	    sample: "10.0.0.42"
	local_port:
	    description: flow's local port
	    returned: if local_port is defined
	    type: int
	    sample: 1337
	remote_Ip:
	    description: flow's remote IP address
	    returned: if remote_ip is defined
	    type: string
	    sample: "10.0.0.42"
	dsfield:
	    description: flow's differentiated services value
	    returned: if dsfield is defined
	    type: string
	    sample: "0x2e:0xfc"
	

snippet flowdock
	EXAMPLES:
	- flowdock:
	    type: inbox
	    token: AAAAAA
	    from_address: user@example.com
	    source: my cool app
	    msg: test from ansible
	    subject: test subject
	
	- flowdock:
	    type: chat
	    token: AAAAAA
	    external_user_name: testuser
	    msg: test from ansible
	    tags: tag1,tag2,tag3
	

snippet foreman
	EXAMPLES:
	- name: "Create CI Organization"
	  local_action:
	      module: foreman
	      username: "admin"
	      password: "admin"
	      server_url: "https://fakeserver.com"
	      entity: "organization"
	      params:
	        name: "My Cool New Organization"
	
	RETURN VALUES:
	
	# 

snippet fortios_address
	EXAMPLES:
	- name: Register french addresses
	  fortios_address:
	    host: 192.168.0.254
	    username: admin
	    password: p4ssw0rd
	    state: present
	    name: "fromfrance"
	    type: geography
	    country: FR
	    comment: "French geoip address"
	
	- name: Register some fqdn
	  fortios_address:
	    host: 192.168.0.254
	    username: admin
	    password: p4ssw0rd
	    state: present
	    name: "Ansible"
	    type: fqdn
	    value: www.ansible.com
	    comment: "Ansible website"
	
	- name: Register google DNS
	  fortios_address:
	    host: 192.168.0.254
	    username: admin
	    password: p4ssw0rd
	    state: present
	    name: "google_dns"
	    type: ipmask
	    value: 8.8.8.8
	
	RETURN VALUES:
	
	
	firewall_address_config:
	  description: full firewall adresses config string.
	  returned: always
	  type: string
	change_string:
	  description: The commands executed by the module.
	  returned: only if config changed
	  type: string
	

snippet fortios_config
	EXAMPLES:
	- name: Backup current config
	  fortios_config:
	    host: 192.168.0.254
	    username: admin
	    password: password
	    backup: yes
	
	- name: Backup only address objects
	  fortios_config:
	    host: 192.168.0.254
	    username: admin
	    password: password
	    backup: yes
	    backup_path: /tmp/forti_backup/
	    filter: "firewall address"
	
	- name: Update configuration from file
	  fortios_config:
	    host: 192.168.0.254
	    username: admin
	    password: password
	    src: new_configuration.conf.j2
	
	RETURN VALUES:
	
	
	running_config:
	  description: full config string
	  returned: always
	  type: string
	change_string:
	  description: The commands really executed by the module
	  returned: only if config changed
	  type: string
	

snippet fortios_ipv4_policy
	EXAMPLES:
	- name: Allow external DNS call
	  fortios_ipv4_policy:
	    host: 192.168.0.254
	    username: admin
	    password: password
	    id: 42
	    src_addr: internal_network
	    dst_addr: all
	    service: dns
	    nat: True
	    state: present
	    policy_action: accept
	    logtraffic: disable
	
	- name: Public Web
	  fortios_ipv4_policy:
	    host: 192.168.0.254
	    username: admin
	    password: password
	    id: 42
	    src_addr: all
	    dst_addr: webservers
	    services:
	      - http
	      - https
	    state: present
	    policy_action: accept
	
	RETURN VALUES:
	
	
	firewall_address_config:
	  description: full firewall addresses config string
	  returned: always
	  type: string
	change_string:
	  description: The commands executed by the module
	  returned: only if config changed
	  type: string
	msg_error_list:
	  description: "List of errors returned by CLI (use -vvv for better readability)."
	  returned: only when error
	  type: string
	

snippet gc_storage
	EXAMPLES:
	- name: Upload some content
	  gc_storage:
	    bucket: mybucket
	    object: key.txt
	    src: /usr/local/myfile.txt
	    mode: put
	    permission: public-read
	
	- name: Upload some headers
	  gc_storage:
	    bucket: mybucket
	    object: key.txt
	    src: /usr/local/myfile.txt
	    headers: '{"Content-Encoding": "gzip"}'
	
	- name: Download some content
	  gc_storage:
	    bucket: mybucket
	    object: key.txt
	    dest: /usr/local/myfile.txt
	    mode: get
	
	- name: Download an object as a string to use else where in your playbook
	  gc_storage:
	    bucket: mybucket
	    object: key.txt
	    mode: get_str
	
	- name: Create an empty bucket
	  gc_storage:
	    bucket: mybucket
	    mode: create
	
	- name: Create a bucket with key as directory
	  gc_storage:
	    bucket: mybucket
	    object: /my/directory/path
	    mode: create
	
	- name: Delete a bucket and all contents
	  gc_storage:
	    bucket: mybucket
	    mode: delete
	
	- name: Create a bucket with versioning enabled
	  gc_storage:
	    bucket: "mybucket"
	    versioning: yes
	    mode: create
	
	- name: Create a bucket located in the eu
	  gc_storage:
	    bucket: "mybucket"
	    region: "europe-west3"
	    mode: create
	

snippet gcdns_record
	EXAMPLES:
	# Create an A record.
	- gcdns_record:
	    record: 'www1.example.com'
	    zone: 'example.com'
	    type: A
	    value: '1.2.3.4'
	
	# Update an existing record.
	- gcdns_record:
	    record: 'www1.example.com'
	    zone: 'example.com'
	    type: A
	    overwrite: true
	    value: '5.6.7.8'
	
	# Remove an A record.
	- gcdns_record:
	    record: 'www1.example.com'
	    zone_id: 'example-com'
	    state: absent
	    type: A
	    value: '5.6.7.8'
	
	# Create a CNAME record.
	- gcdns_record:
	    record: 'www.example.com'
	    zone_id: 'example-com'
	    type: CNAME
	    value: 'www.example.com.'    # Note the trailing dot
	
	# Create an MX record with a custom TTL.
	- gcdns_record:
	    record: 'example.com'
	    zone: 'example.com'
	    type: MX
	    ttl: 3600
	    value: '10 mail.example.com.'    # Note the trailing dot
	
	# Create multiple A records with the same name.
	- gcdns_record:
	    record: 'api.example.com'
	    zone_id: 'example-com'
	    type: A
	    record_data:
	      - '192.0.2.23'
	      - '10.4.5.6'
	      - '198.51.100.5'
	      - '203.0.113.10'
	
	# Change the value of an existing record with multiple record_data.
	- gcdns_record:
	    record: 'api.example.com'
	    zone: 'example.com'
	    type: A
	    overwrite: true
	    record_data:           # WARNING: All values in a record will be replaced
	      - '192.0.2.23'
	      - '192.0.2.42'    # The changed record
	      - '198.51.100.5'
	      - '203.0.113.10'
	
	# Safely remove a multi-line record.
	- gcdns_record:
	    record: 'api.example.com'
	    zone_id: 'example-com'
	    state: absent
	    type: A
	    record_data:           # NOTE: All of the values must match exactly
	      - '192.0.2.23'
	      - '192.0.2.42'
	      - '198.51.100.5'
	      - '203.0.113.10'
	
	# Unconditionally remove a record.
	- gcdns_record:
	    record: 'api.example.com'
	    zone_id: 'example-com'
	    state: absent
	    overwrite: true   # overwrite is true, so no values are needed
	    type: A
	
	# Create an AAAA record
	- gcdns_record:
	    record: 'www1.example.com'
	    zone: 'example.com'
	    type: AAAA
	    value: 'fd00:db8::1'
	
	# Create a PTR record
	- gcdns_record:
	    record: '10.5.168.192.in-addr.arpa'
	    zone: '5.168.192.in-addr.arpa'
	    type: PTR
	    value: 'api.example.com.'    # Note the trailing dot.
	
	# Create an NS record
	- gcdns_record:
	    record: 'subdomain.example.com'
	    zone: 'example.com'
	    type: NS
	    ttl: 21600
	    record_data:
	      - 'ns-cloud-d1.googledomains.com.'    # Note the trailing dots on values
	      - 'ns-cloud-d2.googledomains.com.'
	      - 'ns-cloud-d3.googledomains.com.'
	      - 'ns-cloud-d4.googledomains.com.'
	
	# Create a TXT record
	- gcdns_record:
	    record: 'example.com'
	    zone_id: 'example-com'
	    type: TXT
	    record_data:
	      - '"v=spf1 include:_spf.google.com -all"'   # A single-string TXT value
	      - '"hello " "world"'    # A multi-string TXT value
	
	RETURN VALUES:
	
	
	overwrite:
	    description: Whether to the module was allowed to overwrite the record
	    returned: success
	    type: boolean
	    sample: True
	record:
	    description: Fully-qualified domain name of the resource record
	    returned: success
	    type: string
	    sample: mail.example.com.
	state:
	    description: Whether the record is present or absent
	    returned: success
	    type: string
	    sample: present
	ttl:
	    description: The time-to-live of the resource record
	    returned: success
	    type: int
	    sample: 300
	type:
	    description: The type of the resource record
	    returned: success
	    type: string
	    sample: A
	record_data:
	    description: The resource record values
	    returned: success
	    type: list
	    sample: ['5.6.7.8', '9.10.11.12']
	zone:
	    description: The dns name of the zone
	    returned: success
	    type: string
	    sample: example.com.
	zone_id:
	    description: The Google Cloud DNS ID of the zone
	    returned: success
	    type: string
	    sample: example-com
	

snippet gcdns_zone
	EXAMPLES:
	# Basic zone creation example.
	- name: Create a basic zone with the minimum number of parameters.
	  gcdns_zone: zone=example.com
	
	# Zone removal example.
	- name: Remove a zone.
	  gcdns_zone: zone=example.com state=absent
	
	# Zone creation with description
	- name: Creating a zone with a description
	  gcdns_zone: zone=example.com description="This is an awesome zone"
	
	RETURN VALUES:
	
	
	description:
	    description: The zone's description
	    returned: success
	    type: string
	    sample: This is an awesome zone
	state:
	    description: Whether the zone is present or absent
	    returned: success
	    type: string
	    sample: present
	zone:
	    description: The zone's DNS name
	    returned: success
	    type: string
	    sample: example.com.
	

snippet gconftool2
	EXAMPLES:
	- name: Change the widget font to "Serif 12"
	  gconftool2:
	    key: "/desktop/gnome/interface/font_name"
	    value_type: "string"
	    value: "Serif 12"
	
	RETURN VALUES:
	
	
	  key:
	    description: The key specified in the module parameters
	    returned: success
	    type: string
	    sample: "/desktop/gnome/interface/font_name"
	  value_type:
	    description: The type of the value that was changed
	    returned: success
	    type: string
	    sample: "string"
	  value:
	    description: The value of the preference key after executing the module
	    returned: success
	    type: string
	    sample: "Serif 12"
	...
	

snippet gcp_backend_service
	EXAMPLES:
	- name: Create Minimum Backend Service
	  gcp_backend_service:
	    service_account_email: "{{ service_account_email }}"
	    credentials_file: "{{ credentials_file }}"
	    project_id: "{{ project_id }}"
	    backend_service_name: "{{ bes }}"
	    backends:
	    - instance_group: managed_instance_group_1
	    healthchecks:
	    - name: healthcheck_name_for_backend_service
	    port_name: myhttpport
	    state: present
	
	- name: Create BES with extended backend parameters
	  gcp_backend_service:
	    service_account_email: "{{ service_account_email }}"
	    credentials_file: "{{ credentials_file }}"
	    project_id: "{{ project_id }}"
	    backend_service_name: "{{ bes }}"
	    backends:
	    - instance_group: managed_instance_group_1
	      max_utilization: 0.6
	      max_rate: 10
	    - instance_group: managed_instance_group_2
	      max_utilization: 0.5
	      max_rate: 4
	    healthchecks:
	    - name: healthcheck_name_for_backend_service
	    port_name: myhttpport
	    state: present
	    timeout: 60
	
	RETURN VALUES:
	
	
	backend_service_created:
	    description: Indicator Backend Service was created.
	    returned: When a Backend Service is created.
	    type: boolean
	    sample: "True"
	backend_service_deleted:
	    description: Indicator Backend Service was deleted.
	    returned: When a Backend Service is deleted.
	    type: boolean
	    sample: "True"
	backend_service_name:
	    description: Name of the Backend Service.
	    returned: Always.
	    type: string
	    sample: "my-backend-service"
	backends:
	    description: List of backends (comprised of instance_group) that
	                 make up a Backend Service.
	    returned: When a Backend Service exists.
	    type: list
	    sample: "[ { 'instance_group': 'mig_one', 'zone': 'us-central1-b'} ]"
	enable_cdn:
	    description: If Cloud CDN is enabled. null if not set.
	    returned: When a backend service exists.
	    type: boolean
	    sample: "True"
	healthchecks:
	    description: List of healthchecks applied to the Backend Service.
	    returned: When a Backend Service exists.
	    type: list
	    sample: "[ 'my-healthcheck' ]"
	protocol:
	    description: Protocol used to communicate with the Backends.
	    returned: When a Backend Service exists.
	    type: string
	    sample: "HTTP"
	port_name:
	    description: Name of Backend Port.
	    returned: When a Backend Service exists.
	    type: string
	    sample: "myhttpport"
	timeout:
	    description: In seconds, how long before a request sent to a backend is
	                 considered failed.
	    returned: If specified.
	    type: int
	    sample: "myhttpport"
	

snippet gcp_forwarding_rule
	EXAMPLES:
	- name: Create Minimum GLOBAL Forwarding_Rule
	  gcp_forwarding_rule:
	    service_account_email: "{{ service_account_email }}"
	    credentials_file: "{{ credentials_file }}"
	    project_id: "{{ project_id }}"
	    forwarding_rule_name: my-forwarding_rule
	    protocol: TCP
	    port_range: 80
	    region: global
	    target: my-target-proxy
	    state: present
	
	- name: Create Forwarding_Rule w/reserved static address
	  gcp_forwarding_rule:
	    service_account_email: "{{ service_account_email }}"
	    credentials_file: "{{ credentials_file }}"
	    project_id: "{{ project_id }}"
	    forwarding_rule_name: my-forwarding_rule
	    protocol: TCP
	    port_range: 80
	    address: my-reserved-static-address-name
	    region: global
	    target: my-target-proxy
	    state: present
	
	RETURN VALUES:
	
	
	forwarding_rule_name:
	    description: Name of the Forwarding_Rule
	    returned: Always
	    type: str
	    sample: my-target-proxy
	forwarding_rule:
	    description: GCP Forwarding_Rule dictionary
	    returned: Always. Refer to GCP documentation for detailed field descriptions.
	    type: dict
	    sample: { "name": "my-forwarding_rule", "target": "..." }
	region:
	    description: Region for Forwarding Rule.
	    returned: Always
	    type: bool
	    sample: true
	state:
	    description: state of the Forwarding_Rule
	    returned: Always.
	    type: str
	    sample: present
	

snippet gcp_healthcheck
	EXAMPLES:
	- name: Create Minimum HealthCheck
	  gcp_healthcheck:
	    service_account_email: "{{ service_account_email }}"
	    credentials_file: "{{ credentials_file }}"
	    project_id: "{{ project_id }}"
	    healthcheck_name: my-healthcheck
	    healthcheck_type: HTTP
	    state: present
	- name: Create HTTP HealthCheck
	  gcp_healthcheck:
	    service_account_email: "{{ service_account_email }}"
	    credentials_file: "{{ credentials_file }}"
	    project_id: "{{ project_id }}"
	    healthcheck_name: my-healthcheck
	    healthcheck_type: HTTP
	    host: my-host
	    request_path: /hc
	    check_interval: 10
	    timeout: 30
	    unhealthy_threshhold: 2
	    healthy_threshhold: 1
	    state: present
	- name: Create HTTPS HealthCheck
	  gcp_healthcheck:
	    service_account_email: "{{ service_account_email }}"
	    credentials_file: "{{ credentials_file }}"
	    project_id: "{{ project_id }}"
	    healthcheck_name: "{{ https_healthcheck }}"
	    healthcheck_type: HTTPS
	    host_header: my-host
	    request_path: /hc
	    check_interval: 5
	    timeout: 5
	    unhealthy_threshold: 2
	    healthy_threshold: 1
	    state: present
	
	RETURN VALUES:
	
	
	state:
	    description: state of the Healthcheck
	    returned: Always.
	    type: str
	    sample: present
	healthcheck_name:
	    description: Name of the Healthcheck
	    returned: Always
	    type: str
	    sample: my-url-map
	healthcheck_type:
	    description: Type of the Healthcheck
	    returned: Always
	    type: str
	    sample: HTTP
	healthcheck:
	    description: GCP Healthcheck dictionary
	    returned: Always. Refer to GCP documentation for detailed field descriptions.
	    type: dict
	    sample: { "name": "my-hc", "port": 443, "requestPath": "/foo" }
	

snippet gcp_target_proxy
	EXAMPLES:
	- name: Create Minimum HTTP Target_Proxy
	  gcp_target_proxy:
	    service_account_email: "{{ service_account_email }}"
	    credentials_file: "{{ credentials_file }}"
	    project_id: "{{ project_id }}"
	    target_proxy_name: my-target_proxy
	    target_proxy_type: HTTP
	    url_map_name: my-url-map
	    state: present
	
	RETURN VALUES:
	
	
	state:
	    description: state of the Target_Proxy
	    returned: Always.
	    type: str
	    sample: present
	updated_target_proxy:
	    description: True if the target_proxy has been updated. Will not appear on
	                 initial target_proxy creation.
	    returned: if the target_proxy has been updated.
	    type: bool
	    sample: true
	target_proxy_name:
	    description: Name of the Target_Proxy
	    returned: Always
	    type: str
	    sample: my-target-proxy
	target_proxy_type:
	    description: Type of Target_Proxy. One of HTTP, HTTPS or SSL.
	    returned: Always
	    type: str
	    sample: HTTP
	target_proxy:
	    description: GCP Target_Proxy dictionary
	    returned: Always. Refer to GCP documentation for detailed field descriptions.
	    type: dict
	    sample: { "name": "my-target-proxy", "urlMap": "..." }
	

snippet gcp_url_map
	EXAMPLES:
	- name: Create Minimal Url_Map
	  gcp_url_map:
	    service_account_email: "{{ service_account_email }}"
	    credentials_file: "{{ credentials_file }}"
	    project_id: "{{ project_id }}"
	    url_map_name: my-url_map
	    default_service: my-backend-service
	    state: present
	- name: Create UrlMap with pathmatcher
	  gcp_url_map:
	    service_account_email: "{{ service_account_email }}"
	    credentials_file: "{{ credentials_file }}"
	    project_id: "{{ project_id }}"
	    url_map_name: my-url-map-pm
	    default_service: default-backend-service
	    path_matchers:
	    - name: 'path-matcher-one'
	      description: 'path matcher one'
	      default_service: 'bes-pathmatcher-one-default'
	      path_rules:
	      - service: 'my-one-bes'
	        paths:
	        - '/data'
	        - '/aboutus'
	    host_rules:
	      - hosts:
	        - '*.'
	        path_matcher: 'path-matcher-one'
	    state: "present"
	
	RETURN VALUES:
	
	
	host_rules:
	    description: List of HostRules.
	    returned: If specified.
	    type: dict
	    sample: [ { hosts: ["*."], "path_matcher": "my-pm" } ]
	path_matchers:
	    description: The list of named PathMatchers to use against the URL.
	    returned: If specified.
	    type: dict
	    sample: [ { "name": "my-pm", "path_rules": [ { "paths": [ "/data" ] } ], "service": "my-service" } ]
	state:
	    description: state of the Url_Map
	    returned: Always.
	    type: str
	    sample: present
	updated_url_map:
	    description: True if the url_map has been updated. Will not appear on
	                 initial url_map creation.
	    returned: if the url_map has been updated.
	    type: bool
	    sample: true
	url_map_name:
	    description: Name of the Url_Map
	    returned: Always
	    type: str
	    sample: my-url-map
	url_map:
	    description: GCP Url_Map dictionary
	    returned: Always. Refer to GCP documentation for detailed field descriptions.
	    type: dict
	    sample: { "name": "my-url-map", "hostRules": [...], "pathMatchers": [...] }
	

snippet gcpubsub
	EXAMPLES:
	# Create a topic and publish a message to it
	# (Message will be pushed; there is no check to see if the message was pushed before
	# Topics:
	## Create Topic
	gcpubsub:
	  topic: ansible-topic-example
	  state: present
	
	## Delete Topic
	### Subscriptions associated with topic are not deleted.
	gcpubsub:
	  topic: ansible-topic-example
	  state: absent
	
	## Messages: publish multiple messages, with attributes (key:value available with the message)
	### setting absent will keep the messages from being sent
	gcpubsub:
	  topic: "{{ topic_name }}"
	  state: present
	  publish:
	    - message: "this is message 1"
	      attributes:
	        mykey1: myvalue
	        mykey2: myvalu2
	        mykey3: myvalue3
	    - message: "this is message 2"
	      attributes:
	        server: prod
	        sla: "99.9999"
	        owner: fred
	
	# Subscriptions
	## Create Subscription (pull)
	gcpubsub:
	  topic: ansible-topic-example
	  subscription:
	  - name: mysub
	  state: present
	
	## Create Subscription with ack_deadline and push endpoint
	### pull is default, ack_deadline is not required
	gcpubsub:
	  topic: ansible-topic-example
	  subscription:
	  - name: mysub
	    ack_deadline: "60"
	    push_endpoint: http://pushendpoint.example.com
	  state: present
	
	## Subscription change from push to pull
	### setting push_endpoint to "None" converts subscription to pull.
	gcpubsub:
	  topic: ansible-topic-example
	  subscription:
	    name: mysub
	    push_endpoint: "None"
	
	## Delete subscription
	### Topic will not be deleted
	gcpubsub:
	  topic: ansible-topic-example
	  subscription:
	  - name: mysub
	  state: absent
	
	## Pull messages from subscription
	### only pull keyword is required.
	gcpubsub:
	  topic: ansible-topic-example
	  subscription:
	    name: ansible-topic-example-sub
	    pull:
	      message_ack: yes
	      max_messages: "100"
	
	RETURN VALUES:
	
	
	publish:
	    description: List of dictionaries describing messages and attributes to be published.  Dictionary is in message(str):attributes(dict) format.
	                 Only message is required.
	    returned: Only when specified
	    type: list
	    sample: "publish: ['message': 'my message', attributes: {'key1': 'value1'}]"
	
	pulled_messages:
	    description: list of dictionaries containing message info.  Fields are ack_id, attributes, data, message_id.
	    returned: Only when subscription.pull is specified
	    type: list
	    sample: [{ "ack_id": "XkASTCcYREl...","attributes": {"key1": "val1",...}, "data": "this is message 1", "message_id": "49107464153705"},..]
	
	state:
	    description: The state of the topic or subscription. Value will be either 'absent' or 'present'.
	    returned: Always
	    type: str
	    sample: "present"
	
	subscription:
	    description: Name of subscription.
	    returned: When subscription fields are specified
	    type: str
	    sample: "mysubscription"
	
	topic:
	    description: Name of topic.
	    returned: Always
	    type: str
	    sample: "mytopic"
	

snippet gcpubsub_facts
	EXAMPLES:
	## List all Topics in a project
	gcpubsub_facts:
	  view: topics
	  state: list
	
	## List all Subscriptions in a project
	gcpubsub_facts:
	  view: subscriptions
	  state: list
	
	## List all Subscriptions for a Topic in a project
	gcpubsub_facts:
	  view: subscriptions
	  topic: my-topic
	  state: list
	
	RETURN VALUES:
	
	
	subscriptions:
	    description: List of subscriptions.
	    returned: When view is set to subscriptions.
	    type: list
	    sample: ["mysubscription", "mysubscription2"]
	topic:
	    description: Name of topic. Used to filter subscriptions.
	    returned: Always
	    type: str
	    sample: "mytopic"
	topics:
	    description: List of topics.
	    returned: When view is set to topics.
	    type: list
	    sample: ["mytopic", "mytopic2"]
	

snippet gcspanner
	EXAMPLES:
	# Create instance.
	gcspanner:
	  instance_id: "{{ instance_id }}"
	  configuration: "{{ configuration }}"
	  state: present
	  node_count: 1
	
	# Create database.
	gcspanner:
	  instance_id: "{{ instance_id }}"
	  configuration: "{{ configuration }}"
	  database_name: "{{ database_name }}"
	  state: present
	
	# Delete instance (and all databases)
	gcspanner:
	  instance_id: "{{ instance_id }}"
	  configuration: "{{ configuration }}"
	  state: absent
	  force_instance_delete: yes
	
	RETURN VALUES:
	
	
	state:
	    description: The state of the instance or database. Value will be either 'absent' or 'present'.
	    returned: Always
	    type: str
	    sample: "present"
	
	database_name:
	    description: Name of database.
	    returned: When database name is specified
	    type: str
	    sample: "mydatabase"
	
	instance_id:
	    description: Name of instance.
	    returned: Always
	    type: str
	    sample: "myinstance"
	
	previous_values:
	   description: List of dictionaries containing previous values prior to update.
	   returned: When an instance update has occurred and a field has been modified.
	   type: dict
	   sample: "'previous_values': { 'instance': { 'instance_display_name': 'my-instance', 'node_count': 1 } }"
	
	updated:
	   description: Boolean field to denote an update has occurred.
	   returned: When an update has occurred.
	   type: bool
	   sample: True
	

snippet gem
	EXAMPLES:
	# Installs version 1.0 of vagrant.
	- gem:
	    name: vagrant
	    version: 1.0
	    state: present
	
	# Installs latest available version of rake.
	- gem:
	    name: rake
	    state: latest
	
	# Installs rake version 1.0 from a local gem on disk.
	- gem:
	    name: rake
	    gem_source: /path/to/gems/rake-1.0.gem
	    state: present
	

snippet get_url
	EXAMPLES:
	- name: Download foo.conf
	  get_url:
	    url: http://example.com/path/file.conf
	    dest: /etc/foo.conf
	    mode: 0440
	
	- name: Download file and force basic auth
	  get_url:
	    url: http://example.com/path/file.conf
	    dest: /etc/foo.conf
	    force_basic_auth: yes
	
	- name: Download file with custom HTTP headers
	  get_url:
	    url: http://example.com/path/file.conf
	    dest: /etc/foo.conf
	    headers: 'key:value,key:value'
	
	- name: Download file with check (sha256)
	  get_url:
	    url: http://example.com/path/file.conf
	    dest: /etc/foo.conf
	    checksum: sha256:b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c
	
	- name: Download file with check (md5)
	  get_url:
	    url: http://example.com/path/file.conf
	    dest: /etc/foo.conf
	    checksum: md5:66dffb5228a211e61d6d7ef4a86f5758
	
	- name: Download file from a file path
	  get_url:
	    url: file:///tmp/afile.txt
	    dest: /tmp/afilecopy.txt
	
	RETURN VALUES:
	
	
	backup_file:
	    description: name of backup file created after download
	    returned: changed and if backup=yes
	    type: string
	    sample: /path/to/file.txt.2015-02-12@22:09~
	checksum_dest:
	    description: sha1 checksum of the file after copy
	    returned: success
	    type: string
	    sample: 6e642bb8dd5c2e027bf21dd923337cbb4214f827
	checksum_src:
	    description: sha1 checksum of the file
	    returned: success
	    type: string
	    sample: 6e642bb8dd5c2e027bf21dd923337cbb4214f827
	dest:
	    description: destination file/path
	    returned: success
	    type: string
	    sample: /path/to/file.txt
	gid:
	    description: group id of the file
	    returned: success
	    type: int
	    sample: 100
	group:
	    description: group of the file
	    returned: success
	    type: string
	    sample: "httpd"
	md5sum:
	    description: md5 checksum of the file after download
	    returned: when supported
	    type: string
	    sample: "2a5aeecc61dc98c4d780b14b330e3282"
	mode:
	    description: permissions of the target
	    returned: success
	    type: string
	    sample: "0644"
	msg:
	    description: the HTTP message from the request
	    returned: always
	    type: string
	    sample: OK (unknown bytes)
	owner:
	    description: owner of the file
	    returned: success
	    type: string
	    sample: httpd
	secontext:
	    description: the SELinux security context of the file
	    returned: success
	    type: string
	    sample: unconfined_u:object_r:user_tmp_t:s0
	size:
	    description: size of the target
	    returned: success
	    type: int
	    sample: 1220
	src:
	    description: source file used after download
	    returned: changed
	    type: string
	    sample: /tmp/tmpAdFLdV
	state:
	    description: state of the target
	    returned: success
	    type: string
	    sample: file
	status:
	    description: the HTTP status code from the request
	    returned: always
	    type: int
	    sample: 200
	uid:
	    description: owner id of the file, after execution
	    returned: success
	    type: int
	    sample: 100
	url:
	    description: the actual URL used for the request
	    returned: always
	    type: string
	    sample: https://www.ansible.com/
	

snippet getent
	EXAMPLES:
	# get root user info
	- getent:
	    database: passwd
	    key: root
	- debug:
	    var: getent_passwd
	
	# get all groups
	- getent:
	    database: group
	    split: ':'
	- debug:
	    var: getent_group
	
	# get all hosts, split by tab
	- getent:
	    database: hosts
	- debug:
	    var: getent_hosts
	
	# get http service info, no error if missing
	- getent:
	    database: services
	    key: http
	    fail_key: False
	- debug:
	    var: getent_services
	
	# get user password hash (requires sudo/root)
	- getent:
	    database: shadow
	    key: www-data
	    split: ':'
	- debug:
	    var: getent_shadow
	

snippet git
	EXAMPLES:
	# Example git checkout from Ansible Playbooks
	- git:
	    repo: 'https://foosball.example.org/path/to/repo.git'
	    dest: /srv/checkout
	    version: release-0.22
	
	# Example read-write git checkout from github
	- git:
	    repo: ssh://git@github.com/mylogin/hello.git
	    dest: /home/mylogin/hello
	
	# Example just ensuring the repo checkout exists
	- git:
	    repo: 'https://foosball.example.org/path/to/repo.git'
	    dest: /srv/checkout
	    update: no
	
	# Example just get information about the repository whether or not it has
	# already been cloned locally.
	- git:
	    repo: 'https://foosball.example.org/path/to/repo.git'
	    dest: /srv/checkout
	    clone: no
	    update: no
	
	# Example checkout a github repo and use refspec to fetch all pull requests
	- git:
	    repo: https://github.com/ansible/ansible-examples.git
	    dest: /src/ansible-examples
	    refspec: '+refs/pull/*:refs/heads/*'
	
	# Example Create git archive from repo
	- git:
	    repo: https://github.com/ansible/ansible-examples.git
	    dest: /src/ansible-examples
	    archive: /tmp/ansible-examples.zip
	
	RETURN VALUES:
	
	
	after:
	    description: last commit revision of the repository retrieved during the update
	    returned: success
	    type: string
	    sample: 4c020102a9cd6fe908c9a4a326a38f972f63a903
	before:
	    description: commit revision before the repository was updated, "null" for new repository
	    returned: success
	    type: string
	    sample: 67c04ebe40a003bda0efb34eacfb93b0cafdf628
	remote_url_changed:
	    description: Contains True or False whether or not the remote URL was changed.
	    returned: success
	    type: boolean
	    sample: True
	warnings:
	    description: List of warnings if requested features were not available due to a too old git version.
	    returned: error
	    type: string
	    sample: Your git version is too old to fully support the depth argument. Falling back to full checkouts.
	

snippet git_config
	EXAMPLES:
	# Set some settings in ~/.gitconfig
	- git_config:
	    name: alias.ci
	    scope: global
	    value: commit
	
	- git_config:
	    name: alias.st
	    scope: global
	    value: status
	
	# Or system-wide:
	- git_config:
	    name: alias.remotev
	    scope: system
	    value: remote -v
	
	- git_config:
	    name: core.editor
	    scope: global
	    value: vim
	
	# scope=system is the default
	- git_config:
	    name: alias.diffc
	    value: diff --cached
	
	- git_config:
	    name: color.ui
	    value: auto
	
	# Make etckeeper not complain when invoked by cron
	- git_config:
	    name: user.email
	    repo: /etc
	    scope: local
	    value: 'root@{{ ansible_fqdn }}'
	
	# Read individual values from git config
	- git_config:
	    name: alias.ci
	    scope: global
	
	# scope: system is also assumed when reading values, unless list_all=yes
	- git_config:
	    name: alias.diffc
	
	# Read all values from git config
	- git_config:
	    list_all: yes
	    scope: global
	
	# When list_all=yes and no scope is specified, you get configuration from all scopes
	- git_config:
	    list_all: yes
	
	# Specify a repository to include local settings
	- git_config:
	    list_all: yes
	    repo: /path/to/repo.git
	
	RETURN VALUES:
	
	
	---
	config_value:
	  description: When list_all=no and value is not set, a string containing the value of the setting in name
	  returned: success
	  type: string
	  sample: "vim"
	
	config_values:
	  description: When list_all=yes, a dict containing key/value pairs of multiple configuration settings
	  returned: success
	  type: dictionary
	  sample:
	    core.editor: "vim"
	    color.ui: "auto"
	    alias.diffc: "diff --cached"
	    alias.remotev: "remote -v"
	

snippet github_deploy_key
	EXAMPLES:
	# add a new read-only deploy key to a GitHub repository using basic authentication
	- github_deploy_key:
	    owner: "johndoe"
	    repo: "example"
	    name: "new-deploy-key"
	    key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAwXxn7kIMNWzcDfou..."
	    read_only: yes
	    username: "johndoe"
	    password: "supersecretpassword"
	
	# remove an existing deploy key from a GitHub repository
	- github_deploy_key:
	    owner: "johndoe"
	    repository: "example"
	    name: "new-deploy-key"
	    key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAwXxn7kIMNWzcDfou..."
	    force: yes
	    username: "johndoe"
	    password: "supersecretpassword"
	    state: absent
	
	# add a new deploy key to a GitHub repository, replace an existing key, use an OAuth2 token to authenticate
	- github_deploy_key:
	    owner: "johndoe"
	    repository: "example"
	    name: "new-deploy-key"
	    key: "{{ lookup('file', '~/.ssh/github.pub') }}"
	    force: yes
	    token: "ABAQDAwXxn7kIMNWzcDfo..."
	
	# re-add a deploy key to a GitHub repository but with a different name
	- github_deploy_key:
	    owner: "johndoe"
	    repository: "example"
	    name: "replace-deploy-key"
	    key: "{{ lookup('file', '~/.ssh/github.pub') }}"
	    username: "johndoe"
	    password: "supersecretpassword"
	
	# add a new deploy key to a GitHub repository using 2FA
	- github_deploy_key:
	    owner: "johndoe"
	    repo: "example"
	    name: "new-deploy-key-2"
	    key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAwXxn7kIMNWzcDfou..."
	    username: "johndoe"
	    password: "supersecretpassword"
	    otp: 123456
	
	RETURN VALUES:
	
	
	msg:
	    description: the status message describing what occurred
	    returned: always
	    type: string
	    sample: "Deploy key added successfully"
	
	http_status_code:
	    description: the HTTP status code returned by the GitHub API
	    returned: failed
	    type: int
	    sample: 400
	
	error:
	    description: the error message returned by the GitHub API
	    returned: failed
	    type: string
	    sample: "key is already in use"
	
	id:
	    description: the key identifier assigned by GitHub for the deploy key
	    returned: changed
	    type: int
	    sample: 24381901
	

snippet github_hooks
	EXAMPLES:
	# Example creating a new service hook. It ignores duplicates.
	- github_hooks:
	    action: create
	    hookurl: http://11.111.111.111:2222
	    user: '{{ gituser }}'
	    oauthkey: '{{ oauthkey }}'
	    repo: https://api.github.com/repos/pcgentry/Github-Auto-Deploy
	
	# Cleaning all hooks for this repo that had an error on the last update. Since this works for all hooks in a repo it is probably best that this would
	# be called from a handler.
	- github_hooks:
	    action: cleanall
	    user: '{{ gituser }}'
	    oauthkey: '{{ oauthkey }}'
	    repo: '{{ repo }}'
	  delegate_to: localhost
	

snippet github_issue
	EXAMPLES:
	- name: Check if GitHub issue is closed or not
	  github_issue:
	    organization: ansible
	    repo: ansible
	    issue: 23642
	    action: get_status
	  register: r
	
	- name: Take action depending upon issue status
	  debug:
	    msg: Do something when issue 23642 is open
	  when: r.issue_status == 'open'
	
	RETURN VALUES:
	
	
	get_status:
	    description: State of the GitHub issue
	    type: string
	    returned: success
	    sample: open, closed
	

snippet github_key
	EXAMPLES:
	- name: Read SSH public key to authorize
	  shell: cat /home/foo/.ssh/id_rsa.pub
	  register: ssh_pub_key
	
	- name: Authorize key with GitHub
	  local_action:
	    module: github_key
	    name: Access Key for Some Machine
	    token: '{{ github_access_token }}'
	    pubkey: '{{ ssh_pub_key.stdout }}'
	
	RETURN VALUES:
	
	
	deleted_keys:
	    description: An array of key objects that were deleted. Only present on state=absent
	    type: list
	    returned: When state=absent
	    sample: [{'id': 0, 'key': 'BASE64 encoded key', 'url': 'http://example.com/github key', 'created_at': 'YYYY-MM-DDTHH:MM:SZ', 'read_only': False}]
	matching_keys:
	    description: An array of keys matching the specified name. Only present on state=present
	    type: list
	    returned: When state=present
	    sample: [{'id': 0, 'key': 'BASE64 encoded key', 'url': 'http://example.com/github key', 'created_at': 'YYYY-MM-DDTHH:MM:SZ', 'read_only': False}]
	key:
	    description: Metadata about the key just created. Only present on state=present
	    type: dict
	    returned: success
	    sample: {'id': 0, 'key': 'BASE64 encoded key', 'url': 'http://example.com/github key', 'created_at': 'YYYY-MM-DDTHH:MM:SZ', 'read_only': False}
	

snippet github_release
	EXAMPLES:
	- name: Get latest release of testuseer/testrepo
	  github_release:
	    token: tokenabc1234567890
	    user: testuser
	    repo: testrepo
	    action: latest_release
	
	- name: Get latest release of test repo using username and password. Ansible 2.4.
	  github_release:
	    user: testuser
	    password: secret123
	    repo: testrepo
	    action: latest_release
	
	- name: Create a new release
	  github:
	    token: tokenabc1234567890
	    user: testuser
	    repo: testrepo
	    action: create_release
	    tag: test
	    target: master
	    name: My Release
	    body: Some description
	
	RETURN VALUES:
	
	
	latest_release:
	    description: Version of the latest release
	    type: string
	    returned: success
	    sample: 1.1.0
	

snippet gitlab_group
	EXAMPLES:
	- name: Delete Gitlab Group
	  gitlab_group:
	    server_url: http://gitlab.example.com
	    validate_certs: False
	    login_token: WnUzDsxjy8230-Dy_k
	    name: my_first_group
	    state: absent
	  delegate_to: localhost
	
	- name: Create Gitlab Group
	  gitlab_group:
	    server_url: https://gitlab.example.com
	    validate_certs: True
	    login_user: dj-wasabi
	    login_password: MySecretPassword
	    name: my_first_group
	    path: my_first_group
	    state: present
	  delegate_to: localhost
	
	RETURN VALUES:
	
	# 

snippet gitlab_project
	EXAMPLES:
	- name: Delete Gitlab Project
	  gitlab_project:
	    server_url: http://gitlab.example.com
	    validate_certs: False
	    login_token: WnUzDsxjy8230-Dy_k
	    name: my_first_project
	    state: absent
	  delegate_to: localhost
	
	- name: Create Gitlab Project in group Ansible
	  gitlab_project:
	    server_url: https://gitlab.example.com
	    validate_certs: True
	    login_user: dj-wasabi
	    login_password: MySecretPassword
	    name: my_first_project
	    group: ansible
	    issues_enabled: False
	    wiki_enabled: True
	    snippets_enabled: True
	    import_url: http://git.example.com/example/lab.git
	    state: present
	  delegate_to: localhost
	
	RETURN VALUES:
	
	# 

snippet gitlab_user
	EXAMPLES:
	- name: Delete Gitlab User
	  gitlab_user:
	    server_url: http://gitlab.example.com
	    validate_certs: False
	    login_token: WnUzDsxjy8230-Dy_k
	    username: myusername
	    state: absent
	  delegate_to: localhost
	
	- name: Create Gitlab User
	  gitlab_user:
	    server_url: https://gitlab.dj-wasabi.local
	    validate_certs: True
	    login_user: dj-wasabi
	    login_password: MySecretPassword
	    name: My Name
	    username: myusername
	    password: mysecretpassword
	    email: me@example.com
	    sshkey_name: MySSH
	    sshkey_file: ssh-rsa AAAAB3NzaC1yc...
	    state: present
	  delegate_to: localhost
	
	RETURN VALUES:
	
	# 

snippet gluster_volume
	EXAMPLES:
	- name: create gluster volume
	  gluster_volume:
	    state: present
	    name: test1
	    bricks: /bricks/brick1/g1
	    rebalance: yes
	    cluster:
	      - 192.0.2.10
	      - 192.0.2.11
	  run_once: true
	
	- name: tune
	  gluster_volume:
	    state: present
	    name: test1
	    options:
	      performance.cache-size: 256MB
	
	- name: start gluster volume
	  gluster_volume:
	    state: started
	    name: test1
	
	- name: limit usage
	  gluster_volume:
	    state: present
	    name: test1
	    directory: /foo
	    quota: 20.0MB
	
	- name: stop gluster volume
	  gluster_volume:
	    state: stopped
	    name: test1
	
	- name: remove gluster volume
	  gluster_volume:
	    state: absent
	    name: test1
	
	- name: create gluster volume with multiple bricks
	  gluster_volume:
	    state: present
	    name: test2
	    bricks: /bricks/brick1/g2,/bricks/brick2/g2
	    cluster:
	      - 192.0.2.10
	      - 192.0.2.11
	  run_once: true
	

snippet group
	EXAMPLES:
	# Example group command from Ansible Playbooks
	- group:
	    name: somegroup
	    state: present
	

snippet group_by
	EXAMPLES:
	# Create groups based on the machine architecture
	- group_by:
	    key: machine_{{ ansible_machine }}
	
	# Create groups like 'kvm-host'
	- group_by:
	    key: virt_{{ ansible_virtualization_type }}_{{ ansible_virtualization_role }}
	
	# Create nested groups
	- group_by:
	    key: el{{ ansible_distribution_major_version }}-{{ ansible_architecture }}
	    parents:
	      - el{{ ansible_distribution_major_version }}
	

snippet grove
	EXAMPLES:
	- grove: >
	    channel_token=6Ph62VBBJOccmtTPZbubiPzdrhipZXtg
	    service=my-app
	    message=deployed {{ target }}
	

snippet gunicorn
	EXAMPLES:
	- name: simple gunicorn run example
	  gunicorn:
	    app: 'wsgi'
	    chdir: '/workspace/example'
	
	- name: run gunicorn on a virtualenv
	  gunicorn:
	    app: 'wsgi'
	    chdir: '/workspace/example'
	    venv: '/workspace/example/venv'
	
	- name: run gunicorn with a config file
	  gunicorn:
	    app: 'wsgi'
	    chdir: '/workspace/example'
	    conf: '/workspace/example/gunicorn.cfg'
	
	- name: run gunicorn as ansible user with specified pid and config file
	  gunicorn:
	    app: 'wsgi'
	    chdir: '/workspace/example'
	    conf: '/workspace/example/gunicorn.cfg'
	    venv: '/workspace/example/venv'
	    pid: '/workspace/example/gunicorn.pid'
	    user: 'ansible'
	
	RETURN VALUES:
	
	
	gunicorn:
	    description: process id of gunicorn
	    returned: changed
	    type: string
	    sample: "1234"
	

snippet hall
	EXAMPLES:
	- name: Send Hall notifiation
	  hall:
	    room_token: <hall room integration token>
	    title: Nginx
	    msg: 'Created virtual host file on {{ inventory_hostname }}'
	  delegate_to: loclahost
	
	- name: Send Hall notification if EC2 servers were created.
	  hall:
	    room_token: <hall room integration token>
	    title: Server Creation
	    msg: 'Created instance {{ item.id }} of type {{ item.instance_type }}.\nInstance can be reached at {{ item.public_ip }} in the {{ item.region }} region.'
	  delegate_to: loclahost
	  when: ec2.instances|length > 0
	  with_items: '{{ ec2.instances }}'
	

snippet haproxy
	EXAMPLES:
	# disable server in 'www' backend pool
	- haproxy:
	    state: disabled
	    host: '{{ inventory_hostname }}'
	    backend: www
	
	# disable server without backend pool name (apply to all available backend pool)
	- haproxy:
	    state: disabled
	    host: '{{ inventory_hostname }}'
	
	# disable server, provide socket file
	- haproxy:
	    state: disabled
	    host: '{{ inventory_hostname }}'
	    socket: /var/run/haproxy.sock
	    backend: www
	
	# disable server, provide socket file, wait until status reports in maintenance
	- haproxy:
	    state: disabled
	    host: '{{ inventory_hostname }}'
	    socket: /var/run/haproxy.sock
	    backend: www
	    wait: yes
	
	# Place server in drain mode, providing a socket file.  Then check the server's
	# status every minute to see if it changes to maintenance mode, continuing if it
	# does in an hour and failing otherwise.
	- haproxy:
	    state: disabled
	    host: '{{ inventory_hostname }}'
	    socket: /var/run/haproxy.sock
	    backend: www
	    wait: yes
	    drain: yes
	    wait_interval: 1
	    wait_retries: 60
	
	# disable backend server in 'www' backend pool and drop open sessions to it
	- haproxy:
	    state: disabled
	    host: '{{ inventory_hostname }}'
	    backend: www
	    socket: /var/run/haproxy.sock
	    shutdown_sessions: true
	
	# disable server without backend pool name (apply to all available backend pool) but fail when the backend host is not found
	- haproxy:
	    state: disabled
	    host: '{{ inventory_hostname }}'
	    fail_on_not_found: yes
	
	# enable server in 'www' backend pool
	- haproxy:
	    state: enabled
	    host: '{{ inventory_hostname }}'
	    backend: www
	
	# enable server in 'www' backend pool wait until healthy
	- haproxy:
	    state: enabled
	    host: '{{ inventory_hostname }}'
	    backend: www
	    wait: yes
	
	# enable server in 'www' backend pool wait until healthy. Retry 10 times with intervals of 5 seconds to retrieve the health
	- haproxy:
	    state: enabled
	    host: '{{ inventory_hostname }}'
	    backend: www
	    wait: yes
	    wait_retries: 10
	    wait_interval: 5
	
	# enable server in 'www' backend pool with change server(s) weight
	- haproxy:
	    state: enabled
	    host: '{{ inventory_hostname }}'
	    socket: /var/run/haproxy.sock
	    weight: 10
	    backend: www
	
	# set the server in 'www' backend pool to drain mode
	- haproxy:
	    state: drain
	    host: '{{ inventory_hostname }}'
	    socket: /var/run/haproxy.sock
	    backend: www
	

snippet helm
	EXAMPLES:
	- name: Install helm chart
	  helm:
	    host: localhost
	    chart:
	      name: memcached
	      version: 0.4.0
	      source:
	        type: repo
	        location: https://kubernetes-charts.storage.googleapis.com
	    state: installed
	    name: my-memcached
	    namespace: default
	
	- name: Uninstall helm chart
	  helm:
	    host: localhost
	    state: absent
	    name: my-memcached
	
	RETURN VALUES:
	
	 # 

snippet hg
	EXAMPLES:
	# Ensure the current working copy is inside the stable branch and deletes untracked files if any.
	- hg:
	    repo: https://bitbucket.org/user/repo1
	    dest: /home/user/repo1
	    revision: stable
	    purge: yes
	
	# Example just get information about the repository whether or not it has
	# already been cloned locally.
	- hg:
	    repo: git://bitbucket.org/user/repo
	    dest: /srv/checkout
	    clone: no
	    update: no
	

snippet hipchat
	EXAMPLES:
	- hipchat:
	    room: notif
	    msg: Ansible task finished
	
	# Use Hipchat API version 2
	- hipchat:
	    api: https://api.hipchat.com/v2/
	    token: OAUTH2_TOKEN
	    room: notify
	    msg: Ansible task finished
	

snippet homebrew
	EXAMPLES:
	# Install formula foo with 'brew' in default path (C(/usr/local/bin))
	- homebrew:
	    name: foo
	    state: present
	
	# Install formula foo with 'brew' in alternate path C(/my/other/location/bin)
	- homebrew:
	    name: foo
	    path: /my/other/location/bin
	    state: present
	
	# Update homebrew first and install formula foo with 'brew' in default path
	- homebrew:
	    name: foo
	    state: present
	    update_homebrew: yes
	
	# Update homebrew first and upgrade formula foo to latest available with 'brew' in default path
	- homebrew:
	    name: foo
	    state: latest
	    update_homebrew: yes
	
	# Update homebrew and upgrade all packages
	- homebrew:
	    update_homebrew: yes
	    upgrade_all: yes
	
	# Miscellaneous other examples
	- homebrew:
	    name: foo
	    state: head
	
	- homebrew:
	    name: foo
	    state: linked
	
	- homebrew:
	    name: foo
	    state: absent
	
	- homebrew:
	    name: foo,bar
	    state: absent
	
	- homebrew:
	    name: foo
	    state: present
	    install_options: with-baz,enable-debug
	

snippet homebrew_cask
	EXAMPLES:
	- homebrew_cask:
	    name: alfred
	    state: present
	
	- homebrew_cask:
	    name: alfred
	    state: absent
	
	- homebrew_cask:
	    name: alfred
	    state: present
	    install_options: 'appdir=/Applications'
	
	- homebrew_cask:
	    name: alfred
	    state: present
	    install_options: 'debug,appdir=/Applications'
	
	- homebrew_cask:
	    name: alfred
	    state: absent
	    install_options: force
	

snippet homebrew_tap
	EXAMPLES:
	- homebrew_tap:
	    name: homebrew/dupes
	
	- homebrew_tap:
	    name: homebrew/dupes
	    state: absent
	
	- homebrew_tap:
	    name: homebrew/dupes,homebrew/science
	    state: present
	
	- homebrew_tap:
	    name: telemachus/brew
	    url: 'https://bitbucket.org/telemachus/brew'
	

snippet honeybadger_deployment
	EXAMPLES:
	- honeybadger_deployment:
	    token: AAAAAA
	    environment: staging
	    user: ansible
	    revision: b6826b8
	    repo: 'git@github.com:user/repo.git'
	
	RETURN VALUES:
	
	# 

snippet hostname
	EXAMPLES:
	- hostname:
	    name: web01
	

snippet hpilo_boot
	EXAMPLES:
	- name: Task to boot a system using an ISO from an HP iLO interface only if the system is an HP server
	  hpilo_boot:
	    host: YOUR_ILO_ADDRESS
	    login: YOUR_ILO_LOGIN
	    password: YOUR_ILO_PASSWORD
	    media: cdrom
	    image: http://some-web-server/iso/boot.iso
	  when: cmdb_hwmodel.startswith('HP ')
	  delegate_to: localhost
	
	- name: Power off a server
	  hpilo_boot:
	    host: YOUR_ILO_HOST
	    login: YOUR_ILO_LOGIN
	    password: YOUR_ILO_PASSWORD
	    state: poweroff
	  delegate_to: localhost
	
	RETURN VALUES:
	
	
	# Default return values
	

snippet hpilo_facts
	EXAMPLES:
	# Task to gather facts from a HP iLO interface only if the system is an HP server
	- hpilo_facts:
	    host: YOUR_ILO_ADDRESS
	    login: YOUR_ILO_LOGIN
	    password: YOUR_ILO_PASSWORD
	  when: cmdb_hwmodel.startswith('HP ')
	  delegate_to: localhost
	
	- fail:
	    msg: 'CMDB serial ({{ cmdb_serialno }}) does not match hardware serial ({{ hw_system_serial }}) !'
	  when: cmdb_serialno != hw_system_serial
	
	RETURN VALUES:
	
	
	# Typical output of HP iLO_facts for a physical system
	hw_bios_date:
	    description: BIOS date
	    returned: always
	    type: string
	    sample: 05/05/2011
	
	hw_bios_version:
	    description: BIOS version
	    returned: always
	    type: string
	    sample: P68
	
	hw_ethX:
	    description: Interface information (for each interface)
	    returned: always
	    type: dictionary
	    sample:
	      - macaddress: 00:11:22:33:44:55
	        macaddress_dash: 00-11-22-33-44-55
	
	hw_eth_ilo:
	    description: Interface information (for the iLO network interface)
	    returned: always
	    type: dictionary
	    sample:
	      - macaddress: 00:11:22:33:44:BA
	      - macaddress_dash: 00-11-22-33-44-BA
	
	hw_product_name:
	    description: Product name
	    returned: always
	    type: string
	    sample: ProLiant DL360 G7
	
	hw_product_uuid:
	    description: Product UUID
	    returned: always
	    type: string
	    sample: ef50bac8-2845-40ff-81d9-675315501dac
	
	hw_system_serial:
	    description: System serial number
	    returned: always
	    type: string
	    sample: ABC12345D6
	
	hw_uuid:
	    description: Hardware UUID
	    returned: always
	    type: string
	    sample: 123456ABC78901D2
	

snippet hponcfg
	EXAMPLES:
	- name: Example hponcfg configuration XML
	  copy:
	    content: |
	      <ribcl VERSION="2.0">
	        <login USER_LOGIN="user" PASSWORD="password">
	          <rib_info MODE="WRITE">
	            <mod_global_settings>
	              <session_timeout value="0"/>
	              <ssh_status value="Y"/>
	              <ssh_port value="22"/>
	              <serial_cli_status value="3"/>
	              <serial_cli_speed value="5"/>
	            </mod_global_settings>
	          </rib_info>
	        </login>
	      </ribcl>
	    dest: /tmp/enable-ssh.xml
	
	- name: Configure HP iLO using enable-ssh.xml
	  hponcfg:
	    src: /tmp/enable-ssh.xml
	
	- name: Configure HP iLO on VMware ESXi hypervisor
	  hponcfg:
	    src: /tmp/enable-ssh.xml
	    executable: /opt/hp/tools/hponcfg
	

snippet htpasswd
	EXAMPLES:
	# Add a user to a password file and ensure permissions are set
	- htpasswd:
	    path: /etc/nginx/passwdfile
	    name: janedoe
	    password: '9s36?;fyNp'
	    owner: root
	    group: www-data
	    mode: 0640
	
	# Remove a user from a password file
	- htpasswd:
	    path: /etc/apache2/passwdfile
	    name: foobar
	    state: absent
	
	# Add a user to a password file suitable for use by libpam-pwdfile
	- htpasswd:
	    path: /etc/mail/passwords
	    name: alex
	    password: oedu2eGh
	    crypt_scheme: md5_crypt
	

snippet iam
	EXAMPLES:
	# Basic user creation example
	tasks:
	- name: Create two new IAM users with API keys
	  iam:
	    iam_type: user
	    name: "{{ item }}"
	    state: present
	    password: "{{ temp_pass }}"
	    access_key_state: create
	  with_items:
	    - jcleese
	    - mpython
	
	# Advanced example, create two new groups and add the pre-existing user
	# jdavila to both groups.
	task:
	- name: Create Two Groups, Mario and Luigi
	  iam:
	    iam_type: group
	    name: "{{ item }}"
	    state: present
	  with_items:
	     - Mario
	     - Luigi
	  register: new_groups
	
	- name:
	  iam:
	    iam_type: user
	    name: jdavila
	    state: update
	    groups: "{{ item.created_group.group_name }}"
	  with_items: "{{ new_groups.results }}"
	
	# Example of role with custom trust policy for Lambda service
	- name: Create IAM role with custom trust relationship
	  iam:
	    iam_type: role
	    name: AAALambdaTestRole
	    state: present
	    trust_policy:
	      Version: '2012-10-17'
	      Statement:
	      - Action: sts:AssumeRole
	        Effect: Allow
	        Principal:
	          Service: lambda.amazonaws.com
	
	RETURN VALUES:
	
	
	role_result:
	    description: the IAM.role dict returned by Boto
	    type: string
	    returned: if iam_type=role and state=present
	    sample: {
	                "arn": "arn:aws:iam::A1B2C3D4E5F6:role/my-new-role",
	                "assume_role_policy_document": "...truncated...",
	                "create_date": "2017-09-02T14:32:23Z",
	                "path": "/",
	                "role_id": "AROAA1B2C3D4E5F6G7H8I",
	                "role_name": "my-new-role"
	            }
	roles:
	    description: a list containing the name of the currently defined roles
	    type: list
	    returned: if iam_type=role and state=present
	    sample: [
	        "my-new-role",
	        "my-existing-role-1",
	        "my-existing-role-2",
	        "my-existing-role-3",
	        "my-existing-role-...",
	    ]
	

snippet iam_cert
	EXAMPLES:
	# Basic server certificate upload from local file
	- iam_cert:
	    name: very_ssl
	    state: present
	    cert: "{{ lookup('file', 'path/to/cert') }}"
	    key: "{{ lookup('file', 'path/to/key') }}"
	    cert_chain: "{{ lookup('file', 'path/to/certchain') }}"
	
	# Basic server certificate upload
	- iam_cert:
	    name: very_ssl
	    state: present
	    cert: path/to/cert
	    key: path/to/key
	    cert_chain: path/to/certchain
	
	# Server certificate upload using key string
	- iam_cert:
	    name: very_ssl
	    state: present
	    path: "/a/cert/path/"
	    cert: body_of_somecert
	    key: vault_body_of_privcertkey
	    cert_chain: body_of_myverytrustedchain
	
	# Basic rename of existing certificate
	- iam_cert:
	    name: very_ssl
	    new_name: new_very_ssl
	    state: present
	

snippet iam_group
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# Create a group
	- iam_group:
	    name: testgroup1
	    state: present
	
	# Create a group and attach a managed policy using its ARN
	- iam_group:
	    name: testgroup1
	    managed_policy:
	      - arn:aws:iam::aws:policy/AmazonSNSFullAccess
	    state: present
	
	# Create a group with users as members and attach a managed policy using its ARN
	- iam_group:
	    name: testgroup1
	    managed_policy:
	      - arn:aws:iam::aws:policy/AmazonSNSFullAccess
	    users:
	      - test_user1
	      - test_user2
	    state: present
	
	# Remove all managed policies from an existing group with an empty list
	- iam_group:
	    name: testgroup1
	    state: present
	    purge_policy: true
	
	# Remove all group members from an existing group
	- iam_group:
	    name: testgroup1
	    managed_policy:
	      - arn:aws:iam::aws:policy/AmazonSNSFullAccess
	    purge_users: true
	    state: present
	
	
	# Delete the group
	- iam_group:
	    name: testgroup1
	    state: absent
	
	RETURN VALUES:
	
	
	group:
	    description: dictionary containing all the group information
	    returned: success
	    type: complex
	    contains:
	        arn:
	            description: the Amazon Resource Name (ARN) specifying the group
	            type: string
	            sample: "arn:aws:iam::1234567890:group/testgroup1"
	        create_date:
	            description: the date and time, in ISO 8601 date-time format, when the group was created
	            type: string
	            sample: "2017-02-08T04:36:28+00:00"
	        group_id:
	            description: the stable and unique string identifying the group
	            type: string
	            sample: AGPAIDBWE12NSFINE55TM
	        group_name:
	            description: the friendly name that identifies the group
	            type: string
	            sample: testgroup1
	        path:
	            description: the path to the group
	            type: string
	            sample: /
	users:
	    description: list containing all the group members
	    returned: success
	    type: complex
	    contains:
	        arn:
	            description: the Amazon Resource Name (ARN) specifying the user
	            type: string
	            sample: "arn:aws:iam::1234567890:user/test_user1"
	        create_date:
	            description: the date and time, in ISO 8601 date-time format, when the user was created
	            type: string
	            sample: "2017-02-08T04:36:28+00:00"
	        user_id:
	            description: the stable and unique string identifying the user
	            type: string
	            sample: AIDAIZTPY123YQRS22YU2
	        user_name:
	            description: the friendly name that identifies the user
	            type: string
	            sample: testgroup1
	        path:
	            description: the path to the user
	            type: string
	            sample: /
	

snippet iam_managed_policy
	EXAMPLES:
	# Create Policy ex nihilo
	- name: Create IAM Managed Policy
	  iam_managed_policy:
	    policy_name: "ManagedPolicy"
	    policy_description: "A Helpful managed policy"
	    policy: "{{ lookup('template', 'managed_policy.json.j2') }}"
	    state: present
	
	# Update a policy with a new default version
	- name: Create IAM Managed Policy
	  iam_managed_policy:
	    policy_name: "ManagedPolicy"
	    policy: "{{ lookup('file', 'managed_policy_update.json') }}"
	    state: present
	
	# Update a policy with a new non default version
	- name: Create IAM Managed Policy
	  iam_managed_policy:
	    policy_name: "ManagedPolicy"
	    policy: "{{ lookup('file', 'managed_policy_update.json') }}"
	    make_default: false
	    state: present
	
	# Update a policy and make it the only version and the default version
	- name: Create IAM Managed Policy
	  iam_managed_policy:
	    policy_name: "ManagedPolicy"
	    policy: "{ 'Version': '2012-10-17', 'Statement':[{'Effect': 'Allow','Action': '*','Resource': '*'}]}"
	    only_version: true
	    state: present
	
	# Remove a policy
	- name: Create IAM Managed Policy
	  iam_managed_policy:
	    policy_name: "ManagedPolicy"
	    state: absent
	
	RETURN VALUES:
	
	
	policy:
	  description: Returns the policy json structure, when state == absent this will return the value of the removed policy.
	  returned: success
	  type: string
	  sample: '{
	        "arn": "arn:aws:iam::aws:policy/AdministratorAccess "
	        "attachment_count": 0,
	        "create_date": "2017-03-01T15:42:55.981000+00:00",
	        "default_version_id": "v1",
	        "is_attachable": true,
	        "path": "/",
	        "policy_id": "ANPALM4KLDMTFXGOOJIHL",
	        "policy_name": "AdministratorAccess",
	        "update_date": "2017-03-01T15:42:55.981000+00:00"
	  }'
	

snippet iam_mfa_device_facts
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# List MFA devices (more details: http://docs.aws.amazon.com/IAM/latest/APIReference/API_ListMFADevices.html)
	iam_mfa_device_facts:
	register: mfa_devices
	
	# Assume an existing role (more details: http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html)
	sts_assume_role:
	  mfa_serial_number: "{{ mfa_devices.mfa_devices[0].serial_number }}"
	  role_arn: "arn:aws:iam::123456789012:role/someRole"
	  role_session_name: "someRoleSession"
	register: assumed_role
	
	RETURN VALUES:
	
	
	mfa_devices:
	    description: The MFA devices registered for the given user
	    returned: always
	    type: list
	    sample:
	      - enable_date: "2016-03-11T23:25:36+00:00"
	        serial_number: arn:aws:iam::085120003701:mfa/pwnall
	        user_name: pwnall
	      - enable_date: "2016-03-11T23:25:37+00:00"
	        serial_number: arn:aws:iam::085120003702:mfa/pwnall
	        user_name: pwnall
	

snippet iam_policy
	EXAMPLES:
	# Create a policy with the name of 'Admin' to the group 'administrators'
	tasks:
	- name: Assign a policy called Admin to the administrators group
	  iam_policy:
	    iam_type: group
	    iam_name: administrators
	    policy_name: Admin
	    state: present
	    policy_document: admin_policy.json
	
	# Advanced example, create two new groups and add a READ-ONLY policy to both
	# groups.
	task:
	- name: Create Two Groups, Mario and Luigi
	  iam:
	    iam_type: group
	    name: "{{ item }}"
	    state: present
	  with_items:
	     - Mario
	     - Luigi
	  register: new_groups
	
	- name: Apply READ-ONLY policy to new groups that have been recently created
	  iam_policy:
	    iam_type: group
	    iam_name: "{{ item.created_group.group_name }}"
	    policy_name: "READ-ONLY"
	    policy_document: readonlypolicy.json
	    state: present
	  with_items: "{{ new_groups.results }}"
	
	# Create a new S3 policy with prefix per user
	tasks:
	- name: Create S3 policy from template
	  iam_policy:
	    iam_type: user
	    iam_name: "{{ item.user }}"
	    policy_name: "s3_limited_access_{{ item.prefix }}"
	    state: present
	    policy_json: " {{ lookup( 'template', 's3_policy.json.j2') }} "
	    with_items:
	      - user: s3_user
	        prefix: s3_user_prefix
	

snippet iam_role
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# Create a role
	- iam_role:
	    name: mynewrole
	    assume_role_policy_document: "{{ lookup('file','policy.json') }}"
	    state: present
	
	# Create a role and attach a managed policy called "PowerUserAccess"
	- iam_role:
	    name: mynewrole
	    assume_role_policy_document: "{{ lookup('file','policy.json') }}"
	    state: present
	    managed_policy:
	      - arn:aws:iam::aws:policy/PowerUserAccess
	
	# Keep the role created above but remove all managed policies
	- iam_role:
	    name: mynewrole
	    assume_role_policy_document: "{{ lookup('file','policy.json') }}"
	    state: present
	    managed_policy:
	      -
	
	# Delete the role
	- iam_role:
	    name: mynewrole
	    assume_role_policy_document: "{{ lookup('file','policy.json') }}"
	    state: absent
	
	RETURN VALUES:
	
	
	path:
	    description: the path to the role
	    type: string
	    returned: always
	    sample: /
	role_name:
	    description: the friendly name that identifies the role
	    type: string
	    returned: always
	    sample: myrole
	role_id:
	    description: the stable and unique string identifying the role
	    type: string
	    returned: always
	    sample: ABCDEFF4EZ4ABCDEFV4ZC
	arn:
	    description: the Amazon Resource Name (ARN) specifying the role
	    type: string
	    returned: always
	    sample: "arn:aws:iam::1234567890:role/mynewrole"
	create_date:
	    description: the date and time, in ISO 8601 date-time format, when the role was created
	    type: string
	    returned: always
	    sample: "2016-08-14T04:36:28+00:00"
	assume_role_policy_document:
	    description: the policy that grants an entity permission to assume the role
	    type: string
	    returned: always
	    sample: {
	                'statement': [
	                    {
	                        'action': 'sts:AssumeRole',
	                        'effect': 'Allow',
	                        'principal': {
	                            'service': 'ec2.amazonaws.com'
	                        },
	                        'sid': ''
	                    }
	                ],
	                'version': '2012-10-17'
	            }
	attached_policies:
	    description: a list of dicts containing the name and ARN of the managed IAM policies attached to the role
	    type: list
	    returned: always
	    sample: [
	        {
	            'policy_arn': 'arn:aws:iam::aws:policy/PowerUserAccess',
	            'policy_name': 'PowerUserAccess'
	        }
	    ]
	

snippet iam_server_certificate_facts
	EXAMPLES:
	# Retrieve server certificate
	- iam_server_certificate_facts:
	    name: production-cert
	  register: server_cert
	
	# Fail if the server certificate name was not found
	- iam_server_certificate_facts:
	    name: production-cert
	  register: server_cert
	  failed_when: "{{ server_cert.results | length == 0 }}"
	
	RETURN VALUES:
	
	
	server_certificate_id:
	    description: The 21 character certificate id
	    returned: success
	    type: str
	    sample: "ADWAJXWTZAXIPIMQHMJPO"
	certificate_body:
	    description: The asn1der encoded PEM string
	    returned: success
	    type: str
	    sample: "-----BEGIN CERTIFICATE-----
	bunch of random data
	-----END CERTIFICATE-----"
	server_certificate_name:
	    description: The name of the server certificate
	    returned: success
	    type: str
	    sample: "server-cert-name"
	arn:
	    description: The Amazon resource name of the server certificate
	    returned: success
	    type: str
	    sample: "arn:aws:iam::911277865346:server-certificate/server-cert-name"
	path:
	    description: The path of the server certificate
	    returned: success
	    type: str
	    sample: "/"
	expiration:
	    description: The date and time this server certificate will expire, in ISO 8601 format.
	    returned: success
	    type: str
	    sample: "2017-06-15T12:00:00+00:00"
	upload_date:
	    description: The date and time this server certificate was uploaded, in ISO 8601 format.
	    returned: success
	    type: str
	    sample: "2015-04-25T00:36:40+00:00"
	

snippet icinga2_feature
	EXAMPLES:
	- name: Enable ido-pgsql feature
	  icinga2_feature:
	    name: ido-pgsql
	    state: present
	
	RETURN VALUES:
	
	
	#
	

snippet imc_rest
	EXAMPLES:
	- name: Power down server
	  imc_rest:
	    hostname: '{{ imc_hostname }}'
	    username: '{{ imc_username }}'
	    password: '{{ imc_password }}'
	    validate_certs: no
	    content: |
	      <configConfMo><inConfig>
	        <computeRackUnit dn="sys/rack-unit-1" adminPower="down"/>
	      </inConfig></configConfMo>
	  delegate_to: localhost
	
	- name: Configure IMC using multiple XML fragments
	  imc_rest:
	    hostname: '{{ imc_hostname }}'
	    username: '{{ imc_username }}'
	    password: '{{ imc_password }}'
	    validate_certs: no
	    timeout: 120
	    content: |
	      <!-- Configure Serial-on-LAN -->
	      <configConfMo><inConfig>
	        <solIf dn="sys/rack-unit-1/sol-if" adminState="enable" speed=="115200" comport="com0"/>
	      </inConfig></configConfMo>
	
	      <!-- Configure Console Redirection -->
	      <configConfMo><inConfig>
	        <biosVfConsoleRedirection dn="sys/rack-unit-1/bios/bios-settings/Console-redirection"
	          vpBaudRate="115200"
	          vpConsoleRedirection="com-0"
	          vpFlowControl="none"
	          vpTerminalType="vt100"
	          vpPuttyKeyPad="LINUX"
	          vpRedirectionAfterPOST="Always Enable"/>
	      </inConfig></configConfMo>
	  delegate_to: localhost
	
	- name: Enable PXE boot and power-cycle server
	  imc_rest:
	    hostname: '{{ imc_hostname }}'
	    username: '{{ imc_username }}'
	    password: '{{ imc_password }}'
	    validate_certs: no
	    content: |
	      <!-- Configure PXE boot -->
	      <configConfMo><inConfig>
	        <lsbootLan dn="sys/rack-unit-1/boot-policy/lan-read-only" access="read-only" order="1" prot="pxe" type="lan"/>
	      </inConfig></configConfMo>
	
	      <!-- Power cycle server -->
	      <configConfMo><inConfig>
	        <computeRackUnit dn="sys/rack-unit-1" adminPower="cycle-immediate"/>
	      </inConfig></configConfMo>
	  delegate_to: localhost
	
	- name: Reconfigure IMC to boot from storage
	  imc_rest:
	    hostname: '{{ imc_host }}'
	    username: '{{ imc_username }}'
	    password: '{{ imc_password }}'
	    validate_certs: no
	    content: |
	      <configConfMo><inConfig>
	        <lsbootStorage dn="sys/rack-unit-1/boot-policy/storage-read-write" access="read-write" order="1" type="storage"/>
	      </inConfig></configConfMo>
	  delegate_to: localhost
	
	- name: Add customer description to server
	  imc_rest:
	    hostname: '{{ imc_host }}'
	    username: '{{ imc_username }}'
	    password: '{{ imc_password }}'
	    validate_certs: no
	    content: |
	        <configConfMo><inConfig>
	          <computeRackUnit dn="sys/rack-unit-1" usrLbl="Customer Lab - POD{{ pod_id }} - {{ inventory_hostname_short }}"/>
	        </inConfig></configConfMo>
	    delegate_to: localhost
	
	- name: Disable HTTP and increase session timeout to max value 10800 secs
	  imc_rest:
	    hostname: '{{ imc_host }}'
	    username: '{{ imc_username }}'
	    password: '{{ imc_password }}'
	    validate_certs: no
	    timeout: 120
	    content: |
	        <configConfMo><inConfig>
	          <commHttp dn="sys/svc-ext/http-svc" adminState="disabled"/>
	        </inConfig></configConfMo>
	
	        <configConfMo><inConfig>
	          <commHttps dn="sys/svc-ext/https-svc" adminState="enabled" sessionTimeout="10800"/>
	        </inConfig></configConfMo>
	    delegate_to: localhost
	
	RETURN VALUES:
	
	
	aaLogin:
	  description: Cisco IMC XML output for the login, translated to JSON using Cobra convention
	  returned: success
	  type: dict
	  sample: |
	    "attributes": {
	        "cookie": "",
	        "outCookie": "1498902428/9de6dc36-417c-157c-106c-139efe2dc02a",
	        "outPriv": "admin",
	        "outRefreshPeriod": "600",
	        "outSessionId": "114",
	        "outVersion": "2.0(13e)",
	        "response": "yes"
	    }
	configConfMo:
	  description: Cisco IMC XML output for any configConfMo XML fragments, translated to JSON using Cobra convention
	  returned: success
	  type: dict
	  sample: |
	elapsed:
	  description: Elapsed time in seconds
	  returned: always
	  type: int
	  sample: 31
	response:
	  description: HTTP response message, including content length
	  returned: always
	  type: string
	  sample: OK (729 bytes)
	status:
	  description: The HTTP response status code
	  returned: always
	  type: dict
	  sample: 200
	error:
	  description: Cisco IMC XML error output for last request, translated to JSON using Cobra convention
	  returned: failed
	  type: dict
	  sample: |
	    "attributes": {
	        "cookie": "",
	        "errorCode": "ERR-xml-parse-error",
	        "errorDescr": "XML PARSING ERROR: Element 'computeRackUnit', attribute 'admin_Power': The attribute 'admin_Power' is not allowed. ",
	        "invocationResult": "594",
	        "response": "yes"
	    }
	error_code:
	  description: Cisco IMC error code
	  returned: failed
	  type: string
	  sample: ERR-xml-parse-error
	error_text:
	  description: Cisco IMC error message
	  returned: failed
	  type: string
	  sample: |
	    XML PARSING ERROR: Element 'computeRackUnit', attribute 'admin_Power': The attribute 'admin_Power' is not allowed.
	input:
	  description: RAW XML input sent to the Cisco IMC, causing the error
	  returned: failed
	  type: string
	  sample: |
	    <configConfMo><inConfig><computeRackUnit dn="sys/rack-unit-1" admin_Power="down"/></inConfig></configConfMo>
	output:
	  description: RAW XML output eceived from the Cisco IMC, with error details
	  returned: failed
	  type: string
	  sample: >
	    <error cookie=""
	      response="yes"
	      errorCode="ERR-xml-parse-error"
	      invocationResult="594"
	      errorDescr="XML PARSING ERROR: Element 'computeRackUnit', attribute 'admin_Power': The attribute 'admin_Power' is not allowed.\n"/>
	

snippet imgadm
	EXAMPLES:
	- name: Import an image
	  imgadm:
	    uuid: '70e3ae72-96b6-11e6-9056-9737fd4d0764'
	    state: imported
	
	- name: Delete an image
	  imgadm:
	    uuid: '70e3ae72-96b6-11e6-9056-9737fd4d0764'
	    state: deleted
	
	- name: Update all images
	  imgadm:
	    uuid: '*'
	    state: updated
	
	- name: Update a single image
	  imgadm:
	    uuid: '70e3ae72-96b6-11e6-9056-9737fd4d0764'
	    state: updated
	
	- name: Add a source
	  imgadm:
	    source: 'https://datasets.project-fifo.net'
	    state: present
	
	- name: Add a Docker source
	  imgadm:
	    source: 'https://docker.io'
	    type: docker
	    state: present
	
	- name: Remove a source
	  imgadm:
	    source: 'https://docker.io'
	    state: absent
	
	RETURN VALUES:
	
	
	source:
	    description: Source that is managed.
	    returned: When not managing an image.
	    type: string
	    sample: https://datasets.project-fifo.net
	uuid:
	    description: UUID for an image operated on.
	    returned: When not managing an image source.
	    type: string
	    sample: 70e3ae72-96b6-11e6-9056-9737fd4d0764
	state:
	    description: State of the target, after execution.
	    returned: success
	    type: string
	    sample: 'present'
	

snippet import_playbook
	EXAMPLES:
	- name: include a play after another play
	  hosts: localhost
	  tasks:
	    - debug:
	        msg: "play1"
	
	- import_playbook: otherplays.yml
	
	
	- name: This DOES NOT WORK
	  hosts: all
	  tasks:
	    - debug:
	        msg: task1
	
	    - name: This failes because I'm inside a play already
	      import_playbook: stuff.yml
	
	RETURN VALUES:
	
	
	# this module does not return anything except plays to execute
	

snippet import_role
	EXAMPLES:
	- hosts: all
	  tasks:
	    - import_role:
	       name: myrole
	
	    - name: Run tasks/other.yml instead of 'main'
	      import_role:
	        name: myrole
	        tasks_from: other
	
	    - name: Pass variables to role
	      import_role:
	        name: myrole
	      vars:
	        rolevar1: 'value from task'
	
	    - name: Apply loop to each task in role
	      import_role:
	        name: myrole
	      with_items:
	        - '{{ roleinput1 }}'
	        - '{{ roleinput2 }}'
	      loop_control:
	        loop_var: roleinputvar
	
	    - name: Apply condition to each task in role
	      import_role:
	        name: myrole
	      when: not idontwanttorun
	
	RETURN VALUES:
	
	
	# this module does not return anything except tasks to execute
	

snippet import_tasks
	EXAMPLES:
	# include task list in play
	- hosts: all
	  tasks:
	    - debug:
	        msg: task1
	
	    - import_tasks: stuff.yml
	
	    - debug:
	        msg: task10
	
	# apply conditional to all imported tasks
	- hosts: all
	  tasks:
	    - debug:
	        msg: task1
	
	    - import_tasks: stuff.yml
	      when: hostvar is defined
	
	RETURN VALUES:
	
	
	# this module does not return anything except tasks to execute
	

snippet include
	EXAMPLES:
	# include a play after another play
	- hosts: localhost
	  tasks:
	    - debug:
	        msg: "play1"
	
	- include: otherplays.yml
	
	
	# include task list in play
	- hosts: all
	  tasks:
	    - debug:
	        msg: task1
	
	    - include: stuff.yml
	
	    - debug:
	        msg: task10
	
	# dyanmic include task list in play
	- hosts: all
	  tasks:
	    - debug:
	        msg: task1
	
	    - include: "{{ hostvar }}.yml"
	      static: no
	      when: hostvar is defined
	
	RETURN VALUES:
	
	
	# this module does not return anything except plays or tasks to execute
	

snippet include_role
	EXAMPLES:
	- include_role:
	    name: myrole
	
	- name: Run tasks/other.yml instead of 'main'
	  include_role:
	    name: myrole
	    tasks_from: other
	
	- name: Pass variables to role
	  include_role:
	    name: myrole
	  vars:
	    rolevar1: 'value from task'
	
	- name: Use role in loop
	  include_role:
	    name: myrole
	  with_items:
	    - '{{ roleinput1 }}'
	    - '{{ roleinput2 }}'
	  loop_control:
	    loop_var: roleinputvar
	
	- name: conditional role
	  include_role:
	    name: myrole
	  when: not idontwanttorun
	
	RETURN VALUES:
	
	
	# this module does not return anything except tasks to execute
	

snippet include_tasks
	EXAMPLES:
	# include task list in play
	- hosts: all
	  tasks:
	    - debug:
	        msg: task1
	
	    - include_tasks: stuff.yml
	
	    - debug:
	        msg: task10
	
	# dyanmic include task list in play
	- hosts: all
	  tasks:
	    - debug:
	        msg: task1
	
	    - include_tasks: "{{ hostvar }}.yml"
	      when: hostvar is defined
	
	RETURN VALUES:
	
	
	# this module does not return anything except tasks to execute
	

snippet include_vars
	EXAMPLES:
	- name: Include vars of stuff.yml into the 'stuff' variable (2.2).
	  include_vars:
	    file: stuff.yml
	    name: stuff
	
	- name: Conditionally decide to load in variables into 'plans' when x is 0, otherwise do not. (2.2)
	  include_vars:
	    file: contingency_plan.yml
	    name: plans
	  when: x == 0
	
	- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.
	  include_vars: "{{ item }}"
	  with_first_found:
	    - "{{ ansible_distribution }}.yml"
	    - "{{ ansible_os_family }}.yml"
	    - "default.yml"
	
	- name: bare include (free-form)
	  include_vars: myvars.yml
	
	- name: Include all .json and .jsn files in vars/all and all nested directories (2.3)
	  include_vars:
	    dir: 'vars/all'
	    extensions:
	        - json
	        - jsn
	
	- name: Include all default extension files in vars/all and all nested directories and save the output in test. (2.2)
	  include_vars:
	    dir: 'vars/all'
	    name: test
	
	- name: Include default extension files in vars/services (2.2)
	  include_vars:
	    dir: 'vars/services'
	    depth: 1
	
	- name: Include only files matching bastion.yml (2.2)
	  include_vars:
	    dir: 'vars'
	    files_matching: 'bastion.yml'
	
	- name: Include all .yml files except bastion.yml (2.3)
	  include_vars:
	    dir: 'vars'
	    ignore_files: 'bastion.yml'
	    extensions: ['yml']
	
	RETURN VALUES:
	
	
	ansible_facts:
	  description: Variables that were included and their values
	  returned: success
	  type: dict
	  sample: {'variable': 'value'}
	ansible_included_var_files:
	  description: A list of files that were successfully included
	  returned: success
	  type: list
	  sample: [ '/path/to/file.yml', '/path/to/file.json' ]
	  version_added: 2.4
	

snippet infini_export
	EXAMPLES:
	- name: Export bar filesystem under foo pool as /data
	  infini_export:
	    name: /data01
	    filesystem: foo
	    user: admin
	    password: secret
	    system: ibox001
	
	- name: Export and specify client list explicitly
	  infini_export:
	    name: /data02
	    filesystem: foo
	    client_list:
	      - client: 192.168.0.2
	        access: RW
	        no_root_squash: True
	      - client: 192.168.0.100
	        access: RO
	        no_root_squash: False
	      - client: 192.168.0.10-192.168.0.20
	        access: RO
	        no_root_squash: False
	    system: ibox001
	    user: admin
	    password: secret
	
	RETURN VALUES:
	
	
	

snippet infini_export_client
	EXAMPLES:
	- name: Make sure nfs client 10.0.0.1 is configured for export. Allow root access
	  infini_export_client:
	    client: 10.0.0.1
	    access_mode: RW
	    no_root_squash: yes
	    export: /data
	    user: admin
	    password: secret
	    system: ibox001
	
	- name: Add multiple clients with RO access. Squash root privileges
	  infini_export_client:
	    client: "{{ item }}"
	    access_mode: RO
	    no_root_squash: no
	    export: /data
	    user: admin
	    password: secret
	    system: ibox001
	  with_items:
	    - 10.0.0.2
	    - 10.0.0.3
	
	RETURN VALUES:
	
	
	

snippet infini_fs
	EXAMPLES:
	- name: Create new file system named foo under pool named bar
	  infini_fs:
	    name: foo
	    size: 1TB
	    pool: bar
	    state: present
	    user: admin
	    password: secret
	    system: ibox001
	
	RETURN VALUES:
	
	
	

snippet infini_host
	EXAMPLES:
	- name: Create new new host
	  infini_host:
	    name: foo.example.com
	    user: admin
	    password: secret
	    system: ibox001
	
	- name: Make sure host bar is available with wwn ports
	  infini_host:
	    name: bar.example.com
	    wwns:
	      - "00:00:00:00:00:00:00"
	      - "11:11:11:11:11:11:11"
	    system: ibox01
	    user: admin
	    password: secret
	
	- name: Map host foo.example.com to volume bar
	  infini_host:
	    name: foo.example.com
	    volume: bar
	    system: ibox01
	    user: admin
	    password: secret
	
	RETURN VALUES:
	
	
	

snippet infini_pool
	EXAMPLES:
	- name: Make sure pool foo exists. Set pool physical capacity to 10TB
	  infini_pool:
	    name: foo
	    size: 10TB
	    vsize: 10TB
	    user: admin
	    password: secret
	    system: ibox001
	
	- name: Disable SSD Cache on pool
	  infini_pool:
	    name: foo
	    ssd_cache: no
	    user: admin
	    password: secret
	    system: ibox001
	
	RETURN VALUES:
	
	
	

snippet infini_vol
	EXAMPLES:
	- name: Create new volume named foo under pool named bar
	  infini_vol:
	    name: foo
	    size: 1TB
	    pool: bar
	    state: present
	    user: admin
	    password: secret
	    system: ibox001
	
	RETURN VALUES:
	
	
	

snippet infinity
	EXAMPLES:
	---
	- hosts: localhost
	  connection: local
	  strategy: debug
	  tasks:
	    - name: Reserve network into Infinity IPAM
	      infinity:
	        server_ip: "80.75.107.12"
	        username: "username"
	        password: "password"
	        action: "reserve_network"
	        network_name: "reserve_new_ansible_network"
	        network_family: "4"
	        network_type: 'lan'
	        network_id: "1201"
	        network_size: "/28"
	      register: infinity
	
	RETURN VALUES:
	
	
	network_id:
	    description: id for a given network
	    returned: success
	    type: string
	    sample: '1501'
	ip_info:
	    description: when reserve next available ip address from a network, the ip address info ) is returned.
	    returned: success
	    type: string
	    sample: '{"address": "192.168.10.3", "hostname": "", "FQDN": "", "domainname": "", "id": 3229}'
	network_info:
	    description: when reserving a LAN network from a Infinity supernet by providing network_size, the information about the reserved network is returned.
	    returned: success
	    type: string
	    sample:  {"network_address": "192.168.10.32/28","network_family": "4", "network_id": 3102,
	    "network_size": null,"description": null,"network_location": "3085",
	    "ranges": { "id": 0, "name": null,"first_ip": null,"type": null,"last_ip": null},
	    "network_type": "lan","network_name": "'reserve_new_ansible_network'"}
	

snippet influxdb_database
	EXAMPLES:
	# Example influxdb_database command from Ansible Playbooks
	- name: Create database
	  influxdb_database:
	      hostname: "{{influxdb_ip_address}}"
	      database_name: "{{influxdb_database_name}}"
	      state: present
	
	- name: Destroy database
	  influxdb_database:
	      hostname: "{{influxdb_ip_address}}"
	      database_name: "{{influxdb_database_name}}"
	      state: absent
	
	- name: Create database using custom credentials
	  influxdb_database:
	      hostname: "{{influxdb_ip_address}}"
	      username: "{{influxdb_username}}"
	      password: "{{influxdb_password}}"
	      database_name: "{{influxdb_database_name}}"
	      state: present
	
	RETURN VALUES:
	
	
	#only defaults
	

snippet influxdb_retention_policy
	EXAMPLES:
	# Example influxdb_retention_policy command from Ansible Playbooks
	- name: create 1 hour retention policy
	  influxdb_retention_policy:
	      hostname: "{{influxdb_ip_address}}"
	      database_name: "{{influxdb_database_name}}"
	      policy_name: test
	      duration: 1h
	      replication: 1
	
	- name: create 1 day retention policy
	  influxdb_retention_policy:
	      hostname: "{{influxdb_ip_address}}"
	      database_name: "{{influxdb_database_name}}"
	      policy_name: test
	      duration: 1d
	      replication: 1
	
	- name: create 1 week retention policy
	  influxdb_retention_policy:
	      hostname: "{{influxdb_ip_address}}"
	      database_name: "{{influxdb_database_name}}"
	      policy_name: test
	      duration: 1w
	      replication: 1
	
	- name: create infinite retention policy
	  influxdb_retention_policy:
	      hostname: "{{influxdb_ip_address}}"
	      database_name: "{{influxdb_database_name}}"
	      policy_name: test
	      duration: INF
	      replication: 1
	
	RETURN VALUES:
	
	
	#only defaults
	

snippet ini_file
	EXAMPLES:
	# Before 2.3, option 'dest' was used instead of 'path'
	- name: Ensure "fav=lemonade is in section "[drinks]" in specified file
	  ini_file:
	    path: /etc/conf
	    section: drinks
	    option: fav
	    value: lemonade
	    mode: 0600
	    backup: yes
	
	- ini_file:
	    path: /etc/anotherconf
	    section: drinks
	    option: temperature
	    value: cold
	    backup: yes
	

snippet interfaces_file
	EXAMPLES:
	# Set eth1 mtu configuration value to 8000
	- interfaces_file:
	    dest: /etc/network/interfaces.d/eth1.cfg
	    iface: eth1
	    option: mtu
	    value: 8000
	    backup: yes
	    state: present
	  register: eth1_cfg
	
	RETURN VALUES:
	
	
	dest:
	    description: destination file/path
	    returned: success
	    type: string
	    sample: "/etc/network/interfaces"
	ifaces:
	    description: interfaces dictionary
	    returned: success
	    type: complex
	    contains:
	      ifaces:
	        description: interface dictionary
	        returned: success
	        type: dictionary
	        contains:
	          eth0:
	            description: Name of the interface
	            returned: success
	            type: dictionary
	            contains:
	              address_family:
	                description: interface address family
	                returned: success
	                type: string
	                sample: "inet"
	              method:
	                description: interface method
	                returned: success
	                type: string
	                sample: "manual"
	              mtu:
	                description: other options, all values returned as strings
	                returned: success
	                type: string
	                sample: "1500"
	              pre-up:
	                description: list of C(pre-up) scripts
	                returned: success
	                type: list
	                sample:
	                  - "route add -net 10.10.10.0/24 gw 10.10.10.1 dev eth1"
	                  - "route add -net 10.10.11.0/24 gw 10.10.11.1 dev eth2"
	              up:
	                description: list of C(up) scripts
	                returned: success
	                type: list
	                sample:
	                  - "route add -net 10.10.10.0/24 gw 10.10.10.1 dev eth1"
	                  - "route add -net 10.10.11.0/24 gw 10.10.11.1 dev eth2"
	              post-up:
	                description: list of C(post-up) scripts
	                returned: success
	                type: list
	                sample:
	                  - "route add -net 10.10.10.0/24 gw 10.10.10.1 dev eth1"
	                  - "route add -net 10.10.11.0/24 gw 10.10.11.1 dev eth2"
	              down:
	                description: list of C(down) scripts
	                returned: success
	                type: list
	                sample:
	                  - "route del -net 10.10.10.0/24 gw 10.10.10.1 dev eth1"
	                  - "route del -net 10.10.11.0/24 gw 10.10.11.1 dev eth2"
	...
	

snippet ipadm_addr
	EXAMPLES:
	name: Configure IP address 10.0.0.1 on e1000g0
	ipadm_addr: addr=10.0.0.1/32 addrobj=e1000g0/v4 state=present
	
	name: Delete addrobj
	ipadm_addr: addrobj=e1000g0/v4 state=absent
	
	name: Configure link-local IPv6 address
	ipadm_addr: addtype=addrconf addrobj=vnic0/v6
	
	name: Configure address via DHCP and wait 180 seconds for address obtaining
	ipadm_addr: addrobj=vnic0/dhcp addrtype=dhcp wait=180
	
	RETURN VALUES:
	
	
	addrobj:
	    description: address object name
	    returned: always
	    type: string
	    sample: bge0/v4
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: present
	temporary:
	    description: specifies if operation will persist across reboots
	    returned: always
	    type: boolean
	    sample: True
	addrtype:
	    description: address type
	    returned: always
	    type: string
	    sample: static
	address:
	    description: IP address
	    returned: only if addrtype is 'static'
	    type: string
	    sample: 1.3.3.7/32
	wait:
	    description: time we wait for DHCP
	    returned: only if addrtype is 'dhcp'
	    type: string
	    sample: 10
	

snippet ipadm_addrprop
	EXAMPLES:
	name: Mark address on addrobj as deprecated
	ipadm_addrprop: property=deprecated value=on addrobj=e1000g0/v6
	
	name: Set network prefix length for addrobj
	ipadm_addrprop: addrobj=bge0/v4 name=prefixlen value=26
	
	RETURN VALUES:
	
	
	property:
	    description: property name
	    returned: always
	    type: string
	    sample: deprecated
	addrobj:
	    description: address object name
	    returned: always
	    type: string
	    sample: bge0/v4
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: present
	temporary:
	    description: specifies if operation will persist across reboots
	    returned: always
	    type: boolean
	    sample: True
	value:
	    description: property value
	    returned: when value is provided
	    type: string
	    sample: 26
	

snippet ipadm_if
	EXAMPLES:
	# Create vnic0 interface
	- ipadm_if:
	    name: vnic0
	    state: enabled
	
	# Disable vnic0 interface
	- ipadm_if:
	    name: vnic0
	    state: disabled
	
	RETURN VALUES:
	
	
	name:
	    description: IP interface name
	    returned: always
	    type: string
	    sample: "vnic0"
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: "present"
	temporary:
	    description: persistence of a IP interface
	    returned: always
	    type: boolean
	    sample: "True"
	

snippet ipadm_ifprop
	EXAMPLES:
	name: Allow forwarding of IPv4 packets on network interface e1000g0
	ipadm_ifprop: protocol=ipv4 property=forwarding value=on interface=e1000g0
	
	name: Temporarily reset IPv4 forwarding property on network interface e1000g0
	ipadm_ifprop: protocol=ipv4 interface=e1000g0  temporary=true property=forwarding state=reset
	
	name: Configure IPv6 metric on network interface e1000g0
	ipadm_ifprop: protocol=ipv6 nic=e1000g0 name=metric value=100
	
	name: Set IPv6 MTU on network interface bge0
	ipadm_ifprop: interface=bge0 name=mtu value=1280 protocol=ipv6
	
	RETURN VALUES:
	
	
	protocol:
	    description: property's protocol
	    returned: always
	    type: str
	    sample: ipv4
	property:
	    description: property's name
	    returned: always
	    type: str
	    sample: mtu
	interface:
	    description: interface name we want to set property on
	    returned: always
	    type: str
	    sample: e1000g0
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: present
	value:
	    description: property's value
	    returned: when value is provided
	    type: str
	    sample: 1280
	

snippet ipadm_prop
	EXAMPLES:
	# Set TCP receive buffer size
	ipadm_prop: protocol=tcp property=recv_buf value=65536
	
	# Reset UDP send buffer size to the default value
	ipadm_prop: protocol=udp property=send_buf state=reset
	
	RETURN VALUES:
	
	
	protocol:
	    description: property's protocol
	    returned: always
	    type: string
	    sample: "TCP"
	property:
	    description: name of the property
	    returned: always
	    type: string
	    sample: "recv_maxbuf"
	state:
	    description: state of the target
	    returned: always
	    type: string
	    sample: "present"
	temporary:
	    description: property's persistence
	    returned: always
	    type: boolean
	    sample: "True"
	value:
	    description: value of the property. May be int or string depending on property.
	    returned: always
	    type: int
	    sample: "'1024' or 'never'"
	

snippet ipify_facts
	EXAMPLES:
	# Gather IP facts from ipify.org
	- name: get my public IP
	  ipify_facts:
	
	# Gather IP facts from your own ipify service endpoint with a custom timeout
	- name: get my public IP
	  ipify_facts:
	    api_url: http://api.example.com/ipify
	    timeout: 20
	
	RETURN VALUES:
	
	
	---
	ipify_public_ip:
	  description: Public IP of the internet gateway.
	  returned: success
	  type: string
	  sample: 1.2.3.4
	

snippet ipinfoio_facts
	EXAMPLES:
	# Retrieve geolocation data of a host's IP address
	- name: get IP geolocation data
	  ipinfoio_facts:
	
	RETURN VALUES:
	
	
	ansible_facts:
	  description: "Dictionary of ip geolocation facts for a host's IP address"
	  returned: changed
	  type: complex
	  contains:
	    ip:
	      description: "Public IP address of a host"
	      type: string
	      sample: "8.8.8.8"
	    hostname:
	      description: Domain name
	      type: string
	      sample: "google-public-dns-a.google.com"
	    country:
	      description: ISO 3166-1 alpha-2 country code
	      type: string
	      sample: "US"
	    region:
	      description: State or province name
	      type: string
	      sample: "California"
	    city:
	      description: City name
	      type: string
	      sample: "Mountain View"
	    loc:
	      description: Latitude and Longitude of the location
	      type: string
	      sample: "37.3860,-122.0838"
	    org:
	      description: "organization's name"
	      type: string
	      sample: "AS3356 Level 3 Communications, Inc."
	    postal:
	      description: Postal code
	      type: string
	      sample: "94035"
	

snippet ipmi_boot
	EXAMPLES:
	# Ensure bootdevice is HD.
	- ipmi_boot:
	    name: test.testdomain.com
	    user: admin
	    password: password
	    bootdev: hd
	
	# Ensure bootdevice is not Network
	- ipmi_boot:
	    name: test.testdomain.com
	    user: admin
	    password: password
	    bootdev: network
	    state: absent
	
	RETURN VALUES:
	
	
	bootdev:
	    description: The boot device name which will be used beyond next boot.
	    returned: success
	    type: string
	    sample: default
	persistent:
	    description: If True, system firmware will use this device beyond next boot.
	    returned: success
	    type: bool
	    sample: false
	uefimode:
	    description: If True, system firmware will use UEFI boot explicitly beyond next boot.
	    returned: success
	    type: bool
	    sample: false
	

snippet ipmi_power
	EXAMPLES:
	# Ensure machine is powered on.
	- ipmi_power:
	    name: test.testdomain.com
	    user: admin
	    password: password
	    state: on
	
	RETURN VALUES:
	
	
	powerstate:
	    description: The current power state of the machine.
	    returned: success
	    type: string
	    sample: on
	

snippet iptables
	EXAMPLES:
	# Block specific IP
	- iptables:
	    chain: INPUT
	    source: 8.8.8.8
	    jump: DROP
	  become: yes
	
	# Forward port 80 to 8600
	- iptables:
	    table: nat
	    chain: PREROUTING
	    in_interface: eth0
	    protocol: tcp
	    match: tcp
	    destination_port: 80
	    jump: REDIRECT
	    to_ports: 8600
	    comment: Redirect web traffic to port 8600
	  become: yes
	
	# Allow related and established connections
	- iptables:
	    chain: INPUT
	    ctstate: ESTABLISHED,RELATED
	    jump: ACCEPT
	  become: yes
	
	# Tag all outbound tcp packets with DSCP mark 8
	- iptables:
	    chain: OUTPUT
	    jump: DSCP
	    table: mangle
	    set_dscp_mark: 8
	    protocol: tcp
	
	# Tag all outbound tcp packets with DSCP DiffServ class CS1
	- iptables:
	    chain: OUTPUT
	    jump: DSCP
	    table: mangle
	    set_dscp_mark_class: CS1
	    protocol: tcp
	
	# Set the policy for the INPUT chain to DROP
	- iptables:
	    chain: INPUT
	    policy: DROP
	

snippet irc
	EXAMPLES:
	- irc:
	    server: irc.example.net
	    channel: #t1
	    msg: Hello world
	
	- local_action:
	    module: irc
	    port: 6669
	    server: irc.example.net
	    channel: #t1
	    msg: 'All finished at {{ ansible_date_time.iso8601 }}'
	    color: red
	    nick: ansibleIRC
	
	- local_action:
	    module: irc
	    port: 6669
	    server: irc.example.net
	    channel: #t1
	    nick_to:
	      - nick1
	      - nick2
	    msg: 'All finished at {{ ansible_date_time.iso8601 }}'
	    color: red
	    nick: ansibleIRC
	

snippet iso_extract
	EXAMPLES:
	- name: Extract kernel and ramdisk from a LiveCD
	  iso_extract:
	    image: /tmp/rear-test.iso
	    dest: /tmp/virt-rear/
	    files:
	    - isolinux/kernel
	    - isolinux/initrd.cgz
	
	RETURN VALUES:
	
	
	#
	

snippet jabber
	EXAMPLES:
	# send a message to a user
	- jabber:
	    user: mybot@example.net
	    password: secret
	    to: friend@example.net
	    msg: Ansible task finished
	
	# send a message to a room
	- jabber:
	    user: mybot@example.net
	    password: secret
	    to: mychaps@conference.example.net/ansiblebot
	    msg: Ansible task finished
	
	# send a message, specifying the host and port
	- jabber:
	    user: mybot@example.net
	    host: talk.example.net
	    port: 5223
	    password: secret
	    to: mychaps@example.net
	    msg: Ansible task finished
	

snippet java_cert
	EXAMPLES:
	- name: Import SSL certificate from google.com to a given cacerts keystore
	  java_cert:
	    cert_url: google.com
	    cert_port: 443
	    keystore_path: /usr/lib/jvm/jre7/lib/security/cacerts
	    keystore_pass: changeit
	    state: present
	
	- name: Remove certificate with given alias from a keystore
	  java_cert:
	    cert_url: google.com
	    keystore_path: /usr/lib/jvm/jre7/lib/security/cacerts
	    keystore_pass: changeit
	    executable: /usr/lib/jvm/jre7/bin/keytool
	    state: absent
	
	- name: Import SSL certificate from google.com to a keystore, create it if it doesn't exist
	  java_cert:
	    cert_url: google.com
	    keystore_path: /tmp/cacerts
	    keystore_pass: changeit
	    keystore_create: yes
	    state: present
	
	- name: Import a pkcs12 keystore with a specified alias, create it if it doesn't exist
	  java_cert:
	    pkcs12_path: "/tmp/importkeystore.p12"
	    cert_alias: default
	    keystore_path: /opt/wildfly/standalone/configuration/defaultkeystore.jks
	    keystore_pass: changeit
	    keystore_create: yes
	    state: present
	
	RETURN VALUES:
	
	
	msg:
	  description: Output from stdout of keytool command after execution of given command.
	  returned: success
	  type: string
	  sample: "Module require existing keystore at keystore_path '/tmp/test/cacerts'"
	
	rc:
	  description: Keytool command execution return value
	  returned: success
	  type: int
	  sample: "0"
	
	cmd:
	  description: Executed command to get action done
	  returned: success
	  type: string
	  sample: "keytool -importcert -noprompt -keystore"
	

snippet jboss
	EXAMPLES:
	# Deploy a hello world application
	- jboss:
	    src: /tmp/hello-1.0-SNAPSHOT.war
	    deployment: hello.war
	    state: present
	
	# Update the hello world application
	- jboss:
	    src: /tmp/hello-1.1-SNAPSHOT.war
	    deployment: hello.war
	    state: present
	
	# Undeploy the hello world application
	- jboss:
	    deployment: hello.war
	    state: absent
	

snippet jenkins_job
	EXAMPLES:
	# Create a jenkins job using basic authentication
	- jenkins_job:
	    config: "{{ lookup('file', 'templates/test.xml') }}"
	    name: test
	    password: admin
	    url: http://localhost:8080
	    user: admin
	
	# Create a jenkins job using the token
	- jenkins_job:
	    config: "{{ lookup('template', 'templates/test.xml.j2') }}"
	    name: test
	    token: asdfasfasfasdfasdfadfasfasdfasdfc
	    url: http://localhost:8080
	    user: admin
	
	# Delete a jenkins job using basic authentication
	- jenkins_job:
	    name: test
	    password: admin
	    state: absent
	    url: http://localhost:8080
	    user: admin
	
	# Delete a jenkins job using the token
	- jenkins_job:
	    name: test
	    token: asdfasfasfasdfasdfadfasfasdfasdfc
	    state: absent
	    url: http://localhost:8080
	    user: admin
	
	# Disable a jenkins job using basic authentication
	- jenkins_job:
	    name: test
	    password: admin
	    enabled: False
	    url: http://localhost:8080
	    user: admin
	
	# Disable a jenkins job using the token
	- jenkins_job:
	    name: test
	    token: asdfasfasfasdfasdfadfasfasdfasdfc
	    enabled: False
	    url: http://localhost:8080
	    user: admin
	
	RETURN VALUES:
	
	
	---
	name:
	  description: Name of the jenkins job.
	  returned: success
	  type: string
	  sample: test-job
	state:
	  description: State of the jenkins job.
	  returned: success
	  type: string
	  sample: present
	enabled:
	  description: Whether the jenkins job is enabled or not.
	  returned: success
	  type: bool
	  sample: true
	user:
	  description: User used for authentication.
	  returned: success
	  type: string
	  sample: admin
	url:
	  description: Url to connect to the Jenkins server.
	  returned: success
	  type: string
	  sample: https://jenkins.mydomain.com
	

snippet jenkins_plugin
	EXAMPLES:
	- name: Install plugin
	  jenkins_plugin:
	    name: build-pipeline-plugin
	
	- name: Install plugin without its dependencies
	  jenkins_plugin:
	    name: build-pipeline-plugin
	    with_dependencies: no
	
	- name: Make sure the plugin is always up-to-date
	  jenkins_plugin:
	    name: token-macro
	    state: latest
	
	- name: Install specific version of the plugin
	  jenkins_plugin:
	    name: token-macro
	    version: "1.15"
	
	- name: Pin the plugin
	  jenkins_plugin:
	    name: token-macro
	    state: pinned
	
	- name: Unpin the plugin
	  jenkins_plugin:
	    name: token-macro
	    state: unpinned
	
	- name: Enable the plugin
	  jenkins_plugin:
	    name: token-macro
	    state: enabled
	
	- name: Disable the plugin
	  jenkins_plugin:
	    name: token-macro
	    state: disabled
	
	- name: Uninstall plugin
	  jenkins_plugin:
	    name: build-pipeline-plugin
	    state: absent
	
	#
	# Example of how to authenticate
	#
	# my_jenkins_params:
	#   url_username: admin
	#
	- name: Install plugin
	  jenkins_plugin:
	    name: build-pipeline-plugin
	    params: "{{ my_jenkins_params }}"
	    url_password: p4ssw0rd
	    url: http://localhost:8888
	# Note that url_password **can not** be placed in params as params could end up in a log file
	
	#
	# Example of a Play which handles Jenkins restarts during the state changes
	#
	- name: Jenkins Master play
	  hosts: jenkins-master
	  vars:
	    my_jenkins_plugins:
	      token-macro:
	        enabled: yes
	      build-pipeline-plugin:
	        version: "1.4.9"
	        pinned: no
	        enabled: yes
	  tasks:
	    - name: Install plugins without a specific version
	      jenkins_plugin:
	        name: "{{ item.key }}"
	      register: my_jenkins_plugin_unversioned
	      when: >
	        'version' not in item.value
	      with_dict: "{{ my_jenkins_plugins }}"
	
	    - name: Install plugins with a specific version
	      jenkins_plugin:
	        name: "{{ item.key }}"
	        version: "{{ item.value['version'] }}"
	      register: my_jenkins_plugin_versioned
	      when: >
	        'version' in item.value
	      with_dict: "{{ my_jenkins_plugins }}"
	
	    - name: Initiate the fact
	      set_fact:
	        jenkins_restart_required: no
	
	    - name: Check if restart is required by any of the versioned plugins
	      set_fact:
	        jenkins_restart_required: yes
	      when: item.changed
	      with_items: "{{ my_jenkins_plugin_versioned.results }}"
	
	    - name: Check if restart is required by any of the unversioned plugins
	      set_fact:
	        jenkins_restart_required: yes
	      when: item.changed
	      with_items: "{{ my_jenkins_plugin_unversioned.results }}"
	
	    - name: Restart Jenkins if required
	      service:
	        name: jenkins
	        state: restarted
	      when: jenkins_restart_required
	
	    - name: Wait for Jenkins to start up
	      uri:
	        url: http://localhost:8080
	        status_code: 200
	        timeout: 5
	      register: jenkins_service_status
	      # Keep trying for 5 mins in 5 sec intervals
	      retries: 60
	      delay: 5
	      until: >
	         'status' in jenkins_service_status and
	         jenkins_service_status['status'] == 200
	      when: jenkins_restart_required
	
	    - name: Reset the fact
	      set_fact:
	        jenkins_restart_required: no
	      when: jenkins_restart_required
	
	    - name: Plugin pinning
	      jenkins_plugin:
	        name: "{{ item.key }}"
	        state: "{{ 'pinned' if item.value['pinned'] else 'unpinned'}}"
	      when: >
	        'pinned' in item.value
	      with_dict: "{{ my_jenkins_plugins }}"
	
	    - name: Plugin enabling
	      jenkins_plugin:
	        name: "{{ item.key }}"
	        state: "{{ 'enabled' if item.value['enabled'] else 'disabled'}}"
	      when: >
	        'enabled' in item.value
	      with_dict: "{{ my_jenkins_plugins }}"
	
	RETURN VALUES:
	
	
	plugin:
	    description: plugin name
	    returned: success
	    type: string
	    sample: build-pipeline-plugin
	state:
	    description: state of the target, after execution
	    returned: success
	    type: string
	    sample: "present"
	

snippet jenkins_script
	EXAMPLES:
	- name: Obtaining a list of plugins
	  jenkins_script:
	    script: 'println(Jenkins.instance.pluginManager.plugins)'
	    user: admin
	    password: admin
	
	- name: Setting master using a variable to hold a more complicate script
	  vars:
	    setmaster_mode: |
	        import jenkins.model.*
	        instance = Jenkins.getInstance()
	        instance.setMode(${jenkins_mode})
	        instance.save()
	
	- name: use the variable as the script
	  jenkins_script:
	    script: "{{ setmaster_mode }}"
	    args:
	      jenkins_mode: Node.Mode.EXCLUSIVE
	
	- name: interacting with an untrusted HTTPS connection
	  jenkins_script:
	    script: "println(Jenkins.instance.pluginManager.plugins)"
	    user: admin
	    password: admin
	    url: https://localhost
	    validate_certs: no
	
	RETURN VALUES:
	
	
	output:
	    description: Result of script
	    returned: success
	    type: string
	    sample: 'Result: true'
	

snippet jira
	EXAMPLES:
	# Create a new issue and add a comment to it:
	- name: Create an issue
	  jira:
	    uri: '{{ server }}'
	    username: '{{ user }}'
	    password: '{{ pass }}'
	    project: ANS
	    operation: create
	    summary: Example Issue
	    description: Created using Ansible
	    issuetype: Task
	  register: issue
	
	- name: Comment on issue
	  jira:
	    uri: '{{ server }}'
	    username: '{{ user }}'
	    password: '{{ pass }}'
	    issue: '{{ issue.meta.key }}'
	    operation: comment
	    comment: A comment added by Ansible
	
	# Assign an existing issue using edit
	- name: Assign an issue using free-form fields
	  jira:
	    uri: '{{ server }}'
	    username: '{{ user }}'
	    password: '{{ pass }}'
	    issue: '{{ issue.meta.key}}'
	    operation: edit
	    assignee: ssmith
	
	# Create an issue with an existing assignee
	- name: Create an assigned issue
	  jira:
	    uri: '{{ server }}'
	    username: '{{ user }}'
	    password: '{{ pass }}'
	    project: ANS
	    operation: create
	    summary: Assigned issue
	    description: Created and assigned using Ansible
	    issuetype: Task
	    assignee: ssmith
	
	# Edit an issue
	- name: Set the labels on an issue using free-form fields
	  jira:
	    uri: '{{ server }}'
	    username: '{{ user }}'
	    password: '{{ pass }}'
	    issue: '{{ issue.meta.key }}'
	    operation: edit
	  args:
	    fields:
	        labels:
	          - autocreated
	          - ansible
	
	# Retrieve metadata for an issue and use it to create an account
	- name: Get an issue
	  jira:
	    uri: '{{ server }}'
	    username: '{{ user }}'
	    password: '{{ pass }}'
	    project: ANS
	    operation: fetch
	    issue: ANS-63
	  register: issue
	
	- name: Create a unix account for the reporter
	  become: true
	  user:
	    name: '{{ issue.meta.fields.creator.name }}'
	    comment: '{{ issue.meta.fields.creator.displayName }}'
	
	# You can get list of valid linktypes at /rest/api/2/issueLinkType
	# url of your jira installation.
	- name: Create link from HSP-1 to MKY-1
	  jira:
	    uri: '{{ server }}'
	    username: '{{ user }}'
	    password: '{{ pass }}'
	    operation: link
	    linktype: Relates
	    inwardissue: HSP-1
	    outwardissue: MKY-1
	
	# Transition an issue by target status
	- name: Close the issue
	  jira:
	    uri: '{{ server }}'
	    username: '{{ user }}'
	    password: '{{ pass }}'
	    issue: '{{ issue.meta.key }}'
	    operation: transition
	    status: Done
	

snippet katello
	EXAMPLES:
	---
	# Simple Example:
	
	- name: "Create Product"
	  local_action:
	      module: katello
	      username: "admin"
	      password: "admin"
	      server_url: "https://fakeserver.com"
	      entity: "product"
	      params:
	        name: "Centos 7"
	
	# Abstraction Example:
	# katello.yml
	---
	- name: "{{ name }}"
	  local_action:
	      module: katello
	      username: "admin"
	      password: "admin"
	      server_url: "https://fakeserver.com"
	      entity: "{{ entity }}"
	      params: "{{ params }}"
	
	# tasks.yml
	---
	- include: katello.yml
	  vars:
	    name: "Create Dev Environment"
	    entity: "lifecycle_environment"
	    params:
	      name: "Dev"
	      prior: "Library"
	      organization: "Default Organization"
	
	- include: katello.yml
	  vars:
	    name: "Create Centos Product"
	    entity: "product"
	    params:
	      name: "Centos 7"
	      organization: "Default Organization"
	
	- include: katello.yml
	  vars:
	    name: "Create 7.2 Repository"
	    entity: "repository"
	    params:
	      name: "Centos 7.2"
	      product: "Centos 7"
	      organization: "Default Organization"
	      content_type: "yum"
	      url: "http://mirror.centos.org/centos/7/os/x86_64/"
	
	- include: katello.yml
	  vars:
	      name: "Create Centos 7 View"
	      entity: "content_view"
	      params:
	        name: "Centos 7 View"
	        organization: "Default Organization"
	        repositories:
	          - name: "Centos 7.2"
	            product: "Centos 7"
	
	- include: katello.yml
	  vars:
	      name: "Enable RHEL Product"
	      entity: "repository_set"
	      params:
	        name: "Red Hat Enterprise Linux 7 Server (RPMs)"
	        product: "Red Hat Enterprise Linux Server"
	        organization: "Default Organization"
	        basearch: "x86_64"
	        releasever: "7"
	
	RETURN VALUES:
	
	# 

snippet kernel_blacklist
	EXAMPLES:
	# Blacklist the nouveau driver module
	- kernel_blacklist:
	    name: nouveau
	    state: present
	

snippet kibana_plugin
	EXAMPLES:
	- name: Install Elasticsearch head plugin
	  kibana_plugin:
	    state: present
	    name: elasticsearch/marvel
	
	- name: Install specific version of a plugin
	  kibana_plugin:
	    state: present
	    name: elasticsearch/marvel
	    version: '2.3.3'
	
	- name: Uninstall Elasticsearch head plugin
	  kibana_plugin:
	    state: absent
	    name: elasticsearch/marvel
	
	RETURN VALUES:
	
	
	cmd:
	    description: the launched command during plugin mangement (install / remove)
	    returned: success
	    type: string
	name:
	    description: the plugin name to install or remove
	    returned: success
	    type: string
	url:
	    description: the url from where the plugin is installed from
	    returned: success
	    type: string
	timeout:
	    description: the timeout for plugin download
	    returned: success
	    type: string
	stdout:
	    description: the command stdout
	    returned: success
	    type: string
	stderr:
	    description: the command stderr
	    returned: success
	    type: string
	state:
	    description: the state for the managed plugin
	    returned: success
	    type: string
	

snippet kinesis_stream
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# Basic creation example:
	- name: Set up Kinesis Stream with 10 shards and wait for the stream to become ACTIVE
	  kinesis_stream:
	    name: test-stream
	    shards: 10
	    wait: yes
	    wait_timeout: 600
	  register: test_stream
	
	# Basic creation example with tags:
	- name: Set up Kinesis Stream with 10 shards, tag the environment, and wait for the stream to become ACTIVE
	  kinesis_stream:
	    name: test-stream
	    shards: 10
	    tags:
	      Env: development
	    wait: yes
	    wait_timeout: 600
	  register: test_stream
	
	# Basic creation example with tags and increase the retention period from the default 24 hours to 48 hours:
	- name: Set up Kinesis Stream with 10 shards, tag the environment, increase the retention period and wait for the stream to become ACTIVE
	  kinesis_stream:
	    name: test-stream
	    retention_period: 48
	    shards: 10
	    tags:
	      Env: development
	    wait: yes
	    wait_timeout: 600
	  register: test_stream
	
	# Basic delete example:
	- name: Delete Kinesis Stream test-stream and wait for it to finish deleting.
	  kinesis_stream:
	    name: test-stream
	    state: absent
	    wait: yes
	    wait_timeout: 600
	  register: test_stream
	
	RETURN VALUES:
	
	
	stream_name:
	  description: The name of the Kinesis Stream.
	  returned: when state == present.
	  type: string
	  sample: "test-stream"
	stream_arn:
	  description: The amazon resource identifier
	  returned: when state == present.
	  type: string
	  sample: "arn:aws:kinesis:east-side:123456789:stream/test-stream"
	stream_status:
	  description: The current state of the Kinesis Stream.
	  returned: when state == present.
	  type: string
	  sample: "ACTIVE"
	retention_period_hours:
	  description: Number of hours messages will be kept for a Kinesis Stream.
	  returned: when state == present.
	  type: int
	  sample: 24
	tags:
	  description: Dictionary containing all the tags associated with the Kinesis stream.
	  returned: when state == present.
	  type: dict
	  sample: {
	      "Name": "Splunk",
	      "Env": "development"
	  }
	

snippet known_hosts
	EXAMPLES:
	- name: tell the host about our servers it might want to ssh to
	  known_hosts:
	    path: /etc/ssh/ssh_known_hosts
	    name: foo.com.invalid
	    key: "{{ lookup('file', 'pubkeys/foo.com.invalid') }}"
	

snippet kubernetes
	EXAMPLES:
	# Create a new namespace with in-line YAML.
	- name: Create a kubernetes namespace
	  kubernetes:
	    api_endpoint: 123.45.67.89
	    url_username: admin
	    url_password: redacted
	    inline_data:
	      kind: Namespace
	      apiVersion: v1
	      metadata:
	        name: ansible-test
	        labels:
	          label_env: production
	          label_ver: latest
	        annotations:
	          a1: value1
	          a2: value2
	    state: present
	
	# Create a new namespace from a YAML file.
	- name: Create a kubernetes namespace
	  kubernetes:
	    api_endpoint: 123.45.67.89
	    url_username: admin
	    url_password: redacted
	    file_reference: /path/to/create_namespace.yaml
	    state: present
	
	# Do the same thing, but using the insecure localhost port
	- name: Create a kubernetes namespace
	  kubernetes:
	    api_endpoint: 123.45.67.89
	    insecure: true
	    file_reference: /path/to/create_namespace.yaml
	    state: present
	
	RETURN VALUES:
	
	
	# Example response from creating a Kubernetes Namespace.
	api_response:
	    description: Raw response from Kubernetes API, content varies with API.
	    returned: success
	    type: complex
	    contains:
	        apiVersion: "v1"
	        kind: "Namespace"
	        metadata:
	            creationTimestamp: "2016-01-04T21:16:32Z"
	            name: "test-namespace"
	            resourceVersion: "509635"
	            selfLink: "/api/v1/namespaces/test-namespace"
	            uid: "6dbd394e-b328-11e5-9a02-42010af0013a"
	        spec:
	            finalizers:
	                - kubernetes
	        status:
	            phase: "Active"
	

snippet lambda
	EXAMPLES:
	# Create Lambda functions
	tasks:
	- name: looped creation
	  lambda:
	    name: '{{ item.name }}'
	    state: present
	    zip_file: '{{ item.zip_file }}'
	    runtime: 'python2.7'
	    role: 'arn:aws:iam::987654321012:role/lambda_basic_execution'
	    handler: 'hello_python.my_handler'
	    vpc_subnet_ids:
	    - subnet-123abcde
	    - subnet-edcba321
	    vpc_security_group_ids:
	    - sg-123abcde
	    - sg-edcba321
	    environment_variables: '{{ item.env_vars }}'
	  with_items:
	    - name: HelloWorld
	      zip_file: hello-code.zip
	      env_vars:
	        key1: "first"
	        key2: "second"
	    - name: ByeBye
	      zip_file: bye-code.zip
	      env_vars:
	        key1: "1"
	        key2: "2"
	
	# Basic Lambda function deletion
	tasks:
	- name: Delete Lambda functions HelloWorld and ByeBye
	  lambda:
	    name: '{{ item }}'
	    state: absent
	  with_items:
	    - HelloWorld
	    - ByeBye
	
	RETURN VALUES:
	
	
	output:
	  description: the data returned by get_function in boto3
	  returned: success
	  type: dict
	  sample:
	    'code':
	      {
	        'location': 'an S3 URL',
	        'repository_type': 'S3',
	      }
	    'configuration':
	      {
	        'function_name': 'string',
	        'function_arn': 'string',
	        'runtime': 'nodejs',
	        'role': 'string',
	        'handler': 'string',
	        'code_size': 123,
	        'description': 'string',
	        'timeout': 123,
	        'memory_size': 123,
	        'last_modified': 'string',
	        'code_sha256': 'string',
	        'version': 'string',
	      }
	

snippet lambda_alias
	EXAMPLES:
	---
	# Simple example to create a lambda function and publish a version
	- hosts: localhost
	  gather_facts: no
	  vars:
	    state: present
	    project_folder: /path/to/deployment/package
	    deployment_package: lambda.zip
	    account: 123456789012
	    production_version: 5
	  tasks:
	  - name: AWS Lambda Function
	    lambda:
	      state: "{{ state | default('present') }}"
	      name: myLambdaFunction
	      publish: True
	      description: lambda function description
	      code_s3_bucket: package-bucket
	      code_s3_key: "lambda/{{ deployment_package }}"
	      local_path: "{{ project_folder }}/{{ deployment_package }}"
	      runtime: python2.7
	      timeout: 5
	      handler: lambda.handler
	      memory_size: 128
	      role: "arn:aws:iam::{{ account }}:role/API2LambdaExecRole"
	
	  - name: show results
	    debug:
	      var: lambda_facts
	
	# The following will set the Dev alias to the latest version ($LATEST) since version is omitted (or = 0)
	  - name: "alias 'Dev' for function {{ lambda_facts.FunctionName }} "
	    lambda_alias:
	      state: "{{ state | default('present') }}"
	      function_name: "{{ lambda_facts.FunctionName }}"
	      name: Dev
	      description: Development is $LATEST version
	
	# The QA alias will only be created when a new version is published (i.e. not = '$LATEST')
	  - name: "alias 'QA' for function {{ lambda_facts.FunctionName }} "
	    lambda_alias:
	      state: "{{ state | default('present') }}"
	      function_name: "{{ lambda_facts.FunctionName }}"
	      name: QA
	      version: "{{ lambda_facts.Version }}"
	      description: "QA is version {{ lambda_facts.Version }}"
	    when: lambda_facts.Version != "$LATEST"
	
	# The Prod alias will have a fixed version based on a variable
	  - name: "alias 'Prod' for function {{ lambda_facts.FunctionName }} "
	    lambda_alias:
	      state: "{{ state | default('present') }}"
	      function_name: "{{ lambda_facts.FunctionName }}"
	      name: Prod
	      version: "{{ production_version }}"
	      description: "Production is version {{ production_version }}"
	
	RETURN VALUES:
	
	
	---
	alias_arn:
	    description: Full ARN of the function, including the alias
	    returned: success
	    type: string
	    sample: arn:aws:lambda:us-west-2:123456789012:function:myFunction:dev
	description:
	    description: A short description of the alias
	    returned: success
	    type: string
	    sample: The development stage for my hot new app
	function_version:
	    description: The qualifier that the alias refers to
	    returned: success
	    type: string
	    sample: $LATEST
	name:
	    description: The name of the alias assigned
	    returned: success
	    type: string
	    sample: dev
	

snippet lambda_event
	EXAMPLES:
	---
	# Example that creates a lambda event notification for a DynamoDB stream
	- hosts: localhost
	  gather_facts: no
	  vars:
	    state: present
	  tasks:
	  - name: DynamoDB stream event mapping
	    lambda_event:
	      state: "{{ state | default('present') }}"
	      event_source: stream
	      function_name: "{{ function_name }}"
	      alias: Dev
	      source_params:
	        source_arn: arn:aws:dynamodb:us-east-1:123456789012:table/tableName/stream/2016-03-19T19:51:37.457
	        enabled: True
	        batch_size: 100
	        starting_position: TRIM_HORIZON
	
	  - name: Show source event
	    debug:
	      var: lambda_stream_events
	
	RETURN VALUES:
	
	
	---
	lambda_stream_events:
	    description: list of dictionaries returned by the API describing stream event mappings
	    returned: success
	    type: list
	

snippet lambda_facts
	EXAMPLES:
	---
	# Simple example of listing all info for a function
	- name: List all for a specific function
	  lambda_facts:
	    query: all
	    function_name: myFunction
	  register: my_function_details
	# List all versions of a function
	- name: List function versions
	  lambda_facts:
	    query: versions
	    function_name: myFunction
	  register: my_function_versions
	# List all lambda function versions
	- name: List all function
	  lambda_facts:
	    query: all
	    max_items: 20
	- name: show Lambda facts
	  debug:
	    var: lambda_facts
	
	RETURN VALUES:
	
	
	---
	lambda_facts:
	    description: lambda facts
	    returned: success
	    type: dict
	lambda_facts.function:
	    description: lambda function list
	    returned: success
	    type: dict
	lambda_facts.function.TheName:
	    description: lambda function information, including event, mapping, and version information
	    returned: success
	    type: dict
	

snippet lambda_policy
	EXAMPLES:
	---
	- hosts: localhost
	  gather_facts: no
	  vars:
	    state: present
	  tasks:
	  - name: Lambda S3 event notification
	    lambda_policy:
	      state: "{{ state | default('present') }}"
	      function_name: functionName
	      alias: Dev
	      statement_id: lambda-s3-myBucket-create-data-log
	      action: lambda:InvokeFunction
	      principal: s3.amazonaws.com
	      source_arn: arn:aws:s3:eu-central-1:123456789012:bucketName
	      source_account: 123456789012
	
	  - name: show results
	    debug: var=lambda_policy_action
	
	RETURN VALUES:
	
	
	---
	lambda_policy_action:
	    description: describes what action was taken
	    returned: success
	    type: string
	

snippet layman
	EXAMPLES:
	# Install the overlay 'mozilla' which is on the central overlays list.
	- layman:
	    name: mozilla
	
	# Install the overlay 'cvut' from the specified alternative list.
	- layman:
	    name: cvut
	    list_url: 'http://raw.github.com/cvut/gentoo-overlay/master/overlay.xml'
	
	# Update (sync) the overlay 'cvut', or install if not installed yet.
	- layman:
	    name: cvut
	    list_url: 'http://raw.github.com/cvut/gentoo-overlay/master/overlay.xml'
	    state: updated
	
	# Update (sync) all of the installed overlays.
	- layman:
	    name: ALL
	    state: updated
	
	# Uninstall the overlay 'cvut'.
	- layman:
	    name: cvut
	    state: absent
	

snippet ldap_attr
	EXAMPLES:
	- name: Configure directory number 1 for example.com
	  ldap_attr:
	    dn: olcDatabase={1}hdb,cn=config
	    name: olcSuffix
	    values: dc=example,dc=com
	    state: exact
	
	# The complex argument format is required here to pass a list of ACL strings.
	- name: Set up the ACL
	  ldap_attr:
	    dn: olcDatabase={1}hdb,cn=config
	    name: olcAccess
	    values:
	      - >-
	        {0}to attrs=userPassword,shadowLastChange
	        by self write
	        by anonymous auth
	        by dn="cn=admin,dc=example,dc=com" write
	        by * none'
	      - >-
	        {1}to dn.base="dc=example,dc=com"
	        by dn="cn=admin,dc=example,dc=com" write
	        by * read
	    state: exact
	
	- name: Declare some indexes
	  ldap_attr:
	    dn: olcDatabase={1}hdb,cn=config
	    name: olcDbIndex
	    values: "{{ item }}"
	  with_items:
	    - objectClass eq
	    - uid eq
	
	- name: Set up a root user, which we can use later to bootstrap the directory
	  ldap_attr:
	    dn: olcDatabase={1}hdb,cn=config
	    name: "{{ item.key }}"
	    values: "{{ item.value }}"
	    state: exact
	  with_dict:
	    olcRootDN: cn=root,dc=example,dc=com
	    olcRootPW: "{SSHA}tabyipcHzhwESzRaGA7oQ/SDoBZQOGND"
	
	- name: Get rid of an unneeded attribute
	  ldap_attr:
	    dn: uid=jdoe,ou=people,dc=example,dc=com
	    name: shadowExpire
	    values: ""
	    state: exact
	    server_uri: ldap://localhost/
	    bind_dn: cn=admin,dc=example,dc=com
	    bind_pw: password
	
	#
	# The same as in the previous example but with the authentication details
	# stored in the ldap_auth variable:
	#
	# ldap_auth:
	#   server_uri: ldap://localhost/
	#   bind_dn: cn=admin,dc=example,dc=com
	#   bind_pw: password
	- name: Get rid of an unneeded attribute
	  ldap_attr:
	    dn: uid=jdoe,ou=people,dc=example,dc=com
	    name: shadowExpire
	    values: ""
	    state: exact
	    params: "{{ ldap_auth }}"
	
	RETURN VALUES:
	
	
	modlist:
	  description: list of modified parameters
	  returned: success
	  type: list
	  sample: '[[2, "olcRootDN", ["cn=root,dc=example,dc=com"]]]'
	

snippet ldap_entry
	EXAMPLES:
	- name: Make sure we have a parent entry for users
	  ldap_entry:
	    dn: ou=users,dc=example,dc=com
	    objectClass: organizationalUnit
	
	- name: Make sure we have an admin user
	  ldap_entry:
	    dn: cn=admin,dc=example,dc=com
	    objectClass:
	      - simpleSecurityObject
	      - organizationalRole
	    attributes:
	      description: An LDAP administrator
	      userPassword: "{SSHA}tabyipcHzhwESzRaGA7oQ/SDoBZQOGND"
	
	- name: Get rid of an old entry
	  ldap_entry:
	    dn: ou=stuff,dc=example,dc=com
	    state: absent
	    server_uri: ldap://localhost/
	    bind_dn: cn=admin,dc=example,dc=com
	    bind_pw: password
	
	#
	# The same as in the previous example but with the authentication details
	# stored in the ldap_auth variable:
	#
	# ldap_auth:
	#   server_uri: ldap://localhost/
	#   bind_dn: cn=admin,dc=example,dc=com
	#   bind_pw: password
	- name: Get rid of an old entry
	  ldap_entry:
	    dn: ou=stuff,dc=example,dc=com
	    state: absent
	    params: "{{ ldap_auth }}"
	
	RETURN VALUES:
	
	
	# Default return values
	

snippet letsencrypt
	EXAMPLES:
	- letsencrypt:
	    account_key: /etc/pki/cert/private/account.key
	    csr: /etc/pki/cert/csr/sample.com.csr
	    dest: /etc/httpd/ssl/sample.com.crt
	  register: sample_com_challenge
	
	# perform the necessary steps to fulfill the challenge
	# for example:
	#
	# - copy:
	#     dest: /var/www/html/{{ sample_com_challenge['challenge_data']['sample.com']['http-01']['resource'] }}
	#     content: "{{ sample_com_challenge['challenge_data']['sample.com']['http-01']['resource_value'] }}"
	#     when: sample_com_challenge|changed
	
	- letsencrypt:
	    account_key: /etc/pki/cert/private/account.key
	    csr: /etc/pki/cert/csr/sample.com.csr
	    dest: /etc/httpd/ssl/sample.com.crt
	    data: "{{ sample_com_challenge }}"
	
	RETURN VALUES:
	
	
	cert_days:
	  description: the number of days the certificate remains valid.
	  returned: success
	  type: int
	challenge_data:
	  description: per domain / challenge type challenge data
	  returned: changed
	  type: complex
	  contains:
	    resource:
	      description: the challenge resource that must be created for validation
	      returned: changed
	      type: string
	      sample: .well-known/acme-challenge/evaGxfADs6pSRb2LAv9IZf17Dt3juxGJ-PCt92wr-oA
	    resource_value:
	      description: the value the resource has to produce for the validation
	      returned: changed
	      type: string
	      sample: IlirfxKKXA...17Dt3juxGJ-PCt92wr-oA
	authorizations:
	  description: ACME authorization data.
	  returned: changed
	  type: complex
	  contains:
	      authorization:
	        description: ACME authorization object. See https://tools.ietf.org/html/draft-ietf-acme-acme-02#section-6.1.2
	        returned: success
	        type: dict
	

snippet librato_annotation
	EXAMPLES:
	# Create a simple annotation event with a source
	- librato_annotation:
	    user: user@example.com
	    api_key: XXXXXXXXXXXXXXXXX
	    title: App Config Change
	    source: foo.bar
	    description: This is a detailed description of the config change
	
	# Create an annotation that includes a link
	- librato_annotation:
	    user: user@example.com
	    api_key: XXXXXXXXXXXXXXXXXX
	    name: code.deploy
	    title: app code deploy
	    description: this is a detailed description of a deployment
	    links:
	      - rel: example
	        href: http://www.example.com/deploy
	
	# Create an annotation with a start_time and end_time
	- librato_annotation:
	    user: user@example.com
	    api_key: XXXXXXXXXXXXXXXXXX
	    name: maintenance
	    title: Maintenance window
	    description: This is a detailed description of maintenance
	    start_time: 1395940006
	    end_time: 1395954406
	

snippet lightsail
	EXAMPLES:
	# Create a new Lightsail instance, register the instance details
	- lightsail:
	    state: present
	    name: myinstance
	    region: us-east-1
	    zone: us-east-1a
	    blueprint_id: ubuntu_16_04
	    bundle_id: nano_1_0
	    key_pair_name: id_rsa
	    user_data: " echo 'hello world' > /home/ubuntu/test.txt"
	    wait_timeout: 500
	  register: my_instance
	
	- debug:
	    msg: "Name is {{ my_instance.instance.name }}"
	
	- debug:
	    msg: "IP is {{ my_instance.instance.publicIpAddress }}"
	
	# Delete an instance if present
	- lightsail:
	    state: absent
	    region: us-east-1
	    name: myinstance
	
	RETURN VALUES:
	
	
	changed:
	  description: if a snapshot has been modified/created
	  returned: always
	  type: bool
	  sample:
	    changed: true
	instance:
	  description: instance data
	  returned: always
	  type: dict
	  sample:
	    arn: "arn:aws:lightsail:us-east-1:448830907657:Instance/1fef0175-d6c8-480e-84fa-214f969cda87"
	    blueprint_id: "ubuntu_16_04"
	    blueprint_name: "Ubuntu"
	    bundle_id: "nano_1_0"
	    created_at: "2017-03-27T08:38:59.714000-04:00"
	    hardware:
	      cpu_count: 1
	      ram_size_in_gb: 0.5
	    is_static_ip: false
	    location:
	      availability_zone: "us-east-1a"
	      region_name: "us-east-1"
	    name: "my_instance"
	    networking:
	      monthly_transfer:
	        gb_per_month_allocated: 1024
	      ports:
	        - access_direction: "inbound"
	          access_from: "Anywhere (0.0.0.0/0)"
	          access_type: "public"
	          common_name: ""
	          from_port: 80
	          protocol: tcp
	          to_port: 80
	        - access_direction: "inbound"
	          access_from: "Anywhere (0.0.0.0/0)"
	          access_type: "public"
	          common_name: ""
	          from_port: 22
	          protocol: tcp
	          to_port: 22
	    private_ip_address: "172.26.8.14"
	    public_ip_address: "34.207.152.202"
	    resource_type: "Instance"
	    ssh_key_name: "keypair"
	    state:
	      code: 16
	      name: running
	    support_code: "588307843083/i-0997c97831ee21e33"
	    username: "ubuntu"
	

snippet lineinfile
	EXAMPLES:
	# Before 2.3, option 'dest', 'destfile' or 'name' was used instead of 'path'
	- lineinfile:
	    path: /etc/selinux/config
	    regexp: '^SELINUX='
	    line: 'SELINUX=enforcing'
	
	- lineinfile:
	    path: /etc/sudoers
	    state: absent
	    regexp: '^%wheel'
	
	- lineinfile:
	    path: /etc/hosts
	    regexp: '^127\.0\.0\.1'
	    line: '127.0.0.1 localhost'
	    owner: root
	    group: root
	    mode: 0644
	
	- lineinfile:
	    path: /etc/httpd/conf/httpd.conf
	    regexp: '^Listen '
	    insertafter: '^#Listen '
	    line: 'Listen 8080'
	
	- lineinfile:
	    path: /etc/services
	    regexp: '^# port for http'
	    insertbefore: '^www.*80/tcp'
	    line: '# port for http by default'
	
	# Add a line to a file if it does not exist, without passing regexp
	- lineinfile:
	    path: /tmp/testfile
	    line: '192.168.1.99 foo.lab.net foo'
	
	# Fully quoted because of the ': ' on the line. See the Gotchas in the YAML docs.
	- lineinfile:
	    path: /etc/sudoers
	    state: present
	    regexp: '^%wheel\s'
	    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
	
	# Yaml requires escaping backslashes in double quotes but not in single quotes
	- lineinfile:
	    path: /opt/jboss-as/bin/standalone.conf
	    regexp: '^(.*)Xms(\\d+)m(.*)$'
	    line: '\1Xms${xms}m\3'
	    backrefs: yes
	
	# Validate the sudoers file before saving
	- lineinfile:
	    path: /etc/sudoers
	    state: present
	    regexp: '^%ADMIN ALL='
	    line: '%ADMIN ALL=(ALL) NOPASSWD: ALL'
	    validate: '/usr/sbin/visudo -cf %s'
	

snippet linode
	EXAMPLES:
	# Create a server with a private IP Address
	- local_action:
	     module: linode
	     api_key: 'longStringFromLinodeApi'
	     name: linode-test1
	     plan: 1
	     datacenter: 2
	     distribution: 99
	     password: 'superSecureRootPassword'
	     private_ip: yes
	     ssh_pub_key: 'ssh-rsa qwerty'
	     swap: 768
	     wait: yes
	     wait_timeout: 600
	     state: present
	
	# Fully configure new server
	- local_action:
	     module: linode
	     api_key: 'longStringFromLinodeApi'
	     name: linode-test1
	     plan: 4
	     datacenter: 2
	     distribution: 99
	     kernel_id: 138
	     password: 'superSecureRootPassword'
	     private_ip: yes
	     ssh_pub_key: 'ssh-rsa qwerty'
	     swap: 768
	     wait: yes
	     wait_timeout: 600
	     state: present
	     alert_bwquota_enabled: True
	     alert_bwquota_threshold: 80
	     alert_bwin_enabled: True
	     alert_bwin_threshold: 10
	     alert_cpu_enabled: True
	     alert_cpu_threshold: 210
	     alert_diskio_enabled: True
	     alert_bwout_enabled: True
	     alert_bwout_threshold: 10
	     alert_diskio_enabled: True
	     alert_diskio_threshold: 10000
	     backupweeklyday: 1
	     backupwindow: 2
	     displaygroup: 'test'
	     additional_disks:
	      - {Label: 'disk1', Size: 2500, Type: 'raw'}
	      - {Label: 'newdisk', Size: 2000}
	     watchdog: True
	
	# Ensure a running server (create if missing)
	- local_action:
	     module: linode
	     api_key: 'longStringFromLinodeApi'
	     name: linode-test1
	     linode_id: 12345678
	     plan: 1
	     datacenter: 2
	     distribution: 99
	     password: 'superSecureRootPassword'
	     ssh_pub_key: 'ssh-rsa qwerty'
	     swap: 768
	     wait: yes
	     wait_timeout: 600
	     state: present
	
	# Delete a server
	- local_action:
	     module: linode
	     api_key: 'longStringFromLinodeApi'
	     name: linode-test1
	     linode_id: 12345678
	     state: absent
	
	# Stop a server
	- local_action:
	     module: linode
	     api_key: 'longStringFromLinodeApi'
	     name: linode-test1
	     linode_id: 12345678
	     state: stopped
	
	# Reboot a server
	- local_action:
	     module: linode
	     api_key: 'longStringFromLinodeApi'
	     name: linode-test1
	     linode_id: 12345678
	     state: restarted
	

snippet lldp
	EXAMPLES:
	# Retrieve switch/port information
	 - name: Gather information from lldp
	   lldp:
	
	 - name: Print each switch/port
	   debug:
	    msg: "{{ lldp[item]['chassis']['name'] }} / {{ lldp[item]['port']['ifname'] }}"
	   with_items: "{{ lldp.keys() }}"
	
	# TASK: [Print each switch/port] ***********************************************************
	# ok: [10.13.0.22] => (item=eth2) => {"item": "eth2", "msg": "switch1.example.com / Gi0/24"}
	# ok: [10.13.0.22] => (item=eth1) => {"item": "eth1", "msg": "switch2.example.com / Gi0/3"}
	# ok: [10.13.0.22] => (item=eth0) => {"item": "eth0", "msg": "switch3.example.com / Gi0/3"}
	

snippet locale_gen
	EXAMPLES:
	# Ensure a locale exists.
	- locale_gen:
	    name: de_CH.UTF-8
	    state: present
	

snippet logentries
	EXAMPLES:
	# Track nginx logs
	- logentries:
	    path: /var/log/nginx/access.log
	    state: present
	    name: nginx-access-log
	
	# Stop tracking nginx logs
	- logentries:
	    path: /var/log/nginx/error.log
	    state: absent
	

snippet logicmonitor
	EXAMPLES:
	# example of adding a new LogicMonitor collector to these devices
	---
	- hosts: collectors
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: Deploy/verify LogicMonitor collectors
	    become: yes
	    logicmonitor:
	      target: collector
	      action: add
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	
	#example of adding a list of hosts into monitoring
	---
	- hosts: hosts
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: Deploy LogicMonitor Host
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: host
	      action: add
	      collector: mycompany-Collector
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      groups: /servers/production,/datacenter1
	      properties:
	        snmp.community: secret
	        dc: 1
	        type: prod
	    delegate_to: localhost
	
	#example of putting a datasource in SDT
	---
	- hosts: localhost
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: SDT a datasource
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: datasource
	      action: sdt
	      id: 123
	      duration: 3000
	      starttime: '2017-03-04 05:06'
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	
	#example of creating a hostgroup
	---
	- hosts: localhost
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: Create a host group
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: hostgroup
	      action: add
	      fullpath: /servers/development
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      properties:
	        snmp.community: commstring
	        type: dev
	
	#example of putting a list of hosts into SDT
	---
	- hosts: hosts
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: SDT hosts
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: host
	      action: sdt
	      duration: 3000
	      starttime: '2016-11-10 09:08'
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      collector: mycompany-Collector
	    delegate_to: localhost
	
	#example of putting a host group in SDT
	---
	- hosts: localhost
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: SDT a host group
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: hostgroup
	      action: sdt
	      fullpath: /servers/development
	      duration: 3000
	      starttime: '2017-03-04 05:06'
	      company=: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	
	#example of updating a list of hosts
	---
	- hosts: hosts
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: Update a list of hosts
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: host
	      action: update
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      collector: mycompany-Collector
	      groups: /servers/production,/datacenter5
	      properties:
	        snmp.community: commstring
	        dc: 5
	    delegate_to: localhost
	
	#example of updating a hostgroup
	---
	- hosts: hosts
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: Update a host group
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: hostgroup
	      action: update
	      fullpath: /servers/development
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      properties:
	        snmp.community: hg
	        type: dev
	        status: test
	    delegate_to: localhost
	
	#example of removing a list of hosts from monitoring
	---
	- hosts: hosts
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: Remove LogicMonitor hosts
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: host
	      action: remove
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      collector: mycompany-Collector
	    delegate_to: localhost
	
	#example of removing a host group
	---
	- hosts: hosts
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: Remove LogicMonitor development servers hostgroup
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: hostgroup
	      action: remove
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      fullpath: /servers/development
	    delegate_to: localhost
	  - name: Remove LogicMonitor servers hostgroup
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: hostgroup
	      action: remove
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      fullpath: /servers
	    delegate_to: localhost
	  - name: Remove LogicMonitor datacenter1 hostgroup
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: hostgroup
	      action: remove
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      fullpath: /datacenter1
	    delegate_to: localhost
	  - name: Remove LogicMonitor datacenter5 hostgroup
	    # All tasks except for target=collector should use delegate_to: localhost
	    logicmonitor:
	      target: hostgroup
	      action: remove
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      fullpath: /datacenter5
	    delegate_to: localhost
	
	### example of removing a new LogicMonitor collector to these devices
	---
	- hosts: collectors
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: Remove LogicMonitor collectors
	    become: yes
	    logicmonitor:
	      target: collector
	      action: remove
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	
	#complete example
	---
	- hosts: localhost
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: Create a host group
	    logicmonitor:
	      target: hostgroup
	      action: add
	      fullpath: /servers/production/database
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      properties:
	        snmp.community: commstring
	  - name: SDT a host group
	    logicmonitor:
	      target: hostgroup
	      action: sdt
	      fullpath: /servers/production/web
	      duration: 3000
	      starttime: '2012-03-04 05:06'
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	
	- hosts: collectors
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: Deploy/verify LogicMonitor collectors
	    logicmonitor:
	      target: collector
	      action: add
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	  - name: Place LogicMonitor collectors into 30 minute Scheduled downtime
	    logicmonitor:
	      target: collector
	      action: sdt
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	  - name: Deploy LogicMonitor Host
	    logicmonitor:
	      target: host
	      action: add
	      collector: agent1.ethandev.com
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      properties:
	        snmp.community: commstring
	        dc: 1
	      groups: /servers/production/collectors, /datacenter1
	    delegate_to: localhost
	
	- hosts: database-servers
	  remote_user: '{{ username }}'
	  vars:
	    company: mycompany
	    user: myusername
	    password: mypassword
	  tasks:
	  - name: deploy logicmonitor hosts
	    logicmonitor:
	      target: host
	      action: add
	      collector: monitoring.dev.com
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	      properties:
	        snmp.community: commstring
	        type: db
	        dc: 1
	      groups: /servers/production/database, /datacenter1
	    delegate_to: localhost
	  - name: schedule 5 hour downtime for 2012-11-10 09:08
	    logicmonitor:
	      target: host
	      action: sdt
	      duration: 3000
	      starttime: '2012-11-10 09:08'
	      company: '{{ company }}'
	      user: '{{ user }}'
	      password: '{{ password }}'
	    delegate_to: localhost
	
	RETURN VALUES:
	
	
	---
	success:
	    description: flag indicating that execution was successful
	    returned: success
	    type: boolean
	    sample: True
	...
	

snippet logicmonitor_facts
	EXAMPLES:
	# Always run those modules on localhost using delegate_to:localhost, or localaction
	
	- name: query a list of hosts
	  logicmonitor_facts:
	    target: host
	    company: yourcompany
	    user: Luigi
	    password: ImaLuigi,number1!
	  delegate_to: localhost
	
	- name: query a host group
	  logicmonitor_facts:
	    target: hostgroup
	    fullpath: /servers/production
	    company: yourcompany
	    user: mario
	    password: itsame.Mario!
	  delegate_to: localhost
	
	RETURN VALUES:
	
	
	---
	    ansible_facts:
	        description: LogicMonitor properties set for the specified object
	        returned: success
	        type: list
	        example: >
	            {
	                "name": "dc",
	                "value": "1"
	            },
	            {
	                "name": "type",
	                "value": "prod"
	            },
	            {
	                "name": "system.categories",
	                "value": ""
	            },
	            {
	                "name": "snmp.community",
	                "value": "********"
	            }
	...
	

snippet logstash_plugin
	EXAMPLES:
	- name: Install Logstash beats input plugin
	  logstash_plugin:
	    state: present
	    name: logstash-input-beats
	
	- name: Install specific version of a plugin
	  logstash_plugin:
	    state: present
	    name: logstash-input-syslog
	    version: '3.2.0'
	
	- name: Uninstall Logstash plugin
	  logstash_plugin:
	    state: absent
	    name: logstash-filter-multiline
	

snippet lvg
	EXAMPLES:
	# Create a volume group on top of /dev/sda1 with physical extent size = 32MB.
	- lvg:
	    vg: vg.services
	    pvs: /dev/sda1
	    pesize: 32
	
	# Create or resize a volume group on top of /dev/sdb1 and /dev/sdc5.
	# If, for example, we already have VG vg.services on top of /dev/sdb1,
	# this VG will be extended by /dev/sdc5.  Or if vg.services was created on
	# top of /dev/sda5, we first extend it with /dev/sdb1 and /dev/sdc5,
	# and then reduce by /dev/sda5.
	- lvg:
	    vg: vg.services
	    pvs: /dev/sdb1,/dev/sdc5
	
	# Remove a volume group with name vg.services.
	- lvg:
	    vg: vg.services
	    state: absent
	

snippet lvol
	EXAMPLES:
	# Create a logical volume of 512m.
	- lvol:
	    vg: firefly
	    lv: test
	    size: 512
	
	# Create a logical volume of 512m with disks /dev/sda and /dev/sdb
	- lvol:
	    vg: firefly
	    lv: test
	    size: 512
	    pvs: /dev/sda,/dev/sdb
	
	# Create cache pool logical volume
	- lvol:
	    vg: firefly
	    lv: lvcache
	    size: 512m
	    opts: --type cache-pool
	
	# Create a logical volume of 512g.
	- lvol:
	    vg: firefly
	    lv: test
	    size: 512g
	
	# Create a logical volume the size of all remaining space in the volume group
	- lvol:
	    vg: firefly
	    lv: test
	    size: 100%FREE
	
	# Create a logical volume with special options
	- lvol:
	    vg: firefly
	    lv: test
	    size: 512g
	    opts: -r 16
	
	# Extend the logical volume to 1024m.
	- lvol:
	    vg: firefly
	    lv: test
	    size: 1024
	
	# Extend the logical volume to consume all remaining space in the volume group
	- lvol:
	    vg: firefly
	    lv: test
	    size: +100%FREE
	
	# Extend the logical volume to take all remaining space of the PVs
	- lvol:
	    vg: firefly
	    lv: test
	    size: 100%PVS
	
	# Resize the logical volume to % of VG
	- lvol:
	    vg: firefly
	    lv: test
	    size: 80%VG
	    force: yes
	
	# Reduce the logical volume to 512m
	- lvol:
	    vg: firefly
	    lv: test
	    size: 512
	    force: yes
	
	# Set the logical volume to 512m and do not try to shrink if size is lower than current one
	- lvol:
	    vg: firefly
	    lv: test
	    size: 512
	    shrink: no
	
	# Remove the logical volume.
	- lvol:
	    vg: firefly
	    lv: test
	    state: absent
	    force: yes
	
	# Create a snapshot volume of the test logical volume.
	- lvol:
	    vg: firefly
	    lv: test
	    snapshot: snap1
	    size: 100m
	
	# Deactivate a logical volume
	- lvol:
	    vg: firefly
	    lv: test
	    active: false
	
	# Create a deactivated logical volume
	- lvol:
	    vg: firefly
	    lv: test
	    size: 512g
	    active: false
	

snippet lxc_container
	EXAMPLES:
	- name: Create a started container
	  lxc_container:
	    name: test-container-started
	    container_log: true
	    template: ubuntu
	    state: started
	    template_options: --release trusty
	
	- name: Create a stopped container
	  lxc_container:
	    name: test-container-stopped
	    container_log: true
	    template: ubuntu
	    state: stopped
	    template_options: --release trusty
	
	- name: Create a frozen container
	  lxc_container:
	    name: test-container-frozen
	    container_log: true
	    template: ubuntu
	    state: frozen
	    template_options: --release trusty
	    container_command: |
	      echo 'hello world.' | tee /opt/started-frozen
	
	# Create filesystem container, configure it, and archive it, and start it.
	- name: Create filesystem container
	  lxc_container:
	    name: test-container-config
	    backing_store: dir
	    container_log: true
	    template: ubuntu
	    state: started
	    archive: true
	    archive_compression: none
	    container_config:
	      - "lxc.aa_profile=unconfined"
	      - "lxc.cgroup.devices.allow=a *:* rmw"
	    template_options: --release trusty
	
	# Create an lvm container, run a complex command in it, add additional
	# configuration to it, create an archive of it, and finally leave the container
	# in a frozen state. The container archive will be compressed using bzip2
	- name: Create a frozen lvm container
	  lxc_container:
	    name: test-container-lvm
	    container_log: true
	    template: ubuntu
	    state: frozen
	    backing_store: lvm
	    template_options: --release trusty
	    container_command: |
	      apt-get update
	      apt-get install -y vim lxc-dev
	      echo 'hello world.' | tee /opt/started
	      if [[ -f "/opt/started" ]]; then
	          echo 'hello world.' | tee /opt/found-started
	      fi
	    container_config:
	      - "lxc.aa_profile=unconfined"
	      - "lxc.cgroup.devices.allow=a *:* rmw"
	    archive: true
	    archive_compression: bzip2
	  register: lvm_container_info
	
	- name: Debug info on container "test-container-lvm"
	  debug:
	    var: lvm_container_info
	
	- name: Run a command in a container and ensure its in a "stopped" state.
	  lxc_container:
	    name: test-container-started
	    state: stopped
	    container_command: |
	      echo 'hello world.' | tee /opt/stopped
	
	- name: Run a command in a container and ensure its it in a "frozen" state.
	  lxc_container:
	    name: test-container-stopped
	    state: frozen
	    container_command: |
	      echo 'hello world.' | tee /opt/frozen
	
	- name: Start a container
	  lxc_container:
	    name: test-container-stopped
	    state: started
	
	- name: Run a command in a container and then restart it
	  lxc_container:
	    name: test-container-started
	    state: restarted
	    container_command: |
	      echo 'hello world.' | tee /opt/restarted
	
	- name: Run a complex command within a "running" container
	  lxc_container:
	    name: test-container-started
	    container_command: |
	      apt-get update
	      apt-get install -y curl wget vim apache2
	      echo 'hello world.' | tee /opt/started
	      if [[ -f "/opt/started" ]]; then
	          echo 'hello world.' | tee /opt/found-started
	      fi
	
	# Create an archive of an existing container, save the archive to a defined
	# path and then destroy it.
	- name: Archive container
	  lxc_container:
	    name: test-container-started
	    state: absent
	    archive: true
	    archive_path: /opt/archives
	
	# Create a container using overlayfs, create an archive of it, create a
	# snapshot clone of the container and and finally leave the container
	# in a frozen state. The container archive will be compressed using gzip.
	- name: Create an overlayfs container archive and clone it
	  lxc_container:
	    name: test-container-overlayfs
	    container_log: true
	    template: ubuntu
	    state: started
	    backing_store: overlayfs
	    template_options: --release trusty
	    clone_snapshot: true
	    clone_name: test-container-overlayfs-clone-snapshot
	    archive: true
	    archive_compression: gzip
	  register: clone_container_info
	
	- name: debug info on container "test-container"
	  debug:
	    var: clone_container_info
	
	- name: Clone a container using snapshot
	  lxc_container:
	    name: test-container-overlayfs-clone-snapshot
	    backing_store: overlayfs
	    clone_name: test-container-overlayfs-clone-snapshot2
	    clone_snapshot: true
	
	- name: Create a new container and clone it
	  lxc_container:
	    name: test-container-new-archive
	    backing_store: dir
	    clone_name: test-container-new-archive-clone
	
	- name: Archive and clone a container then destroy it
	  lxc_container:
	    name: test-container-new-archive
	    state: absent
	    clone_name: test-container-new-archive-destroyed-clone
	    archive: true
	    archive_compression: gzip
	
	- name: Start a cloned container.
	  lxc_container:
	    name: test-container-new-archive-destroyed-clone
	    state: started
	
	- name: Destroy a container
	  lxc_container:
	    name: '{{ item }}'
	    state: absent
	  with_items:
	    - test-container-stopped
	    - test-container-started
	    - test-container-frozen
	    - test-container-lvm
	    - test-container-config
	    - test-container-overlayfs
	    - test-container-overlayfs-clone
	    - test-container-overlayfs-clone-snapshot
	    - test-container-overlayfs-clone-snapshot2
	    - test-container-new-archive
	    - test-container-new-archive-clone
	    - test-container-new-archive-destroyed-clone
	
	RETURN VALUES:
	
	
	lxc_container:
	    description: container information
	    returned: success
	    type: complex
	    contains:
	        name:
	            description: name of the lxc container
	            returned: success
	            type: string
	            sample: test_host
	        init_pid:
	            description: pid of the lxc init process
	            returned: success
	            type: int
	            sample: 19786
	        interfaces:
	            description: list of the container's network interfaces
	            returned: success
	            type: list
	            sample: [ "eth0", "lo" ]
	        ips:
	            description: list of ips
	            returned: success
	            type: list
	            sample: [ "10.0.3.3" ]
	        state:
	            description: resulting state of the container
	            returned: success
	            type: string
	            sample: "running"
	        archive:
	            description: resulting state of the container
	            returned: success, when archive is true
	            type: string
	            sample: "/tmp/test-container-config.tar"
	        clone:
	            description: if the container was cloned
	            returned: success, when clone_name is specified
	            type: boolean
	            sample: True
	

snippet lxd_container
	EXAMPLES:
	# An example for creating a Ubuntu container and install python
	- hosts: localhost
	  connection: local
	  tasks:
	    - name: Create a started container
	      lxd_container:
	        name: mycontainer
	        state: started
	        source:
	          type: image
	          mode: pull
	          server: https://images.linuxcontainers.org
	          protocol: lxd
	          alias: ubuntu/xenial/amd64
	        profiles: ["default"]
	        wait_for_ipv4_addresses: true
	        timeout: 600
	
	    - name: check python is installed in container
	      delegate_to: mycontainer
	      raw: dpkg -s python
	      register: python_install_check
	      failed_when: python_install_check.rc not in [0, 1]
	      changed_when: false
	
	    - name: install python in container
	      delegate_to: mycontainer
	      raw: apt-get install -y python
	      when: python_install_check.rc == 1
	
	# An example for deleting a container
	- hosts: localhost
	  connection: local
	  tasks:
	    - name: Delete a container
	      lxd_container:
	        name: mycontainer
	        state: absent
	
	# An example for restarting a container
	- hosts: localhost
	  connection: local
	  tasks:
	    - name: Restart a container
	      lxd_container:
	        name: mycontainer
	        state: restarted
	
	# An example for restarting a container using https to connect to the LXD server
	- hosts: localhost
	  connection: local
	  tasks:
	    - name: Restart a container
	      lxd_container:
	        url: https://127.0.0.1:8443
	        # These cert_file and key_file values are equal to the default values.
	        #cert_file: "{{ lookup('env', 'HOME') }}/.config/lxc/client.crt"
	        #key_file: "{{ lookup('env', 'HOME') }}/.config/lxc/client.key"
	        trust_password: mypassword
	        name: mycontainer
	        state: restarted
	
	# Note your container must be in the inventory for the below example.
	#
	# [containers]
	# mycontainer ansible_connection=lxd
	#
	- hosts:
	    - mycontainer
	  tasks:
	    - name: copy /etc/hosts in the created container to localhost with name "mycontainer-hosts"
	      fetch:
	        src: /etc/hosts
	        dest: /tmp/mycontainer-hosts
	        flat: true
	
	RETURN VALUES:
	
	
	addresses:
	  description: Mapping from the network device name to a list of IPv4 addresses in the container
	  returned: when state is started or restarted
	  type: dict
	  sample: {"eth0": ["10.155.92.191"]}
	old_state:
	  description: The old state of the container
	  returned: when state is started or restarted
	  type: string
	  sample: "stopped"
	logs:
	  description: The logs of requests and responses.
	  returned: when ansible-playbook is invoked with -vvvv.
	  type: list
	  sample: "(too long to be placed here)"
	actions:
	  description: List of actions performed for the container.
	  returned: success
	  type: list
	  sample: '["create", "start"]'
	

snippet lxd_profile
	EXAMPLES:
	# An example for creating a profile
	- hosts: localhost
	  connection: local
	  tasks:
	    - name: Create a profile
	      lxd_profile:
	        name: macvlan
	        state: present
	        config: {}
	        description: my macvlan profile
	        devices:
	          eth0:
	            nictype: macvlan
	            parent: br0
	            type: nic
	
	# An example for creating a profile via http connection
	- hosts: localhost
	  connection: local
	  tasks:
	  - name: create macvlan profile
	    lxd_profile:
	      url: https://127.0.0.1:8443
	      # These cert_file and key_file values are equal to the default values.
	      #cert_file: "{{ lookup('env', 'HOME') }}/.config/lxc/client.crt"
	      #key_file: "{{ lookup('env', 'HOME') }}/.config/lxc/client.key"
	      trust_password: mypassword
	      name: macvlan
	      state: present
	      config: {}
	      description: my macvlan profile
	      devices:
	        eth0:
	          nictype: macvlan
	          parent: br0
	          type: nic
	
	# An example for deleting a profile
	- hosts: localhost
	  connection: local
	  tasks:
	    - name: Delete a profile
	      lxd_profile:
	        name: macvlan
	        state: absent
	
	# An example for renaming a profile
	- hosts: localhost
	  connection: local
	  tasks:
	    - name: Rename a profile
	      lxd_profile:
	        name: macvlan
	        new_name: macvlan2
	        state: present
	
	RETURN VALUES:
	
	
	old_state:
	  description: The old state of the profile
	  returned: success
	  type: string
	  sample: "absent"
	logs:
	  description: The logs of requests and responses.
	  returned: when ansible-playbook is invoked with -vvvv.
	  type: list
	  sample: "(too long to be placed here)"
	actions:
	  description: List of actions performed for the profile.
	  returned: success
	  type: list
	  sample: '["create"]'
	

snippet macports
	EXAMPLES:
	- macports:
	    name: foo
	    state: present
	
	- macports:
	    name: foo
	    state: present
	    update_cache: yes
	
	- macports:
	    name: foo
	    state: absent
	
	- macports:
	    name: foo
	    state: active
	
	- macports:
	    name: foo
	    state: inactive
	

snippet mail
	EXAMPLES:
	# Example playbook sending mail to root
	- mail:
	    subject: 'System {{ ansible_hostname }} has been successfully provisioned.'
	  delegate_to: localhost
	
	# Sending an e-mail using Gmail SMTP servers
	- mail:
	    host: smtp.gmail.com
	    port: 587
	    username: username@gmail.com
	    password: mysecret
	    to: John Smith <john.smith@example.com>
	    subject: Ansible-report
	    body: 'System {{ ansible_hostname }} has been successfully provisioned.'
	  delegate_to: localhost
	
	# Send e-mail to a bunch of users, attaching files
	- mail:
	    host: 127.0.0.1
	    port: 2025
	    subject: Ansible-report
	    body: Hello, this is an e-mail. I hope you like it ;-)
	    from: jane@example.net (Jane Jolie)
	    to: John Doe <j.d@example.org>, Suzie Something <sue@example.com>
	    cc: Charlie Root <root@localhost>
	    attach: /etc/group /tmp/pavatar2.png
	    headers: 'Reply-To=john@example.com|X-Special="Something or other"'
	    charset: utf8
	  delegate_to: localhost
	
	# Sending an e-mail using the remote machine, not the Ansible controller node
	- mail:
	    host: localhost
	    port: 25
	    to: John Smith <john.smith@example.com>
	    subject: Ansible-report
	    body: 'System {{ ansible_hostname }} has been successfully provisioned.'
	
	# Sending an e-mail using Legacy SSL to the remote machine
	- mail:
	    host: localhost
	    port: 25
	    to: John Smith <john.smith@example.com>
	    subject: Ansible-report
	    body: 'System {{ ansible_hostname }} has been successfully provisioned.'
	    secure: always
	
	 # Sending an e-mail using StartTLS to the remote machine
	- mail:
	    host: localhost
	    port: 25
	    to: John Smith <john.smith@example.com>
	    subject: Ansible-report
	    body: 'System {{ ansible_hostname }} has been successfully provisioned.'
	    secure: starttls
	

snippet make
	EXAMPLES:
	# Build the default target
	- make:
	    chdir: /home/ubuntu/cool-project
	
	# Run `install` target as root
	- make:
	    chdir: /home/ubuntu/cool-project
	    target: install
	  become: yes
	
	# Pass in extra arguments to build
	- make:
	    chdir: /home/ubuntu/cool-project
	    target: all
	    params:
	      NUM_THREADS: 4
	      BACKEND: lapack
	
	RETURN VALUES:
	
	# 

snippet manageiq_provider
	EXAMPLES:
	- name: Create a new provider in ManageIQ ('Hawkular' metrics)
	    manageiq_provider:
	      name: 'EngLab'
	      type: 'OpenShift'
	      provider:
	        auth_key: 'topSecret'
	        hostname: 'example.com'
	        port: 8443
	        verify_ssl: False
	      metrics:
	        role: 'hawkular'
	        hostname: 'example.com'
	        port: 443
	        verify_ssl: False
	      manageiq_connection:
	        url: 'http://127.0.0.1:3000'
	        username: 'admin'
	        password: 'smartvm'
	        verify_ssl: False
	
	  - name: Update an existing provider named 'EngLab' (defaults to 'Prometheus' metrics)
	    manageiq_provider:
	      name: 'EngLab'
	      type: 'Openshift'
	      provider:
	        auth_key: 'verySecret'
	        hostname: 'next.example.com'
	        port: 8443
	        verify_ssl: False
	      metrics:
	        hostname: 'next.example.com'
	        port: 443
	        verify_ssl: False
	      manageiq_connection:
	        url: 'http://127.0.0.1:3000'
	        username: 'admin'
	        password: 'smartvm'
	        verify_ssl: False
	
	  - name: Delete a provider in ManageIQ
	    manageiq_provider:
	      state: 'absent'
	      name: 'EngLab'
	      manageiq_connection:
	        url: 'http://127.0.0.1:3000'
	        username: 'admin'
	        password: 'smartvm'
	        verify_ssl: False
	
	  - name: Create a new Amazon provider in ManageIQ using token authentication
	    manageiq_provider:
	      name: 'EngAmazon'
	      type: 'Amazon'
	      provider_region: 'us-east-1'
	      provider:
	        hostname: 'amazon.example.com'
	        userid: 'hello'
	        password: 'world'
	      manageiq_connection:
	        url: 'http://127.0.0.1:3000'
	        token: 'VeryLongToken'
	        verify_ssl: False
	
	RETURN VALUES:
	
	
	

snippet manageiq_user
	EXAMPLES:
	- name: Create a new user in ManageIQ
	  manageiq_user:
	    userid: 'jdoe'
	    name: 'Jane Doe'
	    password: 'VerySecret'
	    group: 'EvmGroup-user'
	    email: 'jdoe@example.com'
	    manageiq_connection:
	      url: 'http://127.0.0.1:3000'
	      username: 'admin'
	      password: 'smartvm'
	      verify_ssl: False
	
	- name: Create a new user in ManageIQ using a token
	  manageiq_user:
	    userid: 'jdoe'
	    name: 'Jane Doe'
	    password: 'VerySecret'
	    group: 'EvmGroup-user'
	    email: 'jdoe@example.com'
	    manageiq_connection:
	      url: 'http://127.0.0.1:3000'
	      token: 'sometoken'
	      verify_ssl: False
	
	- name: Delete a user in ManageIQ
	  manageiq_user:
	    state: 'absent'
	    userid: 'jdoe'
	    manageiq_connection:
	      url: 'http://127.0.0.1:3000'
	      username: 'admin'
	      password: 'smartvm'
	      verify_ssl: False
	
	- name: Delete a user in ManageIQ using a token
	  manageiq_user:
	    state: 'absent'
	    userid: 'jdoe'
	    manageiq_connection:
	      url: 'http://127.0.0.1:3000'
	      token: 'sometoken'
	      verify_ssl: False
	
	- name: Update email of user in ManageIQ
	  manageiq_user:
	    userid: 'jdoe'
	    email: 'jaustine@example.com'
	    manageiq_connection:
	      url: 'http://127.0.0.1:3000'
	      username: 'admin'
	      password: 'smartvm'
	      verify_ssl: False
	
	- name: Update email of user in ManageIQ using a token
	  manageiq_user:
	    userid: 'jdoe'
	    email: 'jaustine@example.com'
	    manageiq_connection:
	      url: 'http://127.0.0.1:3000'
	      token: 'sometoken'
	      verify_ssl: False
	
	RETURN VALUES:
	
	
	

snippet mattermost
	EXAMPLES:
	- name: Send notification message via Mattermost
	  mattermost:
	    url: http://mattermost.example.com
	    api_key: my_api_key
	    text: '{{ inventory_hostname }} completed'
	
	- name: Send notification message via Mattermost all options
	  mattermost:
	    url: http://mattermost.example.com
	    api_key: my_api_key
	    text: '{{ inventory_hostname }} completed'
	    channel: notifications
	    username: 'Ansible on {{ inventory_hostname }}'
	    icon_url: http://www.example.com/some-image-file.png
	
	RETURN VALUES:
	
	
	payload:
	    description: Mattermost payload
	    returned: success
	    type: string
	webhook_url:
	    description: URL the webhook is sent to
	    returned: success
	    type: string
	

snippet maven_artifact
	EXAMPLES:
	# Download the latest version of the JUnit framework artifact from Maven Central
	- maven_artifact:
	    group_id: junit
	    artifact_id: junit
	    dest: /tmp/junit-latest.jar
	
	# Download JUnit 4.11 from Maven Central
	- maven_artifact:
	    group_id: junit
	    artifact_id: junit
	    version: 4.11
	    dest: /tmp/junit-4.11.jar
	
	# Download an artifact from a private repository requiring authentication
	- maven_artifact:
	    group_id: com.company
	    artifact_id: library-name
	    repository_url: 'https://repo.company.com/maven'
	    username: user
	    password: pass
	    dest: /tmp/library-name-latest.jar
	
	# Download a WAR File to the Tomcat webapps directory to be deployed
	- maven_artifact:
	    group_id: com.company
	    artifact_id: web-app
	    extension: war
	    repository_url: 'https://repo.company.com/maven'
	    dest: /var/lib/tomcat7/webapps/web-app.war
	
	# Keep a downloaded artifact's name, i.e. retain the version
	- maven_artifact:
	    version: latest
	    artifact_id: spring-core
	    group_id: org.springframework
	    dest: /tmp/
	    keep_name: yes
	

snippet meta
	EXAMPLES:
	- template:
	    src: new.j2
	    dest: /etc/config.txt
	  notify: myhandler
	- name: force all notified handlers to run at this point, not waiting for normal sync points
	  meta: flush_handlers
	
	- name: reload inventory, useful with dynamic inventories when play makes changes to the existing hosts
	  cloud_guest:            # this is fake module
	    name: newhost
	    state: present
	- name: Refresh inventory to ensure new instaces exist in inventory
	  meta: refresh_inventory
	
	- name: Clear gathered facts from all currently targeted hosts
	  meta: clear_facts
	
	- name: bring host back to play after failure
	  copy:
	    src: file
	    dest: /etc/file
	  remote_user: imightnothavepermission
	
	- meta: clear_host_errors
	
	- user: name={{ansible_user}} groups=input
	- name: reset ssh connection to allow user changes to affect 'current login user'
	  meta: reset_connection
	

snippet modprobe
	EXAMPLES:
	# Add the 802.1q module
	- modprobe:
	    name: 8021q
	    state: present
	
	# Add the dummy module
	- modprobe:
	    name: dummy
	    state: present
	    params: 'numdummies=2'
	

snippet mongodb_parameter
	EXAMPLES:
	# Set MongoDB syncdelay to 60 (this is an int)
	- mongodb_parameter:
	    param: syncdelay
	    value: 60
	    param_type: int
	
	RETURN VALUES:
	
	
	before:
	    description: value before modification
	    returned: success
	    type: string
	after:
	    description: value after modification
	    returned: success
	    type: string
	

snippet mongodb_user
	EXAMPLES:
	# Create 'burgers' database user with name 'bob' and password '12345'.
	- mongodb_user:
	    database: burgers
	    name: bob
	    password: 12345
	    state: present
	
	# Create a database user via SSL (MongoDB must be compiled with the SSL option and configured properly)
	- mongodb_user:
	    database: burgers
	    name: bob
	    password: 12345
	    state: present
	    ssl: True
	
	# Delete 'burgers' database user with name 'bob'.
	- mongodb_user:
	    database: burgers
	    name: bob
	    state: absent
	
	# Define more users with various specific roles (if not defined, no roles is assigned, and the user will be added via pre mongo 2.2 style)
	- mongodb_user:
	    database: burgers
	    name: ben
	    password: 12345
	    roles: read
	    state: present
	- mongodb_user:
	    database: burgers
	    name: jim
	    password: 12345
	    roles: readWrite,dbAdmin,userAdmin
	    state: present
	- mongodb_user:
	    database: burgers
	    name: joe
	    password: 12345
	    roles: readWriteAnyDatabase
	    state: present
	
	# add a user to database in a replica set, the primary server is automatically discovered and written to
	- mongodb_user:
	    database: burgers
	    name: bob
	    replica_set: belcher
	    password: 12345
	    roles: readWriteAnyDatabase
	    state: present
	
	# add a user 'oplog_reader' with read only access to the 'local' database on the replica_set 'belcher'. This is useful for oplog access (MONGO_OPLOG_URL).
	# please notice the credentials must be added to the 'admin' database because the 'local' database is not syncronized and can't receive user credentials
	# To login with such user, the connection string should be MONGO_OPLOG_URL="mongodb://oplog_reader:oplog_reader_password@server1,server2/local?authSource=admin"
	# This syntax requires mongodb 2.6+ and pymongo 2.5+
	- mongodb_user:
	    login_user: root
	    login_password: root_password
	    database: admin
	    user: oplog_reader
	    password: oplog_reader_password
	    state: present
	    replica_set: belcher
	    roles:
	      - db: local
	        role: read
	
	RETURN VALUES:
	
	
	user:
	    description: The name of the user to add or remove.
	    returned: success
	    type: string
	

snippet monit
	EXAMPLES:
	# Manage the state of program "httpd" to be in "started" state.
	- monit:
	    name: httpd
	    state: started
	

snippet mount
	EXAMPLES:
	# Before 2.3, option 'name' was used instead of 'path'
	- name: Mount DVD read-only
	  mount:
	    path: /mnt/dvd
	    src: /dev/sr0
	    fstype: iso9660
	    opts: ro
	    state: present
	
	- name: Mount up device by label
	  mount:
	    path: /srv/disk
	    src: LABEL=SOME_LABEL
	    fstype: ext4
	    state: present
	
	- name: Mount up device by UUID
	  mount:
	    path: /home
	    src: UUID=b3e48f45-f933-4c8e-a700-22a159ec9077
	    fstype: xfs
	    opts: noatime
	    state: present
	

snippet mqtt
	EXAMPLES:
	- mqtt:
	    topic: 'service/ansible/{{ ansible_hostname }}'
	    payload: 'Hello at {{ ansible_date_time.iso8601 }}'
	    qos: 0
	    retain: False
	    client_id: ans001
	  delegate_to: localhost
	

snippet mssql_db
	EXAMPLES:
	# Create a new database with name 'jackdata'
	- mssql_db:
	    name: jackdata
	    state: present
	
	# Copy database dump file to remote host and restore it to database 'my_db'
	- copy:
	    src: dump.sql
	    dest: /tmp
	
	- mssql_db:
	    name: my_db
	    state: import
	    target: /tmp/dump.sql
	
	RETURN VALUES:
	
	
	#
	

snippet mysql_db
	EXAMPLES:
	- name: Create a new database with name 'bobdata'
	  mysql_db:
	    name: bobdata
	    state: present
	
	# Copy database dump file to remote host and restore it to database 'my_db'
	- name: Copy database dump file
	  copy:
	    src: dump.sql.bz2
	    dest: /tmp
	- name: Restore database
	  mysql_db:
	    name: my_db
	    state: import
	    target: /tmp/dump.sql.bz2
	
	- name: Dump all databases to hostname.sql
	  mysql_db:
	    state: dump
	    name: all
	    target: /tmp/{{ inventory_hostname }}.sql
	
	- name: Import file.sql similar to mysql -u <username> -p <password> < hostname.sql
	  mysql_db:
	    state: import
	    name: all
	    target: /tmp/{{ inventory_hostname }}.sql
	

snippet mysql_replication
	EXAMPLES:
	# Stop mysql slave thread
	- mysql_replication:
	    mode: stopslave
	
	# Get master binlog file name and binlog position
	- mysql_replication:
	    mode: getmaster
	
	# Change master to master server 192.0.2.1 and use binary log 'mysql-bin.000009' with position 4578
	- mysql_replication:
	    mode: changemaster
	    master_host: 192.0.2.1
	    master_log_file: mysql-bin.000009
	    master_log_pos: 4578
	
	# Check slave status using port 3308
	- mysql_replication:
	    mode: getslave
	    login_host: ansible.example.com
	    login_port: 3308
	

snippet mysql_user
	EXAMPLES:
	# Removes anonymous user account for localhost
	- mysql_user:
	    name: ''
	    host: localhost
	    state: absent
	
	# Removes all anonymous user accounts
	- mysql_user:
	    name: ''
	    host_all: yes
	    state: absent
	
	# Create database user with name 'bob' and password '12345' with all database privileges
	- mysql_user:
	    name: bob
	    password: 12345
	    priv: '*.*:ALL'
	    state: present
	
	# Create database user with name 'bob' and previously hashed mysql native password '*EE0D72C1085C46C5278932678FBE2C6A782821B4' with all database privileges
	- mysql_user:
	    name: bob
	    password: '*EE0D72C1085C46C5278932678FBE2C6A782821B4'
	    encrypted: yes
	    priv: '*.*:ALL'
	    state: present
	
	# Creates database user 'bob' and password '12345' with all database privileges and 'WITH GRANT OPTION'
	- mysql_user:
	    name: bob
	    password: 12345
	    priv: '*.*:ALL,GRANT'
	    state: present
	
	# Modify user Bob to require SSL connections. Note that REQUIRESSL is a special privilege that should only apply to *.* by itself.
	- mysql_user:
	    name: bob
	    append_privs: true
	    priv: '*.*:REQUIRESSL'
	    state: present
	
	# Ensure no user named 'sally'@'localhost' exists, also passing in the auth credentials.
	- mysql_user:
	    login_user: root
	    login_password: 123456
	    name: sally
	    state: absent
	
	# Ensure no user named 'sally' exists at all
	- mysql_user:
	    name: sally
	    host_all: yes
	    state: absent
	
	# Specify grants composed of more than one word
	- mysql_user:
	    name: replication
	    password: 12345
	    priv: "*.*:REPLICATION CLIENT"
	    state: present
	
	# Revoke all privileges for user 'bob' and password '12345'
	- mysql_user:
	    name: bob
	    password: 12345
	    priv: "*.*:USAGE"
	    state: present
	
	# Example privileges string format
	# mydb.*:INSERT,UPDATE/anotherdb.*:SELECT/yetanotherdb.*:ALL
	
	# Example using login_unix_socket to connect to server
	- mysql_user:
	    name: root
	    password: abc123
	    login_unix_socket: /var/run/mysqld/mysqld.sock
	
	# Example of skipping binary logging while adding user 'bob'
	- mysql_user:
	    name: bob
	    password: 12345
	    priv: "*.*:USAGE"
	    state: present
	    sql_log_bin: no
	
	# Example .my.cnf file for setting the root password
	# [client]
	# user=root
	# password=n<_665{vS43y
	

snippet mysql_variables
	EXAMPLES:
	# Check for sync_binlog setting
	- mysql_variables:
	    variable: sync_binlog
	
	# Set read_only variable to 1
	- mysql_variables:
	    variable: read_only
	    value: 1
	

snippet nagios
	EXAMPLES:
	# set 30 minutes of apache downtime
	- nagios:
	    action: downtime
	    minutes: 30
	    service: httpd
	    host: '{{ inventory_hostname }}'
	
	# schedule an hour of HOST downtime
	- nagios:
	    action: downtime
	    minutes: 60
	    service: host
	    host: '{{ inventory_hostname }}'
	
	# schedule an hour of HOST downtime, with a comment describing the reason
	- nagios:
	    action: downtime
	    minutes: 60
	    service: host
	    host: '{{ inventory_hostname }}'
	    comment: Rebuilding machine
	
	# schedule downtime for ALL services on HOST
	- nagios:
	    action: downtime
	    minutes: 45
	    service: all
	    host: '{{ inventory_hostname }}'
	
	# schedule downtime for a few services
	- nagios:
	    action: downtime
	    services: frob,foobar,qeuz
	    host: '{{ inventory_hostname }}'
	
	# set 30 minutes downtime for all services in servicegroup foo
	- nagios:
	    action: servicegroup_service_downtime
	    minutes: 30
	    servicegroup: foo
	    host: '{{ inventory_hostname }}'
	
	# set 30 minutes downtime for all host in servicegroup foo
	- nagios:
	    action: servicegroup_host_downtime
	    minutes: 30
	    servicegroup: foo
	    host: '{{ inventory_hostname }}'
	
	# delete all downtime for a given host
	- nagios:
	    action: delete_downtime
	    host: '{{ inventory_hostname }}'
	    service: all
	
	# delete all downtime for HOST with a particular comment
	- nagios:
	    action: delete_downtime
	    host: '{{ inventory_hostname }}'
	    service: host
	    comment: Planned maintenance
	
	# enable SMART disk alerts
	- nagios:
	    action: enable_alerts
	    service: smart
	    host: '{{ inventory_hostname }}'
	
	# "two services at once: disable httpd and nfs alerts"
	- nagios:
	    action: disable_alerts
	    service: httpd,nfs
	    host: '{{ inventory_hostname }}'
	
	# disable HOST alerts
	- nagios:
	    action: disable_alerts
	    service: host
	    host: '{{ inventory_hostname }}'
	
	# silence ALL alerts
	- nagios:
	    action: silence
	    host: '{{ inventory_hostname }}'
	
	# unsilence all alerts
	- nagios:
	    action: unsilence
	    host: '{{ inventory_hostname }}'
	
	# SHUT UP NAGIOS
	- nagios:
	    action: silence_nagios
	
	# ANNOY ME NAGIOS
	- nagios:
	    action: unsilence_nagios
	
	# command something
	- nagios:
	    action: command
	    command: DISABLE_FAILURE_PREDICTION
	

snippet nclu
	EXAMPLES:
	- name: Add two interfaces without committing any changes
	  nclu:
	    commands:
	        - add int swp1
	        - add int swp2
	
	- name: Add 48 interfaces and commit the change.
	  nclu:
	    template: |
	        {% for iface in range(1,49) %}
	        add int swp{{iface}}
	        {% endfor %}
	    commit: true
	    description: "Ansible - add swps1-48"
	
	- name: Atomically add an interface
	  nclu:
	    commands:
	        - add int swp1
	    atomic: true
	    description: "Ansible - add swp1"
	
	RETURN VALUES:
	
	
	changed:
	    description: whether the interface was changed
	    returned: changed
	    type: bool
	    sample: True
	msg:
	    description: human-readable report of success or failure
	    returned: always
	    type: string
	    sample: "interface bond0 config updated"
	

snippet net_banner
	EXAMPLES:
	- name: configure the login banner
	  net_banner:
	    banner: login
	    text: |
	      this is my login banner
	      that contains a multiline
	      string
	    state: present
	
	- name: remove the motd banner
	  net_banner:
	    banner: motd
	    state: absent
	
	- name: Configure banner from file
	  net_banner:
	    banner:  motd
	    text: "{{ lookup('file', './config_partial/raw_banner.cfg') }}"
	    state: present
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always, except for the platforms that use Netconf transport to manage the device.
	  type: list
	  sample:
	    - banner login
	    - this is my login banner
	    - that contains a multiline
	    - string
	

snippet net_interface
	EXAMPLES:
	- name: configure interface
	  net_interface:
	    name: ge-0/0/1
	    description: test-interface
	
	- name: remove interface
	  net_interface:
	    name: ge-0/0/1
	    state: absent
	
	- name: make interface up
	  net_interface:
	    name: ge-0/0/1
	    description: test-interface
	    enabled: True
	
	- name: make interface down
	  net_interface:
	    name: ge-0/0/1
	    description: test-interface
	    enabled: False
	
	- name: Create interface using aggregate
	  net_interface:
	    aggregate:
	      - { name: ge-0/0/1, description: test-interface-1 }
	      - { name: ge-0/0/2, description: test-interface-2 }
	    speed: 1g
	    duplex: full
	    mtu: 512
	
	- name: Delete interface using aggregate
	  junos_interface:
	    aggregate:
	      - { name: ge-0/0/1 }
	      - { name: ge-0/0/2 }
	    state: absent
	
	- name: Check intent arguments
	  net_interface:
	    name: fxp0
	    state: up
	    tx_rate: ge(0)
	    rx_rate: le(0)
	
	- name: Config + intent
	  net_interface:
	    name: fxp0
	    enabled: False
	    state: down
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device.
	  returned: always, except for the platforms that use Netconf transport to manage the device.
	  type: list
	  sample:
	    - interface 20
	    - name test-interface
	

snippet net_l2_interface
	EXAMPLES:
	- name: configure Layer-2 interface
	  net_l2_interface:
	    name: gigabitethernet0/0/1
	    mode: access
	    access_vlan: 30
	
	- name: remove Layer-2 interface configuration
	  net_l2_interface:
	    name: gigabitethernet0/0/1
	    state: absent
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always, except for the platforms that use Netconf transport to manage the device.
	  type: list
	  sample:
	    - interface gigabitethernet0/0/1
	    - switchport mode access
	    - switchport access vlan 30
	

snippet net_l3_interface
	EXAMPLES:
	- name: Set eth0 IPv4 address
	  net_l3_interface:
	    name: eth0
	    ipv4: 192.168.0.1/24
	
	- name: Remove eth0 IPv4 address
	  net_l3_interface:
	    name: eth0
	    state: absent
	
	- name: Set IP addresses on aggregate
	  net_l3_interface:
	    aggregate:
	      - { name: eth1, ipv4: 192.168.2.10/24 }
	      - { name: eth2, ipv4: 192.168.3.10/24, ipv6: "fd5d:12c9:2201:1::1/64" }
	
	- name: Remove IP addresses on aggregate
	  net_l3_interface:
	    aggregate:
	      - { name: eth1, ipv4: 192.168.2.10/24 }
	      - { name: eth2, ipv4: 192.168.3.10/24, ipv6: "fd5d:12c9:2201:1::1/64" }
	    state: absent
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always, except for the platforms that use Netconf transport to manage the device.
	  type: list
	  sample:
	    - set interfaces ethernet eth0 address '192.168.0.1/24'
	

snippet net_linkagg
	EXAMPLES:
	- name: configure link aggregation group
	  net_linkagg:
	    name: bond0
	    members:
	      - eth0
	      - eth1
	
	- name: remove configuration
	  net_linkagg:
	    name: bond0
	    state: absent
	
	- name: Create aggregate of linkagg definitions
	  net_linkagg:
	    aggregate:
	        - { name: bond0, members: [eth1] }
	        - { name: bond1, members: [eth2] }
	
	- name: Remove aggregate of linkagg definitions
	  net_linkagg:
	    aggregate:
	      - name: bond0
	      - name: bond1
	    state: absent
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always, except for the platforms that use Netconf transport to manage the device.
	  type: list
	  sample:
	    - set interfaces bonding bond0
	    - set interfaces ethernet eth0 bond-group 'bond0'
	    - set interfaces ethernet eth1 bond-group 'bond0'
	

snippet net_lldp
	EXAMPLES:
	- name: Enable LLDP service
	  net_lldp:
	    state: present
	
	- name: Disable LLDP service
	  net_lldp:
	    state: lldp
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always, except for the platforms that use Netconf transport to manage the device.
	  type: list
	  sample:
	    - set service lldp
	

snippet net_lldp_interface
	EXAMPLES:
	- name: Configure LLDP on specific interfaces
	  net_lldp_interface:
	    name: eth1
	    state: present
	
	- name: Disable LLDP on specific interfaces
	  net_lldp_interface:
	    name: eth1
	    state: disabled
	
	- name: Enable LLDP on specific interfaces
	  net_lldp_interface:
	    name: eth1
	    state: enabled
	
	- name: Delete LLDP on specific interfaces
	  net_lldp_interface:
	    name: eth1
	    state: absent
	
	- name: Create aggregate of LLDP interface configurations
	  net_lldp_interface:
	    aggregate:
	    - { name: eth1 }
	    - { name: eth2 }
	    state: present
	
	- name: Delete aggregate of LLDP interface configurations
	  net_lldp_interface:
	    aggregate:
	    - { name: eth1 }
	    - { name: eth2 }
	    state: absent
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always, except for the platforms that use Netconf transport to manage the device.
	  type: list
	  sample:
	    - set service lldp eth1 disable
	

snippet net_logging
	EXAMPLES:
	- name: configure console logging
	  net_logging:
	    dest: console
	    facility: any
	    level: critical
	
	- name: remove console logging configuration
	  net_logging:
	    dest: console
	    state: absent
	
	- name: configure host logging
	  net_logging:
	    dest: host
	    name: 1.1.1.1
	    facility: kernel
	    level: critical
	
	- name: Configure file logging using aggregate
	  net_logging:
	    dest: file
	    aggregate:
	    - name: test-1
	      facility: pfe
	      level: critical
	    - name: test-2
	      facility: kernel
	      level: emergency
	- name: Delete file logging using aggregate
	  net_logging:
	    dest: file
	    aggregate:
	    - name: test-1
	      facility: pfe
	      level: critical
	    - name: test-2
	      facility: kernel
	      level: emergency
	    state: absent
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always, except for the platforms that use Netconf transport to manage the device.
	  type: list
	  sample:
	    - logging console critical
	

snippet net_ping
	EXAMPLES:
	- provider:
	    host: "{{ ansible_host }}"
	    username: "{{ username }}"
	    password: "{{ password }}"
	    network_os: "{{ network_os }}"
	
	- name: Test reachability to 10.10.10.10 using default vrf
	  net_ping:
	    provider: "{{ provider }}"
	    dest: 10.10.10.10
	
	- name: Test reachability to 10.20.20.20 using prod vrf
	  net_ping:
	    provider: "{{ provider }}"
	    dest: 10.20.20.20
	    vrf: prod
	
	- name: Test unreachability to 10.30.30.30 using default vrf
	  net_ping:
	    provider: "{{ provider }}"
	    dest: 10.30.30.30
	    state: absent
	
	- name: Test reachability to 10.40.40.40 using prod vrf and setting count and source
	  net_ping:
	    provider: "{{ provider }}"
	    dest: 10.40.40.40
	    source: loopback0
	    vrf: prod
	    count: 20
	
	RETURN VALUES:
	
	
	commands:
	  description: Show the command sent.
	  returned: always
	  type: list
	  sample: ["ping vrf prod 10.40.40.40 count 20 source loopback0"]
	packet_loss:
	  description: Percentage of packets lost.
	  returned: always
	  type: str
	  sample: "0%"
	packets_rx:
	  description: Packets successfully received.
	  returned: always
	  type: int
	  sample: 20
	packets_tx:
	  description: Packets successfully transmitted.
	  returned: always
	  type: int
	  sample: 20
	rtt:
	  description: Show RTT stats.
	  returned: always
	  type: dict
	  sample: {"avg": 2, "max": 8, "min": 1}
	

snippet net_static_route
	EXAMPLES:
	- name: configure static route
	  net_static_route:
	    prefix: 192.168.2.0
	    mask: 255.255.255.0
	    next_hop: 10.0.0.1
	
	- name: remove configuration
	  net_static_route:
	    prefix: 192.168.2.0
	    mask: 255.255.255.0
	    next_hop: 10.0.0.1
	    state: absent
	
	- name: configure aggregates of static routes
	  net_static_route:
	    aggregate:
	      - { prefix: 192.168.2.0, mask 255.255.255.0, next_hop: 10.0.0.1 }
	      - { prefix: 192.168.3.0, mask 255.255.255.0, next_hop: 10.0.2.1 }
	
	- name: Remove static route collections
	  net_static_route:
	    aggregate:
	      - { prefix: 172.24.1.0/24, next_hop: 192.168.42.64 }
	      - { prefix: 172.24.3.0/24, next_hop: 192.168.42.64 }
	    state: absent
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always
	  type: list
	  sample:
	    - ip route 192.168.2.0/24 10.0.0.1
	

snippet net_system
	EXAMPLES:
	- name: configure hostname and domain name
	  net_system:
	    hostname: ios01
	    domain_name: test.example.com
	    domain-search:
	      - ansible.com
	      - redhat.com
	      - cisco.com
	
	- name: remove configuration
	  net_system:
	    state: absent
	
	- name: configure DNS lookup sources
	  net_system:
	    lookup_source: MgmtEth0/0/CPU0/0
	
	- name: configure name servers
	  net_system:
	    name_servers:
	      - 8.8.8.8
	      - 8.8.4.4
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always, except for the platforms that use Netconf transport to manage the device.
	  type: list
	  sample:
	    - hostname ios01
	    - ip domain name test.example.com
	

snippet net_user
	EXAMPLES:
	- name: create a new user
	  net_user:
	    name: ansible
	    sshkey: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
	    state: present
	
	- name: remove all users except admin
	  net_user:
	    purge: yes
	
	- name: set multiple users to privilege level 15
	  net_user:
	    aggregate:
	      - { name: netop }
	      - { name: netend }
	    privilege: 15
	    state: present
	
	- name: Change Password for User netop
	  net_user:
	    name: netop
	    password: "{{ new_password }}"
	    update_password: always
	    state: present
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always
	  type: list
	  sample:
	    - username ansible secret password
	    - username admin secret admin
	

snippet net_vlan
	EXAMPLES:
	- name: configure VLAN ID and name
	  net_vlan:
	    vlan_id: 20
	    name: test-vlan
	
	- name: remove configuration
	  net_vlan:
	    state: absent
	
	- name: configure VLAN state
	  net_vlan:
	    vlan_id:
	    state: suspend
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always, except for the platforms that use Netconf transport to manage the device.
	  type: list
	  sample:
	    - vlan 20
	    - name test-vlan
	

snippet net_vrf
	EXAMPLES:
	- name: Create VRF named MANAGEMENT
	  net_vrf:
	    name: MANAGEMENT
	
	- name: remove VRF named MANAGEMENT
	  net_vrf:
	    name: MANAGEMENT
	    state: absent
	
	- name: Create aggregate of VRFs with purge
	  net_vrf:
	    aggregate:
	      - { name: test4, rd: "1:204" }
	      - { name: test5, rd: "1:205" }
	    state: present
	    purge: yes
	
	- name: Delete aggregate of VRFs
	  net_vrf:
	    aggregate:
	      - name: test2
	      - name: test3
	      - name: test4
	      - name: test5
	    state: absent
	
	RETURN VALUES:
	
	
	commands:
	  description: The list of configuration mode commands to send to the device
	  returned: always, except for the platforms that use Netconf transport to manage the device.
	  type: list
	  sample:
	    - vrf definition MANAGEMENT
	

snippet netconf_config
	EXAMPLES:
	- name: set ntp server in the device
	  netconf_config:
	    host: 10.0.0.1
	    username: admin
	    password: admin
	    xml: |
	        <config xmlns:xc="urn:ietf:params:xml:ns:netconf:base:1.0">
	            <system xmlns="urn:ietf:params:xml:ns:yang:ietf-system">
	                <ntp>
	                    <enabled>true</enabled>
	                    <server>
	                        <name>ntp1</name>
	                        <udp><address>127.0.0.1</address></udp>
	                    </server>
	                </ntp>
	            </system>
	        </config>
	
	- name: wipe ntp configuration
	  netconf_config:
	    host: 10.0.0.1
	    username: admin
	    password: admin
	    xml: |
	        <config xmlns:xc="urn:ietf:params:xml:ns:netconf:base:1.0">
	            <system xmlns="urn:ietf:params:xml:ns:yang:ietf-system">
	                <ntp>
	                    <enabled>false</enabled>
	                    <server operation="remove">
	                        <name>ntp1</name>
	                    </server>
	                </ntp>
	            </system>
	        </config>
	
	RETURN VALUES:
	
	
	server_capabilities:
	    description: list of capabilities of the server
	    returned: success
	    type: list
	    sample: ['urn:ietf:params:netconf:base:1.1','urn:ietf:params:netconf:capability:confirmed-commit:1.0','urn:ietf:params:netconf:capability:candidate:1.0']
	
	

snippet newrelic_deployment
	EXAMPLES:
	- newrelic_deployment:
	    token: AAAAAA
	    app_name: myapp
	    user: ansible deployment
	    revision: '1.0'
	

snippet nexmo
	EXAMPLES:
	- name: Send notification message via Nexmo
	  nexmo:
	    api_key: 640c8a53
	    api_secret: 0ce239a6
	    src: 12345678901
	    dest:
	      - 10987654321
	      - 16789012345
	    msg: '{{ inventory_hostname }} completed'
	  delegate_to: localhost
	

snippet nginx_status_facts
	EXAMPLES:
	# Gather status facts from nginx on localhost
	- name: get current http stats
	  nginx_status_facts:
	    url: http://localhost/nginx_status
	
	# Gather status facts from nginx on localhost with a custom timeout of 20 seconds
	- name: get current http stats
	  nginx_status_facts:
	    url: http://localhost/nginx_status
	    timeout: 20
	
	RETURN VALUES:
	
	
	---
	nginx_status_facts.active_connections:
	  description: Active connections.
	  returned: success
	  type: int
	  sample: 2340
	nginx_status_facts.accepts:
	  description: The total number of accepted client connections.
	  returned: success
	  type: int
	  sample: 81769947
	nginx_status_facts.handled:
	  description: The total number of handled connections. Generally, the parameter value is the same as accepts unless some resource limits have been reached.
	  returned: success
	  type: int
	  sample: 81769947
	nginx_status_facts.requests:
	  description: The total number of client requests.
	  returned: success
	  type: int
	  sample: 144332345
	nginx_status_facts.reading:
	  description: The current number of connections where nginx is reading the request header.
	  returned: success
	  type: int
	  sample: 0
	nginx_status_facts.writing:
	  description: The current number of connections where nginx is writing the response back to the client.
	  returned: success
	  type: int
	  sample: 241
	nginx_status_facts.waiting:
	  description: The current number of idle client connections waiting for a request.
	  returned: success
	  type: int
	  sample: 2092
	nginx_status_facts.data:
	  description: HTTP response as is.
	  returned: success
	  type: string
	  sample: "Active connections: 2340 
	server accepts handled requests
	 81769947 81769947 144332345 
	Reading: 0 Writing: 241 Waiting: 2092 
	"
	

snippet nmcli
	EXAMPLES:
	# These examples are using the following inventory:
	#
	# ## Directory layout:
	#
	# |_/inventory/cloud-hosts
	# |           /group_vars/openstack-stage.yml
	# |           /host_vars/controller-01.openstack.host.com
	# |           /host_vars/controller-02.openstack.host.com
	# |_/playbook/library/nmcli.py
	# |          /playbook-add.yml
	# |          /playbook-del.yml
	# ```
	#
	# ## inventory examples
	# ### groups_vars
	# ```yml
	# ---
	# #devops_os_define_network
	# storage_gw: "192.0.2.254"
	# external_gw: "198.51.100.254"
	# tenant_gw: "203.0.113.254"
	#
	# #Team vars
	# nmcli_team:
	#   - conn_name: tenant
	#     ip4: '{{ tenant_ip }}'
	#     gw4: '{{ tenant_gw }}'
	#   - conn_name: external
	#     ip4: '{{ external_ip }}'
	#     gw4: '{{ external_gw }}'
	#   - conn_name: storage
	#     ip4: '{{ storage_ip }}'
	#     gw4: '{{ storage_gw }}'
	# nmcli_team_slave:
	#   - conn_name: em1
	#     ifname: em1
	#     master: tenant
	#   - conn_name: em2
	#     ifname: em2
	#     master: tenant
	#   - conn_name: p2p1
	#     ifname: p2p1
	#     master: storage
	#   - conn_name: p2p2
	#     ifname: p2p2
	#     master: external
	#
	# #bond vars
	# nmcli_bond:
	#   - conn_name: tenant
	#     ip4: '{{ tenant_ip }}'
	#     gw4: ''
	#     mode: balance-rr
	#   - conn_name: external
	#     ip4: '{{ external_ip }}'
	#     gw4: ''
	#     mode: balance-rr
	#   - conn_name: storage
	#     ip4: '{{ storage_ip }}'
	#     gw4: '{{ storage_gw }}'
	#     mode: balance-rr
	# nmcli_bond_slave:
	#   - conn_name: em1
	#     ifname: em1
	#     master: tenant
	#   - conn_name: em2
	#     ifname: em2
	#     master: tenant
	#   - conn_name: p2p1
	#     ifname: p2p1
	#     master: storage
	#   - conn_name: p2p2
	#     ifname: p2p2
	#     master: external
	#
	# #ethernet vars
	# nmcli_ethernet:
	#   - conn_name: em1
	#     ifname: em1
	#     ip4: '{{ tenant_ip }}'
	#     gw4: '{{ tenant_gw }}'
	#   - conn_name: em2
	#     ifname: em2
	#     ip4: '{{ tenant_ip1 }}'
	#     gw4: '{{ tenant_gw }}'
	#   - conn_name: p2p1
	#     ifname: p2p1
	#     ip4: '{{ storage_ip }}'
	#     gw4: '{{ storage_gw }}'
	#   - conn_name: p2p2
	#     ifname: p2p2
	#     ip4: '{{ external_ip }}'
	#     gw4: '{{ external_gw }}'
	# ```
	#
	# ### host_vars
	# ```yml
	# ---
	# storage_ip: "192.0.2.91/23"
	# external_ip: "198.51.100.23/21"
	# tenant_ip: "203.0.113.77/23"
	# ```
	
	
	
	## playbook-add.yml example
	
	---
	- hosts: openstack-stage
	  remote_user: root
	  tasks:
	
	  - name: install needed network manager libs
	    yum:
	      name: '{{ item }}'
	      state: installed
	    with_items:
	      - NetworkManager-glib
	      - libnm-qt-devel.x86_64
	      - nm-connection-editor.x86_64
	      - libsemanage-python
	      - policycoreutils-python
	
	##### Working with all cloud nodes - Teaming
	  - name: try nmcli add team - conn_name only & ip4 gw4
	    nmcli:
	      type: team
	      conn_name: '{{ item.conn_name }}'
	      ip4: '{{ item.ip4 }}'
	      gw4: '{{ item.gw4 }}'
	      state: present
	    with_items:
	      - '{{ nmcli_team }}'
	
	  - name: try nmcli add teams-slave
	    nmcli:
	      type: team-slave
	      conn_name: '{{ item.conn_name }}'
	      ifname: '{{ item.ifname }}'
	      master: '{{ item.master }}'
	      state: present
	    with_items:
	      - '{{ nmcli_team_slave }}'
	
	###### Working with all cloud nodes - Bonding
	  - name: try nmcli add bond - conn_name only & ip4 gw4 mode
	    nmcli:
	      type: bond
	      conn_name: '{{ item.conn_name }}'
	      ip4: '{{ item.ip4 }}'
	      gw4: '{{ item.gw4 }}'
	      mode: '{{ item.mode }}'
	      state: present
	    with_items:
	      - '{{ nmcli_bond }}'
	
	  - name: try nmcli add bond-slave
	    nmcli:
	      type: bond-slave
	      conn_name: '{{ item.conn_name }}'
	      ifname: '{{ item.ifname }}'
	      master: '{{ item.master }}'
	      state: present
	    with_items:
	      - '{{ nmcli_bond_slave }}'
	
	##### Working with all cloud nodes - Ethernet
	  - name: nmcli add Ethernet - conn_name only & ip4 gw4
	    nmcli:
	      type: ethernet
	      conn_name: '{{ item.conn_name }}'
	      ip4: '{{ item.ip4 }}'
	      gw4: '{{ item.gw4 }}'
	      state: present
	    with_items:
	      - '{{ nmcli_ethernet }}'
	
	## playbook-del.yml example
	- hosts: openstack-stage
	  remote_user: root
	  tasks:
	
	  - name: try nmcli del team - multiple
	    nmcli:
	      conn_name: '{{ item.conn_name }}'
	      state: absent
	    with_items:
	      - conn_name: em1
	      - conn_name: em2
	      - conn_name: p1p1
	      - conn_name: p1p2
	      - conn_name: p2p1
	      - conn_name: p2p2
	      - conn_name: tenant
	      - conn_name: storage
	      - conn_name: external
	      - conn_name: team-em1
	      - conn_name: team-em2
	      - conn_name: team-p1p1
	      - conn_name: team-p1p2
	      - conn_name: team-p2p1
	      - conn_name: team-p2p2
	
	# To add an Ethernet connection with static IP configuration, issue a command as follows
	  - nmcli:
	    conn_name: my-eth1
	    ifname: eth1
	    type: ethernet
	    ip4: 192.0.2.100/24
	    gw4: 192.0.2.1
	    state: present
	
	# To add an Team connection with static IP configuration, issue a command as follows
	  - nmcli:
	    conn_name: my-team1
	    ifname: my-team1
	    type: team
	    ip4: 192.0.2.100/24
	    gw4: 192.0.2.1
	    state: present
	    autoconnect: yes
	
	# Optionally, at the same time specify IPv6 addresses for the device as follows:
	  - nmcli:
	    conn_name: my-eth1
	    ifname: eth1
	    type: ethernet
	    ip4: 192.0.2.100/24
	    gw4: 192.0.2.1
	    ip6: '2001:db8::cafe'
	    gw6: '2001:db8::1'
	    state: present
	
	# To add two IPv4 DNS server addresses:
	  - nmcli:
	    conn_name: my-eth1
	    type: ethernet
	    dns4:
	      - 192.0.2.53
	      - 198.51.100.53
	    state: present
	
	# To make a profile usable for all compatible Ethernet interfaces, issue a command as follows
	  - nmcli:
	    ctype: ethernet
	    name: my-eth1
	    ifname: '*'
	    state: present
	
	# To change the property of a setting e.g. MTU, issue a command as follows:
	  - nmcli:
	    conn_name: my-eth1
	    mtu: 9000
	    type: ethernet
	    state: present
	
	# Exit Status's:
	#     - nmcli exits with status 0 if it succeeds, a value greater than 0 is
	#     returned if an error occurs.
	#     - 0 Success - indicates the operation succeeded
	#     - 1 Unknown or unspecified error
	#     - 2 Invalid user input, wrong nmcli invocation
	#     - 3 Timeout expired (see --wait option)
	#     - 4 Connection activation failed
	#     - 5 Connection deactivation failed
	#     - 6 Disconnecting device failed
	#     - 7 Connection deletion failed
	#     - 8 NetworkManager is not running
	#     - 9 nmcli and NetworkManager versions mismatch
	#     - 10 Connection, device, or access point does not exist.
	

snippet npm
	EXAMPLES:
	- name: Install "coffee-script" node.js package.
	  npm:
	    name: coffee-script
	    path: /app/location
	
	- name: Install "coffee-script" node.js package on version 1.6.1.
	  npm:
	    name: coffee-script
	    version: '1.6.1'
	    path: /app/location
	
	- name: Install "coffee-script" node.js package globally.
	  npm:
	    name: coffee-script
	    global: yes
	
	- name: Remove the globally package "coffee-script".
	  npm:
	    name: coffee-script
	    global: yes
	    state: absent
	
	- name: Install "coffee-script" node.js package from custom registry.
	  npm:
	    name: coffee-script
	    registry: 'http://registry.mysite.com'
	
	- name: Install packages based on package.json.
	  npm:
	    path: /app/location
	
	- name: Update packages based on package.json to their latest version.
	  npm:
	    path: /app/location
	    state: latest
	
	- name: Install packages based on package.json using the npm installed with nvm v0.10.1.
	  npm:
	    path: /app/location
	    executable: /opt/nvm/v0.10.1/bin/npm
	    state: present
	

snippet nsupdate
	EXAMPLES:
	- name: Add or modify ansible.example.org A to 192.168.1.1"
	  nsupdate:
	    key_name: "nsupdate"
	    key_secret: "+bFQtBCta7j2vWkjPkAFtgA=="
	    server: "10.1.1.1"
	    zone: "example.org"
	    record: "ansible"
	    value: "192.168.1.1"
	
	- name: Remove puppet.example.org CNAME
	  nsupdate:
	    key_name: "nsupdate"
	    key_secret: "+bFQtBCta7j2vWkjPkAFtgA=="
	    server: "10.1.1.1"
	    zone: "example.org"
	    record: "puppet"
	    type: "CNAME"
	    state: absent
	
	RETURN VALUES:
	
	
	changed:
	    description: If module has modified record
	    returned: success
	    type: string
	record:
	    description: DNS record
	    returned: success
	    type: string
	    sample: 'ansible'
	ttl:
	    description: DNS record TTL
	    returned: success
	    type: int
	    sample: 86400
	type:
	    description: DNS record type
	    returned: success
	    type: string
	    sample: 'CNAME'
	value:
	    description: DNS record value
	    returned: success
	    type: string
	    sample: '192.168.1.1'
	zone:
	    description: DNS record zone
	    returned: success
	    type: string
	    sample: 'example.org.'
	dns_rc:
	    description: dnspython return code
	    returned: always
	    type: int
	    sample: 4
	dns_rc_str:
	    description: dnspython return code (string representation)
	    returned: always
	    type: string
	    sample: 'REFUSED'
	

snippet nuage_vspk
	EXAMPLES:
	# This can be executed as a single role, with the following vars
	# vars:
	#   auth:
	#     api_username: csproot
	#     api_password: csproot
	#     api_enterprise: csp
	#     api_url: https://10.0.0.10:8443
	#     api_version: v5_0
	#   enterprise_name: Ansible-Enterprise
	#   enterprise_new_name: Ansible-Updated-Enterprise
	#
	# or, for certificate based authentication
	# vars:
	#   auth:
	#     api_username: csproot
	#     api_certificate: /path/to/user-certificate.pem
	#     api_key: /path/to/user-Key.pem
	#     api_enterprise: csp
	#     api_url: https://10.0.0.10:8443
	#     api_version: v5_0
	#   enterprise_name: Ansible-Enterprise
	#   enterprise_new_name: Ansible-Updated-Enterprise
	
	# Creating a new enterprise
	- name: Create Enterprise
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: Enterprise
	    state: present
	    properties:
	      name: "{{ enterprise_name }}-basic"
	  register: nuage_enterprise
	
	# Checking if an Enterprise with the new name already exists
	- name: Check if an Enterprise exists with the new name
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: Enterprise
	    command: find
	    properties:
	      name: "{{ enterprise_new_name }}-basic"
	  ignore_errors: yes
	  register: nuage_check_enterprise
	
	# Updating an enterprise's name
	- name: Update Enterprise name
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: Enterprise
	    id: "{{ nuage_enterprise.id }}"
	    state: present
	    properties:
	      name: "{{ enterprise_new_name }}-basic"
	  when: nuage_check_enterprise | failed
	
	# Creating a User in an Enterprise
	- name: Create admin user
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: User
	    parent_id: "{{ nuage_enterprise.id }}"
	    parent_type: Enterprise
	    state: present
	    match_filter: "userName == 'ansible-admin'"
	    properties:
	      email: "ansible@localhost.local"
	      first_name: "Ansible"
	      last_name: "Admin"
	      password: "ansible-password"
	      user_name: "ansible-admin"
	  register: nuage_user
	
	# Updating password for User
	- name: Update admin password
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: User
	    id: "{{ nuage_user.id }}"
	    command: change_password
	    properties:
	      password: "ansible-new-password"
	  ignore_errors: yes
	
	# Finding a group in an enterprise
	- name: Find Administrators group in Enterprise
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: Group
	    parent_id: "{{ nuage_enterprise.id }}"
	    parent_type: Enterprise
	    command: find
	    properties:
	      name: "Administrators"
	  register: nuage_group
	
	# Assign the user to the group
	- name: Assign admin user to administrators
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: User
	    id: "{{ nuage_user.id }}"
	    parent_id: "{{ nuage_group.id }}"
	    parent_type: Group
	    state: present
	
	# Creating multiple DomainTemplates
	- name: Create multiple DomainTemplates
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: DomainTemplate
	    parent_id: "{{ nuage_enterprise.id }}"
	    parent_type: Enterprise
	    state: present
	    properties:
	      name: "{{ item }}"
	      description: "Created by Ansible"
	  with_items:
	    - "Template-1"
	    - "Template-2"
	
	# Finding all DomainTemplates
	- name: Fetching all DomainTemplates
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: DomainTemplate
	    parent_id: "{{ nuage_enterprise.id }}"
	    parent_type: Enterprise
	    command: find
	  register: nuage_domain_templates
	
	# Deleting all DomainTemplates
	- name: Deleting all found DomainTemplates
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: DomainTemplate
	    state: absent
	    id: "{{ item.ID }}"
	  with_items: "{{ nuage_domain_templates.entities }}"
	  when: nuage_domain_templates.entities is defined
	
	# Unassign user from group
	- name: Unassign admin user to administrators
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: User
	    id: "{{ nuage_user.id }}"
	    parent_id: "{{ nuage_group.id }}"
	    parent_type: Group
	    state: absent
	
	# Deleting an enterprise
	- name: Delete Enterprise
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: Enterprise
	    id: "{{ nuage_enterprise.id }}"
	    state: absent
	
	# Setup an enterprise with Children
	- name: Setup Enterprise and domain structure
	  connection: local
	  nuage_vspk:
	    auth: "{{ nuage_auth }}"
	    type: Enterprise
	    state: present
	    properties:
	      name: "Child-based-Enterprise"
	    children:
	    - type: L2DomainTemplate
	      properties:
	        name: "Unmanaged-Template"
	      children:
	      - type: EgressACLTemplate
	        match_filter: "name == 'Allow All'"
	        properties:
	          name: "Allow All"
	          active: true
	          default_allow_ip: true
	          default_allow_non_ip: true
	          default_install_acl_implicit_rules: true
	          description: "Created by Ansible"
	          priority_type: "TOP"
	      - type: IngressACLTemplate
	        match_filter: "name == 'Allow All'"
	        properties:
	          name: "Allow All"
	          active: true
	          default_allow_ip: true
	          default_allow_non_ip: true
	          description: "Created by Ansible"
	          priority_type: "TOP"
	
	RETURN VALUES:
	
	
	id:
	    description: The id of the entity that was found, created, updated or assigned.
	    returned: On state=present and command=find in case one entity was found.
	    type: string
	    sample: bae07d8d-d29c-4e2b-b6ba-621b4807a333
	entities:
	    description: A list of entities handled. Each element is the to_dict() of the entity.
	    returned: On state=present and find, with only one element in case of state=present or find=one.
	    type: list
	    sample: [{
	        "ID": acabc435-3946-4117-a719-b8895a335830",
	        "assocEntityType": "DOMAIN",
	        "command": "BEGIN_POLICY_CHANGES",
	        "creationDate": 1487515656000,
	        "entityScope": "ENTERPRISE",
	        "externalID": null,
	        "lastUpdatedBy": "8a6f0e20-a4db-4878-ad84-9cc61756cd5e",
	        "lastUpdatedDate": 1487515656000,
	        "owner": "8a6f0e20-a4db-4878-ad84-9cc61756cd5e",
	        "parameters": null,
	        "parentID": "a22fddb9-3da4-4945-bd2e-9d27fe3d62e0",
	        "parentType": "domain",
	        "progress": 0.0,
	        "result": null,
	        "status": "RUNNING"
	        }]
	

snippet oc
	EXAMPLES:
	- name: Create project
	  oc:
	    state: present
	    inline:
	      kind: ProjectRequest
	      metadata:
	        name: ansibletestproject
	      displayName: Ansible Test Project
	      description: This project was created using Ansible
	    token: << redacted >>
	
	- name: Delete a service
	  oc:
	    state: absent
	    name: myservice
	    namespace: mynamespace
	    kind: Service
	    token: << redacted >>
	
	- name: Add project role Admin to a user
	  oc:
	    state: present
	    inline:
	      kind: RoleBinding
	      metadata:
	        name: admin
	        namespace: mynamespace
	      roleRef:
	        name: admin
	      userNames:
	        - "myuser"
	      token: << redacted >>
	
	- name: Obtain an object definition
	  oc:
	   state: present
	   name: myroute
	   namespace: mynamespace
	   kind: Route
	   token: << redacted >>
	
	RETURN VALUES:
	
	
	result:
	  description:
	    The resource that was created, changed, or otherwise determined to be present.
	    In the case of a deletion, this is the response from the delete request.
	  returned: success
	  type: string
	url:
	  description: The URL to the requested resource.
	  returned: success
	  type: string
	method:
	  description: The HTTP method that was used to take action upon the resource
	  returned: success
	  type: string
	...
	

snippet office_365_connector_card
	EXAMPLES:
	- name: Create a simple Connector Card
	  office_365_connector_card:
	    webhook: https://outlook.office.com/webhook/GUID/IncomingWebhook/GUID/GUID
	    text: 'Hello, World!'
	
	- name: Create a Connector Card with the full format
	  office_365_connector_card:
	    webhook: https://outlook.office.com/webhook/GUID/IncomingWebhook/GUID/GUID
	    summary: This is the summary property
	    title: This is the **card's title** property
	    text: This is the **card's text** property. Lorem ipsum dolor sit amet, consectetur
	      adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
	    color: E81123
	    sections:
	    - title: This is the **section's title** property
	      activity_image: http://connectorsdemo.azurewebsites.net/images/MSC12_Oscar_002.jpg
	      activity_title: This is the section's **activityTitle** property
	      activity_subtitle: This is the section's **activitySubtitle** property
	      activity_text: This is the section's **activityText** property.
	      hero_image:
	        image: http://connectorsdemo.azurewebsites.net/images/WIN12_Scene_01.jpg
	        title: This is the image's alternate text
	      text: This is the section's text property. Lorem ipsum dolor sit amet, consectetur
	        adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
	      facts:
	      - name: This is a fact name
	        value: This is a fact value
	      - name: This is a fact name
	        value: This is a fact value
	      - name: This is a fact name
	        value: This is a fact value
	      images:
	      - image: http://connectorsdemo.azurewebsites.net/images/MicrosoftSurface_024_Cafe_OH-06315_VS_R1c.jpg
	        title: This is the image's alternate text
	      - image: http://connectorsdemo.azurewebsites.net/images/WIN12_Scene_01.jpg
	        title: This is the image's alternate text
	      - image: http://connectorsdemo.azurewebsites.net/images/WIN12_Anthony_02.jpg
	        title: This is the image's alternate text
	      actions:
	      - "@type": ActionCard
	        name: Comment
	        inputs:
	        - "@type": TextInput
	          id: comment
	          is_multiline: true
	          title: Input's title property
	        actions:
	        - "@type": HttpPOST
	          name: Save
	          target: http://...
	      - "@type": ActionCard
	        name: Due Date
	        inputs:
	        - "@type": DateInput
	          id: dueDate
	          title: Input's title property
	        actions:
	        - "@type": HttpPOST
	          name: Save
	          target: http://...
	      - "@type": HttpPOST
	        name: Action's name prop.
	        target: http://...
	      - "@type": OpenUri
	        name: Action's name prop
	        targets:
	        - os: default
	          uri: http://...
	    - start_group: true
	      title: This is the title of a **second section**
	      text: This second section is visually separated from the first one by setting its
	        **startGroup** property to true.
	
	RETURN VALUES:
	
	
	

snippet ohai
	EXAMPLES:
	# Retrieve (ohai) data from all Web servers and store in one-file per host
	ansible webservers -m ohai --tree=/tmp/ohaidata
	

snippet omapi_host
	EXAMPLES:
	- name: Remove a host using OMAPI
	  omapi_host:
	    key_name: "defomapi"
	    key: "+bFQtBCta6j2vWkjPkNFtgA=="
	    host: "10.1.1.1"
	    macaddr: "00:66:ab:dd:11:44"
	    state: absent
	
	- name: Add a host using OMAPI
	  omapi_host:
	    key_name: "defomapi"
	    key: "+bFQtBCta6j2vWkjPkNFtgA=="
	    host: "10.98.4.55"
	    macaddr: "44:dd:ab:dd:11:44"
	    name: "server01"
	    ip: "192.168.88.99"
	    ddns: yes
	    statements:
	      - 'filename "pxelinux.0"'
	      - 'next-server 1.1.1.1'
	    state: present
	
	RETURN VALUES:
	
	
	changed:
	    description: If module has modified a host
	    returned: success
	    type: string
	lease:
	    description: dictionary containing host information
	    returned: success
	    type: complex
	    contains:
	        ip-address:
	            description: IP address, if there is.
	            returned: success
	            type: string
	            sample: '192.168.1.5'
	        hardware-address:
	            description: MAC address
	            returned: success
	            type: string
	            sample: '00:11:22:33:44:55'
	        hardware-type:
	            description: hardware type, generally '1'
	            returned: success
	            type: int
	            sample: 1
	        name:
	            description: hostname
	            returned: success
	            type: string
	            sample: 'mydesktop'
	

snippet open_iscsi
	EXAMPLES:
	# perform a discovery on 10.1.2.3 and show available target nodes
	- open_iscsi:
	    show_nodes: yes
	    discover: yes
	    portal: 10.1.2.3
	
	# discover targets on portal and login to the one available
	# (only works if exactly one target is exported to the initiator)
	- open_iscsi:
	    portal: '{{ iscsi_target }}'
	    login: yes
	    discover: yes
	
	# description: connect to the named target, after updating the local
	# persistent database (cache)
	- open_iscsi:
	    login: yes
	    target: 'iqn.1986-03.com.sun:02:f8c1f9e0-c3ec-ec84-c9c9-8bfb0cd5de3d'
	
	# description: discconnect from the cached named target
	- open_iscsi:
	    login: no
	    target: 'iqn.1986-03.com.sun:02:f8c1f9e0-c3ec-ec84-c9c9-8bfb0cd5de3d'
	

snippet openbsd_pkg
	EXAMPLES:
	- name: Make sure nmap is installed
	  openbsd_pkg:
	    name: nmap
	    state: present
	
	- name: Make sure nmap is the latest version
	  openbsd_pkg:
	    name: nmap
	    state: latest
	
	- name: Make sure nmap is not installed
	  openbsd_pkg:
	    name: nmap
	    state: absent
	
	- name: Make sure nmap is installed, build it from source if it is not
	  openbsd_pkg:
	    name: nmap
	    state: present
	    build: yes
	
	- name: Specify a pkg flavour with '--'
	  openbsd_pkg:
	    name: vim--no_x11
	    state: present
	
	- name: Specify the default flavour to avoid ambiguity errors
	  openbsd_pkg:
	    name: vim--
	    state: present
	
	- name: Specify a package branch (requires at least OpenBSD 6.0)
	  openbsd_pkg:
	    name: python%3.5
	    state: present
	
	- name: Update all packages on the system
	  openbsd_pkg:
	    name: '*'
	    state: latest
	
	- name: Purge a package and it's configuration files
	  openbsd_pkg:
	    name: mpd
	    clean: yes
	    state: absent
	
	- name: Quickly remove a package without checking checksums
	  openbsd_pkg:
	    name: qt5
	    quick: yes
	    state: absent
	

snippet opendj_backendprop
	EXAMPLES:
	- name: "Add or update OpenDJ backend properties"
	    action: opendj_backendprop
	            hostname=localhost
	            port=4444
	            username="cn=Directory Manager"
	            password=password
	            backend=userRoot
	            name=index-entry-limit
	            value=5000
	
	RETURN VALUES:
	
	
	

snippet openssl_certificate
	EXAMPLES:
	- name: Generate a Self Signed OpenSSL certificate
	  openssl_certificate:
	    path: /etc/ssl/crt/ansible.com.crt
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	    csr_path: /etc/ssl/csr/ansible.com.csr
	    provider: selfsigned
	
	- name: Generate a Let's Encrypt Certificate
	  openssl_certificate:
	    path: /etc/ssl/crt/ansible.com.crt
	    csr_path: /etc/ssl/csr/ansible.com.csr
	    provider: acme
	    acme_accountkey: /etc/ssl/private/ansible.com.pem
	    acme_challenge_path: /etc/ssl/challenges/ansible.com/
	
	- name: Force (re-)generate a new Let's Encrypt Certificate
	  openssl_certificate:
	    path: /etc/ssl/crt/ansible.com.crt
	    csr_path: /etc/ssl/csr/ansible.com.csr
	    provider: acme
	    acme_accountkey: /etc/ssl/private/ansible.com.pem
	    acme_challenge_path: /etc/ssl/challenges/ansible.com/
	    force: True
	
	# Examples for some checks one could use the assertonly provider for:
	- name: Verify that an existing certificate was issued by the Let's Encrypt CA and is currently still valid
	  openssl_certificate:
	    path: /etc/ssl/crt/example.com.crt
	    provider: assertonly
	    issuer:
	      O: Let's Encrypt
	    has_expired: False
	
	- name: Ensure that a certificate uses a modern signature algorithm (no SHA1, MD5 or DSA)
	  openssl_certificate:
	    path: /etc/ssl/crt/example.com.crt
	    provider: assertonly
	    signature_algorithms:
	      - sha224WithRSAEncryption
	      - sha256WithRSAEncryption
	      - sha384WithRSAEncryption
	      - sha512WithRSAEncryption
	      - sha224WithECDSAEncryption
	      - sha256WithECDSAEncryption
	      - sha384WithECDSAEncryption
	      - sha512WithECDSAEncryption
	
	- name: Ensure that the existing certificate belongs to the specified private key
	  openssl_certificate:
	    path: /etc/ssl/crt/example.com.crt
	    privatekey_path: /etc/ssl/private/example.com.pem
	    provider: assertonly
	
	- name: Ensure that the existing certificate is still valid at the winter solstice 2017
	  openssl_certificate:
	    path: /etc/ssl/crt/example.com.crt
	    provider: assertonly
	    valid_at: 20171221162800Z
	
	- name: Ensure that the existing certificate is still valid 2 weeks (1209600 seconds) from now
	  openssl_certificate:
	    path: /etc/ssl/crt/example.com.crt
	    provider: assertonly
	    valid_in: 1209600
	
	- name: Ensure that the existing certificate is only used for digital signatures and encrypting other keys
	  openssl_certificate:
	    path: /etc/ssl/crt/example.com.crt
	    provider: assertonly
	    key_usage:
	      - digitalSignature
	      - keyEncipherment
	    key_usage_strict: true
	
	- name: Ensure that the existing certificate can be used for client authentication
	  openssl_certificate:
	    path: /etc/ssl/crt/example.com.crt
	    provider: assertonly
	    extended_key_usage:
	      - clientAuth
	
	- name: Ensure that the existing certificate can only be used for client authentication and time stamping
	  openssl_certificate:
	    path: /etc/ssl/crt/example.com.crt
	    provider: assertonly
	    extended_key_usage:
	      - clientAuth
	      - 1.3.6.1.5.5.7.3.8
	    extended_key_usage_strict: true
	
	- name: Ensure that the existing certificate has a certain domain in its subjectAltName
	  openssl_certificate:
	    path: /etc/ssl/crt/example.com.crt
	    provider: assertonly
	    subject_alt_name:
	      - www.example.com
	      - test.example.com
	
	RETURN VALUES:
	
	
	filename:
	    description: Path to the generated Certificate
	    returned: changed or success
	    type: string
	    sample: /etc/ssl/crt/www.ansible.com.crt
	

snippet openssl_csr
	EXAMPLES:
	# Generate an OpenSSL Certificate Signing Request
	- openssl_csr:
	    path: /etc/ssl/csr/www.ansible.com.csr
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	    common_name: www.ansible.com
	
	# Generate an OpenSSL Certificate Signing Request with a
	# passphrase protected private key
	- openssl_csr:
	    path: /etc/ssl/csr/www.ansible.com.csr
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	    privatekey_passphrase: ansible
	    common_name: www.ansible.com
	
	# Generate an OpenSSL Certificate Signing Request with Subject information
	- openssl_csr:
	    path: /etc/ssl/csr/www.ansible.com.csr
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	    country_name: FR
	    organization_name: Ansible
	    email_address: jdoe@ansible.com
	    common_name: www.ansible.com
	
	# Generate an OpenSSL Certificate Signing Request with subjectAltName extension
	- openssl_csr:
	    path: /etc/ssl/csr/www.ansible.com.csr
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	    subject_alt_name: 'DNS:www.ansible.com,DNS:m.ansible.com'
	
	# Force re-generate an OpenSSL Certificate Signing Request
	- openssl_csr:
	    path: /etc/ssl/csr/www.ansible.com.csr
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	    force: True
	    common_name: www.ansible.com
	
	# Generate an OpenSSL Certificate Signing Request with special key usages
	- openssl_csr:
	    path: /etc/ssl/csr/www.ansible.com.csr
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	    common_name: www.ansible.com
	    key_usage:
	      - digitlaSignature
	      - keyAgreement
	    extended_key_usage:
	      - clientAuth
	
	RETURN VALUES:
	
	
	privatekey:
	    description: Path to the TLS/SSL private key the CSR was generated for
	    returned: changed or success
	    type: string
	    sample: /etc/ssl/private/ansible.com.pem
	filename:
	    description: Path to the generated Certificate Signing Request
	    returned: changed or success
	    type: string
	    sample: /etc/ssl/csr/www.ansible.com.csr
	subject:
	    description: A dictionnary of the subject attached to the CSR
	    returned: changed or success
	    type: list
	    sample: {'CN': 'www.ansible.com', 'O': 'Ansible'}
	subjectAltName:
	    description: The alternative names this CSR is valid for
	    returned: changed or success
	    type: list
	    sample: [ 'DNS:www.ansible.com', 'DNS:m.ansible.com' ]
	keyUsage:
	    description: Purpose for which the public key may be used
	    returned: changed or success
	    type: list
	    sample: [ 'digitalSignature', 'keyAgreement' ]
	extendedKeyUsage:
	    description: Additional restriction on the public key purposes
	    returned: changed or success
	    type: list
	    sample: [ 'clientAuth' ]
	

snippet openssl_privatekey
	EXAMPLES:
	# Generate an OpenSSL private key with the default values (4096 bits, RSA)
	- openssl_privatekey:
	    path: /etc/ssl/private/ansible.com.pem
	
	# Generate an OpenSSL private key with the default values (4096 bits, RSA)
	# and a passphrase
	- openssl_privatekey:
	    path: /etc/ssl/private/ansible.com.pem
	    passphrase: ansible
	    cipher: aes256
	
	# Generate an OpenSSL private key with a different size (2048 bits)
	- openssl_privatekey:
	    path: /etc/ssl/private/ansible.com.pem
	    size: 2048
	
	# Force regenerate an OpenSSL private key if it already exists
	- openssl_privatekey:
	    path: /etc/ssl/private/ansible.com.pem
	    force: True
	
	# Generate an OpenSSL private key with a different algorithm (DSA)
	- openssl_privatekey:
	    path: /etc/ssl/private/ansible.com.pem
	    type: DSA
	
	RETURN VALUES:
	
	
	size:
	    description: Size (in bits) of the TLS/SSL private key
	    returned: changed or success
	    type: int
	    sample: 4096
	type:
	    description: Algorithm used to generate the TLS/SSL private key
	    returned: changed or success
	    type: string
	    sample: RSA
	filename:
	    description: Path to the generated TLS/SSL private key file
	    returned: changed or success
	    type: string
	    sample: /etc/ssl/private/ansible.com.pem
	fingerprint:
	    description: The fingerprint of the public key. Fingerprint will be generated for each hashlib.algorithms available.
	                 Requires PyOpenSSL >= 16.0 for meaningful output.
	    returned: changed or success
	    type: dict
	    sample:
	      md5: "84:75:71:72:8d:04:b5:6c:4d:37:6d:66:83:f5:4c:29"
	      sha1: "51:cc:7c:68:5d:eb:41:43:88:7e:1a:ae:c7:f8:24:72:ee:71:f6:10"
	      sha224: "b1:19:a6:6c:14:ac:33:1d:ed:18:50:d3:06:5c:b2:32:91:f1:f1:52:8c:cb:d5:75:e9:f5:9b:46"
	      sha256: "41:ab:c7:cb:d5:5f:30:60:46:99:ac:d4:00:70:cf:a1:76:4f:24:5d:10:24:57:5d:51:6e:09:97:df:2f:de:c7"
	      sha384: "85:39:50:4e:de:d9:19:33:40:70:ae:10:ab:59:24:19:51:c3:a2:e4:0b:1c:b1:6e:dd:b3:0c:d9:9e:6a:46:af:da:18:f8:ef:ae:2e:c0:9a:75:2c:9b:b3:0f:3a:5f:3d"
	      sha512: "fd:ed:5e:39:48:5f:9f:fe:7f:25:06:3f:79:08:cd:ee:a5:e7:b3:3d:13:82:87:1f:84:e1:f5:c7:28:77:53:94:86:56:38:69:f0:d9:35:22:01:1e:a6:60:...:0f:9b"
	

snippet openssl_publickey
	EXAMPLES:
	# Generate an OpenSSL public key in PEM format.
	- openssl_publickey:
	    path: /etc/ssl/public/ansible.com.pem
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	
	# Generate an OpenSSL public key in OpenSSH v2 format.
	- openssl_publickey:
	    path: /etc/ssl/public/ansible.com.pem
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	    format: OpenSSH
	
	# Generate an OpenSSL public key with a passphrase protected
	# private key
	- openssl_publickey:
	    path: /etc/ssl/public/ansible.com.pem
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	    privatekey_passphrase: ansible
	
	# Force regenerate an OpenSSL public key if it already exists
	- openssl_publickey:
	    path: /etc/ssl/public/ansible.com.pem
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	    force: True
	
	# Remove an OpenSSL public key
	- openssl_publickey:
	    path: /etc/ssl/public/ansible.com.pem
	    privatekey_path: /etc/ssl/private/ansible.com.pem
	    state: absent
	
	RETURN VALUES:
	
	
	privatekey:
	    description: Path to the TLS/SSL private key the public key was generated from
	    returned: changed or success
	    type: string
	    sample: /etc/ssl/private/ansible.com.pem
	format:
	    description: The format of the public key (PEM, OpenSSH, ...)
	    returned: changed or success
	    type: string
	    sample: PEM
	filename:
	    description: Path to the generated TLS/SSL public key file
	    returned: changed or success
	    type: string
	    sample: /etc/ssl/public/ansible.com.pem
	fingerprint:
	    description: The fingerprint of the public key. Fingerprint will be generated for each hashlib.algorithms available.
	                 Requires PyOpenSSL >= 16.0 for meaningful output.
	    returned: changed or success
	    type: dict
	    sample:
	      md5: "84:75:71:72:8d:04:b5:6c:4d:37:6d:66:83:f5:4c:29"
	      sha1: "51:cc:7c:68:5d:eb:41:43:88:7e:1a:ae:c7:f8:24:72:ee:71:f6:10"
	      sha224: "b1:19:a6:6c:14:ac:33:1d:ed:18:50:d3:06:5c:b2:32:91:f1:f1:52:8c:cb:d5:75:e9:f5:9b:46"
	      sha256: "41:ab:c7:cb:d5:5f:30:60:46:99:ac:d4:00:70:cf:a1:76:4f:24:5d:10:24:57:5d:51:6e:09:97:df:2f:de:c7"
	      sha384: "85:39:50:4e:de:d9:19:33:40:70:ae:10:ab:59:24:19:51:c3:a2:e4:0b:1c:b1:6e:dd:b3:0c:d9:9e:6a:46:af:da:18:f8:ef:ae:2e:c0:9a:75:2c:9b:b3:0f:3a:5f:3d"
	      sha512: "fd:ed:5e:39:48:5f:9f:fe:7f:25:06:3f:79:08:cd:ee:a5:e7:b3:3d:13:82:87:1f:84:e1:f5:c7:28:77:53:94:86:56:38:69:f0:d9:35:22:01:1e:a6:60:...:0f:9b"
	

snippet openvswitch_bridge
	EXAMPLES:
	# Create a bridge named br-int
	- openvswitch_bridge:
	    bridge: br-int
	    state: present
	
	# Create a fake bridge named br-int within br-parent on the VLAN 405
	- openvswitch_bridge:
	    bridge: br-int
	    parent: br-parent
	    vlan: 405
	    state: present
	
	# Create an integration bridge
	- openvswitch_bridge:
	    bridge: br-int
	    state: present
	    fail_mode: secure
	  args:
	    external_ids:
	      bridge-id: br-int
	

snippet openvswitch_db
	EXAMPLES:
	# Increase the maximum idle time to 50 seconds before pruning unused kernel
	# rules.
	- openvswitch_db:
	    table: open_vswitch
	    record: .
	    col: other_config
	    key: max-idle
	    value: 50000
	
	# Disable in band copy
	- openvswitch_db:
	    table: Bridge
	    record: br-int
	    col: other_config
	    key: disable-in-band
	    value: true
	
	# Remove in band key
	- openvswitch_db:
	    state: present
	    table: Bridge
	    record: br-int
	    col: other_config
	    key: disable-in-band
	

snippet openvswitch_port
	EXAMPLES:
	# Creates port eth2 on bridge br-ex
	- openvswitch_port:
	    bridge: br-ex
	    port: eth2
	    state: present
	
	# Creates port eth6
	- openvswitch_port:
	    bridge: bridge-loop
	    port: eth6
	    state: present
	    set: Interface eth6
	
	# Creates port vlan10 with tag 10 on bridge br-ex
	- openvswitch_port:
	    bridge: br-ex
	    port: vlan10
	    tag: 10
	    state: present
	    set: Interface vlan10
	
	# Assign interface id server1-vifeth6 and mac address 00:00:5E:00:53:23
	# to port vifeth6 and setup port to be managed by a controller.
	- openvswitch_port:
	    bridge: br-int
	    port: vifeth6
	    state: present
	  args:
	    external_ids:
	      iface-id: '{{ inventory_hostname }}-vifeth6'
	      attached-mac: '00:00:5E:00:53:23'
	      vm-id: '{{ inventory_hostname }}'
	      iface-status: active
	

snippet openwrt_init
	EXAMPLES:
	# Example action to start service httpd, if not running
	- openwrt_init:
	    state: started
	    name: httpd
	
	# Example action to stop service cron, if running
	- openwrt_init:
	    name: cron
	    state: stopped
	
	# Example action to reload service httpd, in all cases
	- openwrt_init:
	    name: httpd
	    state: reloaded
	
	# Example action to enable service httpd
	- openwrt_init:
	    name: httpd
	    enabled: yes
	
	RETURN VALUES:
	
	
	

snippet opkg
	EXAMPLES:
	- opkg:
	    name: foo
	    state: present
	
	- opkg:
	    name: foo
	    state: present
	    update_cache: yes
	
	- opkg:
	    name: foo
	    state: absent
	
	- opkg:
	    name: foo,bar
	    state: absent
	
	- opkg:
	    name: foo
	    state: present
	    force: overwrite
	

snippet ordnance_config
	EXAMPLES:
	---
	# Note: examples below use the following provider dict to handle
	#       transport and authentication to the node.
	vars:
	  cli:
	    host: "{{ inventory_hostname }}"
	    username: RouterName
	    password: password
	    transport: cli
	
	---
	- name: configure top level configuration
	  ordnance_config:
	    lines: hostname {{ inventory_hostname }}
	    provider: "{{ cli }}"
	
	- name: configure interface settings
	  ordnance_config:
	    lines:
	      - description test interface
	      - ip address 172.31.1.1 255.255.255.0
	    parents: interface Ethernet1
	    provider: "{{ cli }}"
	
	- name: configure bgp router
	  ordnance_config:
	    lines:
	      - neighbor 1.1.1.1 remote-as 1234
	      - network 10.0.0.0/24
	    parents: router bgp 65001
	    provider: "{{ cli }}"
	
	RETURN VALUES:
	
	
	updates:
	  description: The set of commands that will be pushed to the remote device
	  returned: Only when commands is specified.
	  type: list
	  sample: ['...', '...']
	backup_path:
	  description: The full path to the backup file
	  returned: when backup is yes
	  type: string
	  sample: /playbooks/ansible/backup/ordnance_config.2016-07-16@22:28:34
	

snippet ordnance_facts
	EXAMPLES:
	---
	# Note: examples below use the following provider dict to handle
	#       transport and authentication to the node.
	vars:
	  cli:
	    host: "{{ inventory_hostname }}"
	    username: RouterName
	    password: ordnance
	    transport: cli
	
	---
	# Collect all facts from the device
	- ordnance_facts:
	    gather_subset: all
	    provider: "{{ cli }}"
	
	# Collect only the config and default facts
	- ordnance_facts:
	    gather_subset:
	      - config
	    provider: "{{ cli }}"
	
	# Do not collect hardware facts
	- ordnance_facts:
	    gather_subset:
	      - "!hardware"
	    provider: "{{ cli }}"
	
	RETURN VALUES:
	
	
	ansible_net_gather_subset:
	  description: The list of fact subsets collected from the virtual router
	  returned: always
	  type: list
	
	# config
	ansible_net_config:
	  description: The current active config from the virtual router
	  returned: when config is configured
	  type: str
	
	# interfaces
	ansible_net_all_ipv4_addresses:
	  description: All IPv4 addresses configured on the virtual router
	  returned: when interfaces is configured
	  type: list
	ansible_net_all_ipv6_addresses:
	  description: All IPv6 addresses configured on the virtual router
	  returned: when interfaces is configured
	  type: list
	ansible_net_interfaces:
	  description: A hash of all interfaces running on the virtual router
	  returned: when interfaces is configured
	  type: dict
	

snippet os_auth
	EXAMPLES:
	- name: Authenticate to the cloud and retrieve the service catalog
	  os_auth:
	    cloud: rax-dfw
	
	- name: Show service catalog
	  debug:
	    var: service_catalog
	

snippet os_client_config
	EXAMPLES:
	- name: Get list of clouds that do not support security groups
	  os_client_config:
	
	- debug:
	    var: "{{ item }}"
	  with_items: "{{ openstack.clouds | rejectattr('secgroup_source', 'none') | list }}"
	
	- name: Get the information back just about the mordred cloud
	  os_client_config:
	    clouds:
	      - mordred
	

snippet os_flavor_facts
	EXAMPLES:
	# Gather facts about all available flavors
	- os_flavor_facts:
	    cloud: mycloud
	
	# Gather facts for the flavor named "xlarge-flavor"
	- os_flavor_facts:
	    cloud: mycloud
	    name: "xlarge-flavor"
	
	# Get all flavors that have exactly 512 MB of RAM.
	- os_flavor_facts:
	    cloud: mycloud
	    ram: "512"
	
	# Get all flavors that have 1024 MB or more of RAM.
	- os_flavor_facts:
	    cloud: mycloud
	    ram: ">=1024"
	
	# Get a single flavor that has the minimum amount of RAM. Using the 'limit'
	# option will guarantee only a single flavor is returned.
	- os_flavor_facts:
	    cloud: mycloud
	    ram: "MIN"
	    limit: 1
	
	# Get all flavors with 1024 MB of RAM or more, AND exactly 2 virtual CPUs.
	- os_flavor_facts:
	    cloud: mycloud
	    ram: ">=1024"
	    vcpus: "2"
	
	# Get all flavors with 1024 MB of RAM or more, exactly 2 virtual CPUs, and
	# less than 30gb of ephemeral storage.
	- os_flavor_facts:
	    cloud: mycloud
	    ram: ">=1024"
	    vcpus: "2"
	    ephemeral: "<30"
	
	RETURN VALUES:
	
	
	openstack_flavors:
	    description: Dictionary describing the flavors.
	    returned: On success.
	    type: complex
	    contains:
	        id:
	            description: Flavor ID.
	            returned: success
	            type: string
	            sample: "515256b8-7027-4d73-aa54-4e30a4a4a339"
	        name:
	            description: Flavor name.
	            returned: success
	            type: string
	            sample: "tiny"
	        disk:
	            description: Size of local disk, in GB.
	            returned: success
	            type: int
	            sample: 10
	        ephemeral:
	            description: Ephemeral space size, in GB.
	            returned: success
	            type: int
	            sample: 10
	        ram:
	            description: Amount of memory, in MB.
	            returned: success
	            type: int
	            sample: 1024
	        swap:
	            description: Swap space size, in MB.
	            returned: success
	            type: int
	            sample: 100
	        vcpus:
	            description: Number of virtual CPUs.
	            returned: success
	            type: int
	            sample: 2
	        is_public:
	            description: Make flavor accessible to the public.
	            returned: success
	            type: bool
	            sample: true
	

snippet os_floating_ip
	EXAMPLES:
	# Assign a floating IP to the fist interface of `cattle001` from an exiting
	# external network or nova pool. A new floating IP from the first available
	# external network is allocated to the project.
	- os_floating_ip:
	     cloud: dguerri
	     server: cattle001
	
	# Assign a new floating IP to the instance fixed ip `192.0.2.3` of
	# `cattle001`. If a free floating IP is already allocated to the project, it is
	# reused; if not, a new one is created.
	- os_floating_ip:
	     cloud: dguerri
	     state: present
	     reuse: yes
	     server: cattle001
	     network: ext_net
	     fixed_address: 192.0.2.3
	     wait: true
	     timeout: 180
	
	# Assign a new floating IP from the network `ext_net` to the instance fixed
	# ip in network `private_net` of `cattle001`.
	- os_floating_ip:
	     cloud: dguerri
	     state: present
	     server: cattle001
	     network: ext_net
	     nat_destination: private_net
	     wait: true
	     timeout: 180
	
	# Detach a floating IP address from a server
	- os_floating_ip:
	     cloud: dguerri
	     state: absent
	     floating_ip_address: 203.0.113.2
	     server: cattle001
	

snippet os_group
	EXAMPLES:
	# Create a group named "demo"
	- os_group:
	    cloud: mycloud
	    state: present
	    name: demo
	    description: "Demo Group"
	    domain_id: demoid
	
	# Update the description on existing "demo" group
	- os_group:
	    cloud: mycloud
	    state: present
	    name: demo
	    description: "Something else"
	    domain_id: demoid
	
	# Delete group named "demo"
	- os_group:
	    cloud: mycloud
	    state: absent
	    name: demo
	
	RETURN VALUES:
	
	
	group:
	    description: Dictionary describing the group.
	    returned: On success when I(state) is 'present'.
	    type: complex
	    contains:
	        id:
	            description: Unique group ID
	            type: string
	            sample: "ee6156ff04c645f481a6738311aea0b0"
	        name:
	            description: Group name
	            type: string
	            sample: "demo"
	        description:
	            description: Group description
	            type: string
	            sample: "Demo Group"
	        domain_id:
	            description: Domain for the group
	            type: string
	            sample: "default"
	

snippet os_image
	EXAMPLES:
	# Upload an image from a local file named cirros-0.3.0-x86_64-disk.img
	- os_image:
	    auth:
	      auth_url: http://localhost/auth/v2.0
	      username: admin
	      password: passme
	      project_name: admin
	    name: cirros
	    container_format: bare
	    disk_format: qcow2
	    state: present
	    filename: cirros-0.3.0-x86_64-disk.img
	    kernel: cirros-vmlinuz
	    ramdisk: cirros-initrd
	    properties:
	      cpu_arch: x86_64
	      distro: ubuntu
	

snippet os_image_facts
	EXAMPLES:
	- name: Gather facts about a previously created image named image1
	  os_image_facts:
	    auth:
	      auth_url: https://your_api_url.com:9000/v2.0
	      username: user
	      password: password
	      project_name: someproject
	    image: image1
	
	- name: Show openstack facts
	  debug:
	    var: openstack_image
	
	RETURN VALUES:
	
	
	openstack_image:
	    description: has all the openstack facts about the image
	    returned: always, but can be null
	    type: complex
	    contains:
	        id:
	            description: Unique UUID.
	            returned: success
	            type: string
	        name:
	            description: Name given to the image.
	            returned: success
	            type: string
	        status:
	            description: Image status.
	            returned: success
	            type: string
	        created_at:
	            description: Image created at timestamp.
	            returned: success
	            type: string
	        deleted:
	            description: Image deleted flag.
	            returned: success
	            type: boolean
	        container_format:
	            description: Container format of the image.
	            returned: success
	            type: string
	        min_ram:
	            description: Min amount of RAM required for this image.
	            returned: success
	            type: int
	        disk_format:
	            description: Disk format of the image.
	            returned: success
	            type: string
	        updated_at:
	            description: Image updated at timestamp.
	            returned: success
	            type: string
	        properties:
	            description: Additional properties associated with the image.
	            returned: success
	            type: dict
	        min_disk:
	            description: Min amount of disk space required for this image.
	            returned: success
	            type: int
	        protected:
	            description: Image protected flag.
	            returned: success
	            type: boolean
	        checksum:
	            description: Checksum for the image.
	            returned: success
	            type: string
	        owner:
	            description: Owner for the image.
	            returned: success
	            type: string
	        is_public:
	            description: Is public flag of the image.
	            returned: success
	            type: boolean
	        deleted_at:
	            description: Image deleted at timestamp.
	            returned: success
	            type: string
	        size:
	            description: Size of the image.
	            returned: success
	            type: int
	

snippet os_ironic
	EXAMPLES:
	# Enroll a node with some basic properties and driver info
	- os_ironic:
	    cloud: "devstack"
	    driver: "pxe_ipmitool"
	    uuid: "00000000-0000-0000-0000-000000000002"
	    properties:
	      cpus: 2
	      cpu_arch: "x86_64"
	      ram: 8192
	      disk_size: 64
	    nics:
	      - mac: "aa:bb:cc:aa:bb:cc"
	      - mac: "dd:ee:ff:dd:ee:ff"
	    driver_info:
	      power:
	        ipmi_address: "1.2.3.4"
	        ipmi_username: "admin"
	        ipmi_password: "adminpass"
	    chassis_uuid: "00000000-0000-0000-0000-000000000001"
	

snippet os_ironic_inspect
	EXAMPLES:
	# Invoke node inspection
	- os_ironic_inspect:
	    name: "testnode1"
	
	RETURN VALUES:
	
	
	ansible_facts:
	    description: Dictionary of new facts representing discovered properties of the node..
	    returned: changed
	    type: complex
	    contains:
	        memory_mb:
	            description: Amount of node memory as updated in the node properties
	            type: string
	            sample: "1024"
	        cpu_arch:
	            description: Detected CPU architecture type
	            type: string
	            sample: "x86_64"
	        local_gb:
	            description: Total size of local disk storage as updaed in node properties.
	            type: string
	            sample: "10"
	        cpus:
	            description: Count of cpu cores defined in the updated node properties.
	            type: string
	            sample: "1"
	

snippet os_ironic_node
	EXAMPLES:
	# Activate a node by booting an image with a configdrive attached
	os_ironic_node:
	  cloud: "openstack"
	  uuid: "d44666e1-35b3-4f6b-acb0-88ab7052da69"
	  state: present
	  power: present
	  deploy: True
	  maintenance: False
	  config_drive: "http://192.168.1.1/host-configdrive.iso"
	  instance_info:
	    image_source: "http://192.168.1.1/deploy_image.img"
	    image_checksum: "356a6b55ecc511a20c33c946c4e678af"
	    image_disk_format: "qcow"
	  delegate_to: localhost
	

snippet os_keypair
	EXAMPLES:
	# Creates a key pair with the running users public key
	- os_keypair:
	      cloud: mordred
	      state: present
	      name: ansible_key
	      public_key_file: /home/me/.ssh/id_rsa.pub
	
	# Creates a new key pair and the private key returned after the run.
	- os_keypair:
	      cloud: rax-dfw
	      state: present
	      name: ansible_key
	
	RETURN VALUES:
	
	
	id:
	    description: Unique UUID.
	    returned: success
	    type: string
	name:
	    description: Name given to the keypair.
	    returned: success
	    type: string
	public_key:
	    description: The public key value for the keypair.
	    returned: success
	    type: string
	private_key:
	    description: The private key value for the keypair.
	    returned: Only when a keypair is generated for the user (e.g., when creating one
	              and a public key is not specified).
	    type: string
	

snippet os_keystone_domain
	EXAMPLES:
	# Create a domain
	- os_keystone_domain:
	     cloud: mycloud
	     state: present
	     name: demo
	     description: Demo Domain
	
	# Delete a domain
	- os_keystone_domain:
	     cloud: mycloud
	     state: absent
	     name: demo
	
	RETURN VALUES:
	
	
	domain:
	    description: Dictionary describing the domain.
	    returned: On success when I(state) is 'present'
	    type: complex
	    contains:
	        id:
	            description: Domain ID.
	            type: string
	            sample: "474acfe5-be34-494c-b339-50f06aa143e4"
	        name:
	            description: Domain name.
	            type: string
	            sample: "demo"
	        description:
	            description: Domain description.
	            type: string
	            sample: "Demo Domain"
	        enabled:
	            description: Domain description.
	            type: boolean
	            sample: True
	
	id:
	    description: The domain ID.
	    returned: On success when I(state) is 'present'
	    type: string
	    sample: "474acfe5-be34-494c-b339-50f06aa143e4"
	

snippet os_keystone_domain_facts
	EXAMPLES:
	# Gather facts about previously created domain
	- os_keystone_domain_facts:
	    cloud: awesomecloud
	- debug:
	    var: openstack_domains
	
	# Gather facts about a previously created domain by name
	- os_keystone_domain_facts:
	    cloud: awesomecloud
	    name: demodomain
	- debug:
	    var: openstack_domains
	
	# Gather facts about a previously created domain with filter
	- os_keystone_domain_facts:
	    cloud: awesomecloud
	    name: demodomain
	    filters:
	      enabled: False
	- debug:
	    var: openstack_domains
	
	RETURN VALUES:
	
	
	openstack_domains:
	    description: has all the OpenStack facts about domains
	    returned: always, but can be null
	    type: complex
	    contains:
	        id:
	            description: Unique UUID.
	            returned: success
	            type: string
	        name:
	            description: Name given to the domain.
	            returned: success
	            type: string
	        description:
	            description: Description of the domain.
	            returned: success
	            type: string
	        enabled:
	            description: Flag to indicate if the domain is enabled.
	            returned: success
	            type: bool
	

snippet os_keystone_role
	EXAMPLES:
	# Create a role named "demo"
	- os_keystone_role:
	    cloud: mycloud
	    state: present
	    name: demo
	
	# Delete the role named "demo"
	- os_keystone_role:
	    cloud: mycloud
	    state: absent
	    name: demo
	
	RETURN VALUES:
	
	
	role:
	    description: Dictionary describing the role.
	    returned: On success when I(state) is 'present'.
	    type: complex
	    contains:
	        id:
	            description: Unique role ID.
	            type: string
	            sample: "677bfab34c844a01b88a217aa12ec4c2"
	        name:
	            description: Role name.
	            type: string
	            sample: "demo"
	

snippet os_keystone_service
	EXAMPLES:
	# Create a service for glance
	- os_keystone_service:
	     cloud: mycloud
	     state: present
	     name: glance
	     service_type: image
	     description: OpenStack Image Service
	# Delete a service
	- os_keystone_service:
	     cloud: mycloud
	     state: absent
	     name: glance
	     service_type: image
	
	RETURN VALUES:
	
	
	service:
	    description: Dictionary describing the service.
	    returned: On success when I(state) is 'present'
	    type: complex
	    contains:
	        id:
	            description: Service ID.
	            type: string
	            sample: "3292f020780b4d5baf27ff7e1d224c44"
	        name:
	            description: Service name.
	            type: string
	            sample: "glance"
	        service_type:
	            description: Service type.
	            type: string
	            sample: "image"
	        description:
	            description: Service description.
	            type: string
	            sample: "OpenStack Image Service"
	        enabled:
	            description: Service status.
	            type: boolean
	            sample: True
	id:
	    description: The service ID.
	    returned: On success when I(state) is 'present'
	    type: string
	    sample: "3292f020780b4d5baf27ff7e1d224c44"
	

snippet os_network
	EXAMPLES:
	# Create an externally accessible network named 'ext_network'.
	- os_network:
	    cloud: mycloud
	    state: present
	    name: ext_network
	    external: true
	
	RETURN VALUES:
	
	
	network:
	    description: Dictionary describing the network.
	    returned: On success when I(state) is 'present'.
	    type: complex
	    contains:
	        id:
	            description: Network ID.
	            type: string
	            sample: "4bb4f9a5-3bd2-4562-bf6a-d17a6341bb56"
	        name:
	            description: Network name.
	            type: string
	            sample: "ext_network"
	        shared:
	            description: Indicates whether this network is shared across all tenants.
	            type: bool
	            sample: false
	        status:
	            description: Network status.
	            type: string
	            sample: "ACTIVE"
	        mtu:
	            description: The MTU of a network resource.
	            type: integer
	            sample: 0
	        admin_state_up:
	            description: The administrative state of the network.
	            type: bool
	            sample: true
	        port_security_enabled:
	            description: The port security status
	            type: bool
	            sample: true
	        router:external:
	            description: Indicates whether this network is externally accessible.
	            type: bool
	            sample: true
	        tenant_id:
	            description: The tenant ID.
	            type: string
	            sample: "06820f94b9f54b119636be2728d216fc"
	        subnets:
	            description: The associated subnets.
	            type: list
	            sample: []
	        "provider:physical_network":
	            description: The physical network where this network object is implemented.
	            type: string
	            sample: my_vlan_net
	        "provider:network_type":
	            description: The type of physical network that maps to this network resource.
	            type: string
	            sample: vlan
	        "provider:segmentation_id":
	            description: An isolated segment on the physical network.
	            type: string
	            sample: 101
	

snippet os_networks_facts
	EXAMPLES:
	- name: Gather facts about previously created networks
	  os_networks_facts:
	    auth:
	      auth_url: https://your_api_url.com:9000/v2.0
	      username: user
	      password: password
	      project_name: someproject
	
	- name: Show openstack networks
	  debug:
	    var: openstack_networks
	
	- name: Gather facts about a previously created network by name
	  os_networks_facts:
	    auth:
	      auth_url: https://your_api_url.com:9000/v2.0
	      username: user
	      password: password
	      project_name: someproject
	    name:  network1
	
	- name: Show openstack networks
	  debug:
	    var: openstack_networks
	
	- name: Gather facts about a previously created network with filter
	  # Note: name and filters parameters are Not mutually exclusive
	  os_networks_facts:
	    auth:
	      auth_url: https://your_api_url.com:9000/v2.0
	      username: user
	      password: password
	      project_name: someproject
	    filters:
	      tenant_id: 55e2ce24b2a245b09f181bf025724cbe
	      subnets:
	        - 057d4bdf-6d4d-4728-bb0f-5ac45a6f7400
	        - 443d4dc0-91d4-4998-b21c-357d10433483
	
	- name: Show openstack networks
	  debug:
	    var: openstack_networks
	
	RETURN VALUES:
	
	
	openstack_networks:
	    description: has all the openstack facts about the networks
	    returned: always, but can be null
	    type: complex
	    contains:
	        id:
	            description: Unique UUID.
	            returned: success
	            type: string
	        name:
	            description: Name given to the network.
	            returned: success
	            type: string
	        status:
	            description: Network status.
	            returned: success
	            type: string
	        subnets:
	            description: Subnet(s) included in this network.
	            returned: success
	            type: list of strings
	        tenant_id:
	            description: Tenant id associated with this network.
	            returned: success
	            type: string
	        shared:
	            description: Network shared flag.
	            returned: success
	            type: boolean
	

snippet os_nova_flavor
	EXAMPLES:
	- name: "Create 'tiny' flavor with 1024MB of RAM, 1 virtual CPU, and 10GB of local disk, and 10GB of ephemeral."
	  os_nova_flavor:
	    cloud: mycloud
	    state: present
	    name: tiny
	    ram: 1024
	    vcpus: 1
	    disk: 10
	    ephemeral: 10
	
	- name: "Delete 'tiny' flavor"
	  os_nova_flavor:
	    cloud: mycloud
	    state: absent
	    name: tiny
	
	- name: Create flavor with metadata
	  os_nova_flavor:
	    cloud: mycloud
	    state: present
	    name: tiny
	    ram: 1024
	    vcpus: 1
	    disk: 10
	    extra_specs:
	      "quota:disk_read_iops_sec": 5000
	      "aggregate_instance_extra_specs:pinned": false
	
	RETURN VALUES:
	
	
	flavor:
	    description: Dictionary describing the flavor.
	    returned: On success when I(state) is 'present'
	    type: complex
	    contains:
	        id:
	            description: Flavor ID.
	            returned: success
	            type: string
	            sample: "515256b8-7027-4d73-aa54-4e30a4a4a339"
	        name:
	            description: Flavor name.
	            returned: success
	            type: string
	            sample: "tiny"
	        disk:
	            description: Size of local disk, in GB.
	            returned: success
	            type: int
	            sample: 10
	        ephemeral:
	            description: Ephemeral space size, in GB.
	            returned: success
	            type: int
	            sample: 10
	        ram:
	            description: Amount of memory, in MB.
	            returned: success
	            type: int
	            sample: 1024
	        swap:
	            description: Swap space size, in MB.
	            returned: success
	            type: int
	            sample: 100
	        vcpus:
	            description: Number of virtual CPUs.
	            returned: success
	            type: int
	            sample: 2
	        is_public:
	            description: Make flavor accessible to the public.
	            returned: success
	            type: bool
	            sample: true
	        extra_specs:
	            description: Flavor metadata
	            returned: success
	            type: dict
	            sample:
	                "quota:disk_read_iops_sec": 5000
	                "aggregate_instance_extra_specs:pinned": false
	

snippet os_nova_host_aggregate
	EXAMPLES:
	# Create a host aggregate
	- os_nova_host_aggregate:
	    cloud: mycloud
	    state: present
	    name: db_aggregate
	    hosts:
	      - host1
	      - host2
	    metadata:
	      type: dbcluster
	# Delete an aggregate
	- os_nova_host_aggregate:
	    cloud: mycloud
	    state: absent
	    name: db_aggregate
	
	RETURN VALUES:
	
	
	
	

snippet os_object
	EXAMPLES:
	- name: "Create a object named 'fstab' in the 'config' container"
	  os_object:
	    cloud: mordred
	    state: present
	    name: fstab
	    container: config
	    filename: /etc/fstab
	
	- name: Delete a container called config and all of its contents
	  os_object:
	    cloud: rax-iad
	    state: absent
	    container: config
	

snippet os_port
	EXAMPLES:
	# Create a port
	- os_port:
	    state: present
	    auth:
	      auth_url: https://region-b.geo-1.identity.hpcloudsvc.com:35357/v2.0/
	      username: admin
	      password: admin
	      project_name: admin
	    name: port1
	    network: foo
	
	# Create a port with a static IP
	- os_port:
	    state: present
	    auth:
	      auth_url: https://region-b.geo-1.identity.hpcloudsvc.com:35357/v2.0/
	      username: admin
	      password: admin
	      project_name: admin
	    name: port1
	    network: foo
	    fixed_ips:
	      - ip_address: 10.1.0.21
	
	# Create a port with No security groups
	- os_port:
	    state: present
	    auth:
	      auth_url: https://region-b.geo-1.identity.hpcloudsvc.com:35357/v2.0/
	      username: admin
	      password: admin
	      project_name: admin
	    name: port1
	    network: foo
	    no_security_groups: True
	
	# Update the existing 'port1' port with multiple security groups (version 1)
	- os_port:
	    state: present
	    auth:
	      auth_url: https://region-b.geo-1.identity.hpcloudsvc.com:35357/v2.0/d
	      username: admin
	      password: admin
	      project_name: admin
	    name: port1
	    security_groups: 1496e8c7-4918-482a-9172-f4f00fc4a3a5,057d4bdf-6d4d-472...
	
	# Update the existing 'port1' port with multiple security groups (version 2)
	- os_port:
	    state: present
	    auth:
	      auth_url: https://region-b.geo-1.identity.hpcloudsvc.com:35357/v2.0/d
	      username: admin
	      password: admin
	      project_name: admin
	    name: port1
	    security_groups:
	      - 1496e8c7-4918-482a-9172-f4f00fc4a3a5
	      - 057d4bdf-6d4d-472...
	
	RETURN VALUES:
	
	
	id:
	    description: Unique UUID.
	    returned: success
	    type: string
	name:
	    description: Name given to the port.
	    returned: success
	    type: string
	network_id:
	    description: Network ID this port belongs in.
	    returned: success
	    type: string
	security_groups:
	    description: Security group(s) associated with this port.
	    returned: success
	    type: list
	status:
	    description: Port's status.
	    returned: success
	    type: string
	fixed_ips:
	    description: Fixed ip(s) associated with this port.
	    returned: success
	    type: list
	tenant_id:
	    description: Tenant id associated with this port.
	    returned: success
	    type: string
	allowed_address_pairs:
	    description: Allowed address pairs with this port.
	    returned: success
	    type: list
	admin_state_up:
	    description: Admin state up flag for this port.
	    returned: success
	    type: bool
	

snippet os_port_facts
	EXAMPLES:
	# Gather facts about all ports
	- os_port_facts:
	    cloud: mycloud
	
	# Gather facts about a single port
	- os_port_facts:
	    cloud: mycloud
	    port: 6140317d-e676-31e1-8a4a-b1913814a471
	
	# Gather facts about all ports that have device_id set to a specific value
	# and with a status of ACTIVE.
	- os_port_facts:
	    cloud: mycloud
	    filters:
	      device_id: 1038a010-3a37-4a9d-82ea-652f1da36597
	      status: ACTIVE
	
	RETURN VALUES:
	
	
	openstack_ports:
	    description: List of port dictionaries. A subset of the dictionary keys
	                 listed below may be returned, depending on your cloud provider.
	    returned: always, but can be null
	    type: complex
	    contains:
	        admin_state_up:
	            description: The administrative state of the router, which is
	                         up (true) or down (false).
	            returned: success
	            type: boolean
	            sample: true
	        allowed_address_pairs:
	            description: A set of zero or more allowed address pairs. An
	                         address pair consists of an IP address and MAC address.
	            returned: success
	            type: list
	            sample: []
	        "binding:host_id":
	            description: The UUID of the host where the port is allocated.
	            returned: success
	            type: string
	            sample: "b4bd682d-234a-4091-aa5b-4b025a6a7759"
	        "binding:profile":
	            description: A dictionary the enables the application running on
	                         the host to pass and receive VIF port-specific
	                         information to the plug-in.
	            returned: success
	            type: dict
	            sample: {}
	        "binding:vif_details":
	            description: A dictionary that enables the application to pass
	                         information about functions that the Networking API
	                         provides.
	            returned: success
	            type: dict
	            sample: {"port_filter": true}
	        "binding:vif_type":
	            description: The VIF type for the port.
	            returned: success
	            type: dict
	            sample: "ovs"
	        "binding:vnic_type":
	            description: The virtual network interface card (vNIC) type that is
	                         bound to the neutron port.
	            returned: success
	            type: string
	            sample: "normal"
	        device_id:
	            description: The UUID of the device that uses this port.
	            returned: success
	            type: string
	            sample: "b4bd682d-234a-4091-aa5b-4b025a6a7759"
	        device_owner:
	            description: The UUID of the entity that uses this port.
	            returned: success
	            type: string
	            sample: "network:router_interface"
	        dns_assignment:
	            description: DNS assignment information.
	            returned: success
	            type: list
	        dns_name:
	            description: DNS name
	            returned: success
	            type: string
	            sample: ""
	        extra_dhcp_opts:
	            description: A set of zero or more extra DHCP option pairs.
	                         An option pair consists of an option value and name.
	            returned: success
	            type: list
	            sample: []
	        fixed_ips:
	            description: The IP addresses for the port. Includes the IP address
	                         and UUID of the subnet.
	            returned: success
	            type: list
	        id:
	            description: The UUID of the port.
	            returned: success
	            type: string
	            sample: "3ec25c97-7052-4ab8-a8ba-92faf84148de"
	        ip_address:
	            description: The IP address.
	            returned: success
	            type: string
	            sample: "127.0.0.1"
	        mac_address:
	            description: The MAC address.
	            returned: success
	            type: string
	            sample: "00:00:5E:00:53:42"
	        name:
	            description: The port name.
	            returned: success
	            type: string
	            sample: "port_name"
	        network_id:
	            description: The UUID of the attached network.
	            returned: success
	            type: string
	            sample: "dd1ede4f-3952-4131-aab6-3b8902268c7d"
	        port_security_enabled:
	            description: The port security status. The status is enabled (true) or disabled (false).
	            returned: success
	            type: boolean
	            sample: false
	        security_groups:
	            description: The UUIDs of any attached security groups.
	            returned: success
	            type: list
	        status:
	            description: The port status.
	            returned: success
	            type: string
	            sample: "ACTIVE"
	        tenant_id:
	            description: The UUID of the tenant who owns the network.
	            returned: success
	            type: string
	            sample: "51fce036d7984ba6af4f6c849f65ef00"
	

snippet os_project
	EXAMPLES:
	# Create a project
	- os_project:
	    cloud: mycloud
	    state: present
	    name: demoproject
	    description: demodescription
	    domain_id: demoid
	    enabled: True
	
	# Delete a project
	- os_project:
	    cloud: mycloud
	    state: absent
	    name: demoproject
	
	RETURN VALUES:
	
	
	project:
	    description: Dictionary describing the project.
	    returned: On success when I(state) is 'present'
	    type: complex
	    contains:
	        id:
	            description: Project ID
	            type: string
	            sample: "f59382db809c43139982ca4189404650"
	        name:
	            description: Project name
	            type: string
	            sample: "demoproject"
	        description:
	            description: Project description
	            type: string
	            sample: "demodescription"
	        enabled:
	            description: Boolean to indicate if project is enabled
	            type: bool
	            sample: True
	

snippet os_project_facts
	EXAMPLES:
	# Gather facts about previously created projects
	- os_project_facts:
	    cloud: awesomecloud
	- debug:
	    var: openstack_projects
	
	# Gather facts about a previously created project by name
	- os_project_facts:
	    cloud: awesomecloud
	    name: demoproject
	- debug:
	    var: openstack_projects
	
	# Gather facts about a previously created project in a specific domain
	- os_project_facts:
	    cloud: awesomecloud
	    name: demoproject
	    domain: admindomain
	- debug:
	    var: openstack_projects
	
	# Gather facts about a previously created project in a specific domain with filter
	- os_project_facts:
	    cloud: awesomecloud
	    name: demoproject
	    domain: admindomain
	    filters:
	      enabled: False
	- debug:
	    var: openstack_projects
	
	RETURN VALUES:
	
	
	openstack_projects:
	    description: has all the OpenStack facts about projects
	    returned: always, but can be null
	    type: complex
	    contains:
	        id:
	            description: Unique UUID.
	            returned: success
	            type: string
	        name:
	            description: Name given to the project.
	            returned: success
	            type: string
	        description:
	            description: Description of the project
	            returned: success
	            type: string
	        enabled:
	            description: Flag to indicate if the project is enabled
	            returned: success
	            type: bool
	        domain_id:
	            description: Domain ID containing the project (keystone v3 clouds only)
	            returned: success
	            type: bool
	

snippet os_quota
	EXAMPLES:
	# List a Project Quota
	- os_quota:
	    cloud: mycloud
	    name: demoproject
	
	# Set a Project back to the defaults
	- os_quota:
	    cloud: mycloud
	    name: demoproject
	    state: absent
	
	# Update a Project Quota for cores
	- os_quota:
	    cloud: mycloud
	    name: demoproject
	    cores: 100
	
	# Update a Project Quota
	- os_quota:
	    name: demoproject
	    cores: 1000
	    volumes: 20
	    volumes_type:
	      - volume_lvm: 10
	
	# Complete example based on list of projects
	- name: Update quotas
	  os_quota:
	    name: "{{ item.name }}"
	    backup_gigabytes: "{{ item.backup_gigabytes }}"
	    backups: "{{ item.backups }}"
	    cores: "{{ item.cores }}"
	    fixed_ips: "{{ item.fixed_ips }}"
	    floating_ips: "{{ item.floating_ips }}"
	    floatingip: "{{ item.floatingip }}"
	    gigabytes: "{{ item.gigabytes }}"
	    injected_file_size: "{{ item.injected_file_size }}"
	    injected_files: "{{ item.injected_files }}"
	    injected_path_size: "{{ item.injected_path_size }}"
	    instances: "{{ item.instances }}"
	    key_pairs: "{{ item.key_pairs }}"
	    loadbalancer: "{{ item.loadbalancer }}"
	    per_volume_gigabytes: "{{ item.per_volume_gigabytes }}"
	    pool: "{{ item.pool }}"
	    port: "{{ item.port }}"
	    properties: "{{ item.properties }}"
	    ram: "{{ item.ram }}"
	    security_group_rule: "{{ item.security_group_rule }}"
	    security_group: "{{ item.security_group }}"
	    server_group_members: "{{ item.server_group_members }}"
	    server_groups: "{{ item.server_groups }}"
	    snapshots: "{{ item.snapshots }}"
	    volumes: "{{ item.volumes }}"
	    volumes_types:
	      volumes_lvm: "{{ item.volumes_lvm }}"
	    snapshots_types:
	      snapshots_lvm: "{{ item.snapshots_lvm }}"
	    gigabytes_types:
	      gigabytes_lvm: "{{ item.gigabytes_lvm }}"
	  with_items:
	    - "{{ projects }}"
	  when: item.state == "present"
	
	RETURN VALUES:
	
	
	openstack_quotas:
	    description: Dictionary describing the project quota.
	    returned: Regardless if changes where made or note
	    type: complex
	    contains:
	        openstack_quotas: {
	            compute: {
	                cores: 150,
	                fixed_ips: -1,
	                floating_ips: 10,
	                injected_file_content_bytes: 10240,
	                injected_file_path_bytes: 255,
	                injected_files: 5,
	                instances: 100,
	                key_pairs: 100,
	                metadata_items: 128,
	                ram: 153600,
	                security_group_rules: 20,
	                security_groups: 10,
	                server_group_members: 10,
	                server_groups: 10
	            },
	            network: {
	                floatingip: 50,
	                loadbalancer: 10,
	                network: 10,
	                pool: 10,
	                port: 160,
	                rbac_policy: 10,
	                router: 10,
	                security_group: 10,
	                security_group_rule: 100,
	                subnet: 10,
	                subnetpool: -1
	            },
	            volume: {
	                backup_gigabytes: 1000,
	                backups: 10,
	                gigabytes: 1000,
	                gigabytes_lvm: -1,
	                per_volume_gigabytes: -1,
	                snapshots: 10,
	                snapshots_lvm: -1,
	                volumes: 10,
	                volumes_lvm: -1
	            }
	        }
	
	

snippet os_recordset
	EXAMPLES:
	# Create a recordset named "www.example.net."
	- os_recordset:
	    cloud: mycloud
	    state: present
	    zone: example.net.
	    name: www
	    recordset_type: primary
	    records: ['10.1.1.1']
	    description: test recordset
	    ttl: 3600
	
	# Update the TTL on existing "www.example.net." recordset
	- os_recordset:
	    cloud: mycloud
	    state: present
	    zone: example.net.
	    name: www
	    ttl: 7200
	
	# Delete recorset named "www.example.net."
	- os_recordset:
	    cloud: mycloud
	    state: absent
	    zone: example.net.
	    name: www
	
	RETURN VALUES:
	
	
	recordset:
	    description: Dictionary describing the recordset.
	    returned: On success when I(state) is 'present'.
	    type: complex
	    contains:
	        id:
	            description: Unique recordset ID
	            type: string
	            sample: "c1c530a3-3619-46f3-b0f6-236927b2618c"
	        name:
	            description: Recordset name
	            type: string
	            sample: "www.example.net."
	        zone_id:
	            description: Zone id
	            type: string
	            sample: 9508e177-41d8-434e-962c-6fe6ca880af7
	        type:
	            description: Recordset type
	            type: string
	            sample: "A"
	        description:
	            description: Recordset description
	            type: string
	            sample: "Test description"
	        ttl:
	            description: Zone TTL value
	            type: int
	            sample: 3600
	        records:
	            description: Recordset records
	            type: list
	            sample: ['10.0.0.1']
	

snippet os_router
	EXAMPLES:
	# Create a simple router, not attached to a gateway or subnets.
	- os_router:
	    cloud: mycloud
	    state: present
	    name: simple_router
	
	# Create a simple router, not attached to a gateway or subnets for a given project.
	- os_router:
	    cloud: mycloud
	    state: present
	    name: simple_router
	    project: myproj
	
	# Creates a router attached to ext_network1 on an IPv4 subnet and one
	# internal subnet interface.
	- os_router:
	    cloud: mycloud
	    state: present
	    name: router1
	    network: ext_network1
	    external_fixed_ips:
	      - subnet: public-subnet
	        ip: 172.24.4.2
	    interfaces:
	      - private-subnet
	
	# Update existing router1 external gateway to include the IPv6 subnet.
	# Note that since 'interfaces' is not provided, any existing internal
	# interfaces on an existing router will be left intact.
	- os_router:
	    cloud: mycloud
	    state: present
	    name: router1
	    network: ext_network1
	    external_fixed_ips:
	      - subnet: public-subnet
	        ip: 172.24.4.2
	      - subnet: ipv6-public-subnet
	        ip: 2001:db8::3
	
	# Delete router1
	- os_router:
	    cloud: mycloud
	    state: absent
	    name: router1
	
	RETURN VALUES:
	
	
	router:
	    description: Dictionary describing the router.
	    returned: On success when I(state) is 'present'
	    type: complex
	    contains:
	        id:
	            description: Router ID.
	            type: string
	            sample: "474acfe5-be34-494c-b339-50f06aa143e4"
	        name:
	            description: Router name.
	            type: string
	            sample: "router1"
	        admin_state_up:
	            description: Administrative state of the router.
	            type: boolean
	            sample: true
	        status:
	            description: The router status.
	            type: string
	            sample: "ACTIVE"
	        tenant_id:
	            description: The tenant ID.
	            type: string
	            sample: "861174b82b43463c9edc5202aadc60ef"
	        external_gateway_info:
	            description: The external gateway parameters.
	            type: dictionary
	            sample: {
	                      "enable_snat": true,
	                      "external_fixed_ips": [
	                         {
	                           "ip_address": "10.6.6.99",
	                           "subnet_id": "4272cb52-a456-4c20-8f3c-c26024ecfa81"
	                         }
	                       ]
	                    }
	        routes:
	            description: The extra routes configuration for L3 router.
	            type: list
	

snippet os_security_group
	EXAMPLES:
	# Create a security group
	- os_security_group:
	    cloud: mordred
	    state: present
	    name: foo
	    description: security group for foo servers
	
	# Update the existing 'foo' security group description
	- os_security_group:
	    cloud: mordred
	    state: present
	    name: foo
	    description: updated description for the foo security group
	

snippet os_security_group_rule
	EXAMPLES:
	# Create a security group rule
	- os_security_group_rule:
	    cloud: mordred
	    security_group: foo
	    protocol: tcp
	    port_range_min: 80
	    port_range_max: 80
	    remote_ip_prefix: 0.0.0.0/0
	
	# Create a security group rule for ping
	- os_security_group_rule:
	    cloud: mordred
	    security_group: foo
	    protocol: icmp
	    remote_ip_prefix: 0.0.0.0/0
	
	# Another way to create the ping rule
	- os_security_group_rule:
	    cloud: mordred
	    security_group: foo
	    protocol: icmp
	    port_range_min: -1
	    port_range_max: -1
	    remote_ip_prefix: 0.0.0.0/0
	
	# Create a TCP rule covering all ports
	- os_security_group_rule:
	    cloud: mordred
	    security_group: foo
	    protocol: tcp
	    port_range_min: 1
	    port_range_max: 65535
	    remote_ip_prefix: 0.0.0.0/0
	
	# Another way to create the TCP rule above (defaults to all ports)
	- os_security_group_rule:
	    cloud: mordred
	    security_group: foo
	    protocol: tcp
	    remote_ip_prefix: 0.0.0.0/0
	
	# Create a rule for VRRP with numbered protocol 112
	- os_security_group_rule:
	    security_group: loadbalancer_sg
	    protocol: 112
	    remote_group: loadbalancer-node_sg
	
	RETURN VALUES:
	
	
	id:
	  description: Unique rule UUID.
	  type: string
	  returned: state == present
	direction:
	  description: The direction in which the security group rule is applied.
	  type: string
	  sample: 'egress'
	  returned: state == present
	ethertype:
	  description: One of IPv4 or IPv6.
	  type: string
	  sample: 'IPv4'
	  returned: state == present
	port_range_min:
	  description: The minimum port number in the range that is matched by
	               the security group rule.
	  type: int
	  sample: 8000
	  returned: state == present
	port_range_max:
	  description: The maximum port number in the range that is matched by
	               the security group rule.
	  type: int
	  sample: 8000
	  returned: state == present
	protocol:
	  description: The protocol that is matched by the security group rule.
	  type: string
	  sample: 'tcp'
	  returned: state == present
	remote_ip_prefix:
	  description: The remote IP prefix to be associated with this security group rule.
	  type: string
	  sample: '0.0.0.0/0'
	  returned: state == present
	security_group_id:
	  description: The security group ID to associate with this security group rule.
	  type: string
	  returned: state == present
	

snippet os_server
	EXAMPLES:
	- name: Create a new instance and attaches to a network and passes metadata to the instance
	  os_server:
	       state: present
	       auth:
	         auth_url: https://region-b.geo-1.identity.hpcloudsvc.com:35357/v2.0/
	         username: admin
	         password: admin
	         project_name: admin
	       name: vm1
	       image: 4f905f38-e52a-43d2-b6ec-754a13ffb529
	       key_name: ansible_key
	       timeout: 200
	       flavor: 4
	       nics:
	         - net-id: 34605f38-e52a-25d2-b6ec-754a13ffb723
	         - net-name: another_network
	       meta:
	         hostname: test1
	         group: uge_master
	
	# Create a new instance in HP Cloud AE1 region availability zone az2 and
	# automatically assigns a floating IP
	- name: launch a compute instance
	  hosts: localhost
	  tasks:
	    - name: launch an instance
	      os_server:
	        state: present
	        auth:
	          auth_url: https://region-b.geo-1.identity.hpcloudsvc.com:35357/v2.0/
	          username: username
	          password: Equality7-2521
	          project_name: username-project1
	        name: vm1
	        region_name: region-b.geo-1
	        availability_zone: az2
	        image: 9302692b-b787-4b52-a3a6-daebb79cb498
	        key_name: test
	        timeout: 200
	        flavor: 101
	        security_groups: default
	        auto_ip: yes
	
	# Create a new instance in named cloud mordred availability zone az2
	# and assigns a pre-known floating IP
	- name: launch a compute instance
	  hosts: localhost
	  tasks:
	    - name: launch an instance
	      os_server:
	        state: present
	        cloud: mordred
	        name: vm1
	        availability_zone: az2
	        image: 9302692b-b787-4b52-a3a6-daebb79cb498
	        key_name: test
	        timeout: 200
	        flavor: 101
	        floating_ips:
	          - 12.34.56.79
	
	# Create a new instance with 4G of RAM on Ubuntu Trusty, ignoring
	# deprecated images
	- name: launch a compute instance
	  hosts: localhost
	  tasks:
	    - name: launch an instance
	      os_server:
	        name: vm1
	        state: present
	        cloud: mordred
	        region_name: region-b.geo-1
	        image: Ubuntu Server 14.04
	        image_exclude: deprecated
	        flavor_ram: 4096
	
	# Create a new instance with 4G of RAM on Ubuntu Trusty on a Performance node
	- name: launch a compute instance
	  hosts: localhost
	  tasks:
	    - name: launch an instance
	      os_server:
	        name: vm1
	        cloud: rax-dfw
	        state: present
	        image: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
	        flavor_ram: 4096
	        flavor_include: Performance
	
	# Creates a new instance and attaches to multiple network
	- name: launch a compute instance
	  hosts: localhost
	  tasks:
	    - name: launch an instance with a string
	      os_server:
	        auth:
	           auth_url: https://region-b.geo-1.identity.hpcloudsvc.com:35357/v2.0/
	           username: admin
	           password: admin
	           project_name: admin
	        name: vm1
	        image: 4f905f38-e52a-43d2-b6ec-754a13ffb529
	        key_name: ansible_key
	        timeout: 200
	        flavor: 4
	        nics: "net-id=4cb08b20-62fe-11e5-9d70-feff819cdc9f,net-id=542f0430-62fe-11e5-9d70-feff819cdc9f..."
	
	- name: Creates a new instance and attaches to a network and passes metadata to the instance
	  os_server:
	       state: present
	       auth:
	         auth_url: https://region-b.geo-1.identity.hpcloudsvc.com:35357/v2.0/
	         username: admin
	         password: admin
	         project_name: admin
	       name: vm1
	       image: 4f905f38-e52a-43d2-b6ec-754a13ffb529
	       key_name: ansible_key
	       timeout: 200
	       flavor: 4
	       nics:
	         - net-id: 34605f38-e52a-25d2-b6ec-754a13ffb723
	         - net-name: another_network
	       meta: "hostname=test1,group=uge_master"
	
	- name:  Creates a new instance and attaches to a specific network
	  os_server:
	    state: present
	    auth:
	      auth_url: https://region-b.geo-1.identity.hpcloudsvc.com:35357/v2.0/
	      username: admin
	      password: admin
	      project_name: admin
	    name: vm1
	    image: 4f905f38-e52a-43d2-b6ec-754a13ffb529
	    key_name: ansible_key
	    timeout: 200
	    flavor: 4
	    network: another_network
	
	# Create a new instance with 4G of RAM on a 75G Ubuntu Trusty volume
	- name: launch a compute instance
	  hosts: localhost
	  tasks:
	    - name: launch an instance
	      os_server:
	        name: vm1
	        state: present
	        cloud: mordred
	        region_name: ams01
	        image: Ubuntu Server 14.04
	        flavor_ram: 4096
	        boot_from_volume: True
	        volume_size: 75
	
	# Creates a new instance with 2 volumes attached
	- name: launch a compute instance
	  hosts: localhost
	  tasks:
	    - name: launch an instance
	      os_server:
	        name: vm1
	        state: present
	        cloud: mordred
	        region_name: ams01
	        image: Ubuntu Server 14.04
	        flavor_ram: 4096
	        volumes:
	        - photos
	        - music
	
	# Creates a new instance with provisioning userdata using Cloud-Init
	- name: launch a compute instance
	  hosts: localhost
	  tasks:
	    - name: launch an instance
	      os_server:
	        name: vm1
	        state: present
	        image: "Ubuntu Server 14.04"
	        flavor: "P-1"
	        network: "Production"
	        userdata: |
	          #cloud-config
	          chpasswd:
	            list: |
	              ubuntu:{{ default_password }}
	            expire: False
	          packages:
	            - ansible
	          package_upgrade: true
	
	# Creates a new instance with provisioning userdata using Bash Scripts
	- name: launch a compute instance
	  hosts: localhost
	  tasks:
	    - name: launch an instance
	      os_server:
	        name: vm1
	        state: present
	        image: "Ubuntu Server 14.04"
	        flavor: "P-1"
	        network: "Production"
	        userdata: |
	          {%- raw -%}#!/bin/bash
	          echo "  up ip route add 10.0.0.0/8 via {% endraw -%}{{ intra_router }}{%- raw -%}" >> /etc/network/interfaces.d/eth0.conf
	          echo "  down ip route del 10.0.0.0/8" >> /etc/network/interfaces.d/eth0.conf
	          ifdown eth0 && ifup eth0
	          {% endraw %}
	

snippet os_server_action
	EXAMPLES:
	# Pauses a compute instance
	- os_server_action:
	      action: pause
	      auth:
	        auth_url: https://mycloud.openstack.blueboxgrid.com:5001/v2.0
	        username: admin
	        password: admin
	        project_name: admin
	      server: vm1
	      timeout: 200
	

snippet os_server_facts
	EXAMPLES:
	# Gather facts about all servers named C<web*>:
	- os_server_facts:
	    cloud: rax-dfw
	    server: web*
	- debug:
	    var: openstack_servers
	

snippet os_server_group
	EXAMPLES:
	# Create a server group with 'affinity' policy.
	- os_server_group:
	    state: present
	    auth:
	      auth_url: https://api.cloud.catalyst.net.nz:5000/v2.0
	      username: admin
	      password: admin
	      project_name: admin
	    name: my_server_group
	    policies:
	      - affinity
	
	# Delete 'my_server_group' server group.
	- os_server_group:
	    state: absent
	    auth:
	      auth_url: https://api.cloud.catalyst.net.nz:5000/v2.0
	      username: admin
	      password: admin
	      project_name: admin
	    name: my_server_group
	
	RETURN VALUES:
	
	
	id:
	    description: Unique UUID.
	    returned: success
	    type: string
	name:
	    description: The name of the server group.
	    returned: success
	    type: string
	policies:
	    description: A list of one or more policy names of the server group.
	    returned: success
	    type: list
	members:
	    description: A list of members in the server group.
	    returned: success
	    type: list
	metadata:
	    description: Metadata key and value pairs.
	    returned: success
	    type: dict
	project_id:
	    description: The project ID who owns the server group.
	    returned: success
	    type: string
	user_id:
	    description: The user ID who owns the server group.
	    returned: success
	    type: string
	

snippet os_server_volume
	EXAMPLES:
	# Attaches a volume to a compute host
	- name: attach a volume
	  hosts: localhost
	  tasks:
	  - name: attach volume to host
	    os_server_volume:
	      state: present
	      cloud: mordred
	      server: Mysql-server
	      volume: mysql-data
	      device: /dev/vdb
	

snippet os_stack
	EXAMPLES:
	---
	- name: create stack
	  ignore_errors: True
	  register: stack_create
	  os_stack:
	    name: "{{ stack_name }}"
	    state: present
	    template: "/path/to/my_stack.yaml"
	    environment:
	    - /path/to/resource-registry.yaml
	    - /path/to/environment.yaml
	    parameters:
	        bmc_flavor: m1.medium
	        bmc_image: CentOS
	        key_name: default
	        private_net: "{{ private_net_param }}"
	        node_count: 2
	        name: undercloud
	        image: CentOS
	        my_flavor: m1.large
	        external_net: "{{ external_net_param }}"
	
	RETURN VALUES:
	
	
	id:
	    description: Stack ID.
	    type: string
	    sample: "97a3f543-8136-4570-920e-fd7605c989d6"
	    returned: always
	
	stack:
	    description: stack info
	    type: complex
	    returned: always
	    contains:
	        action:
	            description: Action, could be Create or Update.
	            type: string
	            sample: "CREATE"
	        creation_time:
	            description: Time when the action has been made.
	            type: string
	            sample: "2016-07-05T17:38:12Z"
	        description:
	            description: Description of the Stack provided in the heat template.
	            type: string
	            sample: "HOT template to create a new instance and networks"
	        id:
	            description: Stack ID.
	            type: string
	            sample: "97a3f543-8136-4570-920e-fd7605c989d6"
	        name:
	            description: Name of the Stack
	            type: string
	            sample: "test-stack"
	        identifier:
	            description: Identifier of the current Stack action.
	            type: string
	            sample: "test-stack/97a3f543-8136-4570-920e-fd7605c989d6"
	        links:
	            description: Links to the current Stack.
	            type: list of dict
	            sample: "[{'href': 'http://foo:8004/v1/7f6a/stacks/test-stack/97a3f543-8136-4570-920e-fd7605c989d6']"
	        outputs:
	            description: Output returned by the Stack.
	            type: list of dict
	            sample: "{'description': 'IP address of server1 in private network',
	                        'output_key': 'server1_private_ip',
	                        'output_value': '10.1.10.103'}"
	        parameters:
	            description: Parameters of the current Stack
	            type: dict
	            sample: "{'OS::project_id': '7f6a3a3e01164a4eb4eecb2ab7742101',
	                        'OS::stack_id': '97a3f543-8136-4570-920e-fd7605c989d6',
	                        'OS::stack_name': 'test-stack',
	                        'stack_status': 'CREATE_COMPLETE',
	                        'stack_status_reason': 'Stack CREATE completed successfully',
	                        'status': 'COMPLETE',
	                        'template_description': 'HOT template to create a new instance and networks',
	                        'timeout_mins': 60,
	                        'updated_time': null}"
	

snippet os_subnet
	EXAMPLES:
	# Create a new (or update an existing) subnet on the specified network
	- os_subnet:
	    state: present
	    network_name: network1
	    name: net1subnet
	    cidr: 192.168.0.0/24
	    dns_nameservers:
	       - 8.8.8.7
	       - 8.8.8.8
	    host_routes:
	       - destination: 0.0.0.0/0
	         nexthop: 12.34.56.78
	       - destination: 192.168.0.0/24
	         nexthop: 192.168.0.1
	
	# Delete a subnet
	- os_subnet:
	    state: absent
	    name: net1subnet
	
	# Create an ipv6 stateless subnet
	- os_subnet:
	    state: present
	    name: intv6
	    network_name: internal
	    ip_version: 6
	    cidr: 2db8:1::/64
	    dns_nameservers:
	        - 2001:4860:4860::8888
	        - 2001:4860:4860::8844
	    ipv6_ra_mode: dhcpv6-stateless
	    ipv6_address_mode: dhcpv6-stateless
	

snippet os_subnets_facts
	EXAMPLES:
	- name: Gather facts about previously created subnets
	  os_subnets_facts:
	    auth:
	      auth_url: https://your_api_url.com:9000/v2.0
	      username: user
	      password: password
	      project_name: someproject
	
	- name: Show openstack subnets
	  debug:
	    var: openstack_subnets
	
	- name: Gather facts about a previously created subnet by name
	  os_subnets_facts:
	    auth:
	      auth_url: https://your_api_url.com:9000/v2.0
	      username: user
	      password: password
	      project_name: someproject
	    name: subnet1
	
	- name: Show openstack subnets
	  debug:
	    var: openstack_subnets
	
	- name: Gather facts about a previously created subnet with filter
	  # Note: name and filters parameters are not mutually exclusive
	  os_subnets_facts:
	    auth:
	      auth_url: https://your_api_url.com:9000/v2.0
	      username: user
	      password: password
	      project_name: someproject
	    filters:
	      tenant_id: 55e2ce24b2a245b09f181bf025724cbe
	
	- name: Show openstack subnets
	  debug:
	    var: openstack_subnets
	
	RETURN VALUES:
	
	
	openstack_subnets:
	    description: has all the openstack facts about the subnets
	    returned: always, but can be null
	    type: complex
	    contains:
	        id:
	            description: Unique UUID.
	            returned: success
	            type: string
	        name:
	            description: Name given to the subnet.
	            returned: success
	            type: string
	        network_id:
	            description: Network ID this subnet belongs in.
	            returned: success
	            type: string
	        cidr:
	            description: Subnet's CIDR.
	            returned: success
	            type: string
	        gateway_ip:
	            description: Subnet's gateway ip.
	            returned: success
	            type: string
	        enable_dhcp:
	            description: DHCP enable flag for this subnet.
	            returned: success
	            type: bool
	        ip_version:
	            description: IP version for this subnet.
	            returned: success
	            type: int
	        tenant_id:
	            description: Tenant id associated with this subnet.
	            returned: success
	            type: string
	        dns_nameservers:
	            description: DNS name servers for this subnet.
	            returned: success
	            type: list of strings
	        allocation_pools:
	            description: Allocation pools associated with this subnet.
	            returned: success
	            type: list of dicts
	

snippet os_user
	EXAMPLES:
	# Create a user
	- os_user:
	    cloud: mycloud
	    state: present
	    name: demouser
	    password: secret
	    email: demo@example.com
	    domain: default
	    default_project: demo
	
	# Delete a user
	- os_user:
	    cloud: mycloud
	    state: absent
	    name: demouser
	
	# Create a user but don't update password if user exists
	- os_user:
	    cloud: mycloud
	    state: present
	    name: demouser
	    password: secret
	    update_password: on_create
	    email: demo@example.com
	    domain: default
	    default_project: demo
	
	RETURN VALUES:
	
	
	user:
	    description: Dictionary describing the user.
	    returned: On success when I(state) is 'present'
	    type: complex
	    contains:
	        default_project_id:
	            description: User default project ID. Only present with Keystone >= v3.
	            type: string
	            sample: "4427115787be45f08f0ec22a03bfc735"
	        domain_id:
	            description: User domain ID. Only present with Keystone >= v3.
	            type: string
	            sample: "default"
	        email:
	            description: User email address
	            type: string
	            sample: "demo@example.com"
	        id:
	            description: User ID
	            type: string
	            sample: "f59382db809c43139982ca4189404650"
	        name:
	            description: User name
	            type: string
	            sample: "demouser"
	

snippet os_user_facts
	EXAMPLES:
	# Gather facts about previously created users
	- os_user_facts:
	    cloud: awesomecloud
	- debug:
	    var: openstack_users
	
	# Gather facts about a previously created user by name
	- os_user_facts:
	    cloud: awesomecloud
	    name: demouser
	- debug:
	    var: openstack_users
	
	# Gather facts about a previously created user in a specific domain
	- os_user_facts:
	    cloud: awesomecloud
	    name: demouser
	    domain: admindomain
	- debug:
	    var: openstack_users
	
	# Gather facts about a previously created user in a specific domain with filter
	- os_user_facts:
	    cloud: awesomecloud
	    name: demouser
	    domain: admindomain
	    filters:
	      enabled: False
	- debug:
	    var: openstack_users
	
	RETURN VALUES:
	
	
	openstack_users:
	    description: has all the OpenStack facts about users
	    returned: always, but can be null
	    type: complex
	    contains:
	        id:
	            description: Unique UUID.
	            returned: success
	            type: string
	        name:
	            description: Name given to the user.
	            returned: success
	            type: string
	        enabled:
	            description: Flag to indicate if the user is enabled
	            returned: success
	            type: bool
	        domain_id:
	            description: Domain ID containing the user
	            returned: success
	            type: string
	        default_project_id:
	            description: Default project ID of the user
	            returned: success
	            type: string
	        email:
	            description: Email of the user
	            returned: success
	            type: string
	        username:
	            description: Username of the user
	            returned: success
	            type: string
	

snippet os_user_group
	EXAMPLES:
	# Add the demo user to the demo group
	- os_user_group:
	  cloud: mycloud
	  user: demo
	  group: demo
	

snippet os_user_role
	EXAMPLES:
	# Grant an admin role on the user admin in the project project1
	- os_user_role:
	    cloud: mycloud
	    user: admin
	    role: admin
	    project: project1
	
	# Revoke the admin role from the user barney in the newyork domain
	- os_user_role:
	    cloud: mycloud
	    state: absent
	    user: barney
	    role: admin
	    domain: newyork
	
	RETURN VALUES:
	
	
	#
	

snippet os_volume
	EXAMPLES:
	# Creates a new volume
	- name: create a volume
	  hosts: localhost
	  tasks:
	  - name: create 40g test volume
	    os_volume:
	      state: present
	      cloud: mordred
	      availability_zone: az2
	      size: 40
	      display_name: test_volume
	      scheduler_hints:
	        same_host: 243e8d3c-8f47-4a61-93d6-7215c344b0c0
	

snippet os_zone
	EXAMPLES:
	# Create a zone named "example.net"
	- os_zone:
	    cloud: mycloud
	    state: present
	    name: example.net.
	    zone_type: primary
	    email: test@example.net
	    description: Test zone
	    ttl: 3600
	
	# Update the TTL on existing "example.net." zone
	- os_zone:
	    cloud: mycloud
	    state: present
	    name: example.net.
	    ttl: 7200
	
	# Delete zone named "example.net."
	- os_zone:
	    cloud: mycloud
	    state: absent
	    name: example.net.
	
	RETURN VALUES:
	
	
	zone:
	    description: Dictionary describing the zone.
	    returned: On success when I(state) is 'present'.
	    type: complex
	    contains:
	        id:
	            description: Unique zone ID
	            type: string
	            sample: "c1c530a3-3619-46f3-b0f6-236927b2618c"
	        name:
	            description: Zone name
	            type: string
	            sample: "example.net."
	        type:
	            description: Zone type
	            type: string
	            sample: "PRIMARY"
	        email:
	            description: Zone owner email
	            type: string
	            sample: "test@example.net"
	        description:
	            description: Zone description
	            type: string
	            sample: "Test description"
	        ttl:
	            description: Zone TTL value
	            type: int
	            sample: 3600
	        masters:
	            description: Zone master nameservers
	            type: list
	            sample: []
	

snippet osx_defaults
	EXAMPLES:
	- osx_defaults:
	    domain: com.apple.Safari
	    key: IncludeInternalDebugMenu
	    type: bool
	    value: true
	    state: present
	
	- osx_defaults:
	    domain: NSGlobalDomain
	    key: AppleMeasurementUnits
	    type: string
	    value: Centimeters
	    state: present
	
	- osx_defaults:
	    domain: com.apple.screensaver
	    host: currentHost
	    key: showClock
	    type: int
	    value: 1
	
	- osx_defaults:
	    key: AppleMeasurementUnits
	    type: string
	    value: Centimeters
	
	- osx_defaults:
	    key: AppleLanguages
	    type: array
	    value:
	      - en
	      - nl
	
	- osx_defaults:
	    domain: com.geekchimp.macable
	    key: ExampleKeyToRemove
	    state: absent
	

snippet osx_say
	EXAMPLES:
	- osx_say:
	    msg: '{{ inventory_hostname }} is all done'
	    voice: Zarvox
	  delegate_to: localhost
	

snippet ovh_ip_loadbalancing_backend
	EXAMPLES:
	# Adds or modify the backend '212.1.1.1' to a
	# loadbalancing 'ip-1.1.1.1'
	- ovh_ip_loadbalancing:
	    name: ip-1.1.1.1
	    backend: 212.1.1.1
	    state: present
	    probe: none
	    weight: 8
	    endpoint: ovh-eu
	    application_key: yourkey
	    application_secret: yoursecret
	    consumer_key: yourconsumerkey
	
	# Removes a backend '212.1.1.1' from a loadbalancing 'ip-1.1.1.1'
	- ovh_ip_loadbalancing:
	    name: ip-1.1.1.1
	    backend: 212.1.1.1
	    state: absent
	    endpoint: ovh-eu
	    application_key: yourkey
	    application_secret: yoursecret
	    consumer_key: yourconsumerkey
	
	RETURN VALUES:
	
	
	

snippet pacemaker_cluster
	EXAMPLES:
	---
	- name: Set cluster Online
	  hosts: localhost
	  gather_facts: no
	  tasks:
	    - name: get cluster state
	      pacemaker_cluster: state=online
	
	RETURN VALUES:
	
	
	changed:
	    description: True if the cluster state has changed
	    type: bool
	    returned: always
	out:
	    description: The output of the current state of the cluster. It return a
	                 list of the nodes state.
	    type: string
	    sample: 'out: [["  overcloud-controller-0", " Online"]]}'
	    returned: always
	rc:
	    description: exit code of the module
	    type: bool
	    returned: always
	

snippet package
	EXAMPLES:
	- name: install ntpdate
	  package:
	    name: ntpdate
	    state: present
	
	# This uses a variable as this changes per distribution.
	- name: remove the apache package
	  package:
	    name: "{{ apache }}"
	    state: absent
	

snippet packet_device
	EXAMPLES:
	# All the examples assume that you have your Packet api token in env var PACKET_API_TOKEN.
	# You can also pass it to the auth_token parameter of the module instead.
	
	# Creating devices
	
	- name: create 1 device
	  hosts: localhost
	  tasks:
	  - packet_device:
	      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df
	      hostnames: myserver
	      operating_system: ubuntu_16_04
	      plan: baremetal_0
	      facility: sjc1
	
	# Create the same device and wait until it is in state "active", (when it's
	# ready for other API operations). Fail if the devices in not "active" in
	# 10 minutes.
	
	- name: create device and wait up to 10 minutes for active state
	  hosts: localhost
	  tasks:
	  - packet_device:
	      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df
	      hostnames: myserver
	      operating_system: ubuntu_16_04
	      plan: baremetal_0
	      facility: sjc1
	      state: active
	      wait_timeout: 600
	
	- name: create 3 ubuntu devices called server-01, server-02 and server-03
	  hosts: localhost
	  tasks:
	  - packet_device:
	      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df
	      hostnames: server-%02d
	      count: 3
	      operating_system: ubuntu_16_04
	      plan: baremetal_0
	      facility: sjc1
	
	- name: Create 3 coreos devices with userdata, wait until they get IPs and then wait for SSH
	  hosts: localhost
	  tasks:
	  - name: create 3 devices and register their facts
	    packet_device:
	      hostnames: [coreos-one, coreos-two, coreos-three]
	      operating_system: coreos_stable
	      plan: baremetal_0
	      facility: ewr1
	      locked: true
	      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df
	      wait_for_public_IPv: 4
	      user_data: |
	        #cloud-config
	        ssh_authorized_keys:
	          - {{ lookup('file', 'my_packet_sshkey') }}
	        coreos:
	          etcd:
	            discovery: https://discovery.etcd.io/6a28e078895c5ec737174db2419bb2f3
	            addr: $private_ipv4:4001
	            peer-addr: $private_ipv4:7001
	          fleet:
	            public-ip: $private_ipv4
	          units:
	            - name: etcd.service
	              command: start
	            - name: fleet.service
	              command: start
	    register: newhosts
	
	  - name: wait for ssh
	    wait_for:
	      delay: 1
	      host: "{{ item.public_ipv4 }}"
	      port: 22
	      state: started
	      timeout: 500
	    with_items: "{{ newhosts.devices }}"
	
	
	# Other states of devices
	
	- name: remove 3 devices by uuid
	  hosts: localhost
	  tasks:
	  - packet_device:
	      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df
	      state: absent
	      device_ids:
	        - 1fb4faf8-a638-4ac7-8f47-86fe514c30d8
	        - 2eb4faf8-a638-4ac7-8f47-86fe514c3043
	        - 6bb4faf8-a638-4ac7-8f47-86fe514c301f
	
	RETURN VALUES:
	
	
	changed:
	    description: True if a device was altered in any way (created, modified or removed)
	    type: bool
	    sample: True
	    returned: success
	
	devices:
	    description: Information about each device that was processed
	    type: list
	    sample: '[{"hostname": "my-server.com", "id": "2a5122b9-c323-4d5c-b53c-9ad3f54273e7",
	               "public_ipv4": "147.229.15.12", "private-ipv4": "10.0.15.12",
	               "tags": [], "locked": false, "state": "provisioning",
	               "public_ipv6": ""2604:1380:2:5200::3"}]'
	    returned: success
	

snippet packet_sshkey
	EXAMPLES:
	# All the examples assume that you have your Packet API token in env var PACKET_API_TOKEN.
	# You can also pass the api token in module param auth_token.
	
	- name: create sshkey from string
	  hosts: localhost
	  tasks:
	    packet_sshkey:
	      key: "{{ lookup('file', 'my_packet_sshkey.pub') }}"
	
	- name: create sshkey from file
	  hosts: localhost
	  tasks:
	    packet_sshkey:
	      label: key from file
	      key_file: ~/ff.pub
	
	- name: remove sshkey by id
	  hosts: localhost
	  tasks:
	    packet_sshkey:
	      state: absent
	      id: eef49903-7a09-4ca1-af67-4087c29ab5b6
	
	RETURN VALUES:
	
	
	changed:
	    description: True if a sshkey was created or removed.
	    type: bool
	    sample: True
	    returned: always
	sshkeys:
	    description: Information about sshkeys that were createe/removed.
	    type: list
	    sample: [
	        {
	            "fingerprint": "5c:93:74:7c:ed:07:17:62:28:75:79:23:d6:08:93:46",
	            "id": "41d61bd8-3342-428b-a09c-e67bdd18a9b7",
	            "key": "ssh-dss AAAAB3NzaC1kc3MAAACBAIfNT5S0ncP4BBJBYNhNPxFF9lqVhfPeu6SM1LoCocxqDc1AT3zFRi8hjIf6TLZ2AA4FYbcAWxLMhiBxZRVldT9GdBXile78kAK5z3bKTwq152DCqpxwwbaTIggLFhsU8wrfBsPWnDuAxZ0h7mmrCjoLIE3CNLDA/NmV3iB8xMThAAAAFQCStcesSgR1adPORzBxTr7hug92LwAAAIBOProm3Gk+HWedLyE8IfofLaOeRnbBRHAOL4z0SexKkVOnQ/LGN/uDIIPGGBDYTvXgKZT+jbHeulRJ2jKgfSpGKN4JxFQ8uzVH492jEiiUJtT72Ss1dCV4PmyERVIw+f54itihV3z/t25dWgowhb0int8iC/OY3cGodlmYb3wdcQAAAIBuLbB45djZXzUkOTzzcRDIRfhaxo5WipbtEM2B1fuBt2gyrvksPpH/LK6xTjdIIb0CxPu4OCxwJG0aOz5kJoRnOWIXQGhH7VowrJhsqhIc8gN9ErbO5ea8b1L76MNcAotmBDeTUiPw01IJ8MdDxfmcsCslJKgoRKSmQpCwXQtN2g== tomk@hp2",
	            "label": "mynewkey33"
	        }
	    ]
	    returned: always
	

snippet pacman
	EXAMPLES:
	# Install package foo
	- pacman:
	    name: foo
	    state: present
	
	# Upgrade package foo
	- pacman:
	    name: foo
	    state: latest
	    update_cache: yes
	
	# Remove packages foo and bar
	- pacman:
	    name: foo,bar
	    state: absent
	
	# Recursively remove package baz
	- pacman:
	    name: baz
	    state: absent
	    recurse: yes
	
	# Run the equivalent of "pacman -Sy" as a separate step
	- pacman:
	    update_cache: yes
	
	# Run the equivalent of "pacman -Su" as a separate step
	- pacman:
	    upgrade: yes
	
	# Run the equivalent of "pacman -Syu" as a separate step
	- pacman:
	    update_cache: yes
	    upgrade: yes
	
	# Run the equivalent of "pacman -Rdd", force remove package baz
	- pacman:
	    name: baz
	    state: absent
	    force: yes
	
	RETURN VALUES:
	
	
	packages:
	    description: a list of packages that have been changed
	    returned: when upgrade is set to yes
	    type: list
	    sample: ['package', 'other-package']
	

snippet pagerduty
	EXAMPLES:
	# List ongoing maintenance windows using a user/passwd
	- pagerduty:
	    name: companyabc
	    user: example@example.com
	    passwd: password123
	    state: ongoing
	
	# List ongoing maintenance windows using a token
	- pagerduty:
	    name: companyabc
	    token: xxxxxxxxxxxxxx
	    state: ongoing
	
	# Create a 1 hour maintenance window for service FOO123, using a user/passwd
	- pagerduty:
	    name: companyabc
	    user: example@example.com
	    passwd: password123
	    state: running
	    service: FOO123
	
	# Create a 5 minute maintenance window for service FOO123, using a token
	- pagerduty:
	    name: companyabc
	    token: xxxxxxxxxxxxxx
	    hours: 0
	    minutes: 5
	    state: running
	    service: FOO123
	
	
	# Create a 4 hour maintenance window for service FOO123 with the description "deployment".
	- pagerduty:
	    name: companyabc
	    user: example@example.com
	    passwd: password123
	    state: running
	    service: FOO123
	    hours: 4
	    desc: deployment
	  register: pd_window
	
	# Delete the previous maintenance window
	- pagerduty:
	    name: companyabc
	    user: example@example.com
	    passwd: password123
	    state: absent
	    service: '{{ pd_window.result.maintenance_window.id }}'
	

snippet pagerduty_alert
	EXAMPLES:
	# Trigger an incident with just the basic options
	- pagerduty_alert:
	    name: companyabc
	    service_key: xxx
	    api_key: yourapikey
	    state: triggered
	    desc: problem that led to this trigger
	
	# Trigger an incident with more options
	- pagerduty_alert:
	    service_key: xxx
	    api_key: yourapikey
	    state: triggered
	    desc: problem that led to this trigger
	    incident_key: somekey
	    client: Sample Monitoring Service
	    client_url: http://service.example.com
	
	# Acknowledge an incident based on incident_key
	- pagerduty_alert:
	    service_key: xxx
	    api_key: yourapikey
	    state: acknowledged
	    incident_key: somekey
	    desc: "some text for incident's log"
	
	# Resolve an incident based on incident_key
	- pagerduty_alert:
	    service_key: xxx
	    api_key: yourapikey
	    state: resolved
	    incident_key: somekey
	    desc: "some text for incident's log"
	

snippet pam_limits
	EXAMPLES:
	# Add or modify nofile soft limit for the user joe
	- pam_limits:
	    domain: joe
	    limit_type: soft
	    limit_item: nofile
	    value: 64000
	
	# Add or modify fsize hard limit for the user smith. Keep or set the maximal value.
	- pam_limits:
	    domain: smith
	    limit_type: hard
	    limit_item: fsize
	    value: 1000000
	    use_max: yes
	
	# Add or modify memlock, both soft and hard, limit for the user james with a comment.
	- pam_limits:
	    domain: james
	    limit_type: '-'
	    limit_item: memlock
	    value: unlimited
	    comment: unlimited memory lock for james
	

snippet pamd
	EXAMPLES:
	- name: Update pamd rule's control in /etc/pam.d/system-auth
	  pamd:
	    name: system-auth
	    type: auth
	    control: required
	    module_path: pam_faillock.so
	    new_control: sufficient
	
	- name: Update pamd rule's complex control in /etc/pam.d/system-auth
	  pamd:
	    name: system-auth
	    type: session
	    control: '[success=1 default=ignore]'
	    module_path: pam_succeed_if.so
	    new_control: '[success=2 default=ignore]'
	
	- name: Insert a new rule before an existing rule
	  pamd:
	    name: system-auth
	    type: auth
	    control: required
	    module_path: pam_faillock.so
	    new_type: auth
	    new_control: sufficient
	    new_module_path: pam_faillock.so
	    state: before
	
	- name: Insert a new rule pam_wheel.so with argument 'use_uid' after an         existing rule pam_rootok.so
	  pamd:
	    name: su
	    type: auth
	    control: sufficient
	    module_path: pam_rootok.so
	    new_type: auth
	    new_control: required
	    new_module_path: pam_wheel.so
	    module_arguments: 'use_uid'
	    state: after
	
	- name: Remove module arguments from an existing rule
	  pamd:
	    name: system-auth
	    type: auth
	    control: required
	    module_path: pam_faillock.so
	    module_arguments: ''
	    state: updated
	
	- name: Replace all module arguments in an existing rule
	  pamd:
	    name: system-auth
	    type: auth
	    control: required
	    module_path: pam_faillock.so
	    module_arguments: 'preauth
	        silent
	        deny=3
	        unlock_time=604800
	        fail_interval=900'
	    state: updated
	
	- name: Remove specific arguments from a rule
	  pamd:
	    name: system-auth
	    type: session control='[success=1 default=ignore]'
	    module_path: pam_succeed_if.so
	    module_arguments: 'crond quiet'
	    state: args_absent
	
	- name: Ensure specific arguments are present in a rule
	  pamd:
	    name: system-auth
	    type: session
	    control: '[success=1 default=ignore]'
	    module_path: pam_succeed_if.so
	    module_arguments: 'crond quiet'
	    state: args_present
	
	- name: Update specific argument value in a rule
	  pamd:
	    name: system-auth
	    type: auth
	    control: required
	    module_path: pam_faillock.so
	    module_arguments: 'fail_interval=300'
	    state: args_present
	
	RETURN VALUES:
	
	
	change_count:
	    description: How many rules were changed
	    type: int
	    sample: 1
	    returned: success
	    version_added: 2.4
	new_rule:
	    description: The changes to the rule
	    type: string
	    sample: None      None None sha512 shadow try_first_pass use_authtok
	    returned: success
	    version_added: 2.4
	updated_rule_(n):
	    description: The rule(s) that was/were changed
	    type: string
	    sample:
	    - password      sufficient  pam_unix.so sha512 shadow try_first_pass
	      use_authtok
	    returned: success
	    version_added: 2.4
	action:
	    description:
	    - "That action that was taken and is one of: update_rule,
	      insert_before_rule, insert_after_rule, args_present, args_absent,
	      absent."
	    returned: always
	    type: string
	    sample: "update_rule"
	    version_added: 2.4
	dest:
	    description:
	    - "Path to pam.d service that was changed.  This is only available in
	      Ansible version 2.3 and was removed in 2.4."
	    returned: success
	    type: string
	    sample: "/etc/pam.d/system-auth"
	...
	

snippet parted
	EXAMPLES:
	# Create a new primary partition
	- parted:
	    device: /dev/sdb
	    number: 1
	    state: present
	
	# Remove partition number 1
	- parted:
	    device: /dev/sdb
	    number: 1
	    state: absent
	
	# Create a new primary partition with a size of 1GiB
	- parted:
	    device: /dev/sdb
	    number: 1
	    state: present
	    part_end: 1GiB
	
	# Create a new primary partition for LVM
	- parted:
	    device: /dev/sdb
	    number: 2
	    flags: [ lvm ]
	    state: present
	    part_start: 1GiB
	
	# Read device information (always use unit when probing)
	- parted: device=/dev/sdb unit=MiB
	  register: sdb_info
	
	# Remove all partitions from disk
	- parted:
	    device: /dev/sdb
	    number: "{{ item.num }}"
	    state: absent
	  with_items:
	   - "{{ sdb_info.partitions }}"
	
	RETURN VALUES:
	
	
	partition_info:
	  description: Current partition information
	  returned: success
	  type: complex
	  contains:
	    device:
	      description: Generic device information.
	      type: dict
	    partitions:
	      description: List of device partitions.
	      type: list
	    sample: >
	      {
	        "disk": {
	          "dev": "/dev/sdb",
	          "logical_block": 512,
	          "model": "VMware Virtual disk",
	          "physical_block": 512,
	          "size": 5.0,
	          "table": "msdos",
	          "unit": "gib"
	        },
	        "partitions": [{
	          "begin": 0.0,
	          "end": 1.0,
	          "flags": ["boot", "lvm"],
	          "fstype": "",
	          "name": "",
	          "num": 1,
	          "size": 1.0
	        }, {
	          "begin": 1.0,
	          "end": 5.0,
	          "flags": [],
	          "fstype": "",
	          "name": "",
	          "num": 2,
	          "size": 4.0
	        }]
	      }
	

snippet patch
	EXAMPLES:
	- name: Apply patch to one file
	  patch:
	    src: /tmp/index.html.patch
	    dest: /var/www/index.html
	
	- name: Apply patch to multiple files under basedir
	  patch:
	    src: /tmp/customize.patch
	    basedir: /var/www
	    strip: 1
	

snippet pause
	EXAMPLES:
	# Pause for 5 minutes to build app cache.
	- pause:
	    minutes: 5
	
	# Pause until you can verify updates to an application were successful.
	- pause:
	
	# A helpful reminder of what to look out for post-update.
	- pause:
	    prompt: "Make sure org.foo.FooOverload exception is not present"
	
	RETURN VALUES:
	
	
	user_input:
	  description: User input from interactive console
	  returned: if no waiting time set
	  type: string
	  sample: Example user input
	start:
	  description: Time when started pausing
	  returned: always
	  type: string
	  sample: "2017-02-23 14:35:07.298862"
	stop:
	  description: Time when ended pausing
	  returned: always
	  type: string
	  sample: "2017-02-23 14:35:09.552594"
	delta:
	  description: Time paused in seconds
	  returned: always
	  type: string
	  sample: 2
	stdout:
	  description: Output of pause module
	  returned: always
	  type: string
	  sample: Paused for 0.04 minutes
	

snippet pear
	EXAMPLES:
	# Install pear package
	- pear:
	    name: Net_URL2
	    state: present
	
	# Install pecl package
	- pear:
	    name: pecl/json_post
	    state: present
	
	# Upgrade package
	- pear:
	    name: Net_URL2
	    state: latest
	
	# Remove packages
	- pear:
	    name: Net_URL2,pecl/json_post
	    state: absent
	

snippet ping
	EXAMPLES:
	# Test we can logon to 'webservers' and execute python with json lib.
	# ansible webservers -m ping
	
	# Example from an Ansible Playbook
	- ping:
	
	# Induce an exception to see what happens
	- ping:
	    data: crash
	
	RETURN VALUES:
	
	
	ping:
	    description: value provided with the data parameter
	    returned: success
	    type: string
	    sample: pong
	

snippet pingdom
	EXAMPLES:
	# Pause the check with the ID of 12345.
	- pingdom:
	    uid: example@example.com
	    passwd: password123
	    key: apipassword123
	    checkid: 12345
	    state: paused
	
	# Unpause the check with the ID of 12345.
	- pingdom:
	    uid: example@example.com
	    passwd: password123
	    key: apipassword123
	    checkid: 12345
	    state: running
	

snippet pip
	EXAMPLES:
	# Install (Bottle) python package.
	- pip:
	    name: bottle
	
	# Install (Bottle) python package on version 0.11.
	- pip:
	    name: bottle
	    version: 0.11
	
	# Install (MyApp) using one of the remote protocols (bzr+,hg+,git+,svn+). You do not have to supply '-e' option in extra_args.
	- pip:
	    name: svn+http://myrepo/svn/MyApp#egg=MyApp
	
	# Install MyApp using one of the remote protocols (bzr+,hg+,git+).
	- pip:
	    name: git+http://myrepo/app/MyApp
	
	# Install (MyApp) from local tarball
	- pip:
	    name: file:///path/to/MyApp.tar.gz
	
	# Install (Bottle) into the specified (virtualenv), inheriting none of the globally installed modules
	- pip:
	    name: bottle
	    virtualenv: /my_app/venv
	
	# Install (Bottle) into the specified (virtualenv), inheriting globally installed modules
	- pip:
	    name: bottle
	    virtualenv: /my_app/venv
	    virtualenv_site_packages: yes
	
	# Install (Bottle) into the specified (virtualenv), using Python 2.7
	- pip:
	    name: bottle
	    virtualenv: /my_app/venv
	    virtualenv_command: virtualenv-2.7
	
	# Install (Bottle) within a user home directory.
	- pip:
	    name: bottle
	    extra_args: --user
	
	# Install specified python requirements.
	- pip:
	    requirements: /my_app/requirements.txt
	
	# Install specified python requirements in indicated (virtualenv).
	- pip:
	    requirements: /my_app/requirements.txt
	    virtualenv: /my_app/venv
	
	# Install specified python requirements and custom Index URL.
	- pip:
	    requirements: /my_app/requirements.txt
	    extra_args: -i https://example.com/pypi/simple
	
	# Install (Bottle) for Python 3.3 specifically,using the 'pip-3.3' executable.
	- pip:
	    name: bottle
	    executable: pip-3.3
	
	# Install (Bottle), forcing reinstallation if it's already installed
	- pip:
	    name: bottle
	    state: forcereinstall
	
	# Install (Bottle) while ensuring the umask is 0022 (to ensure other users can use it)
	- pip:
	    name: bottle
	    umask: 0022
	  become: True
	

snippet pkg5
	EXAMPLES:
	# Install Vim:
	- pkg5:
	    name: editor/vim
	
	# Remove finger daemon:
	- pkg5:
	    name: service/network/finger
	    state: absent
	
	# Install several packages at once:
	- pkg5:
	    name:
	      - /file/gnu-findutils
	      - /text/gnu-grep
	

snippet pkg5_publisher
	EXAMPLES:
	# Fetch packages for the solaris publisher direct from Oracle:
	- pkg5_publisher:
	    name: solaris
	    sticky: true
	    origin: https://pkg.oracle.com/solaris/support/
	
	# Configure a publisher for locally-produced packages:
	- pkg5_publisher:
	    name: site
	    origin: 'https://pkg.example.com/site/'
	

snippet pkgin
	EXAMPLES:
	# install package foo
	- pkgin:
	    name: foo
	    state: present
	
	# Update database and install "foo" package
	- pkgin:
	    name: foo
	    update_cache: yes
	
	# remove package foo
	- pkgin:
	    name: foo
	    state: absent
	
	# remove packages foo and bar
	- pkgin:
	    name: foo,bar
	    state: absent
	
	# Update repositories as a separate step
	- pkgin:
	    update_cache: yes
	
	# Upgrade main packages (equivalent to C(pkgin upgrade))
	- pkgin:
	    upgrade: yes
	
	# Upgrade all packages (equivalent to C(pkgin full-upgrade))
	- pkgin:
	    full_upgrade: yes
	
	# Force-upgrade all packages (equivalent to C(pkgin -F full-upgrade))
	- pkgin:
	    full_upgrade: yes
	    force: yes
	
	# clean packages cache (equivalent to C(pkgin clean))
	- pkgin:
	    clean: yes
	

snippet pkgng
	EXAMPLES:
	# Install package foo
	- pkgng:
	    name: foo
	    state: present
	
	# Annotate package foo and bar
	- pkgng:
	    name: foo,bar
	    annotation: '+test1=baz,-test2,:test3=foobar'
	
	# Remove packages foo and bar
	- pkgng:
	    name: foo,bar
	    state: absent
	

snippet pkgutil
	EXAMPLES:
	# Install a package
	- pkgutil:
	    name: CSWcommon
	    state: present
	
	# Install a package from a specific repository
	- pkgutil:
	    name: CSWnrpe
	    site: 'ftp://myinternal.repo/opencsw/kiel'
	    state: latest
	

snippet portage
	EXAMPLES:
	# Make sure package foo is installed
	- portage:
	    package: foo
	    state: present
	
	# Make sure package foo is not installed
	- portage:
	    package: foo
	    state: absent
	
	# Update package foo to the "latest" version ( os specific alternative to latest )
	- portage:
	    package: foo
	    update: yes
	
	# Install package foo using PORTAGE_BINHOST setup
	- portage:
	    package: foo
	    getbinpkg: yes
	
	# Re-install world from binary packages only and do not allow any compiling
	- portage:
	    package: '@world'
	    usepkgonly: yes
	
	# Sync repositories and update world
	- portage:
	    package: '@world'
	    update: yes
	    deep: yes
	    sync: yes
	
	# Remove unneeded packages
	- portage:
	    depclean: yes
	
	# Remove package foo if it is not explicitly needed
	- portage:
	    package: foo
	    state: absent
	    depclean: yes
	

snippet portinstall
	EXAMPLES:
	# Install package foo
	- portinstall:
	    name: foo
	    state: present
	
	# Install package security/cyrus-sasl2-saslauthd
	- portinstall:
	    name: security/cyrus-sasl2-saslauthd
	    state: present
	
	# Remove packages foo and bar
	- portinstall:
	    name: foo,bar
	    state: absent
	

snippet postgresql_db
	EXAMPLES:
	# Create a new database with name "acme"
	- postgresql_db:
	    name: acme
	
	# Create a new database with name "acme" and specific encoding and locale
	# settings. If a template different from "template0" is specified, encoding
	# and locale settings must match those of the template.
	- postgresql_db:
	    name: acme
	    encoding: UTF-8
	    lc_collate: de_DE.UTF-8
	    lc_ctype: de_DE.UTF-8
	    template: template0
	
	# Dump an existing database to a file
	- postgresql_db:
	    name: acme
	    state: dump
	    target: /tmp/acme.sql
	
	# Dump an existing database to a file (with compression)
	- postgresql_db:
	    name: acme
	    state: dump
	    target: /tmp/acme.sql.gz
	
	# Dump a single schema for an existing database
	- postgresql_db:
	    name: acme
	    state: dump
	    target: /tmp/acme.sql
	    target_opts: "-n public"
	

snippet postgresql_ext
	EXAMPLES:
	# Adds postgis to the database "acme"
	- postgresql_ext:
	    name: postgis
	    db: acme
	

snippet postgresql_lang
	EXAMPLES:
	# Add language pltclu to database testdb if it doesn't exist:
	- postgresql_lang db=testdb lang=pltclu state=present
	
	# Add language pltclu to database testdb if it doesn't exist and mark it as trusted:
	# Marks the language as trusted if it exists but isn't trusted yet
	# force_trust makes sure that the language will be marked as trusted
	- postgresql_lang:
	    db: testdb
	    lang: pltclu
	    state: present
	    trust: yes
	    force_trust: yes
	
	# Remove language pltclu from database testdb:
	- postgresql_lang:
	    db: testdb
	    lang: pltclu
	    state: absent
	
	# Remove language pltclu from database testdb and remove all dependencies:
	- postgresql_lang:
	    db: testdb
	    lang: pltclu
	    state: absent
	    cascade: yes
	
	# Remove language c from database testdb but ignore errors if something prevents the removal:
	- postgresql_lang:
	    db: testdb
	    lang: pltclu
	    state: absent
	    fail_on_drop: no
	

snippet postgresql_privs
	EXAMPLES:
	# On database "library":
	# GRANT SELECT, INSERT, UPDATE ON TABLE public.books, public.authors
	# TO librarian, reader WITH GRANT OPTION
	- postgresql_privs:
	    database: library
	    state: present
	    privs: SELECT,INSERT,UPDATE
	    type: table
	    objs: books,authors
	    schema: public
	    roles: librarian,reader
	    grant_option: yes
	
	# Same as above leveraging default values:
	- postgresql_privs:
	    db: library
	    privs: SELECT,INSERT,UPDATE
	    objs: books,authors
	    roles: librarian,reader
	    grant_option: yes
	
	# REVOKE GRANT OPTION FOR INSERT ON TABLE books FROM reader
	# Note that role "reader" will be *granted* INSERT privilege itself if this
	# isn't already the case (since state: present).
	- postgresql_privs:
	    db: library
	    state: present
	    priv: INSERT
	    obj: books
	    role: reader
	    grant_option: no
	
	# REVOKE INSERT, UPDATE ON ALL TABLES IN SCHEMA public FROM reader
	# "public" is the default schema. This also works for PostgreSQL 8.x.
	- postgresql_privs:
	    db: library
	    state: absent
	    privs: INSERT,UPDATE
	    objs: ALL_IN_SCHEMA
	    role: reader
	
	# GRANT ALL PRIVILEGES ON SCHEMA public, math TO librarian
	- postgresql_privs:
	    db: library
	    privs: ALL
	    type: schema
	    objs: public,math
	    role: librarian
	
	# GRANT ALL PRIVILEGES ON FUNCTION math.add(int, int) TO librarian, reader
	# Note the separation of arguments with colons.
	- postgresql_privs:
	    db: library
	    privs: ALL
	    type: function
	    obj: add(int:int)
	    schema: math
	    roles: librarian,reader
	
	# GRANT librarian, reader TO alice, bob WITH ADMIN OPTION
	# Note that group role memberships apply cluster-wide and therefore are not
	# restricted to database "library" here.
	- postgresql_privs:
	    db: library
	    type: group
	    objs: librarian,reader
	    roles: alice,bob
	    admin_option: yes
	
	# GRANT ALL PRIVILEGES ON DATABASE library TO librarian
	# Note that here "db: postgres" specifies the database to connect to, not the
	# database to grant privileges on (which is specified via the "objs" param)
	- postgresql_privs:
	    db: postgres
	    privs: ALL
	    type: database
	    obj: library
	    role: librarian
	
	# GRANT ALL PRIVILEGES ON DATABASE library TO librarian
	# If objs is omitted for type "database", it defaults to the database
	# to which the connection is established
	- postgresql_privs:
	    db: library
	    privs: ALL
	    type: database
	    role: librarian
	

snippet postgresql_schema
	EXAMPLES:
	# Create a new schema with name "acme"
	- postgresql_schema:
	    name: acme
	
	# Create a new schema "acme" with a user "bob" who will own it
	- postgresql_schema:
	    name: acme
	    owner: bob
	
	RETURN VALUES:
	
	
	schema:
	    description: Name of the schema
	    returned: success, changed
	    type: string
	    sample: "acme"
	

snippet postgresql_user
	EXAMPLES:
	# Create django user and grant access to database and products table
	- postgresql_user:
	    db: acme
	    name: django
	    password: ceec4eif7ya
	    priv: "CONNECT/products:ALL"
	
	# Create rails user, grant privilege to create other databases and demote rails from super user status
	- postgresql_user:
	    name: rails
	    password: secret
	    role_attr_flags: CREATEDB,NOSUPERUSER
	
	# Remove test user privileges from acme
	- postgresql_user:
	    db: acme
	    name: test
	    priv: "ALL/products:ALL"
	    state: absent
	    fail_on_user: no
	
	# Remove test user from test database and the cluster
	- postgresql_user:
	    db: test
	    name: test
	    priv: ALL
	    state: absent
	
	# Example privileges string format
	# INSERT,UPDATE/table:SELECT/anothertable:ALL
	
	# Remove an existing user's password
	- postgresql_user:
	    db: test
	    user: test
	    password: NULL
	

snippet profitbricks
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# Provisioning example. This will create three servers and enumerate their names.
	
	- profitbricks:
	    datacenter: Tardis One
	    name: web%02d.stackpointcloud.com
	    cores: 4
	    ram: 2048
	    volume_size: 50
	    cpu_family: INTEL_XEON
	    image: a3eae284-a2fe-11e4-b187-5f1f641608c8
	    location: us/las
	    count: 3
	    assign_public_ip: true
	
	# Removing Virtual machines
	
	- profitbricks:
	    datacenter: Tardis One
	    instance_ids:
	      - 'web001.stackpointcloud.com'
	      - 'web002.stackpointcloud.com'
	      - 'web003.stackpointcloud.com'
	    wait_timeout: 500
	    state: absent
	
	# Starting Virtual Machines.
	
	- profitbricks:
	    datacenter: Tardis One
	    instance_ids:
	      - 'web001.stackpointcloud.com'
	      - 'web002.stackpointcloud.com'
	      - 'web003.stackpointcloud.com'
	    wait_timeout: 500
	    state: running
	
	# Stopping Virtual Machines
	
	- profitbricks:
	    datacenter: Tardis One
	    instance_ids:
	      - 'web001.stackpointcloud.com'
	      - 'web002.stackpointcloud.com'
	      - 'web003.stackpointcloud.com'
	    wait_timeout: 500
	    state: stopped
	

snippet profitbricks_datacenter
	EXAMPLES:
	# Create a Datacenter
	- profitbricks_datacenter:
	    datacenter: Tardis One
	    wait_timeout: 500
	
	# Destroy a Datacenter. This will remove all servers, volumes, and other objects in the datacenter.
	- profitbricks_datacenter:
	    datacenter: Tardis One
	    wait_timeout: 500
	    state: absent
	

snippet profitbricks_nic
	EXAMPLES:
	# Create a NIC
	- profitbricks_nic:
	    datacenter: Tardis One
	    server: node002
	    lan: 2
	    wait_timeout: 500
	    state: present
	
	# Remove a NIC
	- profitbricks_nic:
	    datacenter: Tardis One
	    server: node002
	    name: 7341c2454f
	    wait_timeout: 500
	    state: absent
	

snippet profitbricks_volume
	EXAMPLES:
	# Create Multiple Volumes
	
	- profitbricks_volume:
	    datacenter: Tardis One
	    name: vol%02d
	    count: 5
	    auto_increment: yes
	    wait_timeout: 500
	    state: present
	
	# Remove Volumes
	
	- profitbricks_volume:
	    datacenter: Tardis One
	    instance_ids:
	      - 'vol01'
	      - 'vol02'
	    wait_timeout: 500
	    state: absent
	

snippet profitbricks_volume_attachments
	EXAMPLES:
	# Attach a Volume
	
	- profitbricks_volume_attachments:
	    datacenter: Tardis One
	    server: node002
	    volume: vol01
	    wait_timeout: 500
	    state: present
	
	# Detach a Volume
	
	- profitbricks_volume_attachments:
	    datacenter: Tardis One
	    server: node002
	    volume: vol01
	    wait_timeout: 500
	    state: absent
	

snippet proxmox
	EXAMPLES:
	# Create new container with minimal options
	- proxmox:
	    vmid: 100
	    node: uk-mc02
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    password: 123456
	    hostname: example.org
	    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'
	
	# Create new container automatically selecting the next available vmid.
	- proxmox:
	    node: 'uk-mc02'
	    api_user: 'root@pam'
	    api_password: '1q2w3e'
	    api_host: 'node1'
	    password: '123456'
	    hostname: 'example.org'
	    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'
	
	# Create new container with minimal options with force(it will rewrite existing container)
	- proxmox:
	    vmid: 100
	    node: uk-mc02
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    password: 123456
	    hostname: example.org
	    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'
	    force: yes
	
	# Create new container with minimal options use environment PROXMOX_PASSWORD variable(you should export it before)
	- proxmox:
	    vmid: 100
	    node: uk-mc02
	    api_user: root@pam
	    api_host: node1
	    password: 123456
	    hostname: example.org
	    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'
	
	# Create new container with minimal options defining network interface with dhcp
	- proxmox:
	    vmid: 100
	    node: uk-mc02
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    password: 123456
	    hostname: example.org
	    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'
	    netif: '{"net0":"name=eth0,ip=dhcp,ip6=dhcp,bridge=vmbr0"}'
	
	# Create new container with minimal options defining network interface with static ip
	- proxmox:
	    vmid: 100
	    node: uk-mc02
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    password: 123456
	    hostname: example.org
	    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'
	    netif: '{"net0":"name=eth0,gw=192.168.0.1,ip=192.168.0.2/24,bridge=vmbr0"}'
	
	# Create new container with minimal options defining a mount
	- proxmox:
	    vmid: 100
	    node: uk-mc02
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    password: 123456
	    hostname: example.org
	    ostemplate: local:vztmpl/ubuntu-14.04-x86_64.tar.gz'
	    mounts: '{"mp0":"local:8,mp=/mnt/test/"}'
	
	# Create new container with minimal options defining a cpu core limit
	- proxmox:
	    vmid: 100
	    node: uk-mc02
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    password: 123456
	    hostname: example.org
	    ostemplate: local:vztmpl/ubuntu-14.04-x86_64.tar.gz'
	    cores: 2
	
	# Start container
	- proxmox:
	    vmid: 100
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    state: started
	
	# Stop container
	- proxmox:
	    vmid: 100
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    state: stopped
	
	# Stop container with force
	- proxmox:
	    vmid: 100
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    force: yes
	    state: stopped
	
	# Restart container(stopped or mounted container you can't restart)
	- proxmox:
	    vmid: 100
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    state: stopped
	
	# Remove container
	- proxmox:
	    vmid: 100
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    state: absent
	

snippet proxmox_kvm
	EXAMPLES:
	# Create new VM with minimal options
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	
	# Create new VM with minimal options and given vmid
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    vmid        : 100
	
	# Create new VM with two network interface options.
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    net         : '{"net0":"virtio,bridge=vmbr1,rate=200", "net1":"e1000,bridge=vmbr2,"}'
	
	# Create new VM with one network interface, three virto hard disk, 4 cores, and 2 vcpus.
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    net         : '{"net0":"virtio,bridge=vmbr1,rate=200"}'
	    virtio      : '{"virtio0":"VMs_LVM:10", "virtio1":"VMs:2,format=qcow2", "virtio2":"VMs:5,format=raw"}'
	    cores       : 4
	    vcpus       : 2
	
	# Clone VM with only source VM name
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    clone       : spynal   # The VM source
	    name        : zavala  # The target VM name
	    node        : sabrewulf
	    storage     : VMs
	    format      : qcow2
	    timeout     : 500  # Note: The task can take a while. Adapt
	
	# Clone VM with source vmid and target newid and raw format
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    clone       : arbitrary_name
	    vmid        : 108
	    newid       : 152
	    name        : zavala  # The target VM name
	    node        : sabrewulf
	    storage     : LVM_STO
	    format      : raw
	    timeout     : 300  # Note: The task can take a while. Adapt
	
	# Create new VM and lock it for snapashot.
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    lock        : snapshot
	
	# Create new VM and set protection to disable the remove VM and remove disk operations
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    protection  : yes
	
	# Start VM
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    state       : started
	
	# Stop VM
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    state       : stopped
	
	# Stop VM with force
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    state       : stopped
	    force       : yes
	
	# Restart VM
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    state       : restarted
	
	# Remove VM
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    state       : absent
	
	# Get VM current state
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    state       : current
	
	# Update VM configuration
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    cpu         : 8
	    memory      : 16384
	    update      : yes
	
	# Delete QEMU parameters
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    delete      : 'args,template,cpulimit'
	
	# Revert a pending change
	- proxmox_kvm:
	    api_user    : root@pam
	    api_password: secret
	    api_host    : helldorado
	    name        : spynal
	    node        : sabrewulf
	    revert      : 'template,cpulimit'
	
	RETURN VALUES:
	
	
	devices:
	    description: The list of devices created or used.
	    returned: success
	    type: dict
	    sample: '
	      {
	        "ide0": "VMS_LVM:vm-115-disk-1",
	        "ide1": "VMs:115/vm-115-disk-3.raw",
	        "virtio0": "VMS_LVM:vm-115-disk-2",
	        "virtio1": "VMs:115/vm-115-disk-1.qcow2",
	        "virtio2": "VMs:115/vm-115-disk-2.raw"
	      }'
	mac:
	    description: List of mac address created and net[n] attached. Useful when you want to use provision systems like Foreman via PXE.
	    returned: success
	    type: dict
	    sample: '
	      {
	        "net0": "3E:6E:97:D2:31:9F",
	        "net1": "B6:A1:FC:EF:78:A4"
	      }'
	vmid:
	    description: The VM vmid.
	    returned: success
	    type: int
	    sample: 115
	status:
	    description:
	      - The current virtual machine status.
	      - Returned only when C(state=current)
	    returned: success
	    type: dict
	    sample: '{
	      "changed": false,
	      "msg": "VM kropta with vmid = 110 is running",
	      "status": "running"
	    }'
	

snippet proxmox_template
	EXAMPLES:
	# Upload new openvz template with minimal options
	- proxmox_template:
	    node: uk-mc02
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    src: ~/ubuntu-14.04-x86_64.tar.gz
	
	# Upload new openvz template with minimal options use environment PROXMOX_PASSWORD variable(you should export it before)
	- proxmox_template:
	    node: uk-mc02
	    api_user: root@pam
	    api_host: node1
	    src: ~/ubuntu-14.04-x86_64.tar.gz
	
	# Upload new openvz template with all options and force overwrite
	- proxmox_template:
	    node: uk-mc02
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    storage: local
	    content_type: vztmpl
	    src: ~/ubuntu-14.04-x86_64.tar.gz
	    force: yes
	
	# Delete template with minimal options
	- proxmox_template:
	    node: uk-mc02
	    api_user: root@pam
	    api_password: 1q2w3e
	    api_host: node1
	    template: ubuntu-14.04-x86_64.tar.gz
	    state: absent
	

snippet proxysql_backend_servers
	EXAMPLES:
	---
	# This example adds a server, it saves the mysql server config to disk, but
	# avoids loading the mysql server config to runtime (this might be because
	# several servers are being added and the user wants to push the config to
	# runtime in a single batch using the M(proxysql_manage_config) module).  It
	# uses supplied credentials to connect to the proxysql admin interface.
	
	- proxysql_backend_servers:
	    login_user: 'admin'
	    login_password: 'admin'
	    hostname: 'mysql01'
	    state: present
	    load_to_runtime: False
	
	# This example removes a server, saves the mysql server config to disk, and
	# dynamically loads the mysql server config to runtime.  It uses credentials
	# in a supplied config file to connect to the proxysql admin interface.
	
	- proxysql_backend_servers:
	    config_file: '~/proxysql.cnf'
	    hostname: 'mysql02'
	    state: absent
	
	RETURN VALUES:
	
	
	stdout:
	    description: The mysql host modified or removed from proxysql
	    returned: On create/update will return the newly modified host, on delete
	              it will return the deleted record.
	    type: dict
	    "sample": {
	        "changed": true,
	        "hostname": "192.168.52.1",
	        "msg": "Added server to mysql_hosts",
	        "server": {
	            "comment": "",
	            "compression": "0",
	            "hostgroup_id": "1",
	            "hostname": "192.168.52.1",
	            "max_connections": "1000",
	            "max_latency_ms": "0",
	            "max_replication_lag": "0",
	            "port": "3306",
	            "status": "ONLINE",
	            "use_ssl": "0",
	            "weight": "1"
	        },
	        "state": "present"
	    }
	

snippet proxysql_global_variables
	EXAMPLES:
	---
	# This example sets the value of a variable, saves the mysql admin variables
	# config to disk, and dynamically loads the mysql admin variables config to
	# runtime. It uses supplied credentials to connect to the proxysql admin
	# interface.
	
	- proxysql_global_variables:
	    login_user: 'admin'
	    login_password: 'admin'
	    variable: 'mysql-max_connections'
	    value: 4096
	
	# This example gets the value of a variable.  It uses credentials in a
	# supplied config file to connect to the proxysql admin interface.
	
	- proxysql_global_variables:
	    config_file: '~/proxysql.cnf'
	    variable: 'mysql-default_query_delay'
	
	RETURN VALUES:
	
	
	stdout:
	    description: Returns the mysql variable supplied with it's associted value.
	    returned: Returns the current variable and value, or the newly set value
	              for the variable supplied..
	    type: dict
	    "sample": {
	        "changed": false,
	        "msg": "The variable is already been set to the supplied value",
	        "var": {
	            "variable_name": "mysql-poll_timeout",
	            "variable_value": "3000"
	        }
	    }
	

snippet proxysql_manage_config
	EXAMPLES:
	---
	# This example saves the mysql users config from memory to disk. It uses
	# supplied credentials to connect to the proxysql admin interface.
	
	- proxysql_global_variables:
	    login_user: 'admin'
	    login_password: 'admin'
	    action: "SAVE"
	    config_settings: "MYSQL USERS"
	    direction: "FROM"
	    config_layer: "MEMORY"
	
	# This example loads the mysql query rules config from memory to to runtime. It
	# uses supplied credentials to connect to the proxysql admin interface.
	
	- proxysql_global_variables:
	    config_file: '~/proxysql.cnf'
	    action: "LOAD"
	    config_settings: "MYSQL QUERY RULES"
	    direction: "TO"
	    config_layer: "RUNTIME"
	
	RETURN VALUES:
	
	
	stdout:
	    description: Simply reports whether the action reported a change.
	    returned: Currently the returned value with always be changed=True.
	    type: dict
	    "sample": {
	        "changed": true
	    }
	

snippet proxysql_mysql_users
	EXAMPLES:
	---
	# This example adds a user, it saves the mysql user config to disk, but
	# avoids loading the mysql user config to runtime (this might be because
	# several users are being added and the user wants to push the config to
	# runtime in a single batch using the M(proxysql_manage_config) module).  It
	# uses supplied credentials to connect to the proxysql admin interface.
	
	- proxysql_mysql_users:
	    login_user: 'admin'
	    login_password: 'admin'
	    username: 'productiondba'
	    state: present
	    load_to_runtime: False
	
	# This example removes a user, saves the mysql user config to disk, and
	# dynamically loads the mysql user config to runtime.  It uses credentials
	# in a supplied config file to connect to the proxysql admin interface.
	
	- proxysql_mysql_users:
	    config_file: '~/proxysql.cnf'
	    username: 'mysqlboy'
	    state: absent
	
	RETURN VALUES:
	
	
	stdout:
	    description: The mysql user modified or removed from proxysql
	    returned: On create/update will return the newly modified user, on delete
	              it will return the deleted record.
	    type: dict
	    sample:
	        changed: true
	        msg: Added user to mysql_users
	        state: present
	        user:
	            active: 1
	            backend: 1
	            default_hostgroup: 1
	            default_schema: null
	            fast_forward: 0
	            frontend: 1
	            max_connections: 10000
	            password: VALUE_SPECIFIED_IN_NO_LOG_PARAMETER
	            schema_locked: 0
	            transaction_persistent: 0
	            use_ssl: 0
	            username: guest_ro
	        username: guest_ro
	

snippet proxysql_query_rules
	EXAMPLES:
	---
	# This example adds a rule to redirect queries from a specific user to another
	# hostgroup, it saves the mysql query rule config to disk, but avoids loading
	# the mysql query config config to runtime (this might be because several
	# rules are being added and the user wants to push the config to runtime in a
	# single batch using the M(proxysql_manage_config) module). It uses supplied
	# credentials to connect to the proxysql admin interface.
	
	- proxysql_backend_servers:
	    login_user: admin
	    login_password: admin
	    username: 'guest_ro'
	    destination_hostgroup: 1
	    active: 1
	    retries: 3
	    state: present
	    load_to_runtime: False
	
	# This example removes all rules that use the username 'guest_ro', saves the
	# mysql query rule config to disk, and dynamically loads the mysql query rule
	# config to runtime.  It uses credentials in a supplied config file to connect
	# to the proxysql admin interface.
	
	- proxysql_backend_servers:
	    config_file: '~/proxysql.cnf'
	    username: 'guest_ro'
	    state: absent
	    force_delete: true
	
	RETURN VALUES:
	
	
	stdout:
	    description: The mysql user modified or removed from proxysql
	    returned: On create/update will return the newly modified rule, in all
	              other cases will return a list of rules that match the supplied
	              criteria.
	    type: dict
	    "sample": {
	        "changed": true,
	        "msg": "Added rule to mysql_query_rules",
	        "rules": [
	            {
	                "active": "0",
	                "apply": "0",
	                "cache_ttl": null,
	                "client_addr": null,
	                "comment": null,
	                "delay": null,
	                "destination_hostgroup": 1,
	                "digest": null,
	                "error_msg": null,
	                "flagIN": "0",
	                "flagOUT": null,
	                "log": null,
	                "match_digest": null,
	                "match_pattern": null,
	                "mirror_flagOUT": null,
	                "mirror_hostgroup": null,
	                "negate_match_pattern": "0",
	                "proxy_addr": null,
	                "proxy_port": null,
	                "reconnect": null,
	                "replace_pattern": null,
	                "retries": null,
	                "rule_id": "1",
	                "schemaname": null,
	                "timeout": null,
	                "username": "guest_ro"
	            }
	        ],
	        "state": "present"
	    }
	

snippet proxysql_replication_hostgroups
	EXAMPLES:
	---
	# This example adds a replication hostgroup, it saves the mysql server config
	# to disk, but avoids loading the mysql server config to runtime (this might be
	# because several replication hostgroup are being added and the user wants to
	# push the config to runtime in a single batch using the
	# M(proxysql_manage_config) module).  It uses supplied credentials to connect
	# to the proxysql admin interface.
	
	- proxysql_replication_hostgroups:
	    login_user: 'admin'
	    login_password: 'admin'
	    writer_hostgroup: 1
	    reader_hostgroup: 2
	    state: present
	    load_to_runtime: False
	
	# This example removes a replication hostgroup, saves the mysql server config
	# to disk, and dynamically loads the mysql server config to runtime.  It uses
	# credentials in a supplied config file to connect to the proxysql admin
	# interface.
	
	- proxysql_replication_hostgroups:
	    config_file: '~/proxysql.cnf'
	    writer_hostgroup: 3
	    reader_hostgroup: 4
	    state: absent
	
	RETURN VALUES:
	
	
	stdout:
	    description: The replication hostgroup modified or removed from proxysql
	    returned: On create/update will return the newly modified group, on delete
	              it will return the deleted record.
	    type: dict
	    "sample": {
	        "changed": true,
	        "msg": "Added server to mysql_hosts",
	        "repl_group": {
	            "comment": "",
	            "reader_hostgroup": "1",
	            "writer_hostgroup": "2"
	        },
	        "state": "present"
	    }
	

snippet proxysql_scheduler
	EXAMPLES:
	---
	# This example adds a schedule, it saves the scheduler config to disk, but
	# avoids loading the scheduler config to runtime (this might be because
	# several servers are being added and the user wants to push the config to
	# runtime in a single batch using the M(proxysql_manage_config) module).  It
	# uses supplied credentials to connect to the proxysql admin interface.
	
	- proxysql_scheduler:
	    login_user: 'admin'
	    login_password: 'admin'
	    interval_ms: 1000
	    filename: "/opt/maintenance.py"
	    state: present
	    load_to_runtime: False
	
	# This example removes a schedule, saves the scheduler config to disk, and
	# dynamically loads the scheduler config to runtime.  It uses credentials
	# in a supplied config file to connect to the proxysql admin interface.
	
	- proxysql_scheduler:
	    config_file: '~/proxysql.cnf'
	    filename: "/opt/old_script.py"
	    state: absent
	
	RETURN VALUES:
	
	
	stdout:
	    description: The schedule modified or removed from proxysql
	    returned: On create/update will return the newly modified schedule, on
	              delete it will return the deleted record.
	    type: dict
	    "sample": {
	        "changed": true,
	        "filename": "/opt/test.py",
	        "msg": "Added schedule to scheduler",
	        "schedules": [
	            {
	                "active": "1",
	                "arg1": null,
	                "arg2": null,
	                "arg3": null,
	                "arg4": null,
	                "arg5": null,
	                "comment": "",
	                "filename": "/opt/test.py",
	                "id": "1",
	                "interval_ms": "10000"
	            }
	        ],
	        "state": "present"
	    }
	

snippet pubnub_blocks
	EXAMPLES:
	# Event handler create example.
	- name: Create single event handler
	  pubnub_blocks:
	    email: '{{ email }}'
	    password: '{{ password }}'
	    application: '{{ app_name }}'
	    keyset: '{{ keyset_name }}'
	    name: '{{ block_name }}'
	    event_handlers:
	      -
	        src: '{{ path_to_handler_source }}'
	        name: '{{ handler_name }}'
	        event: 'js-before-publish'
	        channels: '{{ handler_channel }}'
	
	# Change event handler trigger event type.
	- name: Change event handler 'event'
	  pubnub_blocks:
	    email: '{{ email }}'
	    password: '{{ password }}'
	    application: '{{ app_name }}'
	    keyset: '{{ keyset_name }}'
	    name: '{{ block_name }}'
	    event_handlers:
	      -
	        name: '{{ handler_name }}'
	        event: 'js-after-publish'
	
	# Stop block and event handlers.
	- name: Stopping block
	  pubnub_blocks:
	    email: '{{ email }}'
	    password: '{{ password }}'
	    application: '{{ app_name }}'
	    keyset: '{{ keyset_name }}'
	    name: '{{ block_name }}'
	    state: stop
	
	# Multiple module calls with cached result passing
	- name: Create '{{ block_name }}' block
	  register: module_cache
	  pubnub_blocks:
	    email: '{{ email }}'
	    password: '{{ password }}'
	    application: '{{ app_name }}'
	    keyset: '{{ keyset_name }}'
	    name: '{{ block_name }}'
	    state: present
	- name: Add '{{ event_handler_1_name }}' handler to '{{ block_name }}'
	  register: module_cache
	  pubnub_blocks:
	    cache: '{{ module_cache }}'
	    application: '{{ app_name }}'
	    keyset: '{{ keyset_name }}'
	    name: '{{ block_name }}'
	    state: present
	    event_handlers:
	      -
	        src: '{{ path_to_handler_1_source }}'
	        name: '{{ event_handler_1_name }}'
	        channels: '{{ event_handler_1_channel }}'
	        event: 'js-before-publish'
	- name: Add '{{ event_handler_2_name }}' handler to '{{ block_name }}'
	  register: module_cache
	  pubnub_blocks:
	    cache: '{{ module_cache }}'
	    application: '{{ app_name }}'
	    keyset: '{{ keyset_name }}'
	    name: '{{ block_name }}'
	    state: present
	    event_handlers:
	      -
	        src: '{{ path_to_handler_2_source }}'
	        name: '{{ event_handler_2_name }}'
	        channels: '{{ event_handler_2_channel }}'
	        event: 'js-before-publish'
	- name: Start '{{ block_name }}' block
	  register: module_cache
	  pubnub_blocks:
	    cache: '{{ module_cache }}'
	    application: '{{ app_name }}'
	    keyset: '{{ keyset_name }}'
	    name: '{{ block_name }}'
	    state: started
	
	RETURN VALUES:
	
	
	module_cache:
	  description: "Cached account information. In case if with single play module
	  used few times it is better to pass cached data to next module calls to speed
	  up process."
	  type: dict
	  returned: always
	

snippet pulp_repo
	EXAMPLES:
	- name: Create a new repo with name 'my_repo'
	  pulp_repo:
	    name: my_repo
	    relative_url: my/repo
	    state: present
	
	- name: Create a repo with a feed and a relative URL
	  pulp_repo:
	    name: my_centos_updates
	    repo_type: rpm
	    feed: http://mirror.centos.org/centos/6/updates/x86_64/
	    relative_url: centos/6/updates
	    url_username: admin
	    url_password: admin
	    force_basic_auth: yes
	    state: present
	
	- name: Remove a repo from the pulp server
	  pulp_repo:
	    name: my_old_repo
	    repo_type: rpm
	    state: absent
	
	RETURN VALUES:
	
	
	repo:
	  description: Name of the repo that the action was performed on.
	  returned: success
	  type: string
	  sample: my_repo
	

snippet puppet
	EXAMPLES:
	# Run puppet agent and fail if anything goes wrong
	- puppet
	
	# Run puppet and timeout in 5 minutes
	- puppet:
	    timeout: 5m
	
	# Run puppet using a different environment
	- puppet:
	    environment: testing
	
	# Run puppet using a specific certname
	- puppet:
	    certname: agent01.example.com
	
	# Run puppet using a specific piece of Puppet code. Has no effect with a
	# puppetmaster.
	- puppet:
	    execute: 'include ::mymodule'
	
	# Run puppet using a specific tags
	- puppet:
	    tags: update,nginx
	

snippet purefa_hg
	EXAMPLES:
	- name: Create new hostgroup
	  purefa_hg:
	    hostgroup: foo
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	
	# This will disconnect all hosts and volumes in the hostgroup
	- name: Delete hostgroup
	  purefa_hg:
	    hostgroup: foo
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: absent
	
	- name: Create host group with hosts and volumes
	  purefa_hg:
	    hostgroup: bar
	    host:
	      - host1
	      - host2
	    volume:
	      - vol1
	      - vol2
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	
	RETURN VALUES:
	
	
	

snippet purefa_host
	EXAMPLES:
	- name: Create new new host
	  purefa_host:
	    host: foo
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	
	- name: Delete host
	  purefa_host:
	    host: foo
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: absent
	
	- name: Make sure host bar is available with wwn ports
	  purefa_host:
	    host: bar
	    protocol: fc
	    wwns:
	    - 00:00:00:00:00:00:00
	    - 11:11:11:11:11:11:11
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	
	- name: Make sure host bar is available with iSCSI ports
	  purefa_host:
	    host: bar
	    protocol: iscsi
	    iqn:
	    - iqn.1994-05.com.redhat:7d366003913
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	
	- name: Map host foo to volume bar
	  purefa_host:
	    host: foo
	    volume: bar
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	
	RETURN VALUES:
	
	
	

snippet purefa_pg
	EXAMPLES:
	- name: Create new protection group
	  purefa_pg:
	    pgroup: foo
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	
	- name: Create new protection group with snapshots disabled
	  purefa_pg:
	    pgroup: foo
	    enabled: false
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	
	- name: Delete protection group
	  purefa_pg:
	    pgroup: foo
	    eradicate: true
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: absent
	
	- name: Create protection group for hostgroups
	  purefa_pg:
	    pgroup: bar
	    hostgroup:
	      - hg1
	      - hg2
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	
	- name: Create protection group for hosts
	  purefa_pg:
	    pgroup: bar
	    host:
	      - host1
	      - host2
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	
	- name: Create protection group for volumes
	  purefa_pg:
	    pgroup: bar
	    volume:
	      - vol1
	      - vol2
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	
	RETURN VALUES:
	
	
	

snippet purefa_snap
	EXAMPLES:
	- name: Create snapshot foo.ansible
	  purefa_snap:
	    name: foo
	    suffix: ansible
	    fa_url: 10.10.10.2
	    fa_api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: present
	
	- name: Create R/W clone foo_clone from snapshot foo.snap
	  purefa_snap:
	    name: foo
	    suffix: snap
	    target: foo_clone
	    fa_url: 10.10.10.2
	    fa_api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: copy
	
	- name: Overwrite existing volume foo_clone with snapshot foo.snap
	  purefa_snap:
	    name: foo
	    suffix: snap
	    target: foo_clone
	    overwrite: true
	    fa_url: 10.10.10.2
	    fa_api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: copy
	
	- name: Delete and eradicate snapshot named foo.snap
	  purefa_snap:
	    name: foo
	    suffix: snap
	    eradicate: true
	    fa_url: 10.10.10.2
	    fa_api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: absent
	
	RETURN VALUES:
	
	
	

snippet purefa_volume
	EXAMPLES:
	- name: Create new volume named foo
	  purefa_volume:
	    name: foo
	    size: 1T
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: present
	
	- name: Extend the size of an existing volume named foo
	  purefa_volume:
	    name: foo
	    size: 2T
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: present
	
	- name: Delete and eradicate volume named foo
	  purefa_volume:
	    name: foo
	    eradicate: yes
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: absent
	
	- name: Create clone of volume bar named foo
	  purefa_volume:
	    name: foo
	    target: bar
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: present
	
	- name: Overwrite volume bar with volume foo
	  purefa_volume:
	    name: foo
	    target: bar
	    overwrite: yes
	    fa_url: 10.10.10.2
	    api_token: e31060a7-21fc-e277-6240-25983c6c4592
	    state: present
	
	RETURN VALUES:
	
	
	

snippet pushbullet
	EXAMPLES:
	# Sends a push notification to a device
	- pushbullet:
	    api_key: "ABC123abc123ABC123abc123ABC123ab"
	    device: "Chrome"
	    title: "You may see this on Google Chrome"
	
	# Sends a link to a device
	- pushbullet:
	    api_key: ABC123abc123ABC123abc123ABC123ab
	    device: Chrome
	    push_type: link
	    title: Ansible Documentation
	    body: http://docs.ansible.com/
	
	# Sends a push notification to a channel
	- pushbullet:
	    api_key: ABC123abc123ABC123abc123ABC123ab
	    channel: my-awesome-channel
	    title: Broadcasting a message to the #my-awesome-channel folks
	
	# Sends a push notification with title and body to a channel
	- pushbullet:
	    api_key: ABC123abc123ABC123abc123ABC123ab
	    channel: my-awesome-channel
	    title: ALERT! Signup service is down
	    body: Error rate on signup service is over 90% for more than 2 minutes
	

snippet pushover
	EXAMPLES:
	- pushover:
	    msg: '{{ inventory_hostname }} has exploded in flames, It is now time to panic'
	    app_token: wxfdksl
	    user_key: baa5fe97f2c5ab3ca8f0bb59
	  delegate_to: localhost
	

snippet rabbitmq_binding
	EXAMPLES:
	# Bind myQueue to directExchange with routing key info
	- rabbitmq_binding:
	    name: directExchange
	    destination: myQueue
	    type: queue
	    routing_key: info
	
	# Bind directExchange to topicExchange with routing key *.info
	- rabbitmq_binding:
	    name: topicExchange
	    destination: topicExchange
	    type: exchange
	    routing_key: '*.info'
	

snippet rabbitmq_exchange
	EXAMPLES:
	# Create direct exchange
	- rabbitmq_exchange:
	    name: directExchange
	
	# Create topic exchange on vhost
	- rabbitmq_exchange:
	    name: topicExchange
	    type: topic
	    vhost: myVhost
	

snippet rabbitmq_parameter
	EXAMPLES:
	# Set the federation parameter 'local_username' to a value of 'guest' (in quotes)
	- rabbitmq_parameter:
	    component: federation
	    name: local-username
	    value: '"guest"'
	    state: present
	

snippet rabbitmq_plugin
	EXAMPLES:
	- name: Enables the rabbitmq_management plugin
	  rabbitmq_plugin:
	    names: rabbitmq_management
	    state: enabled
	
	RETURN VALUES:
	
	
	enabled:
	  description: list of plugins enabled during task run
	  returned: always
	  type: list
	  sample: ["rabbitmq_management"]
	disabled:
	  description: list of plugins disabled during task run
	  returned: always
	  type: list
	  sample: ["rabbitmq_management"]
	

snippet rabbitmq_policy
	EXAMPLES:
	- name: ensure the default vhost contains the HA policy via a dict
	  rabbitmq_policy:
	    name: HA
	    pattern: .*
	  args:
	    tags:
	      ha-mode: all
	
	- name: ensure the default vhost contains the HA policy
	  rabbitmq_policy:
	    name: HA
	    pattern: .*
	    tags:
	      ha-mode: all
	

snippet rabbitmq_queue
	EXAMPLES:
	# Create a queue
	- rabbitmq_queue:
	    name: myQueue
	
	# Create a queue on remote host
	- rabbitmq_queue:
	    name: myRemoteQueue
	    login_user: user
	    login_password: secret
	    login_host: remote.example.org
	

snippet rabbitmq_user
	EXAMPLES:
	# Add user to server and assign full access control on / vhost.
	# The user might have permission rules for other vhost but you don't care.
	- rabbitmq_user:
	    user: joe
	    password: changeme
	    vhost: /
	    configure_priv: .*
	    read_priv: .*
	    write_priv: .*
	    state: present
	
	# Add user to server and assign full access control on / vhost.
	# The user doesn't have permission rules for other vhosts
	- rabbitmq_user:
	    user: joe
	    password: changeme
	    permissions:
	      - vhost: /
	        configure_priv: .*
	        read_priv: .*
	        write_priv: .*
	    state: present
	

snippet rabbitmq_vhost
	EXAMPLES:
	# Ensure that the vhost /test exists.
	- rabbitmq_vhost:
	    name: /test
	    state: present
	

snippet raw
	EXAMPLES:
	- name: Bootstrap a legacy python 2.4 host
	  raw: yum -y install python-simplejson
	
	- name: Bootstrap a host without python2 installed
	  raw: dnf install -y python2 python2-dnf libselinux-python
	
	- name: Run a command that uses non-posix shell-isms (in this example /bin/sh doesn't handle redirection and wildcards together but bash does)
	  raw: cat < /tmp/*txt
	  args:
	    executable: /bin/bash
	
	- name: safely use templated variables. Always use quote filter to avoid injection issues.
	  raw: "{{package_mgr|quote}} {{pkg_flags|quote}} install {{python_simplejson|quote}}"
	

snippet rds
	EXAMPLES:
	# Basic mysql provisioning example
	- rds:
	    command: create
	    instance_name: new-database
	    db_engine: MySQL
	    size: 10
	    instance_type: db.m1.small
	    username: mysql_admin
	    password: 1nsecure
	    tags:
	      Environment: testing
	      Application: cms
	
	# Create a read-only replica and wait for it to become available
	- rds:
	    command: replicate
	    instance_name: new-database-replica
	    source_instance: new_database
	    wait: yes
	    wait_timeout: 600
	
	# Delete an instance, but create a snapshot before doing so
	- rds:
	    command: delete
	    instance_name: new-database
	    snapshot: new_database_snapshot
	
	# Get facts about an instance
	- rds:
	    command: facts
	    instance_name: new-database
	  register: new_database_facts
	
	# Rename an instance and wait for the change to take effect
	- rds:
	    command: modify
	    instance_name: new-database
	    new_instance_name: renamed-database
	    wait: yes
	
	# Reboot an instance and wait for it to become available again
	- rds:
	    command: reboot
	    instance_name: database
	    wait: yes
	
	# Restore a Postgres db instance from a snapshot, wait for it to become available again, and
	#  then modify it to add your security group. Also, display the new endpoint.
	#  Note that the "publicly_accessible" option is allowed here just as it is in the AWS CLI
	- local_action:
	     module: rds
	     command: restore
	     snapshot: mypostgres-snapshot
	     instance_name: MyNewInstanceName
	     region: us-west-2
	     zone: us-west-2b
	     subnet: default-vpc-xx441xxx
	     publicly_accessible: yes
	     wait: yes
	     wait_timeout: 600
	     tags:
	         Name: pg1_test_name_tag
	  register: rds
	
	- local_action:
	     module: rds
	     command: modify
	     instance_name: MyNewInstanceName
	     region: us-west-2
	     vpc_security_groups: sg-xxx945xx
	
	- debug:
	    msg: "The new db endpoint is {{ rds.instance.endpoint }}"
	
	RETURN VALUES:
	
	
	engine:
	    description: the name of the database engine
	    returned: when RDS instance exists
	    type: string
	    sample: "oracle-se"
	engine_version:
	    description: the version of the database engine
	    returned: when RDS instance exists
	    type: string
	    sample: "11.2.0.4.v6"
	license_model:
	    description: the license model information
	    returned: when RDS instance exists
	    type: string
	    sample: "bring-your-own-license"
	character_set_name:
	    description: the name of the character set that this instance is associated with
	    returned: when RDS instance exists
	    type: string
	    sample: "AL32UTF8"
	allocated_storage:
	    description: the allocated storage size in gigabytes (GB)
	    returned: when RDS instance exists
	    type: string
	    sample: "100"
	publicly_accessible:
	    description: the accessibility options for the DB instance
	    returned: when RDS instance exists
	    type: boolean
	    sample: "true"
	latest_restorable_time:
	    description: the latest time to which a database can be restored with point-in-time restore
	    returned: when RDS instance exists
	    type: string
	    sample: "1489707802.0"
	secondary_avaialbility_zone:
	    description: the name of the secondary AZ for a DB instance with multi-AZ support
	    returned: when RDS instance exists and is multy-AZ
	    type: string
	    sample: "eu-west-1b"
	backup_window:
	    description: the daily time range during which automated backups are created if automated backups are enabled
	    returned: when RDS instance exists and automated backups are enabled
	    type: string
	    sample: "03:00-03:30"
	auto_minor_version_upgrade:
	    description: indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window
	    returned: when RDS instance exists
	    type: boolean
	    sample: "true"
	read_replica_source_dbinstance_identifier:
	    description: the identifier of the source DB instance if this RDS instance is a read replica
	    returned: when read replica RDS instance exists
	    type: string
	    sample: "null"
	db_name:
	    description: the name of the database to create when the DB instance is created
	    returned: when RDS instance exists
	    type: string
	    sample: "ASERTG"
	parameter_groups:
	    description: the list of DB parameter groups applied to this RDS instance
	    returned: when RDS instance exists and parameter groups are defined
	    type: complex
	    contains:
	        parameter_apply_status:
	            description: the status of parameter updates
	            returned: when RDS instance exists
	            type: string
	            sample: "in-sync"
	        parameter_group_name:
	            description: the name of the DP parameter group
	            returned: when RDS instance exists
	            type: string
	            sample: "testawsrpprodb01spfile-1ujg7nrs7sgyz"
	option_groups:
	    description: the list of option group memberships for this RDS instance
	    returned: when RDS instance exists
	    type: complex
	    contains:
	        option_group_name:
	            description: the option group name for this RDS instance
	            returned: when RDS instance exists
	            type: string
	            sample: "default:oracle-se-11-2"
	        status:
	            description: the status of the RDS instance's option group membership
	            returned: when RDS instance exists
	            type: string
	            sample: "in-sync"
	pending_modified_values:
	    description: a dictionary of changes to the RDS instance that are pending
	    returned: when RDS instance exists
	    type: complex
	    contains:
	        db_instance_class:
	            description: the new DB instance class for this RDS instance that will be applied or is in progress
	            returned: when RDS instance exists
	            type: string
	            sample: "null"
	        db_instance_identifier:
	            description: the new DB instance identifier this RDS instance that will be applied or is in progress
	            returned: when RDS instance exists
	            type: string
	            sample: "null"
	        allocated_storage:
	            description: the new allocated storage size for this RDS instance that will be applied or is in progress
	            returned: when RDS instance exists
	            type: string
	            sample: "null"
	        backup_retention_period:
	            description: the pending number of days for which automated backups are retained
	            returned: when RDS instance exists
	            type: string
	            sample: "null"
	        engine_version:
	            description: indicates the database engine version
	            returned: when RDS instance exists
	            type: string
	            sample: "null"
	        iops:
	            description: the new provisioned IOPS value for this RDS instance that will be applied or is being applied
	            returned: when RDS instance exists
	            type: string
	            sample: "null"
	        master_user_password:
	            description: the pending or in-progress change of the master credentials for this RDS instance
	            returned: when RDS instance exists
	            type: string
	            sample: "null"
	        multi_az:
	            description: indicates that the single-AZ RDS instance is to change to a multi-AZ deployment
	            returned: when RDS instance exists
	            type: string
	            sample: "null"
	        port:
	            description: specifies the pending port for this RDS instance
	            returned: when RDS instance exists
	            type: string
	            sample: "null"
	db_subnet_groups:
	    description: information on the subnet group associated with this RDS instance
	    returned: when RDS instance exists
	    type: complex
	    contains:
	        description:
	            description: the subnet group associated with the DB instance
	            returned: when RDS instance exists
	            type: string
	            sample: "Subnets for the UAT RDS SQL DB Instance"
	        name:
	            description: the name of the DB subnet group
	            returned: when RDS instance exists
	            type: string
	            sample: "samplesubnetgrouprds-j6paiqkxqp4z"
	        status:
	            description: the status of the DB subnet group
	            returned: when RDS instance exists
	            type: string
	            sample: "complete"
	        subnets:
	            description: the description of the DB subnet group
	            returned: when RDS instance exists
	            type: complex
	            contains:
	                availability_zone:
	                    description: subnet availability zone information
	                    returned: when RDS instance exists
	                    type: complex
	                    contains:
	                        name:
	                            description: avaialbility zone
	                            returned: when RDS instance exists
	                            type: string
	                            sample: "eu-west-1b"
	                        provisioned_iops_capable:
	                            description: whether provisioned iops are available in AZ subnet
	                            returned: when RDS instance exists
	                            type: boolean
	                            sample: "false"
	                identifier:
	                    description: the identifier of the subnet
	                    returned: when RDS instance exists
	                    type: string
	                    sample: "subnet-3fdba63e"
	                status:
	                    description: the status of the subnet
	                    returned: when RDS instance exists
	                    type: string
	                    sample: "active"
	

snippet rds_param_group
	EXAMPLES:
	# Add or change a parameter group, in this case setting auto_increment_increment to 42 * 1024
	- rds_param_group:
	      state: present
	      name: norwegian_blue
	      description: 'My Fancy Ex Parrot Group'
	      engine: 'mysql5.6'
	      params:
	          auto_increment_increment: "42K"
	      tags:
	          Environment: production
	          Application: parrot
	
	# Remove a parameter group
	- rds_param_group:
	      state: absent
	      name: norwegian_blue
	
	RETURN VALUES:
	
	
	db_parameter_group_name:
	    description: Name of DB parameter group
	    type: string
	    returned: when state is present
	db_parameter_group_family:
	    description: DB parameter group family that this DB parameter group is compatible with.
	    type: string
	    returned: when state is present
	db_parameter_group_arn:
	    description: ARN of the DB parameter group
	    type: string
	    returned: when state is present
	description:
	    description: description of the DB parameter group
	    type: string
	    returned: when state is present
	errors:
	    description: list of errors from attempting to modify parameters that are not modifiable
	    type: list
	    returned: when state is present
	tags:
	    description: dictionary of tags
	    type: dict
	    returned: when state is present
	

snippet rds_subnet_group
	EXAMPLES:
	# Add or change a subnet group
	- rds_subnet_group:
	    state: present
	    name: norwegian-blue
	    description: My Fancy Ex Parrot Subnet Group
	    subnets:
	      - subnet-aaaaaaaa
	      - subnet-bbbbbbbb
	
	# Remove a subnet group
	- rds_subnet_group:
	    state: absent
	    name: norwegian-blue
	

snippet redhat_subscription
	EXAMPLES:
	- name: Register as user (joe_user) with password (somepass) and auto-subscribe to available content.
	  redhat_subscription:
	    state: present
	    username: joe_user
	    password: somepass
	    autosubscribe: true
	
	- name: Same as above but subscribe to a specific pool by ID.
	  redhat_subscription:
	    state: present
	    username: joe_user
	    password: somepass
	    pool_ids: 0123456789abcdef0123456789abcdef
	
	- name: Register and subscribe to multiple pools.
	  redhat_subscription:
	    state: present
	    username: joe_user
	    password: somepass
	    pool_ids:
	      - 0123456789abcdef0123456789abcdef
	      - 1123456789abcdef0123456789abcdef
	
	- name: Same as above but consume multiple entitlements.
	  redhat_subscription:
	    state: present
	    username: joe_user
	    password: somepass
	    pool_ids:
	      - 0123456789abcdef0123456789abcdef: 2
	      - 1123456789abcdef0123456789abcdef: 4
	
	- name: Register and pull existing system data.
	  redhat_subscription:
	    state: present
	    username: joe_user
	    password: somepass
	    consumer_id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
	
	- name: Register with activationkey and consume subscriptions matching Red Hat Enterprise Server or Red Hat Virtualization
	  redhat_subscription:
	    state: present
	    activationkey: 1-222333444
	    org_id: 222333444
	    pool: '^(Red Hat Enterprise Server|Red Hat Virtualization)$'
	
	- name: Update the consumed subscriptions from the previous example (remove Red Hat Virtualization subscription)
	  redhat_subscription:
	    state: present
	    activationkey: 1-222333444
	    org_id: 222333444
	    pool: '^Red Hat Enterprise Server$'
	
	- name: Register as user credentials into given environment (against Red Hat Satellite 6.x), and auto-subscribe.
	  redhat_subscription:
	    state: present
	    username: joe_user
	    password: somepass
	    environment: Library
	    autosubscribe: yes
	
	RETURN VALUES:
	
	
	subscribed_pool_ids:
	    description: List of pool IDs to which system is now subscribed
	    returned: success
	    type: complex
	    contains: {
	        "8a85f9815ab905d3015ab928c7005de4": "1"
	    }
	

snippet redis
	EXAMPLES:
	# Set local redis instance to be slave of melee.island on port 6377
	- redis:
	    command: slave
	    master_host: melee.island
	    master_port: 6377
	
	# Deactivate slave mode
	- redis:
	    command: slave
	    slave_mode: master
	
	# Flush all the redis db
	- redis:
	    command: flush
	    flush_mode: all
	
	# Flush only one db in a redis instance
	- redis:
	    command: flush
	    db: 1
	    flush_mode: db
	
	# Configure local redis to have 10000 max clients
	- redis:
	    command: config
	    name: maxclients
	    value: 10000
	
	# Configure local redis to have lua time limit of 100 ms
	- redis:
	    command: config
	    name: lua-time-limit
	    value: 100
	

snippet redshift
	EXAMPLES:
	# Basic cluster provisioning example
	- redshift: >
	    command=create
	    node_type=ds1.xlarge
	    identifier=new_cluster
	    username=cluster_admin
	    password=1nsecure
	
	# Cluster delete example
	- redshift:
	    command: delete
	    identifier: new_cluster
	    skip_final_cluster_snapshot: true
	    wait: true
	
	RETURN VALUES:
	
	
	cluster:
	    description: dictionary containing all the cluster information
	    returned: success
	    type: complex
	    contains:
	        identifier:
	            description: Id of the cluster.
	            returned: success
	            type: string
	            sample: "new_redshift_cluster"
	        create_time:
	            description: Time of the cluster creation as timestamp.
	            returned: success
	            type: float
	            sample: 1430158536.308
	        status:
	            description: Stutus of the cluster.
	            returned: success
	            type: string
	            sample: "available"
	        db_name:
	            description: Name of the database.
	            returned: success
	            type: string
	            sample: "new_db_name"
	        availability_zone:
	            description: Amazon availability zone where the cluster is located.
	            returned: success
	            type: string
	            sample: "us-east-1b"
	        maintenance_window:
	            description: Time frame when maintenance/upgrade are done.
	            returned: success
	            type: string
	            sample: "sun:09:30-sun:10:00"
	        private_ip_address:
	            description: Private IP address of the main node.
	            returned: success
	            type: string
	            sample: "10.10.10.10"
	        public_ip_address:
	            description: Public IP address of the main node.
	            returned: success
	            type: string
	            sample: "0.0.0.0"
	        port:
	            description: Port of the cluster.
	            returned: success
	            type: int
	            sample: 5439
	        url:
	            description: FQDN of the main cluster node.
	            returned: success
	            type: string
	            sample: "new-redshift_cluster.jfkdjfdkj.us-east-1.redshift.amazonaws.com"
	

snippet redshift_facts
	EXAMPLES:
	# Note: These examples do net set authentication details, see the AWS guide for details.
	
	# Find all clusters
	- redshift_facts:
	  register: redshift
	
	# Find cluster(s) with matching tags
	- redshift_facts:
	    tags:
	      env: prd
	      stack: monitoring
	  register: redshift_tags
	
	# Find cluster(s) with matching name/prefix and tags
	- redshift_facts:
	    tags:
	      env: dev
	      stack: web
	    name: user-
	  register: redshift_web
	
	# Fail if no cluster(s) is/are found
	- redshift_facts:
	    tags:
	      env: stg
	      stack: db
	  register: redshift_user
	  failed_when: "{{ redshift_user.results | length == 0 }}"
	
	RETURN VALUES:
	
	
	# For more information see U(http://boto3.readthedocs.io/en/latest/reference/services/redshift.html#Redshift.Client.describe_clusters)
	---
	cluster_identifier:
	    description: Unique key to identify the cluster.
	    returned: success
	    type: string
	    sample: "redshift-identifier"
	node_type:
	    description: The node type for nodes in the cluster.
	    returned: success
	    type: string
	    sample: "ds2.xlarge"
	cluster_status:
	    description: Current state of the cluster.
	    returned: success
	    type: string
	    sample: "available"
	modify_status:
	    description: The status of a modify operation.
	    returned: optional
	    type: string
	    sample: ""
	master_username:
	    description: The master user name for the cluster.
	    returned: success
	    type: string
	    sample: "admin"
	db_name:
	    description: The name of the initial database that was created when the cluster was created.
	    returned: success
	    type: string
	    sample: "dev"
	endpoint:
	    description: The connection endpoint.
	    returned: success
	    type: string
	    sample: {
	        "address": "cluster-ds2.ocmugla0rf.us-east-1.redshift.amazonaws.com",
	        "port": 5439
	    }
	cluster_create_time:
	    description: The date and time that the cluster was created.
	    returned: success
	    type: string
	    sample: "2016-05-10T08:33:16.629000+00:00"
	automated_snapshot_retention_period:
	    description: The number of days that automatic cluster snapshots are retained.
	    returned: success
	    type: int
	    sample: 1
	cluster_security_groups:
	    description: A list of cluster security groups that are associated with the cluster.
	    returned: success
	    type: list
	    sample: []
	vpc_security_groups:
	    description: A list of VPC security groups the are associated with the cluster.
	    returned: success
	    type: list
	    sample: [
	        {
	            "status": "active",
	            "vpc_security_group_id": "sg-12cghhg"
	        }
	    ]
	cluster_paramater_groups:
	    description: The list of cluster parameters that are associated with this cluster.
	    returned: success
	    type: list
	    sample: [
	        {
	            "cluster_parameter_status_list": [
	                {
	                    "parameter_apply_status": "in-sync",
	                    "parameter_name": "statement_timeout"
	                },
	                {
	                    "parameter_apply_status": "in-sync",
	                    "parameter_name": "require_ssl"
	                }
	            ],
	            "parameter_apply_status": "in-sync",
	            "parameter_group_name": "tuba"
	        }
	    ]
	cluster_subnet_group_name:
	    description: The name of the subnet group that is associated with the cluster.
	    returned: success
	    type: string
	    sample: "redshift-subnet"
	vpc_id:
	    description: The identifier of the VPC the cluster is in, if the cluster is in a VPC.
	    returned: success
	    type: string
	    sample: "vpc-1234567"
	availibility_zone:
	    description: The name of the Availability Zone in which the cluster is located.
	    returned: success
	    type: string
	    sample: "us-east-1b"
	preferred_maintenance_window:
	    description: The weekly time range, in Universal Coordinated Time (UTC), during which system maintenance can occur.
	    returned: success
	    type: string
	    sample: "tue:07:30-tue:08:00"
	pending_modified_values:
	    description: A value that, if present, indicates that changes to the cluster are pending.
	    returned: success
	    type: dict
	    sample: {}
	cluster_version:
	    description: The version ID of the Amazon Redshift engine that is running on the cluster.
	    returned: success
	    type: string
	    sample: "1.0"
	allow_version_upgrade:
	    description: >
	      A Boolean value that, if true, indicates that major version upgrades will be applied
	      automatically to the cluster during the maintenance window.
	    returned: success
	    type: boolean
	    sample: true|false
	number_of_nodes:
	    description:  The number of compute nodes in the cluster.
	    returned: success
	    type: int
	    sample: 12
	publicly_accessible:
	    description: A Boolean value that, if true , indicates that the cluster can be accessed from a public network.
	    returned: success
	    type: boolean
	    sample: true|false
	encrypted:
	    description: Boolean value that, if true , indicates that data in the cluster is encrypted at rest.
	    returned: success
	    type: boolean
	    sample: true|false
	restore_status:
	    description: A value that describes the status of a cluster restore action.
	    returned: success
	    type: dict
	    sample: {}
	hsm_status:
	    description: >
	      A value that reports whether the Amazon Redshift cluster has finished applying any hardware
	      security module (HSM) settings changes specified in a modify cluster command.
	    returned: success
	    type: dict
	    sample: {}
	cluster_snapshot_copy_status:
	    description: A value that returns the destination region and retention period that are configured for cross-region snapshot copy.
	    returned: success
	    type: dict
	    sample: {}
	cluster_public_keys:
	    description: The public key for the cluster.
	    returned: success
	    type: string
	    sample: "ssh-rsa anjigfam Amazon-Redshift
	"
	cluster_nodes:
	    description: The nodes in the cluster.
	    returned: success
	    type: list
	    sample: [
	        {
	            "node_role": "LEADER",
	            "private_ip_address": "10.0.0.1",
	            "public_ip_address": "x.x.x.x"
	        },
	        {
	            "node_role": "COMPUTE-1",
	            "private_ip_address": "10.0.0.3",
	            "public_ip_address": "x.x.x.x"
	        }
	    ]
	elastic_ip_status:
	    description: The status of the elastic IP (EIP) address.
	    returned: success
	    type: dict
	    sample: {}
	cluster_revision_number:
	    description: The specific revision number of the database in the cluster.
	    returned: success
	    type: string
	    sample: "1231"
	tags:
	    description: The list of tags for the cluster.
	    returned: success
	    type: list
	    sample: []
	kms_key_id:
	    description: The AWS Key Management Service (AWS KMS) key ID of the encryption key used to encrypt data in the cluster.
	    returned: success
	    type: string
	    sample: ""
	enhanced_vpc_routing:
	    description: An option that specifies whether to create the cluster with enhanced VPC routing enabled.
	    returned: success
	    type: boolean
	    sample: true|false
	iam_roles:
	    description: List of IAM roles attached to the cluster.
	    returned: success
	    type: list
	    sample: []
	

snippet redshift_subnet_group
	EXAMPLES:
	# Create a Redshift subnet group
	- local_action:
	    module: redshift_subnet_group
	    state: present
	    group_name: redshift-subnet
	    group_description: Redshift subnet
	    group_subnets:
	        - 'subnet-aaaaa'
	        - 'subnet-bbbbb'
	
	# Remove subnet group
	- redshift_subnet_group:
	    state: absent
	    group_name: redshift-subnet
	
	RETURN VALUES:
	
	
	group:
	    description: dictionary containing all Redshift subnet group information
	    returned: success
	    type: complex
	    contains:
	        name:
	            description: name of the Redshift subnet group
	            returned: success
	            type: string
	            sample: "redshift_subnet_group_name"
	        vpc_id:
	            description: Id of the VPC where the subnet is located
	            returned: success
	            type: string
	            sample: "vpc-aabb1122"
	

snippet replace
	EXAMPLES:
	# Before 2.3, option 'dest', 'destfile' or 'name' was used instead of 'path'
	- replace:
	    path: /etc/hosts
	    regexp: '(\s+)old\.host\.name(\s+.*)?$'
	    replace: '\1new.host.name\2'
	    backup: yes
	
	# Replace after the expression till the end of the file (requires >=2.4)
	- replace:
	    path: /etc/hosts
	    regexp: '(\s+)old\.host\.name(\s+.*)?$'
	    replace: '\1new.host.name\2'
	    after: 'Start after line.*'
	    backup: yes
	
	# Replace before the expression till the begin of the file (requires >=2.4)
	- replace:
	    path: /etc/hosts
	    regexp: '(\s+)old\.host\.name(\s+.*)?$'
	    replace: '\1new.host.name\2'
	    before: 'Start before line.*'
	    backup: yes
	
	# Replace between the expressions (requires >=2.4)
	- replace:
	    path: /etc/hosts
	    regexp: '(\s+)old\.host\.name(\s+.*)?$'
	    replace: '\1new.host.name\2'
	    after: 'Start after line.*'
	    before: 'Start before line.*'
	    backup: yes
	
	- replace:
	    path: /home/jdoe/.ssh/known_hosts
	    regexp: '^old\.host\.name[^\n]*\n'
	    owner: jdoe
	    group: jdoe
	    mode: 0644
	
	- replace:
	    path: /etc/apache/ports
	    regexp: '^(NameVirtualHost|Listen)\s+80\s*$'
	    replace: '\1 127.0.0.1:8080'
	    validate: '/usr/sbin/apache2ctl -f %s -t'
	
	- name: short form task (in ansible 2+) necessitates backslash-escaped sequences
	  replace: dest=/etc/hosts regexp='\\b(localhost)(\\d*)\\b' replace='\\1\\2.localdomain\\2 \\1\\2'
	
	- name: long form task does not
	  replace:
	    dest: /etc/hosts
	    regexp: '\b(localhost)(\d*)\b'
	    replace: '\1\2.localdomain\2 \1\2'
	

snippet rhevm
	EXAMPLES:
	# basic get info from VM
	  - rhevm:
	      name: "demo"
	      user: "{{ rhev.admin.name }}"
	      password: "{{ rhev.admin.pass }}"
	      server: "rhevm01"
	      state: "info"
	
	# basic create example from image
	  - rhevm:
	      name: "demo"
	      user: "{{ rhev.admin.name }}"
	      password: "{{ rhev.admin.pass }}"
	      server: "rhevm01"
	      state: "present"
	      image: "centos7_x64"
	      cluster: "centos"
	
	# power management
	  - rhevm:
	      name: "uptime_server"
	      user: "{{ rhev.admin.name }}"
	      password: "{{ rhev.admin.pass }}"
	      server: "rhevm01"
	      cluster: "RH"
	      state: "down"
	      image: "centos7_x64"
	      cluster: "centos"
	
	# multi disk, multi nic create example
	  - rhevm:
	      name: "server007"
	      user: "{{ rhev.admin.name }}"
	      password: "{{ rhev.admin.pass }}"
	      server: "rhevm01"
	      cluster: "RH"
	      state: "present"
	      type: "server"
	      vmcpu: 4
	      vmmem: 2
	      ifaces:
	        - name: "eth0"
	          vlan: "vlan2202"
	        - name: "eth1"
	          vlan: "vlan36"
	        - name: "eth2"
	          vlan: "vlan38"
	        - name: "eth3"
	          vlan: "vlan2202"
	      disks:
	        - name: "root"
	          size: 10
	          domain: "ssd-san"
	        - name: "swap"
	          size: 10
	          domain: "15kiscsi-san"
	        - name: "opt"
	          size: 10
	          domain: "15kiscsi-san"
	        - name: "var"
	          size: 10
	          domain: "10kiscsi-san"
	        - name: "home"
	          size: 10
	          domain: "sata-san"
	      boot_order:
	        - "network"
	        - "hd"
	
	# add a CD to the disk cd_drive
	  - rhevm:
	      name: 'server007'
	      user: "{{ rhev.admin.name }}"
	      password: "{{ rhev.admin.pass }}"
	      state: 'cd'
	      cd_drive: 'rhev-tools-setup.iso'
	
	# new host deployment + host network configuration
	  - rhevm:
	      name: "ovirt_node007"
	      password: "{{ rhevm.admin.pass }}"
	      type: "host"
	      state: present
	      cluster: "rhevm01"
	      ifaces:
	        - name: em1
	        - name: em2
	        - name: p3p1
	          ip: '172.31.224.200'
	          netmask: '255.255.254.0'
	        - name: p3p2
	          ip: '172.31.225.200'
	          netmask: '255.255.254.0'
	        - name: bond0
	          bond:
	            - em1
	            - em2
	          network: 'rhevm'
	          ip: '172.31.222.200'
	          netmask: '255.255.255.0'
	          management: True
	        - name: bond0.36
	          network: 'vlan36'
	          ip: '10.2.36.200'
	          netmask: '255.255.254.0'
	          gateway: '10.2.36.254'
	        - name: bond0.2202
	          network: 'vlan2202'
	        - name: bond0.38
	          network: 'vlan38'
	
	RETURN VALUES:
	
	
	vm:
	    description: Returns all of the VMs variables and execution.
	    returned: always
	    type: dict
	    sample: '{
	        "boot_order": [
	            "hd",
	            "network"
	        ],
	        "changed": true,
	        "changes": [
	            "Delete Protection"
	        ],
	        "cluster": "C1",
	        "cpu_share": "0",
	        "created": false,
	        "datacenter": "Default",
	        "del_prot": true,
	        "disks": [
	            {
	                "domain": "ssd-san",
	                "name": "OS",
	                "size": 40
	            }
	        ],
	        "eth0": "00:00:5E:00:53:00",
	        "eth1": "00:00:5E:00:53:01",
	        "eth2": "00:00:5E:00:53:02",
	        "exists": true,
	        "failed": false,
	        "ifaces": [
	            {
	                "name": "eth0",
	                "vlan": "Management"
	            },
	            {
	                "name": "eth1",
	                "vlan": "Internal"
	            },
	            {
	                "name": "eth2",
	                "vlan": "External"
	            }
	        ],
	        "image": false,
	        "mempol": "0",
	        "msg": [
	            "VM exists",
	            "cpu_share was already set to 0",
	            "VM high availability was already set to True",
	            "The boot order has already been set",
	            "VM delete protection has been set to True",
	            "Disk web2_Disk0_OS already exists",
	            "The VM starting host was already set to host416"
	        ],
	        "name": "web2",
	        "type": "server",
	        "uuid": "4ba5a1be-e60b-4368-9533-920f156c817b",
	        "vm_ha": true,
	        "vmcpu": "4",
	        "vmhost": "host416",
	        "vmmem": "16"
	    }'
	

snippet rhn_channel
	EXAMPLES:
	- rhn_channel:
	    name: rhel-x86_64-server-v2vwin-6
	    sysname: server01
	    url: https://rhn.redhat.com/rpc/api
	    user: rhnuser
	    password: guessme
	

snippet rhn_register
	EXAMPLES:
	# Unregister system from RHN.
	- rhn_register:
	    state: absent
	    username: joe_user
	    password: somepass
	
	# Register as user (joe_user) with password (somepass) and auto-subscribe to available content.
	- rhn_register:
	    state: present
	    username: joe_user
	    password: somepass
	
	# Register with activationkey (1-222333444) and enable extended update support.
	- rhn_register:
	    state: present
	    activationkey: 1-222333444
	    enable_eus: true
	
	# Register with activationkey (1-222333444) and set a profilename which may differ from the hostname.
	- rhn_register:
	    state: present
	    activationkey: 1-222333444
	    profilename: host.example.com.custom
	
	# Register as user (joe_user) with password (somepass) against a satellite
	# server specified by (server_url).
	- rhn_register:
	    state: present
	    username: joe_user
	    password: somepass'
	    server_url: https://xmlrpc.my.satellite/XMLRPC
	
	# Register as user (joe_user) with password (somepass) and enable
	# channels (rhel-x86_64-server-6-foo-1) and (rhel-x86_64-server-6-bar-1).
	- rhn_register:
	    state: present
	    username: joe_user
	    password: somepass
	    channels: rhel-x86_64-server-6-foo-1,rhel-x86_64-server-6-bar-1
	
	RETURN VALUES:
	
	
	# Default return values
	

snippet riak
	EXAMPLES:
	# Join's a Riak node to another node
	- riak:
	    command: join
	    target_node: riak@10.1.1.1
	
	# Wait for handoffs to finish.  Use with async and poll.
	- riak:
	    wait_for_handoffs: yes
	
	# Wait for riak_kv service to startup
	- riak:
	    wait_for_service: kv
	

snippet rocketchat
	EXAMPLES:
	- name: Send notification message via Rocket Chat
	  rocketchat:
	    token: thetoken/generatedby/rocketchat
	    domain: chat.example.com
	    msg: '{{ inventory_hostname }} completed'
	  delegate_to: localhost
	
	- name: Send notification message via Rocket Chat all options
	  rocketchat:
	    domain: chat.example.com
	    token: thetoken/generatedby/rocketchat
	    msg: '{{ inventory_hostname }} completed'
	    channel: #ansible
	    username: 'Ansible on {{ inventory_hostname }}'
	    icon_url: http://www.example.com/some-image-file.png
	    link_names: 0
	  delegate_to: localhost
	
	- name: insert a color bar in front of the message for visibility purposes and use the default webhook icon and name configured in rocketchat
	  rocketchat:
	    token: thetoken/generatedby/rocketchat
	    domain: chat.example.com
	    msg: '{{ inventory_hostname }} is alive!'
	    color: good
	    username: ''
	    icon_url: ''
	  delegate_to: localhost
	
	- name: Use the attachments API
	  rocketchat:
	    token: thetoken/generatedby/rocketchat
	    domain: chat.example.com
	    attachments:
	      - text: Display my system load on host A and B
	        color: #ff00dd
	        title: System load
	        fields:
	          - title: System A
	            value: 'load average: 0,74, 0,66, 0,63'
	            short: True
	          - title: System B
	            value: 'load average: 5,16, 4,64, 2,43'
	            short: True
	  delegate_to: localhost
	
	RETURN VALUES:
	
	
	changed:
	    description: A flag indicating if any change was made or not.
	    returned: success
	    type: boolean
	    sample: false
	

snippet rollbar_deployment
	EXAMPLES:
	- rollbar_deployment:
	    token: AAAAAA
	    environment: staging
	    user: ansible
	    revision: '4.2'
	    rollbar_user: admin
	    comment: Test Deploy
	

snippet route53
	EXAMPLES:
	# Add new.foo.com as an A record with 3 IPs and wait until the changes have been replicated
	- route53:
	      state: present
	      zone: foo.com
	      record: new.foo.com
	      type: A
	      ttl: 7200
	      value: 1.1.1.1,2.2.2.2,3.3.3.3
	      wait: yes
	
	# Update new.foo.com as an A record with a list of 3 IPs and wait until the changes have been replicated
	- route53:
	      state: present
	      zone: foo.com
	      record: new.foo.com
	      type: A
	      ttl: 7200
	      value:
	        - 1.1.1.1
	        - 2.2.2.2
	        - 3.3.3.3
	      wait: yes
	
	# Retrieve the details for new.foo.com
	- route53:
	      state: get
	      zone: foo.com
	      record: new.foo.com
	      type: A
	  register: rec
	
	# Delete new.foo.com A record using the results from the get command
	- route53:
	      state: absent
	      zone: foo.com
	      record: "{{ rec.set.record }}"
	      ttl: "{{ rec.set.ttl }}"
	      type: "{{ rec.set.type }}"
	      value: "{{ rec.set.value }}"
	
	# Add an AAAA record.  Note that because there are colons in the value
	# that the IPv6 address must be quoted. Also shows using the old form command=create.
	- route53:
	      command: create
	      zone: foo.com
	      record: localhost.foo.com
	      type: AAAA
	      ttl: 7200
	      value: "::1"
	
	# Add a SRV record with multiple fields for a service on port 22222
	# For more information on SRV records see:
	# https://en.wikipedia.org/wiki/SRV_record
	- route53:
	      state: present
	      zone: foo.com
	      record: "_example-service._tcp.foo.com"
	      type: SRV
	      value: "0 0 22222 host1.foo.com,0 0 22222 host2.foo.com"
	
	# Add a TXT record. Note that TXT and SPF records must be surrounded
	# by quotes when sent to Route 53:
	- route53:
	      state: present
	      zone: foo.com
	      record: localhost.foo.com
	      type: TXT
	      ttl: 7200
	      value: '"bar"'
	
	# Add an alias record that points to an Amazon ELB:
	- route53:
	      state: present
	      zone: foo.com
	      record: elb.foo.com
	      type: A
	      value: "{{ elb_dns_name }}"
	      alias: True
	      alias_hosted_zone_id: "{{ elb_zone_id }}"
	
	# Retrieve the details for elb.foo.com
	- route53:
	      state: get
	      zone: foo.com
	      record: elb.foo.com
	      type: A
	  register: rec
	
	# Delete an alias record using the results from the get command
	- route53:
	      state: absent
	      zone: foo.com
	      record: "{{ rec.set.record }}"
	      ttl: "{{ rec.set.ttl }}"
	      type: "{{ rec.set.type }}"
	      value: "{{ rec.set.value }}"
	      alias: True
	      alias_hosted_zone_id: "{{ rec.set.alias_hosted_zone_id }}"
	
	# Add an alias record that points to an Amazon ELB and evaluates it health:
	- route53:
	    state: present
	    zone: foo.com
	    record: elb.foo.com
	    type: A
	    value: "{{ elb_dns_name }}"
	    alias: True
	    alias_hosted_zone_id: "{{ elb_zone_id }}"
	    alias_evaluate_target_health: True
	
	# Add an AAAA record with Hosted Zone ID.
	- route53:
	      state: present
	      zone: foo.com
	      hosted_zone_id: Z2AABBCCDDEEFF
	      record: localhost.foo.com
	      type: AAAA
	      ttl: 7200
	      value: "::1"
	
	# Use a routing policy to distribute traffic:
	- route53:
	      state: present
	      zone: foo.com
	      record: www.foo.com
	      type: CNAME
	      value: host1.foo.com
	      ttl: 30
	      # Routing policy
	      identifier: "host1@www"
	      weight: 100
	      health_check: "d994b780-3150-49fd-9205-356abdd42e75"
	

snippet route53_facts
	EXAMPLES:
	# Simple example of listing all hosted zones
	- name: List all hosted zones
	  route53_facts:
	    query: hosted_zone
	  register: hosted_zones
	
	# Getting a count of hosted zones
	- name: Return a count of all hosted zones
	  route53_facts:
	    query: hosted_zone
	    hosted_zone_method: count
	  register: hosted_zone_count
	
	- name: List the first 20 resource record sets in a given hosted zone
	  route53_facts:
	    profile: account_name
	    query: record_sets
	    hosted_zone_id: ZZZ1111112222
	    max_items: 20
	  register: record_sets
	
	- name: List first 20 health checks
	  route53_facts:
	    query: health_check
	    health_check_method: list
	    max_items: 20
	  register: health_checks
	
	- name: Get health check last failure_reason
	  route53_facts:
	    query: health_check
	    health_check_method: failure_reason
	    health_check_id: 00000000-1111-2222-3333-12345678abcd
	  register: health_check_failure_reason
	
	- name: Retrieve reusable delegation set details
	  route53_facts:
	    query: reusable_delegation_set
	    delegation_set_id: delegation id
	  register: delegation_sets
	
	- name: setup of example for using next_marker
	  route53_facts:
	    query: hosted_zone
	    max_items: 1
	  register: first_facts
	- name: example for using next_marker
	  route53_facts:
	    query: hosted_zone
	    next_marker: "{{ first_facts.NextMarker }}"
	    max_items: 1
	  when: "{{ 'NextMarker' in first_facts }}"
	

snippet route53_health_check
	EXAMPLES:
	# Create a health-check for host1.example.com and use it in record
	- route53_health_check:
	    state: present
	    fqdn: host1.example.com
	    type: HTTP_STR_MATCH
	    resource_path: /
	    string_match: "Hello"
	    request_interval: 10
	    failure_threshold: 2
	  register: my_health_check
	
	- route53:
	    action: create
	    zone: "example.com"
	    type: CNAME
	    record: "www.example.com"
	    value: host1.example.com
	    ttl: 30
	    # Routing policy
	    identifier: "host1@www"
	    weight: 100
	    health_check: "{{ my_health_check.health_check.id }}"
	
	# Delete health-check
	- route53_health_check:
	    state: absent
	    fqdn: host1.example.com
	

snippet route53_zone
	EXAMPLES:
	# create a public zone
	- route53_zone:
	    zone: example.com
	    state: present
	    comment: this is an example
	
	# delete a public zone
	- route53_zone:
	    zone: example.com
	    state: absent
	
	- name: private zone for devel
	  route53_zone:
	    zone: devel.example.com
	    state: present
	    vpc_id: '{{ myvpc_id }}'
	    comment: developer domain
	
	# more complex example
	- name: register output after creating zone in parameterized region
	  route53_zone:
	    vpc_id: '{{ vpc.vpc_id }}'
	    vpc_region: '{{ ec2_region }}'
	    zone: '{{ vpc_dns_zone }}'
	    state: present
	  register: zone_out
	
	- debug:
	    var: zone_out
	
	RETURN VALUES:
	
	
	comment:
	    description: optional hosted zone comment
	    returned: when hosted zone exists
	    type: string
	    sample: "Private zone"
	name:
	    description: hosted zone name
	    returned: when hosted zone exists
	    type: string
	    sample: "private.local."
	private_zone:
	    description: whether hosted zone is private or public
	    returned: when hosted zone exists
	    type: bool
	    sample: true
	vpc_id:
	    description: id of vpc attached to private hosted zone
	    returned: for private hosted zone
	    type: string
	    sample: "vpc-1d36c84f"
	vpc_region:
	    description: region of vpc attached to private hosted zone
	    returned: for private hosted zone
	    type: string
	    sample: "eu-west-1"
	zone_id:
	    description: hosted zone id
	    returned: when hosted zone exists
	    type: string
	    sample: "Z6JQG9820BEFMW"
	

snippet rpm_key
	EXAMPLES:
	# Example action to import a key from a url
	- rpm_key:
	    state: present
	    key: http://apt.sw.be/RPM-GPG-KEY.dag.txt
	
	# Example action to import a key from a file
	- rpm_key:
	    state: present
	    key: /path/to/key.gpg
	
	# Example action to ensure a key is not present in the db
	- rpm_key:
	    state: absent
	    key: DEADB33F
	

snippet rundeck_acl_policy
	EXAMPLES:
	- name: Create or update a rundeck ACL policy in project Ansible
	  rundeck_acl_policy:
	    name: "Project_01"
	    api_version: 18
	    url: "https://rundeck.example.org"
	    token: "mytoken"
	    state: present
	    project: "Ansible"
	    policy:
	      description: "my policy"
	      context:
	        application: rundeck
	      for:
	        project:
	          - allow: read
	      by:
	        group: "build"
	
	- name: Remove a rundeck system policy
	  rundeck_acl_policy:
	    name: "Project_02"
	    url: "https://rundeck.example.org"
	    token: "mytoken"
	    state: absent
	
	RETURN VALUES:
	
	
	rundeck_response:
	    description: Rundeck response when a failure occurs.
	    returned: failed
	    type: string
	before:
	    description: dictionnary containing ACL policy informations before modification.
	    returned: success
	    type: dict
	after:
	    description: dictionnary containing ACL policy informations after modification.
	    returned: success
	    type: dict
	

snippet rundeck_project
	EXAMPLES:
	- name: Create a rundeck project
	  rundeck_project:
	    name: "Project_01"
	    api_version: 18
	    url: "https://rundeck.example.org"
	    token: "mytoken"
	    state: present
	
	- name: Remove a rundeck project
	  rundeck_project:
	    name: "Project_02"
	    url: "https://rundeck.example.org"
	    token: "mytoken"
	    state: absent
	
	RETURN VALUES:
	
	
	rundeck_response:
	    description: Rundeck response when a failure occurs
	    returned: failed
	    type: string
	before:
	    description: dictionnary containing project informations before modification
	    returned: success
	    type: dict
	after:
	    description: dictionnary containing project informations after modification
	    returned: success
	    type: dict
	

snippet runit
	EXAMPLES:
	# Example action to start sv dnscache, if not running
	 - runit:
	    name: dnscache
	    state: started
	
	# Example action to stop sv dnscache, if running
	 - runit:
	    name: dnscache
	    state: stopped
	
	# Example action to kill sv dnscache, in all cases
	 - runit:
	    name: dnscache
	    state: killed
	
	# Example action to restart sv dnscache, in all cases
	 - runit:
	    name: dnscache
	    state: restarted
	
	# Example action to reload sv dnscache, in all cases
	 - runit:
	    name: dnscache
	    state: reloaded
	
	# Example using alt sv directory location
	 - runit:
	    name: dnscache
	    state: reloaded
	    service_dir: /run/service
	

snippet script
	EXAMPLES:
	# Example from Ansible Playbooks
	- script: /some/local/script.sh --some-arguments 1234
	
	# Run a script that creates a file, but only if the file is not yet created
	- script: /some/local/create_file.sh --some-arguments 1234
	  args:
	    creates: /the/created/file.txt
	
	# Run a script that removes a file, but only if the file is not yet removed
	- script: /some/local/remove_file.sh --some-arguments 1234
	  args:
	    removes: /the/removed/file.txt
	

snippet seboolean
	EXAMPLES:
	# Set (httpd_can_network_connect) flag on and keep it persistent across reboots
	- seboolean:
	    name: httpd_can_network_connect
	    state: yes
	    persistent: yes
	

snippet sefcontext
	EXAMPLES:
	# Allow apache to modify files in /srv/git_repos
	- sefcontext:
	    target: '/srv/git_repos(/.*)?'
	    setype: httpd_git_rw_content_t
	    state: present
	
	RETURN VALUES:
	
	
	# Default return values
	

snippet selinux
	EXAMPLES:
	# Enable SELinux
	- selinux:
	    policy: targeted
	    state: enforcing
	
	# Put SELinux in permissive mode, logging actions that would be blocked.
	- selinux:
	    policy: targeted
	    state: permissive
	
	# Disable SELinux
	- selinux:
	    state: disabled
	
	RETURN VALUES:
	
	
	msg:
	    description: Messages that describe changes that were made
	    returned: always
	    type: string
	    sample: Config SELinux state changed from 'disabled' to 'permissive'
	configfile:
	    description: Path to SELinux configuration file
	    returned: always
	    type: string
	    sample: /etc/selinux/config
	policy:
	    description: Name of the SELinux policy
	    returned: always
	    type: string
	    sample: targeted
	state:
	    description: SELinux mode
	    returned: always
	    type: string
	    sample: enforcing
	reboot_required:
	    description: Whether or not an reboot is required for the changes to take effect
	    returned: always
	    type: bool
	    sample: true
	

snippet selinux_permissive
	EXAMPLES:
	- selinux_permissive:
	    name: httpd_t
	    permissive: true
	

snippet sendgrid
	EXAMPLES:
	# send an email to a single recipient that the deployment was successful
	- sendgrid:
	    username: "{{ sendgrid_username }}"
	    password: "{{ sendgrid_password }}"
	    from_address: "ansible@mycompany.com"
	    to_addresses:
	      - "ops@mycompany.com"
	    subject: "Deployment success."
	    body: "The most recent Ansible deployment was successful."
	  delegate_to: localhost
	
	# send an email to more than one recipient that the build failed
	- sendgrid:
	      username: "{{ sendgrid_username }}"
	      password: "{{ sendgrid_password }}"
	      from_address: "build@mycompany.com"
	      to_addresses:
	        - "ops@mycompany.com"
	        - "devteam@mycompany.com"
	      subject: "Build failure!."
	      body: "Unable to pull source repository from Git server."
	  delegate_to: localhost
	

snippet sensu_check
	EXAMPLES:
	# Fetch metrics about the CPU load every 60 seconds,
	# the sensu server has a handler called 'relay' which forwards stats to graphite
	- name: get cpu metrics
	  sensu_check:
	    name: cpu_load
	    command: /etc/sensu/plugins/system/cpu-mpstat-metrics.rb
	    metric: yes
	    handlers: relay
	    subscribers: common
	    interval: 60
	
	# Check whether nginx is running
	- name: check nginx process
	  sensu_check:
	    name: nginx_running
	    command: /etc/sensu/plugins/processes/check-procs.rb -f /var/run/nginx.pid
	    handlers: default
	    subscribers: nginx
	    interval: 60
	
	# Stop monitoring the disk capacity.
	# Note that the check will still show up in the sensu dashboard,
	# to remove it completely you need to issue a DELETE request to the sensu api.
	- name: check disk
	  sensu_check:
	    name: check_disk_capacity
	    state: absent
	

snippet sensu_client
	EXAMPLES:
	# Minimum possible configuration
	- name: Configure Sensu client
	  sensu_client:
	    subscriptions:
	      - default
	
	# With customization
	- name: Configure Sensu client
	  sensu_client:
	    name: "{{ ansible_fqdn }}"
	    address: "{{ ansible_default_ipv4['address'] }}"
	    subscriptions:
	      - default
	      - webserver
	    redact:
	      - password
	    socket:
	      bind: 127.0.0.1
	      port: 3030
	    keepalive:
	      thresholds:
	        warning: 180
	        critical: 300
	      handlers:
	        - email
	      custom:
	        - broadcast: irc
	      occurrences: 3
	  register: client
	  notify:
	    - Restart sensu-client
	
	- name: Secure Sensu client configuration file
	  file:
	    path: "{{ client['file'] }}"
	    owner: "sensu"
	    group: "sensu"
	    mode: "0600"
	
	- name: Delete the Sensu client configuration
	  sensu_client:
	    state: "absent"
	
	RETURN VALUES:
	
	
	config:
	  description: Effective client configuration, when state is present
	  returned: success
	  type: dict
	  sample: {'name': 'client', 'subscriptions': ['default']}
	file:
	  description: Path to the client configuration file
	  returned: success
	  type: string
	  sample: "/etc/sensu/conf.d/client.json"
	

snippet sensu_handler
	EXAMPLES:
	# Configure a handler that sends event data as STDIN (pipe)
	- name: Configure IRC Sensu handler
	  sensu_handler:
	    name: "irc_handler"
	    type: "pipe"
	    command: "/usr/local/bin/notify-irc.sh"
	    severities:
	      - "ok"
	      - "critical"
	      - "warning"
	      - "unknown"
	    timeout: 15
	  notify:
	    - Restart sensu-client
	    - Restart sensu-server
	
	# Delete a handler
	- name: Delete IRC Sensu handler
	  sensu_handler:
	    name: "irc_handler"
	    state: "absent"
	
	# Example of a TCP handler
	- name: Configure TCP Sensu handler
	  sensu_handler:
	    name: "tcp_handler"
	    type: "tcp"
	    timeout: 30
	    socket:
	      host: "10.0.1.99"
	      port: 4444
	  register: handler
	  notify:
	    - Restart sensu-client
	    - Restart sensu-server
	
	- name: Secure Sensu handler configuration file
	  file:
	    path: "{{ handler['file'] }}"
	    owner: "sensu"
	    group: "sensu"
	    mode: "0600"
	
	RETURN VALUES:
	
	
	config:
	  description: Effective handler configuration, when state is present
	  returned: success
	  type: dict
	  sample: {'name': 'irc', 'type': 'pipe', 'command': '/usr/local/bin/notify-irc.sh'}
	file:
	  description: Path to the handler configuration file
	  returned: success
	  type: string
	  sample: "/etc/sensu/conf.d/handlers/irc.json"
	name:
	  description: Name of the handler
	  returned: success
	  type: string
	  sample: "irc"
	

snippet sensu_silence
	EXAMPLES:
	# Silence ALL checks for a given client
	- name: Silence server1.example.dev
	  sensu_silence:
	    subscription: client:server1.example.dev
	    creator: "{{ ansible_user_id }}"
	    reason: Performing maintenance
	
	# Silence specific check for a client
	- name: Silence CPU_Usage check for server1.example.dev
	  sensu_silence:
	    subscription: client:server1.example.dev
	    check: CPU_Usage
	    creator: "{{ ansible_user_id }}"
	    reason: Investigation alert issue
	
	# Silence multiple clients from a dict
	  silence:
	    server1.example.dev:
	      reason: 'Deployment in progress'
	    server2.example.dev:
	      reason: 'Deployment in progress'
	
	- name: Silence several clients from a dict
	  sensu_silence:
	    subscription: "client:{{ item.key }}"
	    reason: "{{ item.value.reason }}"
	    creator: "{{ ansible_user_id }}"
	  with_dict: "{{ silence }}"
	
	RETURN VALUES:
	
	
	

snippet sensu_subscription
	EXAMPLES:
	# Subscribe to the nginx channel
	- name: subscribe to nginx checks
	  sensu_subscription: name=nginx
	
	# Unsubscribe from the common checks channel
	- name: unsubscribe from common checks
	  sensu_subscription: name=common state=absent
	
	RETURN VALUES:
	
	
	reasons:
	    description: the reasons why the moule changed or did not change something
	    returned: success
	    type: list
	    sample: ["channel subscription was absent and state is `present'"]
	

snippet seport
	EXAMPLES:
	# Allow Apache to listen on tcp port 8888
	- seport:
	    ports: 8888
	    proto: tcp
	    setype: http_port_t
	    state: present
	
	# Allow sshd to listen on tcp port 8991
	- seport:
	    ports: 8991
	    proto: tcp
	    setype: ssh_port_t
	    state: present
	
	# Allow memcached to listen on tcp ports 10000-10100 and 10112
	- seport:
	    ports: 10000-10100,10112
	    proto: tcp
	    setype: memcache_port_t
	    state: present
	

snippet serverless
	EXAMPLES:
	# Basic deploy of a service
	- serverless:
	    service_path: '{{ project_dir }}'
	    state: present
	
	# Deploy specific functions
	- serverless:
	    service_path: '{{ project_dir }}'
	    functions:
	      - my_func_one
	      - my_func_two
	
	# deploy a project, then pull its resource list back into Ansible
	- serverless:
	    stage: dev
	    region: us-east-1
	    service_path: '{{ project_dir }}'
	  register: sls
	# The cloudformation stack is always named the same as the full service, so the
	# cloudformation_facts module can get a full list of the stack resources, as
	# well as stack events and outputs
	- cloudformation_facts:
	    region: us-east-1
	    stack_name: '{{ sls.service_name }}'
	    stack_resources: true
	
	# Deploy a project but use a locally installed serverless binary instead of the global serverless binary
	- serverless:
	    stage: dev
	    region: us-east-1
	    service_path: '{{ project_dir }}'
	    serverless_bin_path: node_modules/.bin/serverless
	
	RETURN VALUES:
	
	
	service_name:
	  type: string
	  description: Most
	  returned: always
	  sample: my-fancy-service-dev
	state:
	  type: string
	  description: Whether the stack for the serverless project is present/absent.
	  returned: always
	command:
	  type: string
	  description: Full `serverless` command run by this module, in case you want to re-run the command outside the module.
	  returned: always
	  sample: serverless deploy --stage production
	

snippet service
	EXAMPLES:
	# Example action to start service httpd, if not running
	- service:
	    name: httpd
	    state: started
	
	# Example action to stop service httpd, if running
	- service:
	    name: httpd
	    state: stopped
	
	# Example action to restart service httpd, in all cases
	- service:
	    name: httpd
	    state: restarted
	
	# Example action to reload service httpd, in all cases
	- service:
	    name: httpd
	    state: reloaded
	
	# Example action to enable service httpd, and not touch the running state
	- service:
	    name: httpd
	    enabled: yes
	
	# Example action to start service foo, based on running process /usr/bin/foo
	- service:
	    name: foo
	    pattern: /usr/bin/foo
	    state: started
	
	# Example action to restart network service for interface eth0
	- service:
	    name: network
	    state: restarted
	    args: eth0
	

snippet set_fact
	EXAMPLES:
	# Example setting host facts using key=value pairs, note that this always creates strings or booleans
	- set_fact: one_fact="something" other_fact="{{ local_var }}"
	
	# Example setting host facts using complex arguments
	- set_fact:
	     one_fact: something
	     other_fact: "{{ local_var * 2 }}"
	     another_fact: "{{ some_registered_var.results | map(attribute='ansible_facts.some_fact') | list }}"
	
	# Example setting facts so that they will be persisted in the fact cache
	- set_fact:
	    one_fact: something
	    other_fact: "{{ local_var * 2 }}"
	    cacheable: true
	
	# As of 1.8, Ansible will convert boolean strings ('true', 'false', 'yes', 'no')
	# to proper boolean values when using the key=value syntax, however it is still
	# recommended that booleans be set using the complex argument style:
	- set_fact:
	    one_fact: true
	    other_fact: false
	

snippet set_stats
	EXAMPLES:
	# Aggregating packages_installed stat per host
	- set_stats:
	    data:
	      packages_installed: 31
	
	# Aggregating random stats for all hosts using complex arguments
	- set_stats:
	    data:
	      one_stat: 11
	      other_stat: "{{ local_var * 2 }}"
	      another_stat: "{{ some_registered_var.results | map(attribute='ansible_facts.some_fact') | list }}"
	    per_host: no
	
	
	# setting stats (not aggregating)
	- set_stats:
	    data:
	      the_answer: 42
	    aggregate: no
	

snippet setup
	EXAMPLES:
	# Display facts from all hosts and store them indexed by I(hostname) at C(/tmp/facts).
	# ansible all -m setup --tree /tmp/facts
	
	# Display only facts regarding memory found by ansible on all hosts and output them.
	# ansible all -m setup -a 'filter=ansible_*_mb'
	
	# Display only facts returned by facter.
	# ansible all -m setup -a 'filter=facter_*'
	
	# Collect only facts returned by facter.
	# ansible all -m setup -a 'gather_subset=!all,!any,facter'
	
	# Display only facts about certain interfaces.
	# ansible all -m setup -a 'filter=ansible_eth[0-2]'
	
	# Restrict additional gathered facts to network and virtual (includes default minimum facts)
	# ansible all -m setup -a 'gather_subset=network,virtual'
	
	# Collect only network and virtual (excludes default minimum facts)
	# ansible all -m setup -a 'gather_subset=!all,!any,network,virtual'
	
	# Do not call puppet facter or ohai even if present.
	# ansible all -m setup -a 'gather_subset=!facter,!ohai'
	
	# Only collect the default minimum amount of facts:
	# ansible all -m setup -a 'gather_subset=!all'
	
	# Collect no facts, even the default minimum subset of facts:
	# ansible all -m setup -a 'gather_subset=!all,!min'
	
	# Display facts from Windows hosts with custom facts stored in C(C:\custom_facts).
	# ansible windows -m setup -a "fact_path='c:\custom_facts'"
	

snippet sf_account_manager
	EXAMPLES:
	- name: Create Account
	  sf_account_manager:
	    hostname: "{{ solidfire_hostname }}"
	    username: "{{ solidfire_username }}"
	    password: "{{ solidfire_password }}"
	    state: present
	    name: TenantA
	
	- name: Modify Account
	  sf_account_manager:
	    hostname: "{{ solidfire_hostname }}"
	    username: "{{ solidfire_username }}"
	    password: "{{ solidfire_password }}"
	    state: present
	    name: TenantA
	    new_name: TenantA-Renamed
	
	- name: Delete Account
	  sf_account_manager:
	    hostname: "{{ solidfire_hostname }}"
	    username: "{{ solidfire_username }}"
	    password: "{{ solidfire_password }}"
	    state: absent
	    name: TenantA-Renamed
	
	RETURN VALUES:
	
	
	
	

snippet sf_check_connections
	EXAMPLES:
	- name: Check connections to MVIP and SVIP
	     sf_check_connections:
	       hostname: "{{ solidfire_hostname }}"
	       username: "{{ solidfire_username }}"
	       password: "{{ solidfire_password }}"
	
	RETURN VALUES:
	
	
	
	

snippet sf_snapshot_schedule_manager
	EXAMPLES:
	- name: Create Snapshot schedule
	     sf_snapshot_schedule_manager:
	       hostname: "{{ solidfire_hostname }}"
	       username: "{{ solidfire_username }}"
	       password: "{{ solidfire_password }}"
	       state: present
	       name: Schedule_A
	       time_interval_days: 1
	       starting_date: 2016--12--01T00:00:00Z
	       volumes: 7
	
	   - name: Update Snapshot schedule
	     sf_snapshot_schedule_manager:
	       hostname: "{{ solidfire_hostname }}"
	       username: "{{ solidfire_username }}"
	       password: "{{ solidfire_password }}"
	       state: present
	       schedule_id: 6
	       recurring: True
	       snapshot_name: AnsibleSnapshots
	
	   - name: Delete Snapshot schedule
	     sf_snapshot_schedule_manager:
	       hostname: "{{ solidfire_hostname }}"
	       username: "{{ solidfire_username }}"
	       password: "{{ solidfire_password }}"
	       state: absent
	       schedule_id: 6
	
	RETURN VALUES:
	
	
	
	schedule_id:
	    description: Schedule ID of the newly created schedule
	    returned: success
	    type: string
	

snippet sf_volume_access_group_manager
	EXAMPLES:
	- name: Create Volume Access Group
	     sf_volume_access_group_manager:
	       hostname: "{{ solidfire_hostname }}"
	       username: "{{ solidfire_username }}"
	       password: "{{ solidfire_password }}"
	       state: present
	       name: AnsibleVolumeAccessGroup
	       volumes: [7,8]
	
	   - name: Modify Volume Access Group
	     sf_volume_access_group_manager:
	       hostname: "{{ solidfire_hostname }}"
	       username: "{{ solidfire_username }}"
	       password: "{{ solidfire_password }}"
	       state: present
	       volume_access_group_id: 1
	       name: AnsibleVolumeAccessGroup-Renamed
	       attributes: {"volumes": [1,2,3], "virtual_network_id": 12345}
	
	   - name: Delete Volume Access Group
	     sf_volume_access_group_manager:
	       hostname: "{{ solidfire_hostname }}"
	       username: "{{ solidfire_username }}"
	       password: "{{ solidfire_password }}"
	       state: absent
	       volume_access_group_id: 1
	
	RETURN VALUES:
	
	
	
	
	

snippet sf_volume_manager
	EXAMPLES:
	- name: Create Volume
	     sf_volume_manager:
	       hostname: "{{ solidfire_hostname }}"
	       username: "{{ solidfire_username }}"
	       password: "{{ solidfire_password }}"
	       state: present
	       name: AnsibleVol
	       qos: {minIOPS: 1000, maxIOPS: 20000, burstIOPS: 50000}
	       account_id: 3
	       enable512e: False
	       size: 1
	       size_unit: gb
	
	   - name: Update Volume
	     sf_volume_manager:
	       hostname: "{{ solidfire_hostname }}"
	       username: "{{ solidfire_username }}"
	       password: "{{ solidfire_password }}"
	       state: present
	       name: AnsibleVol
	       account_id: 3
	       access: readWrite
	
	   - name: Delete Volume
	     sf_volume_manager:
	       hostname: "{{ solidfire_hostname }}"
	       username: "{{ solidfire_username }}"
	       password: "{{ solidfire_password }}"
	       state: absent
	       name: AnsibleVol
	       account_id: 2
	
	RETURN VALUES:
	
	
	
	msg:
	    description: Success message
	    returned: success
	    type: string
	
	

snippet shell
	EXAMPLES:
	- name: Execute the command in remote shell; stdout goes to the specified file on the remote.
	  shell: somescript.sh >> somelog.txt
	
	- name: Change the working directory to somedir/ before executing the command.
	  shell: somescript.sh >> somelog.txt
	  args:
	    chdir: somedir/
	
	# You can also use the 'args' form to provide the options.
	- name: This command will change the working directory to somedir/ and will only run when somedir/somelog.txt doesn't exist.
	  shell: somescript.sh >> somelog.txt
	  args:
	    chdir: somedir/
	    creates: somelog.txt
	
	- name: Run a command that uses non-posix shell-isms (in this example /bin/sh doesn't handle redirection and wildcards together but bash does)
	  shell: cat < /tmp/*txt
	  args:
	    executable: /bin/bash
	
	- name: Run a command using a templated variable (always use quote filter to avoid injection)
	  shell: cat {{ myfile|quote }}
	
	# You can use shell to run other executables to perform actions inline
	- name: Run expect to wait for a successful PXE boot via out-of-band CIMC
	  shell: |
	    set timeout 300
	    spawn ssh admin@{{ cimc_host }}
	
	    expect "password:"
	    send "{{ cimc_password }}\n"
	
	    expect "\n{{ cimc_name }}"
	    send "connect host\n"
	
	    expect "pxeboot.n12"
	    send "\n"
	
	    exit 0
	  args:
	    executable: /usr/bin/expect
	  delegate_to: localhost
	
	RETURN VALUES:
	
	
	msg:
	    description: changed
	    returned: always
	    type: boolean
	    sample: True
	start:
	    description: The command execution start time
	    returned: always
	    type: string
	    sample: '2016-02-25 09:18:26.429568'
	end:
	    description: The command execution end time
	    returned: always
	    type: string
	    sample: '2016-02-25 09:18:26.755339'
	delta:
	    description: The command execution delta time
	    returned: always
	    type: string
	    sample: '0:00:00.325771'
	stdout:
	    description: The command standard output
	    returned: always
	    type: string
	    sample: 'Clustering node rabbit@slave1 with rabbit@master ...'
	stderr:
	    description: The command standard error
	    returned: always
	    type: string
	    sample: 'ls: cannot access foo: No such file or directory'
	cmd:
	    description: The command executed by the task
	    returned: always
	    type: string
	    sample: 'rabbitmqctl join_cluster rabbit@master'
	rc:
	    description: The command return code (0 means success)
	    returned: always
	    type: int
	    sample: 0
	stdout_lines:
	    description: The command standard output split in lines
	    returned: always
	    type: list
	    sample: [u'Clustering node rabbit@slave1 with rabbit@master ...']
	

snippet sl_vm
	EXAMPLES:
	- name: Build instance
	  hosts: localhost
	  gather_facts: False
	  tasks:
	  - name: Build instance request
	    sl_vm:
	      hostname: instance-1
	      domain: anydomain.com
	      datacenter: dal09
	      tags: ansible-module-test
	      hourly: True
	      private: False
	      dedicated: False
	      local_disk: True
	      cpus: 1
	      memory: 1024
	      disks: [25]
	      os_code: UBUNTU_LATEST
	      wait: False
	
	- name: Build additional instances
	  hosts: localhost
	  gather_facts: False
	  tasks:
	  - name: Build instances request
	    sl_vm:
	      hostname: "{{ item.hostname }}"
	      domain: "{{ item.domain }}"
	      datacenter: "{{ item.datacenter }}"
	      tags: "{{ item.tags }}"
	      hourly: "{{ item.hourly }}"
	      private: "{{ item.private }}"
	      dedicated: "{{ item.dedicated }}"
	      local_disk: "{{ item.local_disk }}"
	      cpus: "{{ item.cpus }}"
	      memory: "{{ item.memory }}"
	      disks: "{{ item.disks }}"
	      os_code: "{{ item.os_code }}"
	      ssh_keys: "{{ item.ssh_keys }}"
	      wait: "{{ item.wait }}"
	    with_items:
	      - hostname: instance-2
	        domain: anydomain.com
	        datacenter: dal09
	        tags:
	          - ansible-module-test
	          - ansible-module-test-slaves
	        hourly: True
	        private: False
	        dedicated: False
	        local_disk: True
	        cpus: 1
	        memory: 1024
	        disks:
	          - 25
	          - 100
	        os_code: UBUNTU_LATEST
	        ssh_keys: []
	        wait: True
	      - hostname: instance-3
	        domain: anydomain.com
	        datacenter: dal09
	        tags:
	          - ansible-module-test
	          - ansible-module-test-slaves
	        hourly: True
	        private: False
	        dedicated: False
	        local_disk: True
	        cpus: 1
	        memory: 1024
	        disks:
	          - 25
	          - 100
	        os_code: UBUNTU_LATEST
	        ssh_keys: []
	        wait: True
	
	- name: Cancel instances
	  hosts: localhost
	  gather_facts: False
	  tasks:
	  - name: Cancel by tag
	    sl_vm:
	      state: absent
	      tags: ansible-module-test
	
	RETURN VALUES:
	
	# 

snippet slack
	EXAMPLES:
	- name: Send notification message via Slack
	  slack:
	    token: thetoken/generatedby/slack
	    msg: '{{ inventory_hostname }} completed'
	  delegate_to: localhost
	
	- name: Send notification message via Slack all options
	  slack:
	    token: thetoken/generatedby/slack
	    msg: '{{ inventory_hostname }} completed'
	    channel: #ansible
	    username: 'Ansible on {{ inventory_hostname }}'
	    icon_url: http://www.example.com/some-image-file.png
	    link_names: 0
	    parse: 'none'
	  delegate_to: localhost
	
	- name: insert a color bar in front of the message for visibility purposes and use the default webhook icon and name configured in Slack
	  slack:
	    token: thetoken/generatedby/slack
	    msg: '{{ inventory_hostname }} is alive!'
	    color: good
	    username: ''
	    icon_url: ''
	
	- name: Use the attachments API
	  slack:
	    token: thetoken/generatedby/slack
	    attachments:
	      - text: Display my system load on host A and B
	        color: #ff00dd
	        title: System load
	        fields:
	          - title: System A
	            value: "load average: 0,74, 0,66, 0,63"
	            short: True
	          - title: System B
	            value: 'load average: 5,16, 4,64, 2,43'
	            short: True
	
	- name: Send a message with a link using Slack markup
	  slack:
	    token: thetoken/generatedby/slack
	    msg: We sent this message using <https://www.ansible.com|Ansible>!
	
	- name: Send a message with angle brackets and ampersands
	  slack:
	    token: thetoken/generatedby/slack
	    msg: This message has &lt;brackets&gt; &amp; ampersands in plain text.
	

snippet slackpkg
	EXAMPLES:
	# Install package foo
	- slackpkg:
	    name: foo
	    state: present
	
	# Remove packages foo and bar
	- slackpkg:
	    name: foo,bar
	    state: absent
	
	# Make sure that it is the most updated package
	- slackpkg:
	    name: foo
	    state: latest
	

snippet slurp
	EXAMPLES:
	- name: Find out what the remote machine's mounts are
	  slurp:
	    src: /proc/mounts
	  register: mounts
	
	- debug:
	    msg: "{{ mounts['content'] | b64decode }}"
	
	# From the commandline, find the pid of the remote machine's sshd
	# $ ansible host -m slurp -a 'src=/var/run/sshd.pid'
	# host | SUCCESS => {
	#     "changed": false,
	#     "content": "MjE3OQo=",
	#     "encoding": "base64",
	#     "source": "/var/run/sshd.pid"
	# }
	# $ echo MjE3OQo= | base64 -d
	# 2179
	

snippet smartos_image_facts
	EXAMPLES:
	# Return facts about all installed images.
	smartos_image_facts:
	
	# Return all private active Linux images.
	smartos_image_facts: filters="os=linux state=active public=false"
	
	# Show, how many clones does every image have.
	smartos_image_facts:
	
	debug: msg="{{ smartos_images[item]['name'] }}-{{smartos_images[item]['version'] }}
	            has {{ smartos_images[item]['clones'] }} VM(s)"
	with_items: "{{ smartos_images.keys() }}"
	
	RETURN VALUES:
	
	
	# this module returns ansible_facts
	

snippet snmp_facts
	EXAMPLES:
	# Gather facts with SNMP version 2
	- snmp_facts:
	    host: '{{ inventory_hostname }}'
	    version: v2c
	    community: public
	  delegate_to: local
	
	# Gather facts using SNMP version 3
	- snmp_facts:
	    host: '{{ inventory_hostname }}'
	    version: v3
	    level: authPriv
	    integrity: sha
	    privacy: aes
	    username: snmp-user
	    authkey: abc12345
	    privkey: def6789
	  delegate_to: localhost
	

snippet sns
	EXAMPLES:
	- name: Send default notification message via SNS
	  sns:
	    msg: '{{ inventory_hostname }} has completed the play.'
	    subject: Deploy complete!
	    topic: deploy
	  delegate_to: localhost
	
	- name: Send notification messages via SNS with short message for SMS
	  sns:
	    msg: '{{ inventory_hostname }} has completed the play.'
	    sms: deployed!
	    subject: Deploy complete!
	    topic: deploy
	  delegate_to: localhost
	
	- name: Send message with message_attributes
	  sns:
	    topic: "deploy"
	    msg: "message with extra details!"
	    message_attributes:
	      channel:
	        data_type: String
	        string_value: "mychannel"
	      color:
	        data_type: String
	        string_value: "green"
	  delegate_to: localhost
	

snippet sns_topic
	EXAMPLES:
	- name: Create alarm SNS topic
	  sns_topic:
	    name: "alarms"
	    state: present
	    display_name: "alarm SNS topic"
	    delivery_policy:
	      http:
	        defaultHealthyRetryPolicy:
	            minDelayTarget: 2
	            maxDelayTarget: 4
	            numRetries: 3
	            numMaxDelayRetries: 5
	            backoffFunction: "<linear|arithmetic|geometric|exponential>"
	        disableSubscriptionOverrides: True
	        defaultThrottlePolicy:
	            maxReceivesPerSecond: 10
	    subscriptions:
	      - endpoint: "my_email_address@example.com"
	        protocol: "email"
	      - endpoint: "my_mobile_number"
	        protocol: "sms"
	
	RETURN VALUES:
	
	
	sns_arn:
	    description: The ARN of the topic you are modifying
	    type: string
	    returned: always
	    sample: "arn:aws:sns:us-east-1:123456789012:my_topic_name"
	
	sns_topic:
	    description: Dict of sns topic details
	    type: dict
	    returned: always
	    sample:
	      name: sns-topic-name
	      state: present
	      display_name: default
	      policy: {}
	      delivery_policy: {}
	      subscriptions_new: []
	      subscriptions_existing: []
	      subscriptions_deleted: []
	      subscriptions_added: []
	      subscriptions_purge': false
	      check_mode: false
	      topic_created: false
	      topic_deleted: false
	      attributes_set: []
	

snippet solaris_zone
	EXAMPLES:
	- name: Create and install a zone, but don't boot it
	  solaris_zone:
	    name: zone1
	    state: present
	    path: /zones/zone1
	    sparse: True
	    root_password: Be9oX7OSwWoU.
	    config: 'set autoboot=true; add net; set physical=bge0; set address=10.1.1.1; end'
	
	- name: Create and install a zone and boot it
	  solaris_zone:
	    name: zone1
	    state: running
	    path: /zones/zone1
	    root_password: Be9oX7OSwWoU.
	    config: 'set autoboot=true; add net; set physical=bge0; set address=10.1.1.1; end'
	
	- name: Boot an already installed zone
	  solaris_zone:
	    name: zone1
	    state: running
	
	- name: Stop a zone
	  solaris_zone:
	    name: zone1
	    state: stopped
	
	- name: Destroy a zone
	  solaris_zone:
	    name: zone1
	    state: absent
	
	- name: Detach a zone
	  solaris_zone:
	    name: zone1
	    state: detached
	
	- name: Configure a zone, ready to be attached
	  solaris_zone:
	    name: zone1
	    state: configured
	    path: /zones/zone1
	    root_password: Be9oX7OSwWoU.
	    config: 'set autoboot=true; add net; set physical=bge0; set address=10.1.1.1; end'
	
	- name: Attach zone1
	  solaris_zone:
	    name: zone1
	    state: attached
	    attach_options: -u
	

snippet sorcery
	EXAMPLES:
	# Make sure spell 'foo' is installed
	- sorcery:
	    spell: foo
	    state: present
	
	# Make sure spells 'foo', 'bar' and 'baz' are removed
	- sorcery:
	    spell: foo,bar,baz
	    state: absent
	
	# Make sure spell 'foo' with dependencies 'bar' and 'baz' is installed
	- sorcery:
	    spell: foo
	    depends: bar,baz
	    state: present
	
	# Make sure spell 'foo' with 'bar' and without 'baz' dependencies is installed
	- sorcery:
	    spell: foo
	    depends: +bar,-baz
	    state: present
	
	# Make sure spell 'foo' with libressl (providing SSL) dependency is installed
	- sorcery:
	    spell: foo
	    depends: libressl(SSL)
	    state: present
	
	# Playbook: make sure spells with/without required dependencies (if any) are installed
	- sorcery:
	    name: "{{ item.spell }}"
	    depends: "{{ item.depends | default(None) }}"
	    state: present
	  with_items:
	    - { spell: 'vifm', depends: '+file,-gtk+2' }
	    - { spell: 'fwknop', depends: 'gpgme' }
	    - { spell: 'pv,tnftp,tor' }
	
	# Install the latest version of spell 'foo' using regular glossary
	- sorcery:
	    name: foo
	    state: latest
	
	# Rebuild spell 'foo'
	- sorcery:
	    spell: foo
	    state: rebuild
	
	# Rebuild the whole system, but update Sorcery and Codex first
	- sorcery:
	    spell: '*'
	    state: rebuild
	    update: yes
	    update_cache: yes
	
	# Refresh the grimoire collection if it's 1 day old using native sorcerous alias
	- sorcery:
	    update_codex: yes
	    cache_valid_time: 86400
	
	# Update only Sorcery itself
	- sorcery:
	    update: yes
	
	RETURN VALUES:
	
	
	

snippet sqs_queue
	EXAMPLES:
	# Create SQS queue with redrive policy
	- sqs_queue:
	    name: my-queue
	    region: ap-southeast-2
	    default_visibility_timeout: 120
	    message_retention_period: 86400
	    maximum_message_size: 1024
	    delivery_delay: 30
	    receive_message_wait_time: 20
	    policy: "{{ json_dict }}"
	    redrive_policy:
	      maxReceiveCount: 5
	      deadLetterTargetArn: arn:aws:sqs:eu-west-1:123456789012:my-dead-queue
	
	# Delete SQS queue
	- sqs_queue:
	    name: my-queue
	    region: ap-southeast-2
	    state: absent
	
	RETURN VALUES:
	
	
	default_visibility_timeout:
	    description: The default visibility timeout in seconds.
	    type: int
	    returned: always
	    sample: 30
	delivery_delay:
	    description: The delivery delay in seconds.
	    type: int
	    returned: always
	    sample: 0
	maximum_message_size:
	    description: The maximum message size in bytes.
	    type: int
	    returned: always
	    sample: 262144
	message_retention_period:
	    description: The message retention period in seconds.
	    type: int
	    returned: always
	    sample: 345600
	name:
	    description: Name of the SQS Queue
	    type: string
	    returned: always
	    sample: "queuename-987d2de0"
	queue_arn:
	    description: The queue's Amazon resource name (ARN).
	    type: string
	    returned: on successful creation or update of the queue
	    sample: 'arn:aws:sqs:us-east-1:199999999999:queuename-987d2de0'
	receive_message_wait_time:
	    description: The receive message wait time in seconds.
	    type: int
	    returned: always
	    sample: 0
	region:
	    description: Region that the queue was created within
	    type: string
	    returned: always
	    sample: 'us-east-1'
	

snippet stackdriver
	EXAMPLES:
	- stackdriver:
	    key: AAAAAA
	    event: deploy
	    deployed_to: production
	    deployed_by: leeroyjenkins
	    repository: MyWebApp
	    revision_id: abcd123
	
	- stackdriver:
	    key: AAAAAA
	    event: annotation
	    msg: Greetings from Ansible
	    annotated_by: leeroyjenkins
	    level: WARN
	    instance_id: i-abcd1234
	

snippet stacki_host
	EXAMPLES:
	- name: Add a host named test-1
	  stacki_host:
	    name: test-1
	    stacki_user: usr
	    stacki_password: pwd
	    stacki_endpoint: url
	    prim_intf_mac: mac_addr
	    prim_intf_ip: x.x.x.x
	    prim_intf: eth0
	
	- name: Remove a host named test-1
	  stacki_host:
	    name: test-1
	    stacki_user: usr
	    stacki_password: pwd
	    stacki_endpoint: url
	    state: absent
	
	RETURN VALUES:
	
	
	changed:
	  description: response to whether or not the api call completed successfully
	  returned: always
	  type: boolean
	  sample: true
	
	stdout:
	  description: the set of responses from the commands
	  returned: always
	  type: list
	  sample: ['...', '...']
	
	stdout_lines:
	  description: the value of stdout split into a list
	  returned: always
	  type: list
	  sample: [['...', '...'], ['...'], ['...']]
	

snippet stat
	EXAMPLES:
	# Obtain the stats of /etc/foo.conf, and check that the file still belongs
	# to 'root'. Fail otherwise.
	- stat:
	    path: /etc/foo.conf
	  register: st
	- fail:
	    msg: "Whoops! file ownership has changed"
	  when: st.stat.pw_name != 'root'
	
	# Determine if a path exists and is a symlink. Note that if the path does
	# not exist, and we test sym.stat.islnk, it will fail with an error. So
	# therefore, we must test whether it is defined.
	# Run this to understand the structure, the skipped ones do not pass the
	# check performed by 'when'
	- stat:
	    path: /path/to/something
	  register: sym
	
	- debug:
	    msg: "islnk isn't defined (path doesn't exist)"
	  when: sym.stat.islnk is not defined
	
	- debug:
	    msg: "islnk is defined (path must exist)"
	  when: sym.stat.islnk is defined
	
	- debug:
	    msg: "Path exists and is a symlink"
	  when: sym.stat.islnk is defined and sym.stat.islnk
	
	- debug:
	    msg: "Path exists and isn't a symlink"
	  when: sym.stat.islnk is defined and sym.stat.islnk == False
	
	
	# Determine if a path exists and is a directory.  Note that we need to test
	# both that p.stat.isdir actually exists, and also that it's set to true.
	- stat:
	    path: /path/to/something
	  register: p
	- debug:
	    msg: "Path exists and is a directory"
	  when: p.stat.isdir is defined and p.stat.isdir
	
	# Don't do md5 checksum
	- stat:
	    path: /path/to/myhugefile
	    get_md5: no
	
	# Use sha256 to calculate checksum
	- stat:
	    path: /path/to/something
	    checksum_algorithm: sha256
	
	RETURN VALUES:
	
	
	stat:
	    description: dictionary containing all the stat data, some platforms might add additional fields
	    returned: success
	    type: complex
	    contains:
	        exists:
	            description: if the destination path actually exists or not
	            returned: success
	            type: boolean
	            sample: True
	        path:
	            description: The full path of the file/object to get the facts of
	            returned: success and if path exists
	            type: string
	            sample: '/path/to/file'
	        mode:
	            description: Unix permissions of the file in octal
	            returned: success, path exists and user can read stats
	            type: octal
	            sample: 1755
	        isdir:
	            description: Tells you if the path is a directory
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: False
	        ischr:
	            description: Tells you if the path is a character device
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: False
	        isblk:
	            description: Tells you if the path is a block device
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: False
	        isreg:
	            description: Tells you if the path is a regular file
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: True
	        isfifo:
	            description: Tells you if the path is a named pipe
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: False
	        islnk:
	            description: Tells you if the path is a symbolic link
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: False
	        issock:
	            description: Tells you if the path is a unix domain socket
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: False
	        uid:
	            description: Numeric id representing the file owner
	            returned: success, path exists and user can read stats
	            type: int
	            sample: 1003
	        gid:
	            description: Numeric id representing the group of the owner
	            returned: success, path exists and user can read stats
	            type: int
	            sample: 1003
	        size:
	            description: Size in bytes for a plain file, amount of data for some special files
	            returned: success, path exists and user can read stats
	            type: int
	            sample: 203
	        inode:
	            description: Inode number of the path
	            returned: success, path exists and user can read stats
	            type: int
	            sample: 12758
	        dev:
	            description: Device the inode resides on
	            returned: success, path exists and user can read stats
	            type: int
	            sample: 33
	        nlink:
	            description: Number of links to the inode (hard links)
	            returned: success, path exists and user can read stats
	            type: int
	            sample: 1
	        atime:
	            description: Time of last access
	            returned: success, path exists and user can read stats
	            type: float
	            sample: 1424348972.575
	        mtime:
	            description: Time of last modification
	            returned: success, path exists and user can read stats
	            type: float
	            sample: 1424348972.575
	        ctime:
	            description: Time of last metadata update or creation (depends on OS)
	            returned: success, path exists and user can read stats
	            type: float
	            sample: 1424348972.575
	        wusr:
	            description: Tells you if the owner has write permission
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: True
	        rusr:
	            description: Tells you if the owner has read permission
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: True
	        xusr:
	            description: Tells you if the owner has execute permission
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: True
	        wgrp:
	            description: Tells you if the owner's group has write permission
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: False
	        rgrp:
	            description: Tells you if the owner's group has read permission
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: True
	        xgrp:
	            description: Tells you if the owner's group has execute permission
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: True
	        woth:
	            description: Tells you if others have write permission
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: False
	        roth:
	            description: Tells you if others have read permission
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: True
	        xoth:
	            description: Tells you if others have execute permission
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: True
	        isuid:
	            description: Tells you if the invoking user's id matches the owner's id
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: False
	        isgid:
	            description: Tells you if the invoking user's group id matches the owner's group id
	            returned: success, path exists and user can read stats
	            type: boolean
	            sample: False
	        lnk_source:
	            description: Target of the symlink normalized for the remote filesystem
	            returned: success, path exists and user can read stats and the path is a symbolic link
	            type: string
	            sample: /home/foobar/21102015-1445431274-908472971
	        lnk_target:
	            description: Target of the symlink.  Note that relative paths remain relative
	            returned: success, path exists and user can read stats and the path is a symbolic link
	            type: string
	            sample: ../foobar/21102015-1445431274-908472971
	            version_added: 2.4
	        md5:
	            description: md5 hash of the path
	            returned: success, path exists and user can read stats and path
	                supports hashing and md5 is supported
	            type: string
	            sample: f88fa92d8cf2eeecf4c0a50ccc96d0c0
	        checksum:
	            description: hash of the path
	            returned: success, path exists, user can read stats, path supports
	                hashing and supplied checksum algorithm is available
	            type: string
	            sample: 50ba294cdf28c0d5bcde25708df53346825a429f
	        pw_name:
	            description: User name of owner
	            returned: success, path exists and user can read stats and installed python supports it
	            type: string
	            sample: httpd
	        gr_name:
	            description: Group name of owner
	            returned: success, path exists and user can read stats and installed python supports it
	            type: string
	            sample: www-data
	        mime_type:
	            description: file magic data or mime-type
	            returned: success, path exists and user can read stats and
	                installed python supports it and the `mime` option was true, will
	                return 'unknown' on error.
	            type: string
	            sample: PDF document, version 1.2
	        charset:
	            description: file character set or encoding
	            returned: success, path exists and user can read stats and
	                installed python supports it and the `mime` option was true, will
	                return 'unknown' on error.
	            type: string
	            sample: us-ascii
	        readable:
	            description: Tells you if the invoking user has the right to read the path
	            returned: success, path exists and user can read the path
	            type: boolean
	            sample: False
	            version_added: 2.2
	        writeable:
	            description: Tells you if the invoking user has the right to write the path
	            returned: success, path exists and user can write the path
	            type: boolean
	            sample: False
	            version_added: 2.2
	        executable:
	            description: Tells you if the invoking user has the execute the path
	            returned: success, path exists and user can execute the path
	            type: boolean
	            sample: False
	            version_added: 2.2
	        attributes:
	            description: list of file attributes
	            returned: success, path exists and user can execute the path
	            type: list
	            sample: [ immutable, extent ]
	            version_added: 2.3
	

snippet statusio_maintenance
	EXAMPLES:
	- name: Create a maintenance window for 10 minutes on server1, with automation to stop the maintenance
	  statusio_maintenance:
	    title: Router Upgrade from ansible
	    desc: Performing a Router Upgrade
	    components: server1.example.com
	    api_id: api_id
	    api_key: api_key
	    statuspage: statuspage_id
	    maintenance_notify_1_hr: True
	    automation: True
	
	- name: Create a maintenance window for 60 minutes on server1 and server2
	  statusio_maintenance:
	    title: Routine maintenance
	    desc: Some security updates
	    components:
	      - server1.example.com
	      - server2.example.com
	    minutes: 60
	    api_id: api_id
	    api_key: api_key
	    statuspage: statuspage_id
	    maintenance_notify_1_hr: True
	    automation: True
	  delegate_to: localhost
	
	- name: Create a future maintenance window for 24 hours to all hosts inside the Primary Data Center
	  statusio_maintenance:
	    title: Data center downtime
	    desc: Performing a Upgrade to our data center
	    components: Primary Data Center
	    api_id: api_id
	    api_key: api_key
	    statuspage: statuspage_id
	    start_date: 01/01/2016
	    start_time: 12:00
	    minutes: 1440
	
	- name: Delete a maintenance window
	  statusio_maintenance:
	    title: Remove a maintenance window
	    maintenance_id: 561f90faf74bc94a4700087b
	    statuspage: statuspage_id
	    api_id: api_id
	    api_key: api_key
	    state: absent
	
	RETURN VALUES:
	
	 # 

snippet sts_assume_role
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# Assume an existing role (more details: http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html)
	sts_assume_role:
	  role_arn: "arn:aws:iam::123456789012:role/someRole"
	  role_session_name: "someRoleSession"
	register: assumed_role
	
	# Use the assumed role above to tag an instance in account 123456789012
	ec2_tag:
	  aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
	  aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
	  security_token: "{{ assumed_role.sts_creds.session_token }}"
	  resource: i-xyzxyz01
	  state: present
	  tags:
	    MyNewTag: value
	

snippet sts_session_token
	EXAMPLES:
	# Note: These examples do not set authentication details, see the AWS Guide for details.
	
	# Get a session token (more details: http://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html)
	sts_session_token:
	  duration_seconds: 3600
	register: session_credentials
	
	# Use the session token obtained above to tag an instance in account 123456789012
	ec2_tag:
	  aws_access_key: "{{ session_credentials.sts_creds.access_key }}"
	  aws_secret_key: "{{ session_credentials.sts_creds.secret_key }}"
	  security_token: "{{ session_credentials.sts_creds.session_token }}"
	  resource: i-xyzxyz01
	  state: present
	  tags:
	    MyNewTag: value
	
	RETURN VALUES:
	
	
	sts_creds:
	    description: The Credentials object returned by the AWS Security Token Service
	    returned: always
	    type: list
	    sample:
	      access_key: ASXXXXXXXXXXXXXXXXXX
	      expiration: "2016-04-08T11:59:47+00:00"
	      secret_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	      session_token: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	changed:
	    description: True if obtaining the credentials succeeds
	    type: bool
	    returned: always
	

snippet subversion
	EXAMPLES:
	# Checkout subversion repository to specified folder.
	- subversion:
	    repo: svn+ssh://an.example.org/path/to/repo
	    dest: /src/checkout
	
	# Export subversion directory to folder
	- subversion:
	    repo: svn+ssh://an.example.org/path/to/repo
	    dest: /src/export
	
	# Example just get information about the repository whether or not it has
	# already been cloned locally.
	- subversion:
	    repo: svn+ssh://an.example.org/path/to/repo
	    dest: /srv/checkout
	    checkout: no
	    update: no
	

snippet supervisorctl
	EXAMPLES:
	# Manage the state of program to be in 'started' state.
	- supervisorctl:
	    name: my_app
	    state: started
	
	# Manage the state of program group to be in 'started' state.
	- supervisorctl:
	    name: 'my_apps:'
	    state: started
	
	# Restart my_app, reading supervisorctl configuration from a specified file.
	- supervisorctl:
	    name: my_app
	    state: restarted
	    config: /var/opt/my_project/supervisord.conf
	
	# Restart my_app, connecting to supervisord with credentials and server URL.
	- supervisorctl:
	    name: my_app
	    state: restarted
	    username: test
	    password: testpass
	    server_url: http://localhost:9001
	

snippet svc
	EXAMPLES:
	# Example action to start svc dnscache, if not running
	 - svc:
	    name: dnscache
	    state: started
	
	# Example action to stop svc dnscache, if running
	 - svc:
	    name: dnscache
	    state: stopped
	
	# Example action to kill svc dnscache, in all cases
	 - svc:
	    name: dnscache
	    state: killed
	
	# Example action to restart svc dnscache, in all cases
	 - svc:
	    name: dnscache
	    state: restarted
	
	# Example action to reload svc dnscache, in all cases
	 - svc:
	    name: dnscache
	    state: reloaded
	
	# Example using alt svc directory location
	 - svc:
	    name: dnscache
	    state: reloaded
	    service_dir: /var/service
	

snippet svr4pkg
	EXAMPLES:
	# Install a package from an already copied file
	- svr4pkg:
	    name: CSWcommon
	    src: /tmp/cswpkgs.pkg
	    state: present
	
	# Install a package directly from an http site
	- svr4pkg:
	    name: CSWpkgutil
	    src: 'http://get.opencsw.org/now'
	    state: present
	    zone: current
	
	# Install a package with a response file
	- svr4pkg:
	    name: CSWggrep
	    src: /tmp/third-party.pkg
	    response_file: /tmp/ggrep.response
	    state: present
	
	# Ensure that a package is not installed.
	- svr4pkg:
	    name: SUNWgnome-sound-recorder
	    state: absent
	
	# Ensure that a category is not installed.
	- svr4pkg:
	    name: FIREFOX
	    state: absent
	    category: true
	

snippet swdepot
	EXAMPLES:
	- swdepot:
	    name: unzip-6.0
	    state: installed
	    depot: 'repository:/path'
	
	- swdepot:
	    name: unzip
	    state: latest
	    depot: 'repository:/path'
	
	- swdepot:
	    name: unzip
	    state: absent
	

snippet swupd
	EXAMPLES:
	- name: Update the OS to the latest version
	  swupd:
	    update: yes
	
	- name: Installs the "foo" bundle
	  swupd:
	    name: foo
	    state: present
	
	- name: Removes the "foo" bundle
	  swupd:
	    name: foo
	    state: absent
	
	- name: Check integrity of filesystem
	  swupd:
	    verify: yes
	
	- name: Downgrade OS to release 12920
	  swupd:
	    verify: yes
	    manifest: 12920
	
	RETURN VALUES:
	
	
	stdout:
	  description: stdout of swupd
	  returned: always
	  type: string
	stderr:
	  description: stderr of swupd
	  returned: always
	  type: string
	

snippet synchronize
	EXAMPLES:
	# Synchronization of src on the control machine to dest on the remote hosts
	- synchronize:
	    src: some/relative/path
	    dest: /some/absolute/path
	
	# Synchronization using rsync protocol (push)
	- synchronize:
	    src: some/relative/path/
	    dest: rsync://somehost.com/path/
	
	# Synchronization using rsync protocol (pull)
	- synchronize:
	    mode: pull
	    src: rsync://somehost.com/path/
	    dest: /some/absolute/path/
	
	# Synchronization using rsync protocol on delegate host (push)
	- synchronize:
	    src: /some/absolute/path/
	    dest: rsync://somehost.com/path/
	  delegate_to: delegate.host
	
	# Synchronization using rsync protocol on delegate host (pull)
	- synchronize:
	    mode: pull
	    src: rsync://somehost.com/path/
	    dest: /some/absolute/path/
	  delegate_to: delegate.host
	
	# Synchronization without any --archive options enabled
	- synchronize:
	    src: some/relative/path
	    dest: /some/absolute/path
	    archive: no
	
	# Synchronization with --archive options enabled except for --recursive
	- synchronize:
	    src: some/relative/path
	    dest: /some/absolute/path
	    recursive: no
	
	# Synchronization with --archive options enabled except for --times, with --checksum option enabled
	- synchronize:
	    src: some/relative/path
	    dest: /some/absolute/path
	    checksum: yes
	    times: no
	
	# Synchronization without --archive options enabled except use --links
	- synchronize:
	    src: some/relative/path
	    dest: /some/absolute/path
	    archive: no
	    links: yes
	
	# Synchronization of two paths both on the control machine
	- synchronize:
	    src: some/relative/path
	    dest: /some/absolute/path
	  delegate_to: localhost
	
	# Synchronization of src on the inventory host to the dest on the localhost in pull mode
	- synchronize:
	    mode: pull
	    src: some/relative/path
	    dest: /some/absolute/path
	
	# Synchronization of src on delegate host to dest on the current inventory host.
	- synchronize:
	    src: /first/absolute/path
	    dest: /second/absolute/path
	  delegate_to: delegate.host
	
	# Synchronize two directories on one remote host.
	- synchronize:
	    src: /first/absolute/path
	    dest: /second/absolute/path
	  delegate_to: "{{ inventory_hostname }}"
	
	# Synchronize and delete files in dest on the remote host that are not found in src of localhost.
	- synchronize:
	    src: some/relative/path
	    dest: /some/absolute/path
	    delete: yes
	    recursive: yes
	
	# Synchronize using an alternate rsync command
	# This specific command is granted su privileges on the destination
	- synchronize:
	    src: some/relative/path
	    dest: /some/absolute/path
	    rsync_path: "su -c rsync"
	
	# Example .rsync-filter file in the source directory
	# - var       # exclude any path whose last part is 'var'
	# - /var      # exclude any path starting with 'var' starting at the source directory
	# + /var/conf # include /var/conf even though it was previously excluded
	
	# Synchronize passing in extra rsync options
	- synchronize:
	    src: /tmp/helloworld
	    dest: /var/www/helloworld
	    rsync_opts:
	      - "--no-motd"
	      - "--exclude=.git"
	

snippet sysctl
	EXAMPLES:
	# Set vm.swappiness to 5 in /etc/sysctl.conf
	- sysctl:
	    name: vm.swappiness
	    value: 5
	    state: present
	
	# Remove kernel.panic entry from /etc/sysctl.conf
	- sysctl:
	    name: kernel.panic
	    state: absent
	    sysctl_file: /etc/sysctl.conf
	
	# Set kernel.panic to 3 in /tmp/test_sysctl.conf
	- sysctl:
	    name: kernel.panic
	    value: 3
	    sysctl_file: /tmp/test_sysctl.conf
	    reload: no
	
	# Set ip forwarding on in /proc and do not reload the sysctl file
	- sysctl:
	    name: net.ipv4.ip_forward
	    value: 1
	    sysctl_set: yes
	
	# Set ip forwarding on in /proc and in the sysctl file and reload if necessary
	- sysctl:
	    name: net.ipv4.ip_forward
	    value: 1
	    sysctl_set: yes
	    state: present
	    reload: yes
	

snippet syslogger
	EXAMPLES:
	# Full example
	- name: Test syslog
	  syslogger:
	    msg: "Hello from ansible"
	    priority: "err"
	    facility: "daemon"
	    log_pid: true
	
	# Basic usage
	- name: Simple Usage
	  syslogger:
	    msg: "I will end up as daemon.info"
	
	RETURN VALUES:
	
	
	

snippet systemd
	EXAMPLES:
	- name: Make sure a service is running
	  systemd: state=started name=httpd
	
	- name: stop service cron on debian, if running
	  systemd: name=cron state=stopped
	
	- name: restart service cron on centos, in all cases, also issue daemon-reload to pick up config changes
	  systemd:
	    state: restarted
	    daemon_reload: yes
	    name: crond
	
	- name: reload service httpd, in all cases
	  systemd:
	    name: httpd
	    state: reloaded
	
	- name: enable service httpd and ensure it is not masked
	  systemd:
	    name: httpd
	    enabled: yes
	    masked: no
	
	- name: enable a timer for dnf-automatic
	  systemd:
	    name: dnf-automatic.timer
	    state: started
	    enabled: True
	
	- name: just force systemd to reread configs (2.4 and above)
	  systemd: daemon_reload=yes
	
	RETURN VALUES:
	
	
	status:
	    description: A dictionary with the key=value pairs returned from `systemctl show`
	    returned: success
	    type: complex
	    contains: {
	            "ActiveEnterTimestamp": "Sun 2016-05-15 18:28:49 EDT",
	            "ActiveEnterTimestampMonotonic": "8135942",
	            "ActiveExitTimestampMonotonic": "0",
	            "ActiveState": "active",
	            "After": "auditd.service systemd-user-sessions.service time-sync.target systemd-journald.socket basic.target system.slice",
	            "AllowIsolate": "no",
	            "Before": "shutdown.target multi-user.target",
	            "BlockIOAccounting": "no",
	            "BlockIOWeight": "1000",
	            "CPUAccounting": "no",
	            "CPUSchedulingPolicy": "0",
	            "CPUSchedulingPriority": "0",
	            "CPUSchedulingResetOnFork": "no",
	            "CPUShares": "1024",
	            "CanIsolate": "no",
	            "CanReload": "yes",
	            "CanStart": "yes",
	            "CanStop": "yes",
	            "CapabilityBoundingSet": "18446744073709551615",
	            "ConditionResult": "yes",
	            "ConditionTimestamp": "Sun 2016-05-15 18:28:49 EDT",
	            "ConditionTimestampMonotonic": "7902742",
	            "Conflicts": "shutdown.target",
	            "ControlGroup": "/system.slice/crond.service",
	            "ControlPID": "0",
	            "DefaultDependencies": "yes",
	            "Delegate": "no",
	            "Description": "Command Scheduler",
	            "DevicePolicy": "auto",
	            "EnvironmentFile": "/etc/sysconfig/crond (ignore_errors=no)",
	            "ExecMainCode": "0",
	            "ExecMainExitTimestampMonotonic": "0",
	            "ExecMainPID": "595",
	            "ExecMainStartTimestamp": "Sun 2016-05-15 18:28:49 EDT",
	            "ExecMainStartTimestampMonotonic": "8134990",
	            "ExecMainStatus": "0",
	            "ExecReload": "{ path=/bin/kill ; argv[]=/bin/kill -HUP $MAINPID ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }",
	            "ExecStart": "{ path=/usr/sbin/crond ; argv[]=/usr/sbin/crond -n $CRONDARGS ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }",
	            "FragmentPath": "/usr/lib/systemd/system/crond.service",
	            "GuessMainPID": "yes",
	            "IOScheduling": "0",
	            "Id": "crond.service",
	            "IgnoreOnIsolate": "no",
	            "IgnoreOnSnapshot": "no",
	            "IgnoreSIGPIPE": "yes",
	            "InactiveEnterTimestampMonotonic": "0",
	            "InactiveExitTimestamp": "Sun 2016-05-15 18:28:49 EDT",
	            "InactiveExitTimestampMonotonic": "8135942",
	            "JobTimeoutUSec": "0",
	            "KillMode": "process",
	            "KillSignal": "15",
	            "LimitAS": "18446744073709551615",
	            "LimitCORE": "18446744073709551615",
	            "LimitCPU": "18446744073709551615",
	            "LimitDATA": "18446744073709551615",
	            "LimitFSIZE": "18446744073709551615",
	            "LimitLOCKS": "18446744073709551615",
	            "LimitMEMLOCK": "65536",
	            "LimitMSGQUEUE": "819200",
	            "LimitNICE": "0",
	            "LimitNOFILE": "4096",
	            "LimitNPROC": "3902",
	            "LimitRSS": "18446744073709551615",
	            "LimitRTPRIO": "0",
	            "LimitRTTIME": "18446744073709551615",
	            "LimitSIGPENDING": "3902",
	            "LimitSTACK": "18446744073709551615",
	            "LoadState": "loaded",
	            "MainPID": "595",
	            "MemoryAccounting": "no",
	            "MemoryLimit": "18446744073709551615",
	            "MountFlags": "0",
	            "Names": "crond.service",
	            "NeedDaemonReload": "no",
	            "Nice": "0",
	            "NoNewPrivileges": "no",
	            "NonBlocking": "no",
	            "NotifyAccess": "none",
	            "OOMScoreAdjust": "0",
	            "OnFailureIsolate": "no",
	            "PermissionsStartOnly": "no",
	            "PrivateNetwork": "no",
	            "PrivateTmp": "no",
	            "RefuseManualStart": "no",
	            "RefuseManualStop": "no",
	            "RemainAfterExit": "no",
	            "Requires": "basic.target",
	            "Restart": "no",
	            "RestartUSec": "100ms",
	            "Result": "success",
	            "RootDirectoryStartOnly": "no",
	            "SameProcessGroup": "no",
	            "SecureBits": "0",
	            "SendSIGHUP": "no",
	            "SendSIGKILL": "yes",
	            "Slice": "system.slice",
	            "StandardError": "inherit",
	            "StandardInput": "null",
	            "StandardOutput": "journal",
	            "StartLimitAction": "none",
	            "StartLimitBurst": "5",
	            "StartLimitInterval": "10000000",
	            "StatusErrno": "0",
	            "StopWhenUnneeded": "no",
	            "SubState": "running",
	            "SyslogLevelPrefix": "yes",
	            "SyslogPriority": "30",
	            "TTYReset": "no",
	            "TTYVHangup": "no",
	            "TTYVTDisallocate": "no",
	            "TimeoutStartUSec": "1min 30s",
	            "TimeoutStopUSec": "1min 30s",
	            "TimerSlackNSec": "50000",
	            "Transient": "no",
	            "Type": "simple",
	            "UMask": "0022",
	            "UnitFileState": "enabled",
	            "WantedBy": "multi-user.target",
	            "Wants": "system.slice",
	            "WatchdogTimestampMonotonic": "0",
	            "WatchdogUSec": "0",
	        }
	

snippet taiga_issue
	EXAMPLES:
	# Create an issue in the my hosted Taiga environment and attach an error log
	- taiga_issue:
	    taiga_host: https://mytaigahost.example.com
	    project: myproject
	    subject: An error has been found
	    issue_type: Bug
	    priority: High
	    status: New
	    severity: Important
	    description: An error has been found. Please check the attached error log for details.
	    attachment: /path/to/error.log
	    attachment_description: Error log file
	    tags:
	      - Error
	      - Needs manual check
	    state: present
	
	# Deletes the previously created issue
	- taiga_issue:
	    taiga_host: https://mytaigahost.example.com
	    project: myproject
	    subject: An error has been found
	    issue_type: Bug
	    state: absent
	
	RETURN VALUES:
	
	# 

snippet telegram
	EXAMPLES:
	- name: send a message to chat in playbook
	  telegram:
	    token: '9999999:XXXXXXXXXXXXXXXXXXXXXXX'
	    chat_id: 000000
	    msg: Ansible task finished
	
	RETURN VALUES:
	
	
	
	msg:
	  description: The message you attempted to send
	  returned: success
	  type: string
	  sample: "Ansible task finished"
	telegram_error:
	  description: Error message gotten from Telegram API
	  returned: failure
	  type: string
	  sample: "Bad Request: message text is empty"
	

snippet telnet
	EXAMPLES:
	- name: send configuration commands to IOS
	  telnet:
	    user: cisco
	    password: cisco
	    login_prompt: "Username: "
	    prompts:
	      - "[>|#]"
	    command:
	      - terminal length 0
	      - configure terminal
	      - hostname ios01
	
	- name: run show commands
	  telnet:
	    user: cisco
	    password: cisco
	    login_prompt: "Username: "
	    prompts:
	      - "[>|#]"
	    command:
	      - terminal length 0
	      - show version
	
	RETURN VALUES:
	
	
	output:
	    description: output of each command is an element in this list
	    type: list
	    returned: always
	    sample: [ 'success', 'success', '', 'warning .. something' ]
	

snippet tempfile
	EXAMPLES:
	- name: create temporary build directory
	  tempfile:
	    state: directory
	    suffix: build
	
	- name: create temporary file
	  tempfile:
	    state: file
	    suffix: temp
	
	RETURN VALUES:
	
	
	path:
	  description: Path to created file or directory
	  returned: success
	  type: string
	  sample: "/tmp/ansible.bMlvdk"
	

snippet template
	EXAMPLES:
	# Example from Ansible Playbooks
	- template:
	    src: /mytemplates/foo.j2
	    dest: /etc/file.conf
	    owner: bin
	    group: wheel
	    mode: 0644
	
	# The same example, but using symbolic modes equivalent to 0644
	- template:
	    src: /mytemplates/foo.j2
	    dest: /etc/file.conf
	    owner: bin
	    group: wheel
	    mode: "u=rw,g=r,o=r"
	
	# Create a DOS-style text file from a template
	- template:
	    src: config.ini.j2
	    dest: /share/windows/config.ini
	    newline_sequence: '\r\n'
	
	# Copy a new "sudoers" file into place, after passing validation with visudo
	- template:
	    src: /mine/sudoers
	    dest: /etc/sudoers
	    validate: '/usr/sbin/visudo -cf %s'
	
	# Update sshd configuration safely, avoid locking yourself out
	- template:
	    src: etc/ssh/sshd_config.j2
	    dest: /etc/ssh/sshd_config
	    owner: root
	    group: root
	    mode: '0600'
	    validate: /usr/sbin/sshd -t -f %s
	    backup: yes
	

snippet timezone
	EXAMPLES:
	- name: set timezone to Asia/Tokyo
	  timezone:
	    name: Asia/Tokyo
	
	RETURN VALUES:
	
	
	diff:
	  description: The differences about the given arguments.
	  returned: success
	  type: complex
	  contains:
	    before:
	      description: The values before change
	      type: dict
	    after:
	      description: The values after change
	      type: dict
	

snippet twilio
	EXAMPLES:
	# send an SMS about the build status to (555) 303 5681
	# note: replace account_sid and auth_token values with your credentials
	# and you have to have the 'from_number' on your Twilio account
	- twilio:
	    msg: All servers with webserver role are now configured.
	    account_sid: ACXXXXXXXXXXXXXXXXX
	    auth_token: ACXXXXXXXXXXXXXXXXX
	    from_number: +15552014545
	    to_number: +15553035681
	  delegate_to: localhost
	
	# send an SMS to multiple phone numbers about the deployment
	# note: replace account_sid and auth_token values with your credentials
	# and you have to have the 'from_number' on your Twilio account
	- twilio:
	    msg: This server configuration is now complete.
	    account_sid: ACXXXXXXXXXXXXXXXXX
	    auth_token: ACXXXXXXXXXXXXXXXXX
	    from_number: +15553258899
	    to_number:
	      - +15551113232
	      - +12025551235
	      - +19735559010
	  delegate_to: localhost
	
	# send an MMS to a single recipient with an update on the deployment
	# and an image of the results
	# note: replace account_sid and auth_token values with your credentials
	# and you have to have the 'from_number' on your Twilio account
	- twilio:
	    msg: Deployment complete!
	    account_sid: ACXXXXXXXXXXXXXXXXX
	    auth_token: ACXXXXXXXXXXXXXXXXX
	    from_number: +15552014545
	    to_number: +15553035681
	    media_url: https://demo.twilio.com/logo.png
	  delegate_to: localhost
	

snippet typetalk
	EXAMPLES:
	- typetalk:
	    client_id: 12345
	    client_secret: 12345
	    topic: 1
	    msg: install completed
	

snippet udm_dns_record
	EXAMPLES:
	# Create a DNS record on a UCS
	- udm_dns_zone:
	    name: www
	    zone: example.com
	    type: host_record
	    data:
	      - a: 192.0.2.1
	
	RETURN VALUES:
	
	# 

snippet udm_dns_zone
	EXAMPLES:
	# Create a DNS zone on a UCS
	- udm_dns_zone:
	    zone: example.com
	    type: forward_zone
	    nameserver:
	      - ucs.example.com
	    interfaces:
	      - 192.0.2.1
	
	RETURN VALUES:
	
	# 

snippet udm_group
	EXAMPLES:
	# Create a POSIX group
	- udm_group:
	    name: g123m-1A
	
	# Create a POSIX group with the exact DN
	# C(cn=g123m-1A,cn=classes,cn=students,cn=groups,ou=school,dc=school,dc=example,dc=com)
	- udm_group:
	    name: g123m-1A
	    subpath: 'cn=classes,cn=students,cn=groups'
	    ou: school
	# or
	- udm_group:
	    name: g123m-1A
	    position: 'cn=classes,cn=students,cn=groups,ou=school,dc=school,dc=example,dc=com'
	
	RETURN VALUES:
	
	# 

snippet udm_share
	EXAMPLES:
	# Create a share named home on the server ucs.example.com with the path /home.
	- udm_share:
	    name: home
	    path: /home
	    host: ucs.example.com
	    sambaName: Home
	
	RETURN VALUES:
	
	# 

snippet udm_user
	EXAMPLES:
	# Create a user on a UCS
	- udm_user:
	    name: FooBar
	    password: secure_password
	    firstname: Foo
	    lastname: Bar
	
	# Create a user with the DN
	# C(uid=foo,cn=teachers,cn=users,ou=school,dc=school,dc=example,dc=com)
	- udm_user:
	    name: foo
	    password: secure_password
	    firstname: Foo
	    lastname: Bar
	    ou: school
	    subpath: 'cn=teachers,cn=users'
	# or define the position
	- udm_user:
	    name: foo
	    password: secure_password
	    firstname: Foo
	    lastname: Bar
	    position: 'cn=teachers,cn=users,ou=school,dc=school,dc=example,dc=com'
	
	RETURN VALUES:
	
	# 

snippet ufw
	EXAMPLES:
	# Allow everything and enable UFW
	- ufw:
	    state: enabled
	    policy: allow
	
	# Set logging
	- ufw:
	    logging: on
	
	# Sometimes it is desirable to let the sender know when traffic is
	# being denied, rather than simply ignoring it. In these cases, use
	# reject instead of deny. In addition, log rejected connections:
	- ufw:
	    rule: reject
	    port: auth
	    log: yes
	
	# ufw supports connection rate limiting, which is useful for protecting
	# against brute-force login attacks. ufw will deny connections if an IP
	# address has attempted to initiate 6 or more connections in the last
	# 30 seconds. See  http://www.debian-administration.org/articles/187
	# for details. Typical usage is:
	- ufw:
	    rule: limit
	    port: ssh
	    proto: tcp
	
	# Allow OpenSSH. (Note that as ufw manages its own state, simply removing
	# a rule=allow task can leave those ports exposed. Either use delete=yes
	# or a separate state=reset task)
	- ufw:
	    rule: allow
	    name: OpenSSH
	
	# Delete OpenSSH rule
	- ufw:
	    rule: allow
	    name: OpenSSH
	    delete: yes
	
	# Deny all access to port 53:
	- ufw:
	    rule: deny
	    port: 53
	
	# Allow port range 60000-61000
	- ufw:
	    rule: allow
	    port: '60000:61000'
	
	# Allow all access to tcp port 80:
	- ufw:
	    rule: allow
	    port: 80
	    proto: tcp
	
	# Allow all access from RFC1918 networks to this host:
	- ufw:
	    rule: allow
	    src: '{{ item }}'
	  with_items:
	    - 10.0.0.0/8
	    - 172.16.0.0/12
	    - 192.168.0.0/16
	
	# Deny access to udp port 514 from host 1.2.3.4 and include a comment:
	- ufw:
	    rule: deny
	    proto: udp
	    src: 1.2.3.4
	    port: 514
	    comment: "Block syslog"
	
	# Allow incoming access to eth0 from 1.2.3.5 port 5469 to 1.2.3.4 port 5469
	- ufw:
	    rule: allow
	    interface: eth0
	    direction: in
	    proto: udp
	    src: 1.2.3.5
	    from_port: 5469
	    dest: 1.2.3.4
	    to_port: 5469
	
	# Deny all traffic from the IPv6 2001:db8::/32 to tcp port 25 on this host.
	# Note that IPv6 must be enabled in /etc/default/ufw for IPv6 firewalling to work.
	- ufw:
	    rule: deny
	    proto: tcp
	    src: '2001:db8::/32'
	    port: 25
	
	# Deny forwarded/routed traffic from subnet 1.2.3.0/24 to subnet 4.5.6.0/24.
	# Can be used to further restrict a global FORWARD policy set to allow
	- ufw:
	    rule: deny
	    route: yes
	    src: 1.2.3.0/24
	    dest: 4.5.6.0/24
	

snippet unarchive
	EXAMPLES:
	- name: Extract foo.tgz into /var/lib/foo
	  unarchive:
	    src: foo.tgz
	    dest: /var/lib/foo
	
	- name: Unarchive a file that is already on the remote machine
	  unarchive:
	    src: /tmp/foo.zip
	    dest: /usr/local/bin
	    remote_src: yes
	
	- name: Unarchive a file that needs to be downloaded (added in 2.0)
	  unarchive:
	    src: https://example.com/example.zip
	    dest: /usr/local/bin
	    remote_src: yes
	

snippet uptimerobot
	EXAMPLES:
	# Pause the monitor with an ID of 12345.
	- uptimerobot:
	    monitorid: 12345
	    apikey: 12345-1234512345
	    state: paused
	
	# Start the monitor with an ID of 12345.
	- uptimerobot:
	    monitorid: 12345
	    apikey: 12345-1234512345
	    state: started
	

snippet uri
	EXAMPLES:
	- name: Check that you can connect (GET) to a page and it returns a status 200
	  uri:
	    url: http://www.example.com
	
	# Check that a page returns a status 200 and fail if the word AWESOME is not
	# in the page contents.
	- uri:
	    url: http://www.example.com
	    return_content: yes
	  register: webpage
	
	- name: Fail if AWESOME is not in the page content
	  fail:
	  when: "'AWESOME' not in webpage.content"
	
	
	- name: Create a JIRA issue
	  uri:
	    url: https://your.jira.example.com/rest/api/2/issue/
	    method: POST
	    user: your_username
	    password: your_pass
	    body: "{{ lookup('file','issue.json') }}"
	    force_basic_auth: yes
	    status_code: 201
	    body_format: json
	
	# Login to a form based webpage, then use the returned cookie to
	# access the app in later tasks
	
	- uri:
	    url: https://your.form.based.auth.example.com/index.php
	    method: POST
	    body: "name=your_username&password=your_password&enter=Sign%20in"
	    status_code: 302
	    headers:
	      Content-Type: "application/x-www-form-urlencoded"
	  register: login
	
	- uri:
	    url: https://your.form.based.auth.example.com/dashboard.php
	    method: GET
	    return_content: yes
	    headers:
	      Cookie: "{{login.set_cookie}}"
	
	- name: Queue build of a project in Jenkins
	  uri:
	    url: "http://{{ jenkins.host }}/job/{{ jenkins.job }}/build?token={{ jenkins.token }}"
	    method: GET
	    user: "{{ jenkins.user }}"
	    password: "{{ jenkins.password }}"
	    force_basic_auth: yes
	    status_code: 201
	
	RETURN VALUES:
	
	
	# The return information includes all the HTTP headers in lower-case.
	msg:
	  description: The HTTP message from the request
	  returned: always
	  type: string
	  sample: OK (unknown bytes)
	redirected:
	  description: Whether the request was redirected
	  returned: always
	  type: bool
	  sample: false
	status:
	  description: The HTTP status code from the request
	  returned: always
	  type: int
	  sample: 200
	url:
	  description: The actual URL used for the request
	  returned: always
	  type: string
	  sample: https://www.ansible.com/
	

snippet urpmi
	EXAMPLES:
	# install package foo
	- urpmi:
	    pkg: foo
	    state: present
	
	# remove package foo
	- urpmi:
	    pkg: foo
	    state: absent
	
	# description: remove packages foo and bar
	- urpmi:
	    pkg: foo,bar
	    state: absent
	
	# description: update the package database (urpmi.update -a -q) and install bar (bar will be the updated if a newer version exists)
	- urpmi:
	    name: bar
	    state: present
	    update_cache: yes
	

snippet user
	EXAMPLES:
	# Add the user 'johnd' with a specific uid and a primary group of 'admin'
	- user:
	    name: johnd
	    comment: "John Doe"
	    uid: 1040
	    group: admin
	
	# Add the user 'james' with a bash shell, appending the group 'admins' and 'developers' to the user's groups
	- user:
	    name: james
	    shell: /bin/bash
	    groups: admins,developers
	    append: yes
	
	# Remove the user 'johnd'
	- user:
	    name: johnd
	    state: absent
	    remove: yes
	
	# Create a 2048-bit SSH key for user jsmith in ~jsmith/.ssh/id_rsa
	- user:
	    name: jsmith
	    generate_ssh_key: yes
	    ssh_key_bits: 2048
	    ssh_key_file: .ssh/id_rsa
	
	# added a consultant whose account you want to expire
	- user:
	    name: james18
	    shell: /bin/zsh
	    groups: developers
	    expires: 1422403387
	

snippet vca_fw
	EXAMPLES:
	#Add a set of firewall rules
	
	- hosts: localhost
	  connection: local
	  tasks:
	   - vca_fw:
	       instance_id: 'b15ff1e5-1024-4f55-889f-ea0209726282'
	       vdc_name: 'benz_ansible'
	       state: 'absent'
	       fw_rules:
	         - description: "ben testing"
	           source_ip: "Any"
	           dest_ip: 192.0.2.23
	         - description: "ben testing 2"
	           source_ip: 192.0.2.50
	           source_port: "Any"
	           dest_port: "22"
	           dest_ip: 192.0.2.101
	           is_enable: "true"
	           enable_logging: "false"
	           protocol: "Tcp"
	           policy: "allow"
	

snippet vca_nat
	EXAMPLES:
	#An example for a source nat
	
	- hosts: localhost
	  connection: local
	  tasks:
	   - vca_nat:
	       instance_id: 'b15ff1e5-1024-4f55-889f-ea0209726282'
	       vdc_name: 'benz_ansible'
	       state: 'present'
	       nat_rules:
	         - rule_type: SNAT
	           original_ip: 192.0.2.42
	           translated_ip: 203.0.113.23
	
	#example for a DNAT
	- hosts: localhost
	  connection: local
	  tasks:
	   - vca_nat:
	       instance_id: 'b15ff1e5-1024-4f55-889f-ea0209726282'
	       vdc_name: 'benz_ansible'
	       state: 'present'
	       nat_rules:
	         - rule_type: DNAT
	           original_ip: 203.0.113.23
	           original_port: 22
	           translated_ip: 192.0.2.42
	           translated_port: 22
	

snippet vca_vapp
	EXAMPLES:
	- name: Creates a new vApp in a VCA instance
	  vca_vapp:
	    vapp_name: tower
	    state: present
	    template_name: 'Ubuntu Server 12.04 LTS (amd64 20150127)'
	    vdc_name: VDC1
	    instance_id: '<your instance id here>'
	    username: '<your username here>'
	    password: '<your password here>'
	

snippet vcenter_license
	EXAMPLES:
	- name: Add a new vCenter license
	  vcenter_license:
	    hostname: '{{ vcenter_hostname }}'
	    username: '{{ vcenter_username }}'
	    password: '{{ vcenter_password }}'
	    license: f600d-21ae3-5592b-249e0-cc341
	    state: present
	  delegate_to: localhost
	
	- name: Remove an (unused) vCenter license
	  vmware_license:
	    hostname: '{{ vcenter_hostname }}'
	    username: '{{ vcenter_username }}'
	    password: '{{ vcenter_password }}'
	    license: f600d-21ae3-5592b-249e0-cc341
	    state: absent
	  delegate_to: localhost
	
	RETURN VALUES:
	
	
	licenses:
	    description: list of license keys after module executed
	    returned: always
	    type: list
	    sample:
	    - f600d-21ae3-5592b-249e0-cc341
	    - 143cc-0e942-b2955-3ea12-d006f
	

snippet vdirect_file
	EXAMPLES:
	- name: vdirect_file
	  vdirect_file:
	      vdirect_primary_ip: 10.10.10.10
	      vdirect_user: vDirect
	      vdirect_password: radware
	      file_name: /tmp/get_vlans.vm
	
	RETURN VALUES:
	
	
	result:
	    description: Message detailing upload result
	    returned: success
	    type: string
	    sample: "Workflow template created"
	

snippet vertica_configuration
	EXAMPLES:
	- name: updating load_balance_policy
	  vertica_configuration: name=failovertostandbyafter value='8 hours'
	

snippet vertica_facts
	EXAMPLES:
	- name: gathering vertica facts
	  vertica_facts: db=db_name
	

snippet vertica_role
	EXAMPLES:
	- name: creating a new vertica role
	  vertica_role: name=role_name db=db_name state=present
	
	- name: creating a new vertica role with other role assigned
	  vertica_role: name=role_name assigned_role=other_role_name state=present
	

snippet vertica_schema
	EXAMPLES:
	- name: creating a new vertica schema
	  vertica_schema: name=schema_name db=db_name state=present
	
	- name: creating a new schema with specific schema owner
	  vertica_schema: name=schema_name owner=dbowner db=db_name state=present
	
	- name: creating a new schema with roles
	  vertica_schema:
	    name=schema_name
	    create_roles=schema_name_all
	    usage_roles=schema_name_ro,schema_name_rw
	    db=db_name
	    state=present
	

snippet vertica_user
	EXAMPLES:
	- name: creating a new vertica user with password
	  vertica_user: name=user_name password=md5<encrypted_password> db=db_name state=present
	
	- name: creating a new vertica user authenticated via ldap with roles assigned
	  vertica_user:
	    name=user_name
	    ldap=true
	    db=db_name
	    roles=schema_name_ro
	    state=present
	

snippet virt
	EXAMPLES:
	# a playbook task line:
	- virt:
	    name: alpha
	    state: running
	
	# /usr/bin/ansible invocations
	# ansible host -m virt -a "name=alpha command=status"
	# ansible host -m virt -a "name=alpha command=get_xml"
	# ansible host -m virt -a "name=alpha command=create uri=lxc:///"
	
	---
	# a playbook example of defining and launching an LXC guest
	tasks:
	  - name: define vm
	    virt:
	        name: foo
	        command: define
	        xml: "{{ lookup('template', 'container-template.xml.j2') }}"
	        uri: 'lxc:///'
	  - name: start vm
	    virt:
	        name: foo
	        state: running
	        uri: 'lxc:///'
	
	RETURN VALUES:
	
	
	# for list_vms command
	list_vms:
	    description: The list of vms defined on the remote system
	    type: dictionary
	    returned: success
	    sample: [
	        "build.example.org",
	        "dev.example.org"
	    ]
	# for status command
	status:
	    description: The status of the VM, among running, crashed, paused and shutdown
	    type: string
	    sample: "success"
	    returned: success
	

snippet virt_net
	EXAMPLES:
	# Define a new network
	- virt_net:
	    command: define
	    name: br_nat
	    xml: '{{ lookup("template", "network/bridge.xml.j2") }}'
	
	# Start a network
	- virt_net:
	    command: create
	    name: br_nat
	
	# List available networks
	- virt_net:
	    command: list_nets
	
	# Get XML data of a specified network
	- virt_net:
	    command: get_xml
	    name: br_nat
	
	# Stop a network
	- virt_net:
	    command: destroy
	    name: br_nat
	
	# Undefine a network
	- virt_net:
	    command: undefine
	    name: br_nat
	
	# Gather facts about networks
	# Facts will be available as 'ansible_libvirt_networks'
	- virt_net:
	    command: facts
	
	# Gather information about network managed by 'libvirt' remotely using uri
	- virt_net:
	    command: info
	    uri: '{{ item }}'
	  with_items: '{{ libvirt_uris }}'
	  register: networks
	
	# Ensure that a network is active (needs to be defined and built first)
	- virt_net:
	    state: active
	    name: br_nat
	
	# Ensure that a network is inactive
	- virt_net:
	    state: inactive
	    name: br_nat
	
	# Ensure that a given network will be started at boot
	- virt_net:
	    autostart: yes
	    name: br_nat
	
	# Disable autostart for a given network
	- virt_net:
	    autostart: no
	    name: br_nat
	

snippet virt_pool
	EXAMPLES:
	# Define a new storage pool
	- virt_pool:
	    command: define
	    name: vms
	    xml: '{{ lookup("template", "pool/dir.xml.j2") }}'
	
	# Build a storage pool if it does not exist
	- virt_pool:
	    command: build
	    name: vms
	
	# Start a storage pool
	- virt_pool:
	    command: create
	    name: vms
	
	# List available pools
	- virt_pool:
	    command: list_pools
	
	# Get XML data of a specified pool
	- virt_pool:
	    command: get_xml
	    name: vms
	
	# Stop a storage pool
	- virt_pool:
	    command: destroy
	    name: vms
	
	# Delete a storage pool (destroys contents)
	- virt_pool:
	    command: delete
	    name: vms
	
	# Undefine a storage pool
	- virt_pool:
	    command: undefine
	    name: vms
	
	# Gather facts about storage pools
	# Facts will be available as 'ansible_libvirt_pools'
	- virt_pool:
	    command: facts
	
	# Gather information about pools managed by 'libvirt' remotely using uri
	- virt_pool:
	    command: info
	    uri: '{{ item }}'
	  with_items: '{{ libvirt_uris }}'
	  register: storage_pools
	
	# Ensure that a pool is active (needs to be defined and built first)
	- virt_pool:
	    state: active
	    name: vms
	
	# Ensure that a pool is inactive
	- virt_pool:
	    state: inactive
	    name: vms
	
	# Ensure that a given pool will be started at boot
	- virt_pool:
	    autostart: yes
	    name: vms
	
	# Disable autostart for a given pool
	- virt_pool:
	    autostart: no
	    name: vms
	

snippet vmadm
	EXAMPLES:
	- name: create SmartOS zone
	  vmadm:
	    brand: joyent
	    state: present
	    alias: fw_zone
	    image_uuid: 95f265b8-96b2-11e6-9597-972f3af4b6d5
	    firewall_enabled: yes
	    indestructible_zoneroot: yes
	    nics:
	      - nic_tag: admin
	        ip: dhcp
	        primary: true
	    internal_metadata:
	      root_pw: 'secret'
	    quota: 1
	
	- name: Delete a zone
	  vmadm:
	    alias: test_zone
	    state: deleted
	
	- name: Stop all zones
	  vmadm:
	    uuid: '*'
	    state: stopped
	
	RETURN VALUES:
	
	
	uuid:
	  description: UUID of the managed VM.
	  returned: always
	  type: string
	  sample: 'b217ab0b-cf57-efd8-cd85-958d0b80be33'
	alias:
	  description: Alias of the managed VM.
	  returned: When addressing a VM by alias.
	  type: string
	  sample: 'dns-zone'
	state:
	  description: State of the target, after execution.
	  returned: success
	  type: string
	  sample: 'running'
	

snippet vsphere_copy
	EXAMPLES:
	- vsphere_copy:
	    host: vhost
	    login: vuser
	    password: vpass
	    src: /some/local/file
	    datacenter: DC1 Someplace
	    datastore: datastore1
	    path: some/remote/file
	  transport: local
	- vsphere_copy:
	    host: vhost
	    login: vuser
	    password: vpass
	    src: /other/local/file
	    datacenter: DC2 Someplace
	    datastore: datastore2
	    path: other/remote/file
	  delegate_to: other_system
	

snippet vsphere_guest
	EXAMPLES:
	---
	# Create a new VM on an ESX server
	# Returns changed = False when the VM already exists
	# Returns changed = True and a adds ansible_facts from the new VM
	# State will set the power status of a guest upon creation. Use powered_on to create and boot.
	# Options ['state', 'vm_extra_config', 'vm_disk', 'vm_nic', 'vm_hardware', 'esxi'] are required together
	# Note: vm_floppy support added in 2.0
	
	- vsphere_guest:
	    vcenter_hostname: vcenter.mydomain.local
	    username: myuser
	    password: mypass
	    guest: newvm001
	    state: powered_on
	    vm_extra_config:
	      vcpu.hotadd: yes
	      mem.hotadd:  yes
	      notes: This is a test VM
	      folder: MyFolder
	    vm_disk:
	      disk1:
	        size_gb: 10
	        type: thin
	        datastore: storage001
	        # VMs can be put into folders. The value given here is either the full path
	        # to the folder (e.g. production/customerA/lamp) or just the last component
	        # of the path (e.g. lamp):
	        folder: production/customerA/lamp
	    vm_nic:
	      nic1:
	        type: vmxnet3
	        network: VM Network
	        network_type: standard
	      nic2:
	        type: vmxnet3
	        network: dvSwitch Network
	        network_type: dvs
	    vm_hardware:
	      memory_mb: 2048
	      num_cpus: 2
	      osid: centos64Guest
	      scsi: paravirtual
	      vm_cdrom:
	        type: "iso"
	        iso_path: "DatastoreName/cd-image.iso"
	      vm_floppy:
	        type: "image"
	        image_path: "DatastoreName/floppy-image.flp"
	    esxi:
	      datacenter: MyDatacenter
	      hostname: esx001.mydomain.local
	
	# Reconfigure the CPU and Memory on the newly created VM
	# Will return the changes made
	
	- vsphere_guest:
	    vcenter_hostname: vcenter.mydomain.local
	    username: myuser
	    password: mypass
	    guest: newvm001
	    state: reconfigured
	    vm_extra_config:
	      vcpu.hotadd: yes
	      mem.hotadd:  yes
	      notes: This is a test VM
	    vm_disk:
	      disk1:
	        size_gb: 10
	        type: thin
	        datastore: storage001
	    vm_nic:
	      nic1:
	        type: vmxnet3
	        network: VM Network
	        network_type: standard
	    vm_hardware:
	      memory_mb: 4096
	      num_cpus: 4
	      osid: centos64Guest
	      scsi: paravirtual
	    esxi:
	      datacenter: MyDatacenter
	      hostname: esx001.mydomain.local
	
	# Deploy a guest from a template
	- vsphere_guest:
	    vcenter_hostname: vcenter.mydomain.local
	    username: myuser
	    password: mypass
	    guest: newvm001
	    from_template: yes
	    template_src: centosTemplate
	    cluster: MainCluster
	    resource_pool: "/Resources"
	    vm_extra_config:
	      folder: MyFolder
	
	# Task to gather facts from a vSphere cluster only if the system is a VMware guest
	
	- vsphere_guest:
	    vcenter_hostname: vcenter.mydomain.local
	    username: myuser
	    password: mypass
	    guest: newvm001
	    vmware_guest_facts: yes
	
	---
	# Typical output of a vsphere_facts run on a guest
	# If vmware tools is not installed, ipadresses with return None
	
	- hw_eth0:
	  - addresstype: "assigned"
	    label: "Network adapter 1"
	    macaddress: "00:22:33:33:44:55"
	    macaddress_dash: "00-22-33-33-44-55"
	    ipaddresses: ['192.0.2.100', '2001:DB8:56ff:feac:4d8a']
	    summary: "VM Network"
	  hw_guest_full_name: "newvm001"
	  hw_guest_id: "rhel6_64Guest"
	  hw_memtotal_mb: 2048
	  hw_name: "centos64Guest"
	  hw_power_status: "POWERED ON"
	  hw_processor_count: 2
	  hw_product_uuid: "ef50bac8-2845-40ff-81d9-675315501dac"
	
	# hw_power_status will be one of the following values:
	#   - POWERED ON
	#   - POWERED OFF
	#   - SUSPENDED
	#   - POWERING ON
	#   - POWERING OFF
	#   - SUSPENDING
	#   - RESETTING
	#   - BLOCKED ON MSG
	#   - REVERTING TO SNAPSHOT
	#   - UNKNOWN
	# as seen in the VMPowerState-Class of PySphere: http://git.io/vlwOq
	
	---
	# Remove a vm from vSphere
	# The VM must be powered_off or you need to use force to force a shutdown
	- vsphere_guest:
	    vcenter_hostname: vcenter.mydomain.local
	    username: myuser
	    password: mypass
	    guest: newvm001
	    state: absent
	    force: yes
	

snippet wait_for
	EXAMPLES:
	- name: sleep for 300 seconds and continue with play
	  wait_for: timeout=300
	  delegate_to: localhost
	
	- name: Wait 300 seconds for port 8000 to become open on the host, don't start checking for 10 seconds
	  wait_for:
	    port: 8000
	    delay: 10
	
	- name: Wait 300 seconds for port 8000 of any IP to close active connections, don't start checking for 10 seconds
	  wait_for:
	    host: 0.0.0.0
	    port: 8000
	    delay: 10
	    state: drained
	
	- name: Wait 300 seconds for port 8000 of any IP to close active connections, ignoring connections for specified hosts
	  wait_for:
	    host: 0.0.0.0
	    port: 8000
	    state: drained
	    exclude_hosts: 10.2.1.2,10.2.1.3
	
	- name: Wait until the file /tmp/foo is present before continuing
	  wait_for:
	    path: /tmp/foo
	
	- name: Wait until the string "completed" is in the file /tmp/foo before continuing
	  wait_for:
	    path: /tmp/foo
	    search_regex: completed
	
	- name: Wait until the lock file is removed
	  wait_for:
	    path: /var/lock/file.lock
	    state: absent
	
	- name: Wait until the process is finished and pid was destroyed
	  wait_for:
	    path: /proc/3466/status
	    state: absent
	
	- name: Output customized message when failed
	  wait_for:
	    path: /tmp/foo
	    state: present
	    msg: Timeout to find file /tmp/foo
	
	# Don't assume the inventory_hostname is resolvable and delay 10 seconds at start
	- name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"
	  wait_for:
	    port: 22
	    host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
	    search_regex: OpenSSH
	    delay: 10
	  connection: local
	
	# Same as above but you normally have ansible_connection set in inventory, which overrides 'connection'
	- name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"
	  wait_for:
	    port: 22
	    host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
	    search_regex: OpenSSH
	    delay: 10
	  vars:
	    ansible_connection: local
	

snippet wait_for_connection
	EXAMPLES:
	- name: Wait 600 seconds for target connection to become reachable/usable
	  wait_for_connection:
	
	- name: Wait 300 seconds, but only start checking after 60 seconds
	  wait_for_connection:
	    delay: 60
	    timeout: 300
	
	# Wake desktops, wait for them to become ready and continue playbook
	- hosts: all
	  gather_facts: no
	  tasks:
	  - name: Send magic Wake-On-Lan packet to turn on individual systems
	    wakeonlan:
	      mac: '{{ mac }}'
	      broadcast: 192.168.0.255
	    delegate_to: localhost
	
	  - name: Wait for system to become reachable
	    wait_for_connection:
	
	  - name: Gather facts for first time
	    setup:
	
	# Build a new VM, wait for it to become ready and continue playbook
	- hosts: all
	  gather_facts: no
	  tasks:
	  - name: Clone new VM, if missing
	    vmware_guest:
	      hostname: '{{ vcenter_ipaddress }}'
	      name: '{{ inventory_hostname_short }}'
	      template: Windows 2012R2
	      customization:
	        hostname: '{{ vm_shortname }}'
	        runonce:
	        - powershell.exe -ExecutionPolicy Unrestricted -File C:\Windows\Temp\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP
	    delegate_to: localhost
	
	  - name: Wait for system to become reachable over WinRM
	    wait_for_connection:
	      timeout: 900
	
	  - name: Gather facts for first time
	    setup:
	
	RETURN VALUES:
	
	
	elapsed:
	  description: The number of seconds that elapsed waiting for the connection to appear.
	  returned: always
	  type: int
	  sample: 23
	

snippet wakeonlan
	EXAMPLES:
	- name: Send a magic Wake-on-LAN packet to 00:00:5E:00:53:66
	  wakeonlan:
	    mac: '00:00:5E:00:53:66'
	    broadcast: 192.0.2.23
	  delegate_to: localhost
	
	- wakeonlan:
	    mac: 00:00:5E:00:53:66
	    port: 9
	  delegate_to: localhost
	
	RETURN VALUES:
	
	
	# Default return values
	

snippet webfaction_app
	EXAMPLES:
	- name: Create a test app
	    webfaction_app:
	      name="my_wsgi_app1"
	      state=present
	      type=mod_wsgi35-python27
	      login_name={{webfaction_user}}
	      login_password={{webfaction_passwd}}
	      machine={{webfaction_machine}}
	

snippet webfaction_db
	EXAMPLES:
	# This will also create a default DB user with the same
	  # name as the database, and the specified password.
	
	  - name: Create a database
	    webfaction_db:
	      name: "{{webfaction_user}}_db1"
	      password: mytestsql
	      type: mysql
	      login_name: "{{webfaction_user}}"
	      login_password: "{{webfaction_passwd}}"
	      machine: "{{webfaction_machine}}"
	
	  # Note that, for symmetry's sake, deleting a database using
	  # 'state: absent' will also delete the matching user.
	

snippet webfaction_domain
	EXAMPLES:
	- name: Create a test domain
	    webfaction_domain:
	      name: mydomain.com
	      state: present
	      subdomains:
	       - www
	       - blog
	      login_name: "{{webfaction_user}}"
	      login_password: "{{webfaction_passwd}}"
	
	  - name: Delete test domain and any subdomains
	    webfaction_domain:
	      name: mydomain.com
	      state: absent
	      login_name: "{{webfaction_user}}"
	      login_password: "{{webfaction_passwd}}"
	

snippet webfaction_mailbox
	EXAMPLES:
	- name: Create a mailbox
	    webfaction_mailbox:
	      mailbox_name="mybox"
	      mailbox_password="myboxpw"
	      state=present
	      login_name={{webfaction_user}}
	      login_password={{webfaction_passwd}}
	

snippet webfaction_site
	EXAMPLES:
	- name: create website
	    webfaction_site:
	      name: testsite1
	      state: present
	      host: myhost.webfaction.com
	      subdomains:
	        - 'testsite1.my_domain.org'
	      site_apps:
	        - ['testapp1', '/']
	      https: no
	      login_name: "{{webfaction_user}}"
	      login_password: "{{webfaction_passwd}}"
	

snippet win_acl
	EXAMPLES:
	- name: Restrict write and execute access to User Fed-Phil
	  win_acl:
	    user: Fed-Phil
	    path: C:\Important\Executable.exe
	    type: deny
	    rights: ExecuteFile,Write
	
	- name: Add IIS_IUSRS allow rights
	  win_acl:
	    path: C:\inetpub\wwwroot\MySite
	    user: IIS_IUSRS
	    rights: FullControl
	    type: allow
	    state: present
	    inherit: ContainerInherit, ObjectInherit
	    propagation: 'None'
	
	- name: set registry key right
	  win_acl:
	    path: HKCU:\Bovine\Key
	    user: BUILTIN\Users
	    rights: EnumerateSubKeys
	    type: allow
	    state: present
	    inherit: ContainerInherit, ObjectInherit
	    propagation: 'None'
	
	- name: Remove FullControl AccessRule for IIS_IUSRS
	  win_acl:
	    path: C:\inetpub\wwwroot\MySite
	    user: IIS_IUSRS
	    rights: FullControl
	    type: allow
	    state: absent
	    inherit: ContainerInherit, ObjectInherit
	    propagation: 'None'
	
	- name: Deny Intern
	  win_acl:
	    path: C:\Administrator\Documents
	    user: Intern
	    rights: Read,Write,Modify,FullControl,Delete
	    type: deny
	    state: present
	

snippet win_acl_inheritance
	EXAMPLES:
	- name: Disable inherited ACE's
	  win_acl_inheritance:
	    path: C:\apache
	    state: absent
	
	- name: Disable and copy inherited ACE's
	  win_acl_inheritance:
	    path: C:\apache
	    state: absent
	    reorganize: True
	
	- name: Enable and remove dedicated ACE's
	  win_acl_inheritance:
	    path: C:\apache
	    state: present
	    reorganize: True
	
	RETURN VALUES:
	
	
	
	

snippet win_chocolatey
	EXAMPLES:
	- name: Install git
	  win_chocolatey:
	    name: git
	    state: present
	
	- name: Upgrade installed packages
	  win_chocolatey:
	    name: all
	    state: latest
	
	- name: Install notepadplusplus version 6.6
	  win_chocolatey:
	    name: notepadplusplus.install
	    version: '6.6'
	
	- name: Install git from specified repository
	  win_chocolatey:
	    name: git
	    source: https://someserver/api/v2/
	
	- name: Uninstall git
	  win_chocolatey:
	    name: git
	    state: absent
	
	- name: Install multiple packages
	  win_chocolatey:
	    name: '{{ item }}'
	    state: present
	  with_items:
	  - pscx
	  - windirstat
	
	- name: uninstall multiple packages
	  win_chocolatey:
	    name: '{{ item }}'
	    state: absent
	  with_items:
	  - pscx
	  - windirstat
	
	- name: Install curl using proxy
	  win_chocolatey:
	    name: curl
	    proxy_url: http://proxy-server:8080/
	    proxy_username: joe
	    proxy_password: p@ssw0rd
	
	- name: Install curl with proxy credentials that contain quotes
	  win_chocolatey:
	    name: curl
	    proxy_url: http://proxy-server:8080/
	    proxy_username: user with \"escaped\" double quotes
	    proxy_password: pass with \"escaped\" double quotes
	
	- name: Install a package that requires 'become'
	  win_chocolatey:
	    name: officepro2013
	  become: yes
	  become_user: Administrator
	  become_method: runas
	
	RETURN VALUES:
	
	
	choco_bootstrap_output:
	  description: DEPRECATED, will be removed in 2.6, use stdout instead.
	  returned: changed, choco task returned a failure
	  type: str
	  sample: Chocolatey upgraded 1/1 packages.
	choco_error_cmd:
	  description: DEPRECATED, will be removed in 2.6, use command instead.
	  returned: changed, choco task returned a failure
	  type: str
	  sample: choco.exe install -r --no-progress -y sysinternals --timeout 2700 --failonunfound
	choco_error_log:
	  description: DEPRECATED, will be removed in 2.6, use stdout instead.
	  returned: changed, choco task returned a failure
	  type: str
	  sample: sysinternals not installed. The package was not found with the source(s) listed
	command:
	  description: The full command used in the chocolatey task.
	  returned: changed
	  type: str
	  sample: choco.exe install -r --no-progress -y sysinternals --timeout 2700 --failonunfound
	rc:
	  description: The return code from the chocolatey task.
	  returned: changed
	  type: int
	  sample: 0
	stdout:
	  description: The stdout from the chocolatey task. The verbosity level of the
	    messages are affected by Ansible verbosity setting, see notes for more
	    details.
	  returned: changed
	  type: str
	  sample: Chocolatey upgraded 1/1 packages.
	

snippet win_command
	EXAMPLES:
	- name: Save the result of 'whoami' in 'whoami_out'
	  win_command: whoami
	  register: whoami_out
	
	- name: Run command that only runs if folder exists and runs from a specific folder
	  win_command: wbadmin -backupTarget:C:\backup\
	  args:
	    chdir: C:\somedir\
	    creates: C:\backup\
	
	RETURN VALUES:
	
	
	msg:
	    description: changed
	    returned: always
	    type: boolean
	    sample: True
	start:
	    description: The command execution start time
	    returned: always
	    type: string
	    sample: '2016-02-25 09:18:26.429568'
	end:
	    description: The command execution end time
	    returned: always
	    type: string
	    sample: '2016-02-25 09:18:26.755339'
	delta:
	    description: The command execution delta time
	    returned: always
	    type: string
	    sample: '0:00:00.325771'
	stdout:
	    description: The command standard output
	    returned: always
	    type: string
	    sample: 'Clustering node rabbit@slave1 with rabbit@master ...'
	stderr:
	    description: The command standard error
	    returned: always
	    type: string
	    sample: 'ls: cannot access foo: No such file or directory'
	cmd:
	    description: The command executed by the task
	    returned: always
	    type: string
	    sample: 'rabbitmqctl join_cluster rabbit@master'
	rc:
	    description: The command return code (0 means success)
	    returned: always
	    type: int
	    sample: 0
	stdout_lines:
	    description: The command standard output split in lines
	    returned: always
	    type: list
	    sample: [u'Clustering node rabbit@slave1 with rabbit@master ...']
	

snippet win_copy
	EXAMPLES:
	- name: Copy a single file
	  win_copy:
	    src: /srv/myfiles/foo.conf
	    dest: c:\Temp\renamed-foo.conf
	
	- name: Copy a single file keeping the filename
	  win_copy:
	    src: /src/myfiles/foo.conf
	    dest: c:\temp\
	
	- name: Copy folder to c:\temp (results in C:\Temp\temp_files)
	  win_copy:
	    src: files/temp_files
	    dest: c:\Temp
	
	- name: Copy folder contents recursively
	  win_copy:
	    src: files/temp_files/
	    dest: c:\Temp
	
	- name: Copy a single file where the source is on the remote host
	  win_copy:
	    src: C:\temp\foo.txt
	    dest: C:\ansible\foo.txt
	    remote_src: True
	
	- name: Copy a folder recursively where the source is on the remote host
	  win_copy:
	    src: C:\temp
	    dest: C:\ansible
	    remote_src: True
	
	- name: Set the contents of a file
	  win_copy:
	    dest: C:\temp\foo.txt
	    content: abc123
	
	RETURN VALUES:
	
	
	dest:
	    description: destination file/path
	    returned: changed
	    type: string
	    sample: C:\Temp\
	src:
	    description: source file used for the copy on the target machine
	    returned: changed
	    type: string
	    sample: /home/httpd/.ansible/tmp/ansible-tmp-1423796390.97-147729857856000/source
	checksum:
	    description: sha1 checksum of the file after running copy
	    returned: success, src is a file
	    type: string
	    sample: 6e642bb8dd5c2e027bf21dd923337cbb4214f827
	size:
	    description: size of the target, after execution
	    returned: changed, src is a file
	    type: int
	    sample: 1220
	operation:
	    description: whether a single file copy took place or a folder copy
	    returned: success
	    type: string
	    sample: file_copy
	original_basename:
	    description: basename of the copied file
	    returned: changed, src is a file
	    type: string
	    sample: foo.txt
	

snippet win_defrag
	EXAMPLES:
	- name: Defragment all local volumes (in parallel)
	  win_defrag:
	    parallel: yes
	
	- name: 'Defragment all local volumes, except C: and D:'
	  win_defrag:
	    exclude_volumes: [ C, D ]
	
	- name: 'Defragment volume D: with normal priority'
	  win_defrag:
	    include_volumes: D
	    priority: normal
	
	- name: Consolidate free space (useful when reducing volumes)
	  win_defrag:
	    freespace_consolidation: yes
	
	RETURN VALUES:
	
	
	cmd:
	    description: The complete command line used by the module
	    returned: always
	    type: string
	    sample: defrag.exe /C /V
	rc:
	    description: The return code for the command
	    returned: always
	    type: int
	    sample: 0
	stdout:
	    description: The standard output from the command
	    returned: always
	    type: string
	    sample: Success.
	stderr:
	    description: The error output from the command
	    returned: always
	    type: string
	    sample:
	msg:
	    description: Possible error message on failure
	    returned: failed
	    type: string
	    sample: Command 'defrag.exe' not found in $env:PATH.
	changed:
	    description: Whether or not any changes were made.
	    returned: always
	    type: bool
	    sample: True
	

snippet win_disk_image
	EXAMPLES:
	# ensure an iso is mounted
	- win_disk_image:
	    image_path: C:\install.iso
	    state: present
	  register: disk_image_out
	
	# run installer from mounted iso
	- win_package:
	    path: '{{ disk_image_out.mount_path }}setup\setup.exe'
	    product_id: '35a4e767-0161-46b0-979f-e61f282fee21'
	    state: present
	
	# unmount iso
	- win_disk_image:
	    image_path: C:\install.iso
	    state: absent
	
	RETURN VALUES:
	
	
	mount_path:
	    description: filesystem path where the target image is mounted
	    returned: when C(state) is C(present)
	    type: string
	    sample: F:\
	

snippet win_dns_client
	EXAMPLES:
	# set a single address on the adapter named Ethernet
	  - win_dns_client:
	      adapter_names: Ethernet
	      ipv4_addresses: 192.168.34.5
	
	  # set multiple lookup addresses on all visible adapters (usually physical adapters that are in the Up state), with debug logging to a file
	  - win_dns_client:
	      adapter_names: "*"
	      ipv4_addresses:
	      - 192.168.34.5
	      - 192.168.34.6
	      log_path: c:\dns_log.txt
	
	  # configure all adapters whose names begin with Ethernet to use DHCP-assigned DNS values
	  - win_dns_client:
	      adapter_names: "Ethernet*"
	      ipv4_addresses: []
	
	RETURN VALUES:
	
	
	
	

snippet win_domain
	EXAMPLES:
	# ensure the named domain is reachable from the target host; if not, create the domain in a new forest residing on the target host
	- win_domain:
	    dns_domain_name: ansible.vagrant
	    safe_mode_password: password123!
	
	RETURN VALUES:
	
	
	reboot_required:
	    description: True if changes were made that require a reboot.
	    returned: always
	    type: boolean
	    sample: true
	
	

snippet win_domain_controller
	EXAMPLES:
	# ensure a server is a domain controller
	- hosts: winclient
	  gather_facts: no
	  tasks:
	  - win_domain_controller:
	      dns_domain_name: ansible.vagrant
	      domain_admin_user: testguy@ansible.vagrant
	      domain_admin_password: password123!
	      safe_mode_password: password123!
	      state: domain_controller
	      log_path: c:\ansible_win_domain_controller.txt
	
	# ensure a server is not a domain controller
	# note that without an action wrapper, in the case where a DC is demoted,
	# the task will fail with a 401 Unauthorized, because the domain credential
	# becomes invalid to fetch the final output over WinRM. This requires win_async
	# with credential switching (or other clever credential-switching
	# mechanism to get the output and trigger the required reboot)
	- hosts: winclient
	  gather_facts: no
	  tasks:
	  - win_domain_controller:
	      domain_admin_user: testguy@ansible.vagrant
	      domain_admin_password: password123!
	      local_admin_password: password123!
	      state: member_server
	      log_path: c:\ansible_win_domain_controller.txt
	
	RETURN VALUES:
	
	
	reboot_required:
	    description: True if changes were made that require a reboot.
	    returned: always
	    type: boolean
	    sample: true
	
	

snippet win_domain_group
	EXAMPLES:
	- name: ensure the group Cow exists using sAMAccountName
	  win_domain_group:
	    name: Cow
	    scope: global
	    path: OU=groups,DC=ansible,DC=local
	
	- name: ensure the group Cow does't exist using the Distinguished Name
	  win_domain_group:
	    name: CN=Cow,OU=groups,DC=ansible,DC=local
	    state: absent
	
	- name: delete group ignoring the protection flag
	  win_domain_group:
	    name: Cow
	    state: absent
	    ignore_protection: yes
	
	- name: create group with delete protection enabled and custom attributes
	  win_domain_group:
	    name: Ansible Users
	    scope: domainlocal
	    category: security
	    attributes:
	      mail: helpdesk@ansible.com
	      wWWHomePage: www.ansible.com
	    ignore_protection: yes
	
	- name: change the OU of a group using the SID and ignore the protection flag
	  win_domain_group:
	    name: S-1-5-21-2171456218-3732823212-122182344-1189
	    scope: global
	    organizational_unit: OU=groups,DC=ansible,DC=local
	    ignore_protection: True
	
	- name: add managed_by user
	  win_domain_group:
	    name: Group Name Here
	    managed_by: Domain Admins
	
	RETURN VALUES:
	
	
	attributes:
	  description: Custom attributes that were set by the module. This does not
	    show all the custom attributes rather just the ones that were set by the
	    module.
	  returned: group exists and attributes are set on the module invocation
	  type: dict
	  sample:
	    mail: 'helpdesk@ansible.com'
	    wWWHomePage: 'www.ansible.com'
	canonical_name:
	  description: The canonical name of the group.
	  returned: group exists
	  type: string
	  sample: ansible.local/groups/Cow
	category:
	  description: The Group type value of the group, i.e. Security or Distribution.
	  returned: group exists
	  type: string
	  sample: Security
	description:
	  description: The Description of the group.
	  returned: group exists
	  type: string
	  sample: Group Description
	display_name:
	  description: The Display name of the group.
	  returned: group exists
	  type: string
	  sample: Users who connect through RDP
	distinguished_name:
	  description: The full Distinguished Name of the group.
	  returned: group exists
	  type: string
	  sample: CN=Cow,OU=groups,DC=ansible,DC=local
	group_scope:
	  description: The Group scope value of the group.
	  returned: group exists
	  type: string
	  sample: Universal
	guid:
	  description: The guid of the group.
	  returned: group exists
	  type: string
	  sample: 512a9adb-3fc0-4a26-9df0-e6ea1740cf45
	managed_by:
	  description: The full Distinguished Name of the AD object that is set on the
	    managedBy attribute.
	  returned: group exists
	  type: string
	  sample: CN=Domain Admins,CN=Users,DC=ansible,DC=local
	name:
	  description: The name of the group.
	  returned: group exists
	  type: string
	  sample: Cow
	protected_from_accidental_deletion:
	  description: Whether the group is protected from accidental deletion.
	  returned: group exists
	  type: bool
	  sample: True
	sid:
	  description: The Security ID of the group.
	  returned: group exists
	  type: string
	  sample: S-1-5-21-2171456218-3732823212-122182344-1189
	

snippet win_domain_membership
	EXAMPLES:
	# host should be a member of domain ansible.vagrant; module will ensure the hostname is mydomainclient
	# and will use the passed credentials to join domain if necessary.
	# Ansible connection should use local credentials if possible.
	# If a reboot is required, the second task will trigger one and wait until the host is available.
	- hosts: winclient
	  gather_facts: no
	  tasks:
	  - win_domain_membership:
	      dns_domain_name: ansible.vagrant
	      hostname: mydomainclient
	      domain_admin_user: testguy@ansible.vagrant
	      domain_admin_password: password123!
	      domain_ou_path: "OU=Windows,OU=Servers,DC=ansible,DC=vagrant"
	      state: domain
	    register: domain_state
	
	  - win_reboot:
	    when: domain_state.reboot_required
	
	
	
	# Host should be in workgroup mywg- module will use the passed credentials to clean-unjoin domain if possible.
	# Ansible connection should use local credentials if possible.
	# The domain admin credentials can be sourced from a vault-encrypted variable
	- hosts: winclient
	  gather_facts: no
	  tasks:
	  - win_domain_membership:
	      workgroup_name: mywg
	      domain_admin_user: '{{ win_domain_admin_user }}'
	      domain_admin_password: '{{ win_domain_admin_password }}'
	      state: workgroup
	
	RETURN VALUES:
	
	
	reboot_required:
	    description: True if changes were made that require a reboot.
	    returned: always
	    type: boolean
	    sample: true
	

snippet win_domain_user
	EXAMPLES:
	- name: Ensure user bob is present with address information
	  win_domain_user:
	    name: bob
	    firstname: Bob
	    surname: Smith
	    company: BobCo
	    password: B0bP4ssw0rd
	    state: present
	    groups:
	      - Domain Admins
	    street: 123 4th St.
	    city: Sometown
	    state_province: IN
	    postal_code: 12345
	    country: US
	
	- name: Ensure user bob is present in OU ou=test,dc=domain,dc=local
	  win_domain_user:
	    name: bob
	    password: B0bP4ssw0rd
	    state: present
	    path: ou=test,dc=domain,dc=local
	    groups:
	      - Domain Admins
	
	- name: Ensure user bob is absent
	  win_domain_user:
	    name: bob
	    state: absent
	
	RETURN VALUES:
	
	
	account_locked:
	    description: true if the account is locked
	    returned: always
	    type: boolean
	    sample: false
	changed:
	    description: true if the account changed during execution
	    returned: always
	    type: boolean
	    sample: false
	city:
	    description: The user city
	    returned: always
	    type: string
	    sample: Indianapolis
	company:
	    description: The user company
	    returned: always
	    type: string
	    sample: RedHat
	country:
	    description: The user country
	    returned: always
	    type: string
	    sample: US
	description:
	    description: A description of the account
	    returned: always
	    type: string
	    sample: Server Administrator
	distinguished_name:
	    description: DN of the user account
	    returned: always
	    type: string
	    sample: CN=nick,OU=test,DC=domain,DC=local
	email:
	    description: The user email address
	    returned: always
	    type: string
	    sample: nick@domain.local
	enabled:
	    description: true if the account is enabled and false if disabled
	    returned: always
	    type: string
	    sample: true
	firstname:
	    description: The user first name
	    returned: always
	    type: string
	    sample: Nick
	groups:
	    description: AD Groups to which the account belongs
	    returned: always
	    type: list
	    sample: [ "Domain Admins", "Domain Users" ]
	msg:
	    description: Summary message of whether the user is present or absent
	    returned: always
	    type: string
	    sample: User nick is present
	name:
	    description: The username on the account
	    returned: always
	    type: string
	    sample: nick
	password_expired:
	    description: true if the account password has expired
	    returned: always
	    type: boolean
	    sample: false
	password_updated:
	    description: true if the password changed during this execution
	    returned: always
	    type: boolean
	    sample: true
	postal_code:
	    description: The user postal code
	    returned: always
	    type: string
	    sample: 46033
	sid:
	    description: The SID of the account
	    returned: always
	    type: string
	    sample: S-1-5-21-2752426336-228313920-2202711348-1175
	state:
	    description: The state of the user account
	    returned: always
	    type: string
	    sample: present
	state_province:
	    description: The user state or province
	    returned: always
	    type: string
	    sample: IN
	street:
	    description: The user street address
	    returned: always
	    type: string
	    sample: 123 4th St.
	surname:
	    description: The user last name
	    returned: always
	    type: string
	    sample: Doe
	upn:
	    description: The User Principal Name of the account
	    returned: always
	    type: string
	    sample: nick@domain.local
	user_cannot_change_password:
	    description: true if the user is not allowed to change password
	    returned: always
	    type: string
	    sample: false
	

snippet win_dotnet_ngen
	EXAMPLES:
	- name: run ngen tasks
	  win_dotnet_ngen:
	
	RETURN VALUES:
	
	
	dotnet_ngen_update_exit_code:
	  description: The exit code after running the 32-bit ngen.exe update /force
	    command.
	  returned: 32-bit ngen executable exists
	  type: int
	  sample: 0
	dotnet_ngen_update_output:
	  description: The stdout after running the 32-bit ngen.exe update /force
	    command.
	  returned: 32-bit ngen executable exists
	  type: str
	  sample: sample output
	dotnet_ngen_eqi_exit_code:
	  description: The exit code after running the 32-bit ngen.exe
	    executeQueuedItems command.
	  returned: 32-bit ngen executable exists
	  type: int
	  sample: 0
	dotnet_ngen_eqi_output:
	  description: The stdout after running the 32-bit ngen.exe executeQueuedItems
	    command.
	  returned: 32-bit ngen executable exists
	  type: str
	  sample: sample output
	dotnet_ngen64_update_exit_code:
	  description: The exit code after running the 64-bit ngen.exe update /force
	    command.
	  returned: 64-bit ngen executable exists
	  type: int
	  sample: 0
	dotnet_ngen64_update_output:
	  description: The stdout after running the 64-bit ngen.exe update /force
	    command.
	  returned: 64-bit ngen executable exists
	  type: str
	  sample: sample output
	dotnet_ngen64_eqi_exit_code:
	  description: The exit code after running the 64-bit ngen.exe
	    executeQueuedItems command.
	  returned: 64-bit ngen executable exists
	  type: int
	  sample: 0
	dotnet_ngen64_eqi_output:
	  description: The stdout after running the 64-bit ngen.exe executeQueuedItems
	    command.
	  returned: 64-bit ngen executable exists
	  type: str
	  sample: sample output
	

snippet win_dsc
	EXAMPLES:
	# Playbook example
	  - name: Extract zip file
	    win_dsc:
	      resource_name: archive
	      ensure: Present
	      path: "C:\\Temp\\zipfile.zip"
	      destination: "C:\\Temp\\Temp2"
	
	  - name: Invoke DSC with check mode
	    win_dsc:
	      resource_name: windowsfeature
	      name: telnet-client
	
	RETURN VALUES:
	
	
	resource_name:
	    description: The name of the invoked resource
	    returned: always
	    type: string
	    sample: windowsfeature
	module_version:
	    description: The version of the dsc resource/module used.
	    returned: success
	    type: string
	    sample: "1.0.1"
	attributes:
	    description: The attributes/parameters passed in to the DSC resource as key/value pairs
	    returned: always
	    type: complex
	    sample:
	    contains:
	      Key:
	          description: Attribute key
	      Value:
	          description: Attribute value
	dsc_attributes:
	    description: The attributes/parameters as returned from the DSC engine in dict format
	    returned: always
	    type: complex
	    contains:
	      Key:
	          description: Attribute key
	      Value:
	          description: Attribute value
	reboot_required:
	    description: flag returned from the DSC engine indicating whether or not the machine requires a reboot for the invoked changes to take effect
	    returned: always
	    type: boolean
	    sample: True
	message:
	    description: any error message from invoking the DSC resource
	    returned: error
	    type: string
	    sample: Multiple DSC modules found with resource name xyz
	

snippet win_environment
	EXAMPLES:
	- name: Set an environment variable for all users
	  win_environment:
	    state: present
	    name: TestVariable
	    value: Test value
	    level: machine
	
	- name: Remove an environment variable for the current user
	  win_environment:
	    state: absent
	    name: TestVariable
	    level: user
	
	RETURN VALUES:
	
	
	before_value:
	  description:
	  - the value of the environment key before a change, this is null if it didn't
	    exist
	  returned: always
	  type: string
	  sample: C:\Windows\System32
	level:
	  description: the level set when calling the module
	  returned: always
	  type: string
	  sample: machine
	name:
	  description: the name of the environment key the module checked
	  returned: always
	  type: string
	  sample: JAVA_HOME
	value:
	  description: the value the environment key has been set to
	  returned: always
	  type: string
	  sample: C:\Program Files\jdk1.8
	

snippet win_eventlog
	EXAMPLES:
	- name: Add a new event log with two custom sources
	  win_eventlog:
	    name: MyNewLog
	    sources:
	      - NewLogSource1
	      - NewLogSource2
	    state: present
	
	- name: Change the category and message resource files used for NewLogSource1
	  win_eventlog:
	    name: MyNewLog
	    sources:
	      - NewLogSource1
	    category_file: C:\NewApp\CustomCategories.dll
	    message_file: C:\NewApp\CustomMessages.dll
	    state: present
	
	- name: Change the maximum size and overflow action for MyNewLog
	  win_eventlog:
	    name: MyNewLog
	    maximum_size: 16MB
	    overflow_action: DoNotOverwrite
	    state: present
	
	- name: Clear event entries for MyNewLog
	  win_eventlog:
	    name: MyNewLog
	    state: clear
	
	- name: Remove NewLogSource2 from MyNewLog
	  win_eventlog:
	    name: MyNewLog
	    sources:
	      - NewLogSource2
	    state: absent
	
	- name: Remove MyNewLog and all remaining sources
	  win_eventlog:
	    name: MyNewLog
	    state: absent
	
	RETURN VALUES:
	
	
	name:
	    description: The name of the event log.
	    returned: always
	    type: string
	    sample: MyNewLog
	exists:
	    description: Whether the event log exists or not.
	    returned: success
	    type: boolean
	    sample: true
	entries:
	    description: The count of entries present in the event log.
	    returned: success
	    type: int
	    sample: 50
	maximum_size_kb:
	    description: Maximum size of the log in KB.
	    returned: success
	    type: int
	    sample: 512
	overflow_action:
	    description: The action the log takes once it reaches its maximum size.
	    returned: success
	    type: string
	    sample: OverwriteOlder
	retention_days:
	    description: The minimum number of days entries are retained in the log.
	    returned: success
	    type: int
	    sample: 7
	sources:
	    description: A list of the current sources for the log.
	    returned: success
	    type: list
	    sample: ["MyNewLog", "NewLogSource1", "NewLogSource2"]
	sources_changed:
	    description: A list of sources changed (e.g. re/created, removed) for the log;
	      this is empty if no sources are changed.
	    returned: always
	    type: list
	    sample: ["NewLogSource2"]
	

snippet win_eventlog_entry
	EXAMPLES:
	- name: Write an entry to a Windows event log
	  win_eventlog_entry:
	    log: MyNewLog
	    source: NewLogSource1
	    event_id: 1234
	    message: This is a test log entry.
	
	- name: Write another entry to a different Windows event log
	  win_eventlog_entry:
	    log: AnotherLog
	    source: MyAppSource
	    event_id: 5000
	    message: An error has occurred.
	    entry_type: Error
	    category: 5
	    raw_data: 10,20
	
	RETURN VALUES:
	
	
	# Default return values
	

snippet win_feature
	EXAMPLES:
	- name: Install IIS (Web-Server only)
	  win_feature:
	    name: Web-Server
	    state: present
	
	- name: Install IIS (Web-Server and Web-Common-Http)
	  win_feature:
	    name: Web-Server,Web-Common-Http
	    state: present
	
	- name: Install NET-Framework-Core from file
	  win_feature:
	    name: NET-Framework-Core
	    source: C:\Temp\iso\sources\sxs
	    state: present
	
	- name: Install IIS Web-Server with sub features and management tools
	  win_feature:
	    name: Web-Server
	    state: present
	    restart: True
	    include_sub_features: True
	    include_management_tools: True
	
	RETURN VALUES:
	
	
	exitcode:
	    description: The stringified exit code from the feature installation/removal command
	    returned: always
	    type: string
	    sample: Success
	feature_result:
	    description: List of features that were installed or removed
	    returned: success
	    type: complex
	    sample:
	    contains:
	        display_name:
	            description: Feature display name
	            returned: always
	            type: string
	            sample: "Telnet Client"
	        id:
	            description: A list of KB article IDs that apply to the update
	            returned: always
	            type: int
	            sample: 44
	        message:
	            description: Any messages returned from the feature subsystem that occurred during installation or removal of this feature
	            returned: always
	            type: list of strings
	            sample: []
	        reboot_required:
	            description: True when the target server requires a reboot as a result of installing or removing this feature
	            returned: always
	            type: boolean
	            sample: True
	        restart_needed:
	            description: DEPRECATED in Ansible 2.4 (refer to C(reboot_required) instead). True when the target server requires a reboot as a
	                         result of installing or removing this feature
	            returned: always
	            type: boolean
	            sample: True
	        skip_reason:
	            description: The reason a feature installation or removal was skipped
	            returned: always
	            type: string
	            sample: NotSkipped
	        success:
	            description: If the feature installation or removal was successful
	            returned: always
	            type: boolean
	            sample: True
	reboot_required:
	    description: True when the target server requires a reboot to complete updates (no further updates can be installed until after a reboot)
	    returned: success
	    type: boolean
	    sample: True
	restart_needed:
	    description: DEPRECATED in Ansible 2.4 (refer to C(reboot_required) instead). True when the target server requires a reboot to complete updates
	                 (no further updates can be installed until after a reboot)
	    returned: success
	    type: boolean
	    sample: True
	

snippet win_file
	EXAMPLES:
	- name: Touch a file (creates if not present, updates modification time if present)
	  win_file:
	    path: C:\Temp\foo.conf
	    state: touch
	
	- name: Remove a file, if present
	  win_file:
	    path: C:\Temp\foo.conf
	    state: absent
	
	- name: Create directory structure
	  win_file:
	    path: C:\Temp\folder\subfolder
	    state: directory
	
	- name: Remove directory structure
	  win_file:
	    path: C:\Temp
	    state: absent
	

snippet win_file_version
	EXAMPLES:
	- name: Get acm instance version
	  win_file_version:
	    path: C:\Windows\System32\cmd.exe
	  register: exe_file_version
	
	- debug:
	    msg: '{{ exe_file_version }}'
	
	RETURN VALUES:
	
	
	win_file_version.path:
	  description: file path
	  returned: always
	  type: string
	
	win_file_version.file_version:
	  description: file version number.
	  returned: no error
	  type: string
	
	win_file_version.product_version:
	  description: the version of the product this file is distributed with.
	  returned: no error
	  type: string
	
	win_file_version.file_major_part:
	  description: the major part of the version number.
	  returned: no error
	  type: string
	
	win_file_version.file_minor_part:
	  description: the minor part of the version number of the file.
	  returned: no error
	  type: string
	
	win_file_version.file_build_part:
	  description: build number of the file.
	  returned: no error
	  type: string
	
	win_file_version.file_private_part:
	  description: file private part number.
	  returned: no error
	  type: string
	
	

snippet win_find
	EXAMPLES:
	- name: Find files in path
	  win_find:
	    paths: D:\temp
	
	- name: Find hidden files in path
	  win_find:
	    paths: D:\temp
	    hidden: True
	
	- name: Find files in multiple paths
	  win_find:
	    paths: ['C:\temp', 'D:\temp']
	
	- name: Find files in directory while searching recursively
	  win_find:
	    paths: D:\temp
	    recurse: True
	
	- name: Find files in directory while following symlinks
	  win_find:
	    paths: D:\temp
	    recurse: True
	    follow: True
	
	- name: Find files with .log and .out extension using powershell wildcards
	  win_find:
	    paths: D:\temp
	    patterns: ['*.log', '*.out']
	
	- name: Find files in path based on regex pattern
	  win_find:
	    paths: D:\temp
	    patterns: 'out_\d{8}-\d{6}.log'
	
	- name: Find files older than 1 day
	  win_find:
	    paths: D:\temp
	    age: 86400
	
	- name: Find files older than 1 day based on create time
	  win_find:
	    paths: D:\temp
	    age: 86400
	    age_stamp: ctime
	
	- name: Find files older than 1 day with unit syntax
	  win_find:
	    paths: D:\temp
	    age: 1d
	
	- name: Find files newer than 1 hour
	  win_find:
	    paths: D:\temp
	    age: -3600
	
	- name: Find files newer than 1 hour with unit syntax
	  win_find:
	    paths: D:\temp
	    age: -1h
	
	- name: Find files larger than 1MB
	  win_find:
	    paths: D:\temp
	    size: 1048576
	
	- name: Find files larger than 1GB with unit syntax
	  win_find:
	    paths: D:\temp
	    size: 1g
	
	- name: Find files smaller than 1MB
	  win_find:
	    paths: D:\temp
	    size: -1048576
	
	- name: Find files smaller than 1GB with unit syntax
	  win_find:
	    paths: D:\temp
	    size: -1g
	
	- name: Find folders/symlinks in multiple paths
	  win_find:
	    paths: ['C:\temp', 'D:\temp']
	    file_type: directory
	
	- name: Find files and return SHA256 checksum of files found
	  win_find:
	    paths: C:\temp
	    get_checksum: True
	    checksum_algorithm: sha256
	
	- name: Find files and do not return the checksum
	  win_find:
	    path: C:\temp
	    get_checksum: False
	
	RETURN VALUES:
	
	
	examined:
	    description: The number of files/folders that was checked
	    returned: always
	    type: int
	    sample: 10
	matched:
	    description: The number of files/folders that match the criteria
	    returned: always
	    type: int
	    sample: 2
	files:
	    description: Information on the files/folders that match the criteria returned as a list of dictionary elements for each file matched
	    returned: success
	    type: complex
	    contains:
	        attributes:
	            description: attributes of the file at path in raw form
	            returned: success, path exists
	            type: string
	            sample: "Archive, Hidden"
	        checksum:
	            description: The checksum of a file based on checksum_algorithm specified
	            returned: success, path exists, path is a file, get_checksum == True
	            type: string
	            sample: 09cb79e8fc7453c84a07f644e441fd81623b7f98
	        creationtime:
	            description: the create time of the file represented in seconds since epoch
	            returned: success, path exists
	            type: float
	            sample: 1477984205.15
	        extension:
	            description: the extension of the file at path
	            returned: success, path exists, path is a file
	            type: string
	            sample: ".ps1"
	        isarchive:
	            description: if the path is ready for archiving or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        isdir:
	            description: if the path is a directory or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        ishidden:
	            description: if the path is hidden or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        islnk:
	            description: if the path is a symbolic link or junction or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        isreadonly:
	            description: if the path is read only or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        isshared:
	            description: if the path is shared or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        lastaccesstime:
	            description: the last access time of the file represented in seconds since epoch
	            returned: success, path exists
	            type: float
	            sample: 1477984205.15
	        lastwritetime:
	            description: the last modification time of the file represented in seconds since epoch
	            returned: success, path exists
	            type: float
	            sample: 1477984205.15
	        lnk_source:
	            description: the target of the symbolic link, will return null if not a link or the link is broken
	            return: success, path exists, path is a symbolic link
	            type: string
	            sample: C:\temp
	        owner:
	            description: the owner of the file
	            returned: success, path exists
	            type: string
	            sample: BUILTIN\Administrators
	        path:
	            description: the full absolute path to the file
	            returned: success, path exists
	            type: string
	            sample: BUILTIN\Administrators
	        sharename:
	            description: the name of share if folder is shared
	            returned: success, path exists, path is a directory and isshared == True
	            type: string
	            sample: file-share
	        size:
	            description: the size in bytes of a file or folder
	            returned: success, path exists, path is not a link
	            type: int
	            sample: 1024
	

snippet win_firewall
	EXAMPLES:
	- name: Enable firewall for Domain, Public and Private profiles
	  win_firewall:
	    state: enabled
	    profiles:
	    - Domain
	    - Private
	    - Public
	  tags: enable_firewall
	
	- name: Disable Domain firewall
	  win_firewall:
	    state: disabled
	    profiles:
	    - Domain
	  tags: disable_firewall
	
	RETURN VALUES:
	
	
	enabled:
	    description: current firewall status for chosen profile (after any potential change)
	    returned: always
	    type: bool
	    sample: true
	profiles:
	    description: chosen profile
	    returned: always
	    type: string
	    sample: Domain
	state:
	    description: desired state of the given firewall profile(s)
	    returned: always
	    type: list
	    sample: enabled
	

snippet win_firewall_rule
	EXAMPLES:
	- name: Firewall rule to allow SMTP on TCP port 25
	  win_firewall_rule:
	    name: SMTP
	    localport: 25
	    action: allow
	    direction: in
	    protocol: tcp
	    state: present
	    enabled: yes
	
	- name: Firewall rule to allow RDP on TCP port 3389
	  win_firewall_rule:
	    name: Remote Desktop
	    localport: 3389
	    action: allow
	    direction: in
	    protocol: tcp
	    profiles: private
	    state: present
	    enabled: yes
	

snippet win_get_url
	EXAMPLES:
	- name: Download earthrise.jpg to specified path
	  win_get_url:
	    url: http://www.example.com/earthrise.jpg
	    dest: C:\Users\RandomUser\earthrise.jpg
	
	- name: Download earthrise.jpg to specified path only if modified
	  win_get_url:
	    url: http://www.example.com/earthrise.jpg
	    dest: C:\Users\RandomUser\earthrise.jpg
	    force: no
	
	- name: Download earthrise.jpg to specified path through a proxy server.
	  win_get_url:
	    url: http://www.example.com/earthrise.jpg
	    dest: C:\Users\RandomUser\earthrise.jpg
	    proxy_url: http://10.0.0.1:8080
	    proxy_username: username
	    proxy_password: password
	
	RETURN VALUES:
	
	
	dest:
	    description: destination file/path
	    returned: always
	    type: string
	    sample: C:\Users\RandomUser\earthrise.jpg
	url:
	    description: requested url
	    returned: always
	    type: string
	    sample: http://www.example.com/earthrise.jpg
	msg:
	    description: Error message, or HTTP status message from web-server
	    returned: always
	    type: string
	    sample: OK
	status_code:
	    description: HTTP status code
	    returned: always
	    type: int
	    sample: 200
	

snippet win_group
	EXAMPLES:
	- name: Create a new group
	  win_group:
	    name: deploy
	    description: Deploy Group
	    state: present
	
	- name: Remove a group
	  win_group:
	    name: deploy
	    state: absent
	

snippet win_group_membership
	EXAMPLES:
	- name: Add a local and domain user to a local group
	  win_group_membership:
	    name: Remote Desktop Users
	    members:
	      - NewLocalAdmin
	      - DOMAIN\TestUser
	    state: present
	
	- name: Remove a domain group and service user from a local group
	  win_group_membership:
	    name: Backup Operators
	    members:
	      - DOMAIN\TestGroup
	      - NT AUTHORITY\SYSTEM
	    state: absent
	
	RETURN VALUES:
	
	
	name:
	    description: The name of the target local group.
	    returned: always
	    type: string
	    sample: Administrators
	added:
	    description: A list of members added when C(state) is C(present); this is
	      empty if no members are added.
	    returned: success and C(state) is C(present)
	    type: list
	    sample: ["NewLocalAdmin", "DOMAIN\\TestUser"]
	removed:
	    description: A list of members removed when C(state) is C(absent); this is
	      empty if no members are removed.
	    returned: success and C(state) is C(absent)
	    type: list
	    sample: ["DOMAIN\\TestGroup", "NT AUTHORITY\\SYSTEM"]
	members:
	    description: A list of all local group members at completion; this is empty
	      if the group contains no members.
	    returned: success
	    type: list
	    sample: ["DOMAIN\\TestUser", "NewLocalAdmin"]
	

snippet win_hotfix
	EXAMPLES:
	- name: install Windows ADK with DISM for Server 2008 R2
	  win_chocolatey:
	    name: windows-adk
	    version: 8.100.26866.0
	    state: present
	    install_args: /features OptionId.DeploymentTools
	
	- name: install hotfix without validating the KB and Identifier
	  win_hotfix:
	    source: C:\temp\windows8.1-kb3172729-x64_e8003822a7ef4705cbb65623b72fd3cec73fe222.msu
	    state: present
	  register: hotfix_install
	
	- win_reboot:
	  when: hotfix_install.reboot_required
	
	- name: install hotfix validating KB
	  win_hotfix:
	    hotfix_kb: KB3172729
	    source: C:\temp\windows8.1-kb3172729-x64_e8003822a7ef4705cbb65623b72fd3cec73fe222.msu
	    state: present
	  register: hotfix_install
	
	- win_reboot:
	  when: hotfix_install.reboot_required
	
	- name: install hotfix validating Identifier
	  win_hotfix:
	    hotfix_identifier: Package_for_KB3172729~31bf3856ad364e35~amd64~~6.3.1.0
	    source: C:\temp\windows8.1-kb3172729-x64_e8003822a7ef4705cbb65623b72fd3cec73fe222.msu
	    state: present
	  register: hotfix_install
	
	- win_reboot:
	  when: hotfix_install.reboot_required
	
	- name: uninstall hotfix with Identifier
	  win_hotfix:
	    hotfix_identifier: Package_for_KB3172729~31bf3856ad364e35~amd64~~6.3.1.0
	    state: absent
	  register: hotfix_uninstall
	
	- win_reboot:
	  when: hotfix_uninstall.reboot_required
	
	- name: uninstall hotfix with KB (not recommended)
	  win_hotfix:
	    hotfix_kb: KB3172729
	    state: absent
	  register: hotfix_uninstall
	
	- win_reboot:
	  when: hotfix_uninstall.reboot_required
	
	RETURN VALUES:
	
	
	identifier:
	  description: The DISM identifier for the hotfix.
	  returned: success
	  type: str
	  sample: Package_for_KB3172729~31bf3856ad364e35~amd64~~6.3.1.0
	kb:
	  description: The KB the hotfix relates to.
	  returned: success
	  type: str
	  sample: KB3172729
	reboot_required:
	  description: Whether a reboot is required for the install or uninstall to
	    finalise.
	  returned: success
	  type: str
	  sample: True
	

snippet win_iis_virtualdirectory
	EXAMPLES:
	- name: Create a virtual directory if it does not exist
	  win_iis_virtualdirectory:
	    name: somedirectory
	    site: somesite
	    state: present
	    physical_path: c:\virtualdirectory\some
	
	- name: Remove a virtual directory if it exists
	  win_iis_virtualdirectory:
	    name: somedirectory
	    site: somesite
	    state: absent
	
	- name: Create a virtual directory on an application if it does not exist
	  win_iis_virtualdirectory:
	    name: somedirectory
	    site: somesite
	    application: someapp
	    state: present
	    physical_path: c:\virtualdirectory\some
	

snippet win_iis_webapplication
	EXAMPLES:
	- name: Add ACME webapplication on IIS.
	  win_iis_webapplication:
	    name: api
	    site: acme
	    state: present
	    physical_path: C:\apps\acme\api
	
	RETURN VALUES:
	
	
	application_pool:
	    description: The used/implemented application_pool value
	    returned: success
	    type: string
	    sample: DefaultAppPool
	physical_path:
	    description: The used/implemented physical_path value
	    returned: success
	    type: string
	    sample: C:\apps\acme\api
	

snippet win_iis_webapppool
	EXAMPLES:
	- name: return information about an existing application pool
	  win_iis_webapppool:
	    name: DefaultAppPool
	    state: present
	
	- name: create a new application pool in 'Started' state
	  win_iis_webapppool:
	    name: AppPool
	    state: started
	
	- name: stop an application pool
	  win_iis_webapppool:
	    name: AppPool
	    state: stopped
	
	- name: restart an application pool (non-idempotent)
	  win_iis_webapppool:
	    name: AppPool
	    state: restart
	
	- name: change application pool attributes using new dict style
	  win_iis_webapppool:
	    name: AppPool
	    attributes:
	      managedRuntimeVersion: v4.0
	      autoStart: false
	
	# Note this format style has been deprecated, please use the newer dict style instead
	- name: change application pool attributes using older string style
	  win_iis_webapppool:
	    name: AppPool
	    attributes: 'managedRuntimeVersion:v4.0|autoStart:false'
	
	# This is the preferred style to use when setting attributes
	- name: creates an application pool, sets attributes and starts it
	  win_iis_webapppool:
	    name: AnotherAppPool
	    state: started
	    attributes:
	      managedRuntimeVersion: v4.0
	      autoStart: false
	
	# In the below example we are setting attributes in child element processModel
	# https://www.iis.net/configreference/system.applicationhost/applicationpools/add/processmodel
	- name: manage child element and set identity of application pool
	  win_iis_webapppool:
	    name: IdentitiyAppPool
	    state: started
	    attributes:
	      managedPipelineMode: Classic
	      processModel.identityType: SpecificUser
	      processModel.username: '{{ansible_user}}'
	      processModel.password: '{{ansible_password}}'
	      processModel.loadUserProfile: True
	
	- name: manage a timespan attribute
	  win_iis_webapppool:
	    name: TimespanAppPool
	    state: started
	    attributes:
	      # Timespan with full string "day:hour:minute:second.millisecond"
	      recycling.periodicRestart.time: "00:00:05:00.000000"
	      recycling.periodicRestart.schedule: ["00:10:00", "05:30:00"]
	      # Shortened timespan "hour:minute:second"
	      processModel.pingResponseTime: "00:03:00"
	
	RETURN VALUES:
	
	
	attributes:
	  description: Application Pool attributes that were set and processed by this
	    module invocation.
	  returned: success
	  type: dictionary
	  sample:
	    enable32BitAppOnWin64: "true"
	    managedRuntimeVersion: "v4.0"
	    managedPipelineMode: "Classic"
	info:
	  description: Information on current state of the Application Pool. See
	    https://www.iis.net/configreference/system.applicationhost/applicationpools/add#005
	    for the full list of return attributes based on your IIS version.
	  returned: success
	  type: complex
	  sample:
	  contains:
	    attributes:
	      description: Key value pairs showing the current Application Pool attributes.
	      returned: success
	      type: dictionary
	      sample:
	        autoStart: true
	        managedRuntimeLoader: "webengine4.dll"
	        managedPipelineMode: "Classic"
	        name: "DefaultAppPool"
	        CLRConfigFile: ""
	        passAnonymousToken: true
	        applicationPoolSid: "S-1-5-82-1352790163-598702362-1775843902-1923651883-1762956711"
	        queueLength: 1000
	        managedRuntimeVersion: "v4.0"
	        state: "Started"
	        enableConfigurationOverride: true
	        startMode: "OnDemand"
	        enable32BitAppOnWin64: true
	    cpu:
	      description: Key value pairs showing the current Application Pool cpu attributes.
	      returned: success
	      type: dictionary
	      sample:
	        action: "NoAction"
	        limit: 0
	        resetInterval:
	          Days: 0
	          Hours: 0
	    failure:
	      description: Key value pairs showing the current Application Pool failure attributes.
	      returned: success
	      type: dictionary
	      sample:
	        autoShutdownExe: ""
	        orphanActionExe: ""
	        rapidFailProtextionInterval:
	          Days: 0
	          Hours: 0
	    name:
	      description: Name of Application Pool that was processed by this module invocation.
	      returned: success
	      type: string
	      sample: "DefaultAppPool"
	    processModel:
	      description: Key value pairs showing the current Application Pool processModel attributes.
	      returned: success
	      type: dictionary
	      sample:
	        identityType: "ApplicationPoolIdentity"
	        logonType: "LogonBatch"
	        pingInterval:
	          Days: 0
	          Hours: 0
	    recycling:
	      description: Key value pairs showing the current Application Pool recycling attributes.
	      returned: success
	      type: dictionary
	      sample:
	        disallowOverlappingRotation: false
	        disallowRotationOnConfigChange: false
	        logEventOnRecycle: "Time,Requests,Schedule,Memory,IsapiUnhealthy,OnDemand,ConfigChange,PrivateMemory"
	    state:
	      description: Current runtime state of the pool as the module completed.
	      returned: success
	      type: string
	      sample: "Started"
	

snippet win_iis_webbinding
	EXAMPLES:
	- name: Return binding information for an existing host
	  win_iis_webbinding:
	    name: Default Web Site
	
	- name: Return the HTTPS binding information for an existing host
	  win_iis_webbinding:
	    name: Default Web Site
	    protocol: https
	
	- name: Add a HTTP binding on port 9090
	  win_iis_webbinding:
	    name: Default Web Site
	    port: 9090
	    state: present
	
	- name: Remove the HTTP binding on port 9090
	  win_iis_webbinding:
	    name: Default Web Site
	    port: 9090
	    state: absent
	
	- name: Add a HTTPS binding
	  win_iis_webbinding:
	    name: Default Web Site
	    protocol: https
	    state: present
	
	- name: Add a HTTPS binding and select certificate to use
	  win_iis_webbinding:
	    name: Default Web Site
	    protocol: https
	    certificate_hash: B0D0FA8408FC67B230338FCA584D03792DA73F4C
	    state: present
	
	- name: Website https biding to specific port
	  win_iis_webbinding:
	    name: Default Web Site
	    protocol: https
	    port: 443
	    certificate_hash: D1A3AF8988FD32D1A3AF8988FD323792DA73F4C
	    state: present
	

snippet win_iis_website
	EXAMPLES:
	# Start a website
	
	- name: Acme IIS site
	  win_iis_website:
	    name: "Acme"
	    state: started
	    port: 80
	    ip: 127.0.0.1
	    hostname: acme.local
	    application_pool: "acme"
	    physical_path: c:\sites\acme
	    parameters: logfile.directory:c:\sites\logs
	  register: website
	
	# Remove Default Web Site and the standard port 80 binding
	- name: Remove Default Web Site
	  win_iis_website:
	    name: "Default Web Site"
	    state: absent
	
	# Some commandline examples:
	
	# This return information about an existing host
	# $ ansible -i vagrant-inventory -m win_iis_website -a "name='Default Web Site'" window
	# host | success >> {
	#     "changed": false,
	#     "site": {
	#         "ApplicationPool": "DefaultAppPool",
	#         "Bindings": [
	#             "*:80:"
	#         ],
	#         "ID": 1,
	#         "Name": "Default Web Site",
	#         "PhysicalPath": "%SystemDrive%\\inetpub\\wwwroot",
	#         "State": "Stopped"
	#     }
	# }
	
	# This stops an existing site.
	# $ ansible -i hosts -m win_iis_website -a "name='Default Web Site' state=stopped" host
	
	# This creates a new site.
	# $ ansible -i hosts -m win_iis_website -a "name=acme physical_path=c:\\sites\\acme" host
	
	# Change logfile.
	# $ ansible -i hosts -m win_iis_website -a "name=acme physical_path=c:\\sites\\acme" host
	

snippet win_lineinfile
	EXAMPLES:
	# Before 2.3, option 'dest', 'destfile' or 'name' was used instead of 'path'
	- win_lineinfile:
	    path: C:\temp\example.conf
	    regexp: '^name='
	    line: 'name=JohnDoe'
	
	- win_lineinfile:
	    path: C:\temp\example.conf
	    regexp: '^name='
	    state: absent
	
	- win_lineinfile:
	    path: C:\temp\example.conf
	    regexp: '^127\.0\.0\.1'
	    line: '127.0.0.1 localhost'
	
	- win_lineinfile:
	    path: C:\temp\httpd.conf
	    regexp: '^Listen '
	    insertafter: '^#Listen '
	    line: Listen 8080
	
	- win_lineinfile:
	    path: C:\temp\services
	    regexp: '^# port for http'
	    insertbefore: '^www.*80/tcp'
	    line: '# port for http by default'
	
	# Create file if it doesn't exist with a specific encoding
	- win_lineinfile:
	    path: C:\temp\utf16.txt
	    create: yes
	    encoding: utf-16
	    line: This is a utf-16 encoded file
	
	# Add a line to a file and ensure the resulting file uses unix line separators
	- win_lineinfile:
	    path: C:\temp\testfile.txt
	    line: Line added to file
	    newline: unix
	
	# Update a line using backrefs
	- win_lineinfile:
	    path: C:\temp\example.conf
	    backrefs: yes
	    regexp: '(^name=)'
	    line: '$1JohnDoe'
	

snippet win_mapped_drive
	EXAMPLES:
	- name: create a mapped drive under Z
	  win_mapped_drive:
	    letter: Z
	    path: \\domain\appdata\accounting
	
	- name: delete any mapped drives under Z
	  win_mapped_drive:
	    letter: Z
	    state: absent
	
	- name: only delete the mapped drive Z if the paths match (error is thrown otherwise)
	  win_mapped_drive:
	    letter: Z
	    path: \\domain\appdata\accounting
	    state: absent
	
	- name: create mapped drive with local credentials
	  win_mapped_drive:
	    letter: M
	    path: \\SERVER\c$
	    username: SERVER\Administrator
	    password: Password
	
	- name: create mapped drive with domain credentials
	  win_mapped_drive:
	    letter: M
	    path: \\domain\appdata\it
	    username: DOMAIN\IT
	    password: Password
	
	RETURN VALUES:
	
	
	

snippet win_msg
	EXAMPLES:
	- name: Warn logged in users of impending upgrade
	  win_msg:
	    display_seconds: 60
	    msg: Automated upgrade about to start.  Please save your work and log off before {{ deployment_start_time }}
	
	RETURN VALUES:
	
	
	msg:
	    description: Test of the message that was sent.
	    returned: changed
	    type: string
	    sample: Automated upgrade about to start.  Please save your work and log off before 22 July 2016 18:00:00
	display_seconds:
	    description: Value of display_seconds module parameter.
	    returned: success
	    type: string
	    sample: 10
	rc:
	    description: The return code of the API call
	    returned: always
	    type: int
	    sample: 0
	runtime_seconds:
	    description: How long the module took to run on the remote windows host.
	    returned: success
	    type: string
	    sample: 22 July 2016 17:45:51
	sent_localtime:
	    description: local time from windows host when the message was sent.
	    returned: success
	    type: string
	    sample: 22 July 2016 17:45:51
	wait:
	    description: Value of wait module parameter.
	    returned: success
	    type: boolean
	    sample: false
	

snippet win_msi
	EXAMPLES:
	- name: Install an MSI file
	  win_msi:
	    path: C:\7z920-x64.msi
	
	- name: Install an MSI, and wait for it to complete before continuing
	  win_msi:
	    path: C:\7z920-x64.msi
	    wait: yes
	
	- name: Uninstall an MSI file
	  win_msi:
	    path: C:\7z920-x64.msi
	    state: absent
	
	RETURN VALUES:
	
	
	log:
	  description: The logged output from the installer
	  returned: always
	  type: string
	  sample: N/A
	

snippet win_nssm
	EXAMPLES:
	# Install and start the foo service
	- win_nssm:
	    name: foo
	    application: C:\windows\foo.exe
	
	# Install and start the foo service with a key-value pair argument
	# This will yield the following command: C:\windows\foo.exe bar "true"
	- win_nssm:
	    name: foo
	    application: C:\windows\foo.exe
	    app_parameters:
	      bar: true
	
	# Install and start the foo service with a key-value pair argument, where the argument needs to start with a dash
	# This will yield the following command: C:\windows\\foo.exe -bar "true"
	- win_nssm:
	    name: foo
	    application: C:\windows\foo.exe
	    app_parameters:
	      "-bar": true
	
	# Install and start the foo service with a single parameter
	# This will yield the following command: C:\windows\\foo.exe bar
	- win_nssm:
	    name: foo
	    application: C:\windows\foo.exe
	    app_parameters:
	      _: bar
	
	# Install and start the foo service with a mix of single params, and key value pairs
	# This will yield the following command: C:\windows\\foo.exe bar -file output.bat
	- win_nssm:
	    name: foo
	    application: C:\windows\foo.exe
	    app_parameters:
	      _: bar
	      "-file": "output.bat"
	
	# Use the single line parameters option to specify an arbitrary string of parameters
	# for the service executable
	- name: Make sure the Consul service runs
	  win_nssm:
	    name: consul
	    application: C:\consul\consul.exe
	    app_parameters_free_form: agent -config-dir=C:\consul\config
	    stdout_file: C:\consul\log.txt
	    stderr_file: C:\consul\error.txt
	
	# Install and start the foo service, redirecting stdout and stderr to the same file
	- win_nssm:
	    name: foo
	    application: C:\windows\foo.exe
	    stdout_file: C:\windows\foo.log
	    stderr_file: C:\windows\foo.log
	
	# Install and start the foo service, but wait for dependencies tcpip and adf
	- win_nssm:
	    name: foo
	    application: C:\windows\foo.exe
	    dependencies: 'adf,tcpip'
	
	# Install and start the foo service with dedicated user
	- win_nssm:
	    name: foo
	    application: C:\windows\foo.exe
	    user: foouser
	    password: secret
	
	# Install the foo service but do not start it automatically
	- win_nssm:
	    name: foo
	    application: C:\windows\foo.exe
	    state: present
	    start_mode: manual
	
	# Remove the foo service
	- win_nssm:
	    name: foo
	    state: absent
	

snippet win_owner
	EXAMPLES:
	- name: Change owner of Path
	  win_owner:
	    path: C:\apache
	    user: apache
	    recurse: True
	
	- name: Set the owner of root directory
	  win_owner:
	    path: C:\apache
	    user: SYSTEM
	    recurse: False
	
	RETURN VALUES:
	
	
	
	

snippet win_package
	EXAMPLES:
	- name: Install the Visual C thingy
	  win_package:
	    path: http://download.microsoft.com/download/1/6/B/16B06F60-3B20-4FF2-B699-5E9B7962F9AE/VSU_4/vcredist_x64.exe
	    product_id: '{CF2BEA3C-26EA-32F8-AA9B-331F7E34BA97}'
	    arguments: /install /passive /norestart
	
	- name: Install Remote Desktop Connection Manager from msi
	  win_package:
	    path: https://download.microsoft.com/download/A/F/0/AF0071F3-B198-4A35-AA90-C68D103BDCCF/rdcman.msi
	    product_id: '{0240359E-6A4C-4884-9E94-B397A02D893C}'
	    state: present
	
	- name: Uninstall Remote Desktop Connection Manager
	  win_package:
	    product_id: '{0240359E-6A4C-4884-9E94-B397A02D893C}'
	    state: absent
	
	- name: Install Remote Desktop Connection Manager locally omitting the product_id
	  win_package:
	    path: C:\temp\rdcman.msi
	    state: present
	
	- name: Uninstall Remote Desktop Connection Manager from local MSI omitting the product_id
	  win_package:
	    path: C:\temp\rdcman.msi
	    state: absent
	
	# 7-Zip exe doesn't use a guid for the Product ID
	- name: Install 7zip from a network share specifying the credentials
	  win_package:
	    path: \\domain\programs\7z.exe
	    product_id: 7-Zip
	    arguments: /S
	    state: present
	    user_name: DOMAIN\User
	    user_password: Password
	
	- name: Install 7zip and use a file version for the installation check
	  win_package:
	    path: C:\temp\7z.exe
	    creates_path: C:\Program Files\7-Zip\7z.exe
	    creates_version: 16.04
	    state: present
	
	- name: Uninstall 7zip from the exe
	  win_package:
	    path: C:\Program Files\7-Zip\Uninstall.exe
	    product_id: 7-Zip
	    arguments: /S
	    state: absent
	
	- name: Uninstall 7zip without specifying the path
	  win_package:
	    product_id: 7-Zip
	    arguments: /S
	    state: absent
	
	- name: Install application and override expected return codes
	  win_package:
	    path: https://download.microsoft.com/download/1/6/7/167F0D79-9317-48AE-AEDB-17120579F8E2/NDP451-KB2858728-x86-x64-AllOS-ENU.exe
	    product_id: '{7DEBE4EB-6B40-3766-BB35-5CBBC385DA37}'
	    arguments: '/q /norestart'
	    state: present
	    expected_return_code: [0, 666, 3010]
	
	RETURN VALUES:
	
	
	exit_code:
	  description: See rc, this will be removed in favour of rc in Ansible 2.6.
	  returned: change occured
	  type: int
	  sample: 0
	log:
	  description: The contents of the MSI log.
	  returned: change occured and package is an MSI
	  type: str
	  sample: Installation completed successfully
	rc:
	  description: The return code of the pacakge process.
	  returned: change occured
	  type: int
	  sample: 0
	reboot_required:
	  description: Whether a reboot is required to finalise package. This is set
	    to true if the executable return code is 3010.
	  returned: always
	  type: bool
	  sample: True
	restart_required:
	  description: See reboot_required, this will be removed in favour of
	    reboot_required in Ansible 2.6
	  returned: always
	  type: bool
	  sample: True
	stdout:
	  description: The stdout stream of the package process.
	  returned: failure during install or uninstall
	  type: str
	  sample: Installing program
	stderr:
	  description: The stderr stream of the package process.
	  returned: failure during install or uninstall
	  type: str
	  sample: Failed to install program
	

snippet win_pagefile
	EXAMPLES:
	- name: Query pagefiles configuration
	  win_pagefile:
	
	- name: Query C pagefile
	  win_pagefile:
	    drive: C
	
	- name: Set C pagefile, don't override if exists
	  win_pagefile:
	    drive: C
	    initial_size: 1024
	    maximum_size: 1024
	    override: no
	    state: present
	
	- name: Set C pagefile, override if exists
	  win_pagefile:
	    drive: C
	    initial_size: 1024
	    maximum_size: 1024
	    state: present
	
	- name: Remove C pagefile
	  win_pagefile:
	    drive: C
	    state: absent
	
	- name: Remove all current pagefiles, enable AutomaticManagedPagefile and query at the end
	  win_pagefile:
	    remove_all: yes
	    automatic: yes
	
	- name: Remove all pagefiles disable AutomaticManagedPagefile and set C pagefile
	  win_pagefile:
	    drive: C
	    initial_size: 2048
	    maximum_size: 2048
	    remove_all: yes
	    automatic: no
	    state: present
	
	- name: Set D pagefile, override if exists
	  win_pagefile:
	    drive: d
	    initial_size: 1024
	    maximum_size: 1024
	    state: present
	
	RETURN VALUES:
	
	
	automatic_managed_pagefiles:
	    description: Whether the pagefiles is automatically managed.
	    returned: When state is query.
	    type: boolean
	    sample: true
	pagefiles:
	    description: Contains caption, description, initial_size, maximum_size and name for each pagefile in the system.
	    returned: When state is query.
	    type: list
	    sample:
	      [{"caption": "c:\\ 'pagefile.sys'", "description": "'pagefile.sys' @ c:\\", "initial_size": 2048, "maximum_size": 2048, "name": "c:\\pagefile.sys"},
	       {"caption": "d:\\ 'pagefile.sys'", "description": "'pagefile.sys' @ d:\\", "initial_size": 1024, "maximum_size": 1024, "name": "d:\\pagefile.sys"}]
	
	

snippet win_path
	EXAMPLES:
	- name: Ensure that system32 and Powershell are present on the global system path, and in the specified order
	  win_path:
	    elements:
	    - '%SystemRoot%\system32'
	    - '%SystemRoot%\system32\WindowsPowerShell\v1.0'
	
	- name: Ensure that C:\Program Files\MyJavaThing is not on the current user's CLASSPATH
	  win_path:
	    name: CLASSPATH
	    elements: C:\Program Files\MyJavaThing
	    scope: user
	    state: absent
	

snippet win_ping
	EXAMPLES:
	# Test connectivity to a windows host
	# ansible winserver -m win_ping
	
	# Example from an Ansible Playbook
	- win_ping:
	
	# Induce an exception to see what happens
	- win_ping:
	    data: crash
	
	RETURN VALUES:
	
	
	ping:
	    description: value provided with the data parameter
	    returned: success
	    type: string
	    sample: pong
	

snippet win_power_plan
	EXAMPLES:
	- name: change power plan to high performance
	  win_power_plan:
	    name: high performance
	
	RETURN VALUES:
	
	
	power_plan_name:
	  description: Value of the intended power plan
	  returned: always
	  type: string
	  sample: balanced
	power_plan_enabled:
	  description: State of the intended power plan
	  returned: success
	  type: boolean
	  sample: True
	all_available_plans:
	  description: The name and enabled state of all power plans
	  returned: always
	  type: dictionary
	  sample: |
	    {
	        "High performance":  false,
	        "Balanced":  true,
	        "Power saver":  false
	    }
	

snippet win_psexec
	EXAMPLES:
	- name: Test the PsExec connection to the local system (target node) with your user
	  win_psexec:
	    command: whoami.exe
	
	- name: Run regedit.exe locally (on target node) as SYSTEM and interactively
	  win_psexec:
	    command: regedit.exe
	    interactive: yes
	    system: yes
	
	- name: Run the setup.exe installer on multiple servers using the Domain Administrator
	  win_psexec:
	    command: E:\setup.exe /i /IACCEPTEULA
	    hostnames:
	    - remote_server1
	    - remote_server2
	    username: DOMAIN\Administrator
	    password: some_password
	    priority: high
	
	- name: Run PsExec from custom location C:\Program Files\sysinternals\
	  win_psexec:
	    command: netsh advfirewall set allprofiles state off
	    executable: C:\Program Files\sysinternals\psexec.exe
	    hostnames: [ remote_server ]
	    password: some_password
	    priority: low
	
	RETURN VALUES:
	
	
	cmd:
	    description: The complete command line used by the module, including PsExec call and additional options.
	    returned: always
	    type: string
	    sample: psexec.exe -nobanner \\remote_server -u "DOMAIN\Administrator" -p "some_password" -accepteula E:\setup.exe
	rc:
	    description: The return code for the command
	    returned: always
	    type: int
	    sample: 0
	stdout:
	    description: The standard output from the command
	    returned: always
	    type: string
	    sample: Success.
	stderr:
	    description: The error output from the command
	    returned: always
	    type: string
	    sample: Error 15 running E:\setup.exe
	msg:
	    description: Possible error message on failure
	    returned: failed
	    type: string
	    sample: The 'password' parameter is a required parameter.
	changed:
	    description: Whether or not any changes were made.
	    returned: always
	    type: bool
	    sample: True
	

snippet win_psmodule
	EXAMPLES:
	---
	- name: Add a powershell module
	  win_psmodule:
	    name: PowershellModule
	    state: present
	
	- name: Add a powershell module and register a repository
	  win_psmodule:
	    name: MyCustomModule
	    repository: MyRepository
	    url: https://myrepo.com
	    state: present
	
	- name: Remove a powershell module
	  win_psmodule:
	    name: PowershellModule
	    state: absent
	
	- name: Remove a powershell module and a repository
	  win_psmodule:
	    name: MyCustomModule
	    repository: MyRepository
	    state: absent
	
	RETURN VALUES:
	
	
	---
	output:
	  description: a message describing the task result.
	  returned: always
	  sample: "Module PowerShellCookbook installed"
	  type: string
	nuget_changed:
	  description: true when Nuget package provider is installed
	  returned: always
	  type: boolean
	  sample: True
	repository_changed:
	  description: true when a custom repository is installed or removed
	  returned: always
	  type: boolean
	  sample: True
	

snippet win_rabbitmq_plugin
	EXAMPLES:
	- name: Enables the rabbitmq_management plugin
	  win_rabbitmq_plugin:
	    names: rabbitmq_management
	    state: enabled
	
	RETURN VALUES:
	
	
	enabled:
	  description: list of plugins enabled during task run
	  returned: always
	  type: list
	  sample: ["rabbitmq_management"]
	disabled:
	  description: list of plugins disabled during task run
	  returned: always
	  type: list
	  sample: ["rabbitmq_management"]
	

snippet win_reboot
	EXAMPLES:
	# Unconditionally reboot the machine with all defaults
	- win_reboot:
	
	# Apply updates and reboot if necessary
	- win_updates:
	  register: update_result
	- win_reboot:
	  when: update_result.reboot_required
	
	# Reboot a slow machine that might have lots of updates to apply
	- win_reboot:
	    shutdown_timeout: 3600
	    reboot_timeout: 3600
	
	RETURN VALUES:
	
	
	rebooted:
	  description: true if the machine was rebooted
	  returned: always
	  type: boolean
	  sample: true
	elapsed:
	  description: The number of seconds that elapsed waiting for the system to be rebooted.
	  returned: always
	  type: int
	  sample: 23
	

snippet win_reg_stat
	EXAMPLES:
	# Obtain information about a registry key using short form
	- win_reg_stat:
	    path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion
	  register: current_version
	
	# Obtain information about a registry key property
	- win_reg_stat:
	    path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion
	    name: CommonFilesDir
	  register: common_files_dir
	
	RETURN VALUES:
	
	
	changed:
	  description: Whether anything was changed.
	  returned: always
	  type: boolean
	  sample: True
	exists:
	  description: States whether the registry key/property exists.
	  returned: success and path/property exists
	  type: boolean
	  sample: True
	properties:
	  description: A dictionary containing all the properties and their values in the registry key.
	  returned: success, path exists and property not specified
	  type: dict
	  sample: {
	    "binary_property" : {
	      "raw_value": ["0x01", "0x16"],
	      "type": "REG_BINARY",
	      "value": [1, 22]
	    },
	    "multi_string_property" : {
	      "raw_value": ["a", "b"],
	      "type": "REG_MULTI_SZ",
	      "value": ["a", "b"]
	    }
	    }
	sub_keys:
	  description: A list of all the sub keys of the key specified.
	  returned: success, path exists and property not specified
	  type: list
	  sample: [
	    "AppHost",
	    "Casting",
	    "DateTime"
	  ]
	raw_value:
	  description: Returns the raw value of the registry property, REG_EXPAND_SZ has no string expansion, REG_BINARY or REG_NONE is in hex 0x format.
	    REG_NONE, this value is a hex string in the 0x format.
	  returned: success, path/property exists and property specified
	  type: string
	  sample: '%ProgramDir%\\Common Files'
	type:
	  description: The property type.
	  returned: success, path/property exists and property specified
	  type: string
	  sample: "REG_EXPAND_SZ"
	value:
	  description: The value of the property.
	  returned: success, path/property exists and property specified
	  type: string
	  sample: 'C:\\Program Files\\Common Files'
	

snippet win_regedit
	EXAMPLES:
	- name: Create registry path MyCompany
	  win_regedit:
	    path: HKCU:\Software\MyCompany
	
	- name: Add or update registry path MyCompany, with entry 'hello', and containing 'world'
	  win_regedit:
	    path: HKCU:\Software\MyCompany
	    name: hello
	    data: world
	
	- name: Add or update registry path MyCompany, with dword entry 'hello', and containing 1337 as the decimal value
	  win_regedit:
	    path: HKCU:\Software\MyCompany
	    name: hello
	    data: 1337
	    type: dword
	
	- name: Add or update registry path MyCompany, with dword entry 'hello', and containing 0xff2500ae as the hex value
	  win_regedit:
	    path: HKCU:\Software\MyCompany
	    name: hello
	    data: 0xff2500ae
	    type: dword
	
	- name: Add or update registry path MyCompany, with binary entry 'hello', and containing binary data in hex-string format
	  win_regedit:
	    path: HKCU:\Software\MyCompany
	    name: hello
	    data: hex:be,ef,be,ef,be,ef,be,ef,be,ef
	    type: binary
	
	- name: Add or update registry path MyCompany, with binary entry 'hello', and containing binary data in yaml format
	  win_regedit:
	    path: HKCU:\Software\MyCompany
	    name: hello
	    data: [0xbe,0xef,0xbe,0xef,0xbe,0xef,0xbe,0xef,0xbe,0xef]
	    type: binary
	
	- name: Add or update registry path MyCompany, with expand string entry 'hello'
	  win_regedit:
	    path: HKCU:\Software\MyCompany
	    name: hello
	    data: '%appdata%\local'
	    type: expandstring
	
	- name: Add or update registry path MyCompany, with multi string entry 'hello'
	  win_regedit:
	    path: HKCU:\Software\MyCompany
	    name: hello
	    data: ['hello', 'world']
	    type: multistring
	
	- name: Disable keyboard layout hotkey for all users (changes existing)
	  win_regedit:
	    path: HKU:\.DEFAULT\Keyboard Layout\Toggle
	    name: Layout Hotkey
	    data: 3
	    type: dword
	
	- name: Disable language hotkey for current users (adds new)
	  win_regedit:
	    path: HKCU:\Keyboard Layout\Toggle
	    name: Language Hotkey
	    data: 3
	    type: dword
	
	- name: Remove registry path MyCompany (including all entries it contains)
	  win_regedit:
	    path: HKCU:\Software\MyCompany
	    state: absent
	    delete_key: yes
	
	- name: Clear the existing (Default) entry at path MyCompany
	  win_regedit:
	    path: HKCU:\Software\MyCompany
	    state: absent
	    delete_key: no
	
	- name: Remove entry 'hello' from registry path MyCompany
	  win_regedit:
	    path: HKCU:\Software\MyCompany
	    name: hello
	    state: absent
	
	RETURN VALUES:
	
	
	data_changed:
	    description: whether this invocation changed the data in the registry value
	    returned: success
	    type: boolean
	    sample: False
	data_type_changed:
	    description: whether this invocation changed the datatype of the registry value
	    returned: success
	    type: boolean
	    sample: True
	

snippet win_region
	EXAMPLES:
	# Set the region format to English United States
	- win_region:
	    format: en-US
	
	# Set the region format to English Australia and copy settings to new profiles
	- win_region:
	    format: en-AU
	    copy_settings: True
	
	# Set the unicode language to English Great Britain, reboot if required
	- win_region:
	    unicode_language: en-GB
	  register: result
	
	- win_reboot:
	  when: result.restart_required
	
	# Set the location to United States
	- win_region:
	    location: 244
	
	# Set format, location and unicode to English Australia and copy settings, reboot if required
	- win_region:
	    location: 12
	    format: en-AU
	    unicode_language: en-AU
	  register: result
	
	- win_reboot:
	  when: result.restart_required
	
	RETURN VALUES:
	
	
	changed:
	    description: Whether anything was changed
	    returned: always
	    type: boolean
	    sample: True
	restart_required:
	    description: Whether a reboot is required for the change to take effect
	    returned: success
	    type: boolean
	    sample: True
	

snippet win_regmerge
	EXAMPLES:
	# Merge in a registry file without comparing to current registry
	  # Note that paths using / to separate are preferred as they require less special handling than \
	  win_regmerge:
	    path: C:/autodeploy/myCompany-settings.reg
	  # Compare and merge registry file
	  win_regmerge:
	    path: C:/autodeploy/myCompany-settings.reg
	    compare_to: HKLM:\SOFTWARE\myCompany
	
	RETURN VALUES:
	
	
	compare_to_key_found:
	    description: whether the parent registry key has been found for comparison
	    returned: when comparison key not found in registry
	    type: boolean
	    sample: false
	difference_count:
	    description: number of differences between the registry and the file
	    returned: changed
	    type: int
	    sample: 1
	compared:
	    description: whether a comparison has taken place between the registry and the file
	    returned: when a comparison key has been supplied and comparison has been attempted
	    type: boolean
	    sample: true
	

snippet win_robocopy
	EXAMPLES:
	- name: Sync the contents of one directory to another
	  win_robocopy:
	    src: C:\DirectoryOne
	    dest: C:\DirectoryTwo
	
	- name: Sync the contents of one directory to another, including subdirectories
	  win_robocopy:
	    src: C:\DirectoryOne
	    dest: C:\DirectoryTwo
	    recurse: yes
	
	- name: Sync the contents of one directory to another, and remove any files/directories found in destination that do not exist in the source
	  win_robocopy:
	    src: C:\DirectoryOne
	    dest: C:\DirectoryTwo
	    purge: yes
	
	- name: Sync content in recursive mode, removing any files/directories found in destination that do not exist in the source
	  win_robocopy:
	    src: C:\DirectoryOne
	    dest: C:\DirectoryTwo
	    recurse: yes
	    purge: yes
	
	- name: Sync two directories in recursive and purging mode, specifying additional special flags
	  win_robocopy:
	    src: C:\DirectoryOne
	    dest: C:\DirectoryTwo
	    flags: /E /PURGE /XD SOME_DIR /XF SOME_FILE /MT:32
	
	RETURN VALUES:
	
	
	cmd:
	    description: The used command line
	    returned: always
	    type: string
	    sample: robocopy C:\DirectoryOne C:\DirectoryTwo /e /purge
	src:
	    description: The Source file/directory of the sync.
	    returned: always
	    type: string
	    sample: C:\Some\Path
	dest:
	    description: The Destination file/directory of the sync.
	    returned: always
	    type: string
	    sample: C:\Some\Path
	recurse:
	    description: Whether or not the recurse flag was toggled.
	    returned: always
	    type: bool
	    sample: False
	purge:
	    description: Whether or not the purge flag was toggled.
	    returned: always
	    type: bool
	    sample: False
	flags:
	    description: Any flags passed in by the user.
	    returned: always
	    type: string
	    sample: /e /purge
	rc:
	    description: The return code returned by robocopy.
	    returned: success
	    type: int
	    sample: 1
	output:
	    description: The output of running the robocopy command.
	    returned: success
	    type: string
	    sample: "------------------------------------\\n   ROBOCOPY     ::     Robust File Copy for Windows         \\n------------------------------------\\n "
	msg:
	    description: Output intrepreted into a concise message.
	    returned: always
	    type: string
	    sample: No files copied!
	

snippet win_route
	EXAMPLES:
	---
	
	- name: Add a network static route
	  win_route:
	    destination: 192.168.2.10/32
	    gateway: 192.168.1.1
	    metric: 1
	    state: present
	
	- name: Remove a network static route
	  win_route:
	    destination: 192.168.2.10/32
	    state: absent
	
	RETURN VALUES:
	
	
	output:
	    description: A message describing the task result.
	    returned: always
	    type: string
	    sample: "Route added"
	

snippet win_say
	EXAMPLES:
	- name: Warn of impending deployment
	  win_say:
	    msg: Warning, deployment commencing in 5 minutes, please log out.
	
	- name: Using a different voice and a start sound
	  win_say:
	    start_sound_path: C:\Windows\Media\ding.wav
	    msg: Warning, deployment commencing in 5 minutes, please log out.
	    voice: Microsoft Hazel Desktop
	
	- name: With start and end sound
	  win_say:
	    start_sound_path: C:\Windows\Media\Windows Balloon.wav
	    msg: New software installed
	    end_sound_path: C:\Windows\Media\chimes.wav
	
	- name: Text from file example
	  win_say:
	    start_sound_path: C:\Windows\Media\Windows Balloon.wav
	    msg_file: AppData\Local\Temp\morning_report.txt
	    end_sound_path: C:\Windows\Media\chimes.wav
	
	RETURN VALUES:
	
	
	message_text:
	    description: the text that the module attempted to speak
	    returned: success
	    type: string
	    sample: "Warning, deployment commencing in 5 minutes."
	voice:
	    description: the voice used to speak the text.
	    returned: success
	    type: string
	    sample: Microsoft Hazel Desktop
	voice_info:
	    description: the voice used to speak the text.
	    returned: when requested voice could not be loaded
	    type: string
	    sample: Could not load voice TestVoice, using system default voice
	

snippet win_scheduled_task
	EXAMPLES:
	# Create a scheduled task to open a command prompt
	- win_scheduled_task:
	    name: TaskName
	    description: open command prompt
	    executable: cmd
	    arguments: -opt1 -opt2
	    path: \example
	    time: 9am
	    frequency: daily
	    state: present
	    enabled: yes
	    user: SYSTEM
	
	- name: Create a task to run a PowerShell script as NETWORK SERVICE at the highest user rights level
	  win_scheduled_task:
	    name: TaskName2
	    description: Run a PowerShell script
	    executable: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	    arguments: -ExecutionPolicy Unrestricted -NonInteractive -File C:\TestDir\Test.ps1
	    time: 6pm
	    frequency: once
	    state: present
	    enabled: yes
	    user: NETWORK SERVICE
	    runlevel: highest
	
	- name: Change the above task to run under a domain user account, storing credentials for the task
	  win_scheduled_task:
	    name: TaskName2
	    description: Run a PowerShell script
	    executable: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	    arguments: -ExecutionPolicy Unrestricted -NonInteractive -File C:\TestDir\Test.ps1
	    time: 6pm
	    frequency: once
	    state: present
	    enabled: yes
	    user: DOMAIN\user
	    password: passwordGoesHere
	    runlevel: highest
	
	- name: Change the above task again, choosing not to store the password for the account
	  win_scheduled_task:
	    name: TaskName2
	    description: Run a PowerShell script
	    executable: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	    arguments: -ExecutionPolicy Unrestricted -NonInteractive -File C:\TestDir\Test.ps1
	    time: 6pm
	    frequency: once
	    state: present
	    enabled: yes
	    user: DOMAIN\user
	    runlevel: highest
	    store_password: no
	

snippet win_security_policy
	EXAMPLES:
	- name: change the guest account name
	  win_security_policy:
	    section: System Access
	    key: NewGuestName
	    value: Guest Account
	
	- name: set the maximum password age
	  win_security_policy:
	    section: System Access
	    key: MaximumPasswordAge
	    value: 15
	
	- name: do not store passwords using reversible encryption
	  win_security_policy:
	    section: System Access
	    key: ClearTextPassword
	    value: 0
	
	- name: enable system events
	  win_security_policy:
	    section: Event Audit
	    key: AuditSystemEvents
	    value: 1
	
	RETURN VALUES:
	
	
	rc:
	  description: The return code after a failure when running SecEdit.exe.
	  returned: failure with secedit calls
	  type: int
	  sample: -1
	stdout:
	  description: The output of the STDOUT buffer after a failure when running
	    SecEdit.exe.
	  returned: failure with secedit calls
	  type: string
	  sample: check log for error details
	stderr:
	  description: The output of the STDERR buffer after a failure when running
	    SecEdit.exe.
	  returned: failure with secedit calls
	  type: string
	  sample: failed to import security policy
	import_log:
	  description: The log of the SecEdit.exe /configure job that configured the
	    local policies. This is used for debugging purposes on failures.
	  returned: secedit.exe /import run and change occurred
	  type: string
	  sample: Completed 6 percent (0/15) \tProcess Privilege Rights area.
	key:
	  description: The key in the section passed to the module to modify.
	  returned: success
	  type: string
	  sample: NewGuestName
	section:
	  description: The section passed to the module to modify.
	  returned: success
	  type: string
	  sample: System Access
	value:
	  description: The value passed to the module to modify to.
	  returned: success
	  type: string
	  sample: Guest Account
	

snippet win_service
	EXAMPLES:
	- name: Restart a service
	  win_service:
	    name: spooler
	    state: restarted
	
	- name: Set service startup mode to auto and ensure it is started
	  win_service:
	    name: spooler
	    start_mode: auto
	    state: started
	
	- name: pause a service
	  win_service:
	    name: Netlogon
	    state: paused
	
	# a new service will also default to the following values:
	# - username: LocalSystem
	# - state: stopped
	# - start_mode: auto
	- name: create a new service
	  win_service:
	    name: service name
	    path: C:\temp\test.exe
	
	- name: create a new service with extra details
	  win_service:
	    name: service name
	    path: C:\temp\test.exe
	    display_name: Service Name
	    description: A test service description
	
	- name: remove a service
	  win_service:
	    name: service name
	    state: absent
	
	- name: check if a service is installed
	  win_service:
	    name: service name
	  register: service_info
	
	- name: set the log on user to a domain account
	  win_service:
	    name: service name
	    state: restarted
	    username: DOMAIN\User
	    password: Password
	
	- name: set the log on user to a local account
	  win_service:
	    name: service name
	    state: restarted
	    username: .\Administrator
	    password: Password
	
	- name: set the log on user to Local System
	  win_service:
	    name: service name
	    state: restarted
	    username: LocalSystem
	    password: ""
	
	- name: set the log on user to Local System and allow it to interact with the desktop
	  win_service:
	    name: service name
	    state: restarted
	    username: LocalSystem
	    password: ""
	    desktop_interact: True
	
	- name: set the log on user to Network Service
	  win_service:
	    name: service name
	    state: restarted
	    username: NT AUTHORITY\NetworkService
	    password: ""
	
	- name: set the log on user to Local Service
	  win_service:
	    name: service name
	    state: restarted
	    username: NT AUTHORITY\LocalService
	    password: ""
	
	- name: set dependencies to ones only in the list
	  win_service:
	    name: service name
	    dependencies: ['service1', 'service2']
	
	- name: add dependencies to existing dependencies
	  win_service:
	    name: service name
	    dependencies: ['service1', 'service2']
	    dependency_action: add
	
	- name: remove dependencies from existing dependencies
	  win_service:
	    name: service name
	    dependencies: ['service1', 'service2']
	    dependency_action: remove
	
	RETURN VALUES:
	
	
	exists:
	    description: Whether the service exists or not.
	    returned: success
	    type: boolean
	    sample: true
	name:
	    description: The service name or id of the service.
	    returned: success and service exists
	    type: string
	    sample: CoreMessagingRegistrar
	display_name:
	    description: The display name of the installed service.
	    returned: success and service exists
	    type: string
	    sample: CoreMessaging
	state:
	    description: The current running status of the service.
	    returned: success and service exists
	    type: string
	    sample: stopped
	start_mode:
	    description: The startup type of the service.
	    returned: success and service exists
	    type: string
	    sample: manual
	path:
	    description: The path to the service executable.
	    returned: success and service exists
	    type: string
	    sample: C:\Windows\system32\svchost.exe -k LocalServiceNoNetwork
	can_pause_and_continue:
	    description: Whether the service can be paused and unpaused.
	    returned: success and service exists
	    type: bool
	    sample: True
	description:
	    description: The description of the service.
	    returned: success and service exists
	    type: string
	    sample: Manages communication between system components.
	username:
	    description: The username that runs the service.
	    returned: success and service exists
	    type: string
	    sample: LocalSystem
	desktop_interact:
	    description: Whether the current user is allowed to interact with the desktop.
	    returned: success and service exists
	    type: boolean
	    sample: False
	dependencies:
	    description: A list of services that is depended by this service.
	    returned: success and service exists
	    type: list
	    sample: False
	depended_by:
	    description: A list of services that depend on this service.
	    returned: success and service exists
	    type: list
	    sample: False
	

snippet win_share
	EXAMPLES:
	# Playbook example
	# Add share and set permissions
	---
	- name: Add secret share
	  win_share:
	    name: internal
	    description: top secret share
	    path: C:\shares\internal
	    list: no
	    full: Administrators,CEO
	    read: HR-Global
	    deny: HR-External
	
	- name: Add public company share
	  win_share:
	    name: company
	    description: top secret share
	    path: C:\shares\company
	    list: yes
	    full: Administrators,CEO
	    read: Global
	
	- name: Remove previously added share
	  win_share:
	    name: internal
	    state: absent
	
	RETURN VALUES:
	
	
	actions:
	    description: A list of action cmdlets that were run by the module.
	    returned: success
	    type: list
	    sample: ['New-SmbShare -Name share -Path C:\temp']
	

snippet win_shell
	EXAMPLES:
	# Execute a command in the remote shell; stdout goes to the specified
	# file on the remote.
	- win_shell: C:\somescript.ps1 >> c:\somelog.txt
	
	# Change the working directory to somedir/ before executing the command.
	- win_shell: C:\somescript.ps1 >> c:\somelog.txt chdir=c:\somedir
	
	# You can also use the 'args' form to provide the options. This command
	# will change the working directory to somedir/ and will only run when
	# somedir/somelog.txt doesn't exist.
	- win_shell: C:\somescript.ps1 >> c:\somelog.txt
	  args:
	    chdir: c:\somedir
	    creates: c:\somelog.txt
	
	# Run a command under a non-Powershell interpreter (cmd in this case)
	- win_shell: echo %HOMEDIR%
	  args:
	    executable: cmd
	  register: homedir_out
	
	RETURN VALUES:
	
	
	msg:
	    description: changed
	    returned: always
	    type: boolean
	    sample: True
	start:
	    description: The command execution start time
	    returned: always
	    type: string
	    sample: '2016-02-25 09:18:26.429568'
	end:
	    description: The command execution end time
	    returned: always
	    type: string
	    sample: '2016-02-25 09:18:26.755339'
	delta:
	    description: The command execution delta time
	    returned: always
	    type: string
	    sample: '0:00:00.325771'
	stdout:
	    description: The command standard output
	    returned: always
	    type: string
	    sample: 'Clustering node rabbit@slave1 with rabbit@master ...'
	stderr:
	    description: The command standard error
	    returned: always
	    type: string
	    sample: 'ls: cannot access foo: No such file or directory'
	cmd:
	    description: The command executed by the task
	    returned: always
	    type: string
	    sample: 'rabbitmqctl join_cluster rabbit@master'
	rc:
	    description: The command return code (0 means success)
	    returned: always
	    type: int
	    sample: 0
	stdout_lines:
	    description: The command standard output split in lines
	    returned: always
	    type: list
	    sample: [u'Clustering node rabbit@slave1 with rabbit@master ...']
	

snippet win_shortcut
	EXAMPLES:
	- name: Create an application shortcut on the desktop
	  win_shortcut:
	    src: C:\Program Files\Mozilla Firefox\Firefox.exe
	    dest: C:\Users\Public\Desktop\Mozilla Firefox.lnk
	    icon: C:\Program Files\Mozilla Firefox\Firefox.exe,0
	
	- name: Create the same shortcut using environment variables
	  win_shortcut:
	    description: The Mozilla Firefox web browser
	    src: '%ProgramFiles%\Mozilla Firefox\Firefox.exe'
	    dest: '%Public%\Desktop\Mozilla Firefox.lnk'
	    icon: '%ProgramFiles\Mozilla Firefox\Firefox.exe,0'
	    directory: '%ProgramFiles%\Mozilla Firefox'
	
	- name: Create an application shortcut for an executable in PATH to your desktop
	  win_shortcut:
	    src: cmd.exe
	    dest: Desktop\Command prompt.lnk
	
	- name: Create an application shortcut for the Ansible website
	  win_shortcut:
	    src: '%ProgramFiles%\Google\Chrome\Application\chrome.exe'
	    dest: '%UserProfile%\Desktop\Ansible website.lnk'
	    args: --new-window https://ansible.com/
	    directory: '%ProgramFiles%\Google\Chrome\Application'
	    icon: '%ProgramFiles%\Google\Chrome\Application\chrome.exe,0'
	
	- name: Create a URL shortcut for the Ansible website
	  win_shortcut:
	    src: https://ansible.com/
	    dest: '%Public%\Desktop\Ansible website.url'
	
	RETURN VALUES:
	
	
	

snippet win_stat
	EXAMPLES:
	- name: Obtain information about a file
	  win_stat:
	    path: C:\foo.ini
	  register: file_info
	
	# Obtain information about a folder
	- win_stat:
	    path: C:\bar
	  register: folder_info
	
	# Get MD5 checksum of a file
	- win_stat:
	    path: C:\foo.ini
	    get_checksum: yes
	    checksum_algorithm: md5
	  register: md5_checksum
	
	- debug:
	    var: md5_checksum.stat.checksum
	
	# Get SHA1 checksum of file
	- win_stat:
	    path: C:\foo.ini
	    get_checksum: yes
	  register: sha1_checksum
	
	- debug:
	    var: sha1_checksum.stat.checksum
	
	# Get SHA256 checksum of file
	- win_stat:
	    path: C:\foo.ini
	    get_checksum: yes
	    checksum_algorithm: sha256
	  register: sha256_checksum
	
	- debug:
	    var: sha256_checksum.stat.checksum
	
	RETURN VALUES:
	
	
	changed:
	    description: Whether anything was changed
	    returned: always
	    type: boolean
	    sample: True
	stat:
	    description: dictionary containing all the stat data
	    returned: success
	    type: complex
	    contains:
	        attributes:
	            description: attributes of the file at path in raw form
	            returned: success, path exists
	            type: string
	            sample: "Archive, Hidden"
	        checksum:
	            description: The checksum of a file based on checksum_algorithm specified
	            returned: success, path exist, path is a file, get_checksum == True
	              checksum_algorithm specified is supported
	            type: string
	            sample: 09cb79e8fc7453c84a07f644e441fd81623b7f98
	        creationtime:
	            description: the create time of the file represented in seconds since epoch
	            returned: success, path exists
	            type: float
	            sample: 1477984205.15
	        exists:
	            description: if the path exists or not
	            returned: success
	            type: boolean
	            sample: True
	        extension:
	            description: the extension of the file at path
	            returned: success, path exists, path is a file
	            type: string
	            sample: ".ps1"
	        filename:
	            description: the name of the file (without path)
	            returned: success, path exists, path is a file
	            type: string
	            sammple: foo.ini
	        isarchive:
	            description: if the path is ready for archiving or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        isdir:
	            description: if the path is a directory or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        ishidden:
	            description: if the path is hidden or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        islnk:
	            description: if the path is a symbolic link or junction or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        isreadonly:
	            description: if the path is read only or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        isreg:
	            description: if the path is a regular file
	            returned: success, path exists
	            type: boolean
	            sample: True
	        isshared:
	            description: if the path is shared or not
	            returned: success, path exists
	            type: boolean
	            sample: True
	        lastaccesstime:
	            description: the last access time of the file represented in seconds since epoch
	            returned: success, path exists
	            type: float
	            sample: 1477984205.15
	        lastwritetime:
	            description: the last modification time of the file represented in seconds since epoch
	            returned: success, path exists
	            type: float
	            sample: 1477984205.15
	        lnk_source:
	            description: the target of the symbolic link, will return null if not a link or the link is broken
	            return: success, path exists, file is a symbolic link
	            type: string
	            sample: C:\temp
	        md5:
	            description: The MD5 checksum of a file (Between Ansible 1.9 and 2.2 this was returned as a SHA1 hash)
	            returned: success, path exist, path is a file, get_md5 == True, md5 is supported
	            type: string
	            sample: 09cb79e8fc7453c84a07f644e441fd81623b7f98
	        owner:
	            description: the owner of the file
	            returned: success, path exists
	            type: string
	            sample: BUILTIN\Administrators
	        path:
	            description: the full absolute path to the file
	            returned: success, path exists, file exists
	            type: string
	            sample: C:\foo.ini
	        sharename:
	            description: the name of share if folder is shared
	            returned: success, path exists, file is a directory and isshared == True
	            type: string
	            sample: file-share
	        size:
	            description: the size in bytes of a file or folder
	            returned: success, path exists, file is not a link
	            type: int
	            sample: 1024
	

snippet win_tempfile
	EXAMPLES:
	- name: Create temporary build directory
	  win_tempfile:
	    state: directory
	    suffix: build
	
	- name: Create temporary file
	  win_tempfile:
	    state: file
	    suffix: temp
	
	RETURN VALUES:
	
	
	path:
	  description: Path to created file or directory
	  returned: success
	  type: string
	  sample: C:\Users\Administrator\AppData\Local\Temp\ansible.bMlvdk
	

snippet win_template
	EXAMPLES:
	- name: Create a file from a Jinja2 template
	  win_template:
	    src: /mytemplates/file.conf.j2
	    dest: C:\temp\file.conf
	
	- name: Create a Unix-style file from a Jinja2 template
	  win_template:
	    src: unix/config.conf.j2
	    dest: C:\share\unix\config.conf
	    newline_sequence: '\n'
	

snippet win_timezone
	EXAMPLES:
	- name: Set timezone to 'Romance Standard Time' (GMT+01:00)
	  win_timezone:
	    timezone: Romance Standard Time
	
	- name: Set timezone to 'GMT Standard Time' (GMT)
	  win_timezone:
	    timezone: GMT Standard Time
	
	- name: Set timezone to 'Central Standard Time' (GMT-06:00)
	  win_timezone:
	    timezone: Central Standard Time
	
	RETURN VALUES:
	
	
	previous_timezone:
	    description: The previous timezone if it was changed, otherwise the existing timezone
	    returned: success
	    type: string
	    sample: Central Standard Time
	timezone:
	    description: The current timezone (possibly changed)
	    returned: success
	    type: string
	    sample: Central Standard Time
	

snippet win_toast
	EXAMPLES:
	- name: Warn logged in users of impending upgrade (note use of async to stop the module from waiting until notification expires).
	  win_toast:
	    expire: 60
	    title: System Upgrade Notification
	    msg: Automated upgrade about to start.  Please save your work and log off before {{ deployment_start_time }}
	  async: 60
	  poll: 0
	
	RETURN VALUES:
	
	
	expire_at_utc:
	    description: Calculated utc date time when the notification expires.
	    returned: allways
	    type: string
	    sample: 07 July 2017 04:50:54
	no_toast_sent_reason:
	    description: Text containing the reason why a notification was not sent.
	    returned: when no logged in users are detected
	    type: string
	    sample: No logged in users to notify
	sent_localtime:
	    description: local date time when the notification was sent.
	    returned: allways
	    type: string
	    sample: 07 July 2017 05:45:54
	time_taken:
	    description: How long the module took to run on the remote windows host in seconds.
	    returned: allways
	    type: float
	    sample: 0.3706631999999997
	toast_sent:
	    description: Whether the module was able to send a toast notification or not.
	    returned: allways
	    type: boolean
	    sample: false
	

snippet win_unzip
	EXAMPLES:
	# This unzips a library that was downloaded with win_get_url, and removes the file after extraction
	# $ ansible -i hosts -m win_unzip -a "src=C:\LibraryToUnzip.zip dest=C:\Lib remove=true" all
	
	- name: Unzip a bz2 (BZip) file
	  win_unzip:
	    src: C:\Users\Phil\Logs.bz2
	    dest: C:\Users\Phil\OldLogs
	    creates: C:\Users\Phil\OldLogs
	
	- name: Unzip gz log
	  win_unzip:
	    src: C:\Logs\application-error-logs.gz
	    dest: C:\ExtractedLogs\application-error-logs
	
	# Unzip .zip file, recursively decompresses the contained .gz files and removes all unneeded compressed files after completion.
	- name: Unzip ApplicationLogs.zip and decompress all GZipped log files
	  hosts: all
	  gather_facts: false
	  tasks:
	    - name: Recursively decompress GZ files in ApplicationLogs.zip
	      win_unzip:
	        src: C:\Downloads\ApplicationLogs.zip
	        dest: C:\Application\Logs
	        recurse: yes
	        delete_archive: yes
	
	# Install PSCX to use for extracting a gz file
	- name: Grab PSCX msi
	  win_get_url:
	    url: http://download-codeplex.sec.s-msft.com/Download/Release?ProjectName=pscx&DownloadId=923562&FileTime=130585918034470000&Build=20959
	    dest: C:\Windows\Temp\pscx.msi
	
	- name: Install PSCX
	  win_msi:
	    path: C:\Windows\Temp\pscx.msi
	
	RETURN VALUES:
	
	
	dest:
	    description: The provided destination path
	    returned: always
	    type: string
	    sample: C:\ExtractedLogs\application-error-logs
	removed:
	    description: Whether the module did remove any files during task run
	    returned: always
	    type: boolean
	    sample: True
	src:
	    description: The provided source path
	    returned: always
	    type: string
	    sample: C:\Logs\application-error-logs.gz
	

snippet win_updates
	EXAMPLES:
	# Install all security, critical, and rollup updates
	- win_updates:
	    category_names:
	      - SecurityUpdates
	      - CriticalUpdates
	      - UpdateRollups
	
	# Install only security updates
	- win_updates:
	    category_names: SecurityUpdates
	
	# Search-only, return list of found updates (if any), log to c:\ansible_wu.txt
	- win_updates:
	    category_names: SecurityUpdates
	    state: searched
	    log_path: c:\ansible_wu.txt
	
	RETURN VALUES:
	
	
	reboot_required:
	    description: True when the target server requires a reboot to complete updates (no further updates can be installed until after a reboot)
	    returned: success
	    type: boolean
	    sample: True
	
	updates:
	    description: List of updates that were found/installed
	    returned: success
	    type: complex
	    sample:
	    contains:
	        title:
	            description: Display name
	            returned: always
	            type: string
	            sample: "Security Update for Windows Server 2012 R2 (KB3004365)"
	        kb:
	            description: A list of KB article IDs that apply to the update
	            returned: always
	            type: list of strings
	            sample: [ '3004365' ]
	        id:
	            description: Internal Windows Update GUID
	            returned: always
	            type: string (guid)
	            sample: "fb95c1c8-de23-4089-ae29-fd3351d55421"
	        installed:
	            description: Was the update successfully installed
	            returned: always
	            type: boolean
	            sample: True
	        failure_hresult_code:
	            description: The HRESULT code from a failed update
	            returned: on install failure
	            type: boolean
	            sample: 2147942402
	
	found_update_count:
	    description: The number of updates found needing to be applied
	    returned: success
	    type: int
	    sample: 3
	installed_update_count:
	    description: The number of updates successfully installed
	    returned: success
	    type: int
	    sample: 2
	failed_update_count:
	    description: The number of updates that failed to install
	    returned: always
	    type: int
	    sample: 0
	

snippet win_uri
	EXAMPLES:
	- name: Perform a GET and Store Output
	  win_uri:
	    url: http://example.com/endpoint
	  register: http_output
	
	# Set a HOST header to hit an internal webserver:
	- name: Hit a Specific Host on the Server
	  win_uri:
	    url: http://example.com/
	    method: GET
	    headers:
	      host: www.somesite.com
	
	- name: Perform a HEAD on an Endpoint
	  win_uri:
	    url: http://www.example.com/
	    method: HEAD
	
	- name: POST a Body to an Endpoint
	  win_uri:
	    url: http://www.somesite.com/
	    method: POST
	    body: "{ 'some': 'json' }"
	
	RETURN VALUES:
	
	
	url:
	  description: The Target URL
	  returned: always
	  type: string
	  sample: https://www.ansible.com
	method:
	  description: The HTTP method used.
	  returned: always
	  type: string
	  sample: GET
	content_type:
	  description: The "content-type" header used.
	  returned: always
	  type: string
	  sample: application/json
	use_basic_parsing:
	  description: The state of the "use_basic_parsing" flag.
	  returned: always
	  type: bool
	  sample: True
	body:
	  description: The content of the body used
	  returned: when body is specified
	  type: string
	  sample: '{"id":1}'
	status_code:
	  description: The HTTP Status Code of the response.
	  returned: success
	  type: int
	  sample: 200
	status_description:
	  description: A summery of the status.
	  returned: success
	  type: string
	  sample: OK
	raw_content:
	  description: The raw content of the HTTP response.
	  returned: success
	  type: string
	  sample: 'HTTP/1.1 200 OK\nX-XSS-Protection: 1; mode=block\nAlternate-Protocol: 443:quic,p=1\nAlt-Svc: quic="www.google.com:443";'
	headers:
	  description: The Headers of the response.
	  returned: success
	  type: dict
	  sample: {"Content-Type": "application/json"}
	raw_content_length:
	  description: The byte size of the response.
	  returned: success
	  type: int
	  sample: 54447
	

snippet win_user
	EXAMPLES:
	- name: Ensure user bob is present
	  win_user:
	    name: bob
	    password: B0bP4ssw0rd
	    state: present
	    groups:
	      - Users
	
	- name: Ensure user bob is absent
	  win_user:
	    name: bob
	    state: absent
	
	RETURN VALUES:
	
	
	account_disabled:
	  description: Whether the user is disabled.
	  returned: user exists
	  type: bool
	  sample: false
	account_locked:
	  description: Whether the user is locked.
	  returned: user exists
	  type: bool
	  sample: false
	description:
	  description: The description set for the user.
	  returned: user exists
	  type: str
	  sample: Username for test
	fullname:
	  description: The full name set for the user.
	  returned: user exists
	  type: str
	  sample: Test Username
	groups:
	  description: A list of groups and their ADSI path the user is a member of.
	  returned: user exists
	  type: list
	  sample: [
	    {
	      "name": "Administrators",
	      "path": "WinNT://WORKGROUP/USER-PC/Administrators"
	    }
	  ]
	name:
	  description: The name of the user
	  returned: always
	  type: str
	  sample: username
	password_expired:
	  description: Whether the password is expired.
	  returned: user exists
	  type: bool
	  sample: false
	password_never_expires:
	  description: Whether the password is set to never expire.
	  returned: user exists
	  type: bool
	  sample: true
	path:
	  description: The ADSI path for the user.
	  returned: user exists
	  type: str
	  sample: "WinNT://WORKGROUP/USER-PC/username"
	sid:
	  description: The SID for the user.
	  returned: user exists
	  type: str
	  sample: S-1-5-21-3322259488-2828151810-3939402796-1001
	user_cannot_change_password:
	  description: Whether the user can change their own password.
	  returned: user exists
	  type: bool
	  sample: false
	

snippet win_user_right
	EXAMPLES:
	---
	- name: replace the entries of Deny log on locally
	  win_user_right:
	    name: SeDenyInteractiveLogonRight
	    users:
	    - Guest
	    - Users
	    action: set
	
	- name: add account to Log on as a service
	  win_user_right:
	    name: SeServiceLogonRight
	    users:
	    - .\Administrator
	    - '{{ansible_hostname}}\local-user'
	    action: add
	
	- name: remove accounts who can create Symbolic links
	  win_user_right:
	    name: SeCreateSymbolicLinkPrivilege
	    users:
	    - SYSTEM
	    - Administrators
	    - DOMAIN\User
	    - group@DOMAIN.COM
	    action: remove
	
	RETURN VALUES:
	
	
	added:
	  description: A list of accounts that were added to the right, this is empty
	    if no accounts were added.
	  returned: success
	  type: list
	  sample: ["NT AUTHORITY\\SYSTEM", "DOMAIN\\User"]
	removed:
	  description: A list of accounts that were removed from the right, this is
	    empty if no accounts were removed.
	  returned: success
	  type: list
	  sample: ["SERVERNAME\\Administrator", "BUILTIN\\Administrators"]
	

snippet win_wait_for
	EXAMPLES:
	- name: wait 300 seconds for port 8000 to become open on the host, don't start checking for 10 seconds
	  win_wait_for:
	    port: 8000
	    delay: 10
	
	- name: wait 150 seconds for port 8000 of any IP to close active connections
	  win_wait_for:
	    host: 0.0.0.0
	    port: 8000
	    state: drained
	    timeout: 150
	
	- name: wait for port 8000 of any IP to close active connection, ignoring certain hosts
	  win_wait_for:
	    host: 0.0.0.0
	    port: 8000
	    state: drained
	    exclude_hosts: ['10.2.1.2', '10.2.1.3']
	
	- name: wait for file C:\temp\log.txt to exist before continuing
	  win_wait_for:
	    path: C:\temp\log.txt
	
	- name: wait until process complete is in the file before continuing
	  win_wait_for:
	    path: C:\temp\log.txt
	    search_regex: process complete
	
	- name: wait until file if removed
	  win_wait_for:
	    path: C:\temp\log.txt
	    state: absent
	
	- name: wait until port 1234 is offline but try every 10 seconds
	  win_wait_for:
	    port: 1234
	    state: absent
	    sleep: 10
	
	RETURN VALUES:
	
	
	attempts:
	  description: The number of attempts to poll the file or port before module
	    finishes.
	  returned: always
	  type: int
	  sample: 1
	elapsed:
	  description: The elapsed seconds between the start of poll and the end of the
	    module. This includes the delay if the option is set.
	  returned: always
	  type: float
	  sample: 2.1406487
	

snippet win_wakeonlan
	EXAMPLES:
	- name: Send a magic Wake-on-LAN packet to 00:00:5E:00:53:66
	  win_wakeonlan:
	    mac: 00:00:5E:00:53:66
	    broadcast: 192.0.2.23
	
	- name: Send a magic Wake-On-LAN packet on port 9 to 00-00-5E-00-53-66
	  win_wakeonlan:
	    mac: 00-00-5E-00-53-66
	    port: 9
	  delegate_to: remote_system
	
	RETURN VALUES:
	
	
	# Default return values
	

snippet win_webpicmd
	EXAMPLES:
	# Install URLRewrite2.
	  win_webpicmd:
	    name: URLRewrite2
	

snippet xattr
	EXAMPLES:
	# Obtain the extended attributes  of /etc/foo.conf
	- xattr:
	    path: /etc/foo.conf
	
	# Sets the key 'foo' to value 'bar'
	- xattr:
	    path: /etc/foo.conf
	    key: user.foo
	    value: bar
	
	# Removes the key 'foo'
	- xattr:
	    path: /etc/foo.conf
	    key: user.foo
	    state: absent
	

snippet xbps
	EXAMPLES:
	# Install package foo
	- xbps: name=foo state=present
	# Upgrade package foo
	- xbps: name=foo state=latest update_cache=yes
	# Remove packages foo and bar
	- xbps: name=foo,bar state=absent
	# Recursively remove package foo
	- xbps: name=foo state=absent recurse=yes
	# Update package cache
	- xbps: update_cache=yes
	# Upgrade packages
	- xbps: upgrade=yes
	
	RETURN VALUES:
	
	
	msg:
	    description: Message about results
	    returned: success
	    type: string
	    sample: "System Upgraded"
	packages:
	    description: Packages that are affected/would be affected
	    type: list
	    sample: ["ansible"]
	    returned: success
	

snippet xenserver_facts
	EXAMPLES:
	- name: Gather facts from xenserver
	  xenserver:
	
	- name: Print running VMs
	  debug:
	    msg: "{{ item }}"
	  with_items: "{{ xs_vms.keys() }}"
	  when: xs_vms[item]['power_state'] == "Running"
	
	# Which will print:
	#
	# TASK: [Print running VMs] ***********************************************************
	# skipping: [10.13.0.22] => (item=CentOS 4.7 (32-bit))
	# ok: [10.13.0.22] => (item=Control domain on host: 10.0.13.22) => {
	#     "item": "Control domain on host: 10.0.13.22",
	#     "msg": "Control domain on host: 10.0.13.22"
	# }
	

snippet xml
	EXAMPLES:
	- name: Remove the subjective attribute of the rating element
	  xml:
	    path: /foo/bar.xml
	    xpath: /business/rating/@subjective
	    state: absent
	
	- name: Set the rating to 11
	  xml:
	    path: /foo/bar.xml
	    xpath: /business/rating
	    value: 11
	
	# Retrieve and display the number of nodes
	- name: Get count of beers nodes
	  xml:
	    path: /foo/bar.xml
	    xpath: /business/beers/beer
	    count: yes
	  register: hits
	
	- debug:
	    var: hits.count
	
	- name: Add a phonenumber element to the business element
	  xml:
	    path: /foo/bar.xml
	    xpath: /business/phonenumber
	    value: 555-555-1234
	
	- name: Add several more beers to the beers element
	  xml:
	    path: /foo/bar.xml
	    xpath: /business/beers
	    add_children:
	    - beer: Old Rasputin
	    - beer: Old Motor Oil
	    - beer: Old Curmudgeon
	
	- name: Add a validxhtml element to the website element
	  xml:
	    path: /foo/bar.xml
	    xpath: /business/website/validxhtml
	
	- name: Add an empty validatedon attribute to the validxhtml element
	  xml:
	    path: /foo/bar.xml
	    xpath: /business/website/validxhtml/@validatedon
	
	- name: Add or modify an attribute, add element if needed
	  xml:
	    path: /foo/bar.xml
	    xpath: /business/website/validxhtml
	    attribute: validatedon
	    value: 1976-08-05
	
	# How to read an attrribute value and access it in Ansible
	- name: Read attribute value
	  xml:
	    path: /foo/bar.xml
	    xpath: /business/website/validxhtml
	    content: attribute
	    attribute: validatedon
	  register: xmlresp
	
	- name: Show attribute value
	  debug:
	    var: xmlresp.matches[0].validxhtml.validatedon
	
	- name: Remove all children from the website element (option 1)
	  xml:
	    path: /foo/bar.xml
	    xpath: /business/website/*
	    state: absent
	
	- name: Remove all children from the website element (option 2)
	  xml:
	    path: /foo/bar.xml
	    xpath: /business/website
	    children: []
	
	# In case of namespaces, like in below XML, they have to be explicitely stated
	# NOTE: there's the prefix "x" in front of the "bar", too
	#<?xml version='1.0' encoding='UTF-8'?>
	#<foo xmlns="http://x.test" xmlns:attr="http://z.test">
	#  <bar>
	#    <baz xmlns="http://y.test" attr:my_namespaced_attribute="true" />
	#  </bar>
	#</foo>
	
	- name: Set namespaced '/x:foo/x:bar/y:baz/@z:my_namespaced_attribute' to 'false'
	  xml:
	    path: foo.xml
	    xpath: /x:foo/x:bar/y:baz
	    namespaces:
	      x: http://x.test
	      y: http://y.test
	      z: http://z.test
	    attribute: z:my_namespaced_attribute
	    value: 'false'
	
	RETURN VALUES:
	
	
	actions:
	    description: A dictionary with the original xpath, namespaces and state.
	    type: dict
	    returned: success
	    sample: {xpath: xpath, namespaces: [namespace1, namespace2], state=present}
	backup_file:
	    description: The name of the backup file that was created
	    type: str
	    returned: when backup=yes
	    sample: /path/to/file.xml.1942.2017-08-24@14:16:01~
	count:
	    description: The count of xpath matches.
	    type: int
	    returned: when parameter 'count' is set
	    sample: 2
	matches:
	    description: The xpath matches found.
	    type: list
	    returned: when parameter 'print_match' is set
	msg:
	    description: A message related to the performed action(s).
	    type: string
	    returned: always
	xmlstring:
	    description: An XML string of the resulting output.
	    type: string
	    returned: when parameter 'xmlstring' is set
	

snippet yum
	EXAMPLES:
	- name: install the latest version of Apache
	  yum:
	    name: httpd
	    state: latest
	
	- name: remove the Apache package
	  yum:
	    name: httpd
	    state: absent
	
	- name: install the latest version of Apache from the testing repo
	  yum:
	    name: httpd
	    enablerepo: testing
	    state: present
	
	- name: install one specific version of Apache
	  yum:
	    name: httpd-2.2.29-1.4.amzn1
	    state: present
	
	- name: upgrade all packages
	  yum:
	    name: '*'
	    state: latest
	
	- name: upgrade all packages, excluding kernel & foo related packages
	  yum:
	    name: '*'
	    state: latest
	    exclude: kernel*,foo*
	
	- name: install the nginx rpm from a remote repo
	  yum:
	    name: http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install nginx rpm from a local file
	  yum:
	    name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm
	    state: present
	
	- name: install the 'Development tools' package group
	  yum:
	    name: "@Development tools"
	    state: present
	
	- name: install the 'Gnome desktop' environment group
	  yum:
	    name: "@^gnome-desktop-environment"
	    state: present
	
	- name: List ansible packages and register result to print with debug later.
	  yum:
	    list: ansible
	  register: result
	

snippet yum_repository
	EXAMPLES:
	- name: Add repository
	  yum_repository:
	    name: epel
	    description: EPEL YUM repo
	    baseurl: https://download.fedoraproject.org/pub/epel/$releasever/$basearch/
	
	- name: Add multiple repositories into the same file (1/2)
	  yum_repository:
	    name: epel
	    description: EPEL YUM repo
	    file: external_repos
	    baseurl: https://download.fedoraproject.org/pub/epel/$releasever/$basearch/
	    gpgcheck: no
	
	- name: Add multiple repositories into the same file (2/2)
	  yum_repository:
	    name: rpmforge
	    description: RPMforge YUM repo
	    file: external_repos
	    baseurl: http://apt.sw.be/redhat/el7/en/$basearch/rpmforge
	    mirrorlist: http://mirrorlist.repoforge.org/el7/mirrors-rpmforge
	    enabled: no
	
	# Handler showing how to clean yum metadata cache
	- name: yum-clean-metadata
	  command: yum clean metadata
	  args:
	    warn: no
	
	# Example removing a repository and cleaning up metadata cache
	- name: Remove repository (and clean up left-over metadata)
	  yum_repository:
	    name: epel
	    state: absent
	  notify: yum-clean-metadata
	
	- name: Remove repository from a specific repo file
	  yum_repository:
	    name: epel
	    file: external_repos
	    state: absent
	
	#
	# Allow to overwrite the yum_repository parameters by defining the parameters
	# as a variable in the defaults or vars file:
	#
	# my_role_somerepo_params:
	#   # Disable GPG checking
	#   gpgcheck: no
	#   # Remove the gpgkey option
	#   gpgkey: null
	#
	- name: Add Some repo
	  yum_repository:
	    name: somerepo
	    description: Some YUM repo
	    baseurl: http://server.com/path/to/the/repo
	    gpgkey: http://server.com/keys/somerepo.pub
	    gpgcheck: yes
	    params: "{{ my_role_somerepo_params }}"
	
	RETURN VALUES:
	
	
	repo:
	    description: repository name
	    returned: success
	    type: string
	    sample: "epel"
	state:
	    description: state of the target, after execution
	    returned: success
	    type: string
	    sample: "present"
	

snippet zabbix_group
	EXAMPLES:
	# Base create host groups example
	- name: Create host groups
	  local_action:
	    module: zabbix_group
	    server_url: http://monitor.example.com
	    login_user: username
	    login_password: password
	    state: present
	    host_groups:
	      - Example group1
	      - Example group2
	
	# Limit the Zabbix group creations to one host since Zabbix can return an error when doing concurrent updates
	- name: Create host groups
	  local_action:
	    module: zabbix_group
	    server_url: http://monitor.example.com
	    login_user: username
	    login_password: password
	    state: present
	    host_groups:
	      - Example group1
	      - Example group2
	  when: inventory_hostname==groups['group_name'][0]
	

snippet zabbix_host
	EXAMPLES:
	- name: Create a new host or update an existing host's info
	  local_action:
	    module: zabbix_host
	    server_url: http://monitor.example.com
	    login_user: username
	    login_password: password
	    host_name: ExampleHost
	    visible_name: ExampleName
	    host_groups:
	      - Example group1
	      - Example group2
	    link_templates:
	      - Example template1
	      - Example template2
	    status: enabled
	    state: present
	    inventory_mode: automatic
	    interfaces:
	      - type: 1
	        main: 1
	        useip: 1
	        ip: 10.xx.xx.xx
	        dns: ""
	        port: 10050
	      - type: 4
	        main: 1
	        useip: 1
	        ip: 10.xx.xx.xx
	        dns: ""
	        port: 12345
	    proxy: a.zabbix.proxy
	

snippet zabbix_hostmacro
	EXAMPLES:
	- name: Create a new host macro or update an existing macro's value
	  local_action:
	    module: zabbix_hostmacro
	    server_url: http://monitor.example.com
	    login_user: username
	    login_password: password
	    host_name: ExampleHost
	    macro_name: Example macro
	    macro_value: Example value
	    state: present
	

snippet zabbix_maintenance
	EXAMPLES:
	- name: Create a named maintenance window for host www1 for 90 minutes
	  zabbix_maintenance:
	    name: Update of www1
	    host_name: www1.example.com
	    state: present
	    minutes: 90
	    server_url: https://monitoring.example.com
	    login_user: ansible
	    login_password: pAsSwOrD
	
	- name: Create a named maintenance window for host www1 and host groups Office and Dev
	  zabbix_maintenance:
	    name: Update of www1
	    host_name: www1.example.com
	    host_groups:
	      - Office
	      - Dev
	    state: present
	    server_url: https://monitoring.example.com
	    login_user: ansible
	    login_password: pAsSwOrD
	
	- name: Create a named maintenance window for hosts www1 and db1, without data collection.
	  zabbix_maintenance:
	    name: update
	    host_names:
	      - www1.example.com
	      - db1.example.com
	    state: present
	    collect_data: False
	    server_url: https://monitoring.example.com
	    login_user: ansible
	    login_password: pAsSwOrD
	
	- name: Remove maintenance window by name
	  zabbix_maintenance:
	    name: Test1
	    state: absent
	    server_url: https://monitoring.example.com
	    login_user: ansible
	    login_password: pAsSwOrD
	

snippet zabbix_screen
	EXAMPLES:
	# Create/update a screen.
	- name: Create a new screen or update an existing screen's items
	  local_action:
	    module: zabbix_screen
	    server_url: http://monitor.example.com
	    login_user: username
	    login_password: password
	    screens:
	      - screen_name: ExampleScreen1
	        host_group: Example group1
	        state: present
	        graph_names:
	          - Example graph1
	          - Example graph2
	        graph_width: 200
	        graph_height: 100
	
	# Create/update multi-screen
	- name: Create two of new screens or update the existing screens' items
	  local_action:
	    module: zabbix_screen
	    server_url: http://monitor.example.com
	    login_user: username
	    login_password: password
	    screens:
	      - screen_name: ExampleScreen1
	        host_group: Example group1
	        state: present
	        graph_names:
	          - Example graph1
	          - Example graph2
	        graph_width: 200
	        graph_height: 100
	      - screen_name: ExampleScreen2
	        host_group: Example group2
	        state: present
	        graph_names:
	          - Example graph1
	          - Example graph2
	        graph_width: 200
	        graph_height: 100
	
	# Limit the Zabbix screen creations to one host since Zabbix can return an error when doing concurrent updates
	- name: Create a new screen or update an existing screen's items
	  local_action:
	    module: zabbix_screen
	    server_url: http://monitor.example.com
	    login_user: username
	    login_password: password
	    state: present
	    screens:
	      - screen_name: ExampleScreen
	        host_group: Example group
	        state: present
	        graph_names:
	          - Example graph1
	          - Example graph2
	        graph_width: 200
	        graph_height: 100
	  when: inventory_hostname==groups['group_name'][0]
	

snippet zfs
	EXAMPLES:
	# Create a new file system called myfs in pool rpool with the setuid property turned off
	- zfs:
	    name: rpool/myfs
	    state: present
	    setuid: off
	
	# Create a new volume called myvol in pool rpool.
	- zfs:
	    name: rpool/myvol
	    state: present
	    volsize: 10M
	
	# Create a snapshot of rpool/myfs file system.
	- zfs:
	    name: rpool/myfs@mysnapshot
	    state: present
	
	# Create a new file system called myfs2 with snapdir enabled
	- zfs:
	    name: rpool/myfs2
	    state: present
	    snapdir: enabled
	
	# Create a new file system by cloning a snapshot
	- zfs:
	    name: rpool/cloned_fs
	    state: present
	    origin: rpool/myfs@mysnapshot
	
	# Destroy a filesystem
	- zfs:
	    name: rpool/myfs
	    state: absent
	

snippet zfs_facts
	EXAMPLES:
	- name: Gather facts about ZFS dataset rpool/export/home
	  zfs_facts:
	    dataset: rpool/export/home
	
	- name: Report space usage on ZFS filesystems under data/home
	  zfs_facts:
	    name: data/home
	    recurse: yes
	    type: filesystem
	
	- debug:
	    msg: 'ZFS dataset {{ item.name }} consumes {{ item.used }} of disk space.'
	  with_items: '{{ ansible_zfs_datasets }}'
	
	RETURN VALUES:
	
	
	name:
	    description: ZFS dataset name
	    returned: always
	    type: string
	    sample: rpool/var/spool
	parsable:
	    description: if parsable output should be provided in machine friendly format.
	    returned: if 'parsable' is set to True
	    type: boolean
	    sample: True
	recurse:
	    description: if we should recurse over ZFS dataset
	    returned: if 'recurse' is set to True
	    type: boolean
	    sample: True
	zfs_datasets:
	    description: ZFS dataset facts
	    returned: always
	    type: string
	    sample:
	            {
	                "aclinherit": "restricted",
	                "aclmode": "discard",
	                "atime": "on",
	                "available": "43.8G",
	                "canmount": "on",
	                "casesensitivity": "sensitive",
	                "checksum": "on",
	                "compression": "off",
	                "compressratio": "1.00x",
	                "copies": "1",
	                "creation": "Thu Jun 16 11:37 2016",
	                "dedup": "off",
	                "devices": "on",
	                "exec": "on",
	                "filesystem_count": "none",
	                "filesystem_limit": "none",
	                "logbias": "latency",
	                "logicalreferenced": "18.5K",
	                "logicalused": "3.45G",
	                "mlslabel": "none",
	                "mounted": "yes",
	                "mountpoint": "/rpool",
	                "name": "rpool",
	                "nbmand": "off",
	                "normalization": "none",
	                "org.openindiana.caiman:install": "ready",
	                "primarycache": "all",
	                "quota": "none",
	                "readonly": "off",
	                "recordsize": "128K",
	                "redundant_metadata": "all",
	                "refcompressratio": "1.00x",
	                "referenced": "29.5K",
	                "refquota": "none",
	                "refreservation": "none",
	                "reservation": "none",
	                "secondarycache": "all",
	                "setuid": "on",
	                "sharenfs": "off",
	                "sharesmb": "off",
	                "snapdir": "hidden",
	                "snapshot_count": "none",
	                "snapshot_limit": "none",
	                "sync": "standard",
	                "type": "filesystem",
	                "used": "4.41G",
	                "usedbychildren": "4.41G",
	                "usedbydataset": "29.5K",
	                "usedbyrefreservation": "0",
	                "usedbysnapshots": "0",
	                "utf8only": "off",
	                "version": "5",
	                "vscan": "off",
	                "written": "29.5K",
	                "xattr": "on",
	                "zoned": "off"
	            }
	

snippet znode
	EXAMPLES:
	# Creating or updating a znode with a given value
	- znode:
	    hosts: 'localhost:2181'
	    name: /mypath
	    value: myvalue
	    state: present
	
	# Getting the value and stat structure for a znode
	- znode:
	    hosts: 'localhost:2181'
	    name: /mypath
	    op: get
	
	# Listing a particular znode's children
	- znode:
	    hosts: 'localhost:2181'
	    name: /zookeeper
	    op: list
	
	# Waiting 20 seconds for a znode to appear at path /mypath
	- znode:
	    hosts: 'localhost:2181'
	    name: /mypath
	    op: wait
	    timeout: 20
	
	# Deleting a znode at path /mypath
	- znode:
	    hosts: 'localhost:2181'
	    name: /mypath
	    state: absent
	
	# Creating or updating a znode with a given value on a remote Zookeeper
	- znode:
	    hosts: 'my-zookeeper-node:2181'
	    name: /mypath
	    value: myvalue
	    state: present
	  delegate_to: 127.0.0.1
	

snippet zpool_facts
	EXAMPLES:
	# Gather facts about ZFS pool rpool
	zpool_facts: pool=rpool
	
	# Gather space usage about all imported ZFS pools
	zpool_facts: properties='free,size'
	debug: msg='ZFS pool {{ item.name }} has {{ item.free }} free space out of {{ item.size }}.'
	with_items: '{{ ansible_zfs_pools }}'
	
	RETURN VALUES:
	
	
	name:
	    description: ZFS pool name
	    returned: always
	    type: string
	    sample: rpool
	parsable:
	    description: if parsable output should be provided in machine friendly format.
	    returned: if 'parsable' is set to True
	    type: boolean
	    sample: True
	zfs_pools:
	    description: ZFS pool facts
	    returned: always
	    type: string
	    sample:
	            {
	                "allocated": "3.46G",
	                "altroot": "-",
	                "autoexpand": "off",
	                "autoreplace": "off",
	                "bootfs": "rpool/ROOT/openindiana",
	                "cachefile": "-",
	                "capacity": "6%",
	                "comment": "-",
	                "dedupditto": "0",
	                "dedupratio": "1.00x",
	                "delegation": "on",
	                "expandsize": "-",
	                "failmode": "wait",
	                "feature@async_destroy": "enabled",
	                "feature@bookmarks": "enabled",
	                "feature@edonr": "enabled",
	                "feature@embedded_data": "active",
	                "feature@empty_bpobj": "active",
	                "feature@enabled_txg": "active",
	                "feature@extensible_dataset": "enabled",
	                "feature@filesystem_limits": "enabled",
	                "feature@hole_birth": "active",
	                "feature@large_blocks": "enabled",
	                "feature@lz4_compress": "active",
	                "feature@multi_vdev_crash_dump": "enabled",
	                "feature@sha512": "enabled",
	                "feature@skein": "enabled",
	                "feature@spacemap_histogram": "active",
	                "fragmentation": "3%",
	                "free": "46.3G",
	                "freeing": "0",
	                "guid": "15729052870819522408",
	                "health": "ONLINE",
	                "leaked": "0",
	                "listsnapshots": "off",
	                "name": "rpool",
	                "readonly": "off",
	                "size": "49.8G",
	                "version": "-"
	            }
	

snippet zypper
	EXAMPLES:
	# Install "nmap"
	- zypper:
	    name: nmap
	    state: present
	
	# Install apache2 with recommended packages
	- zypper:
	    name: apache2
	    state: present
	    disable_recommends: no
	
	# Apply a given patch
	- zypper:
	    name: openSUSE-2016-128
	    state: present
	    type: patch
	
	# Remove the "nmap" package
	- zypper:
	    name: nmap
	    state: absent
	
	# Install the nginx rpm from a remote repo
	- zypper:
	    name: 'http://nginx.org/packages/sles/12/x86_64/RPMS/nginx-1.8.0-1.sles12.ngx.x86_64.rpm'
	    state: present
	
	# Install local rpm file
	- zypper:
	    name: /tmp/fancy-software.rpm
	    state: present
	
	# Update all packages
	- zypper:
	    name: '*'
	    state: latest
	
	# Apply all available patches
	- zypper:
	    name: '*'
	    state: latest
	    type: patch
	
	# Perform a dist-upgrade with additional arguments
	- zypper:
	    name: '*'
	    state: dist-upgrade
	    extra_args: '--no-allow-vendor-change --allow-arch-change'
	
	# Refresh repositories and update package "openssl"
	- zypper:
	    name: openssl
	    state: present
	    update_cache: yes
	
	# Install specific version (possible comparisons: <, >, <=, >=, =)
	- zypper:
	    name: 'docker>=1.10'
	    state: present
	
	# Wait 20 seconds to acquire the lock before failing
	- zypper:
	    name: mosh
	    state: present
	  environment:
	    ZYPP_LOCK_TIMEOUT: 20
	

snippet zypper_repository
	EXAMPLES:
	# Add NVIDIA repository for graphics drivers
	- zypper_repository:
	    name: nvidia-repo
	    repo: 'ftp://download.nvidia.com/opensuse/12.2'
	    state: present
	
	# Remove NVIDIA repository
	- zypper_repository:
	    name: nvidia-repo
	    repo: 'ftp://download.nvidia.com/opensuse/12.2'
	    state: absent
	
	# Add python development repository
	- zypper_repository:
	    repo: 'http://download.opensuse.org/repositories/devel:/languages:/python/SLE_11_SP3/devel:languages:python.repo'
	
	# Refresh all repos
	- zypper_repository:
	    repo: '*'
	    runrefresh: yes
	
	# Add a repo and add it's gpg key
	- zypper_repository:
	    repo: 'http://download.opensuse.org/repositories/systemsmanagement/openSUSE_Leap_42.1/'
	    auto_import_keys: yes
	
	# Force refresh of a repository
	- zypper_repository:
	    repo: 'http://my_internal_ci_repo/repo'
	    name: my_ci_repo
	    state: present
	    runrefresh: yes
	

snippet template_host
	- hosts: web
	  remote_user: root
	  sudo: yes
	  tasks:
		- name:  apache is at the lastet version 
		  yum:   name=httpd  status==latest
		- name: make user  apache is running 
		  service:  name=httpd  state=running




snippet task_main
	---
	# tasks file for mysql-backup

	- name: mysql backup | install mariadb client
	  become: yes
	  yum:
		pkg: mariadb
		state: present

	- name: mysql backup | create backup directory
	  become: yes
	  file:
		path: "/data/mysql_backup/"
		recurse: yes
		state: directory

	- name: mysql backup | create cron job
	  become: yes
	  template:
		src: etc-crond-mysql-backup.j2
		dest: /etc/cron.daily/mysql-backup
		mode: 0755

snippet main_task
	---
	# tasks file for mysql-backup

	- name: mysql backup | install mariadb client
	  become: yes
	  yum:
		pkg: mariadb
		state: present

	- name: mysql backup | create backup directory
	  become: yes
	  file:
		path: "/data/mysql_backup/"
		recurse: yes
		state: directory

snippet main_meta
	galaxy_info:
	  author: greshem@qq.com
	  description:  demo tols
	  company: petty 
	  license: BSD
	  min_ansible_version: 2.1
	  platforms:
	  - name: EL
		versions:
		- 7
	  galaxy_tags: []

	dependencies: []

snippet main_default
	---
	# defaults file for mysql-backup

	#mysql_backup_dir:
	mysql_backup_filename_format: "{{ ansible_hostname }}-%Y%m%d-%H%M%S.mysqldump"
	mysql_backup_frequency: daily
	mysql_backup_minimum_expected_size: 1
	var_1: 2
	var_2: 3
	var_3: 4
	var_4: 5
	var_5: 6


snippet template_all_in_one
	- hosts: all
	  remote_user: root
	  sudo: yes
	  tasks:
		- name:  apache is at the lastet version 
		  yum:   name=httpd  

		- name: install the latest version of Apache
		  yum:
			name: httpd


		- name: install the latest version of Apache
		  yum:
			name: vsftpd
			state: present

snippet task_demo
	- hosts: all
	  remote_user: root
	  sudo: yes
	  tasks:
		- name:  apache is at the lastet version 
		  yum:   name=httpd  

		- name: install the latest version of Apache
		  yum:
			name: httpd


		- name: install the latest version of Apache
		  yum:
			name: vsftpd
			state: present
