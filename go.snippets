# shorthand variable declaration
snippet v
	${1} := ${2}
# variable initialization
snippet var
	var ${1:t} ${0:string}
# variable declaration
snippet var_define
	var ${1} ${2} = ${3}
# variables declaration
snippet vars
	var (
		${1} ${2} = ${3}
	)
# append
snippet append
	append(${1:slice}, ${0:value})
# bool
snippet bl
	bool
# byte
snippet bt
	byte
# break
snippet br
	break
# channel
snippet ch
	chan ${0:int}
# case
snippet cs
	case ${1:value}:
		${0}
# const
snippet c
	const ${1:NAME} = ${0:0}
# constants with iota
snippet co
	const (
		${1:NAME1} = iota
		${0:NAME2}
	)
# continue
snippet continue
	continue
# defer
snippet defer
	defer ${0:func}()
# defer recover
snippet defer_funcion
	defer func() {
		if err := recover(); err != nil {
			${0}
		}
	}()
# int
snippet int
	int
# import
snippet import_demo
	import (
		"${1:package}"
	)
# interface
snippet interface_simplest
	interface{}
# full interface snippet
snippet interface_2
	interface ${1:name} {
		${2:/* methods */}
	}
# if condition
snippet if
	if ${1:/* condition */} {
		${2}
	}
snippet ife
	if ${1:/* condition */} {
		${2}
	} else {
		${0}
	}
# else snippet
snippet el
	else {
		${1}
	}
# error snippet
snippet ir
	if err != nil {
		return err
	}
	${0}
# false
snippet f
	false
# fallthrough
snippet ft
	fallthrough
# float
snippet fl
	float32
# float32
snippet f3
	float32
# float64
snippet f6
	float64
# if else
snippet if_else_demo
	if ${1:/* condition */} {
		${2}
	} else {
		${3}
	}
	${0}
# for int loop
snippet for
	for ${1}{
		${0}
	}
# for int loop
snippet fori
	for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {
		${0}
	}
# for range loop
snippet forr
	for ${1:e} := range ${2:collection} {
		${0}
	}
# function simple
snippet fun
	func ${1:funcName}(${2}) ${3:error} {
		${4}
	}
	${0}
# function on receiver
snippet fum
	func (${1:receiver} ${2:type}) ${3:funcName}(${4}) ${5:error} {
		${6}
	}
	${0}
# log printf
snippet lf
	log.Printf("%${1:s}", ${2:var})
# log printf
snippet lp
	log.Println("${1}")
# make
snippet make_string
	make(${1:[]string}, ${0:0})
# map
snippet mp
	map[${1:string}]${0:int}
# main()
snippet main

	package main
	import (
		"fmt"
	)

	func main() {
		var str = "Hello World"
		fmt.Println(str)
	}
# new
snippet new
	new(${0:type})
# package
snippet package
	package ${1:main}
# panic
snippet panic
	panic("${0:msg}")
# print
snippet print
	fmt.Printf("%${1:s}\n", ${2:var})
# println
snippet println
	fmt.Println("${1:s}")
# range
snippet range_
	range ${0}
# return
snippet return 
	return ${0}
# result
snippet result
	result
# select
snippet select
	select {
	case ${1:v1} := <-${2:chan1}
		${3}
	default:
		${0}
	}
# string
snippet sr
	string
# struct
snippet st
	struct ${1:name} {
		${2:/* data */}
	}
	${0}
# switch
snippet sw
	switch ${1:var} {
	case ${2:value1}:
		${3}
	case ${4:value2}:
		${5}
	default:
		${0}
	}
snippet sp
	fmt.Sprintf("%${1:s}", ${2:var})
# true
snippet t
	true
# goroutine named function
snippet g
	go ${1:funcName}(${0})
# goroutine anonymous function
snippet ga
	go func(${1} ${2:type}) {
		${3:/* code */}
	}(${0})
snippet test test function
	func Test${1:name}(t *testing.T) {
		${2}
	}
	${0}
snippet bench benchmark function
	func Benchmark${1:name}(b *testing.B) {
		for i := 0; i < b.N; i++ {
			${2}
		}
	}
	${0}

snippet file_append
	package main
	import (
		"os"
		"time"
		"strings"
	)
	//打印内容到文件中
	//tracefile(fmt.Sprintf("receive:%s",v))
	func tracefile(str_content string)  {
		fd,_:=os.OpenFile("a.txt",os.O_RDWR|os.O_CREATE|os.O_APPEND,0644)
		fd_time:=time.Now().Format("2006-01-02 15:04:05");
		fd_content:=strings.Join([]string{"======",fd_time,"=====",str_content,"\n"},"")
		buf:=[]byte(fd_content)
		fd.Write(buf)
		fd.Close()
	}
	func main() {
		tracefile("this is message")
	}

snippet logger
	REF: file_append


snippet DATA
	package main

	import (
		"fmt"
	)

	const DATA = \`
	DATA_REPLACE_HERE
	\`

	func main() {
		//fmt.Printf("\033[2J")           // clear screen
		//fmt.Printf("\033[%d;%dH", 0, 0) // move cursor to x-0, y=0
		fmt.Printf(DATA)         
	}


snippet map_string_demo
	//H:\asesome_golang\rexray_rexray.chm::/S/52.html
	//core/core.go
	var goosToUname = map[string]string{
			"android":   "Android",
			"darwin":    "Darwin",
			"dragonfly": "DragonFly",
			"freebsd":   "kFreeBSD",
			"linux":     "Linux",
			"nacl":      "NaCl",
			"netbsd":    "NetBSD",
			"openbsd":   "OpenBSD",
			"plan9":     "Plan9",
			"solaris":   "Solaris",
			"windows":   "Windows",
	}


