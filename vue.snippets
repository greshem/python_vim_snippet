snippet alert.md_0
	::: demo Alert 组件提供四种主题，由"type"属性指定，默认值为"info"。
	"""html
	<template>
	  <el-alert
	    title="成功提示的文案"
	    type="success">
	  </el-alert>
	  <el-alert
	    title="消息提示的文案"
	    type="info">
	  </el-alert>
	  <el-alert
	    title="警告提示的文案"
	    type="warning">
	  </el-alert>
	  <el-alert
	    title="错误提示的文案"
	    type="error">
	  </el-alert>
	</template>
	

snippet alert.md_1
	::: demo 在 Alert 组件中，你可以设置是否可关闭，关闭按钮的文本以及关闭时的回调函数。"closable"属性决定是否可关闭，接受"boolean"，默认为"true"。你可以设置"close-text"属性来代替右侧的关闭图标，注意："close-text"必须为文本。设置"close"事件来设置关闭时的回调。
	"""html
	<template>
	  <el-alert
	    title="不可关闭的 alert"
	    type="success"
	    :closable="false">
	  </el-alert>
	  <el-alert
	    title="自定义 close-text"
	    type="info"
	    close-text="知道了">
	  </el-alert>
	  <el-alert
	    title="设置了回调的 alert"
	    type="warning"
	    @close="hello">
	  </el-alert>
	</template>
	
	<script>
	  export default {
	    methods: {
	      hello() {
	        alert('Hello World!');
	      }
	    }
	  }
	</script>
	

snippet alert.md_2
	::: demo 通过设置"show-icon"属性来显示 Alert 的 icon，这能更有效地向用户展示你的显示意图。
	"""html
	<template>
	  <el-alert
	    title="成功提示的文案"
	    type="success"
	    show-icon>
	  </el-alert>
	  <el-alert
	    title="消息提示的文案"
	    type="info"
	    show-icon>
	  </el-alert>
	  <el-alert
	    title="警告提示的文案"
	    type="warning"
	    show-icon>
	  </el-alert>
	  <el-alert
	    title="错误提示的文案"
	    type="error"
	    show-icon>
	  </el-alert>
	</template>
	

snippet alert.md_3
	::: demo 除了必填的"title"属性外，你可以设置"description"属性来帮助你更好地介绍，我们称之为辅助性文字。辅助性文字只能存放单行文本，会自动换行显示。
	"""html
	<template>
	  <el-alert
	    title="带辅助性文字介绍"
	    type="success"
	    description="这是一句绕口令：黑灰化肥会挥发发灰黑化肥挥发；灰黑化肥会挥发发黑灰化肥发挥。 黑灰化肥会挥发发灰黑化肥黑灰挥发化为灰……">
	  </el-alert>
	</template>
	

snippet alert.md_4
	::: demo 最后，这是一个同时具有 icon 和辅助性文字的样例。
	"""html
	<template>
	  <el-alert
	    title="成功提示的文案"
	    type="success"
	    description="文字说明文字说明文字说明文字说明文字说明文字说明"
	    show-icon>
	  </el-alert>
	  <el-alert
	    title="消息提示的文案"
	    type="info"
	    description="文字说明文字说明文字说明文字说明文字说明文字说明"
	    show-icon>
	  </el-alert>
	  <el-alert
	    title="警告提示的文案"
	    type="warning"
	    description="文字说明文字说明文字说明文字说明文字说明文字说明"
	    show-icon>
	  </el-alert>
	  <el-alert
	    title="错误提示的文案"
	    type="error"
	    description="文字说明文字说明文字说明文字说明文字说明文字说明"
	    show-icon>
	  </el-alert>
	</template>
	

snippet badge.md_0
	
	"""html
	<el-badge :value="12" class="item">
	  <el-button size="small">评论</el-button>
	</el-badge>
	<el-badge :value="3" class="item">
	  <el-button size="small">回复</el-button>
	</el-badge>
	
	<el-dropdown trigger="click">
	  <span class="el-dropdown-link">
	    点我查看<i class="el-icon-caret-bottom el-icon--right"></i>
	  </span>
	  <el-dropdown-menu slot="dropdown">
	    <el-dropdown-item class="clearfix">
	      评论
	      <el-badge class="mark" :value="12" />
	    </el-dropdown-item>
	    <el-dropdown-item class="clearfix">
	      回复
	      <el-badge class="mark" :value="3" />
	    </el-dropdown-item>
	  </el-dropdown-menu>
	</el-dropdown>
	
	<style>
	.item {
	  margin-top: 10px;
	  margin-right: 40px;
	}
	</style>
	

snippet badge.md_1
	
	"""html
	<el-badge :value="200" :max="99" class="item">
	  <el-button size="small">评论</el-button>
	</el-badge>
	<el-badge :value="100" :max="10" class="item">
	  <el-button size="small">回复</el-button>
	</el-badge>
	
	<style>
	.item {
	  margin-top: 10px;
	  margin-right: 40px;
	}
	</style>
	

snippet badge.md_2
	
	"""html
	<el-badge value="new" class="item">
	  <el-button size="small">评论</el-button>
	</el-badge>
	<el-badge value="hot" class="item">
	  <el-button size="small">回复</el-button>
	</el-badge>
	
	<style>
	.item {
	  margin-top: 10px;
	  margin-right: 40px;
	}
	</style>
	

snippet badge.md_3
	
	"""html
	<el-badge is-dot class="item">数据查询</el-badge>
	<el-badge is-dot class="item">
	  <el-button class="share-button" icon="share" type="primary"></el-button>
	</el-badge>
	
	<style>
	.item {
	  margin-top: 10px;
	  margin-right: 40px;
	}
	</style>
	

snippet breadcrumb.md_0
	
	"""html
	<el-breadcrumb separator="/">
	  <el-breadcrumb-item :to="{ path: '/' }">首页</el-breadcrumb-item>
	  <el-breadcrumb-item>活动管理</el-breadcrumb-item>
	  <el-breadcrumb-item>活动列表</el-breadcrumb-item>
	  <el-breadcrumb-item>活动详情</el-breadcrumb-item>
	</el-breadcrumb>
	

snippet button.md_0
	
	"""html
	<el-button>默认按钮</el-button>
	<el-button type="primary">主要按钮</el-button>
	<el-button type="text">文字按钮</el-button>
	

snippet button.md_1
	
	"""html
	<el-button :plain="true" :disabled="true">主要按钮</el-button>
	<el-button type="primary" :disabled="true">主要按钮</el-button>
	<el-button type="text" :disabled="true">文字按钮</el-button>
	

snippet button.md_2
	
	"""html
	<div class="block">
	  <span class="demonstration">默认显示颜色</span>
	  <span class="wrapper">
	    <el-button type="success">成功按钮</el-button>
	    <el-button type="warning">警告按钮</el-button>
	    <el-button type="danger">危险按钮</el-button>
	    <el-button type="info">信息按钮</el-button>
	  </span>
	</div>
	<div class="block">
	  <span class="demonstration">hover 显示颜色</span>
	  <span class="wrapper">
	    <el-button :plain="true" type="success">成功按钮</el-button>
	    <el-button :plain="true" type="warning">警告按钮</el-button>
	    <el-button :plain="true" type="danger">危险按钮</el-button>
	    <el-button :plain="true" type="info">信息按钮</el-button>
	  </span>
	</div>
	

snippet button.md_3
	
	"""html
	<el-button type="primary" icon="edit"></el-button>
	<el-button type="primary" icon="share"></el-button>
	<el-button type="primary" icon="delete"></el-button>
	<el-button type="primary" icon="search">搜索</el-button>
	<el-button type="primary">上传<i class="el-icon-upload el-icon--right"></i></el-button>
	

snippet button.md_4
	
	"""html
	<el-button-group>
	  <el-button type="primary" icon="arrow-left">上一页</el-button>
	  <el-button type="primary">下一页<i class="el-icon-arrow-right el-icon--right"></i></el-button>
	</el-button-group>
	<el-button-group>
	  <el-button type="primary" icon="edit"></el-button>
	  <el-button type="primary" icon="share"></el-button>
	  <el-button type="primary" icon="delete"></el-button>
	</el-button-group>
	

snippet button.md_5
	
	"""html
	<el-button type="primary" :loading="true">加载中</el-button>
	

snippet button.md_6
	
	"""html
	<el-button type="primary" size="large">大型按钮</el-button>
	<el-button type="primary">正常按钮</el-button>
	<el-button type="primary" size="small">小型按钮</el-button>
	<el-button type="primary" size="mini">超小按钮</el-button>
	

snippet card.md_0
	:::demo Card 组件包括"header"和"body"部分，"header"部分需要有显式具名 slot 分发，同时也是可选的。
	"""html
	<el-card class="box-card">
	  <div slot="header" class="clearfix">
	    <span style="line-height: 36px;">卡片名称</span>
	    <el-button style="float: right;" type="primary">操作按钮</el-button>
	  </div>
	  <div v-for="o in 4" :key="o" class="text item">
	    {{'列表内容 ' + o }}
	  </div>
	</el-card>
	
	<style>
	  .text {
	    font-size: 14px;
	  }
	
	  .item {
	    padding: 18px 0;
	  }
	
	  .clearfix:before,
	  .clearfix:after {
	      display: table;
	      content: "";
	  }
	  .clearfix:after {
	      clear: both
	  }
	
	  .box-card {
	    width: 480px;
	  }
	</style>
	

snippet card.md_1
	:::demo
	"""html
	<el-card class="box-card">
	  <div v-for="o in 4" :key="o" class="text item">
	    {{'列表内容 ' + o }}
	  </div>
	</el-card>
	
	<style>
	  .text {
	    font-size: 14px;
	  }
	
	  .item {
	    padding: 18px 0;
	  }
	
	  .box-card {
	    width: 480px;
	  }
	</style>
	

snippet card.md_2
	:::demo 配置"body-style"属性来自定义"body"部分的"style"，我们还使用了布局组件。
	"""html
	<el-row>
	  <el-col :span="8" v-for="(o, index) in 2" :key="o" :offset="index > 0 ? 2 : 0">
	    <el-card :body-style="{ padding: '0px' }">
	      <img src="~examples/assets/images/hamburger.png" class="image">
	      <div style="padding: 14px;">
	        <span>好吃的汉堡</span>
	        <div class="bottom clearfix">
	          <time class="time">{{ currentDate }}</time>
	          <el-button type="text" class="button">操作按钮</el-button>
	        </div>
	      </div>
	    </el-card>
	  </el-col>
	</el-row>
	
	<style>
	  .time {
	    font-size: 13px;
	    color: #999;
	  }
	  
	  .bottom {
	    margin-top: 13px;
	    line-height: 12px;
	  }
	
	  .button {
	    padding: 0;
	    float: right;
	  }
	
	  .image {
	    width: 100%;
	    display: block;
	  }
	
	  .clearfix:before,
	  .clearfix:after {
	      display: table;
	      content: "";
	  }
	  
	  .clearfix:after {
	      clear: both
	  }
	</style>
	
	<script>
	export default {
	  data() {
	    return {
	      currentDate: new Date()
	    };
	  }
	}
	</script>
	

snippet carousel.md_0
	::: demo 结合使用"el-carousel"和"el-carousel-item"标签就得到了一个走马灯。幻灯片的内容是任意的，需要放在"el-carousel-item"标签中。默认情况下，在鼠标 hover 底部的指示器时就会触发切换。通过设置"trigger"属性为"click"，可以达到点击触发的效果。
	"""html
	<template>
	  <div class="block">
	    <span class="demonstration">默认 Hover 指示器触发</span>
	    <el-carousel height="150px">
	      <el-carousel-item v-for="item in 4" :key="item">
	        <h3>{{ item }}</h3>
	      </el-carousel-item>
	    </el-carousel>
	  </div>
	  <div class="block">
	    <span class="demonstration">Click 指示器触发</span>
	    <el-carousel trigger="click" height="150px">
	      <el-carousel-item v-for="item in 4" :key="item">
	        <h3>{{ item }}</h3>
	      </el-carousel-item>
	    </el-carousel>
	  </div>
	</template>
	
	<style>
	  .el-carousel__item h3 {
	    color: #475669;
	    font-size: 14px;
	    opacity: 0.75;
	    line-height: 150px;
	    margin: 0;
	  }
	
	  .el-carousel__item:nth-child(2n) {
	     background-color: #99a9bf;
	  }
	  
	  .el-carousel__item:nth-child(2n+1) {
	     background-color: #d3dce6;
	  }
	</style>
	

snippet carousel.md_1
	::: demo "indicator-position"属性定义了指示器的位置。默认情况下，它会显示在走马灯内部，设置为"outside"则会显示在外部；设置为"none"则不会显示指示器。
	"""html
	<template>
	  <el-carousel indicator-position="outside">
	    <el-carousel-item v-for="item in 4" :key="item">
	      <h3>{{ item }}</h3>
	    </el-carousel-item>
	  </el-carousel>
	</template>
	
	<style>
	  .el-carousel__item h3 {
	    color: #475669;
	    font-size: 18px;
	    opacity: 0.75;
	    line-height: 300px;
	    margin: 0;
	  }
	  
	  .el-carousel__item:nth-child(2n) {
	    background-color: #99a9bf;
	  }
	  
	  .el-carousel__item:nth-child(2n+1) {
	    background-color: #d3dce6;
	  }
	</style>
	

snippet carousel.md_2
	::: demo "arrow"属性定义了切换箭头的显示时机。默认情况下，切换箭头只有在鼠标 hover 到走马灯上时才会显示；若将"arrow"设置为"always"，则会一直显示；设置为"never"，则会一直隐藏。
	"""html
	<template>
	  <el-carousel :interval="5000" arrow="always">
	    <el-carousel-item v-for="item in 4" :key="item">
	      <h3>{{ item }}</h3>
	    </el-carousel-item>
	  </el-carousel>
	</template>
	
	<style>
	  .el-carousel__item h3 {
	    color: #475669;
	    font-size: 18px;
	    opacity: 0.75;
	    line-height: 300px;
	    margin: 0;
	  }
	  
	  .el-carousel__item:nth-child(2n) {
	    background-color: #99a9bf;
	  }
	  
	  .el-carousel__item:nth-child(2n+1) {
	    background-color: #d3dce6;
	  }
	</style>
	

snippet carousel.md_3
	::: demo 将"type"属性设置为"card"即可启用卡片模式。从交互上来说，卡片模式和一般模式的最大区别在于，可以通过直接点击两侧的幻灯片进行切换。
	"""html
	<template>
	  <el-carousel :interval="4000" type="card" height="200px">
	    <el-carousel-item v-for="item in 6" :key="item">
	      <h3>{{ item }}</h3>
	    </el-carousel-item>
	  </el-carousel>
	</template>
	
	<style>
	  .el-carousel__item h3 {
	    color: #475669;
	    font-size: 14px;
	    opacity: 0.75;
	    line-height: 200px;
	    margin: 0;
	  }
	  
	  .el-carousel__item:nth-child(2n) {
	    background-color: #99a9bf;
	  }
	  
	  .el-carousel__item:nth-child(2n+1) {
	    background-color: #d3dce6;
	  }
	</style>
	

snippet cascader.md_0
	:::demo 只需为 Cascader 的"options"属性指定选项数组即可渲染出一个级联选择器。通过"expand-trigger"可以定义展开子级菜单的触发方式。本例还展示了"change"事件，它的参数为 Cascader 的绑定值：一个由各级菜单的值所组成的数组。
	"""html
	<div class="block">
	  <span class="demonstration">默认 click 触发子菜单</span>
	  <el-cascader
	    :options="options"
	    v-model="selectedOptions"
	    @change="handleChange">
	  </el-cascader>
	</div>
	<div class="block">
	  <span class="demonstration">hover 触发子菜单</span>
	  <el-cascader
	    expand-trigger="hover"
	    :options="options"
	    v-model="selectedOptions2"
	    @change="handleChange">
	  </el-cascader>
	</div>
	
	<script>
	  export default {
	    data() {
	      return {
	        options: [{
	          value: 'zhinan',
	          label: '指南',
	          children: [{
	            value: 'shejiyuanze',
	            label: '设计原则',
	            children: [{
	              value: 'yizhi',
	              label: '一致'
	            }, {
	              value: 'fankui',
	              label: '反馈'
	            }, {
	              value: 'xiaolv',
	              label: '效率'
	            }, {
	              value: 'kekong',
	              label: '可控'
	            }]
	          }, {
	            value: 'daohang',
	            label: '导航',
	            children: [{
	              value: 'cexiangdaohang',
	              label: '侧向导航'
	            }, {
	              value: 'dingbudaohang',
	              label: '顶部导航'
	            }]
	          }]
	        }, {
	          value: 'zujian',
	          label: '组件',
	          children: [{
	            value: 'basic',
	            label: 'Basic',
	            children: [{
	              value: 'layout',
	              label: 'Layout 布局'
	            }, {
	              value: 'color',
	              label: 'Color 色彩'
	            }, {
	              value: 'typography',
	              label: 'Typography 字体'
	            }, {
	              value: 'icon',
	              label: 'Icon 图标'
	            }, {
	              value: 'button',
	              label: 'Button 按钮'
	            }]
	          }, {
	            value: 'form',
	            label: 'Form',
	            children: [{
	              value: 'radio',
	              label: 'Radio 单选框'
	            }, {
	              value: 'checkbox',
	              label: 'Checkbox 多选框'
	            }, {
	              value: 'input',
	              label: 'Input 输入框'
	            }, {
	              value: 'input-number',
	              label: 'InputNumber 计数器'
	            }, {
	              value: 'select',
	              label: 'Select 选择器'
	            }, {
	              value: 'cascader',
	              label: 'Cascader 级联选择器'
	            }, {
	              value: 'switch',
	              label: 'Switch 开关'
	            }, {
	              value: 'slider',
	              label: 'Slider 滑块'
	            }, {
	              value: 'time-picker',
	              label: 'TimePicker 时间选择器'
	            }, {
	              value: 'date-picker',
	              label: 'DatePicker 日期选择器'
	            }, {
	              value: 'datetime-picker',
	              label: 'DateTimePicker 日期时间选择器'
	            }, {
	              value: 'upload',
	              label: 'Upload 上传'
	            }, {
	              value: 'rate',
	              label: 'Rate 评分'
	            }, {
	              value: 'form',
	              label: 'Form 表单'
	            }]
	          }, {
	            value: 'data',
	            label: 'Data',
	            children: [{
	              value: 'table',
	              label: 'Table 表格'
	            }, {
	              value: 'tag',
	              label: 'Tag 标签'
	            }, {
	              value: 'progress',
	              label: 'Progress 进度条'
	            }, {
	              value: 'tree',
	              label: 'Tree 树形控件'
	            }, {
	              value: 'pagination',
	              label: 'Pagination 分页'
	            }, {
	              value: 'badge',
	              label: 'Badge 标记'
	            }]
	          }, {
	            value: 'notice',
	            label: 'Notice',
	            children: [{
	              value: 'alert',
	              label: 'Alert 警告'
	            }, {
	              value: 'loading',
	              label: 'Loading 加载'
	            }, {
	              value: 'message',
	              label: 'Message 消息提示'
	            }, {
	              value: 'message-box',
	              label: 'MessageBox 弹框'
	            }, {
	              value: 'notification',
	              label: 'Notification 通知'
	            }]
	          }, {
	            value: 'navigation',
	            label: 'Navigation',
	            children: [{
	              value: 'menu',
	              label: 'NavMenu 导航菜单'
	            }, {
	              value: 'tabs',
	              label: 'Tabs 标签页'
	            }, {
	              value: 'breadcrumb',
	              label: 'Breadcrumb 面包屑'
	            }, {
	              value: 'dropdown',
	              label: 'Dropdown 下拉菜单'
	            }, {
	              value: 'steps',
	              label: 'Steps 步骤条'
	            }]
	          }, {
	            value: 'others',
	            label: 'Others',
	            children: [{
	              value: 'dialog',
	              label: 'Dialog 对话框'
	            }, {
	              value: 'tooltip',
	              label: 'Tooltip 文字提示'
	            }, {
	              value: 'popover',
	              label: 'Popover 弹出框'
	            }, {
	              value: 'card',
	              label: 'Card 卡片'
	            }, {
	              value: 'carousel',
	              label: 'Carousel 走马灯'
	            }, {
	              value: 'collapse',
	              label: 'Collapse 折叠面板'
	            }]
	          }]
	        }, {
	          value: 'ziyuan',
	          label: '资源',
	          children: [{
	            value: 'axure',
	            label: 'Axure Components'
	          }, {
	            value: 'sketch',
	            label: 'Sketch Templates'
	          }, {
	            value: 'jiaohu',
	            label: '组件交互文档'
	          }]
	        }],
	        selectedOptions: [],
	        selectedOptions2: []
	      };
	    },
	    methods: {
	      handleChange(value) {
	        console.log(value);
	      }
	    }
	  };
	</script>
	

snippet cascader.md_1
	:::demo 本例中，"options"指定的数组中的第一个元素含有"disabled: true"键值对，因此是禁用的。在默认情况下，Cascader 会检查数据中每一项的"disabled"字段是否为"true"，如果你的数据中表示禁用含义的字段名不为"disabled"，可以通过"props"属性来指定（详见下方 API 表格）。当然，"value"、"label"和"children"这三个字段名也可以通过同样的方式指定。
	"""html
	<el-cascader
	  :options="optionsWithDisabled"
	></el-cascader>
	<script>
	  export default {
	    data() {
	      return {
	        optionsWithDisabled: [{
	          value: 'zhinan',
	          label: '指南',
	          disabled: true,
	          children: [{
	            value: 'shejiyuanze',
	            label: '设计原则',
	            children: [{
	              value: 'yizhi',
	              label: '一致'
	            }, {
	              value: 'fankui',
	              label: '反馈'
	            }, {
	              value: 'xiaolv',
	              label: '效率'
	            }, {
	              value: 'kekong',
	              label: '可控'
	            }]
	          }, {
	            value: 'daohang',
	            label: '导航',
	            children: [{
	              value: 'cexiangdaohang',
	              label: '侧向导航'
	            }, {
	              value: 'dingbudaohang',
	              label: '顶部导航'
	            }]
	          }]
	        }, {
	          value: 'zujian',
	          label: '组件',
	          children: [{
	            value: 'basic',
	            label: 'Basic',
	            children: [{
	              value: 'layout',
	              label: 'Layout 布局'
	            }, {
	              value: 'color',
	              label: 'Color 色彩'
	            }, {
	              value: 'typography',
	              label: 'Typography 字体'
	            }, {
	              value: 'icon',
	              label: 'Icon 图标'
	            }, {
	              value: 'button',
	              label: 'Button 按钮'
	            }]
	          }, {
	            value: 'form',
	            label: 'Form',
	            children: [{
	              value: 'radio',
	              label: 'Radio 单选框'
	            }, {
	              value: 'checkbox',
	              label: 'Checkbox 多选框'
	            }, {
	              value: 'input',
	              label: 'Input 输入框'
	            }, {
	              value: 'input-number',
	              label: 'InputNumber 计数器'
	            }, {
	              value: 'select',
	              label: 'Select 选择器'
	            }, {
	              value: 'cascader',
	              label: 'Cascader 级联选择器'
	            }, {
	              value: 'switch',
	              label: 'Switch 开关'
	            }, {
	              value: 'slider',
	              label: 'Slider 滑块'
	            }, {
	              value: 'time-picker',
	              label: 'TimePicker 时间选择器'
	            }, {
	              value: 'date-picker',
	              label: 'DatePicker 日期选择器'
	            }, {
	              value: 'datetime-picker',
	              label: 'DateTimePicker 日期时间选择器'
	            }, {
	              value: 'upload',
	              label: 'Upload 上传'
	            }, {
	              value: 'rate',
	              label: 'Rate 评分'
	            }, {
	              value: 'form',
	              label: 'Form 表单'
	            }]
	          }, {
	            value: 'data',
	            label: 'Data',
	            children: [{
	              value: 'table',
	              label: 'Table 表格'
	            }, {
	              value: 'tag',
	              label: 'Tag 标签'
	            }, {
	              value: 'progress',
	              label: 'Progress 进度条'
	            }, {
	              value: 'tree',
	              label: 'Tree 树形控件'
	            }, {
	              value: 'pagination',
	              label: 'Pagination 分页'
	            }, {
	              value: 'badge',
	              label: 'Badge 标记'
	            }]
	          }, {
	            value: 'notice',
	            label: 'Notice',
	            children: [{
	              value: 'alert',
	              label: 'Alert 警告'
	            }, {
	              value: 'loading',
	              label: 'Loading 加载'
	            }, {
	              value: 'message',
	              label: 'Message 消息提示'
	            }, {
	              value: 'message-box',
	              label: 'MessageBox 弹框'
	            }, {
	              value: 'notification',
	              label: 'Notification 通知'
	            }]
	          }, {
	            value: 'navigation',
	            label: 'Navigation',
	            children: [{
	              value: 'menu',
	              label: 'NavMenu 导航菜单'
	            }, {
	              value: 'tabs',
	              label: 'Tabs 标签页'
	            }, {
	              value: 'breadcrumb',
	              label: 'Breadcrumb 面包屑'
	            }, {
	              value: 'dropdown',
	              label: 'Dropdown 下拉菜单'
	            }, {
	              value: 'steps',
	              label: 'Steps 步骤条'
	            }]
	          }, {
	            value: 'others',
	            label: 'Others',
	            children: [{
	              value: 'dialog',
	              label: 'Dialog 对话框'
	            }, {
	              value: 'tooltip',
	              label: 'Tooltip 文字提示'
	            }, {
	              value: 'popover',
	              label: 'Popover 弹出框'
	            }, {
	              value: 'card',
	              label: 'Card 卡片'
	            }, {
	              value: 'carousel',
	              label: 'Carousel 走马灯'
	            }, {
	              value: 'collapse',
	              label: 'Collapse 折叠面板'
	            }]
	          }]
	        }, {
	          value: 'ziyuan',
	          label: '资源',
	          children: [{
	            value: 'axure',
	            label: 'Axure Components'
	          }, {
	            value: 'sketch',
	            label: 'Sketch Templates'
	          }, {
	            value: 'jiaohu',
	            label: '组件交互文档'
	          }]
	        }]
	      };
	    }
	  };
	</script>
	

snippet cascader.md_2
	:::demo 属性"show-all-levels"定义了是否显示完整的路径，将其赋值为"false"则仅显示最后一级
	"""html
	<el-cascader
	  :options="options"
	  :show-all-levels="false"
	></el-cascader>
	<script>
	  export default {
	    data() {
	      return {
	        options: [{
	          value: 'zhinan',
	          label: '指南',
	          children: [{
	            value: 'shejiyuanze',
	            label: '设计原则',
	            children: [{
	              value: 'yizhi',
	              label: '一致'
	            }, {
	              value: 'fankui',
	              label: '反馈'
	            }, {
	              value: 'xiaolv',
	              label: '效率'
	            }, {
	              value: 'kekong',
	              label: '可控'
	            }]
	          }, {
	            value: 'daohang',
	            label: '导航',
	            children: [{
	              value: 'cexiangdaohang',
	              label: '侧向导航'
	            }, {
	              value: 'dingbudaohang',
	              label: '顶部导航'
	            }]
	          }]
	        }, {
	          value: 'zujian',
	          label: '组件',
	          children: [{
	            value: 'basic',
	            label: 'Basic',
	            children: [{
	              value: 'layout',
	              label: 'Layout 布局'
	            }, {
	              value: 'color',
	              label: 'Color 色彩'
	            }, {
	              value: 'typography',
	              label: 'Typography 字体'
	            }, {
	              value: 'icon',
	              label: 'Icon 图标'
	            }, {
	              value: 'button',
	              label: 'Button 按钮'
	            }]
	          }, {
	            value: 'form',
	            label: 'Form',
	            children: [{
	              value: 'radio',
	              label: 'Radio 单选框'
	            }, {
	              value: 'checkbox',
	              label: 'Checkbox 多选框'
	            }, {
	              value: 'input',
	              label: 'Input 输入框'
	            }, {
	              value: 'input-number',
	              label: 'InputNumber 计数器'
	            }, {
	              value: 'select',
	              label: 'Select 选择器'
	            }, {
	              value: 'cascader',
	              label: 'Cascader 级联选择器'
	            }, {
	              value: 'switch',
	              label: 'Switch 开关'
	            }, {
	              value: 'slider',
	              label: 'Slider 滑块'
	            }, {
	              value: 'time-picker',
	              label: 'TimePicker 时间选择器'
	            }, {
	              value: 'date-picker',
	              label: 'DatePicker 日期选择器'
	            }, {
	              value: 'datetime-picker',
	              label: 'DateTimePicker 日期时间选择器'
	            }, {
	              value: 'upload',
	              label: 'Upload 上传'
	            }, {
	              value: 'rate',
	              label: 'Rate 评分'
	            }, {
	              value: 'form',
	              label: 'Form 表单'
	            }]
	          }, {
	            value: 'data',
	            label: 'Data',
	            children: [{
	              value: 'table',
	              label: 'Table 表格'
	            }, {
	              value: 'tag',
	              label: 'Tag 标签'
	            }, {
	              value: 'progress',
	              label: 'Progress 进度条'
	            }, {
	              value: 'tree',
	              label: 'Tree 树形控件'
	            }, {
	              value: 'pagination',
	              label: 'Pagination 分页'
	            }, {
	              value: 'badge',
	              label: 'Badge 标记'
	            }]
	          }, {
	            value: 'notice',
	            label: 'Notice',
	            children: [{
	              value: 'alert',
	              label: 'Alert 警告'
	            }, {
	              value: 'loading',
	              label: 'Loading 加载'
	            }, {
	              value: 'message',
	              label: 'Message 消息提示'
	            }, {
	              value: 'message-box',
	              label: 'MessageBox 弹框'
	            }, {
	              value: 'notification',
	              label: 'Notification 通知'
	            }]
	          }, {
	            value: 'navigation',
	            label: 'Navigation',
	            children: [{
	              value: 'menu',
	              label: 'NavMenu 导航菜单'
	            }, {
	              value: 'tabs',
	              label: 'Tabs 标签页'
	            }, {
	              value: 'breadcrumb',
	              label: 'Breadcrumb 面包屑'
	            }, {
	              value: 'dropdown',
	              label: 'Dropdown 下拉菜单'
	            }, {
	              value: 'steps',
	              label: 'Steps 步骤条'
	            }]
	          }, {
	            value: 'others',
	            label: 'Others',
	            children: [{
	              value: 'dialog',
	              label: 'Dialog 对话框'
	            }, {
	              value: 'tooltip',
	              label: 'Tooltip 文字提示'
	            }, {
	              value: 'popover',
	              label: 'Popover 弹出框'
	            }, {
	              value: 'card',
	              label: 'Card 卡片'
	            }, {
	              value: 'carousel',
	              label: 'Carousel 走马灯'
	            }, {
	              value: 'collapse',
	              label: 'Collapse 折叠面板'
	            }]
	          }]
	        }, {
	          value: 'ziyuan',
	          label: '资源',
	          children: [{
	            value: 'axure',
	            label: 'Axure Components'
	          }, {
	            value: 'sketch',
	            label: 'Sketch Templates'
	          }, {
	            value: 'jiaohu',
	            label: '组件交互文档'
	          }]
	        }]
	      };
	    }
	  };
	</script>
	

snippet cascader.md_3
	:::demo 默认值通过数组的方式指定。
	"""html
	<el-cascader
	  :options="options"
	  v-model="selectedOptions3"
	></el-cascader>
	<script>
	  export default {
	    data() {
	      return {
	        options: [{
	          value: 'zhinan',
	          label: '指南',
	          children: [{
	            value: 'shejiyuanze',
	            label: '设计原则',
	            children: [{
	              value: 'yizhi',
	              label: '一致'
	            }, {
	              value: 'fankui',
	              label: '反馈'
	            }, {
	              value: 'xiaolv',
	              label: '效率'
	            }, {
	              value: 'kekong',
	              label: '可控'
	            }]
	          }, {
	            value: 'daohang',
	            label: '导航',
	            children: [{
	              value: 'cexiangdaohang',
	              label: '侧向导航'
	            }, {
	              value: 'dingbudaohang',
	              label: '顶部导航'
	            }]
	          }]
	        }, {
	          value: 'zujian',
	          label: '组件',
	          children: [{
	            value: 'basic',
	            label: 'Basic',
	            children: [{
	              value: 'layout',
	              label: 'Layout 布局'
	            }, {
	              value: 'color',
	              label: 'Color 色彩'
	            }, {
	              value: 'typography',
	              label: 'Typography 字体'
	            }, {
	              value: 'icon',
	              label: 'Icon 图标'
	            }, {
	              value: 'button',
	              label: 'Button 按钮'
	            }]
	          }, {
	            value: 'form',
	            label: 'Form',
	            children: [{
	              value: 'radio',
	              label: 'Radio 单选框'
	            }, {
	              value: 'checkbox',
	              label: 'Checkbox 多选框'
	            }, {
	              value: 'input',
	              label: 'Input 输入框'
	            }, {
	              value: 'input-number',
	              label: 'InputNumber 计数器'
	            }, {
	              value: 'select',
	              label: 'Select 选择器'
	            }, {
	              value: 'cascader',
	              label: 'Cascader 级联选择器'
	            }, {
	              value: 'switch',
	              label: 'Switch 开关'
	            }, {
	              value: 'slider',
	              label: 'Slider 滑块'
	            }, {
	              value: 'time-picker',
	              label: 'TimePicker 时间选择器'
	            }, {
	              value: 'date-picker',
	              label: 'DatePicker 日期选择器'
	            }, {
	              value: 'datetime-picker',
	              label: 'DateTimePicker 日期时间选择器'
	            }, {
	              value: 'upload',
	              label: 'Upload 上传'
	            }, {
	              value: 'rate',
	              label: 'Rate 评分'
	            }, {
	              value: 'form',
	              label: 'Form 表单'
	            }]
	          }, {
	            value: 'data',
	            label: 'Data',
	            children: [{
	              value: 'table',
	              label: 'Table 表格'
	            }, {
	              value: 'tag',
	              label: 'Tag 标签'
	            }, {
	              value: 'progress',
	              label: 'Progress 进度条'
	            }, {
	              value: 'tree',
	              label: 'Tree 树形控件'
	            }, {
	              value: 'pagination',
	              label: 'Pagination 分页'
	            }, {
	              value: 'badge',
	              label: 'Badge 标记'
	            }]
	          }, {
	            value: 'notice',
	            label: 'Notice',
	            children: [{
	              value: 'alert',
	              label: 'Alert 警告'
	            }, {
	              value: 'loading',
	              label: 'Loading 加载'
	            }, {
	              value: 'message',
	              label: 'Message 消息提示'
	            }, {
	              value: 'message-box',
	              label: 'MessageBox 弹框'
	            }, {
	              value: 'notification',
	              label: 'Notification 通知'
	            }]
	          }, {
	            value: 'navigation',
	            label: 'Navigation',
	            children: [{
	              value: 'menu',
	              label: 'NavMenu 导航菜单'
	            }, {
	              value: 'tabs',
	              label: 'Tabs 标签页'
	            }, {
	              value: 'breadcrumb',
	              label: 'Breadcrumb 面包屑'
	            }, {
	              value: 'dropdown',
	              label: 'Dropdown 下拉菜单'
	            }, {
	              value: 'steps',
	              label: 'Steps 步骤条'
	            }]
	          }, {
	            value: 'others',
	            label: 'Others',
	            children: [{
	              value: 'dialog',
	              label: 'Dialog 对话框'
	            }, {
	              value: 'tooltip',
	              label: 'Tooltip 文字提示'
	            }, {
	              value: 'popover',
	              label: 'Popover 弹出框'
	            }, {
	              value: 'card',
	              label: 'Card 卡片'
	            }, {
	              value: 'carousel',
	              label: 'Carousel 走马灯'
	            }, {
	              value: 'collapse',
	              label: 'Collapse 折叠面板'
	            }]
	          }]
	        }, {
	          value: 'ziyuan',
	          label: '资源',
	          children: [{
	            value: 'axure',
	            label: 'Axure Components'
	          }, {
	            value: 'sketch',
	            label: 'Sketch Templates'
	          }, {
	            value: 'jiaohu',
	            label: '组件交互文档'
	          }]
	        }],
	        selectedOptions3: ['zujian', 'data', 'tag']
	      };
	    }
	  };
	</script>
	

snippet cascader.md_4
	:::demo 若需要允许用户选择任意一级选项，则可将"change-on-select"赋值为"true"
	"""html
	<el-cascader
	  :options="options"
	  change-on-select
	></el-cascader>
	<script>
	  export default {
	    data() {
	      return {
	        options: [{
	          value: 'zhinan',
	          label: '指南',
	          children: [{
	            value: 'shejiyuanze',
	            label: '设计原则',
	            children: [{
	              value: 'yizhi',
	              label: '一致'
	            }, {
	              value: 'fankui',
	              label: '反馈'
	            }, {
	              value: 'xiaolv',
	              label: '效率'
	            }, {
	              value: 'kekong',
	              label: '可控'
	            }]
	          }, {
	            value: 'daohang',
	            label: '导航',
	            children: [{
	              value: 'cexiangdaohang',
	              label: '侧向导航'
	            }, {
	              value: 'dingbudaohang',
	              label: '顶部导航'
	            }]
	          }]
	        }, {
	          value: 'zujian',
	          label: '组件',
	          children: [{
	            value: 'basic',
	            label: 'Basic',
	            children: [{
	              value: 'layout',
	              label: 'Layout 布局'
	            }, {
	              value: 'color',
	              label: 'Color 色彩'
	            }, {
	              value: 'typography',
	              label: 'Typography 字体'
	            }, {
	              value: 'icon',
	              label: 'Icon 图标'
	            }, {
	              value: 'button',
	              label: 'Button 按钮'
	            }]
	          }, {
	            value: 'form',
	            label: 'Form',
	            children: [{
	              value: 'radio',
	              label: 'Radio 单选框'
	            }, {
	              value: 'checkbox',
	              label: 'Checkbox 多选框'
	            }, {
	              value: 'input',
	              label: 'Input 输入框'
	            }, {
	              value: 'input-number',
	              label: 'InputNumber 计数器'
	            }, {
	              value: 'select',
	              label: 'Select 选择器'
	            }, {
	              value: 'cascader',
	              label: 'Cascader 级联选择器'
	            }, {
	              value: 'switch',
	              label: 'Switch 开关'
	            }, {
	              value: 'slider',
	              label: 'Slider 滑块'
	            }, {
	              value: 'time-picker',
	              label: 'TimePicker 时间选择器'
	            }, {
	              value: 'date-picker',
	              label: 'DatePicker 日期选择器'
	            }, {
	              value: 'datetime-picker',
	              label: 'DateTimePicker 日期时间选择器'
	            }, {
	              value: 'upload',
	              label: 'Upload 上传'
	            }, {
	              value: 'rate',
	              label: 'Rate 评分'
	            }, {
	              value: 'form',
	              label: 'Form 表单'
	            }]
	          }, {
	            value: 'data',
	            label: 'Data',
	            children: [{
	              value: 'table',
	              label: 'Table 表格'
	            }, {
	              value: 'tag',
	              label: 'Tag 标签'
	            }, {
	              value: 'progress',
	              label: 'Progress 进度条'
	            }, {
	              value: 'tree',
	              label: 'Tree 树形控件'
	            }, {
	              value: 'pagination',
	              label: 'Pagination 分页'
	            }, {
	              value: 'badge',
	              label: 'Badge 标记'
	            }]
	          }, {
	            value: 'notice',
	            label: 'Notice',
	            children: [{
	              value: 'alert',
	              label: 'Alert 警告'
	            }, {
	              value: 'loading',
	              label: 'Loading 加载'
	            }, {
	              value: 'message',
	              label: 'Message 消息提示'
	            }, {
	              value: 'message-box',
	              label: 'MessageBox 弹框'
	            }, {
	              value: 'notification',
	              label: 'Notification 通知'
	            }]
	          }, {
	            value: 'navigation',
	            label: 'Navigation',
	            children: [{
	              value: 'menu',
	              label: 'NavMenu 导航菜单'
	            }, {
	              value: 'tabs',
	              label: 'Tabs 标签页'
	            }, {
	              value: 'breadcrumb',
	              label: 'Breadcrumb 面包屑'
	            }, {
	              value: 'dropdown',
	              label: 'Dropdown 下拉菜单'
	            }, {
	              value: 'steps',
	              label: 'Steps 步骤条'
	            }]
	          }, {
	            value: 'others',
	            label: 'Others',
	            children: [{
	              value: 'dialog',
	              label: 'Dialog 对话框'
	            }, {
	              value: 'tooltip',
	              label: 'Tooltip 文字提示'
	            }, {
	              value: 'popover',
	              label: 'Popover 弹出框'
	            }, {
	              value: 'card',
	              label: 'Card 卡片'
	            }, {
	              value: 'carousel',
	              label: 'Carousel 走马灯'
	            }, {
	              value: 'collapse',
	              label: 'Collapse 折叠面板'
	            }]
	          }]
	        }, {
	          value: 'ziyuan',
	          label: '资源',
	          children: [{
	            value: 'axure',
	            label: 'Axure Components'
	          }, {
	            value: 'sketch',
	            label: 'Sketch Templates'
	          }, {
	            value: 'jiaohu',
	            label: '组件交互文档'
	          }]
	        }]
	      };
	    }
	  };
	</script>
	

snippet cascader.md_5
	:::demo 本例的选项数据源在初始化时不包含城市数据。利用"active-item-change"事件，可以在用户点击某个省份时拉取该省份下的城市数据。此外，本例还展示了"props"属性的用法。
	"""html
	<el-cascader
	  :options="options2"
	  @active-item-change="handleItemChange"
	  :props="props"
	></el-cascader>
	
	<script>
	  export default {
	    data() {
	      return {
	        options2: [{
	          label: '江苏',
	          cities: []
	        }, {
	          label: '浙江',
	          cities: []
	        }],
	        props: {
	          value: 'label',
	          children: 'cities'
	        }
	      };
	    },
	
	    methods: {
	      handleItemChange(val) {
	        console.log('active item:', val);
	        setTimeout(_ => {
	          if (val.indexOf('江苏') > -1 && !this.options2[0].cities.length) {
	            this.options2[0].cities = [{
	              label: '南京'
	            }];
	          } else if (val.indexOf('浙江') > -1 && !this.options2[1].cities.length) {
	            this.options2[1].cities = [{
	              label: '杭州'
	            }];
	          }
	        }, 300);
	      }
	    }
	  };
	</script>
	

snippet cascader.md_6
	:::demo 将"filterable"赋值为"true"即可打开搜索功能。
	"""html
	<div class="block">
	  <span class="demonstration">只可选择最后一级菜单的选项</span>
	  <el-cascader
	    placeholder="试试搜索：指南"
	    :options="options"
	    filterable
	  ></el-cascader>
	</div>
	<div class="block">
	  <span class="demonstration">可选择任意一级菜单的选项</span>
	  <el-cascader
	    placeholder="试试搜索：指南"
	    :options="options"
	    filterable
	    change-on-select
	  ></el-cascader>
	</div>
	
	<script>
	  export default {
	    data() {
	      return {
	        options: [{
	          value: 'zhinan',
	          label: '指南',
	          children: [{
	            value: 'shejiyuanze',
	            label: '设计原则',
	            children: [{
	              value: 'yizhi',
	              label: '一致'
	            }, {
	              value: 'fankui',
	              label: '反馈'
	            }, {
	              value: 'xiaolv',
	              label: '效率'
	            }, {
	              value: 'kekong',
	              label: '可控'
	            }]
	          }, {
	            value: 'daohang',
	            label: '导航',
	            children: [{
	              value: 'cexiangdaohang',
	              label: '侧向导航'
	            }, {
	              value: 'dingbudaohang',
	              label: '顶部导航'
	            }]
	          }]
	        }, {
	          value: 'zujian',
	          label: '组件',
	          children: [{
	            value: 'basic',
	            label: 'Basic',
	            children: [{
	              value: 'layout',
	              label: 'Layout 布局'
	            }, {
	              value: 'color',
	              label: 'Color 色彩'
	            }, {
	              value: 'typography',
	              label: 'Typography 字体'
	            }, {
	              value: 'icon',
	              label: 'Icon 图标'
	            }, {
	              value: 'button',
	              label: 'Button 按钮'
	            }]
	          }, {
	            value: 'form',
	            label: 'Form',
	            children: [{
	              value: 'radio',
	              label: 'Radio 单选框'
	            }, {
	              value: 'checkbox',
	              label: 'Checkbox 多选框'
	            }, {
	              value: 'input',
	              label: 'Input 输入框'
	            }, {
	              value: 'input-number',
	              label: 'InputNumber 计数器'
	            }, {
	              value: 'select',
	              label: 'Select 选择器'
	            }, {
	              value: 'cascader',
	              label: 'Cascader 级联选择器'
	            }, {
	              value: 'switch',
	              label: 'Switch 开关'
	            }, {
	              value: 'slider',
	              label: 'Slider 滑块'
	            }, {
	              value: 'time-picker',
	              label: 'TimePicker 时间选择器'
	            }, {
	              value: 'date-picker',
	              label: 'DatePicker 日期选择器'
	            }, {
	              value: 'datetime-picker',
	              label: 'DateTimePicker 日期时间选择器'
	            }, {
	              value: 'upload',
	              label: 'Upload 上传'
	            }, {
	              value: 'rate',
	              label: 'Rate 评分'
	            }, {
	              value: 'form',
	              label: 'Form 表单'
	            }]
	          }, {
	            value: 'data',
	            label: 'Data',
	            children: [{
	              value: 'table',
	              label: 'Table 表格'
	            }, {
	              value: 'tag',
	              label: 'Tag 标签'
	            }, {
	              value: 'progress',
	              label: 'Progress 进度条'
	            }, {
	              value: 'tree',
	              label: 'Tree 树形控件'
	            }, {
	              value: 'pagination',
	              label: 'Pagination 分页'
	            }, {
	              value: 'badge',
	              label: 'Badge 标记'
	            }]
	          }, {
	            value: 'notice',
	            label: 'Notice',
	            children: [{
	              value: 'alert',
	              label: 'Alert 警告'
	            }, {
	              value: 'loading',
	              label: 'Loading 加载'
	            }, {
	              value: 'message',
	              label: 'Message 消息提示'
	            }, {
	              value: 'message-box',
	              label: 'MessageBox 弹框'
	            }, {
	              value: 'notification',
	              label: 'Notification 通知'
	            }]
	          }, {
	            value: 'navigation',
	            label: 'Navigation',
	            children: [{
	              value: 'menu',
	              label: 'NavMenu 导航菜单'
	            }, {
	              value: 'tabs',
	              label: 'Tabs 标签页'
	            }, {
	              value: 'breadcrumb',
	              label: 'Breadcrumb 面包屑'
	            }, {
	              value: 'dropdown',
	              label: 'Dropdown 下拉菜单'
	            }, {
	              value: 'steps',
	              label: 'Steps 步骤条'
	            }]
	          }, {
	            value: 'others',
	            label: 'Others',
	            children: [{
	              value: 'dialog',
	              label: 'Dialog 对话框'
	            }, {
	              value: 'tooltip',
	              label: 'Tooltip 文字提示'
	            }, {
	              value: 'popover',
	              label: 'Popover 弹出框'
	            }, {
	              value: 'card',
	              label: 'Card 卡片'
	            }, {
	              value: 'carousel',
	              label: 'Carousel 走马灯'
	            }, {
	              value: 'collapse',
	              label: 'Collapse 折叠面板'
	            }]
	          }]
	        }, {
	          value: 'ziyuan',
	          label: '资源',
	          children: [{
	            value: 'axure',
	            label: 'Axure Components'
	          }, {
	            value: 'sketch',
	            label: 'Sketch Templates'
	          }, {
	            value: 'jiaohu',
	            label: '组件交互文档'
	          }]
	        }]
	      };
	    }
	  };
	</script>
	

snippet checkbox.md_0
	
	"""html
	<template>
	  <!-- "checked" 为 true 或 false -->
	  <el-checkbox v-model="checked">备选项</el-checkbox>
	</template>
	<script>
	  export default {
	    data() {
	      return {
	        checked: true
	      };
	    }
	  };
	</script>
	
snippet page_simplest
	<template>
	  <!-- "checked" 为 true 或 false -->
	  <el-checkbox v-model="checked">备选项</el-checkbox>
	</template>
	<script>
	  export default {
	    data() {
	      return {
	        checked: true
	      };
	    }
	  };
	</script>
	
snippet simplest_page
	<template>
	  <!-- "checked" 为 true 或 false -->
	  <el-checkbox v-model="checked">备选项</el-checkbox>
	</template>
	<script>
	  export default {
	    data() {
	      return {
	        checked: true
	      };
	    }
	  };
	</script>



snippet checkbox.md_1
	
	"""html
	<template>
	  <el-checkbox v-model="checked1" disabled>备选项1</el-checkbox>
	  <el-checkbox v-model="checked2" disabled>备选项</el-checkbox>
	</template>
	<script>
	  export default {
	    data() {
	      return {
	        checked1: false,
	        checked2: true
	      };
	    }
	  };
	</script>
	

snippet checkbox.md_2
	
	"""html
	<template>
	  <el-checkbox-group v-model="checkList">
	    <el-checkbox label="复选框 A"></el-checkbox>
	    <el-checkbox label="复选框 B"></el-checkbox>
	    <el-checkbox label="复选框 C"></el-checkbox>
	    <el-checkbox label="禁用" disabled></el-checkbox>
	    <el-checkbox label="选中且禁用" disabled></el-checkbox>
	  </el-checkbox-group>
	</template>
	
	<script>
	  export default {
	    data () {
	      return {
	        checkList: ['选中且禁用','复选框 A']
	      };
	    }
	  };
	</script>
	

snippet checkbox.md_3
	
	"""html
	<template>
	  <el-checkbox :indeterminate="isIndeterminate" v-model="checkAll" @change="handleCheckAllChange">全选</el-checkbox>
	  <div style="margin: 15px 0;"></div>
	  <el-checkbox-group v-model="checkedCities" @change="handleCheckedCitiesChange">
	    <el-checkbox v-for="city in cities" :label="city" :key="city">{{city}}</el-checkbox>
	  </el-checkbox-group>
	</template>
	<script>
	  const cityOptions = ['上海', '北京', '广州', '深圳'];
	  export default {
	    data() {
	      return {
	        checkAll: true,
	        checkedCities: ['上海', '北京'],
	        cities: cityOptions,
	        isIndeterminate: true
	      };
	    },
	    methods: {
	      handleCheckAllChange(event) {
	        this.checkedCities = event.target.checked ? cityOptions : [];
	        this.isIndeterminate = false;
	      },
	      handleCheckedCitiesChange(value) {
	        let checkedCount = value.length;
	        this.checkAll = checkedCount === this.cities.length;
	        this.isIndeterminate = checkedCount > 0 && checkedCount < this.cities.length;
	      }
	    }
	  };
	</script>
	

snippet checkbox.md_4
	
	"""html
	<template>
	  <el-checkbox-group 
	    v-model="checkedCities1"
	    :min="1"
	    :max="2">
	    <el-checkbox v-for="city in cities" :label="city" :key="city">{{city}}</el-checkbox>
	  </el-checkbox-group>
	</template>
	<script>
	  const cityOptions = ['上海', '北京', '广州', '深圳'];
	  export default {
	    data() {
	      return {
	        checkedCities1: ['上海', '北京'],
	        cities: cityOptions
	      };
	    }
	  };
	</script>
	

snippet checkbox.md_5
	:::demo 只需要把"el-checkbox"元素替换为"el-checkbox-button"元素即可。此外，Element 还提供了"size"属性，支持"large"和"small"两种。
	"""html
	<template>
	  <div style="margin: 15px 0;"></div>
	  <el-checkbox-group v-model="checkboxGroup1">
	    <el-checkbox-button v-for="city in cities" :label="city" :key="city">{{city}}</el-checkbox-button>
	  </el-checkbox-group>
	  <div style="margin: 15px 0;"></div>
	  <el-checkbox-group v-model="checkboxGroup2" size="small">
	    <el-checkbox-button v-for="city in cities" :label="city" :disabled="city === '深圳'" :key="city">{{city}}</el-checkbox-button>
	  </el-checkbox-group>
	  <div style="margin: 15px 0;"></div>
	  <el-checkbox-group v-model="checkboxGroup3" size="large" fill="#324057" text-color="#a4aebd" :min="1" :max="3">
	    <el-checkbox-button v-for="city in cities" :label="city" :key="city">{{city}}</el-checkbox-button>
	  </el-checkbox-group>
	</template>
	<script>
	  const cityOptions = ['上海', '北京', '广州', '深圳'];
	  export default {
	    data () {
	      return {
	        checkboxGroup1: ['上海'],
	        checkboxGroup2: ['北京'],
	        checkboxGroup3: ['广州'],
	        cities: cityOptions
	      };
	    }
	  }
	</script>
	

snippet collapse.md_0
	:::demo
	"""html
	<el-collapse v-model="activeNames" @change="handleChange">
	  <el-collapse-item title="一致性 Consistency" name="1">
	    <div>与现实生活一致：与现实生活的流程、逻辑保持一致，遵循用户习惯的语言和概念；</div>
	    <div>在界面中一致：所有的元素和结构需保持一致，比如：设计样式、图标和文本、元素的位置等。</div>
	  </el-collapse-item>
	  <el-collapse-item title="反馈 Feedback" name="2">
	    <div>控制反馈：通过界面样式和交互动效让用户可以清晰的感知自己的操作；</div>
	    <div>页面反馈：操作后，通过页面元素的变化清晰地展现当前状态。</div>
	  </el-collapse-item>
	  <el-collapse-item title="效率 Efficiency" name="3">
	    <div>简化流程：设计简洁直观的操作流程；</div>
	    <div>清晰明确：语言表达清晰且表意明确，让用户快速理解进而作出决策；</div>
	    <div>帮助用户识别：界面简单直白，让用户快速识别而非回忆，减少用户记忆负担。</div>
	  </el-collapse-item>
	  <el-collapse-item title="可控 Controllability" name="4">
	    <div>用户决策：根据场景可给予用户操作建议或安全提示，但不能代替用户进行决策；</div>
	    <div>结果可控：用户可以自由的进行操作，包括撤销、回退和终止当前操作等。</div>
	  </el-collapse-item>
	</el-collapse>
	<script>
	  export default {
	    data() {
	      return {
	        activeNames: ['1']
	      };
	    }
	  }
	</script>
	

snippet collapse.md_1
	:::demo 通过 "accordion" 属性来设置是否以手风琴模式显示。
	"""html
	<el-collapse v-model="activeName" accordion>
	  <el-collapse-item title="一致性 Consistency" name="1">
	    <div>与现实生活一致：与现实生活的流程、逻辑保持一致，遵循用户习惯的语言和概念；</div>
	    <div>在界面中一致：所有的元素和结构需保持一致，比如：设计样式、图标和文本、元素的位置等。</div>
	  </el-collapse-item>
	  <el-collapse-item title="反馈 Feedback" name="2">
	    <div>控制反馈：通过界面样式和交互动效让用户可以清晰的感知自己的操作；</div>
	    <div>页面反馈：操作后，通过页面元素的变化清晰地展现当前状态。</div>
	  </el-collapse-item>
	  <el-collapse-item title="效率 Efficiency" name="3">
	    <div>简化流程：设计简洁直观的操作流程；</div>
	    <div>清晰明确：语言表达清晰且表意明确，让用户快速理解进而作出决策；</div>
	    <div>帮助用户识别：界面简单直白，让用户快速识别而非回忆，减少用户记忆负担。</div>
	  </el-collapse-item>
	  <el-collapse-item title="可控 Controllability" name="4">
	    <div>用户决策：根据场景可给予用户操作建议或安全提示，但不能代替用户进行决策；</div>
	    <div>结果可控：用户可以自由的进行操作，包括撤销、回退和终止当前操作等。</div>
	  </el-collapse-item>
	</el-collapse>
	<script>
	  export default {
	    data() {
	      return {
	        activeName: '1'
	      };
	    }
	  }
	</script>
	

snippet collapse.md_2
	:::demo
	"""html
	<el-collapse accordion>
	  <el-collapse-item>
	    <template slot="title">
	      一致性 Consistency<i class="header-icon el-icon-information"></i>
	    </template>
	    <div>与现实生活一致：与现实生活的流程、逻辑保持一致，遵循用户习惯的语言和概念；</div>
	    <div>在界面中一致：所有的元素和结构需保持一致，比如：设计样式、图标和文本、元素的位置等。</div>
	  </el-collapse-item>
	  <el-collapse-item title="反馈 Feedback">
	    <div>控制反馈：通过界面样式和交互动效让用户可以清晰的感知自己的操作；</div>
	    <div>页面反馈：操作后，通过页面元素的变化清晰地展现当前状态。</div>
	  </el-collapse-item>
	  <el-collapse-item title="效率 Efficiency">
	    <div>简化流程：设计简洁直观的操作流程；</div>
	    <div>清晰明确：语言表达清晰且表意明确，让用户快速理解进而作出决策；</div>
	    <div>帮助用户识别：界面简单直白，让用户快速识别而非回忆，减少用户记忆负担。</div>
	  </el-collapse-item>
	  <el-collapse-item title="可控 Controllability">
	    <div>用户决策：根据场景可给予用户操作建议或安全提示，但不能代替用户进行决策；</div>
	    <div>结果可控：用户可以自由的进行操作，包括撤销、回退和终止当前操作等。</div>
	  </el-collapse-item>
	</el-collapse>
	

snippet color-picker.md_0
	:::demo 使用 v-model 与 Vue 实例中的一个变量进行双向绑定，绑定的变量需要是字符串类型。
	"""html
	<div class="block">
	  <span class="demonstration">有默认值</span>
	  <el-color-picker v-model="color1"></el-color-picker>
	</div>
	<div class="block">
	  <span class="demonstration">无默认值</span>
	  <el-color-picker v-model="color2"></el-color-picker>
	</div>
	
	<script>
	  export default {
	    data() {
	      return {
	        color1: '#20a0ff',
	        color2: null
	      }
	    }
	  };
	</script>
	

snippet color-picker.md_1
	:::demo ColorPicker 支持普通颜色，也支持带 Alpha 通道的颜色，通过"show-alpha"属性即可控制是否支持透明度的选择。
	"""html
	<el-color-picker v-model="color3" show-alpha></el-color-picker>
	
	<script>
	  export default {
	    data() {
	      return {
	        color3: 'rgba(19, 206, 102, 0.8)'
	      }
	    }
	  };
	</script>
	

snippet custom-theme.md_0
	首先安装「主题生成工具」，可以全局安装或者安装在当前项目下，推荐安装在项目里，方便别人 clone 项目时能直接安装依赖并启动，这里以全局安装做演示。
	"""shell
	npm i element-theme -g
	

snippet custom-theme.md_1
	安装默认主题，可以从 npm 安装或者从 GitHub 拉取最新代码。
	"""shell
	# 从 npm
	npm i element-theme-default -D
	
	# 从 GitHub
	npm i https://github.com/ElementUI/theme-default -D
	

snippet custom-theme.md_2
	
	"""shell
	et -i [可以自定义变量文件]
	
	> ✔ Generator variables file
	

snippet custom-theme.md_3
	如果使用默认配置，执行后当前目录会有一个 "element-variables.css" 文件。内部包含了主题所用到的所有变量，它们使用 CSS4 的风格定义。大致结构如下：
	"""css
	:root {
	
	  /* Colors
	  -------------------------- */
	  --color-primary: #20a0ff;
	  --color-success: #13ce66;
	  --color-warning: #f7ba2a;
	  --color-danger: #ff4949;
	  --color-info: #50BFFF;
	  --color-blue: #2e90fe;
	  --color-blue-light: #5da9ff;
	  --color-blue-lighter: rgba(var(--color-blue), 0.12);
	  --color-white: #fff;
	  --color-black: #000;
	  --color-grey: #C0CCDA;
	

snippet custom-theme.md_4
	如果使用默认配置，执行后当前目录会有一个 "element-variables.css" 文件。内部包含了主题所用到的所有变量，它们使用 CSS4 的风格定义。大致结构如下：
	"""css
	:root {
	
	  /* Colors
	  -------------------------- */
	  --color-primary: #20a0ff;
	  --color-success: #13ce66;
	  --color-warning: #f7ba2a;
	  --color-danger: #ff4949;
	  --color-info: #50BFFF;
	  --color-blue: #2e90fe;
	  --color-blue-light: #5da9ff;
	  --color-blue-lighter: rgba(var(--color-blue), 0.12);
	  --color-white: #fff;
	  --color-black: #000;
	  --color-grey: #C0CCDA;
	"""
	
	### 修改变量
	直接编辑 "element-variables.css" 文件，例如修改主题色为红色。
	"""CSS
	--color-primary: red;
	

snippet custom-theme.md_5
	保存文件后，到命令行里执行 "et" 编译主题，如果你想启用 "watch" 模式，实时编译主题，增加 "-w" 参数；如果你在初始化时指定了自定义变量文件，则需要增加 "-c" 参数，并带上你的变量文件名
	"""shell
	et
	
	> ✔ build theme font
	> ✔ build element theme
	

snippet custom-theme.md_6
	
	"""javascript
	import '../theme/index.css'
	import ElementUI from 'element-ui'
	import Vue from 'vue'
	
	Vue.use(ElementUI)
	

snippet custom-theme.md_7
	如果是搭配 "babel-plugin-component" 一起使用，只需要修改 ".babelrc" 的配置，指定 "styleLibraryName" 路径为自定义主题相对于 ".babelrc" 的路径，注意要加 "~"。
	"""json
	{
	  "plugins": [["component", [
	    {
	      "libraryName": "element-ui",
	      "styleLibraryName": "~theme"
	    }
	  ]]]
	}
	

snippet date-picker.md_0
	:::demo 基本单位由"type"属性指定。快捷选项需配置"picker-options"对象中的"shortcuts"，禁用日期通过 "disabledDate" 设置，传入函数
	"""html
	<template>
	  <div class="block">
	    <span class="demonstration">默认</span>
	    <el-date-picker
	      v-model="value1"
	      type="date"
	      placeholder="选择日期"
	      :picker-options="pickerOptions0">
	    </el-date-picker>
	  </div>
	  <div class="block">
	    <span class="demonstration">带快捷选项</span>
	    <el-date-picker
	      v-model="value2"
	      align="right"
	      type="date"
	      placeholder="选择日期"
	      :picker-options="pickerOptions1">
	    </el-date-picker>
	  </div>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        pickerOptions0: {
	          disabledDate(time) {
	            return time.getTime() < Date.now() - 8.64e7;
	          }
	        },
	        pickerOptions1: {
	          shortcuts: [{
	            text: '今天',
	            onClick(picker) {
	              picker.$emit('pick', new Date());
	            }
	          }, {
	            text: '昨天',
	            onClick(picker) {
	              const date = new Date();
	              date.setTime(date.getTime() - 3600 * 1000 * 24);
	              picker.$emit('pick', date);
	            }
	          }, {
	            text: '一周前',
	            onClick(picker) {
	              const date = new Date();
	              date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);
	              picker.$emit('pick', date);
	            }
	          }]
	        },
	        value1: '',
	        value2: '',
	      };
	    }
	  };
	</script>
	

snippet date-picker.md_1
	:::demo
	"""html
	<div class="block">
	  <span class="demonstration">周</span>
	  <el-date-picker
	    v-model="value3"
	    type="week"
	    format="yyyy 第 WW 周"
	    placeholder="选择周">
	  </el-date-picker>
	</div>
	<div class="block">
	  <span class="demonstration">月</span>
	  <el-date-picker
	    v-model="value4"
	    type="month"
	    placeholder="选择月">
	  </el-date-picker>
	</div>
	<div class="block">
	  <span class="demonstration">年</span>
	  <el-date-picker
	    v-model="value5"
	    align="right"
	    type="year"
	    placeholder="选择年">
	  </el-date-picker>
	</div>
	
	<script>
	  export default {
	    data() {
	      return {
	        value3: '',
	        value4: '',
	        value5: ''
	      };
	    }
	  };
	</script>
	

snippet date-picker.md_2
	:::demo
	"""html
	<template>
	  <div class="block">
	    <span class="demonstration">默认</span>
	    <el-date-picker
	      v-model="value6"
	      type="daterange"
	      placeholder="选择日期范围">
	    </el-date-picker>
	  </div>
	  <div class="block">
	    <span class="demonstration">带快捷选项</span>
	    <el-date-picker
	      v-model="value7"
	      type="daterange"
	      align="right"
	      placeholder="选择日期范围"
	      :picker-options="pickerOptions2">
	    </el-date-picker>
	  </div>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        pickerOptions2: {
	          shortcuts: [{
	            text: '最近一周',
	            onClick(picker) {
	              const end = new Date();
	              const start = new Date();
	              start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);
	              picker.$emit('pick', [start, end]);
	            }
	          }, {
	            text: '最近一个月',
	            onClick(picker) {
	              const end = new Date();
	              const start = new Date();
	              start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
	              picker.$emit('pick', [start, end]);
	            }
	          }, {
	            text: '最近三个月',
	            onClick(picker) {
	              const end = new Date();
	              const start = new Date();
	              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
	              picker.$emit('pick', [start, end]);
	            }
	          }]
	        },
	        value6: '',
	        value7: ''
	      };
	    }
	  };
	</script>
	

snippet datetime-picker.md_0
	:::demo 通过设置"type"属性为"datetime"，即可在同一个选择器里同时进行日期和时间的选择。快捷选项的使用方法与 Date Picker 相同。
	"""html
	<template>
	  <div class="block">
	    <span class="demonstration">默认</span>
	    <el-date-picker
	      v-model="value1"
	      type="datetime"
	      placeholder="选择日期时间">
	    </el-date-picker>
	  </div>
	  <div class="block">
	    <span class="demonstration">带快捷选项</span>
	    <el-date-picker
	      v-model="value2"
	      type="datetime"
	      placeholder="选择日期时间"
	      align="right"
	      :picker-options="pickerOptions1">
	    </el-date-picker>
	  </div>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        pickerOptions1: {
	          shortcuts: [{
	            text: '今天',
	            onClick(picker) {
	              picker.$emit('pick', new Date());
	            }
	          }, {
	            text: '昨天',
	            onClick(picker) {
	              const date = new Date();
	              date.setTime(date.getTime() - 3600 * 1000 * 24);
	              picker.$emit('pick', date);
	            }
	          }, {
	            text: '一周前',
	            onClick(picker) {
	              const date = new Date();
	              date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);
	              picker.$emit('pick', date);
	            }
	          }]
	        },
	        value1: '',
	        value2: ''
	      };
	    }
	  };
	</script>
	

snippet datetime-picker.md_1
	:::demo 设置"type"为"datetimerange"即可选择日期和时间范围
	"""html
	<template>
	  <div class="block">
	    <span class="demonstration">默认</span>
	    <el-date-picker
	      v-model="value3"
	      type="datetimerange"
	      placeholder="选择时间范围">
	    </el-date-picker>
	  </div>
	  <div class="block">
	    <span class="demonstration">带快捷选项</span>
	    <el-date-picker
	      v-model="value4"
	      type="datetimerange"
	      :picker-options="pickerOptions2"
	      placeholder="选择时间范围"
	      align="right">
	    </el-date-picker>
	  </div>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        pickerOptions2: {
	          shortcuts: [{
	            text: '最近一周',
	            onClick(picker) {
	              const end = new Date();
	              const start = new Date();
	              start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);
	              picker.$emit('pick', [start, end]);
	            }
	          }, {
	            text: '最近一个月',
	            onClick(picker) {
	              const end = new Date();
	              const start = new Date();
	              start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
	              picker.$emit('pick', [start, end]);
	            }
	          }, {
	            text: '最近三个月',
	            onClick(picker) {
	              const end = new Date();
	              const start = new Date();
	              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
	              picker.$emit('pick', [start, end]);
	            }
	          }]
	        },
	        value3: [new Date(2000, 10, 10, 10, 10), new Date(2000, 10, 11, 10, 10)],
	        value4: ''
	      };
	    }
	  };
	</script>
	

snippet dialog.md_0
	
	"""html
	<el-button type="text" @click="dialogVisible = true">点击打开 Dialog</el-button>
	
	<el-dialog
	  title="提示"
	  :visible.sync="dialogVisible"
	  size="tiny"
	  :before-close="handleClose">
	  <span>这是一段信息</span>
	  <span slot="footer" class="dialog-footer">
	    <el-button @click="dialogVisible = false">取 消</el-button>
	    <el-button type="primary" @click="dialogVisible = false">确 定</el-button>
	  </span>
	</el-dialog>
	
	<script>
	  export default {
	    data() {
	      return {
	        dialogVisible: false
	      };
	    },
	    methods: {
	      handleClose(done) {
	        this.$confirm('确认关闭？')
	          .then(_ => {
	            done();
	          })
	          .catch(_ => {});
	      }
	    }
	  };
	</script>
	

snippet dialog.md_1
	:::demo
	"""html
	<!-- Table -->
	<el-button type="text" @click="dialogTableVisible = true">打开嵌套表格的 Dialog</el-button>
	
	<el-dialog title="收货地址" :visible.sync="dialogTableVisible">
	  <el-table :data="gridData">
	    <el-table-column property="date" label="日期" width="150"></el-table-column>
	    <el-table-column property="name" label="姓名" width="200"></el-table-column>
	    <el-table-column property="address" label="地址"></el-table-column>
	  </el-table>
	</el-dialog>
	
	<!-- Form -->
	<el-button type="text" @click="dialogFormVisible = true">打开嵌套表单的 Dialog</el-button>
	
	<el-dialog title="收货地址" :visible.sync="dialogFormVisible">
	  <el-form :model="form">
	    <el-form-item label="活动名称" :label-width="formLabelWidth">
	      <el-input v-model="form.name" auto-complete="off"></el-input>
	    </el-form-item>
	    <el-form-item label="活动区域" :label-width="formLabelWidth">
	      <el-select v-model="form.region" placeholder="请选择活动区域">
	        <el-option label="区域一" value="shanghai"></el-option>
	        <el-option label="区域二" value="beijing"></el-option>
	      </el-select>
	    </el-form-item>
	  </el-form>
	  <div slot="footer" class="dialog-footer">
	    <el-button @click="dialogFormVisible = false">取 消</el-button>
	    <el-button type="primary" @click="dialogFormVisible = false">确 定</el-button>
	  </div>
	</el-dialog>
	
	<script>
	  export default {
	    data() {
	      return {
	        gridData: [{
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }],
	        dialogTableVisible: false,
	        dialogFormVisible: false,
	        form: {
	          name: '',
	          region: '',
	          date1: '',
	          date2: '',
	          delivery: false,
	          type: [],
	          resource: '',
	          desc: ''
	        },
	        formLabelWidth: '120px'
	      };
	    }
	  };
	</script>
	

snippet dropdown.md_0
	
	"""html
	<el-dropdown>
	  <span class="el-dropdown-link">
	    下拉菜单<i class="el-icon-caret-bottom el-icon--right"></i>
	  </span>
	  <el-dropdown-menu slot="dropdown">
	    <el-dropdown-item>黄金糕</el-dropdown-item>
	    <el-dropdown-item>狮子头</el-dropdown-item>
	    <el-dropdown-item>螺蛳粉</el-dropdown-item>
	    <el-dropdown-item disabled>双皮奶</el-dropdown-item>
	    <el-dropdown-item divided>蚵仔煎</el-dropdown-item>
	  </el-dropdown-menu>
	</el-dropdown>
	

snippet dropdown.md_1
	
	"""html
	<el-dropdown>
	  <el-button type="primary">
	    更多菜单<i class="el-icon-caret-bottom el-icon--right"></i>
	  </el-button>
	  <el-dropdown-menu slot="dropdown">
	    <el-dropdown-item>黄金糕</el-dropdown-item>
	    <el-dropdown-item>狮子头</el-dropdown-item>
	    <el-dropdown-item>螺蛳粉</el-dropdown-item>
	    <el-dropdown-item>双皮奶</el-dropdown-item>
	    <el-dropdown-item>蚵仔煎</el-dropdown-item>
	  </el-dropdown-menu>
	</el-dropdown>
	<el-dropdown split-button type="primary" @click="handleClick">
	  更多菜单
	  <el-dropdown-menu slot="dropdown">
	    <el-dropdown-item>黄金糕</el-dropdown-item>
	    <el-dropdown-item>狮子头</el-dropdown-item>
	    <el-dropdown-item>螺蛳粉</el-dropdown-item>
	    <el-dropdown-item>双皮奶</el-dropdown-item>
	    <el-dropdown-item>蚵仔煎</el-dropdown-item>
	  </el-dropdown-menu>
	</el-dropdown>
	
	

snippet dropdown.md_2
	:::demo 在"trigger"属性设置为"click"即可。
	"""html
	<el-row class="block-col-2">
	  <el-col :span="12">
	    <span class="demonstration">hover 激活</span>
	    <el-dropdown>
	      <span class="el-dropdown-link">
	        下拉菜单<i class="el-icon-caret-bottom el-icon--right"></i>
	      </span>
	      <el-dropdown-menu slot="dropdown">
	        <el-dropdown-item>黄金糕</el-dropdown-item>
	        <el-dropdown-item>狮子头</el-dropdown-item>
	        <el-dropdown-item>螺蛳粉</el-dropdown-item>
	        <el-dropdown-item>双皮奶</el-dropdown-item>
	        <el-dropdown-item>蚵仔煎</el-dropdown-item>
	      </el-dropdown-menu>
	    </el-dropdown>
	  </el-col>
	  <el-col :span="12">
	    <span class="demonstration">click 激活</span>
	    <el-dropdown trigger="click">
	      <span class="el-dropdown-link">
	        下拉菜单<i class="el-icon-caret-bottom el-icon--right"></i>
	      </span>
	      <el-dropdown-menu slot="dropdown">
	        <el-dropdown-item>黄金糕</el-dropdown-item>
	        <el-dropdown-item>狮子头</el-dropdown-item>
	        <el-dropdown-item>螺蛳粉</el-dropdown-item>
	        <el-dropdown-item>双皮奶</el-dropdown-item>
	        <el-dropdown-item>蚵仔煎</el-dropdown-item>
	      </el-dropdown-menu>
	    </el-dropdown>
	  </el-col>
	</el-row>
	

snippet dropdown.md_3
	:::demo 下拉菜单默认在点击菜单项后会被隐藏，将"hide-on-click"属性默认为"false"可以关闭此功能。
	"""html
	<el-dropdown :hide-on-click="false">
	  <span class="el-dropdown-link">
	    下拉菜单<i class="el-icon-caret-bottom el-icon--right"></i>
	  </span>
	  <el-dropdown-menu slot="dropdown">
	    <el-dropdown-item>黄金糕</el-dropdown-item>
	    <el-dropdown-item>狮子头</el-dropdown-item>
	    <el-dropdown-item>螺蛳粉</el-dropdown-item>
	    <el-dropdown-item disabled>双皮奶</el-dropdown-item>
	    <el-dropdown-item divided>蚵仔煎</el-dropdown-item>
	  </el-dropdown-menu>
	</el-dropdown>
	

snippet dropdown.md_4
	:::demo
	"""html
	<el-dropdown @command="handleCommand">
	  <span class="el-dropdown-link">
	    下拉菜单<i class="el-icon-caret-bottom el-icon--right"></i>
	  </span>
	  <el-dropdown-menu slot="dropdown">
	    <el-dropdown-item command="a">黄金糕</el-dropdown-item>
	    <el-dropdown-item command="b">狮子头</el-dropdown-item>
	    <el-dropdown-item command="c">螺蛳粉</el-dropdown-item>
	    <el-dropdown-item command="d" disabled>双皮奶</el-dropdown-item>
	    <el-dropdown-item command="e" divided>蚵仔煎</el-dropdown-item>
	  </el-dropdown-menu>
	</el-dropdown>
	<script>
	  export default {
	    methods: {
	      handleCommand(command) {
	        this.$message('click on item ' + command);
	      }
	    }
	  }
	</script>
	

snippet form.md_0
	::: demo 在 Form 组件中，每一个表单域由一个 Form-Item 组件构成，表单域中可以放置各种类型的表单控件，包括 Input、Select、Checkbox、Radio、Switch、DatePicker、TimePicker
	"""html
	<el-form ref="form" :model="form" label-width="80px">
	  <el-form-item label="活动名称">
	    <el-input v-model="form.name"></el-input>
	  </el-form-item>
	  <el-form-item label="活动区域">
	    <el-select v-model="form.region" placeholder="请选择活动区域">
	      <el-option label="区域一" value="shanghai"></el-option>
	      <el-option label="区域二" value="beijing"></el-option>
	    </el-select>
	  </el-form-item>
	  <el-form-item label="活动时间">
	    <el-col :span="11">
	      <el-date-picker type="date" placeholder="选择日期" v-model="form.date1" style="width: 100%;"></el-date-picker>
	    </el-col>
	    <el-col class="line" :span="2">-</el-col>
	    <el-col :span="11">
	      <el-time-picker type="fixed-time" placeholder="选择时间" v-model="form.date2" style="width: 100%;"></el-time-picker>
	    </el-col>
	  </el-form-item>
	  <el-form-item label="即时配送">
	    <el-switch on-text="" off-text="" v-model="form.delivery"></el-switch>
	  </el-form-item>
	  <el-form-item label="活动性质">
	    <el-checkbox-group v-model="form.type">
	      <el-checkbox label="美食/餐厅线上活动" name="type"></el-checkbox>
	      <el-checkbox label="地推活动" name="type"></el-checkbox>
	      <el-checkbox label="线下主题活动" name="type"></el-checkbox>
	      <el-checkbox label="单纯品牌曝光" name="type"></el-checkbox>
	    </el-checkbox-group>
	  </el-form-item>
	  <el-form-item label="特殊资源">
	    <el-radio-group v-model="form.resource">
	      <el-radio label="线上品牌商赞助"></el-radio>
	      <el-radio label="线下场地免费"></el-radio>
	    </el-radio-group>
	  </el-form-item>
	  <el-form-item label="活动形式">
	    <el-input type="textarea" v-model="form.desc"></el-input>
	  </el-form-item>
	  <el-form-item>
	    <el-button type="primary" @click="onSubmit">立即创建</el-button>
	    <el-button>取消</el-button>
	  </el-form-item>
	</el-form>
	<script>
	  export default {
	    data() {
	      return {
	        form: {
	          name: '',
	          region: '',
	          date1: '',
	          date2: '',
	          delivery: false,
	          type: [],
	          resource: '',
	          desc: ''
	        }
	      }
	    },
	    methods: {
	      onSubmit() {
	        console.log('submit!');
	      }
	    }
	  }
	</script>
	

snippet form.md_1
	::: demo 设置 "inline" 属性可以让表单域变为行内的表单域
	"""html
	<el-form :inline="true" :model="formInline" class="demo-form-inline">
	  <el-form-item label="审批人">
	    <el-input v-model="formInline.user" placeholder="审批人"></el-input>
	  </el-form-item>
	  <el-form-item label="活动区域">
	    <el-select v-model="formInline.region" placeholder="活动区域">
	      <el-option label="区域一" value="shanghai"></el-option>
	      <el-option label="区域二" value="beijing"></el-option>
	    </el-select>
	  </el-form-item><el-form-item>
	    <el-button type="primary" @click="onSubmit">查询</el-button>
	  </el-form-item>
	</el-form>
	<script>
	  export default {
	    data() {
	      return {
	        formInline: {
	          user: '',
	          region: ''
	        }
	      }
	    },
	    methods: {
	      onSubmit() {
	        console.log('submit!');
	      }
	    }
	  }
	</script>
	

snippet form.md_2
	::: demo 通过设置 "label-position" 属性可以改变表单域标签的位置，可选值为 "top"、"left"，当设为 "top" 时标签会置于表单域的顶部
	"""html
	<el-radio-group v-model="labelPosition" size="small">
	  <el-radio-button label="left">左对齐</el-radio-button>
	  <el-radio-button label="right">右对齐</el-radio-button>
	  <el-radio-button label="top">顶部对齐</el-radio-button>
	</el-radio-group>
	<div style="margin: 20px;"></div>
	<el-form :label-position="labelPosition" label-width="80px" :model="formLabelAlign">
	  <el-form-item label="名称">
	    <el-input v-model="formLabelAlign.name"></el-input>
	  </el-form-item>
	  <el-form-item label="活动区域">
	    <el-input v-model="formLabelAlign.region"></el-input>
	  </el-form-item>
	  <el-form-item label="活动形式">
	    <el-input v-model="formLabelAlign.type"></el-input>
	  </el-form-item>
	</el-form>
	<script>
	  export default {
	    data() {
	      return {
	        labelPosition: 'right',
	        formLabelAlign: {
	          name: '',
	          region: '',
	          type: ''
	        }
	      };
	    }
	  }
	</script>
	

snippet form.md_3
	::: demo Form 组件提供了表单验证的功能，只需要通过 "rule" 属性传入约定的验证规则，并 Form-Item 的 "prop" 属性设置为需校验的字段名即可。校验规则参见 [async-validator](https://github.com/yiminghe/async-validator)
	"""html
	<el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="100px" class="demo-ruleForm">
	  <el-form-item label="活动名称" prop="name">
	    <el-input v-model="ruleForm.name"></el-input>
	  </el-form-item>
	  <el-form-item label="活动区域" prop="region">
	    <el-select v-model="ruleForm.region" placeholder="请选择活动区域">
	      <el-option label="区域一" value="shanghai"></el-option>
	      <el-option label="区域二" value="beijing"></el-option>
	    </el-select>
	  </el-form-item>
	  <el-form-item label="活动时间" required>
	    <el-col :span="11">
	      <el-form-item prop="date1">
	        <el-date-picker type="date" placeholder="选择日期" v-model="ruleForm.date1" style="width: 100%;"></el-date-picker>
	      </el-form-item>
	    </el-col>
	    <el-col class="line" :span="2">-</el-col>
	    <el-col :span="11">
	      <el-form-item prop="date2">
	        <el-time-picker type="fixed-time" placeholder="选择时间" v-model="ruleForm.date2" style="width: 100%;"></el-time-picker>
	      </el-form-item>
	    </el-col>
	  </el-form-item>
	  <el-form-item label="即时配送" prop="delivery">
	    <el-switch on-text="" off-text="" v-model="ruleForm.delivery"></el-switch>
	  </el-form-item>
	  <el-form-item label="活动性质" prop="type">
	    <el-checkbox-group v-model="ruleForm.type">
	      <el-checkbox label="美食/餐厅线上活动" name="type"></el-checkbox>
	      <el-checkbox label="地推活动" name="type"></el-checkbox>
	      <el-checkbox label="线下主题活动" name="type"></el-checkbox>
	      <el-checkbox label="单纯品牌曝光" name="type"></el-checkbox>
	    </el-checkbox-group>
	  </el-form-item>
	  <el-form-item label="特殊资源" prop="resource">
	    <el-radio-group v-model="ruleForm.resource">
	      <el-radio label="线上品牌商赞助"></el-radio>
	      <el-radio label="线下场地免费"></el-radio>
	    </el-radio-group>
	  </el-form-item>
	  <el-form-item label="活动形式" prop="desc">
	    <el-input type="textarea" v-model="ruleForm.desc"></el-input>
	  </el-form-item>
	  <el-form-item>
	    <el-button type="primary" @click="submitForm('ruleForm')">立即创建</el-button>
	    <el-button @click="resetForm('ruleForm')">重置</el-button>
	  </el-form-item>
	</el-form>
	<script>
	  export default {
	    data() {
	      return {
	        ruleForm: {
	          name: '',
	          region: '',
	          date1: '',
	          date2: '',
	          delivery: false,
	          type: [],
	          resource: '',
	          desc: ''
	        },
	        rules: {
	          name: [
	            { required: true, message: '请输入活动名称', trigger: 'blur' },
	            { min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur' }
	          ],
	          region: [
	            { required: true, message: '请选择活动区域', trigger: 'change' }
	          ],
	          date1: [
	            { type: 'date', required: true, message: '请选择日期', trigger: 'change' }
	          ],
	          date2: [
	            { type: 'date', required: true, message: '请选择时间', trigger: 'change' }
	          ],
	          type: [
	            { type: 'array', required: true, message: '请至少选择一个活动性质', trigger: 'change' }
	          ],
	          resource: [
	            { required: true, message: '请选择活动资源', trigger: 'change' }
	          ],
	          desc: [
	            { required: true, message: '请填写活动形式', trigger: 'blur' }
	          ]
	        }
	      };
	    },
	    methods: {
	      submitForm(formName) {
	        this.$refs[formName].validate((valid) => {
	          if (valid) {
	            alert('submit!');
	          } else {
	            console.log('error submit!!');
	            return false;
	          }
	        });
	      },
	      resetForm(formName) {
	        this.$refs[formName].resetFields();
	      }
	    }
	  }
	</script>
	

snippet form.md_4
	::: demo 这个例子中展示了如何使用自定义验证规则来完成密码的二次验证
	"""html
	<el-form :model="ruleForm2" :rules="rules2" ref="ruleForm2" label-width="100px" class="demo-ruleForm">
	  <el-form-item label="密码" prop="pass">
	    <el-input type="password" v-model="ruleForm2.pass" auto-complete="off"></el-input>
	  </el-form-item>
	  <el-form-item label="确认密码" prop="checkPass">
	    <el-input type="password" v-model="ruleForm2.checkPass" auto-complete="off"></el-input>
	  </el-form-item>
	  <el-form-item label="年龄" prop="age">
	    <el-input v-model.number="ruleForm2.age"></el-input>
	  </el-form-item>
	  <el-form-item>
	    <el-button type="primary" @click="submitForm('ruleForm2')">提交</el-button>
	    <el-button @click="resetForm('ruleForm2')">重置</el-button>
	  </el-form-item>
	</el-form>
	<script>
	  export default {
	    data() {
	      var checkAge = (rule, value, callback) => {
	        if (!value) {
	          return callback(new Error('年龄不能为空'));
	        }
	        setTimeout(() => {
	          if (!Number.isInteger(value)) {
	            callback(new Error('请输入数字值'));
	          } else {
	            if (value < 18) {
	              callback(new Error('必须年满18岁'));
	            } else {
	              callback();
	            }
	          }
	        }, 1000);
	      };
	      var validatePass = (rule, value, callback) => {
	        if (value === '') {
	          callback(new Error('请输入密码'));
	        } else {
	          if (this.ruleForm2.checkPass !== '') {
	            this.$refs.ruleForm2.validateField('checkPass');
	          }
	          callback();
	        }
	      };
	      var validatePass2 = (rule, value, callback) => {
	        if (value === '') {
	          callback(new Error('请再次输入密码'));
	        } else if (value !== this.ruleForm2.pass) {
	          callback(new Error('两次输入密码不一致!'));
	        } else {
	          callback();
	        }
	      };
	      return {
	        ruleForm2: {
	          pass: '',
	          checkPass: '',
	          age: ''
	        },
	        rules2: {
	          pass: [
	            { validator: validatePass, trigger: 'blur' }
	          ],
	          checkPass: [
	            { validator: validatePass2, trigger: 'blur' }
	          ],
	          age: [
	            { validator: checkAge, trigger: 'blur' }
	          ]
	        }
	      };
	    },
	    methods: {
	      submitForm(formName) {
	        this.$refs[formName].validate((valid) => {
	          if (valid) {
	            alert('submit!');
	          } else {
	            console.log('error submit!!');
	            return false;
	          }
	        });
	      },
	      resetForm(formName) {
	        this.$refs[formName].resetFields();
	      }
	    }
	  }
	</script>
	

snippet form.md_5
	::: demo 除了在 Form 组件上一次性传递所有的验证规则外还可以在单个的表单域上传递属性的验证规则
	"""html
	<el-form :model="dynamicValidateForm" ref="dynamicValidateForm" label-width="100px" class="demo-dynamic">
	  <el-form-item
	    prop="email"
	    label="邮箱"
	    :rules="[
	      { required: true, message: '请输入邮箱地址', trigger: 'blur' },
	      { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur,change' }
	    ]"
	  >
	    <el-input v-model="dynamicValidateForm.email"></el-input>
	  </el-form-item>
	  <el-form-item
	    v-for="(domain, index) in dynamicValidateForm.domains"
	    :label="'域名' + index"
	    :key="domain.key"
	    :prop="'domains.' + index + '.value'"
	    :rules="{
	      required: true, message: '域名不能为空', trigger: 'blur'
	    }"
	  >
	    <el-input v-model="domain.value"></el-input><el-button @click.prevent="removeDomain(domain)">删除</el-button>
	  </el-form-item>
	  <el-form-item>
	    <el-button type="primary" @click="submitForm('dynamicValidateForm')">提交</el-button>
	    <el-button @click="addDomain">新增域名</el-button>
	    <el-button @click="resetForm('dynamicValidateForm')">重置</el-button>
	  </el-form-item>
	</el-form>
	<script>
	  export default {
	    data() {
	      return {
	        dynamicValidateForm: {
	          domains: [{
	            value: ''
	          }],
	          email: ''
	        }
	      };
	    },
	    methods: {
	      submitForm(formName) {
	        this.$refs[formName].validate((valid) => {
	          if (valid) {
	            alert('submit!');
	          } else {
	            console.log('error submit!!');
	            return false;
	          }
	        });
	      },
	      resetForm(formName) {
	        this.$refs[formName].resetFields();
	      },
	      removeDomain(item) {
	        var index = this.dynamicValidateForm.domains.indexOf(item)
	        if (index !== -1) {
	          this.dynamicValidateForm.domains.splice(index, 1)
	        }
	      },
	      addDomain() {
	        this.dynamicValidateForm.domains.push({
	          value: '',
	          key: Date.now()
	        });
	      }
	    }
	  }
	</script>
	

snippet form.md_6
	::: demo 数字类型的验证需要在 "v-model" 处加上 ".number" 的修饰符，这是 "Vue" 自身提供的用于将绑定值转化为 "number" 类型的修饰符。
	"""html
	<el-form :model="numberValidateForm" ref="numberValidateForm" label-width="100px" class="demo-ruleForm">
	  <el-form-item
	    label="年龄"
	    prop="age"
	    :rules="[
	      { required: true, message: '年龄不能为空'},
	      { type: 'number', message: '年龄必须为数字值'}
	    ]"
	  >
	    <el-input type="age" v-model.number="numberValidateForm.age" auto-complete="off"></el-input>
	  </el-form-item>
	  <el-form-item>
	    <el-button type="primary" @click="submitForm('numberValidateForm')">提交</el-button>
	    <el-button @click="resetForm('numberValidateForm')">重置</el-button>
	  </el-form-item>
	</el-form>
	<script>
	  export default {
	    data() {
	      return {
	        numberValidateForm: {
	          age: ''
	        }
	      };
	    },
	    methods: {
	      submitForm(formName) {
	        this.$refs[formName].validate((valid) => {
	          if (valid) {
	            alert('submit!');
	          } else {
	            console.log('error submit!!');
	            return false;
	          }
	        });
	      },
	      resetForm(formName) {
	        this.$refs[formName].resetFields();
	      }
	    }
	  }
	</script>
	

snippet i18n.md_0
	
	"""javascript
	// 完整引入 Element
	import Vue from 'vue'
	import ElementUI from 'element-ui'
	import locale from 'element-ui/lib/locale/lang/en'
	
	Vue.use(ElementUI, { locale })
	

snippet i18n.md_1
	
	"""javascript
	// 按需引入 Element
	import Vue from 'vue'
	import { Button, Select } from 'element-ui'
	import lang from 'element-ui/lib/locale/lang/en'
	import locale from 'element-ui/lib/locale'
	
	// 设置语言
	locale.use(lang)
	
	// 引入组件
	Vue.component(Button.name, Button)
	Vue.component(Select.name, Select)
	

snippet i18n.md_2
	**webpack.config.js**
	"""javascript
	{
	  plugins: [
	    new webpack.NormalModuleReplacementPlugin(/element-ui[\/\\]lib[\/\\]locale[\/\\]lang[\/\\]zh-CN/, 'element-ui/lib/locale/lang/en')
	  ]
	}
	

snippet i18n.md_3
	
	"""javascript
	import Vue from 'vue'
	import VueI18n from 'vue-i18n'
	import Element from 'element-ui'
	import enLocale from 'element-ui/lib/locale/lang/en'
	import zhLocale from 'element-ui/lib/locale/lang/zh-CN'
	
	Vue.use(VueI18n)
	Vue.use(Element)
	
	Vue.config.lang = 'zh-cn'
	Vue.locale('zh-cn', zhLocale)
	Vue.locale('en', enLocale)
	

snippet i18n.md_4
	
	"""javascript
	import Vue from 'vue'
	import Element from 'element-ui'
	import enLocale from 'element-ui/lib/locale/lang/en'
	import zhLocale from 'element-ui/lib/locale/lang/zh-CN'
	
	Vue.use(Element, {
	  i18n: function (path, options) {
	    // ...
	  }
	})
	

snippet i18n.md_5
	
	"""javascript
	import Vue from 'vue'
	import Element from 'element-ui'
	import VueI18n from 'vue-i18n'
	import enLocale from 'element-ui/lib/locale/lang/en'
	import zhLocale from 'element-ui/lib/locale/lang/zh-CN'
	
	Vue.use(VueI18n)
	
	const messages = {
	  en: {
	    message: 'hello',
	    ...enLocale // 或者用 Object.assign({ message: 'hello' }, enLocale)
	  },
	  zh: {
	    message: '你好',
	    ...zhLocale // 或者用 Object.assign({ message: '你好' }, zhLocale)
	  }
	}
	// Create VueI18n instance with options
	const i18n = new VueI18n({
	  locale: 'en', // set locale
	  messages, // set locale messages
	})
	
	Vue.use(Element, {
	  i18n: (key, value) => i18n.vm._t(key, value)
	})
	
	new Vue({ i18n }).$mount('#app')
	

snippet i18n.md_6
	
	"""javascript
	import Vue from 'vue'
	import Element from 'element-ui'
	import VueI18n from 'vue-i18n'
	import enLocale from 'element-ui/lib/locale/lang/en'
	import zhLocale from 'element-ui/lib/locale/lang/zh-CN'
	
	Vue.use(VueI18n)
	
	const messages = {
	  en: {
	    message: 'hello',
	    ...enLocale // 或者用 Object.assign({ message: 'hello' }, enLocale)
	  },
	  zh: {
	    message: '你好',
	    ...zhLocale // 或者用 Object.assign({ message: '你好' }, zhLocale)
	  }
	}
	// Create VueI18n instance with options
	const i18n = new VueI18n({
	  locale: 'en', // set locale
	  messages, // set locale messages
	})
	
	Vue.use(Element, {
	  i18n: (key, value) => i18n.vm._t(key, value)
	})
	
	new Vue({ i18n }).$mount('#app')
	"""
	
	## 按需加载里定制 i18n
	
	"""js
	import Vue from 'vue'
	import DatePicker from 'element/lib/date-picker'
	import VueI18n from 'vue-i18n'
	
	import enLocale from 'element-ui/lib/locale/lang/en'
	import zhLocale from 'element-ui/lib/locale/lang/zh-CN'
	import ElementLocale from 'element-ui/lib/locale'
	
	Vue.use(VueI18n)
	Vue.use(DatePicker)
	
	const messages = {
	  en: {
	    message: 'hello',
	    ...enLocale
	  },
	  zh: {
	    message: '你好',
	    ...zhLocale
	  }
	}
	// Create VueI18n instance with options
	const i18n = new VueI18n({
	  locale: 'en', // set locale
	  messages, // set locale messages
	})
	
	ElementLocale.i18n((key, value) => i18n.t(key, value))
	

snippet i18n.md_7
	
	"""html
	<script src="//unpkg.com/vue"></script>
	<script src="//unpkg.com/element-ui"></script>
	<script src="//unpkg.com/element-ui/lib/umd/locale/en.js"></script>
	
	<script>
	  ELEMENT.locale(ELEMENT.lang.en)
	</script>
	

snippet i18n.md_8
	
	"""html
	<script src="//unpkg.com/vue"></script>
	<script src="//unpkg.com/vue-i18n/dist/vue-i18n.js"></script>
	<script src="//unpkg.com/element-ui"></script>
	<script src="//unpkg.com/element-ui/lib/umd/locale/zh-CN.js"></script>
	<script src="//unpkg.com/element-ui/lib/umd/locale/en.js"></script>
	
	<script>
	  Vue.locale('en', ELEMENT.lang.en)
	  Vue.locale('zh-cn', ELEMENT.lang.zhCN)
	</script>
	

snippet icon.md_0
	:::demo
	"""html
	<i class="el-icon-edit"></i>
	<i class="el-icon-share"></i>
	<i class="el-icon-delete"></i>
	<el-button type="primary" icon="search">搜索</el-button>
	
	

snippet input.md_0
	::: demo
	"""html
	<el-input v-model="input" placeholder="请输入内容"></el-input>
	
	<script>
	export default {
	  data() {
	    return {
	      input: ''
	    }
	  }
	}
	</script>
	

snippet input.md_1
	::: demo 通过 "disabled" 属性指定是否禁用 input 组件
	"""html
	<el-input
	  placeholder="请输入内容"
	  v-model="input1"
	  :disabled="true">
	</el-input>
	
	<script>
	export default {
	  data() {
	    return {
	      input1: ''
	    }
	  }
	}
	</script>
	

snippet input.md_2
	::: demo 可以通过 "icon" 属性在 input 组件尾部增加显示图标，可以通过 "on-icon-click" 钩子函数来在点击图标后执行需要的逻辑。
	"""html
	<el-input
	  placeholder="请选择日期"
	  icon="search"
	  v-model="input2"
	  :on-icon-click="handleIconClick">
	</el-input>
	
	<script>
	export default {
	  data() {
	    return {
	      input2: ''
	    }
	  },
	  methods: {
	    handleIconClick(ev) {
	      console.log(ev);
	    }
	  }
	}
	</script>
	

snippet input.md_3
	::: demo 文本域高度可通过 "rows" 属性控制
	"""html
	<el-input
	  type="textarea"
	  :rows="2"
	  placeholder="请输入内容"
	  v-model="textarea">
	</el-input>
	
	<script>
	export default {
	  data() {
	    return {
	      textarea: ''
	    }
	  }
	}
	</script>
	

snippet input.md_4
	::: demo
	"""html
	<el-input
	  type="textarea"
	  autosize
	  placeholder="请输入内容"
	  v-model="textarea2">
	</el-input>
	<div style="margin: 20px 0;"></div>
	<el-input
	  type="textarea"
	  :autosize="{ minRows: 2, maxRows: 4}"
	  placeholder="请输入内容"
	  v-model="textarea3">
	</el-input>
	
	<script>
	export default {
	  data() {
	    return {
	      textarea2: '',
	      textarea3: ''
	    }
	  }
	}
	</script>
	

snippet input.md_5
	::: demo 可通过 slot 来指定在 input 中前置或者后置内容。
	"""html
	<div>
	  <el-input placeholder="请输入内容" v-model="input3">
	    <template slot="prepend">Http://</template>
	  </el-input>
	</div>
	<div style="margin-top: 15px;">
	  <el-input placeholder="请输入内容" v-model="input4">
	    <template slot="append">.com</template>
	  </el-input>
	</div>
	<div style="margin-top: 15px;">
	  <el-input placeholder="请输入内容" v-model="input5">
	    <el-select v-model="select" slot="prepend" placeholder="请选择">
	      <el-option label="餐厅名" value="1"></el-option>
	      <el-option label="订单号" value="2"></el-option>
	      <el-option label="用户电话" value="3"></el-option>
	    </el-select>
	    <el-button slot="append" icon="search"></el-button>
	  </el-input>
	</div>
	<style>
	  .el-select .el-input {
	    width: 110px;
	  }
	</style>
	<script>
	export default {
	  data() {
	    return {
	      input3: '',
	      input4: '',
	      input5: '',
	      select: ''
	    }
	  }
	}
	</script>
	

snippet input.md_6
	::: demo 可通过 "size" 属性指定输入框的尺寸，除了默认的大小外，还提供了 large、small 和 mini 三种尺寸。
	"""html
	<div class="demo-input-size">
	  <el-input
	    size="large"
	    placeholder="请输入内容"
	    v-model="input6">
	  </el-input>
	  <el-input
	    placeholder="请输入内容"
	    v-model="input7">
	  </el-input>
	  <el-input
	    size="small"
	    placeholder="请输入内容"
	    v-model="input8">
	  </el-input>
	  <el-input
	    size="mini"
	    placeholder="请输入内容"
	    v-model="input9">
	  </el-input>
	</div>
	
	<script>
	export default {
	  data() {
	    return {
	      input6: '',
	      input7: '',
	      input8: '',
	      input9: ''
	    }
	  }
	}
	</script>
	

snippet input.md_7
	::: demo autocomplete 是一个可带输入建议的输入框组件，"fetch-suggestions" 是一个返回输入建议的方法属性，如 querySearch(queryString, cb)，在该方法中你可以在你的输入建议数据准备好时通过 cb(data) 返回到 autocomplete 组件中。
	"""html
	<el-row class="demo-autocomplete">
	  <el-col :span="12">
	    <div class="sub-title">激活即列出输入建议</div>
	    <el-autocomplete
	      class="inline-input"
	      v-model="state1"
	      :fetch-suggestions="querySearch"
	      placeholder="请输入内容"
	      @select="handleSelect"
	    ></el-autocomplete>
	  </el-col>
	  <el-col :span="12">
	    <div class="sub-title">输入后匹配输入建议</div>
	    <el-autocomplete
	      class="inline-input"
	      v-model="state2"
	      :fetch-suggestions="querySearch"
	      placeholder="请输入内容"
	      :trigger-on-focus="false"
	      @select="handleSelect"
	    ></el-autocomplete>
	  </el-col>
	</el-row>
	<script>
	  export default {
	    data() {
	      return {
	        restaurants: [],
	        state1: '',
	        state2: ''
	      };
	    },
	    methods: {
	      querySearch(queryString, cb) {
	        var restaurants = this.restaurants;
	        var results = queryString ? restaurants.filter(this.createFilter(queryString)) : restaurants;
	        // 调用 callback 返回建议列表的数据
	        cb(results);
	      },
	      createFilter(queryString) {
	        return (restaurant) => {
	          return (restaurant.value.indexOf(queryString.toLowerCase()) === 0);
	        };
	      },
	      loadAll() {
	        return [
	          { "value": "三全鲜食（北新泾店）", "address": "长宁区新渔路144号" },
	          { "value": "Hot honey 首尔炸鸡（仙霞路）", "address": "上海市长宁区淞虹路661号" },
	          { "value": "新旺角茶餐厅", "address": "上海市普陀区真北路988号创邑金沙谷6号楼113" },
	          { "value": "泷千家(天山西路店)", "address": "天山西路438号" },
	          { "value": "胖仙女纸杯蛋糕（上海凌空店）", "address": "上海市长宁区金钟路968号1幢18号楼一层商铺18-101" },
	          { "value": "贡茶", "address": "上海市长宁区金钟路633号" },
	          { "value": "豪大大香鸡排超级奶爸", "address": "上海市嘉定区曹安公路曹安路1685号" },
	          { "value": "茶芝兰（奶茶，手抓饼）", "address": "上海市普陀区同普路1435号" },
	          { "value": "十二泷町", "address": "上海市北翟路1444弄81号B幢-107" },
	          { "value": "星移浓缩咖啡", "address": "上海市嘉定区新郁路817号" },
	          { "value": "阿姨奶茶/豪大大", "address": "嘉定区曹安路1611号" },
	          { "value": "新麦甜四季甜品炸鸡", "address": "嘉定区曹安公路2383弄55号" },
	          { "value": "Monica摩托主题咖啡店", "address": "嘉定区江桥镇曹安公路2409号1F，2383弄62号1F" },
	          { "value": "浮生若茶（凌空soho店）", "address": "上海长宁区金钟路968号9号楼地下一层" },
	          { "value": "NONO JUICE  鲜榨果汁", "address": "上海市长宁区天山西路119号" },
	          { "value": "CoCo都可(北新泾店）", "address": "上海市长宁区仙霞西路" },
	          { "value": "快乐柠檬（神州智慧店）", "address": "上海市长宁区天山西路567号1层R117号店铺" },
	          { "value": "Merci Paul cafe", "address": "上海市普陀区光复西路丹巴路28弄6号楼819" },
	          { "value": "猫山王（西郊百联店）", "address": "上海市长宁区仙霞西路88号第一层G05-F01-1-306" },
	          { "value": "枪会山", "address": "上海市普陀区棕榈路" },
	          { "value": "纵食", "address": "元丰天山花园(东门) 双流路267号" },
	          { "value": "钱记", "address": "上海市长宁区天山西路" },
	          { "value": "壹杯加", "address": "上海市长宁区通协路" },
	          { "value": "唦哇嘀咖", "address": "上海市长宁区新泾镇金钟路999号2幢（B幢）第01层第1-02A单元" },
	          { "value": "爱茜茜里(西郊百联)", "address": "长宁区仙霞西路88号1305室" },
	          { "value": "爱茜茜里(近铁广场)", "address": "上海市普陀区真北路818号近铁城市广场北区地下二楼N-B2-O2-C商铺" },
	          { "value": "鲜果榨汁（金沙江路和美广店）", "address": "普陀区金沙江路2239号金沙和美广场B1-10-6" },
	          { "value": "开心丽果（缤谷店）", "address": "上海市长宁区威宁路天山路341号" },
	          { "value": "超级鸡车（丰庄路店）", "address": "上海市嘉定区丰庄路240号" },
	          { "value": "妙生活果园（北新泾店）", "address": "长宁区新渔路144号" },
	          { "value": "香宜度麻辣香锅", "address": "长宁区淞虹路148号" },
	          { "value": "凡仔汉堡（老真北路店）", "address": "上海市普陀区老真北路160号" },
	          { "value": "港式小铺", "address": "上海市长宁区金钟路968号15楼15-105室" },
	          { "value": "蜀香源麻辣香锅（剑河路店）", "address": "剑河路443-1" },
	          { "value": "北京饺子馆", "address": "长宁区北新泾街道天山西路490-1号" },
	          { "value": "饭典*新简餐（凌空SOHO店）", "address": "上海市长宁区金钟路968号9号楼地下一层9-83室" },
	          { "value": "焦耳·川式快餐（金钟路店）", "address": "上海市金钟路633号地下一层甲部" },
	          { "value": "动力鸡车", "address": "长宁区仙霞西路299弄3号101B" },
	          { "value": "浏阳蒸菜", "address": "天山西路430号" },
	          { "value": "四海游龙（天山西路店）", "address": "上海市长宁区天山西路" },
	          { "value": "樱花食堂（凌空店）", "address": "上海市长宁区金钟路968号15楼15-105室" },
	          { "value": "壹分米客家传统调制米粉(天山店)", "address": "天山西路428号" },
	          { "value": "福荣祥烧腊（平溪路店）", "address": "上海市长宁区协和路福泉路255弄57-73号" },
	          { "value": "速记黄焖鸡米饭", "address": "上海市长宁区北新泾街道金钟路180号1层01号摊位" },
	          { "value": "红辣椒麻辣烫", "address": "上海市长宁区天山西路492号" },
	          { "value": "(小杨生煎)西郊百联餐厅", "address": "长宁区仙霞西路88号百联2楼" },
	          { "value": "阳阳麻辣烫", "address": "天山西路389号" },
	          { "value": "南拳妈妈龙虾盖浇饭", "address": "普陀区金沙江路1699号鑫乐惠美食广场A13" }
	        ];
	      },
	      handleSelect(item) {
	        console.log(item);
	      }
	    },
	    mounted() {
	      this.restaurants = this.loadAll();
	    }
	  }
	</script>
	

snippet input.md_8
	::: demo
	"""html
	<el-autocomplete
	  popper-class="my-autocomplete"
	  v-model="state3"
	  :fetch-suggestions="querySearch"
	  custom-item="my-item-zh"
	  placeholder="请输入内容"
	  @select="handleSelect"
	  icon="edit"
	  :on-icon-click="handleIconClick"
	></el-autocomplete>
	
	<style>
	.my-autocomplete {
	  li {
	    line-height: normal;
	    padding: 7px;
	
	    .name {
	      text-overflow: ellipsis;
	      overflow: hidden;
	    }
	    .addr {
	      font-size: 12px;
	      color: #b4b4b4;
	    }
	
	    .highlighted .addr {
	      color: #ddd;
	    }
	  }
	}
	</style>
	
	<script>
	  Vue.component('my-item-zh', {
	    functional: true,
	    render: function (h, ctx) {
	      var item = ctx.props.item;
	      return h('li', ctx.data, [
	        h('div', { attrs: { class: 'name' } }, [item.value]),
	        h('span', { attrs: { class: 'addr' } }, [item.address])
	      ]);
	    },
	    props: {
	      item: { type: Object, required: true }
	    }
	  });
	  export default {
	    data() {
	      return {
	        restaurants: [],
	        state3: ''
	      };
	    },
	    methods: {
	      querySearch(queryString, cb) {
	        var restaurants = this.restaurants;
	        var results = queryString ? restaurants.filter(this.createFilter(queryString)) : restaurants;
	        // 调用 callback 返回建议列表的数据
	        cb(results);
	      },
	      createFilter(queryString) {
	        return (restaurant) => {
	          return (restaurant.value.indexOf(queryString.toLowerCase()) === 0);
	        };
	      },
	      loadAll() {
	        return [
	          { "value": "三全鲜食（北新泾店）", "address": "长宁区新渔路144号" },
	          { "value": "Hot honey 首尔炸鸡（仙霞路）", "address": "上海市长宁区淞虹路661号" },
	          { "value": "新旺角茶餐厅", "address": "上海市普陀区真北路988号创邑金沙谷6号楼113" },
	          { "value": "泷千家(天山西路店)", "address": "天山西路438号" },
	          { "value": "胖仙女纸杯蛋糕（上海凌空店）", "address": "上海市长宁区金钟路968号1幢18号楼一层商铺18-101" },
	          { "value": "贡茶", "address": "上海市长宁区金钟路633号" },
	          { "value": "豪大大香鸡排超级奶爸", "address": "上海市嘉定区曹安公路曹安路1685号" },
	          { "value": "茶芝兰（奶茶，手抓饼）", "address": "上海市普陀区同普路1435号" },
	          { "value": "十二泷町", "address": "上海市北翟路1444弄81号B幢-107" },
	          { "value": "星移浓缩咖啡", "address": "上海市嘉定区新郁路817号" },
	          { "value": "阿姨奶茶/豪大大", "address": "嘉定区曹安路1611号" },
	          { "value": "新麦甜四季甜品炸鸡", "address": "嘉定区曹安公路2383弄55号" },
	          { "value": "Monica摩托主题咖啡店", "address": "嘉定区江桥镇曹安公路2409号1F，2383弄62号1F" },
	          { "value": "浮生若茶（凌空soho店）", "address": "上海长宁区金钟路968号9号楼地下一层" },
	          { "value": "NONO JUICE  鲜榨果汁", "address": "上海市长宁区天山西路119号" },
	          { "value": "CoCo都可(北新泾店）", "address": "上海市长宁区仙霞西路" },
	          { "value": "快乐柠檬（神州智慧店）", "address": "上海市长宁区天山西路567号1层R117号店铺" },
	          { "value": "Merci Paul cafe", "address": "上海市普陀区光复西路丹巴路28弄6号楼819" },
	          { "value": "猫山王（西郊百联店）", "address": "上海市长宁区仙霞西路88号第一层G05-F01-1-306" },
	          { "value": "枪会山", "address": "上海市普陀区棕榈路" },
	          { "value": "纵食", "address": "元丰天山花园(东门) 双流路267号" },
	          { "value": "钱记", "address": "上海市长宁区天山西路" },
	          { "value": "壹杯加", "address": "上海市长宁区通协路" },
	          { "value": "唦哇嘀咖", "address": "上海市长宁区新泾镇金钟路999号2幢（B幢）第01层第1-02A单元" },
	          { "value": "爱茜茜里(西郊百联)", "address": "长宁区仙霞西路88号1305室" },
	          { "value": "爱茜茜里(近铁广场)", "address": "上海市普陀区真北路818号近铁城市广场北区地下二楼N-B2-O2-C商铺" },
	          { "value": "鲜果榨汁（金沙江路和美广店）", "address": "普陀区金沙江路2239号金沙和美广场B1-10-6" },
	          { "value": "开心丽果（缤谷店）", "address": "上海市长宁区威宁路天山路341号" },
	          { "value": "超级鸡车（丰庄路店）", "address": "上海市嘉定区丰庄路240号" },
	          { "value": "妙生活果园（北新泾店）", "address": "长宁区新渔路144号" },
	          { "value": "香宜度麻辣香锅", "address": "长宁区淞虹路148号" },
	          { "value": "凡仔汉堡（老真北路店）", "address": "上海市普陀区老真北路160号" },
	          { "value": "港式小铺", "address": "上海市长宁区金钟路968号15楼15-105室" },
	          { "value": "蜀香源麻辣香锅（剑河路店）", "address": "剑河路443-1" },
	          { "value": "北京饺子馆", "address": "长宁区北新泾街道天山西路490-1号" },
	          { "value": "饭典*新简餐（凌空SOHO店）", "address": "上海市长宁区金钟路968号9号楼地下一层9-83室" },
	          { "value": "焦耳·川式快餐（金钟路店）", "address": "上海市金钟路633号地下一层甲部" },
	          { "value": "动力鸡车", "address": "长宁区仙霞西路299弄3号101B" },
	          { "value": "浏阳蒸菜", "address": "天山西路430号" },
	          { "value": "四海游龙（天山西路店）", "address": "上海市长宁区天山西路" },
	          { "value": "樱花食堂（凌空店）", "address": "上海市长宁区金钟路968号15楼15-105室" },
	          { "value": "壹分米客家传统调制米粉(天山店)", "address": "天山西路428号" },
	          { "value": "福荣祥烧腊（平溪路店）", "address": "上海市长宁区协和路福泉路255弄57-73号" },
	          { "value": "速记黄焖鸡米饭", "address": "上海市长宁区北新泾街道金钟路180号1层01号摊位" },
	          { "value": "红辣椒麻辣烫", "address": "上海市长宁区天山西路492号" },
	          { "value": "(小杨生煎)西郊百联餐厅", "address": "长宁区仙霞西路88号百联2楼" },
	          { "value": "阳阳麻辣烫", "address": "天山西路389号" },
	          { "value": "南拳妈妈龙虾盖浇饭", "address": "普陀区金沙江路1699号鑫乐惠美食广场A13" }
	        ];
	      },
	      handleSelect(item) {
	        console.log(item);
	      },
	      handleIconClick(ev) {
	        console.log(ev);
	      }
	    },
	    mounted() {
	      this.restaurants = this.loadAll();
	    }
	  }
	</script>
	

snippet input.md_9
	::: demo
	"""html
	<el-autocomplete
	  v-model="state4"
	  :fetch-suggestions="querySearchAsync"
	  placeholder="请输入内容"
	  @select="handleSelect"
	></el-autocomplete>
	<script>
	  export default {
	    data() {
	      return {
	        restaurants: [],
	        state4: '',
	        timeout:  null
	      };
	    },
	    methods: {
	      loadAll() {
	        return [
	          { "value": "三全鲜食（北新泾店）", "address": "长宁区新渔路144号" },
	          { "value": "Hot honey 首尔炸鸡（仙霞路）", "address": "上海市长宁区淞虹路661号" },
	          { "value": "新旺角茶餐厅", "address": "上海市普陀区真北路988号创邑金沙谷6号楼113" },
	          { "value": "泷千家(天山西路店)", "address": "天山西路438号" },
	          { "value": "胖仙女纸杯蛋糕（上海凌空店）", "address": "上海市长宁区金钟路968号1幢18号楼一层商铺18-101" },
	          { "value": "贡茶", "address": "上海市长宁区金钟路633号" },
	          { "value": "豪大大香鸡排超级奶爸", "address": "上海市嘉定区曹安公路曹安路1685号" },
	          { "value": "茶芝兰（奶茶，手抓饼）", "address": "上海市普陀区同普路1435号" },
	          { "value": "十二泷町", "address": "上海市北翟路1444弄81号B幢-107" },
	          { "value": "星移浓缩咖啡", "address": "上海市嘉定区新郁路817号" },
	          { "value": "阿姨奶茶/豪大大", "address": "嘉定区曹安路1611号" },
	          { "value": "新麦甜四季甜品炸鸡", "address": "嘉定区曹安公路2383弄55号" },
	          { "value": "Monica摩托主题咖啡店", "address": "嘉定区江桥镇曹安公路2409号1F，2383弄62号1F" },
	          { "value": "浮生若茶（凌空soho店）", "address": "上海长宁区金钟路968号9号楼地下一层" },
	          { "value": "NONO JUICE  鲜榨果汁", "address": "上海市长宁区天山西路119号" },
	          { "value": "CoCo都可(北新泾店）", "address": "上海市长宁区仙霞西路" },
	          { "value": "快乐柠檬（神州智慧店）", "address": "上海市长宁区天山西路567号1层R117号店铺" },
	          { "value": "Merci Paul cafe", "address": "上海市普陀区光复西路丹巴路28弄6号楼819" },
	          { "value": "猫山王（西郊百联店）", "address": "上海市长宁区仙霞西路88号第一层G05-F01-1-306" },
	          { "value": "枪会山", "address": "上海市普陀区棕榈路" },
	          { "value": "纵食", "address": "元丰天山花园(东门) 双流路267号" },
	          { "value": "钱记", "address": "上海市长宁区天山西路" },
	          { "value": "壹杯加", "address": "上海市长宁区通协路" },
	          { "value": "唦哇嘀咖", "address": "上海市长宁区新泾镇金钟路999号2幢（B幢）第01层第1-02A单元" },
	          { "value": "爱茜茜里(西郊百联)", "address": "长宁区仙霞西路88号1305室" },
	          { "value": "爱茜茜里(近铁广场)", "address": "上海市普陀区真北路818号近铁城市广场北区地下二楼N-B2-O2-C商铺" },
	          { "value": "鲜果榨汁（金沙江路和美广店）", "address": "普陀区金沙江路2239号金沙和美广场B1-10-6" },
	          { "value": "开心丽果（缤谷店）", "address": "上海市长宁区威宁路天山路341号" },
	          { "value": "超级鸡车（丰庄路店）", "address": "上海市嘉定区丰庄路240号" },
	          { "value": "妙生活果园（北新泾店）", "address": "长宁区新渔路144号" },
	          { "value": "香宜度麻辣香锅", "address": "长宁区淞虹路148号" },
	          { "value": "凡仔汉堡（老真北路店）", "address": "上海市普陀区老真北路160号" },
	          { "value": "港式小铺", "address": "上海市长宁区金钟路968号15楼15-105室" },
	          { "value": "蜀香源麻辣香锅（剑河路店）", "address": "剑河路443-1" },
	          { "value": "北京饺子馆", "address": "长宁区北新泾街道天山西路490-1号" },
	          { "value": "饭典*新简餐（凌空SOHO店）", "address": "上海市长宁区金钟路968号9号楼地下一层9-83室" },
	          { "value": "焦耳·川式快餐（金钟路店）", "address": "上海市金钟路633号地下一层甲部" },
	          { "value": "动力鸡车", "address": "长宁区仙霞西路299弄3号101B" },
	          { "value": "浏阳蒸菜", "address": "天山西路430号" },
	          { "value": "四海游龙（天山西路店）", "address": "上海市长宁区天山西路" },
	          { "value": "樱花食堂（凌空店）", "address": "上海市长宁区金钟路968号15楼15-105室" },
	          { "value": "壹分米客家传统调制米粉(天山店)", "address": "天山西路428号" },
	          { "value": "福荣祥烧腊（平溪路店）", "address": "上海市长宁区协和路福泉路255弄57-73号" },
	          { "value": "速记黄焖鸡米饭", "address": "上海市长宁区北新泾街道金钟路180号1层01号摊位" },
	          { "value": "红辣椒麻辣烫", "address": "上海市长宁区天山西路492号" },
	          { "value": "(小杨生煎)西郊百联餐厅", "address": "长宁区仙霞西路88号百联2楼" },
	          { "value": "阳阳麻辣烫", "address": "天山西路389号" },
	          { "value": "南拳妈妈龙虾盖浇饭", "address": "普陀区金沙江路1699号鑫乐惠美食广场A13" }
	        ];
	      },
	      querySearchAsync(queryString, cb) {
	        var restaurants = this.restaurants;
	        var results = queryString ? restaurants.filter(this.createStateFilter(queryString)) : restaurants;
	
	        clearTimeout(this.timeout);
	        this.timeout = setTimeout(() => {
	          cb(results);
	        }, 3000 * Math.random());
	      },
	      createStateFilter(queryString) {
	        return (state) => {
	          return (state.value.indexOf(queryString.toLowerCase()) === 0);
	        };
	      },
	      handleSelect(item) {
	        console.log(item);
	      }
	    },
	    mounted() {
	      this.restaurants = this.loadAll();
	    }
	  };
	</script>
	

snippet input-number.md_0
	:::demo 要使用它，只需要在"el-input-number"元素中使用"v-model"绑定变量即可，变量的初始值即为默认值。
	"""html
	<template>
	  <el-input-number v-model="num1" @change="handleChange" :min="1" :max="10"></el-input-number>
	</template>
	<script>
	  export default {
	    data() {
	      return {
	        num1: 1
	      };
	    },
	    methods: {
	      handleChange(value) {
	        console.log(value);
	      }
	    }
	  };
	</script>
	

snippet input-number.md_1
	
	"""html
	<template>
	  <el-input-number v-model="num2" :disabled="true"></el-input-number>
	</template>
	<script>
	  export default {
	    data() {
	      return {
	        num2: 1
	      }
	    }
	  };
	</script>
	

snippet input-number.md_2
	
	"""html
	<template>
	  <el-input-number v-model="num3" :step="2"></el-input-number>
	</template>
	<script>
	  export default {
	    data() {
	      return {
	        num3: 5
	      }
	    }
	  };
	</script>
	

snippet input-number.md_3
	
	"""html
	<template>
	  <el-input-number size="large" v-model="num4"></el-input-number>
	  <el-input-number v-model="num5"></el-input-number>
	  <el-input-number size="small" v-model="num6"></el-input-number>
	</template>
	<script>
	  export default {
	    data() {
	      return {
	        num4: 1,
	        num5: 1,
	        num6: 1
	      }
	    }
	  };
	</script>
	

snippet installation.md_0
	
	"""shell
	npm i element-ui -S
	

snippet installation.md_1
	
	"""html
	<!-- 引入样式 -->
	<link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-default/index.css">
	<!-- 引入组件库 -->
	<script src="https://unpkg.com/element-ui/lib/index.js"></script>
	

snippet installation.md_2
	
	"""html
	<!DOCTYPE html>
	<html>
	<head>
	  <meta charset="UTF-8">
	  <!-- 引入样式 -->
	  <link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-default/index.css">
	</head>
	<body>
	  <div id="app">
	    <el-button @click="visible = true">按钮</el-button>
	    <el-dialog v-model="visible" title="Hello world">
	      <p>欢迎使用 Element</p>
	    </el-dialog>
	  </div>
	</body>
	  <!-- 先引入 Vue -->
	  <script src="https://unpkg.com/vue/dist/vue.js"></script>
	  <!-- 引入组件库 -->
	  <script src="https://unpkg.com/element-ui/lib/index.js"></script>
	  <script>
	    new Vue({
	      el: '#app',
	      data: function() {
	        return { visible: false }
	      }
	    })
	  </script>
	</html>
	

snippet layout.md_0
	::: demo 通过 row 和 col 组件，并通过 col 组件的 "span" 属性我们就可以自由地组合布局。
	"""html
	<el-row>
	  <el-col :span="24"><div class="grid-content bg-purple-dark"></div></el-col>
	</el-row>
	<el-row>
	  <el-col :span="12"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="12"><div class="grid-content bg-purple-light"></div></el-col>
	</el-row>
	<el-row>
	  <el-col :span="8"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="8"><div class="grid-content bg-purple-light"></div></el-col>
	  <el-col :span="8"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	<el-row>
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple-light"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple-light"></div></el-col>
	</el-row>
	<el-row>
	  <el-col :span="4"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="4"><div class="grid-content bg-purple-light"></div></el-col>
	  <el-col :span="4"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="4"><div class="grid-content bg-purple-light"></div></el-col>
	  <el-col :span="4"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="4"><div class="grid-content bg-purple-light"></div></el-col>
	</el-row>
	
	<style>
	  .el-row {
	    margin-bottom: 20px;
	    &:last-child {
	      margin-bottom: 0;
	    }
	  }
	  .el-col {
	    border-radius: 4px;
	  }
	  .bg-purple-dark {
	    background: #99a9bf;
	  }
	  .bg-purple {
	    background: #d3dce6;
	  }
	  .bg-purple-light {
	    background: #e5e9f2;
	  }
	  .grid-content {
	    border-radius: 4px;
	    min-height: 36px;
	  }
	  .row-bg {
	    padding: 10px 0;
	    background-color: #f9fafc;
	  }
	</style>
	

snippet layout.md_1
	::: demo Row 组件 提供 "gutter" 属性来指定每一栏之间的间隔，默认间隔为 0。
	"""html
	<el-row :gutter="20">
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	
	<style>
	  .el-row {
	    margin-bottom: 20px;
	    &:last-child {
	      margin-bottom: 0;
	    }
	  }
	  .el-col {
	    border-radius: 4px;
	  }
	  .bg-purple-dark {
	    background: #99a9bf;
	  }
	  .bg-purple {
	    background: #d3dce6;
	  }
	  .bg-purple-light {
	    background: #e5e9f2;
	  }
	  .grid-content {
	    border-radius: 4px;
	    min-height: 36px;
	  }
	  .row-bg {
	    padding: 10px 0;
	    background-color: #f9fafc;
	  }
	</style>
	

snippet layout.md_2
	::: demo
	"""html
	<el-row :gutter="20">
	  <el-col :span="16"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="8"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	<el-row :gutter="20">
	  <el-col :span="8"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="8"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="4"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="4"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	<el-row :gutter="20">
	  <el-col :span="4"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="16"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="4"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	
	<style>
	  .el-row {
	    margin-bottom: 20px;
	    &:last-child {
	      margin-bottom: 0;
	    }
	  }
	  .el-col {
	    border-radius: 4px;
	  }
	  .bg-purple-dark {
	    background: #99a9bf;
	  }
	  .bg-purple {
	    background: #d3dce6;
	  }
	  .bg-purple-light {
	    background: #e5e9f2;
	  }
	  .grid-content {
	    border-radius: 4px;
	    min-height: 36px;
	  }
	  .row-bg {
	    padding: 10px 0;
	    background-color: #f9fafc;
	  }
	</style>
	

snippet layout.md_3
	::: demo 通过制定 col 组件的 "offset" 属性可以指定分栏偏移的栏数。
	"""html
	<el-row :gutter="20">
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6" :offset="6"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	<el-row :gutter="20">
	  <el-col :span="6" :offset="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6" :offset="6"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	<el-row :gutter="20">
	  <el-col :span="12" :offset="6"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	
	<style>
	  .el-row {
	    margin-bottom: 20px;
	    &:last-child {
	      margin-bottom: 0;
	    }
	  }
	  .el-col {
	    border-radius: 4px;
	  }
	  .bg-purple-dark {
	    background: #99a9bf;
	  }
	  .bg-purple {
	    background: #d3dce6;
	  }
	  .bg-purple-light {
	    background: #e5e9f2;
	  }
	  .grid-content {
	    border-radius: 4px;
	    min-height: 36px;
	  }
	  .row-bg {
	    padding: 10px 0;
	    background-color: #f9fafc;
	  }
	</style>
	

snippet layout.md_4
	::: demo 将 "type" 属性赋值为 'flex'，可以启用 flex 布局，并可通过 "justify" 属性来指定 start, center, end, space-between, space-around 其中的值来定义子元素的排版方式。
	"""html
	<el-row type="flex" class="row-bg">
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple-light"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	<el-row type="flex" class="row-bg" justify="center">
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple-light"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	<el-row type="flex" class="row-bg" justify="end">
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple-light"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	<el-row type="flex" class="row-bg" justify="space-between">
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple-light"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	<el-row type="flex" class="row-bg" justify="space-around">
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple-light"></div></el-col>
	  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
	</el-row>
	
	<style>
	  .el-row {
	    margin-bottom: 20px;
	    &:last-child {
	      margin-bottom: 0;
	    }
	  }
	  .el-col {
	    border-radius: 4px;
	  }
	  .bg-purple-dark {
	    background: #99a9bf;
	  }
	  .bg-purple {
	    background: #d3dce6;
	  }
	  .bg-purple-light {
	    background: #e5e9f2;
	  }
	  .grid-content {
	    border-radius: 4px;
	    min-height: 36px;
	  }
	  .row-bg {
	    padding: 10px 0;
	    background-color: #f9fafc;
	  }
	</style>
	

snippet layout.md_5
	::: demo
	"""html
	<el-row :gutter="10">
	  <el-col :xs="8" :sm="6" :md="4" :lg="3"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :xs="4" :sm="6" :md="8" :lg="9"><div class="grid-content bg-purple-light"></div></el-col>
	  <el-col :xs="4" :sm="6" :md="8" :lg="9"><div class="grid-content bg-purple"></div></el-col>
	  <el-col :xs="8" :sm="6" :md="4" :lg="3"><div class="grid-content bg-purple-light"></div></el-col>
	</el-row>
	
	<style>
	  .el-col {
	    border-radius: 4px;
	  }
	  .bg-purple-dark {
	    background: #99a9bf;
	  }
	  .bg-purple {
	    background: #d3dce6;
	  }
	  .bg-purple-light {
	    background: #e5e9f2;
	  }
	  .grid-content {
	    border-radius: 4px;
	    min-height: 36px;
	  }
	</style>
	

snippet loading.md_0
	:::demo Element 提供了两种调用 Loading 的方法：指令和服务。对于自定义指令"v-loading"，只需要绑定"Boolean"即可。默认状况下，Loading 遮罩会插入到绑定元素的子节点，通过添加"body"修饰符，可以使遮罩插入至 DOM 中的 body 上。
	"""html
	<template>
	  <el-table
	    v-loading.body="loading"
	    :data="tableData"
	    style="width: 100%">
	    <el-table-column
	      prop="date"
	      label="日期"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址">
	    </el-table-column>
	  </el-table>
	</template>
	
	<style>
	  body {
	    margin: 0;
	  }
	</style>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData: [{
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }],
	        loading: true
	      };
	    }
	  };
	</script>
	

snippet loading.md_1
	:::demo 在绑定了"v-loading"指令的元素上添加"element-loading-text"属性，其值会被渲染为加载文案，并显示在加载图标的下方。
	"""html
	<template>
	  <el-table
	    v-loading="loading2"
	    element-loading-text="拼命加载中"
	    :data="tableData"
	    style="width: 100%">
	    <el-table-column
	      prop="date"
	      label="日期"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址">
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData: [{
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }],
	        loading2: true
	      };
	    }
	  };
	</script>
	

snippet loading.md_2
	
	"""html
	<template>
	  <el-button
	    type="primary"
	    @click="openFullScreen"
	    v-loading.fullscreen.lock="fullscreenLoading">
	    显示整页加载，3 秒后消失
	  </el-button>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        fullscreenLoading: false
	      }
	    },
	    methods: {
	      openFullScreen() {
	        this.fullscreenLoading = true;
	        setTimeout(() => {
	          this.fullscreenLoading = false;
	        }, 3000);
	      }
	    }
	  }
	</script>
	

snippet loading.md_3
	Loading 还可以以服务的方式调用。引入 Loading 服务：
	"""javascript
	import { Loading } from 'element-ui';
	

snippet loading.md_4
	在需要调用时：
	"""javascript
	Loading.service(options);
	

snippet loading.md_5
	其中 "options" 参数为 Loading 的配置项，具体见下表。"LoadingService" 会返回一个 Loading 实例，可通过调用该实例的 "close" 方法来关闭它：
	"""javascript
	let loadingInstance = Loading.service(options);
	loadingInstance.close();
	

snippet loading.md_6
	需要注意的是，以服务的方式调用的全屏 Loading 是单例的：若在前一个全屏 Loading 关闭前再次调用全屏 Loading，并不会创建一个新的 Loading 实例，而是返回现有全屏 Loading 的实例：
	"""javascript
	let loadingInstance1 = Loading.service({ fullscreen: true });
	let loadingInstance2 = Loading.service({ fullscreen: true });
	console.log(loadingInstance1 === loadingInstance2); // true
	

snippet menu.md_0
	
	"""html
	<el-menu theme="dark" :default-active="activeIndex" class="el-menu-demo" mode="horizontal" @select="handleSelect">
	  <el-menu-item index="1">处理中心</el-menu-item>
	  <el-submenu index="2">
	    <template slot="title">我的工作台</template>
	    <el-menu-item index="2-1">选项1</el-menu-item>
	    <el-menu-item index="2-2">选项2</el-menu-item>
	    <el-menu-item index="2-3">选项3</el-menu-item>
	  </el-submenu>
	  <el-menu-item index="3"><a href="https://www.ele.me" target="_blank">订单管理</a></el-menu-item>
	</el-menu>
	<div class="line"></div>
	<el-menu :default-active="activeIndex2" class="el-menu-demo" mode="horizontal" @select="handleSelect">
	  <el-menu-item index="1">处理中心</el-menu-item>
	  <el-submenu index="2">
	    <template slot="title">我的工作台</template>
	    <el-menu-item index="2-1">选项1</el-menu-item>
	    <el-menu-item index="2-2">选项2</el-menu-item>
	    <el-menu-item index="2-3">选项3</el-menu-item>
	  </el-submenu>
	  <el-menu-item index="3"><a href="https://www.ele.me" target="_blank">订单管理</a></el-menu-item>
	</el-menu>
	
	<script>
	  export default {
	    data() {
	      return {
	        activeIndex: '1',
	        activeIndex2: '1'
	      };
	    },
	    methods: {
	      handleSelect(key, keyPath) {
	        console.log(key, keyPath);
	      }
	    }
	  }
	</script>
	

snippet menu.md_1
	::: demo 通过 "el-menu-item-group" 组件可以实现菜单进行分组，分组名可以通过 "title" 属性直接设定也可以通过具名 slot 来设定。
	"""html
	<el-row class="tac">
	  <el-col :span="8">
	    <h5>带 icon</h5>
	    <el-menu default-active="2" class="el-menu-vertical-demo" @open="handleOpen" @close="handleClose">
	      <el-submenu index="1">
	        <template slot="title"><i class="el-icon-message"></i>导航一</template>
	        <el-menu-item-group>
	          <template slot="title">分组一</template>
	          <el-menu-item index="1-1">选项1</el-menu-item>
	          <el-menu-item index="1-2">选项2</el-menu-item>
	        </el-menu-item-group>
	        <el-menu-item-group title="分组2">
	          <el-menu-item index="1-3">选项3</el-menu-item>
	        </el-menu-item-group>
	        <el-submenu index="1-4">
	          <template slot="title">选项4</template>
	          <el-menu-item index="1-4-1">选项1</el-menu-item>
	        </el-submenu>
	      </el-submenu>
	      <el-menu-item index="2"><i class="el-icon-menu"></i>导航二</el-menu-item>
	      <el-menu-item index="3"><i class="el-icon-setting"></i>导航三</el-menu-item>
	    </el-menu>
	  </el-col>
	  <el-col :span="8">
	    <h5>不带 icon</h5>
	    <el-menu default-active="2" class="el-menu-vertical-demo" @open="handleOpen" @close="handleClose" theme="dark">
	      <el-submenu index="1">
	        <template slot="title">导航一</template>
	        <el-menu-item-group title="分组一">
	          <el-menu-item index="1-1">选项1</el-menu-item>
	          <el-menu-item index="1-2">选项2</el-menu-item>
	        </el-menu-item-group>
	        <el-menu-item-group title="分组2">
	          <el-menu-item index="1-3">选项3</el-menu-item>
	        </el-menu-item-group>
	        <el-submenu index="1-4">
	          <template slot="title">选项4</template>
	          <el-menu-item index="1-4-1">选项1</el-menu-item>
	        </el-submenu>
	      </el-submenu>
	      <el-menu-item index="2">导航二</el-menu-item>
	      <el-menu-item index="3">导航三</el-menu-item>
	    </el-menu>
	  </el-col>
	  <el-col :span="8">
	    <h5>分组</h5>
	    <el-menu mode="vertical" default-active="1" class="el-menu-vertical-demo">
	      <el-menu-item-group title="分组一">
	        <el-menu-item index="1"><i class="el-icon-message"></i>导航一</el-menu-item>
	        <el-menu-item index="2"><i class="el-icon-message"></i>导航二</el-menu-item>
	      </el-menu-item-group>
	      <el-menu-item-group title="分组二">
	        <el-menu-item index="3"><i class="el-icon-message"></i>导航三</el-menu-item>
	        <el-menu-item index="4"><i class="el-icon-message"></i>导航四</el-menu-item>
	      </el-menu-item-group>
	    </el-menu>
	  </el-col>
	</el-row>
	
	<script>
	  export default {
	    methods: {
	      handleOpen(key, keyPath) {
	        console.log(key, keyPath);
	      },
	      handleClose(key, keyPath) {
	        console.log(key, keyPath);
	      }
	    }
	  }
	</script>
	

snippet menu.md_2
	::: demo
	"""html
	<el-radio-group v-model="isCollapse" style="margin-bottom: 20px;">
	  <el-radio-button :label="false">展开</el-radio-button>
	  <el-radio-button :label="true">收起</el-radio-button>
	</el-radio-group>
	<el-menu default-active="1-4-1" class="el-menu-vertical-demo" @open="handleOpen" @close="handleClose" :collapse="isCollapse">
	  <el-submenu index="1">
	    <template slot="title">
	      <i class="el-icon-message"></i>
	      <span slot="title">导航一</span>
	    </template>
	    <el-menu-item-group>
	      <span slot="title">分组一</span>
	      <el-menu-item index="1-1">选项1</el-menu-item>
	      <el-menu-item index="1-2">选项2</el-menu-item>
	    </el-menu-item-group>
	    <el-menu-item-group title="分组2">
	      <el-menu-item index="1-3">选项3</el-menu-item>
	    </el-menu-item-group>
	    <el-submenu index="1-4">
	      <span slot="title">选项4</span>
	      <el-menu-item index="1-4-1">选项1</el-menu-item>
	    </el-submenu>
	  </el-submenu>
	  <el-menu-item index="2">
	    <i class="el-icon-menu"></i>
	    <span slot="title">导航二</span>
	  </el-menu-item>
	  <el-menu-item index="3">
	    <i class="el-icon-setting"></i>
	    <span slot="title">导航三</span>
	  </el-menu-item>
	</el-menu>
	
	<style>
	  .el-menu-vertical-demo:not(.el-menu--collapse) {
	    width: 200px;
	    min-height: 400px;
	  }
	</style>
	
	<script>
	  export default {
	    data() {
	      return {
	        isCollapse: true
	      };
	    },
	    methods: {
	      handleOpen(key, keyPath) {
	        console.log(key, keyPath);
	      },
	      handleClose(key, keyPath) {
	        console.log(key, keyPath);
	      }
	    }
	  }
	</script>
	

snippet message-box.md_0
	:::demo 调用"$alert"方法即可打开消息提示，它模拟了系统的 "alert"，无法通过按下 ESC 或点击框外关闭。此例中接收了两个参数，"message"和"title"。值得一提的是，窗口被关闭后，它默认会返回一个"Promise"对象便于进行后续操作的处理。若不确定浏览器是否支持"Promise"，可自行引入第三方 polyfill 或像本例一样使用回调进行后续处理。
	"""html
	<template>
	  <el-button type="text" @click="open">点击打开 Message Box</el-button>
	</template>
	
	<script>
	  export default {
	    methods: {
	      open() {
	        this.$alert('这是一段内容', '标题名称', {
	          confirmButtonText: '确定',
	          callback: action => {
	            this.$message({
	              type: 'info',
	              message: "action: ${ action }"
	            });
	          }
	        });
	      }
	    }
	  }
	</script>
	

snippet message-box.md_1
	
	"""html
	<template>
	  <el-button type="text" @click="open2">点击打开 Message Box</el-button>
	</template>
	
	<script>
	  export default {
	    methods: {
	      open2() {
	        this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {
	          confirmButtonText: '确定',
	          cancelButtonText: '取消',
	          type: 'warning'
	        }).then(() => {
	          this.$message({
	            type: 'success',
	            message: '删除成功!'
	          });
	        }).catch(() => {
	          this.$message({
	            type: 'info',
	            message: '已取消删除'
	          });          
	        });
	      }
	    }
	  }
	</script>
	

snippet message-box.md_2
	
	"""html
	<template>
	  <el-button type="text" @click="open3">点击打开 Message Box</el-button>
	</template>
	
	<script>
	  export default {
	    methods: {
	      open3() {
	        this.$prompt('请输入邮箱', '提示', {
	          confirmButtonText: '确定',
	          cancelButtonText: '取消',
	          inputPattern: /[\w!#$%&'*+/=?^_"{|}~-]+(?:\.[\w!#$%&'*+/=?^_"{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/,
	          inputErrorMessage: '邮箱格式不正确'
	        }).then(({ value }) => {
	          this.$message({
	            type: 'success',
	            message: '你的邮箱是: ' + value
	          });
	        }).catch(() => {
	          this.$message({
	            type: 'info',
	            message: '取消输入'
	          });       
	        });
	      }
	    }
	  }
	</script>
	

snippet message-box.md_3
	
	"""html
	<template>
	  <el-button type="text" @click="open4">点击打开 Message Box</el-button>
	</template>
	
	<script>
	  export default {
	    methods: {
	      open4() {
	        const h = this.$createElement;
	        this.$msgbox({
	          title: '消息',
	          message: h('p', null, [
	            h('span', null, '内容可以是 '),
	            h('i', { style: 'color: teal' }, 'VNode')
	          ]),
	          showCancelButton: true,
	          confirmButtonText: '确定',
	          cancelButtonText: '取消',
	          beforeClose: (action, instance, done) => {
	            if (action === 'confirm') {
	              instance.confirmButtonLoading = true;
	              instance.confirmButtonText = '执行中...';
	              setTimeout(() => {
	                done();
	                setTimeout(() => {
	                  instance.confirmButtonLoading = false;
	                }, 300);
	              }, 3000);
	            } else {
	              done();
	            }
	          }
	        }).then(action => {
	          this.$message({
	            type: 'info',
	            message: 'action: ' + action
	          });
	        });
	      },
	    }
	  }
	</script>
	

snippet message-box.md_4
	
	"""javascript
	import { MessageBox } from 'element-ui';
	

snippet message.md_0
	
	"""html
	<template>
	  <el-button :plain="true" @click="open">打开消息提示</el-button>
	  <el-button :plain="true" @click="openVn">VNode</el-button>
	</template>
	
	<script>
	  export default {
	    methods: {
	      open() {
	        this.$message('这是一条消息提示');
	      },
	
	      openVn() {
	        const h = this.$createElement;
	        this.$message({
	          message: h('p', null, [
	            h('span', null, '内容可以是 '),
	            h('i', { style: 'color: teal' }, 'VNode')
	          ])
	        });
	      }
	    }
	  }
	</script>
	

snippet message.md_1
	:::demo 当需要自定义更多属性时，Message 也可以接收一个对象为参数。比如，设置"type"字段可以定义不同的状态，默认为"info"。此时正文内容以"message"的值传入。同时，我们也为 Message 的各种 type 注册了方法，可以在不传入"type"字段的情况下像"open4"那样直接调用。
	"""html
	<template>
	  <el-button :plain="true" @click="open2">成功</el-button>
	  <el-button :plain="true" @click="open3">警告</el-button>
	  <el-button :plain="true" @click="open">消息</el-button>
	  <el-button :plain="true" @click="open4">错误</el-button>
	</template>
	
	<script>
	  export default {
	    methods: {
	      open() {
	        this.$message('这是一条消息提示');
	      },
	      open2() {
	        this.$message({
	          message: '恭喜你，这是一条成功消息',
	          type: 'success'
	        });
	      },
	
	      open3() {
	        this.$message({
	          message: '警告哦，这是一条警告消息',
	          type: 'warning'
	        });
	      },
	
	      open4() {
	        this.$message.error('错了哦，这是一条错误消息');
	      }
	    }
	  }
	</script>
	

snippet message.md_2
	:::demo 默认的 Message 是不可以被人工关闭的，如果需要可手动关闭的 Message，可以使用"showClose"字段。此外，和 Notification 一样，Message 拥有可控的"duration"，设置"0"为不会被自动关闭，默认为 3000 毫秒。
	"""html
	<template>
	  <el-button :plain="true" @click="open5">消息</el-button>
	  <el-button :plain="true" @click="open6">成功</el-button>
	  <el-button :plain="true" @click="open7">警告</el-button>
	  <el-button :plain="true" @click="open8">错误</el-button>
	</template>
	
	<script>
	  export default {
	    methods: {
	      open5() {
	        this.$message({
	          showClose: true,
	          message: '这是一条消息提示'
	        });
	      },
	
	      open6() {
	        this.$message({
	          showClose: true,
	          message: '恭喜你，这是一条成功消息',
	          type: 'success'
	        });
	      },
	
	      open7() {
	        this.$message({
	          showClose: true,
	          message: '警告哦，这是一条警告消息',
	          type: 'warning'
	        });
	      },
	
	      open8() {
	        this.$message({
	          showClose: true,
	          message: '错了哦，这是一条错误消息',
	          type: 'error'
	        });
	      }
	    }
	  }
	</script>
	

snippet message.md_3
	
	"""javascript
	import { Message } from 'element-ui';
	

snippet notification.md_0
	::: demo Notification 组件提供通知功能，Element 注册了"$notify"方法，接收一个"options"字面量参数，在最简单的情况下，你可以设置"title"字段和"message"字段，用于设置通知的标题和正文。默认情况下，经过一段时间后 Notification 组件会自动关闭，但是通过设置"duration"，可以控制关闭的时间间隔，特别的是，如果设置为"0"，则不会自动关闭。注意："duration"接收一个"Number"，单位为毫秒，默认为"4500"。
	"""html
	<template>
	  <el-button
	    plain
	    @click="open">
	    可自动关闭
	  </el-button>
	  <el-button
	    plain
	    @click="open2">
	    不会自动关闭
	    </el-button>
	</template>
	
	<script>
	  export default {
	    methods: {
	      open() {
	        const h = this.$createElement;
	
	        this.$notify({
	          title: '标题名称',
	          message: h('i', { style: 'color: teal'}, '这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案')
	        });
	      },
	
	      open2() {
	        this.$notify({
	          title: '提示',
	          message: '这是一条不会自动关闭的消息',
	          duration: 0
	        });
	      }
	    }
	  }
	</script>
	

snippet notification.md_1
	::: demo Element 为 Notification 组件准备了四种通知类型："success", "warning", "info", "error"。通过"type"字段来设置，除此以外的值将被忽略。同时，我们也为 Notification 的各种 type 注册了方法，可以在不传入"type"字段的情况下像"open5"和"open6"那样直接调用。
	"""html
	<template>
	  <el-button
	    plain
	    @click="open3">
	    成功
	  </el-button>
	  <el-button
	    plain
	    @click="open4">
	    警告
	  </el-button>
	  <el-button
	    plain
	    @click="open5">
	    消息
	  </el-button>
	  <el-button
	    plain
	    @click="open6">
	    错误
	  </el-button>
	</template>
	
	<script>
	  export default {
	    methods: {
	      open3() {
	        this.$notify({
	          title: '成功',
	          message: '这是一条成功的提示消息',
	          type: 'success'
	        });
	      },
	
	      open4() {
	        this.$notify({
	          title: '警告',
	          message: '这是一条警告的提示消息',
	          type: 'warning'
	        });
	      },
	
	      open5() {
	        this.$notify.info({
	          title: '消息',
	          message: '这是一条消息的提示消息'
	        });
	      },
	
	      open6() {
	        this.$notify.error({
	          title: '错误',
	          message: '这是一条错误的提示消息'
	        });
	      }
	    }
	  }
	</script>
	

snippet notification.md_2
	::: demo Notification 提供设置偏移量的功能，通过设置 "offset" 字段，可以使弹出的消息距屏幕顶部偏移一段距离。注意在同一时刻，所有的 Notification 实例应当具有一个相同的偏移量。
	"""html
	<template>
	  <el-button
	    plain
	    @click="open7">
	    偏移的消息
	  </el-button>
	</template>
	
	<script>
	  export default {
	    methods: {
	      open7() {
	        this.$notify.success({
	          title: '成功',
	          message: '这是一条成功的提示消息',
	          offset: 100
	        });
	      }
	    }
	  }
	</script>
	

snippet notification.md_3
	
	"""javascript
	import { Notification } from 'element-ui';
	

snippet pagination.md_0
	:::demo 设置"layout"，表示需要显示的内容，用逗号分隔，布局元素会依次显示。"prev"表示上一页，"next"为下一页，"pager"表示页码列表，除此以外还提供了"jumper"和"total"，"size"和特殊的布局符号"->"，"->"后的元素会靠右显示，"jumper"表示跳页元素，"total"表示显示页码总数，"size"用于设置每页显示的页码数量。
	"""html
	<div class="block">
	  <span class="demonstration">页数较少时的效果</span>
	  <el-pagination
	    layout="prev, pager, next"
	    :total="50">
	  </el-pagination>
	</div>
	<div class="block">
	  <span class="demonstration">大于 7 页时的效果</span>
	  <el-pagination
	    layout="prev, pager, next"
	    :total="1000">
	  </el-pagination>
	</div>
	

snippet pagination.md_1
	:::demo 只需要一个"small"属性，它接受一个"Boolean"，默认为"false"，设为"true"即可启用。
	"""html
	<el-pagination
	  small
	  layout="prev, pager, next"
	  :total="50">
	</el-pagination>
	

snippet pagination.md_2
	
	"""html
	<template>
	  <div class="block">
	    <span class="demonstration">显示总数</span>
	    <el-pagination
	      @size-change="handleSizeChange"
	      @current-change="handleCurrentChange"
	      :current-page.sync="currentPage1"
	      :page-size="100"
	      layout="total, prev, pager, next"
	      :total="1000">
	    </el-pagination>
	  </div>
	  <div class="block">
	    <span class="demonstration">调整每页显示条数</span>
	    <el-pagination
	      @size-change="handleSizeChange"
	      @current-change="handleCurrentChange"
	      :current-page.sync="currentPage2"
	      :page-sizes="[100, 200, 300, 400]"
	      :page-size="100"
	      layout="sizes, prev, pager, next"
	      :total="1000">
	    </el-pagination>
	  </div>
	  <div class="block">
	    <span class="demonstration">直接前往</span>
	    <el-pagination
	      @size-change="handleSizeChange"
	      @current-change="handleCurrentChange"
	      :current-page.sync="currentPage3"
	      :page-size="100"
	      layout="prev, pager, next, jumper"
	      :total="1000">
	    </el-pagination>
	  </div>
	  <div class="block">
	    <span class="demonstration">完整功能</span>
	    <el-pagination
	      @size-change="handleSizeChange"
	      @current-change="handleCurrentChange"
	      :current-page="currentPage4"
	      :page-sizes="[100, 200, 300, 400]"
	      :page-size="100"
	      layout="total, sizes, prev, pager, next, jumper"
	      :total="400">
	    </el-pagination>
	  </div>
	</template>
	<script>
	  export default {
	    methods: {
	      handleSizeChange(val) {
	        console.log("每页 ${val} 条");
	      },
	      handleCurrentChange(val) {
	        console.log("当前页: ${val}");
	      }
	    },
	    data() {
	      return {
	        currentPage1: 5,
	        currentPage2: 5,
	        currentPage3: 5,
	        currentPage4: 4
	      };
	    }
	  }
	</script>
	

snippet popover.md_0
	:::demo 设置索引"ref"，在按钮中，我们注册了自定义指令"v-popover"，指向索引ID。"trigger"属性用于设置何时触发 Popover ，提供三种触发方式："hover", "click" 和 "focus"。第二种用法通过 "slot" 指定 reference。
	"""html
	<el-popover
	  ref="popover1"
	  placement="top-start"
	  title="标题"
	  width="200"
	  trigger="hover"
	  content="这是一段内容,这是一段内容,这是一段内容,这是一段内容。">
	</el-popover>
	
	<el-popover
	  ref="popover2"
	  placement="bottom"
	  title="标题"
	  width="200"
	  trigger="click"
	  content="这是一段内容,这是一段内容,这是一段内容,这是一段内容。">
	</el-popover>
	
	<el-button v-popover:popover1>hover 激活</el-button>
	<el-button v-popover:popover2>click 激活</el-button>
	<el-popover
	  placement="right"
	  title="标题"
	  width="200"
	  trigger="focus"
	  content="这是一段内容,这是一段内容,这是一段内容,这是一段内容。">
	  <el-button slot="reference">focus 激活</el-button>
	</el-popover>
	

snippet popover.md_1
	:::demo 利用分发取代"content"属性
	"""html
	<el-popover
	  ref="popover4"
	  placement="right"
	  width="400"
	  trigger="click">
	  <el-table :data="gridData">
	    <el-table-column width="150" property="date" label="日期"></el-table-column>
	    <el-table-column width="100" property="name" label="姓名"></el-table-column>
	    <el-table-column width="300" property="address" label="地址"></el-table-column>
	  </el-table>
	</el-popover>
	
	<el-button v-popover:popover4>click 激活</el-button>
	
	<script>
	  export default {
	    data() {
	      return {
	        gridData: [{
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }]
	      };
	    }
	  };
	</script>
	

snippet popover.md_2
	:::demo
	"""html
	<el-popover
	  ref="popover5"
	  placement="top"
	  width="160"
	  v-model="visible2">
	  <p>这是一段内容这是一段内容确定删除吗？</p>
	  <div style="text-align: right; margin: 0">
	    <el-button size="mini" type="text" @click="visible2 = false">取消</el-button>
	    <el-button type="primary" size="mini" @click="visible2 = false">确定</el-button>
	  </div>
	</el-popover>
	
	<el-button v-popover:popover5>删除</el-button>
	
	<script>
	  export default {
	    data() {
	      return {
	        visible2: false,
	      };
	    }
	  }
	</script>
	

snippet progress.md_0
	
	"""html
	<el-progress :percentage="0"></el-progress>
	<el-progress :percentage="70"></el-progress>
	<el-progress :percentage="100" status="success"></el-progress>
	<el-progress :percentage="50" status="exception"></el-progress>
	

snippet progress.md_1
	
	"""html
	<el-progress :text-inside="true" :stroke-width="18" :percentage="0"></el-progress>
	<el-progress :text-inside="true" :stroke-width="18" :percentage="70"></el-progress>
	<el-progress :text-inside="true" :stroke-width="18" :percentage="100" status="success"></el-progress>
	<el-progress :text-inside="true" :stroke-width="18" :percentage="50" status="exception"></el-progress>
	

snippet progress.md_2
	
	"""html
	<el-progress type="circle" :percentage="0"></el-progress>
	<el-progress type="circle" :percentage="25"></el-progress>
	<el-progress type="circle" :percentage="100" status="success"></el-progress>
	<el-progress type="circle" :percentage="50" status="exception"></el-progress>
	

snippet quickstart.md_0
	新建项目，项目结构为
	"""text
	|- src/  --------------------- 项目源代码
	    |- App.vue
	    |- main.js  -------------- 入口文件
	|- .babelrc  ----------------- babel 配置文件
	|- index.html  --------------- HTML 模板
	|- package.json  ------------- npm 配置文件
	|- README.md  ---------------- 项目帮助文档
	|- webpack.config.js  -------- webpack 配置文件
	

snippet quickstart.md_1
	**.babelrc**
	"""json
	{
	  "presets": ["vue-app"]
	}
	

snippet quickstart.md_10
	
	"""bash
	npm run build
	

snippet quickstart.md_2
	**package.json**
	"""json
	{
	  "name": "element-starter",
	  "scripts": {
	    "dev": "cross-env NODE_ENV=development webpack-dev-server --inline --hot --port 8086",
	    "build": "cross-env NODE_ENV=production webpack --progress --hide-modules"
	  },
	  "dependencies": {
	    "element-ui": "^1.0.0",
	    "vue": "^2.1.6"
	  },
	  "devDependencies": {
	    "babel-core": "^6.0.0",
	    "babel-loader": "^6.0.0",
	    "babel-preset-vue-app": "^1.2.0",
	    "cross-env": "^1.0.6",
	    "css-loader": "^0.23.1",
	    "file-loader": "^0.8.5",
	    "style-loader": "^0.13.1",
	    "vue-loader": "^9.8.0",
	    "webpack": "beta",
	    "webpack-dev-server": "beta"
	  }
	}
	

snippet quickstart.md_3
	**webpack.config.js**
	"""javascript
	var path = require('path')
	var webpack = require('webpack')
	
	module.exports = {
	  entry: './src/main.js',
	  output: {
	    path: path.resolve(__dirname, './dist'),
	    publicPath: '/dist/',
	    filename: 'build.js'
	  },
	  module: {
	    loaders: [
	      {
	        test: /\.vue$/,
	        loader: 'vue-loader'
	      },
	      {
	        test: /\.js$/,
	        loader: 'babel-loader',
	        exclude: /node_modules/
	      },
	      {
	        test: /\.css$/,
	        loader: 'style-loader!css-loader'
	      },
	      {
	        test: /\.(eot|svg|ttf|woff|woff2)(\?\S*)?$/,
	        loader: 'file-loader'
	      },
	      {
	        test: /\.(png|jpe?g|gif|svg)(\?\S*)?$/,
	        loader: 'file-loader',
	        query: {
	          name: '[name].[ext]?[hash]'
	        }
	      }
	    ]
	  },
	  devServer: {
	    historyApiFallback: true,
	    noInfo: true
	  },
	  devtool: '#eval-source-map'
	}
	
	if (process.env.NODE_ENV === 'production') {
	  module.exports.devtool = '#source-map'
	  // http://vue-loader.vuejs.org/en/workflow/production.html
	  module.exports.plugins = (module.exports.plugins || []).concat([
	    new webpack.DefinePlugin({
	      'process.env': {
	        NODE_ENV: '"production"'
	      }
	    }),
	    new webpack.optimize.UglifyJsPlugin({
	      compress: {
	        warnings: false
	      }
	    })
	  ])
	}
	

snippet quickstart.md_4
	在 main.js 中写入以下内容：
	"""javascript
	import Vue from 'vue'
	import ElementUI from 'element-ui'
	import 'element-ui/lib/theme-default/index.css'
	import App from './App.vue'
	
	Vue.use(ElementUI)
	
	new Vue({
	  el: '#app',
	  render: h => h(App)
	})
	

snippet quickstart.md_5
	
	"""bash
	npm install babel-plugin-component -D
	

snippet quickstart.md_6
	然后，将 .babelrc 修改为：
	"""json
	{
	  "presets": [
	    ["es2015", { "modules": false }]
	  ],
	  "plugins": [["component", [
	    {
	      "libraryName": "element-ui",
	      "styleLibraryName": "theme-default"
	    }
	  ]]]
	}
	

snippet quickstart.md_7
	
	"""javascript
	import Vue from 'vue'
	import { Button, Select } from 'element-ui'
	import App from './App.vue'
	
	Vue.component(Button.name, Button)
	Vue.component(Select.name, Select)
	/* 或写为
	 * Vue.use(Button)
	 * Vue.use(Select)
	 */
	
	new Vue({
	  el: '#app',
	  render: h => h(App)
	})
	

snippet quickstart.md_8
	
	"""javascript
	import Vue from 'vue'
	import {
	  Pagination,
	  Dialog,
	  Autocomplete,
	  Dropdown,
	  DropdownMenu,
	  DropdownItem,
	  Menu,
	  Submenu,
	  MenuItem,
	  MenuItemGroup,
	  Input,
	  InputNumber,
	  Radio,
	  RadioGroup,
	  RadioButton,
	  Checkbox,
	  CheckboxGroup,
	  Switch,
	  Select,
	  Option,
	  OptionGroup,
	  Button,
	  ButtonGroup,
	  Table,
	  TableColumn,
	  DatePicker,
	  TimeSelect,
	  TimePicker,
	  Popover,
	  Tooltip,
	  Breadcrumb,
	  BreadcrumbItem,
	  Form,
	  FormItem,
	  Tabs,
	  TabPane,
	  Tag,
	  Tree,
	  Alert,
	  Slider,
	  Icon,
	  Row,
	  Col,
	  Upload,
	  Progress,
	  Spinner,
	  Badge,
	  Card,
	  Rate,
	  Steps,
	  Step,
	  Carousel,
	  Scrollbar,
	  CarouselItem,
	  Collapse,
	  CollapseItem,
	  Cascader,
	  ColorPicker,
	  Loading,
	  MessageBox,
	  Message,
	  Notification
	} from 'element-ui'
	
	Vue.use(Pagination)
	Vue.use(Dialog)
	Vue.use(Autocomplete)
	Vue.use(Dropdown)
	Vue.use(DropdownMenu)
	Vue.use(DropdownItem)
	Vue.use(Menu)
	Vue.use(Submenu)
	Vue.use(MenuItem)
	Vue.use(MenuItemGroup)
	Vue.use(Input)
	Vue.use(InputNumber)
	Vue.use(Radio)
	Vue.use(RadioGroup)
	Vue.use(RadioButton)
	Vue.use(Checkbox)
	Vue.use(CheckboxGroup)
	Vue.use(Switch)
	Vue.use(Select)
	Vue.use(Option)
	Vue.use(OptionGroup)
	Vue.use(Button)
	Vue.use(ButtonGroup)
	Vue.use(Table)
	Vue.use(TableColumn)
	Vue.use(DatePicker)
	Vue.use(TimeSelect)
	Vue.use(TimePicker)
	Vue.use(Popover)
	Vue.use(Tooltip)
	Vue.use(Breadcrumb)
	Vue.use(BreadcrumbItem)
	Vue.use(Form)
	Vue.use(FormItem)
	Vue.use(Tabs)
	Vue.use(TabPane)
	Vue.use(Tag)
	Vue.use(Tree)
	Vue.use(Alert)
	Vue.use(Slider)
	Vue.use(Icon)
	Vue.use(Row)
	Vue.use(Col)
	Vue.use(Upload)
	Vue.use(Progress)
	Vue.use(Spinner)
	Vue.use(Badge)
	Vue.use(Card)
	Vue.use(Rate)
	Vue.use(Steps)
	Vue.use(Step)
	Vue.use(Carousel)
	Vue.use(Scrollbar)
	Vue.use(CarouselItem)
	Vue.use(Collapse)
	Vue.use(CollapseItem)
	Vue.use(Cascader)
	Vue.use(ColorPicker)
	
	Vue.use(Loading.directive)
	
	Vue.prototype.$loading = Loading.service
	Vue.prototype.$msgbox = MessageBox
	Vue.prototype.$alert = MessageBox.alert
	Vue.prototype.$confirm = MessageBox.confirm
	Vue.prototype.$prompt = MessageBox.prompt
	Vue.prototype.$notify = Notification
	Vue.prototype.$message = Message
	

snippet quickstart.md_9
	
	"""bash
	# 执行如下命令后访问 localhost:8086
	npm run dev
	

snippet radio.md_0
	
	"""html
	<template>
	  <el-radio class="radio" v-model="radio" label="1">备选项</el-radio>
	  <el-radio class="radio" v-model="radio" label="2">备选项</el-radio>
	</template>
	
	<script>
	  export default {
	    data () {
	      return {
	        radio: '1'
	      };
	    }
	  }
	</script>
	

snippet radio.md_1
	:::demo 注意：请牢记，选中的条件是绑定的变量值等于"label"中的值。只要在"el-radio"元素中设置"disabled"属性即可，它接受一个"Boolean"，"true"为禁用。
	"""html
	<template>
	  <el-radio disabled v-model="radio1" label="禁用">备选项</el-radio>
	  <el-radio disabled v-model="radio1" label="选中且禁用">备选项</el-radio>
	</template>
	
	<script>
	  export default {
	    data () {
	      return {
	        radio1: '选中且禁用'
	      };
	    }
	  }
	</script>
	

snippet radio.md_2
	
	"""html
	<template>
	  <el-radio-group v-model="radio2">
	    <el-radio :label="3">备选项</el-radio>
	    <el-radio :label="6">备选项</el-radio>
	    <el-radio :label="9">备选项</el-radio>
	  </el-radio-group>
	</template>
	
	<script>
	  export default {
	    data () {
	      return {
	        radio2: 3
	      };
	    }
	  }
	</script>
	

snippet radio.md_3
	:::demo 只需要把"el-radio"元素换成"el-radio-button"元素即可，此外，Element 还提供了"size"属性给按钮组，支持"large"和"small"两种（如果不设定为默认）。
	"""html
	<template>
	  <el-radio-group v-model="radio3">
	    <el-radio-button label="上海"></el-radio-button>
	    <el-radio-button label="北京"></el-radio-button>
	    <el-radio-button label="广州"></el-radio-button>
	    <el-radio-button label="深圳"></el-radio-button>
	  </el-radio-group>
	  <div style="margin: 15px 0;"></div>
	  <el-radio-group v-model="radio4">
	    <el-radio-button label="上海"></el-radio-button>
	    <el-radio-button label="北京" :disabled="true"></el-radio-button>
	    <el-radio-button label="广州"></el-radio-button>
	    <el-radio-button label="深圳"></el-radio-button>
	  </el-radio-group>
	  <div style="margin: 15px 0;"></div>
	  <el-radio-group v-model="radio5" :disabled="true">
	    <el-radio-button label="上海"></el-radio-button>
	    <el-radio-button label="北京"></el-radio-button>
	    <el-radio-button label="广州"></el-radio-button>
	    <el-radio-button label="深圳"></el-radio-button>
	  </el-radio-group>
	</template>
	
	<script>
	  export default {
	    data () {
	      return {
	        radio3: '上海',
	        radio4: '上海',
	        radio5: '上海'
	      };
	    }
	  }
	</script>
	

snippet rate.md_0
	:::demo 评分被分为三个等级，可以利用颜色对分数及情感倾向进行分级（默认情况下不区分颜色）。三个等级所对应的颜色用过"colors"属性设置，而它们对应的两个阈值则通过 "low-threshold" 和 "high-threshold" 设定。
	""" html
	<div class="block">
	  <span class="demonstration">默认不区分颜色</span>
	  <el-rate v-model="value1"></el-rate>
	</div>
	<div class="block">
	  <span class="demonstration">区分颜色</span>
	  <el-rate
	    v-model="value2"
	    :colors="['#99A9BF', '#F7BA2A', '#FF9900']">
	  </el-rate>
	</div>
	
	<script>
	  export default {
	    data() {
	      return {
	        value1: null,
	        value2: null
	      }
	    }
	  }
	</script>
	

snippet rate.md_1
	:::demo 为组件设置 "show-text" 属性会在右侧显示辅助文字。通过设置 "texts" 可以为每一个分值指定对应的辅助文字。"texts" 为一个数组，长度应等于最大值 "max"。
	""" html
	<el-rate
	  v-model="value3"
	  show-text>
	</el-rate>
	
	<script>
	  export default {
	    data() {
	      return {
	        value3: null
	      }
	    }
	  }
	</script>
	

snippet rate.md_2
	:::demo 设置"icon-classes"属性可以自定义对应 3 个不同分段的图标。本例还使用"void-icon-class"指定了未选中时的图标类名。
	""" html
	<el-rate
	  v-model="value4"
	  :icon-classes="['icon-rate-face-1', 'icon-rate-face-2', 'icon-rate-face-3']"
	  void-icon-class="icon-rate-face-off"
	  :colors="['#99A9BF', '#F7BA2A', '#FF9900']">
	</el-rate>
	
	<script>
	  export default {
	    data() {
	      return {
	        value4: null
	      }
	    }
	  }
	</script>
	

snippet rate.md_3
	:::demo 为组件设置 "disabled" 属性表示组件为只读，支持小数分值。此时若设置 "show-text"，则会在右侧显示目前的分值。可以提供 "text-template" 作为显示模板，模板为一个包含了 "{value}" 的字符串，"{value}" 会被解析为分值。
	""" html
	<el-rate
	  v-model="value5"
	  disabled
	  show-text
	  text-color="#ff9900"
	  text-template="{value}">
	</el-rate>
	
	<script>
	  export default {
	    data() {
	      return {
	        value5: 3.7
	      }
	    }
	  }
	</script>
	

snippet select.md_0
	:::demo "v-model"的值为当前被选中的"el-option"的 value 属性值
	"""html
	<template>
	  <el-select v-model="value" placeholder="请选择">
	    <el-option
	      v-for="item in options"
	      :key="item.value"
	      :label="item.label"
	      :value="item.value">
	    </el-option>
	  </el-select>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        options: [{
	          value: '选项1',
	          label: '黄金糕'
	        }, {
	          value: '选项2',
	          label: '双皮奶'
	        }, {
	          value: '选项3',
	          label: '蚵仔煎'
	        }, {
	          value: '选项4',
	          label: '龙须面'
	        }, {
	          value: '选项5',
	          label: '北京烤鸭'
	        }],
	        value: ''
	      }
	    }
	  }
	</script>
	

snippet select.md_1
	:::demo 在"el-option"中，设定"disabled"值为 true，即可禁用该选项
	"""html
	<template>
	  <el-select v-model="value2" placeholder="请选择">
	    <el-option
	      v-for="item in options2"
	      :key="item.value"
	      :label="item.label"
	      :value="item.value"
	      :disabled="item.disabled">
	    </el-option>
	  </el-select>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        options2: [{
	          value: '选项1',
	          label: '黄金糕'
	        }, {
	          value: '选项2',
	          label: '双皮奶',
	          disabled: true
	        }, {
	          value: '选项3',
	          label: '蚵仔煎'
	        }, {
	          value: '选项4',
	          label: '龙须面'
	        }, {
	          value: '选项5',
	          label: '北京烤鸭'
	        }],
	        value2: ''
	      }
	    }
	  }
	</script>
	

snippet select.md_2
	:::demo 为"el-select"设置"disabled"属性，则整个选择器不可用
	"""html
	<template>
	  <el-select v-model="value3" disabled placeholder="请选择">
	    <el-option
	      v-for="item in options"
	      :key="item.value"
	      :label="item.label"
	      :value="item.value">
	    </el-option>
	  </el-select>
	</template>
	  
	<script>
	  export default {
	    data() {
	      return {
	        options: [{
	          value: '选项1',
	          label: '黄金糕'
	        }, {
	          value: '选项2',
	          label: '双皮奶'
	        }, {
	          value: '选项3',
	          label: '蚵仔煎'
	        }, {
	          value: '选项4',
	          label: '龙须面'
	        }, {
	          value: '选项5',
	          label: '北京烤鸭'
	        }],
	        value3: ''
	      }
	    }
	  }
	</script>
	

snippet select.md_3
	:::demo 为"el-select"设置"clearable"属性，则可将选择器清空。需要注意的是，"clearable"属性仅适用于单选。
	"""html
	<template>
	  <el-select v-model="value4" clearable placeholder="请选择">
	    <el-option
	      v-for="item in options"
	      :key="item.value"
	      :label="item.label"
	      :value="item.value">
	    </el-option>
	  </el-select>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        options: [{
	          value: '选项1',
	          label: '黄金糕'
	        }, {
	          value: '选项2',
	          label: '双皮奶'
	        }, {
	          value: '选项3',
	          label: '蚵仔煎'
	        }, {
	          value: '选项4',
	          label: '龙须面'
	        }, {
	          value: '选项5',
	          label: '北京烤鸭'
	        }],
	        value4: ''
	      }
	    }
	  }
	</script>
	

snippet select.md_4
	:::demo 为"el-select"设置"multiple"属性即可启用多选，此时"v-model"的值为当前选中值所组成的数组
	"""html
	<template>
	  <el-select v-model="value5" multiple placeholder="请选择">
	    <el-option
	      v-for="item in options"
	      :key="item.value"
	      :label="item.label"
	      :value="item.value">
	    </el-option>
	  </el-select>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        options: [{
	          value: '选项1',
	          label: '黄金糕'
	        }, {
	          value: '选项2',
	          label: '双皮奶'
	        }, {
	          value: '选项3',
	          label: '蚵仔煎'
	        }, {
	          value: '选项4',
	          label: '龙须面'
	        }, {
	          value: '选项5',
	          label: '北京烤鸭'
	        }],
	        value5: []
	      }
	    }
	  }
	</script>
	

snippet select.md_5
	:::demo 将自定义的 HTML 模板插入"el-option"的 slot 中即可。
	"""html
	<template>
	  <el-select v-model="value6" placeholder="请选择">
	    <el-option
	      v-for="item in cities"
	      :key="item.value"
	      :label="item.label"
	      :value="item.value">
	      <span style="float: left">{{ item.label }}</span>
	      <span style="float: right; color: #8492a6; font-size: 13px">{{ item.value }}</span>
	    </el-option>
	  </el-select>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        cities: [{
	          value: 'Beijing',
	          label: '北京'
	        }, {
	          value: 'Shanghai',
	          label: '上海'
	        }, {
	          value: 'Nanjing',
	          label: '南京'
	        }, {
	          value: 'Chengdu',
	          label: '成都'
	        }, {
	          value: 'Shenzhen',
	          label: '深圳'
	        }, {
	          value: 'Guangzhou',
	          label: '广州'
	        }],
	        value6: ''
	      }
	    }
	  }
	</script>
	

snippet select.md_6
	:::demo 使用"el-option-group"对备选项进行分组，它的"label"属性为分组名
	"""html
	<template>
	  <el-select v-model="value7" placeholder="请选择">
	    <el-option-group
	      v-for="group in options3"
	      :key="group.label"
	      :label="group.label">
	      <el-option
	        v-for="item in group.options"
	        :key="item.value"
	        :label="item.label"
	        :value="item.value">
	      </el-option>
	    </el-option-group>
	  </el-select>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        options3: [{
	          label: '热门城市',
	          options: [{
	            value: 'Shanghai',
	            label: '上海'
	          }, {
	            value: 'Beijing',
	            label: '北京'
	          }]
	        }, {
	          label: '城市名',
	          options: [{
	            value: 'Chengdu',
	            label: '成都'
	          }, {
	            value: 'Shenzhen',
	            label: '深圳'
	          }, {
	            value: 'Guangzhou',
	            label: '广州'
	          }, {
	            value: 'Dalian',
	            label: '大连'
	          }]
	        }],
	        value7: ''
	      }
	    }
	  }
	</script>
	

snippet select.md_7
	:::demo 为"el-select"添加"filterable"属性即可启用搜索功能。默认情况下，Select 会找出所有"label"属性包含输入值的选项。如果希望使用其他的搜索逻辑，可以通过传入一个"filter-method"来实现。"filter-method"为一个"Function"，它会在输入值发生变化时调用，参数为当前输入值。
	"""html
	<template>
	  <el-select v-model="value8" filterable placeholder="请选择">
	    <el-option
	      v-for="item in options"
	      :key="item.value"
	      :label="item.label"
	      :value="item.value">
	    </el-option>
	  </el-select>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        options: [{
	          value: '选项1',
	          label: '黄金糕'
	        }, {
	          value: '选项2',
	          label: '双皮奶'
	        }, {
	          value: '选项3',
	          label: '蚵仔煎'
	        }, {
	          value: '选项4',
	          label: '龙须面'
	        }, {
	          value: '选项5',
	          label: '北京烤鸭'
	        }],
	        value8: ''
	      }
	    }
	  }
	</script>
	

snippet select.md_8
	:::demo 为了启用远程搜索，需要将"filterable"和"remote"设置为"true"，同时传入一个"remote-method"。"remote-method"为一个"Function"，它会在输入值发生变化时调用，参数为当前输入值。需要注意的是，如果"el-option"是通过"v-for"指令渲染出来的，此时需要为"el-option"添加"key"属性，且其值需具有唯一性，比如此例中的"item.value"。
	"""html
	<template>
	  <el-select
	    v-model="value9"
	    multiple
	    filterable
	    remote
	    placeholder="请输入关键词"
	    :remote-method="remoteMethod"
	    :loading="loading">
	    <el-option
	      v-for="item in options4"
	      :key="item.value"
	      :label="item.label"
	      :value="item.value">
	    </el-option>
	  </el-select>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        options4: [],
	        value9: [],
	        list: [],
	        loading: false,
	        states: ["Alabama", "Alaska", "Arizona",
	        "Arkansas", "California", "Colorado",
	        "Connecticut", "Delaware", "Florida",
	        "Georgia", "Hawaii", "Idaho", "Illinois",
	        "Indiana", "Iowa", "Kansas", "Kentucky",
	        "Louisiana", "Maine", "Maryland",
	        "Massachusetts", "Michigan", "Minnesota",
	        "Mississippi", "Missouri", "Montana",
	        "Nebraska", "Nevada", "New Hampshire",
	        "New Jersey", "New Mexico", "New York",
	        "North Carolina", "North Dakota", "Ohio",
	        "Oklahoma", "Oregon", "Pennsylvania",
	        "Rhode Island", "South Carolina",
	        "South Dakota", "Tennessee", "Texas",
	        "Utah", "Vermont", "Virginia",
	        "Washington", "West Virginia", "Wisconsin",
	        "Wyoming"]
	      }
	    },
	    mounted() {
	      this.list = this.states.map(item => {
	        return { value: item, label: item };
	      });
	    },
	    methods: {
	      remoteMethod(query) {
	        if (query !== '') {
	          this.loading = true;
	          setTimeout(() => {
	            this.loading = false;
	            this.options4 = this.list.filter(item => {
	              return item.label.toLowerCase()
	                .indexOf(query.toLowerCase()) > -1;
	            });
	          }, 200);
	        } else {
	          this.options4 = [];
	        }
	      }
	    }
	  }
	</script>
	

snippet select.md_9
	:::demo 使用"allow-create"属性即可通过在输入框中输入文字来创建新的条目。注意此时"filterable"必须为真。
	"""html
	<template>
	  <el-select
	    v-model="value10"
	    multiple
	    filterable
	    allow-create
	    placeholder="请选择文章标签">
	    <el-option
	      v-for="item in options5"
	      :key="item.value"
	      :label="item.label"
	      :value="item.value">
	    </el-option>
	  </el-select>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        options5: [{
	          value: 'HTML',
	          label: 'HTML'
	        }, {
	          value: 'CSS',
	          label: 'CSS'
	        }, {
	          value: 'JavaScript',
	          label: 'JavaScript'
	        }],
	        value10: []
	      }
	    }
	  }
	</script>
	

snippet slider.md_0
	:::demo 通过设置绑定值自定义滑块的初始值
	"""html
	<template>
	  <div class="block">
	    <span class="demonstration">默认</span>
	    <el-slider v-model="value1"></el-slider>
	  </div>
	  <div class="block">
	    <span class="demonstration">自定义初始值</span>
	    <el-slider v-model="value2"></el-slider>
	  </div>
	  <div class="block">
	    <span class="demonstration">隐藏 Tooltip</span>
	    <el-slider v-model="value3" :show-tooltip="false"></el-slider>
	  </div>
	  <div class="block">
	    <span class="demonstration">格式化 Tooltip</span>
	    <el-slider v-model="value4" :format-tooltip="formatTooltip"></el-slider>
	  </div>
	  <div class="block">
	    <span class="demonstration">禁用</span>
	    <el-slider v-model="value5" disabled></el-slider>
	  </div>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        value1: 0,
	        value2: 50,
	        value3: 36,
	        value4: 48,
	        value5: 42
	      }
	    },
	    methods: {
	      formatTooltip(val) {
	        return val / 100;
	      }
	    }
	  }
	</script>
	

snippet slider.md_1
	:::demo 改变"step"的值可以改变步长，通过设置"show-step"属性可以显示间断点
	"""html
	<template>
	  <div class="block">
	    <span class="demonstration">不显示间断点</span>
	    <el-slider
	      v-model="value6"
	      :step="10">
	    </el-slider>
	  </div>
	  <div class="block">
	    <span class="demonstration">显示间断点</span>
	    <el-slider
	      v-model="value7"
	      :step="10"
	      show-stops>
	    </el-slider>
	  </div>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        value6: 0,
	        value7: 0
	      }
	    }
	  }
	</script>
	

snippet slider.md_2
	:::demo 设置"show-input"属性会在右侧显示一个输入框
	"""html
	<template>
	  <div class="block">
	    <el-slider
	      v-model="value8"
	      show-input>
	    </el-slider>
	  </div>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        value8: 0
	      }
	    }
	  }
	</script>
	

snippet slider.md_3
	:::demo 设置"range"即可开启范围选择，此时绑定值是一个数组，其元素分别为最小边界值和最大边界值
	"""html
	<template>
	  <div class="block">
	    <el-slider
	      v-model="value9"
	      range
	      show-stops
	      :max="10">
	    </el-slider>
	  </div>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        value9: [4, 8]
	      }
	    }
	  }
	</script>
	

snippet slider.md_4
	:::demo 设置"vertical"可使 Slider 变成竖向模式，此时必须设置高度"height"属性
	"""html
	<template>
	  <div class="block">
	    <el-slider
	      v-model="value10"
	      vertical
	      height="200px">
	    </el-slider>
	  </div>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        value10: 0
	      }
	    }
	  }
	</script>
	

snippet steps.md_0
	:::demo 设置"active"属性，接受一个"Number"，表明步骤的 index，从 0 开始。需要定宽的步骤条时，设置"space"属性即可，它接受"Boolean"，单位为"px"，如果不设置，则为自适应。设置"finish-status"属性可以改变已经完成的步骤的状态。
	"""html
	<el-steps :space="100" :active="active" finish-status="success">
	  <el-step title="步骤 1"></el-step>
	  <el-step title="步骤 2"></el-step>
	  <el-step title="步骤 3"></el-step>
	</el-steps>
	
	<el-button style="margin-top: 12px;" @click="next">下一步</el-button>
	
	<script>
	  export default {
	    data() {
	      return {
	        active: 0
	      };
	    },
	
	    methods: {
	      next() {
	        if (this.active++ > 2) this.active = 0;
	      }
	    }
	  }
	</script>
	

snippet steps.md_1
	:::demo 也可以使用"title"具名分发，可以用"slot"的方式来取代属性的设置，在本文档最后的列表中有所有的 slot name 可供参考。
	"""html
	<el-steps :space="100" :active="1" finish-status="success">
	  <el-step title="已完成"></el-step>
	  <el-step title="进行中"></el-step>
	  <el-step title="步骤 3"></el-step>
	</el-steps>
	

snippet steps.md_2
	:::demo
	"""html
	<el-steps :space="200" :active="1">
	  <el-step title="步骤 1" description="这是一段很长很长很长的描述性文字"></el-step>
	  <el-step title="步骤 2" description="这是一段很长很长很长的描述性文字"></el-step>
	  <el-step title="步骤 3" description="这是一段很长很长很长的描述性文字"></el-step>
	</el-steps>
	

snippet steps.md_3
	:::demo 通过"icon"属性来设置图标，图标的类型可以参考 Icon 组件的文档，除此以外，还能通过具名"slot"来使用自定义的图标。
	"""html
	<el-steps :space="100" :active="1">
	  <el-step title="步骤 1" icon="edit"></el-step>
	  <el-step title="步骤 2" icon="upload"></el-step>
	  <el-step title="步骤 3" icon="picture"></el-step>
	</el-steps>
	

snippet steps.md_4
	:::demo 只需要在"el-steps"元素中设置"direction"属性为"vertical"即可。
	"""html
	<el-steps :space="100" direction="vertical" :active="1">
	  <el-step title="步骤 1"></el-step>
	  <el-step title="步骤 2"></el-step>
	  <el-step title="步骤 3"></el-step>
	</el-steps>
	

snippet switch.md_0
	
	"""html
	<el-switch
	  v-model="value1"
	  on-text=""
	  off-text="">
	</el-switch>
	<el-switch
	  v-model="value2"
	  on-color="#13ce66"
	  off-color="#ff4949">
	</el-switch>
	
	<script>
	  export default {
	    data() {
	      return {
	        value1: true,
	        value2: true
	      }
	    }
	  };
	</script>
	

snippet switch.md_1
	
	"""html
	<el-tooltip :content="'Switch value: ' + value3" placement="top">
	  <el-switch
	    v-model="value3"
	    on-color="#13ce66"
	    off-color="#ff4949"
	    on-value="100"
	    off-value="0">
	  </el-switch>
	</el-tooltip>
	
	<script>
	  export default {
	    data() {
	      return {
	        value3: '100'
	      }
	    }
	  };
	</script>
	

snippet switch.md_2
	
	"""html
	<el-switch
	  v-model="value4"
	  on-text=""
	  off-text=""
	  disabled>
	</el-switch>
	<el-switch
	  v-model="value4"
	  disabled>
	</el-switch>
	<script>
	  export default {
	    data() {
	      return {
	        value4: true
	      }
	    }
	  };
	</script>
	

snippet table.md_0
	:::demo 当"el-table"元素中注入"data"对象数组后，在"el-table-column"中用"prop"属性来对应对象中的键名即可填入数据，用"label"属性来定义表格的列名。可以使用"width"属性来定义列宽。
	"""html
	  <template>
	    <el-table
	      :data="tableData"
	      style="width: 100%">
	      <el-table-column
	        prop="date"
	        label="日期"
	        width="180">
	      </el-table-column>
	      <el-table-column
	        prop="name"
	        label="姓名"
	        width="180">
	      </el-table-column>
	      <el-table-column
	        prop="address"
	        label="地址">
	      </el-table-column>
	    </el-table>
	  </template>
	
	  <script>
	    export default {
	      data() {
	        return {
	          tableData: [{
	            date: '2016-05-02',
	            name: '王小虎',
	            address: '上海市普陀区金沙江路 1518 弄'
	          }, {
	            date: '2016-05-04',
	            name: '王小虎',
	            address: '上海市普陀区金沙江路 1517 弄'
	          }, {
	            date: '2016-05-01',
	            name: '王小虎',
	            address: '上海市普陀区金沙江路 1519 弄'
	          }, {
	            date: '2016-05-03',
	            name: '王小虎',
	            address: '上海市普陀区金沙江路 1516 弄'
	          }]
	        }
	      }
	    }
	  </script>
	

snippet table.md_1
	:::demo "stripe"属性可以创建带斑马纹的表格。它接受一个"Boolean"，默认为"false"，设置为"true"即为启用。
	"""html
	<template>
	  <el-table
	    :data="tableData"
	    stripe
	    style="width: 100%">
	    <el-table-column
	      prop="date"
	      label="日期"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址">
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData: [{
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1517 弄'
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1519 弄'
	        }, {
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1516 弄'
	        }]
	      }
	    }
	  }
	</script>
	

snippet table.md_10
	:::demo 实现多选非常简单: 手动添加一个"el-table-column"，设"type"属性为"selection"即可；默认情况下若内容过多会折行显示，若需要单行显示可以使用"show-overflow-tooltip"属性，它接受一个"Boolean"，为"true"时多余的内容会在 hover 时以 tooltip 的形式显示出来。
	"""html
	<template>
	  <el-table
	    ref="multipleTable"
	    :data="tableData3"
	    border
	    tooltip-effect="dark"
	    style="width: 100%"
	    @selection-change="handleSelectionChange">
	    <el-table-column
	      type="selection"
	      width="55">
	    </el-table-column>
	    <el-table-column
	      label="日期"
	      width="120">
	      <template scope="scope">{{ scope.row.date }}</template>
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址"
	      show-overflow-tooltip>
	    </el-table-column>
	  </el-table>
	  <div style="margin-top: 20px">
	    <el-button @click="toggleSelection([tableData3[1], tableData3[2]])">切换第二、第三行的选中状态</el-button>
	    <el-button @click="toggleSelection()">取消选择</el-button>
	  </div>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData3: [{
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-08',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-06',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-07',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }],
	        multipleSelection: []
	      }
	    },
	
	    methods: {
	      toggleSelection(rows) {
	        if (rows) {
	          rows.forEach(row => {
	            this.$refs.multipleTable.toggleRowSelection(row);
	          });
	        } else {
	          this.$refs.multipleTable.clearSelection();
	        }
	      },
	      handleSelectionChange(val) {
	        this.multipleSelection = val;
	      }
	    }
	  }
	</script>
	

snippet table.md_11
	:::demo 在列中设置"sortable"属性即可实现以该列为基准的排序，接受一个"Boolean"，默认为"false"。可以通过 Table 的"default-sort"属性设置默认的排序列和排序顺序。可以使用"sort-method"使用自定义的排序规则。如果需要后端排序，需将"sortable"设置为"custom"，同时在 Table 上监听"sort-change"事件，在事件回调中可以获取当前排序的字段名和排序顺序，从而向接口请求排序后的表格数据。在本例中，我们还使用了"formatter"属性，它用于格式化指定列的值，接受一个"Function"，会传入两个参数："row"和"column"，可以根据自己的需求进行处理。
	"""html
	<template>
	  <el-table
	    :data="tableData"
	    border
	    style="width: 100%"
	    :default-sort = "{prop: 'date', order: 'descending'}"
	    >
	    <el-table-column
	      prop="date"
	      label="日期"
	      sortable
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      sortable
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址"
	      :formatter="formatter">
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData: [{
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1517 弄'
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1519 弄'
	        }, {
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1516 弄'
	        }]
	      }
	    },
	    methods: {
	      formatter(row, column) {
	        return row.address;
	      }
	    }
	  }
	</script>
	

snippet table.md_12
	:::demo 在列中设置"filters" "filter-method"属性即可开启该列的筛选，filters 是一个数组，"filter-method"是一个方法，它用于决定某些数据是否显示，会传入两个参数："value"和"row"。
	"""html
	<template>
	  <el-table
	    :data="tableData"
	    border
	    style="width: 100%">
	    <el-table-column
	      prop="date"
	      label="日期"
	      sortable
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址"
	      :formatter="formatter">
	    </el-table-column>
	    <el-table-column
	      prop="tag"
	      label="标签"
	      width="100"
	      :filters="[{ text: '家', value: '家' }, { text: '公司', value: '公司' }]"
	      :filter-method="filterTag"
	      filter-placement="bottom-end">
	      <template scope="scope">
	        <el-tag
	          :type="scope.row.tag === '家' ? 'primary' : 'success'"
	          close-transition>{{scope.row.tag}}</el-tag>
	      </template>
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData: [{
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄',
	          tag: '家'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1517 弄',
	          tag: '公司'
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1519 弄',
	          tag: '家'
	        }, {
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1516 弄',
	          tag: '公司'
	        }]
	      }
	    },
	    methods: {
	      formatter(row, column) {
	        return row.address;
	      },
	      filterTag(value, row) {
	        return row.tag === value;
	      }
	    }
	  }
	</script>
	

snippet table.md_13
	:::demo 通过 "Scoped slot" 可以获取到 row, column, $index 和 store（table 内部的状态管理）的数据，用法参考 demo。("1.1" 后支持通过 [Scoped slot](https://vuejs.org/v2/guide/components.html#Scoped-Slots) 自定义模板。之前的 "inline-template" 同样适用，但不推荐。)
	"""html
	<template>
	  <el-table
	    :data="tableData"
	    border
	    style="width: 100%">
	    <el-table-column
	      label="日期"
	      width="180">
	      <template scope="scope">
	        <el-icon name="time"></el-icon>
	        <span style="margin-left: 10px">{{ scope.row.date }}</span>
	      </template>
	    </el-table-column>
	    <el-table-column
	      label="姓名"
	      width="180">
	      <template scope="scope">
	        <el-popover trigger="hover" placement="top">
	          <p>姓名: {{ scope.row.name }}</p>
	          <p>住址: {{ scope.row.address }}</p>
	          <div slot="reference" class="name-wrapper">
	            <el-tag>{{ scope.row.name }}</el-tag>
	          </div>
	        </el-popover>
	      </template>
	    </el-table-column>
	    <el-table-column label="操作">
	      <template scope="scope">
	        <el-button
	          size="small"
	          @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
	        <el-button
	          size="small"
	          type="danger"
	          @click="handleDelete(scope.$index, scope.row)">删除</el-button>
	      </template>
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData: [{
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1517 弄'
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1519 弄'
	        }, {
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1516 弄'
	        }]
	      }
	    },
	    methods: {
	      handleEdit(index, row) {
	        console.log(index, row);
	      },
	      handleDelete(index, row) {
	        console.log(index, row);
	      }
	    }
	  }
	</script>
	

snippet table.md_14
	:::demo 通过设置 type="expand" 和 "Scoped slot" 可以开启展开行功能，"el-table-column" 的模板会被渲染成为展开行的内容，展开行可访问的属性与使用自定义列模板时的 "Scoped slot" 相同。
	"""html
	<template>
	  <el-table
	    :data="tableData5"
	    style="width: 100%">
	    <el-table-column type="expand">
	      <template scope="props">
	        <el-form label-position="left" inline class="demo-table-expand">
	          <el-form-item label="商品名称">
	            <span>{{ props.row.name }}</span>
	          </el-form-item>
	          <el-form-item label="所属店铺">
	            <span>{{ props.row.shop }}</span>
	          </el-form-item>
	          <el-form-item label="商品 ID">
	            <span>{{ props.row.id }}</span>
	          </el-form-item>
	          <el-form-item label="店铺 ID">
	            <span>{{ props.row.shopId }}</span>
	          </el-form-item>
	          <el-form-item label="商品分类">
	            <span>{{ props.row.category }}</span>
	          </el-form-item>
	          <el-form-item label="店铺地址">
	            <span>{{ props.row.address }}</span>
	          </el-form-item>
	          <el-form-item label="商品描述">
	            <span>{{ props.row.desc }}</span>
	          </el-form-item>
	        </el-form>
	      </template>
	    </el-table-column>
	    <el-table-column
	      label="商品 ID"
	      prop="id">
	    </el-table-column>
	    <el-table-column
	      label="商品名称"
	      prop="name">
	    </el-table-column>
	    <el-table-column
	      label="描述"
	      prop="desc">
	    </el-table-column>
	  </el-table>
	</template>
	
	<style>
	  .demo-table-expand {
	    font-size: 0;
	  }
	  .demo-table-expand label {
	    width: 90px;
	    color: #99a9bf;
	  }
	  .demo-table-expand .el-form-item {
	    margin-right: 0;
	    margin-bottom: 0;
	    width: 50%;
	  }
	</style>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData5: [{
	          id: '12987122',
	          name: '好滋好味鸡蛋仔',
	          category: '江浙小吃、小吃零食',
	          desc: '荷兰优质淡奶，奶香浓而不腻',
	          address: '上海市普陀区真北路',
	          shop: '王小虎夫妻店',
	          shopId: '10333'
	        }, {
	          id: '12987123',
	          name: '好滋好味鸡蛋仔',
	          category: '江浙小吃、小吃零食',
	          desc: '荷兰优质淡奶，奶香浓而不腻',
	          address: '上海市普陀区真北路',
	          shop: '王小虎夫妻店',
	          shopId: '10333'
	        }, {
	          id: '12987125',
	          name: '好滋好味鸡蛋仔',
	          category: '江浙小吃、小吃零食',
	          desc: '荷兰优质淡奶，奶香浓而不腻',
	          address: '上海市普陀区真北路',
	          shop: '王小虎夫妻店',
	          shopId: '10333'
	        }, {
	          id: '12987126',
	          name: '好滋好味鸡蛋仔',
	          category: '江浙小吃、小吃零食',
	          desc: '荷兰优质淡奶，奶香浓而不腻',
	          address: '上海市普陀区真北路',
	          shop: '王小虎夫妻店',
	          shopId: '10333'
	        }]
	      }
	    }
	  }
	</script>
	

snippet table.md_15
	:::demo 将"show-summary"设置为"true"就会在表格尾部展示合计行。默认情况下，对于合计行，第一列不进行数据求合操作，而是显示「合计」二字（可通过"sum-text"配置），其余列会将本列所有数值进行求合操作，并显示出来。当然，你也可以定义自己的合计逻辑。使用"summary-method"并传入一个方法，返回一个数组，这个数组中的各项就会显示在合计行的各列中，具体可以参考本例中的第二个表格。
	"""html
	<template>
	  <el-table
	    :data="tableData6"
	    border
	    show-summary
	    style="width: 100%">
	    <el-table-column
	      prop="id"
	      label="ID"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名">
	    </el-table-column>
	    <el-table-column
	      prop="amount1"
	      sortable
	      label="数值 1">
	    </el-table-column>
	    <el-table-column
	      prop="amount2"
	      sortable
	      label="数值 2">
	    </el-table-column>
	    <el-table-column
	      prop="amount3"
	      sortable
	      label="数值 3">
	    </el-table-column>
	  </el-table>
	  
	  <el-table
	    :data="tableData6"
	    border
	    height="200"
	    :summary-method="getSummaries"
	    show-summary
	    style="width: 100%; margin-top: 20px">
	    <el-table-column
	      prop="id"
	      label="ID"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名">
	    </el-table-column>
	    <el-table-column
	      prop="amount1"
	      label="数值 1（元）">
	    </el-table-column>
	    <el-table-column
	      prop="amount2"
	      label="数值 2（元）">
	    </el-table-column>
	    <el-table-column
	      prop="amount3"
	      label="数值 3（元）">
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData6: [{
	          id: '12987122',
	          name: '王小虎',
	          amount1: '234',
	          amount2: '3.2',
	          amount3: 10
	        }, {
	          id: '12987123',
	          name: '王小虎',
	          amount1: '165',
	          amount2: '4.43',
	          amount3: 12
	        }, {
	          id: '12987124',
	          name: '王小虎',
	          amount1: '324',
	          amount2: '1.9',
	          amount3: 9
	        }, {
	          id: '12987125',
	          name: '王小虎',
	          amount1: '621',
	          amount2: '2.2',
	          amount3: 17
	        }, {
	          id: '12987126',
	          name: '王小虎',
	          amount1: '539',
	          amount2: '4.1',
	          amount3: 15
	        }]
	      };
	    },
	    methods: {
	      getSummaries(param) {
	        const { columns, data } = param;
	        const sums = [];
	        columns.forEach((column, index) => {
	          if (index === 0) {
	            sums[index] = '总价';
	            return;
	          }
	          const values = data.map(item => Number(item[column.property]));
	          if (!values.every(value => isNaN(value))) {
	            sums[index] = values.reduce((prev, curr) => {
	              const value = Number(curr);
	              if (!isNaN(value)) {
	                return prev + curr;
	              } else {
	                return prev;
	              }
	            }, 0);
	            sums[index] += ' 元';
	          } else {
	            sums[index] = 'N/A';
	          }
	        });
	
	        return sums;
	      }
	    }
	  };
	</script>
	

snippet table.md_2
	:::demo 默认情况下，Table 组件是不具有竖直方向的边框的，如果需要，可以使用"border"属性，它接受一个"Boolean"，设置为"true"即可启用。
	"""html
	<template>
	  <el-table
	    :data="tableData"
	    border
	    style="width: 100%">
	    <el-table-column
	      prop="date"
	      label="日期"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址">
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData: [{
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1517 弄'
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1519 弄'
	        }, {
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1516 弄'
	        }]
	      }
	    }
	  }
	</script>
	

snippet table.md_3
	:::demo 可以通过指定 Table 组件的 "row-class-name" 属性来为 Table 中的某一行添加 class，表明该行处于某种状态。
	"""html
	<template>
	  <el-table
	    :data="tableData2"
	    style="width: 100%"
	    :row-class-name="tableRowClassName">
	    <el-table-column
	      prop="date"
	      label="日期"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址">
	    </el-table-column>
	  </el-table>
	</template>
	
	<style>
	  .el-table .info-row {
	    background: #c9e5f5;
	  }
	
	  .el-table .positive-row {
	    background: #e2f0e4;
	  }
	</style>
	
	<script>
	  export default {
	    methods: {
	      tableRowClassName(row, index) {
	        if (index === 1) {
	          return 'info-row';
	        } else if (index === 3) {
	          return 'positive-row';
	        }
	        return '';
	      }
	    },
	    data() {
	      return {
	        tableData2: [{
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄',
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄',
	        }, {
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }]
	      }
	    }
	  }
	</script>
	

snippet table.md_4
	:::demo 只要在"el-table"元素中定义了"height"属性，即可实现固定表头的表格，而不需要额外的代码。
	"""html
	<template>
	  <el-table
	    :data="tableData3"
	    height="250"
	    border
	    style="width: 100%">
	    <el-table-column
	      prop="date"
	      label="日期"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      width="180">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址">
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData3: [{
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-08',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-06',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-07',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }]
	      }
	    }
	  }
	</script>
	

snippet table.md_5
	:::demo 固定列需要使用"fixed"属性，它接受 Boolean 值或者"left" "right"，表示左边固定还是右边固定。
	"""html
	<template>
	  <el-table
	    :data="tableData"
	    border
	    style="width: 100%">
	    <el-table-column
	      fixed
	      prop="date"
	      label="日期"
	      width="150">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      prop="province"
	      label="省份"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      prop="city"
	      label="市区"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址"
	      width="300">
	    </el-table-column>
	    <el-table-column
	      prop="zip"
	      label="邮编"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      fixed="right"
	      label="操作"
	      width="100">
	      <template scope="scope">
	        <el-button @click="handleClick" type="text" size="small">查看</el-button>
	        <el-button type="text" size="small">编辑</el-button>
	      </template>
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    methods: {
	      handleClick() {
	        console.log(1);
	      }
	    },
	
	    data() {
	      return {
	        tableData: [{
	          date: '2016-05-03',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-02',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }]
	      }
	    }
	  }
	</script>
	

snippet table.md_6
	:::demo 固定列和表头可以同时使用，只需要将上述两个属性分别设置好即可。
	"""html
	<template>
	  <el-table
	    :data="tableData3"
	    border
	    style="width: 100%"
	    height="250">
	    <el-table-column
	      fixed
	      prop="date"
	      label="日期"
	      width="150">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      prop="province"
	      label="省份"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      prop="city"
	      label="市区"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址"
	      width="300">
	    </el-table-column>
	    <el-table-column
	      prop="zip"
	      label="邮编"
	      width="120">
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData3: [{
	          date: '2016-05-03',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-02',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-08',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-06',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-07',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }]
	      }
	    }
	  }
	</script>
	

snippet table.md_7
	:::demo 通过设置"max-height"属性为 Table 指定最大高度。此时若表格所需的高度大于最大高度，则会显示一个滚动条。
	"""html
	<template>
	  <el-table
	    :data="tableData4"
	    border
	    style="width: 100%"
	    max-height="250">
	    <el-table-column
	      fixed
	      prop="date"
	      label="日期"
	      width="150">
	    </el-table-column>
	    <el-table-column
	      prop="name"
	      label="姓名"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      prop="province"
	      label="省份"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      prop="city"
	      label="市区"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      prop="address"
	      label="地址"
	      width="300">
	    </el-table-column>
	    <el-table-column
	      prop="zip"
	      label="邮编"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      fixed="right"
	      label="操作"
	      width="120">
	      <template scope="scope">
	        <el-button
	          @click.native.prevent="deleteRow(scope.$index, tableData4)"
	          type="text"
	          size="small">
	          移除
	        </el-button>
	      </template>
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    methods: {
	      deleteRow(index, rows) {
	        rows.splice(index, 1);
	      }
	    },
	    data() {
	      return {
	        tableData4: [{
	          date: '2016-05-03',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-02',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-08',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-06',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-07',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }]
	      }
	    }
	  }
	</script>
	

snippet table.md_8
	:::demo 只需要在 el-table-column 里面嵌套 el-table-column，就可以实现多级表头。
	"""html
	<template>
	  <el-table
	    :data="tableData3"
	    border
	    style="width: 100%">
	    <el-table-column
	      prop="date"
	      label="日期"
	      width="150">
	    </el-table-column>
	    <el-table-column label="配送信息">
	      <el-table-column
	        prop="name"
	        label="姓名"
	        width="120">
	      </el-table-column>
	      <el-table-column label="地址">
	        <el-table-column
	          prop="province"
	          label="省份"
	          width="120">
	        </el-table-column>
	        <el-table-column
	          prop="city"
	          label="市区"
	          width="120">
	        </el-table-column>
	        <el-table-column
	          prop="address"
	          label="地址"
	          width="300">
	        </el-table-column>
	        <el-table-column
	          prop="zip"
	          label="邮编"
	          width="120">
	        </el-table-column>
	      </el-table-column>
	    </el-table-column>
	  </el-table>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData3: [{
	          date: '2016-05-03',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-02',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-08',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-06',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }, {
	          date: '2016-05-07',
	          name: '王小虎',
	          province: '上海',
	          city: '普陀区',
	          address: '上海市普陀区金沙江路 1518 弄',
	          zip: 200333
	        }]
	      }
	    }
	  }
	</script>
	

snippet table.md_9
	:::demo Table 组件提供了单选的支持，只需要配置"highlight-current-row"属性即可实现单选。之后由"current-change"事件来管理选中时触发的事件，它会传入"currentRow"，"oldCurrentRow"。如果需要显示索引，可以增加一列"el-table-column"，设置"type"属性为"index"即可显示从 1 开始的索引号。
	"""html
	<template>
	  <el-table
	    ref="singleTable"
	    :data="tableData"
	    highlight-current-row
	    @current-change="handleCurrentChange"
	    style="width: 100%">
	    <el-table-column
	      type="index"
	      width="50">
	    </el-table-column>
	    <el-table-column
	      property="date"
	      label="日期"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      property="name"
	      label="姓名"
	      width="120">
	    </el-table-column>
	    <el-table-column
	      property="address"
	      label="地址">
	    </el-table-column>
	  </el-table>
	  <div style="margin-top: 20px">
	    <el-button @click="setCurrent(tableData[1])">选中第二行</el-button>
	    <el-button @click="setCurrent()">取消选择</el-button>
	  </div>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        tableData: [{
	          date: '2016-05-02',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1518 弄'
	        }, {
	          date: '2016-05-04',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1517 弄'
	        }, {
	          date: '2016-05-01',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1519 弄'
	        }, {
	          date: '2016-05-03',
	          name: '王小虎',
	          address: '上海市普陀区金沙江路 1516 弄'
	        }],
	        currentRow: null
	      }
	    },
	
	    methods: {
	      setCurrent(row) {
	        this.$refs.singleTable.setCurrentRow(row);
	      },
	      handleCurrentChange(val) {
	        this.currentRow = val;
	      }
	    }
	  }
	</script>
	

snippet tabs.md_0
	
	"""html
	<template>
	  <el-tabs v-model="activeName" @tab-click="handleClick">
	    <el-tab-pane label="用户管理" name="first">用户管理</el-tab-pane>
	    <el-tab-pane label="配置管理" name="second">配置管理</el-tab-pane>
	    <el-tab-pane label="角色管理" name="third">角色管理</el-tab-pane>
	    <el-tab-pane label="定时任务补偿" name="fourth">定时任务补偿</el-tab-pane>
	  </el-tabs>
	</template>
	<script>
	  export default {
	    data() {
	      return {
	        activeName: 'second'
	      };
	    },
	    methods: {
	      handleClick(tab, event) {
	        console.log(tab, event);
	      }
	    }
	  };
	</script>
	

snippet tabs.md_1
	
	"""html
	<template>
	  <el-tabs v-model="activeName2" type="card" @tab-click="handleClick">
	    <el-tab-pane label="用户管理" name="first">用户管理</el-tab-pane>
	    <el-tab-pane label="配置管理" name="second">配置管理</el-tab-pane>
	    <el-tab-pane label="角色管理" name="third">角色管理</el-tab-pane>
	    <el-tab-pane label="定时任务补偿" name="fourth">定时任务补偿</el-tab-pane>
	  </el-tabs>
	</template>
	<script>
	  export default {
	    data() {
	      return {
	        activeName2: 'first'
	      };
	    },
	    methods: {
	      handleClick(tab, event) {
	        console.log(tab, event);
	      }
	    }
	  };
	</script>
	

snippet tabs.md_2
	:::demo 将"type"设置为"border-card"。
	"""html
	<el-tabs type="border-card">
	  <el-tab-pane label="用户管理">用户管理</el-tab-pane>
	  <el-tab-pane label="配置管理">配置管理</el-tab-pane>
	  <el-tab-pane label="角色管理">角色管理</el-tab-pane>
	  <el-tab-pane label="定时任务补偿">定时任务补偿</el-tab-pane>
	</el-tabs>
	

snippet tabs.md_3
	:::demo
	"""html
	<el-tabs type="border-card">
	  <el-tab-pane>
	    <span slot="label"><i class="el-icon-date"></i> 我的行程</span>
	    我的行程
	  </el-tab-pane>
	  <el-tab-pane label="消息中心">消息中心</el-tab-pane>
	  <el-tab-pane label="角色管理">角色管理</el-tab-pane>
	  <el-tab-pane label="定时任务补偿">定时任务补偿</el-tab-pane>
	</el-tabs>
	

snippet tabs.md_4
	:::demo
	"""html
	<el-tabs v-model="editableTabsValue" type="card" editable @edit="handleTabsEdit">
	  <el-tab-pane
	    :key="item.name"
	    v-for="(item, index) in editableTabs"
	    :label="item.title"
	    :name="item.name"
	  >
	    {{item.content}}
	  </el-tab-pane>
	</el-tabs>
	<script>
	  export default {
	    data() {
	      return {
	        editableTabsValue: '2',
	        editableTabs: [{
	          title: 'Tab 1',
	          name: '1',
	          content: 'Tab 1 content'
	        }, {
	          title: 'Tab 2',
	          name: '2',
	          content: 'Tab 2 content'
	        }],
	        tabIndex: 2
	      }
	    },
	    methods: {
	      handleTabsEdit(targetName, action) {
	        if (action === 'add') {
	          let newTabName = ++this.tabIndex + '';
	          this.editableTabs.push({
	            title: 'New Tab',
	            name: newTabName,
	            content: 'New Tab content'
	          });
	          this.editableTabsValue = newTabName;
	        }
	        if (action === 'remove') {
	          let tabs = this.editableTabs;
	          let activeName = this.editableTabsValue;
	          if (activeName === targetName) {
	            tabs.forEach((tab, index) => {
	              if (tab.name === targetName) {
	                let nextTab = tabs[index + 1] || tabs[index - 1];
	                if (nextTab) {
	                  activeName = nextTab.name;
	                }
	              }
	            });
	          }
	          
	          this.editableTabsValue = activeName;
	          this.editableTabs = tabs.filter(tab => tab.name !== targetName);
	        }
	      }
	    }
	  }
	</script>
	

snippet tabs.md_5
	:::demo
	"""html
	<div style="margin-bottom: 20px;">
	  <el-button
	    size="small"
	    @click="addTab(editableTabsValue2)"
	  >
	    add tab
	  </el-button>
	</div>
	<el-tabs v-model="editableTabsValue2" type="card" closable @tab-remove="removeTab">
	  <el-tab-pane
	    v-for="(item, index) in editableTabs2"
	    :key="item.name"
	    :label="item.title"
	    :name="item.name"
	  >
	    {{item.content}}
	  </el-tab-pane>
	</el-tabs>
	<script>
	  export default {
	    data() {
	      return {
	        editableTabsValue2: '2',
	        editableTabs2: [{
	          title: 'Tab 1',
	          name: '1',
	          content: 'Tab 1 content'
	        }, {
	          title: 'Tab 2',
	          name: '2',
	          content: 'Tab 2 content'
	        }],
	        tabIndex: 2
	      }
	    },
	    methods: {
	      addTab(targetName) {
	        let newTabName = ++this.tabIndex + '';
	        this.editableTabs2.push({
	          title: 'New Tab',
	          name: newTabName,
	          content: 'New Tab content'
	        });
	        this.editableTabsValue2 = newTabName;
	      },
	      removeTab(targetName) {
	        let tabs = this.editableTabs2;
	        let activeName = this.editableTabsValue2;
	        if (activeName === targetName) {
	          tabs.forEach((tab, index) => {
	            if (tab.name === targetName) {
	              let nextTab = tabs[index + 1] || tabs[index - 1];
	              if (nextTab) {
	                activeName = nextTab.name;
	              }
	            }
	          });
	        }
	        
	        this.editableTabsValue2 = activeName;
	        this.editableTabs2 = tabs.filter(tab => tab.name !== targetName);
	      }
	    }
	  }
	</script>
	

snippet tag.md_0
	
	"""html
	<el-tag>标签一</el-tag>
	<el-tag type="gray">标签二</el-tag>
	<el-tag type="primary">标签三</el-tag>
	<el-tag type="success">标签四</el-tag>
	<el-tag type="warning">标签五</el-tag>
	<el-tag type="danger">标签六</el-tag>
	

snippet tag.md_1
	
	"""html
	<el-tag
	  v-for="tag in tags"
	  :key="tag.name"
	  :closable="true"
	  :type="tag.type"
	>
	{{tag.name}}
	</el-tag>
	
	<script>
	  export default {
	    data() {
	      return {
	        tags: [
	          { name: '标签一', type: '' },
	          { name: '标签二', type: 'gray' },
	          { name: '标签三', type: 'primary' },
	          { name: '标签四', type: 'success' },
	          { name: '标签五', type: 'warning' },
	          { name: '标签六', type: 'danger' }
	        ]
	      };
	    }
	  }
	</script>
	

snippet tag.md_2
	:::demo
	"""html
	<el-tag
	  :key="tag"
	  v-for="tag in dynamicTags"
	  :closable="true"
	  :close-transition="false"
	  @close="handleClose(tag)"
	>
	{{tag}}
	</el-tag>
	<el-input
	  class="input-new-tag"
	  v-if="inputVisible"
	  v-model="inputValue"
	  ref="saveTagInput"
	  size="mini"
	  @keyup.enter.native="handleInputConfirm"
	  @blur="handleInputConfirm"
	>
	</el-input>
	<el-button v-else class="button-new-tag" size="small" @click="showInput">+ New Tag</el-button>
	<script>
	  export default {
	    data() {
	      return {
	        dynamicTags: ['标签一', '标签二', '标签三'],
	        inputVisible: false,
	        inputValue: ''
	      };
	    },
	    methods: {
	      handleClose(tag) {
	        this.dynamicTags.splice(this.dynamicTags.indexOf(tag), 1);
	      },
	
	      showInput() {
	        this.inputVisible = true;
	        this.$nextTick(_ => {
	          this.$refs.saveTagInput.$refs.input.focus();
	        });
	      },
	
	      handleInputConfirm() {
	        let inputValue = this.inputValue;
	        if (inputValue) {
	          this.dynamicTags.push(inputValue);
	        }
	        this.inputVisible = false;
	        this.inputValue = '';
	      }
	    }
	  }
	</script>
	

snippet time-picker.md_0
	:::demo 使用 el-time-select 标签，分别通过"star"、"end"和"step"指定可选的起始时间、结束时间和步长
	"""html
	<el-time-select
	  v-model="value1"
	  :picker-options="{
	    start: '08:30',
	    step: '00:15',
	    end: '18:30'
	  }"
	  placeholder="选择时间">
	</el-time-select>
	
	<script>
	  export default {
	    data() {
	      return {
	        value1: ''
	      };
	    }
	  }
	</script>
	

snippet time-picker.md_1
	:::demo 使用 el-time-picker 标签，通过"selectableRange"限制可选时间范围
	"""html
	<template>
	  <el-time-picker
	    v-model="value2"
	    :picker-options="{
	      selectableRange: '18:30:00 - 20:30:00'
	    }"
	    placeholder="任意时间点">
	  </el-time-picker>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        value2: new Date(2016, 9, 10, 18, 40)
	      };
	    }
	  }
	</script>
	

snippet time-picker.md_2
	:::demo
	"""html
	<template>
	  <el-time-select
	    placeholder="起始时间"
	    v-model="startTime"
	    :picker-options="{
	      start: '08:30',
	      step: '00:15',
	      end: '18:30'
	    }">
	  </el-time-select>
	  <el-time-select
	    placeholder="结束时间"
	    v-model="endTime"
	    :picker-options="{
	      start: '08:30',
	      step: '00:15',
	      end: '18:30',
	      minTime: startTime
	    }">
	  </el-time-select>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        startTime: '',
	        endTime: ''
	      };
	    }
	  }
	</script>
	

snippet time-picker.md_3
	:::demo 添加"is-range"属性即可选择时间范围
	"""html
	<template>
	  <el-time-picker
	    is-range
	    v-model="value3"
	    placeholder="选择时间范围">
	  </el-time-picker>
	</template>
	
	<script>
	  export default {
	    data() {
	      return {
	        value3: [new Date(2016, 9, 10, 8, 40), new Date(2016, 9, 10, 9, 40)]
	      };
	    }
	  }
	</script>
	

snippet tooltip.md_0
	
	"""html
	<div class="box">
	  <div class="top">
	    <el-tooltip class="item" effect="dark" content="Top Left 提示文字" placement="top-start">
	      <el-button>上左</el-button>
	    </el-tooltip>
	    <el-tooltip class="item" effect="dark" content="Top Center 提示文字" placement="top">
	      <el-button>上边</el-button>
	    </el-tooltip>
	    <el-tooltip class="item" effect="dark" content="Top Right 提示文字" placement="top-end">
	      <el-button>上右</el-button>
	    </el-tooltip>
	  </div>
	  <div class="left">
	    <el-tooltip class="item" effect="dark" content="Left Top 提示文字" placement="left-start">
	      <el-button>左上</el-button>
	    </el-tooltip>
	    <el-tooltip class="item" effect="dark" content="Left Center 提示文字" placement="left">
	      <el-button>左边</el-button>
	    </el-tooltip>
	    <el-tooltip class="item" effect="dark" content="Left Bottom 提示文字" placement="left-end">
	      <el-button>左下</el-button>
	    </el-tooltip>
	  </div>
	
	  <div class="right">
	    <el-tooltip class="item" effect="dark" content="Right Top 提示文字" placement="right-start">
	      <el-button>右上</el-button>
	    </el-tooltip>
	    <el-tooltip class="item" effect="dark" content="Right Center 提示文字" placement="right">
	      <el-button>右边</el-button>
	    </el-tooltip>
	    <el-tooltip class="item" effect="dark" content="Right Bottom 提示文字" placement="right-end">
	      <el-button>右下</el-button>
	    </el-tooltip>
	  </div>
	  <div class="bottom">
	    <el-tooltip class="item" effect="dark" content="Bottom Left 提示文字" placement="bottom-start">
	      <el-button>下左</el-button>
	    </el-tooltip>
	    <el-tooltip class="item" effect="dark" content="Bottom Center 提示文字" placement="bottom">
	      <el-button>下边</el-button>
	    </el-tooltip>
	    <el-tooltip class="item" effect="dark" content="Bottom Right 提示文字" placement="bottom-end">
	      <el-button>下右</el-button>
	    </el-tooltip>
	  </div>
	</div>
	
	<style>
	  .box {
	    width: 400px;
	
	    .top {
	      text-align: center;
	    }
	
	    .left {
	      float: left;
	      width: 60px;
	    }
	
	    .right {
	      float: right;
	      width: 60px;
	    }
	
	    .bottom {
	      clear: both;
	      text-align: center;
	    }
	
	    .item {
	      margin: 4px;
	    }
	
	    .left .el-tooltip__popper,
	    .right .el-tooltip__popper {
	      padding: 8px 10px;
	    }
	  }
	</style>
	

snippet tooltip.md_1
	:::demo 通过设置"effect"属性来改变主题，默认为"dark"。
	"""html
	<el-tooltip content="Top center" placement="top">
	  <el-button>Dark</el-button>
	</el-tooltip>
	<el-tooltip content="Bottom center" placement="bottom" effect="light">
	  <el-button>Light</el-button>
	</el-tooltip>
	

snippet tooltip.md_2
	:::demo 用具名 slot 分发"content"，替代"tooltip"中的"content"属性。
	"""html
	<el-tooltip placement="top">
	  <div slot="content">多行信息<br/>第二行信息</div>
	  <el-button>Top center</el-button>
	</el-tooltip>
	

snippet tooltip.md_3
	:::demo
	"""html
	<template>
	  <el-tooltip :disabled="disabled" content="点击关闭 tooltip 功能" placement="bottom" effect="light">
	    <el-button @click="disabled = !disabled">点击{{disabled ? '开启' : '关闭'}} tooltip 功能</el-button>
	  </el-tooltip>
	</template>
	

snippet transfer.md_0
	:::demo Transfer 的数据通过 "data" 属性传入。数据需要是一个对象数组，每个对象有以下属性："key" 为数据的唯一性标识，"label" 为显示文本，"disabled" 表示该项数据是否禁止转移。目标列表中的数据项会同步到绑定至 "v-model" 的变量，值为数据项的 "key" 所组成的数组。当然，如果希望在初始状态时目标列表不为空，可以像本例一样为 "v-model" 绑定的变量赋予一个初始值。
	"""html
	<template>
	  <el-transfer v-model="value1" :data="data"></el-transfer>
	</template>
	
	<script>
	  export default {
	    data() {
	      const generateData = _ => {
	        const data = [];
	        for (let i = 1; i <= 15; i++) {
	          data.push({
	            key: i,
	            label: "备选项 ${ i }",
	            disabled: i % 4 === 0
	          });
	        }
	        return data;
	      };
	      return {
	        data: generateData(),
	        value1: [1, 4]
	      };
	    }
	  };
	</script>
	

snippet transfer.md_1
	:::demo 设置 "filterable" 为 "true" 即可开启搜索模式。默认情况下，若数据项的 "label" 属性包含搜索关键字，则会在搜索结果中显示。你也可以使用 "filter-method" 定义自己的搜索逻辑。"filter-method" 接收一个方法，当搜索关键字变化时，会将当前的关键字和每个数据项传给该方法。若方法返回 "true"，则会在搜索结果中显示对应的数据项。
	"""html
	<template>
	  <el-transfer
	    filterable
	    :filter-method="filterMethod"
	    filter-placeholder="请输入城市拼音"
	    v-model="value2"
	    :data="data2">
	  </el-transfer>
	</template>
	
	<script>
	  export default {
	    data() {
	      const generateData2 = _ => {
	        const data = [];
	        const cities = ['上海', '北京', '广州', '深圳', '南京', '西安', '成都'];
	        const pinyin = ['shanghai', 'beijing', 'guangzhou', 'shenzhen', 'nanjing', 'xian', 'chengdu'];
	        cities.forEach((city, index) => {
	          data.push({
	            label: city,
	            key: index,
	            pinyin: pinyin[index]
	          });
	        });
	        return data;
	      };
	      return {
	        data2: generateData2(),
	        value2: [],
	        filterMethod(query, item) {
	          return item.pinyin.indexOf(query) > -1;
	        }
	      };
	    }
	  };
	</script>
	

snippet transfer.md_2
	:::demo 可以使用 "titles"、"button-texts"、"render-content" 和 "footer-format" 属性分别对列表标题文案、按钮文案、数据项的渲染函数和列表底部的勾选状态文案进行自定义。对于列表底部的内容区，提供了两个具名 slot："left-footer" 和 "right-footer"。此外，如果希望某些数据项在初始化时就被勾选，可以使用 "left-default-checked" 和 "right-default-checked" 属性。最后，本例还展示了 "change" 事件的用法。注意：由于 jsfiddle 不支持 JSX 语法，所以本例在 jsfiddle 中无法运行。但是在实际的项目中，只要正确地配置了相关依赖，就可以正常运行。
	"""html
	<template>
	  <el-transfer
	    v-model="value3"
	    filterable
	    :left-default-checked="[2, 3]"
	    :right-default-checked="[1]"
	    :render-content="renderFunc"
	    :titles="['Source', 'Target']"
	    :button-texts="['到左边', '到右边']"
	    :footer-format="{
	      noChecked: '${total}',
	      hasChecked: '${checked}/${total}'
	    }"
	    @change="handleChange"
	    :data="data">
	    <el-button class="transfer-footer" slot="left-footer" size="small">操作</el-button>
	    <el-button class="transfer-footer" slot="right-footer" size="small">操作</el-button>
	  </el-transfer>
	</template>
	
	<style>
	  .transfer-footer {
	    margin-left: 20px;
	    padding: 6px 5px;
	  }
	</style>
	
	<script>
	  export default {
	    data() {
	      const generateData = _ => {
	        const data = [];
	        for (let i = 1; i <= 15; i++) {
	          data.push({
	            key: i,
	            label: "备选项 ${ i }",
	            disabled: i % 4 === 0
	          });
	        }
	        return data;
	      };
	      return {
	        data: generateData(),
	        value3: [1],
	        renderFunc(h, option) {
	          return <span>{ option.key } - { option.label }</span>;
	        }
	      };
	    },
	
	    methods: {
	      handleChange(value, direction, movedKeys) {
	        console.log(value, direction, movedKeys);
	      }
	    }
	  };
	</script>
	

snippet transfer.md_3
	:::demo 本例中的数据源没有 "key" 和 "label" 字段，在功能上与它们相同的字段名为 "value" 和 "desc"。因此可以使用"props" 属性为 "key" 和 "label" 设置别名。
	"""html
	<template>
	  <el-transfer
	    v-model="value4"
	    :props="{
	      key: 'value',
	      label: 'desc'
	    }"
	    :data="data3">
	  </el-transfer>
	</template>
	
	<script>
	  export default {
	    data() {
	      const generateData3 = _ => {
	        const data = [];
	        for (let i = 1; i <= 15; i++) {
	          data.push({
	            value: i,
	            desc: "备选项 ${ i }",
	            disabled: i % 4 === 0
	          });
	        }
	        return data;
	      };
	      return {
	        data3: generateData3(),
	        value4: []
	      };
	    }
	  };
	</script>
	

snippet transition.md_0
	:::demo 提供 "el-fade-in-linear" 和 "el-fade-in" 两种效果。
	"""html
	<template>
	  <div>
	    <el-button @click="show = !show">Click Me</el-button>
	
	    <div style="display: flex; margin-top: 20px; height: 100px;">
	      <transition name="el-fade-in-linear">
	        <div v-show="show" class="transition-box">.el-fade-in-linear</div>
	      </transition>
	      <transition name="el-fade-in">
	        <div v-show="show" class="transition-box">.el-fade-in</div>
	      </transition>
	    </div>
	  </div>
	</template>
	
	<script>
	    export default {
	    data: () => ({
	      show: true
	    })
	  }
	</script>
	
	<style>
	  .transition-box {
	    margin-bottom: 10px;
	    width: 200px;
	    height: 100px;
	    border-radius: 4px;
	    background-color: #20A0FF;
	    text-align: center;
	    color: #fff;
	    padding: 40px 20px;
	    box-sizing: border-box;
	    margin-right: 20px;
	  }
	</style>
	

snippet transition.md_1
	:::demo 提供 "el-zoom-in-center"，"el-zoom-in-top" 和 "el-zoom-in-bottom" 三种效果。
	"""html
	<template>
	  <div>
	    <el-button @click="show2 = !show2">Click Me</el-button>
	
	    <div style="display: flex; margin-top: 20px; height: 100px;">
	      <transition name="el-zoom-in-center">
	        <div v-show="show2" class="transition-box">.el-zoom-in-center</div>
	      </transition>
	
	      <transition name="el-zoom-in-top">
	        <div v-show="show2" class="transition-box">.el-zoom-in-top</div>
	      </transition>
	
	      <transition name="el-zoom-in-bottom">
	        <div v-show="show2" class="transition-box">.el-zoom-in-bottom</div>
	      </transition>
	    </div>
	  </div>
	</template>
	
	<script>
	    export default {
	    data: () => ({
	      show2: true
	    })
	  }
	</script>
	
	<style>
	  .transition-box {
	    margin-bottom: 10px;
	    width: 200px;
	    height: 100px;
	    border-radius: 4px;
	    background-color: #20A0FF;
	    text-align: center;
	    color: #fff;
	    padding: 40px 20px;
	    box-sizing: border-box;
	    margin-right: 20px;
	  }
	</style>
	

snippet transition.md_2
	:::demo
	"""html
	<template>
	  <div>
	    <el-button @click="show3 = !show3">Click Me</el-button>
	
	    <div style="margin-top: 20px; height: 200px;">
	      <el-collapse-transition>
	        <div v-show="show3">
	          <div class="transition-box">el-collapse-transition</div>
	          <div class="transition-box">el-collapse-transition</div>
	        </div>
	      </el-collapse-transition>
	    </div>
	  </div>
	</template>
	
	<script>
	    export default {
	    data: () => ({
	      show3: true
	    })
	  }
	</script>
	
	<style>
	  .transition-box {
	    margin-bottom: 10px;
	    width: 200px;
	    height: 100px;
	    border-radius: 4px;
	    background-color: #20A0FF;
	    text-align: center;
	    color: #fff;
	    padding: 40px 20px;
	    box-sizing: border-box;
	    margin-right: 20px;
	  }
	</style>
	

snippet transition.md_3
	:::demo
	"""html
	<template>
	  <div>
	    <el-button @click="show3 = !show3">Click Me</el-button>
	
	    <div style="margin-top: 20px; height: 200px;">
	      <el-collapse-transition>
	        <div v-show="show3">
	          <div class="transition-box">el-collapse-transition</div>
	          <div class="transition-box">el-collapse-transition</div>
	        </div>
	      </el-collapse-transition>
	    </div>
	  </div>
	</template>
	
	<script>
	    export default {
	    data: () => ({
	      show3: true
	    })
	  }
	</script>
	
	<style>
	  .transition-box {
	    margin-bottom: 10px;
	    width: 200px;
	    height: 100px;
	    border-radius: 4px;
	    background-color: #20A0FF;
	    text-align: center;
	    color: #fff;
	    padding: 40px 20px;
	    box-sizing: border-box;
	    margin-right: 20px;
	  }
	</style>
	"""
	:::
	
	### 按需引入
	
	"""js
	// fade/zoom 等
	import 'element-ui/lib/theme-defaut/base.css';
	// collapse 展开折叠
	import CollapseTransition from 'element-ui/lib/transitions/collapse-transition';
	import Vue from 'vue'
	
	Vue.component(CollapseTransition.name, CollapseTransition)
	

snippet tree.md_0
	::: demo
	"""html
	<el-tree :data="data" :props="defaultProps" @node-click="handleNodeClick"></el-tree>
	
	<script>
	  export default {
	    data() {
	      return {
	        data: [{
	          label: '一级 1',
	          children: [{
	            label: '二级 1-1',
	            children: [{
	              label: '三级 1-1-1'
	            }]
	          }]
	        }, {
	          label: '一级 2',
	          children: [{
	            label: '二级 2-1',
	            children: [{
	              label: '三级 2-1-1'
	            }]
	          }, {
	            label: '二级 2-2',
	            children: [{
	              label: '三级 2-2-1'
	            }]
	          }]
	        }, {
	          label: '一级 3',
	          children: [{
	            label: '二级 3-1',
	            children: [{
	              label: '三级 3-1-1'
	            }]
	          }, {
	            label: '二级 3-2',
	            children: [{
	              label: '三级 3-2-1'
	            }]
	          }]
	        }],
	        defaultProps: {
	          children: 'children',
	          label: 'label'
	        }
	      };
	    },
	    methods: {
	      handleNodeClick(data) {
	        console.log(data);
	      }
	    }
	  };
	</script>
	

snippet tree.md_1
	::: demo
	"""html
	<el-tree
	  :data="regions"
	  :props="props"
	  :load="loadNode"
	  lazy
	  show-checkbox
	  @check-change="handleCheckChange">
	</el-tree>
	
	<script>
	  export default {
	    data() {
	      return {
	        regions: [{
	          'name': 'region1'
	        }, {
	          'name': 'region2'
	        }],
	        props: {
	          label: 'name',
	          children: 'zones'
	        },
	        count: 1
	      };
	    },
	    methods: {
	      handleCheckChange(data, checked, indeterminate) {
	        console.log(data, checked, indeterminate);
	      },
	      handleNodeClick(data) {
	        console.log(data);
	      },
	      loadNode(node, resolve) {
	        if (node.level === 0) {
	          return resolve([{ name: 'region1' }, { name: 'region2' }]);
	        }
	        if (node.level > 3) return resolve([]);
	
	        var hasChild;
	        if (node.data.name === 'region1') {
	          hasChild = true;
	        } else if (node.data.name === 'region2') {
	          hasChild = false;
	        } else {
	          hasChild = Math.random() > 0.5;
	        }
	
	        setTimeout(() => {
	          var data;
	          if (hasChild) {
	            data = [{
	              name: 'zone' + this.count++
	            }, {
	              name: 'zone' + this.count++
	            }];
	          } else {
	            data = [];
	          }
	
	          resolve(data);
	        }, 500);
	      }
	    }
	  };
	</script>
	

snippet tree.md_2
	::: demo 分别通过"default-expanded-keys"和"default-checked-keys"设置默认展开和默认选中的节点。需要注意的是，此时必须设置"node-key"，其值为节点数据中的一个字段名，该字段在整棵树中是唯一的。
	"""html
	<el-tree
	  :data="data2"
	  show-checkbox
	  node-key="id"
	  :default-expanded-keys="[2, 3]"
	  :default-checked-keys="[5]"
	  :props="defaultProps">
	</el-tree>
	
	<script>
	  export default {
	    data() {
	      return {
	        data2: [{
	          id: 1,
	          label: '一级 1',
	          children: [{
	            id: 4,
	            label: '二级 1-1',
	            children: [{
	              id: 9,
	              label: '三级 1-1-1'
	            }, {
	              id: 10,
	              label: '三级 1-1-2'
	            }]
	          }]
	        }, {
	          id: 2,
	          label: '一级 2',
	          children: [{
	            id: 5,
	            label: '二级 2-1'
	          }, {
	            id: 6,
	            label: '二级 2-2'
	          }]
	        }, {
	          id: 3,
	          label: '一级 3',
	          children: [{
	            id: 7,
	            label: '二级 3-1'
	          }, {
	            id: 8,
	            label: '二级 3-2'
	          }]
	        }],
	        defaultProps: {
	          children: 'children',
	          label: 'label'
	        }
	      };
	    }
	  };
	</script>
	

snippet tree.md_3
	::: demo 通过"disabled"设置禁用状态。
	"""html
	<el-tree
	  :data="data3"
	  show-checkbox
	  node-key="id"
	  :default-expanded-keys="[2, 3]"
	  :default-checked-keys="[5]">
	</el-tree>
	
	<script>
	  export default {
	    data() {
	      return {
	        data3: [{
	          id: 1,
	          label: '一级 2',
	          children: [{
	            id: 3,
	            label: '二级 2-1',
	            children: [{
	              id: 4,
	              label: '三级 3-1-1'
	            }, {
	              id: 5,
	              label: '三级 3-1-2',
	              disabled: true
	            }]
	          }, {
	            id: 2,
	            label: '二级 2-2',
	            disabled: true,
	            children: [{
	              id: 6,
	              label: '三级 3-2-1'
	            }, {
	              id: 7,
	              label: '三级 3-2-2',
	              disabled: true
	            }]
	          }]
	        }],
	        defaultProps: {
	          children: 'children',
	          label: 'label'
	        }
	      };
	    }
	  };
	</script>
	

snippet tree.md_4
	::: demo 本例展示如何获取和设置选中节点。获取和设置各有两种方式：通过 node 或通过 key。如果需要通过 key 来获取或设置，则必须设置"node-key"。
	"""html
	<el-tree
	  :data="data2"
	  show-checkbox
	  default-expand-all
	  node-key="id"
	  ref="tree"
	  highlight-current
	  :props="defaultProps">
	</el-tree>
	
	<div class="buttons">
	  <el-button @click="getCheckedNodes">通过 node 获取</el-button>
	  <el-button @click="getCheckedKeys">通过 key 获取</el-button>
	  <el-button @click="setCheckedNodes">通过 node 设置</el-button>
	  <el-button @click="setCheckedKeys">通过 key 设置</el-button>
	  <el-button @click="resetChecked">清空</el-button>
	</div>
	
	<script>
	  export default {
	    methods: {
	      getCheckedNodes() {
	        console.log(this.$refs.tree.getCheckedNodes());
	      },
	      getCheckedKeys() {
	        console.log(this.$refs.tree.getCheckedKeys());
	      },
	      setCheckedNodes() {
	        this.$refs.tree.setCheckedNodes([{
	          id: 5,
	          label: '二级 2-1'
	        }, {
	          id: 9,
	          label: '三级 1-1-1'
	        }]);
	      },
	      setCheckedKeys() {
	        this.$refs.tree.setCheckedKeys([3]);
	      },
	      resetChecked() {
	        this.$refs.tree.setCheckedKeys([]);
	      }
	    },
	
	    data() {
	      return {
	        data2: [{
	          id: 1,
	          label: '一级 1',
	          children: [{
	            id: 4,
	            label: '二级 1-1',
	            children: [{
	              id: 9,
	              label: '三级 1-1-1'
	            }, {
	              id: 10,
	              label: '三级 1-1-2'
	            }]
	          }]
	        }, {
	          id: 2,
	          label: '一级 2',
	          children: [{
	            id: 5,
	            label: '二级 2-1'
	          }, {
	            id: 6,
	            label: '二级 2-2'
	          }]
	        }, {
	          id: 3,
	          label: '一级 3',
	          children: [{
	            id: 7,
	            label: '二级 3-1'
	          }, {
	            id: 8,
	            label: '二级 3-2'
	          }]
	        }],
	        defaultProps: {
	          children: 'children',
	          label: 'label'
	        }
	      };
	    }
	  };
	</script>
	

snippet tree.md_5
	::: demo 使用"render-content"指定渲染函数，该函数返回需要的节点区内容即可。渲染函数的用法请参考 Vue 文档。注意：由于 jsfiddle 不支持 JSX 语法，所以本例在 jsfiddle 中无法运行。但是在实际的项目中，只要正确地配置了相关依赖，就可以正常运行。
	"""html
	<el-tree
	  :data="data2"
	  :props="defaultProps"
	  show-checkbox
	  node-key="id"
	  default-expand-all
	  :expand-on-click-node="false"
	  :render-content="renderContent">
	</el-tree>
	
	<script>
	  let id = 1000;
	
	  export default {
	    data() {
	      return {
	        data2: [{
	          id: 1,
	          label: '一级 1',
	          children: [{
	            id: 4,
	            label: '二级 1-1',
	            children: [{
	              id: 9,
	              label: '三级 1-1-1'
	            }, {
	              id: 10,
	              label: '三级 1-1-2'
	            }]
	          }]
	        }, {
	          id: 2,
	          label: '一级 2',
	          children: [{
	            id: 5,
	            label: '二级 2-1'
	          }, {
	            id: 6,
	            label: '二级 2-2'
	          }]
	        }, {
	          id: 3,
	          label: '一级 3',
	          children: [{
	            id: 7,
	            label: '二级 3-1'
	          }, {
	            id: 8,
	            label: '二级 3-2'
	          }]
	        }],
	        defaultProps: {
	          children: 'children',
	          label: 'label'
	        }
	      }
	    },
	
	    methods: {
	      append(store, data) {
	        store.append({ id: id++, label: 'testtest', children: [] }, data);
	      },
	
	      remove(store, data) {
	        store.remove(data);
	      },
	
	      renderContent(h, { node, data, store }) {
	        return (
	          <span>
	            <span>
	              <span>{node.label}</span>
	            </span>
	            <span style="float: right; margin-right: 20px">
	              <el-button size="mini" on-click={ () => this.append(store, data) }>Append</el-button>
	              <el-button size="mini" on-click={ () => this.remove(store, data) }>Delete</el-button>
	            </span>
	          </span>);
	      }
	    }
	  };
	</script>
	

snippet tree.md_6
	::: demo 在需要对节点进行过滤时，调用 Tree 实例的"filter"方法，参数为关键字。需要注意的是，此时需要设置"filter-node-method"，值为过滤函数。
	"""html
	<el-input
	  placeholder="输入关键字进行过滤"
	  v-model="filterText">
	</el-input>
	
	<el-tree
	  class="filter-tree"
	  :data="data2"
	  :props="defaultProps"
	  default-expand-all
	  :filter-node-method="filterNode"
	  ref="tree2">
	</el-tree>
	
	<script>
	  export default {
	    watch: {
	      filterText(val) {
	        this.$refs.tree2.filter(val);
	      }
	    },
	
	    methods: {
	      filterNode(value, data) {
	        if (!value) return true;
	        return data.label.indexOf(value) !== -1;
	      }
	    },
	
	    data() {
	      return {
	        filterText: '',
	        data2: [{
	          id: 1,
	          label: '一级 1',
	          children: [{
	            id: 4,
	            label: '二级 1-1',
	            children: [{
	              id: 9,
	              label: '三级 1-1-1'
	            }, {
	              id: 10,
	              label: '三级 1-1-2'
	            }]
	          }]
	        }, {
	          id: 2,
	          label: '一级 2',
	          children: [{
	            id: 5,
	            label: '二级 2-1'
	          }, {
	            id: 6,
	            label: '二级 2-2'
	          }]
	        }, {
	          id: 3,
	          label: '一级 3',
	          children: [{
	            id: 7,
	            label: '二级 3-1'
	          }, {
	            id: 8,
	            label: '二级 3-2'
	          }]
	        }],
	        defaultProps: {
	          children: 'children',
	          label: 'label'
	        }
	      };
	    }
	  };
	</script>
	

snippet tree.md_7
	::: demo
	"""html
	<el-tree
	  :data="data"
	  :props="defaultProps"
	  accordion
	  @node-click="handleNodeClick">
	</el-tree>
	
	<script>
	  export default {
	    data() {
	      return {
	        data: [{
	          label: '一级 1',
	          children: [{
	            label: '二级 1-1',
	            children: [{
	              label: '三级 1-1-1'
	            }]
	          }]
	        }, {
	          label: '一级 2',
	          children: [{
	            label: '二级 2-1',
	            children: [{
	              label: '三级 2-1-1'
	            }]
	          }, {
	            label: '二级 2-2',
	            children: [{
	              label: '三级 2-2-1'
	            }]
	          }]
	        }, {
	          label: '一级 3',
	          children: [{
	            label: '二级 3-1',
	            children: [{
	              label: '三级 3-1-1'
	            }]
	          }, {
	            label: '二级 3-2',
	            children: [{
	              label: '三级 3-2-1'
	            }]
	          }]
	        }],
	        defaultProps: {
	          children: 'children',
	          label: 'label'
	        }
	      };
	    },
	    methods: {
	      handleNodeClick(data) {
	        console.log(data);
	      }
	    }
	  };
	</script>
	

snippet typography.md_0
	
	"""css
	font-family: "Helvetica Neue",Helvetica,"PingFang SC","Hiragino Sans GB","Microsoft YaHei","微软雅黑",Arial,sans-serif;
	

snippet upload.md_0
	::: demo 通过 slot 你可以传入自定义的上传按钮类型和文字提示。
	"""html
	<el-upload
	  class="upload-demo"
	  action="https://jsonplaceholder.typicode.com/posts/"
	  :on-preview="handlePreview"
	  :on-remove="handleRemove"
	  :file-list="fileList">
	  <el-button size="small" type="primary">点击上传</el-button>
	  <div slot="tip" class="el-upload__tip">只能上传jpg/png文件，且不超过500kb</div>
	</el-upload>
	<script>
	  export default {
	    data() {
	      return {
	        fileList: [{name: 'food.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}, {name: 'food2.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}]
	      };
	    },
	    methods: {
	      handleRemove(file, fileList) {
	        console.log(file, fileList);
	      },
	      handlePreview(file) {
	        console.log(file);
	      }
	    }
	  }
	</script>
	

snippet upload.md_1
	::: demo
	"""html
	<el-upload
	  class="avatar-uploader"
	  action="https://jsonplaceholder.typicode.com/posts/"
	  :show-file-list="false"
	  :on-success="handleAvatarSuccess"
	  :before-upload="beforeAvatarUpload">
	  <img v-if="imageUrl" :src="imageUrl" class="avatar">
	  <i v-else class="el-icon-plus avatar-uploader-icon"></i>
	</el-upload>
	
	<style>
	  .avatar-uploader .el-upload {
	    border: 1px dashed #d9d9d9;
	    border-radius: 6px;
	    cursor: pointer;
	    position: relative;
	    overflow: hidden;
	  }
	  .avatar-uploader .el-upload:hover {
	    border-color: #20a0ff;
	  }
	  .avatar-uploader-icon {
	    font-size: 28px;
	    color: #8c939d;
	    width: 178px;
	    height: 178px;
	    line-height: 178px;
	    text-align: center;
	  }
	  .avatar {
	    width: 178px;
	    height: 178px;
	    display: block;
	  }
	</style>
	
	<script>
	  export default {
	    data() {
	      return {
	        imageUrl: ''
	      };
	    },
	    methods: {
	      handleAvatarSuccess(res, file) {
	        this.imageUrl = URL.createObjectURL(file.raw);
	      },
	      beforeAvatarUpload(file) {
	        const isJPG = file.type === 'image/jpeg';
	        const isLt2M = file.size / 1024 / 1024 < 2;
	
	        if (!isJPG) {
	          this.$message.error('上传头像图片只能是 JPG 格式!');
	        }
	        if (!isLt2M) {
	          this.$message.error('上传头像图片大小不能超过 2MB!');
	        }
	        return isJPG && isLt2M;
	      }
	    }
	  }
	</script>
	

snippet upload.md_2
	::: demo
	"""html
	<el-upload
	  action="https://jsonplaceholder.typicode.com/posts/"
	  list-type="picture-card"
	  :on-preview="handlePictureCardPreview"
	  :on-remove="handleRemove">
	  <i class="el-icon-plus"></i>
	</el-upload>
	<el-dialog v-model="dialogVisible" size="tiny">
	  <img width="100%" :src="dialogImageUrl" alt="">
	</el-dialog>
	<script>
	  export default {
	    data() {
	      return {
	        dialogImageUrl: '',
	        dialogVisible: false
	      };
	    },
	    methods: {
	      handleRemove(file, fileList) {
	        console.log(file, fileList);
	      },
	      handlePictureCardPreview(file) {
	        this.dialogImageUrl = file.url;
	        this.dialogVisible = true;
	      }
	    }
	  }
	</script>
	

snippet upload.md_3
	::: demo
	"""html
	<el-upload
	  class="upload-demo"
	  action="https://jsonplaceholder.typicode.com/posts/"
	  :on-preview="handlePreview"
	  :on-remove="handleRemove"
	  :file-list="fileList2"
	  list-type="picture">
	  <el-button size="small" type="primary">点击上传</el-button>
	  <div slot="tip" class="el-upload__tip">只能上传jpg/png文件，且不超过500kb</div>
	</el-upload>
	<script>
	  export default {
	    data() {
	      return {
	        fileList2: [{name: 'food.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}, {name: 'food2.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}]
	      };
	    },
	    methods: {
	      handleRemove(file, fileList) {
	        console.log(file, fileList);
	      },
	      handlePreview(file) {
	        console.log(file);
	      }
	    }
	  }
	</script>
	

snippet upload.md_4
	::: demo
	"""html
	<el-upload
	  class="upload-demo"
	  action="https://jsonplaceholder.typicode.com/posts/"
	  :on-change="handleChange"
	  :file-list="fileList3">
	  <el-button size="small" type="primary">点击上传</el-button>
	  <div slot="tip" class="el-upload__tip">只能上传jpg/png文件，且不超过500kb</div>
	</el-upload>
	<script>
	  export default {
	    data() {
	      return {
	        fileList3: [{
	          name: 'food.jpeg',
	          url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100',
	          status: 'finished'
	        }, {
	          name: 'food2.jpeg',
	          url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100',
	          status: 'finished'
	        }]
	      };
	    },
	    methods: {
	      handleChange(file, fileList) {
	        this.fileList3 = fileList.slice(-3);
	      }
	    }
	  }
	</script>
	

snippet upload.md_5
	::: demo
	"""html
	<el-upload
	  class="upload-demo"
	  drag
	  action="https://jsonplaceholder.typicode.com/posts/"
	  multiple>
	  <i class="el-icon-upload"></i>
	  <div class="el-upload__text">将文件拖到此处，或<em>点击上传</em></div>
	  <div class="el-upload__tip" slot="tip">只能上传jpg/png文件，且不超过500kb</div>
	</el-upload>
	

snippet upload.md_6
	::: demo
	"""html
	<el-upload
	  class="upload-demo"
	  ref="upload"
	  action="https://jsonplaceholder.typicode.com/posts/"
	  :on-preview="handlePreview"
	  :on-remove="handleRemove"
	  :file-list="fileList"
	  :auto-upload="false">
	  <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
	  <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload">上传到服务器</el-button>
	  <div slot="tip" class="el-upload__tip">只能上传jpg/png文件，且不超过500kb</div>
	</el-upload>
	<script>
	  export default {
	    data() {
	      return {
	        fileList: [{name: 'food.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}, {name: 'food2.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}]
	      };
	    },
	    methods: {
	      submitUpload() {
	        this.$refs.upload.submit();
	      },
	      handleRemove(file, fileList) {
	        console.log(file, fileList);
	      },
	      handlePreview(file) {
	        console.log(file);
	      }
	    }
	  }
	</script>
	

