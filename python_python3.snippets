snippet abc_abstractproperty.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/abc_abstractproperty.py
	# -*- coding: utf-8 -*-
	
	import abc
	
	
	class Base(object):
	    __metaclass__ = abc.ABCMeta
	
	    @abc.abstractproperty
	    def value(self):
	        return 'Should never get here'
	
	    @abc.abstractproperty
	    def constant(self):
	        return 'Should never get here'
	
	
	class Implementation(Base):
	    @property
	    def value(self):
	        return 'concrete property'
	
	    constant = 'set by a class attribute'
	
	
	try:
	    b = Base()
	    print('Base.value:', b.value)
	except Exception as e:
	    print('ERROR:', str(e))
	
	i = Implementation()
	print('Implementation.value   :', i.value)
	print('Implementation.constant:', i.constant)

snippet abc_abstractproperty_rw_deco.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/abc_abstractproperty_rw_deco.py
	# -*- coding: utf-8 -*-
	
	import abc
	
	
	class Base(object):
	    __metaclass__ = abc.ABCMeta
	
	    @abc.abstractproperty
	    def value(self):
	        return 'Should never see this'
	
	    @value.setter
	    def value(self, newvalue):
	        return
	
	
	class Implementation(Base):
	
	    _value = 'Default value'
	
	    @property
	    def value(self):
	        return self._value
	
	    @value.setter
	    def value(self, newvalue):
	        self._value = newvalue
	
	
	i = Implementation()
	print('Implementation.value:', i.value)
	
	i.value = 'New value'
	print('Changed value:', i.value)

snippet abc_abstractproperty_rw.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/abc_abstractproperty_rw.py
	# -*- coding: utf-8 -*-
	
	import abc
	
	
	class Base(object):
	    __metaclass__ = abc.ABCMeta
	
	    def value_getter(self):
	        return 'Should never see this'
	
	    def value_setter(self, newvalue):
	        return
	
	    value = abc.abstractproperty(value_getter, value_setter)
	
	
	class PartialImplementation(Base):
	    @abc.abstractproperty
	    def value(self):
	        return 'Read-only'
	
	
	class Implementation(Base):
	
	    _value = 'Default value'
	
	    def value_getter(self):
	        return self._value
	
	    def value_setter(self, newvalue):
	        self._value = newvalue
	
	    value = property(value_getter, value_setter)
	
	
	try:
	    b = Base()
	    print('Base.value:', b.value)
	except Exception as e:
	    print('ERROR:', str(e))
	
	try:
	    p = PartialImplementation()
	    print('PartialImplementation.value:', p.value)
	except Exception as e:
	    print('ERROR:', str(e))
	
	i = Implementation()
	print('Implementation.value:', i.value)
	
	i.value = 'New value'
	print('Changed value:', i.value)

snippet abc_base.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/abc_base.py
	# -*- coding: utf-8 -*-
	
	import abc
	
	
	class PluginBase(object):
	    __metaclass__ = abc.ABCMeta
	
	    @abc.abstractmethod
	    def load(self, input):
	        """Retrieve data from the input source
	        and return an object.
	        """
	
	    @abc.abstractmethod
	    def save(self, output, data):
	        """Save the data object to the output."""

snippet abc_concrete_method.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/abc_concrete_method.py
	# -*- coding: utf-8 -*-
	
	import abc
	from io import StringIO
	
	
	class ABCWithConcreteImplementation(metaclass=abc.ABCMeta):
	
	    @abc.abstractmethod
	    def retrieve_values(self, input):
	        print('base class reading data')
	        return input.read()
	
	
	class ConcreteOverride(ABCWithConcreteImplementation):
	
	    def retrieve_values(self, input):
	        base_data = super(ConcreteOverride,
	                          self).retrieve_values(input)
	        print('subclass sorting data')
	        response = sorted(base_data.splitlines())
	        return response
	
	
	input = StringIO("""line one
	line two
	line three
	""")
	
	reader = ConcreteOverride()
	print(reader.retrieve_values(input))
	print()

snippet abc_find_subclasses.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/abc_find_subclasses.py
	# -*- coding: utf-8 -*-
	
	import abc
	from abc_base import PluginBase
	import abc_subclass
	import abc_register
	
	for sc in PluginBase.__subclasses__():
	    print(sc.__name__)

snippet abc_incomplete.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/abc_incomplete.py
	# -*- coding: utf-8 -*-
	
	import abc
	from abc_base import PluginBase
	
	
	class IncompleteImplementation(PluginBase):
	
	    def save(self, output, data):
	        return output.write(data)
	
	
	PluginBase.register(IncompleteImplementation)
	
	if __name__ == '__main__':
	    print('Subclass:', issubclass(IncompleteImplementation,
	                                  PluginBase))
	    print('Instance:', isinstance(IncompleteImplementation(),
	                                  PluginBase))

snippet abc_register.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/abc_register.py
	# -*- coding: utf-8 -*-
	
	import abc
	from abc_base import PluginBase
	
	
	class LocalBaseClass(object):
	    pass
	
	
	class RegisteredImplementation(LocalBaseClass):
	
	    def load(self, input):
	        return input.read()
	
	    def save(self, output, data):
	        return output.write(data)
	
	
	PluginBase.register(RegisteredImplementation)
	
	
	if __name__ == '__main__':
	    print('Subclass:', issubclass(RegisteredImplementation,
	                                  PluginBase))
	    print('Instance:', isinstance(RegisteredImplementation(),
	                                  PluginBase))

snippet abc_subclass.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/abc_subclass.py
	# -*- coding: utf-8 -*-
	
	import abc
	from abc_base import PluginBase
	
	
	class SubclassImplementation(PluginBase):
	
	    def load(self, input):
	        return input.read()
	
	    def save(self, output, data):
	        return output.write(data)
	
	
	if __name__ == '__main__':
	    print('Subclass:', issubclass(SubclassImplementation, PluginBase))
	    print('Instance:', isinstance(SubclassImplementation(), PluginBase))

snippet anydbm_existing.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/anydbm_existing.py
	
	import dbm
	
	with dbm.open('example.db', 'r') as db:
	    print('keys():', db.keys())
	    for k, v in db.items():
	        print('iterating:', k, v)
	    print('db["hello"] =', db['hello'])

snippet anydbm_intkeys.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/anydbm_intkeys.py
	
	import dbm
	
	
	with dbm.open('example.db', 'w') as db:
	    try:
	        db[1] = 'one'
	    except TypeError as e:
	        print('%s: %s' % (e.__class__.__name__, e))

snippet anydbm_intvalue.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/anydbm_intvalue.py
	
	import dbm
	
	
	with dbm.open('example.db', 'c') as db:
	    try:
	        db['one'] = 1
	    except TypeError as e:
	        print('%s: %s' % (e.__class__.__name__, e))

snippet anydbm_new.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/anydbm_new.py
	
	import dbm
	
	
	# 打开模式有：'r', 'w', 'c', 'n'
	with dbm.open('example.db', 'c') as db:
	
	    db[b'hello'] = b'there'
	    db['www.python.org'] = 'Python Website'
	    db['www.cnn.com'] = 'Cable News Network'
	
	    assert db[b'hello'] == b'there'
	    assert db[b'www.python.org'] == b'Python Website'
	    assert db['www.cnn.com'] == b'Cable News Network'
	
	    print(db.get('python.org', b'not present'))
	
	    # key 和 value 必须都是字符串
	    db['www.yahoo.com'] = '123456'

snippet anydbm_whichdb.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/anydbm_whichdb.py
	
	import dbm
	
	print(dbm.whichdb('example.db'))

snippet argparse_action.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_action.py
	
	import argparse
	
	parser = argparse.ArgumentParser()
	
	parser.add_argument('-s', action='store',
	                    dest='simple_value',
	                    help='Store a simple value')
	
	parser.add_argument('-c', action='store_const',
	                    dest='constant_value',
	                    const='value-to-store',
	                    help='Store a constant value')
	
	parser.add_argument('-t', action='store_true',
	                    default=False,
	                    dest='boolean_switch',
	                    help='Set a switch to true')
	parser.add_argument('-f', action='store_false',
	                    default=False,
	                    dest='boolean_switch',
	                    help='Set a switch to false')
	
	parser.add_argument('-a', action='append',
	                    dest='collection',
	                    default=[],
	                    help='Add repeated values to a list')
	
	parser.add_argument('-A', action='append_const',
	                    dest='const_collection',
	                    const='value-1-to-append',
	                    default=[],
	                    help='Add different values to list')
	parser.add_argument('-B', action='append_const',
	                    dest='const_collection',
	                    const='value-2-to-append',
	                    help='Add different values to list')
	
	parser.add_argument('--version', action='version',
	                    version='%(prog)s 1.0')
	
	results = parser.parse_args()
	print('simple_value     = %r' % results.simple_value)
	print('constant_value   = %r' % results.constant_value)
	print('boolean_switch   = %r' % results.boolean_switch)
	print('collection       = %r' % results.collection)
	print('const_collection = %r' % results.const_collection)

snippet argparse_arguments.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_arguments.py
	
	import argparse
	
	parser = argparse.ArgumentParser(
	    description='Example with nonoptional arguments',
	)
	
	parser.add_argument('count', action="store", type=int)
	parser.add_argument('units', action="store")
	
	print(parser.parse_args(['1', '2']))

snippet argparse_choices.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_choices.py
	
	import argparse
	
	parser = argparse.ArgumentParser()
	
	parser.add_argument('--mode', choices=('read-only', 'read-write'))
	
	print(parser.parse_args(['--mode', 'read-only']))

snippet argparse_conflict_handler_resolve2.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_conflict_handler_resolve2.py
	
	import argparse
	
	parser = argparse.ArgumentParser(conflict_handler='resolve')
	
	parser.add_argument('-a', action="store")
	parser.add_argument('--long-b', '-b',
	                    action="store",
	                    help='Long and short together')
	parser.add_argument('-b', action="store", help='Short alone')
	
	print(parser.parse_args(['-h']))

snippet argparse_conflict_handler_resolve.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_conflict_handler_resolve.py
	
	import argparse
	
	parser = argparse.ArgumentParser(conflict_handler='resolve')
	
	parser.add_argument('-a', action="store")
	parser.add_argument('-b', action="store", help='Short alone')
	parser.add_argument('--long-b', '-b',
	                    action="store",
	                    help='Long and short together')
	
	print(parser.parse_args(['-h']))

snippet argparse_custom_action.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_custom_action.py
	
	import argparse
	
	
	class CustomAction(argparse.Action):
	
	    def __init__(self,
	                 option_strings,
	                 dest,
	                 nargs=None,
	                 const=None,
	                 default=None,
	                 type=None,
	                 choices=None,
	                 required=False,
	                 help=None,
	                 metavar=None):
	        argparse.Action.__init__(self,
	                                 option_strings=option_strings,
	                                 dest=dest,
	                                 nargs=nargs,
	                                 const=const,
	                                 default=default,
	                                 type=type,
	                                 choices=choices,
	                                 required=required,
	                                 help=help,
	                                 metavar=metavar,
	                                 )
	        print('Initializing CustomAction')
	        for name, value in sorted(locals().items()):
	            if name == 'self' or value is None:
	                continue
	            print('  %s = %r' % (name, value))
	        print()
	        return
	
	    def __call__(self, parser, namespace, values,
	                 option_string=None):
	        print('Processing CustomAction for "%s"' % self.dest)
	        print('  parser = %s' % id(parser))
	        print('  values = %r' % values)
	        print('  option_string = %r' % option_string)
	
	        # Do some arbitrary processing of the input values
	        if isinstance(values, list):
	            values = [v.upper() for v in values]
	        else:
	            values = values.upper()
	        # Save the results in the namespace using the destination
	        # variable given to our constructor.
	        setattr(namespace, self.dest, values)
	        print()
	
	
	parser = argparse.ArgumentParser()
	
	parser.add_argument('-a', action=CustomAction)
	parser.add_argument('-m', nargs='*', action=CustomAction)
	
	results = parser.parse_args(['-a', 'value',
	                             '-m', 'multivalue',
	                             'second'])
	print(results)

snippet argparse_default_grouping.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_default_grouping.py
	
	import argparse
	
	parser = argparse.ArgumentParser(description='Short sample app')
	
	parser.add_argument('--optional', action="store_true", default=False)
	parser.add_argument('positional', action="store")
	
	print(parser.parse_args(['hello']))

snippet argparse_FileType.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_FileType.py
	
	import argparse
	
	parser = argparse.ArgumentParser()
	
	parser.add_argument('-i', metavar='in-file',
	                    type=argparse.FileType('rt'))
	parser.add_argument('-o', metavar='out-file',
	                    type=argparse.FileType('wt'))
	
	try:
	    results = parser.parse_args()
	    print('Input file:', results.i)
	    print('Output file:', results.o)
	except IOError as msg:
	    parser.error(str(msg))

snippet argparse_fromfile_prefix_chars.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_fromfile_prefix_chars.py
	
	import argparse
	
	parser = argparse.ArgumentParser(description='Short sample app',
	                                 fromfile_prefix_chars='@',
	                                 )
	
	parser.add_argument('-a', action="store_true", default=False)
	parser.add_argument('-b', action="store", dest="b")
	parser.add_argument('-c', action="store", dest="c", type=int)
	
	print(parser.parse_args(['@argparse_fromfile_prefix_chars.txt']))

snippet argparse_long.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_long.py
	
	import argparse
	
	parser = argparse.ArgumentParser(
	    description='Example with long option names',
	)
	
	parser.add_argument('--noarg', action="store_true",
	                    default=False)
	parser.add_argument('--witharg', action="store",
	                    dest="witharg")
	parser.add_argument('--witharg2', action="store",
	                    dest="witharg2", type=int)
	
	print(parser.parse_args(
	    ['--noarg', '--witharg', 'val', '--witharg2=3']
	))

snippet argparse_mutually_exclusive.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_mutually_exclusive.py
	
	import argparse
	
	parser = argparse.ArgumentParser()
	
	group = parser.add_mutually_exclusive_group()
	group.add_argument('-a', action='store_true')
	group.add_argument('-b', action='store_true')
	
	print(parser.parse_args())

snippet argparse_nargs.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_nargs.py
	
	import argparse
	
	parser = argparse.ArgumentParser()
	
	parser.add_argument('--three', nargs=3)
	parser.add_argument('--optional', nargs='?')
	parser.add_argument('--all', nargs='*', dest='all')
	parser.add_argument('--one-or-more', nargs='+')
	
	print(parser.parse_args())

snippet argparse_parent_base.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_parent_base.py
	
	import argparse
	
	parser = argparse.ArgumentParser(add_help=False)
	
	parser.add_argument('--user', action="store")
	parser.add_argument('--password', action="store")

snippet argparse_parent_with_group.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_parent_with_group.py
	
	import argparse
	
	parser = argparse.ArgumentParser(add_help=False)
	
	group = parser.add_argument_group('authentication')
	
	group.add_argument('--user', action="store")
	group.add_argument('--password', action="store")

snippet argparse_prefix_chars.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_prefix_chars.py
	
	import argparse
	
	parser = argparse.ArgumentParser(
	    description='Change the option prefix characters',
	    prefix_chars='-+/',
	)
	
	parser.add_argument('-a', action="store_false",
	                    default=None,
	                    help='Turn A off',
	                    )
	parser.add_argument('+a', action="store_true",
	                    default=None,
	                    help='Turn A on',
	                    )
	parser.add_argument('//noarg', '++noarg',
	                    action="store_true",
	                    default=False)
	
	print(parser.parse_args())

snippet argparse_short.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_short.py
	
	import argparse
	
	parser = argparse.ArgumentParser(description='Short sample app')
	
	parser.add_argument('-a', action="store_true", default=False)
	parser.add_argument('-b', action="store", dest="b")
	parser.add_argument('-c', action="store", dest="c", type=int)
	
	print(parser.parse_args(['-a', '-bval', '-c', '3']))

snippet argparse_subparsers.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_subparsers.py
	
	import argparse
	
	parser = argparse.ArgumentParser()
	
	subparsers = parser.add_subparsers(help='commands')
	
	# A list command
	list_parser = subparsers.add_parser(
	    'list', help='List contents')
	list_parser.add_argument(
	    'dirname', action='store',
	    help='Directory to list')
	
	# A create command
	create_parser = subparsers.add_parser(
	    'create', help='Create a directory')
	create_parser.add_argument(
	    'dirname', action='store',
	    help='New directory to create')
	create_parser.add_argument(
	    '--read-only', default=False, action='store_true',
	    help='Set permissions to prevent writing to the directory',
	)
	
	# A delete command
	delete_parser = subparsers.add_parser(
	    'delete', help='Remove a directory')
	delete_parser.add_argument(
	    'dirname', action='store', help='The directory to remove')
	delete_parser.add_argument(
	    '--recursive', '-r', default=False, action='store_true',
	    help='Remove the contents of the directory, too',
	)
	
	print(parser.parse_args())

snippet argparse_type.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_type.py
	
	import argparse
	
	parser = argparse.ArgumentParser()
	
	parser.add_argument('-i', type=int)
	parser.add_argument('-f', type=float)
	parser.add_argument('--file', type=argparse.FileType('r'))
	
	try:
	    print(parser.parse_args())
	except IOError as msg:
	    parser.error(str(msg))

snippet argparse_uses_parent.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_uses_parent.py
	
	import argparse
	import argparse_parent_base
	
	parser = argparse.ArgumentParser(
	    parents=[argparse_parent_base.parser],
	)
	
	parser.add_argument('--local-arg',
	                    action="store_true",
	                    default=False)
	
	print(parser.parse_args())

snippet argparse_uses_parent_with_group.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_uses_parent_with_group.py
	
	import argparse
	import argparse_parent_with_group
	
	parser = argparse.ArgumentParser(
	    parents=[argparse_parent_with_group.parser],
	)
	
	parser.add_argument('--local-arg',
	                    action="store_true",
	                    default=False)
	
	print(parser.parse_args())

snippet argparse_with_help.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_with_help.py
	
	import argparse
	
	parser = argparse.ArgumentParser(add_help=True)
	
	parser.add_argument('-a', action="store_true", default=False)
	parser.add_argument('-b', action="store", dest="b")
	parser.add_argument('-c', action="store", dest="c", type=int)
	
	print(parser.parse_args(['-h']))

snippet argparse_without_help.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_without_help.py
	
	import argparse
	
	parser = argparse.ArgumentParser(add_help=False)
	
	parser.add_argument('-a', action="store_true", default=False)
	parser.add_argument('-b', action="store", dest="b")
	parser.add_argument('-c', action="store", dest="c", type=int)
	
	print(parser.parse_args())

snippet argparse_with_shlex.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_with_shlex.py
	
	import argparse
	import configparser
	import shlex
	
	parser = argparse.ArgumentParser(description='Short sample app')
	
	parser.add_argument('-a', action="store_true", default=False)
	parser.add_argument('-b', action="store", dest="b")
	parser.add_argument('-c', action="store", dest="c", type=int)
	
	config = configparser.ConfigParser()
	config.read('argparse_with_shlex.ini')
	config_value = config.get('cli', 'options')
	print('Config  :', config_value)
	
	argument_list = shlex.split(config_value)
	print('Arg List:', argument_list)
	
	print('Results :', parser.parse_args(argument_list))

snippet argparse_with_version.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/argparse_with_version.py
	
	import argparse
	
	parser = argparse.ArgumentParser(prog='PROG')
	
	parser.add_argument('-a', action="store_true", default=False)
	parser.add_argument('-b', action="store", dest="b")
	parser.add_argument('-c', action="store", dest="c", type=int)
	parser.add_argument('--version', action='version', version='%(prog)s 2.0')
	
	
	print(parser.parse_args(['--version']))
	
	print('This is not printed')

snippet array_byteswap.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/array_byteswap.py
	
	import array
	import binascii
	
	
	def to_hex(a):
	    chars_per_item = a.itemsize * 2  # 2 hex digits
	    hex_version = binascii.hexlify(a)
	    num_chunks = len(hex_version) // chars_per_item
	    for i in range(num_chunks):
	        start = i * chars_per_item
	        end = start + chars_per_item
	        yield hex_version[start:end]
	
	
	a1 = array.array('i', range(5))
	a2 = array.array('i', range(5))
	a2.byteswap()
	
	fmt = '%10s %10s %10s %10s'
	print(fmt % ('A1 hex', 'A1', 'A2 hex', 'A2'))
	print(fmt % (('-' * 10,) * 4))
	for values in zip(to_hex(a1), a1, to_hex(a2), a2):
	    print(fmt % values)

snippet array_file.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/array_file.py
	
	import array
	import binascii
	import tempfile
	
	a = array.array('i', range(5))
	print('A1:', a)
	
	# Write the array of numbers to a temporary file
	with tempfile.NamedTemporaryFile() as output:
	    a.tofile(output.file)  # must pass an *actual* file
	    output.flush()
	    print(output.name)
	
	    output.seek(0)
	    raw_data = output.read()
	    print('Raw Contents:', binascii.hexlify(raw_data))
	
	    # Read the data into an array
	    output.seek(0)
	    a2 = array.array('i')
	    a2.fromfile(output, len(a))
	    print('A2:', a2)

snippet array_sequence.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/array_sequence.py
	
	import array
	
	a = array.array('i', range(3))
	print('Initial :', a)
	
	a.extend(range(3))
	print('Extended:', a)
	
	print('Slice   :', a[2:5])
	
	print('Iterator:')
	print(list(enumerate(a)))

snippet array_string.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/array_string.py
	
	import array
	import binascii
	
	s = 'This is the array.'
	a = array.array('u', s)
	
	print('As string:', s)
	print('As array :', a)
	print('As hex   :', binascii.hexlify(a))

snippet asynchat_echo_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/asynchat_echo_client.py
	
	import asynchat
	import logging
	import socket
	
	
	class EchoClient(asynchat.async_chat):
	    """Sends messages to the server and receives responses.
	    """
	
	    # Artificially reduce buffer sizes to show
	    # sending and receiving partial messages.
	    ac_in_buffer_size = 128
	    ac_out_buffer_size = 128
	
	    def __init__(self, host, port, message):
	        self.message = message
	        self.received_data = []
	        self.logger = logging.getLogger('EchoClient')
	        asynchat.async_chat.__init__(self)
	        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
	        self.logger.debug('connecting to %s', (host, port))
	        self.connect((host, port))
	
	    def handle_connect(self):
	        self.logger.debug('handle_connect()')
	        # Send the command
	        self.push(b'ECHO %d\n' % len(self.message))
	        # Send the data
	        self.push_with_producer(
	            EchoProducer(self.message,
	                         buffer_size=self.ac_out_buffer_size)
	        )
	        # We expect the data to come back as-is,
	        # so set a length-based terminator
	        self.set_terminator(len(self.message))
	
	    def collect_incoming_data(self, data):
	        """Read an incoming message from the client
	        and add it to the outgoing queue.
	        """
	        self.logger.debug(
	            'collect_incoming_data() -> (%d) %r',
	            len(data), data)
	        self.received_data.append(data)
	
	    def found_terminator(self):
	        self.logger.debug('found_terminator()')
	        received_message = b''.join(self.received_data)
	        if received_message == self.message:
	            self.logger.debug('RECEIVED COPY OF MESSAGE')
	        else:
	            self.logger.debug('ERROR IN TRANSMISSION')
	            self.logger.debug('EXPECTED %r', self.message)
	            self.logger.debug('RECEIVED %r', received_message)
	
	
	class EchoProducer(asynchat.simple_producer):
	
	    logger = logging.getLogger('EchoProducer')
	
	    def more(self):
	        response = asynchat.simple_producer.more(self)
	        self.logger.debug('more() -> (%s bytes) %r',
	                          len(response), response)
	        return response

snippet asynchat_echo_handler.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/asynchat_echo_handler.py
	
	import asynchat
	import logging
	
	
	class EchoHandler(asynchat.async_chat):
	    """Handles echoing messages from a single client.
	    """
	
	    # Artificially reduce buffer sizes to illustrate
	    # sending and receiving partial messages.
	    ac_in_buffer_size = 128
	    ac_out_buffer_size = 128
	
	    def __init__(self, sock):
	        self.received_data = []
	        self.logger = logging.getLogger('EchoHandler')
	        asynchat.async_chat.__init__(self, sock)
	        # Start looking for the ECHO command
	        self.process_data = self._process_command
	        self.set_terminator(b'\n')
	
	    def collect_incoming_data(self, data):
	        """Read an incoming message from the client
	        and put it into the outgoing queue.
	        """
	        self.logger.debug(
	            'collect_incoming_data() -> (%d bytes) %r',
	            len(data), data)
	        self.received_data.append(data)
	
	    def found_terminator(self):
	        """The end of a command or message has been seen."""
	        self.logger.debug('found_terminator()')
	        self.process_data()
	
	    def _process_command(self):
	        """Have the full ECHO command"""
	        command = b''.join(self.received_data)
	        self.logger.debug('_process_command() %r', command)
	        command_verb, command_arg = command.strip().split(b' ')
	        expected_data_len = int(command_arg)
	        self.set_terminator(expected_data_len)
	        self.process_data = self._process_message
	        self.received_data = []
	
	    def _process_message(self):
	        """Have read the entire message."""
	        to_echo = b''.join(self.received_data)
	        self.logger.debug('_process_message() echoing %r',
	                          to_echo)
	        self.push(to_echo)
	        # Disconnect after sending the entire response
	        # since we only want to do one thing at a time
	        self.close_when_done()

snippet asynchat_echo_main.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/asynchat_echo_main.py
	
	import asyncore
	import logging
	
	from asynchat_echo_server import EchoServer
	from asynchat_echo_client import EchoClient
	
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='%(name)-11s: %(message)s',
	                    )
	
	address = ('localhost', 0)  # let the kernel give us a port
	server = EchoServer(address)
	ip, port = server.address  # find out what port we were given
	
	message_data = open('lorem.txt', 'rb').read()
	client = EchoClient(ip, port, message=message_data)
	
	asyncore.loop()

snippet asynchat_echo_server.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/asynchat_echo_server.py
	
	import asyncore
	import socket
	
	from asynchat_echo_handler import EchoHandler
	
	
	class EchoServer(asyncore.dispatcher):
	    """Receives connections and establishes handlers for each client.
	    """
	
	    def __init__(self, address):
	        asyncore.dispatcher.__init__(self)
	        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
	        self.bind(address)
	        self.address = self.socket.getsockname()
	        self.listen(1)
	
	    def handle_accept(self):
	        # Called when a client connects to our socket
	        client_info = self.accept()
	        EchoHandler(sock=client_info[0])
	        # Only deal with one client at a time,
	        # so close as soon as the handler is set up.
	        # Under normal conditions, the server
	        # would run forever or until it received
	        # instructions to stop.
	        self.handle_close()
	
	    def handle_close(self):
	        self.close()

snippet asyncore_echo_server.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/asyncore_echo_server.py
	
	import asyncore
	import logging
	
	
	class EchoServer(asyncore.dispatcher):
	    """Receives connections and establishes handlers for each client.
	    """
	
	    def __init__(self, address):
	        self.logger = logging.getLogger('EchoServer')
	        asyncore.dispatcher.__init__(self)
	        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
	        self.bind(address)
	        self.address = self.socket.getsockname()
	        self.logger.debug('binding to %s', self.address)
	        self.listen(1)
	
	    def handle_accept(self):
	        # Called when a client connects to the socket
	        client_info = self.accept()
	        self.logger.debug('handle_accept() -> %s', client_info[1])
	        EchoHandler(sock=client_info[0])
	        # Only deal with one client at a time,
	        # so close as soon as the handler is set up.
	        # Under normal conditions, the server
	        # would run forever or until it received
	        # instructions to stop.
	        self.handle_close()
	
	    def handle_close(self):
	        self.logger.debug('handle_close()')
	        self.close()
	
	
	class EchoHandler(asyncore.dispatcher):
	    """Handles echoing messages from a single client.
	    """
	
	    def __init__(self, sock, chunk_size=256):
	        self.chunk_size = chunk_size
	        logger_name = 'EchoHandler'
	        self.logger = logging.getLogger(logger_name)
	        asyncore.dispatcher.__init__(self, sock=sock)
	        self.data_to_write = []
	
	    def writable(self):
	        """Write if data has been received."""
	        response = bool(self.data_to_write)
	        self.logger.debug('writable() -> %s', response)
	        return response
	
	    def handle_write(self):
	        """Write as much as possible of the
	        most recent message received.
	        """
	        data = self.data_to_write.pop()
	        sent = self.send(data[:self.chunk_size])
	        if sent < len(data):
	            remaining = data[sent:]
	            self.data.to_write.append(remaining)
	        self.logger.debug('handle_write() -> (%d) %r',
	                          sent, data[:sent])
	        if not self.writable():
	            self.handle_close()
	
	    def handle_read(self):
	        """Read an incoming message from the client
	        and put it into the outgoing queue.
	        """
	        data = self.recv(self.chunk_size)
	        self.logger.debug('handle_read() -> (%d) %r',
	                          len(data), data)
	        self.data_to_write.insert(0, data)
	
	    def handle_close(self):
	        self.logger.debug('handle_close()')
	        self.close()
	
	
	class EchoClient(asyncore.dispatcher):
	    """Sends messages to the server and receives responses.
	    """
	
	    def __init__(self, host, port, message, chunk_size=128):
	        self.message = message
	        self.to_send = message
	        self.received_data = []
	        self.chunk_size = chunk_size
	        self.logger = logging.getLogger('EchoClient')
	        asyncore.dispatcher.__init__(self)
	        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
	        self.logger.debug('connecting to %s', (host, port))
	        self.connect((host, port))
	
	    def handle_connect(self):
	        self.logger.debug('handle_connect()')
	
	    def handle_close(self):
	        self.logger.debug('handle_close()')
	        self.close()
	        received_message = b''.join(self.received_data)
	        if received_message == self.message:
	            self.logger.debug('RECEIVED COPY OF MESSAGE')
	        else:
	            self.logger.debug('ERROR IN TRANSMISSION')
	            self.logger.debug('EXPECTED "%s"', self.message)
	            self.logger.debug('RECEIVED "%s"', received_message)
	
	    def writable(self):
	        self.logger.debug('writable() -> %s', bool(self.to_send))
	        return bool(self.to_send)
	
	    def readable(self):
	        self.logger.debug('readable() -> True')
	        return True
	
	    def handle_write(self):
	        sent = self.send(self.to_send[:self.chunk_size])
	        self.logger.debug('handle_write() -> (%d) %r',
	                          sent, self.to_send[:sent])
	        self.to_send = self.to_send[sent:]
	
	    def handle_read(self):
	        data = self.recv(self.chunk_size)
	        self.logger.debug('handle_read() -> (%d) %r',
	                          len(data), data)
	        self.received_data.append(data)
	
	
	if __name__ == '__main__':
	    import socket
	
	    logging.basicConfig(level=logging.DEBUG,
	                        format='%(name)-11s: %(message)s',
	                        )
	
	    address = ('localhost', 0)  # let the kernel assign a port
	    server = EchoServer(address)
	    ip, port = server.address  # find out which port was assigned
	
	    message = open('lorem.txt', 'rb').read()
	    logging.info('Total message length: %d bytes', len(message))
	
	    client = EchoClient(ip, port, message=message)
	
	    asyncore.loop()

snippet asyncore_file_dispatcher.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/asyncore_file_dispatcher.py
	
	import asyncore
	
	
	class FileReader(asyncore.file_dispatcher):
	
	    def writable(self):
	        return False
	
	    def handle_read(self):
	        data = self.recv(64)
	        print('READ: (%d)\n%r' % (len(data), data))
	
	    def handle_expt(self):
	        # Ignore events that look like out of band data
	        pass
	
	    def handle_close(self):
	        self.close()
	
	
	reader = FileReader(open('lorem.txt', 'rb'))
	asyncore.loop()

snippet asyncore_http_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/asyncore_http_client.py
	
	import asyncore
	import logging
	import socket
	from io import StringIO
	import urllib.parse as urlparse
	
	
	class HttpClient(asyncore.dispatcher):
	
	    def __init__(self, url):
	        self.url = url
	        self.logger = logging.getLogger(self.url)
	        self.parsed_url = urlparse.urlparse(url)
	        asyncore.dispatcher.__init__(self)
	        self.write_buffer = bytes('GET %s HTTP/1.0\r\n\r\n' % self.url, 'ascii')
	        self.read_buffer = StringIO()
	        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
	        address = (self.parsed_url.netloc, 80)
	        self.logger.debug('connecting to %s', address)
	        self.connect(address)
	
	    def handle_connect(self):
	        self.logger.debug('handle_connect()')
	
	    def handle_close(self):
	        self.logger.debug('handle_close()')
	        self.close()
	
	    def writable(self):
	        is_writable = (len(self.write_buffer) > 0)
	        if is_writable:
	            self.logger.debug('writable() -> %s', is_writable)
	        return is_writable
	
	    def readable(self):
	        self.logger.debug('readable() -> True')
	        return True
	
	    def handle_write(self):
	        sent = self.send(self.write_buffer)
	        self.logger.debug('handle_write() -> "%s"',
	                          self.write_buffer[:sent])
	        self.write_buffer = self.write_buffer[sent:]
	
	    def handle_read(self):
	        data = self.recv(8192)
	        self.logger.debug('handle_read() -> %d bytes', len(data))
	        self.read_buffer.write(data.decode())
	
	
	if __name__ == '__main__':
	    logging.basicConfig(level=logging.DEBUG,
	                        format='%(name)s: %(message)s',
	                        )
	
	    clients = [
	        HttpClient('http://www.doughellmann.com/'),
	        HttpClient('http://www.doughellmann.com/PyMOTW/about/'),
	    ]
	
	    logging.debug('LOOP STARTING')
	
	    asyncore.loop()
	
	    logging.debug('LOOP DONE')
	
	    for c in clients:
	        response_body = c.read_buffer.getvalue()
	        print(c.url, 'got', len(response_body), 'bytes')

snippet asyncore_loop.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/asyncore_loop.py
	
	import asyncore
	import logging
	
	from asyncore_http_client import HttpClient
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='%(name)s: %(message)s',
	                    )
	
	clients = [
	    HttpClient('http://www.doughellmann.com/'),
	]
	
	loop_counter = 0
	while asyncore.socket_map:
	    loop_counter += 1
	    logging.debug('loop_counter=%s', loop_counter)
	    asyncore.loop(timeout=1, count=1)

snippet atexit_exception.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/atexit_exception.py
	import atexit
	
	
	def exit_with_exception(message):
	    raise RuntimeError(message)
	
	
	atexit.register(exit_with_exception, 'Registered first')
	atexit.register(exit_with_exception, 'Registered second')

snippet atexit_keyboardinterrupt.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/atexit_keyboardinterrupt.py
	import atexit
	import sys
	
	
	def is_called():
	    print('The atexit handlers are still called')
	
	
	atexit.register(is_called)
	
	sys.stdout.write('Press Ctrl-C now')
	sys.stdout.flush()
	
	ignored = sys.stdin.readline()

snippet atexit_multiple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/atexit_multiple.py
	import atexit
	
	
	def my_cleanup(name):
	    print('my_cleanup(%s)' % name)
	
	
	atexit.register(my_cleanup, 'first')
	atexit.register(my_cleanup, 'second')
	atexit.register(my_cleanup, 'third')

snippet atexit_os_exit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/atexit_os_exit.py
	import atexit
	import os
	
	
	def not_called():
	    print('This should not be called')
	
	
	print('Registering')
	atexit.register(not_called)
	print('Registered')
	
	print('Exiting...')
	os._exit(0)

snippet atexit_signal_child.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/atexit_signal_child.py
	
	"""Child process in signal example.
	
	"""
	
	__module_id__ = "$Id$"
	
	import atexit
	import time
	import sys
	
	def not_called():
	    print 'CHILD: atexit handler should not have been called'
	
	print 'CHILD: Registering atexit handler'
	sys.stdout.flush()
	atexit.register(not_called)
	
	print 'CHILD: Pausing to wait for signal'
	sys.stdout.flush()
	time.sleep(5)

snippet atexit_signal_parent.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/atexit_signal_parent.py
	
	"""Send a signal to a child process, killing it, to illustrate that
	the atexit handlers are not called.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	import signal
	import subprocess
	import time
	
	proc = subprocess.Popen('atexit_signal_child.py')
	print 'PARENT: Pausing before sending signal...'
	time.sleep(1)
	print 'PARENT: Signaling child'
	os.kill(proc.pid, signal.SIGTERM) 
snippet atexit_simple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/atexit_simple.py
	
	"""Simple atexit example.
	
	"""
	
	__module_id__ = "$Id$"
	
	import atexit
	
	def all_done():
	    print 'all_done()'
	
	print 'Registering'
	atexit.register(all_done)
	print 'Registered'

snippet atexit_sys_exit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/atexit_sys_exit.py
	
	"""
	
	"""
	
	__module_id__ = "$Id$"
	
	import atexit
	import sys
	
	def all_done():
	    print 'all_done()'
	
	print 'Registering'
	atexit.register(all_done)
	print 'Registered'
	
	print 'Exiting...'
	sys.exit()

snippet base64_b64decode.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/base64_b64decode.py
	# -*- coding: utf-8 -*-
	
	import base64
	
	original_string = b'This is the data, in the clear.'
	print('Original:', original_string)
	
	# 编码
	encoded_string = base64.b64encode(original_string)
	print('Encoded :', encoded_string)
	
	# 解码
	decoded_string = base64.b64decode(encoded_string)
	print('Decoded :', decoded_string)

snippet base64_b64encode.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/base64_b64encode.py
	# -*- coding: utf-8 -*-
	
	import base64
	
	# Load this source file and strip the header.
	with open(__file__, 'rt') as input:
	    raw = input.readline()
	    initial_data = raw.encode('ascii')
	
	encoded_data = base64.b64encode(initial_data)
	
	num_initial = len(initial_data)
	
	# There will never be more than 2 padding bytes.
	padding = 3 - (num_initial % 3)
	
	print('%d bytes before encoding' % num_initial)
	print('Expect %d padding bytes' % padding)
	print('%d bytes after encoding' % len(encoded_data))
	print()
	print(encoded_data)
	print(initial_data)

snippet base64_base16.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/base64_base16.py
	# -*- coding: utf-8 -*-
	
	import base64
	
	original_string = b'This is the data, in the clear.'
	print('Original:', original_string)
	
	encoded_string = base64.b16encode(original_string)
	print('Encoded :', encoded_string)
	
	decoded_string = base64.b16decode(encoded_string)
	print('Decoded :', decoded_string)

snippet base64_base32.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/base64_base32.py
	# -*- coding: utf-8 -*-
	
	import base64
	
	original_string = b'This is the data, in the clear.'
	print('Original:', original_string)
	
	encoded_string = base64.b32encode(original_string)
	print('Encoded :', encoded_string)
	
	decoded_string = base64.b32decode(encoded_string)
	print('Decoded :', decoded_string)

snippet base64_urlsafe.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/base64_urlsafe.py
	# -*- coding: utf-8 -*-
	
	import base64
	
	encodes_with_pluses = chr(251) + chr(239)
	encodes_with_slashes = chr(255) * 2
	
	for original in [encodes_with_pluses, encodes_with_slashes]:
	    print('Original         :', repr(original))
	    print('Standard encoding:', base64.standard_b64encode(
	        original.encode('utf-8')))
	    print('URL-safe encoding:', base64.urlsafe_b64encode(
	        original.encode('utf-8')))
	    print()
	
	print(base64.urlsafe_b64decode(b'lmptnpxsZg=='))

snippet BaseHTTPServer_errors.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/BaseHTTPServer_errors.py
	
	"""GET handler with BaseHTTPServer illustrating error handling
	
	"""
	
	__version__ = "$Id$"
	
	from BaseHTTPServer import BaseHTTPRequestHandler
	
	class ErrorHandler(BaseHTTPRequestHandler):
	    
	    def do_GET(self):
	        self.send_error(404)
	        return
	
	if __name__ == '__main__':
	    from BaseHTTPServer import HTTPServer
	    server = HTTPServer(('localhost', 8080), ErrorHandler)
	    print 'Starting server, use <Ctrl-C> to stop'
	    server.serve_forever()
	

snippet BaseHTTPServer_GET.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/BaseHTTPServer_GET.py
	# -*- coding: utf-8 -*-
	
	from http.server import BaseHTTPRequestHandler
	import urllib.parse as urlparse
	
	
	class GetHandler(BaseHTTPRequestHandler):
	
	    def do_GET(self):
	        parsed_path = urlparse.urlparse(self.path)
	        message_parts = [
	            'CLIENT VALUES:',
	            'client_address=%s (%s)' % (self.client_address,
	                                        self.address_string()),
	            'command=%s' % self.command,
	            'path=%s' % self.path,
	            'real path=%s' % parsed_path.path,
	            'query=%s' % parsed_path.query,
	            'request_version=%s' % self.request_version,
	            '',
	            'SERVER VALUES:',
	            'server_version=%s' % self.server_version,
	            'sys_version=%s' % self.sys_version,
	            'protocol_version=%s' % self.protocol_version,
	            '',
	            'HEADERS RECEIVED:',
	        ]
	        for name, value in sorted(self.headers.items()):
	            message_parts.append('%s=%s' % (name, value.rstrip()))
	        message_parts.append('')
	        message = '\r\n'.join(message_parts)
	        self.send_response(200)
	        self.end_headers()
	        self.wfile.write(bytes(message))
	
	
	if __name__ == '__main__':
	    from http.server import HTTPServer
	    server = HTTPServer(('localhost', 8080), GetHandler)
	    print('Starting server, use <Ctrl-C> to stop')
	    server.serve_forever()

snippet BaseHTTPServer_POST.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/BaseHTTPServer_POST.py
	#!/usr/bin/env python
	"""Simple POST handler with BaseHTTPServer
	"""
	#end_pymotw_header
	
	from BaseHTTPServer import BaseHTTPRequestHandler
	import cgi
	
	class PostHandler(BaseHTTPRequestHandler):
	    
	    def do_POST(self):
	        # Parse the form data posted
	        form = cgi.FieldStorage(
	            fp=self.rfile, 
	            headers=self.headers,
	            environ={'REQUEST_METHOD':'POST',
	                     'CONTENT_TYPE':self.headers['Content-Type'],
	                     })
	
	        # Begin the response
	        self.send_response(200)
	        self.end_headers()
	        self.wfile.write('Client: %s\n' % str(self.client_address))
	        self.wfile.write('User-agent: %s\n' %
	                         str(self.headers['user-agent']))
	        self.wfile.write('Path: %s\n' % self.path)
	        self.wfile.write('Form data:\n')
	
	        # Echo back information about what was posted in the form
	        for field in form.keys():
	            field_item = form[field]
	            if field_item.filename:
	                # The field contains an uploaded file
	                file_data = field_item.file.read()
	                file_len = len(file_data)
	                del file_data
	                self.wfile.write(
	                    '\tUploaded %s as "%s" (%d bytes)\n' % \
	                        (field, field_item.filename, file_len))
	            else:
	                # Regular form value
	                self.wfile.write('\t%s=%s\n' %
	                                 (field, form[field].value))
	        return
	
	if __name__ == '__main__':
	    from BaseHTTPServer import HTTPServer
	    server = HTTPServer(('localhost', 8080), PostHandler)
	    print 'Starting server, use <Ctrl-C> to stop'
	    server.serve_forever()
	

snippet BaseHTTPServer_send_header.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/BaseHTTPServer_send_header.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Simple GET handler with BaseHTTPServer
	"""
	
	#end_pymotw_header
	
	from BaseHTTPServer import BaseHTTPRequestHandler
	import urlparse
	import time
	
	class GetHandler(BaseHTTPRequestHandler):
	    
	    def do_GET(self):
	        self.send_response(200)
	        self.send_header('Last-Modified',
	                         self.date_time_string(time.time()))
	        self.end_headers()
	        self.wfile.write('Response body\n')
	        return
	
	if __name__ == '__main__':
	    from BaseHTTPServer import HTTPServer
	    server = HTTPServer(('localhost', 8080), GetHandler)
	    print 'Starting server, use <Ctrl-C> to stop'
	    server.serve_forever()
	

snippet BaseHTTPServer_threads.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/BaseHTTPServer_threads.py
	
	"""Threaded GET handler with BaseHTTPServer
	
	"""
	
	__version__ = "$Id$"
	
	from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
	from SocketServer import ThreadingMixIn
	import threading
	
	class Handler(BaseHTTPRequestHandler):
	    
	    def do_GET(self):
	        self.send_response(200)
	        self.end_headers()
	        message =  threading.currentThread().getName()
	        self.wfile.write(message)
	        self.wfile.write('\n')
	        return
	
	class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
	    """Handle requests in a separate thread."""
	
	if __name__ == '__main__':
	    server = ThreadedHTTPServer(('localhost', 8080), Handler)
	    print 'Starting server, use <Ctrl-C> to stop'
	    server.serve_forever()
	

snippet bisect_example2.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bisect_example2.py
	
	import bisect
	import random
	
	# Reset the seed
	random.seed(1)
	
	print('New  Pos  Contents')
	print('---  ---  --------')
	
	# Use bisect_left and insort_left.
	l = []
	for i in range(1, 15):
	    r = random.randint(1, 100)
	    position = bisect.bisect_left(l, r)
	    bisect.insort_left(l, r)
	    print('%3d  %3d' % (r, position), l)

snippet bisect_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bisect_example.py
	
	import bisect
	import random
	
	# Use a constant seed to ensure that
	# the same pseudo-random numbers
	# are used each time the loop is run.
	random.seed(1)
	
	print('New  Pos  Contents')
	print('---  ---  --------')
	
	# Generate random numbers and
	# insert them into a list in sorted
	# order.
	l = []
	for i in range(1, 15):
	    r = random.randint(1, 100)
	    position = bisect.bisect(l, r)
	    bisect.insort(l, r)
	    print('%3d  %3d' % (r, position), l)

snippet bz2_file_compresslevel.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bz2_file_compresslevel.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import bz2
	import os
	
	data = open('lorem.txt', 'r').read() * 1024
	print 'Input contains %d bytes' % len(data)
	
	for i in xrange(1, 10):
	    filename = 'compress-level-%s.bz2' % i
	    with bz2.BZ2File(filename, 'wb', compresslevel=i) as output:
	        output.write(data)
	    os.system('cksum %s' % filename)

snippet bz2_file_read.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bz2_file_read.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import bz2
	import contextlib
	
	with contextlib.closing(bz2.BZ2File('example.bz2', 'rb')) as input:
	    print input.read()

snippet bz2_file_seek.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bz2_file_seek.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import bz2
	import contextlib
	
	with contextlib.closing(bz2.BZ2File('example.bz2', 'rb')) as input:
	    print 'Entire file:'
	    all_data = input.read()
	    print all_data
	    
	    expected = all_data[5:15]
	    
	    # rewind to beginning
	    input.seek(0)
	    
	    # move ahead 5 bytes
	    input.seek(5)
	    print 'Starting at position 5 for 10 bytes:'
	    partial = input.read(10)
	    print partial
	    
	    print
	    print expected == partial

snippet bz2_file_writelines.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bz2_file_writelines.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import bz2
	import contextlib
	import itertools
	import os
	
	with contextlib.closing(bz2.BZ2File('lines.bz2', 'wb')) as output:
	    output.writelines(
	        itertools.repeat('The same line, over and over.\n', 10),
	        )
	
	os.system('bzcat lines.bz2')

snippet bz2_file_write.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bz2_file_write.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import bz2
	import contextlib
	import os
	
	with contextlib.closing(bz2.BZ2File('example.bz2', 'wb')) as output:
	    output.write('Contents of the example file go here.\n')
	
	os.system('file example.bz2')

snippet bz2_incremental.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bz2_incremental.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Incremental compression
	"""
	#end_pymotw_header
	
	import bz2
	import binascii
	
	compressor = bz2.BZ2Compressor()
	
	with open('lorem.txt', 'r') as input:
	    while True:
	        block = input.read(64)
	        if not block:
	            break
	        compressed = compressor.compress(block)
	        if compressed:
	            print 'Compressed: %s' % binascii.hexlify(compressed)
	        else:
	            print 'buffering...'
	    remaining = compressor.flush()
	    print 'Flushed: %s' % binascii.hexlify(remaining)
	    
	            

snippet bz2_lengths.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bz2_lengths.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import bz2
	
	original_data = 'This is the original text.'
	
	fmt = '%15s  %15s'
	print fmt % ('len(data)', 'len(compressed)')
	print fmt % ('-' * 15, '-' * 15)
	
	for i in xrange(5):
	    data = original_data * i
	    compressed = bz2.compress(data)    
	    print fmt % (len(data), len(compressed)),
	    print '*' if len(data) < len(compressed) else ''

snippet bz2_memory.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bz2_memory.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import bz2
	import binascii
	
	original_data = 'This is the original text.'
	print 'Original     : %d bytes' % len(original_data)
	print original_data
	
	print
	compressed = bz2.compress(original_data)
	print 'Compressed   : %d bytes' % len(compressed)
	hex_version = binascii.hexlify(compressed)
	for i in xrange(len(hex_version)/40 + 1):
	    print hex_version[i*40:(i+1)*40]
	
	print
	decompressed = bz2.decompress(compressed)
	print 'Decompressed : %d bytes' % len(decompressed)
	print decompressed

snippet bz2_mixed.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bz2_mixed.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import bz2
	
	lorem = open('lorem.txt', 'rt').read()
	compressed = bz2.compress(lorem)
	combined = compressed + lorem
	
	decompressor = bz2.BZ2Decompressor()
	decompressed = decompressor.decompress(combined)
	
	decompressed_matches = decompressed == lorem
	print 'Decompressed matches lorem:', decompressed_matches
	
	unused_matches = decompressor.unused_data == lorem
	print 'Unused data matches lorem :', unused_matches

snippet bz2_server.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/bz2_server.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	#__version__ = "$Id$"
	#end_pymotw_header
	import bz2
	import logging
	import SocketServer
	import binascii
	
	BLOCK_SIZE = 32
	
	class Bz2RequestHandler(SocketServer.BaseRequestHandler):
	
	    logger = logging.getLogger('Server')
	    
	    def handle(self):
	        compressor = bz2.BZ2Compressor()
	        
	        # Find out what file the client wants
	        filename = self.request.recv(1024)
	        self.logger.debug('client asked for: "%s"', filename)
	        
	        # Send chunks of the file as they are compressed
	        with open(filename, 'rb') as input:
	            while True:            
	                block = input.read(BLOCK_SIZE)
	                if not block:
	                    break
	                self.logger.debug('RAW "%s"', block)
	                compressed = compressor.compress(block)
	                if compressed:
	                    self.logger.debug('SENDING "%s"',
	                                      binascii.hexlify(compressed))
	                    self.request.send(compressed)
	                else:
	                    self.logger.debug('BUFFERING')
	        
	        # Send any data being buffered by the compressor
	        remaining = compressor.flush()
	        while remaining:
	            to_send = remaining[:BLOCK_SIZE]
	            remaining = remaining[BLOCK_SIZE:]
	            self.logger.debug('FLUSHING "%s"',
	                              binascii.hexlify(to_send))
	            self.request.send(to_send)
	        return
	
	
	if __name__ == '__main__':
	    import socket
	    import sys
	    from cStringIO import StringIO
	    import threading
	
	    logging.basicConfig(level=logging.DEBUG,
	                        format='%(name)s: %(message)s',
	                        )
	
	    # Set up a server, running in a separate thread
	    address = ('localhost', 0) # let the kernel assign a port
	    server = SocketServer.TCPServer(address, Bz2RequestHandler)
	    ip, port = server.server_address # what port was assigned?
	
	    t = threading.Thread(target=server.serve_forever)
	    t.setDaemon(True)
	    t.start()
	
	    logger = logging.getLogger('Client')
	
	    # Connect to the server
	    logger.info('Contacting server on %s:%s', ip, port)
	    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	    s.connect((ip, port))
	
	    # Ask for a file
	    requested_file = (sys.argv[0]
	                      if len(sys.argv) > 1
	                      else 'lorem.txt')
	    logger.debug('sending filename: "%s"', requested_file)
	    len_sent = s.send(requested_file)
	
	    # Receive a response
	    buffer = StringIO()
	    decompressor = bz2.BZ2Decompressor()
	    while True:
	        response = s.recv(BLOCK_SIZE)
	        if not response:
	            break
	        logger.debug('READ "%s"', binascii.hexlify(response))
	
	        # Include any unconsumed data when feeding the decompressor.
	        decompressed = decompressor.decompress(response)
	        if decompressed:
	            logger.debug('DECOMPRESSED "%s"', decompressed)
	            buffer.write(decompressed)
	        else:
	            logger.debug('BUFFERING')
	
	    full_response = buffer.getvalue()
	    lorem = open(requested_file, 'rt').read()
	    logger.debug('response matches file contents: %s',
	                 full_response == lorem)
	
	    # Clean up
	    server.shutdown()
	    server.socket.close()
	    s.close()

snippet calendar_formatyear.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/calendar_formatyear.py
	
	import calendar
	
	cal = calendar.TextCalendar(calendar.SUNDAY)
	print(cal.formatyear(2017, 2, 1, 1, 3))

snippet calendar_htmlcalendar.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/calendar_htmlcalendar.py
	
	import calendar
	
	c = calendar.HTMLCalendar(calendar.SUNDAY)
	print(c.formatmonth(2017, 7))

snippet calendar_monthcalendar.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/calendar_monthcalendar.py
	
	import calendar
	import pprint
	
	pprint.pprint(calendar.monthcalendar(2017, 7))

snippet calendar_secondthursday.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/calendar_secondthursday.py
	
	import calendar
	
	# Show every month
	for month in range(1, 13):
	
	    # Compute the dates for each week that overlaps the month
	    c = calendar.monthcalendar(2017, month)
	    first_week = c[0]
	    second_week = c[1]
	    third_week = c[2]
	
	    # If there is a Thursday in the first week, the second Thursday
	    # is in the second week.  Otherwise, the second Thursday must
	    # be in the third week.
	    if first_week[calendar.THURSDAY]:
	        meeting_date = second_week[calendar.THURSDAY]
	    else:
	        meeting_date = third_week[calendar.THURSDAY]
	
	    print('%3s: %2s' % (calendar.month_abbr[month], meeting_date))

snippet calendar_textcalendar.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/calendar_textcalendar.py
	
	import calendar
	
	c = calendar.TextCalendar(calendar.SUNDAY)
	c.prmonth(2017, 7)

snippet calendar_yeardays2calendar.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/calendar_yeardays2calendar.py
	
	import calendar
	import pprint
	
	cal = calendar.Calendar(calendar.SUNDAY)
	
	cal_data = cal.yeardays2calendar(2017, 3)
	print('len(cal_data)      :', len(cal_data))
	
	top_months = cal_data[0]
	print('len(top_months)    :', len(top_months))
	
	first_month = top_months[0]
	print('len(first_month)   :', len(first_month))
	
	print('first_month:')
	pprint.pprint(first_month)

snippet cgitb_basic_traceback.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cgitb_basic_traceback.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann.  All rights reserved.
	#
	"""Generate a traceback
	"""
	#end_pymotw_header
	
	def func2(a, divisor):
	    return a / divisor
	
	def func1(a, b):
	    c = b - 5
	    return func2(a, c)
	
	func1(1, 5)

snippet cgitb_exception_properties.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cgitb_exception_properties.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann.  All rights reserved.
	#
	"""Showing exception properties in a traceback
	"""
	#end_pymotw_header
	
	import cgitb
	cgitb.enable(format='text')
	
	class MyException(Exception):
	    """Add extra properties to a special exception
	    """
	    
	    def __init__(self, message, bad_value):
	        self.bad_value = bad_value
	        Exception.__init__(self, message)
	        return
	
	raise MyException('Normal message', bad_value=99)

snippet cgitb_extended_traceback.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cgitb_extended_traceback.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann.  All rights reserved.
	#
	"""Generate a traceback with more details.
	"""
	#end_pymotw_header
	
	import cgitb
	cgitb.enable(format='text')
	
	def func1(arg1):
	    local_var = arg1 * 2
	    return func2(local_var)
	
	def func2(arg2):
	    local_var = arg2 + 2
	    return func3(local_var)
	
	def func3(arg3):
	    local_var = arg2 / 2
	    return local_var
	
	func1(1)

snippet cgitb_html_output.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cgitb_html_output.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann.  All rights reserved.
	#
	"""Generate a traceback with more details.
	"""
	#end_pymotw_header
	
	import cgitb
	cgitb.enable()
	
	def func1(arg1):
	    local_var = arg1 * 2
	    return func2(local_var)
	
	def func2(arg2):
	    local_var = arg2 + 2
	    return func3(local_var)
	
	def func3(arg3):
	    local_var = arg2 / 2
	    return local_var
	
	func1(1)

snippet cgitb_local_vars.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cgitb_local_vars.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann.  All rights reserved.
	#
	"""Local variables lead to an answer
	"""
	#end_pymotw_header
	
	import cgitb
	cgitb.enable(format='text')
	
	def func2(a, divisor):
	    return a / divisor
	
	def func1(a, b):
	    c = b - 5
	    return func2(a, c)
	
	func1(1, 5)

snippet cgitb_log_exception.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cgitb_log_exception.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann.  All rights reserved.
	#
	"""Logging exceptions to a file, instead of displaying them.
	"""
	#end_pymotw_header
	
	import cgitb
	import os
	
	cgitb.enable(logdir=os.path.join(os.path.dirname(__file__), 'LOGS'),
	             display=False,
	             format='text',
	             )
	
	def func(a, divisor):
	    return a / divisor
	
	func(1, 0)

snippet cgitb_more_context.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cgitb_more_context.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann.  All rights reserved.
	#
	"""Control the amount of context by passing a number as arg on command line
	"""
	#end_pymotw_header
	
	import cgitb
	import sys
	
	context_length = int(sys.argv[1])
	cgitb.enable(format='text', context=context_length)
	
	def func2(a, divisor):
	    return a / divisor
	
	def func1(a, b):
	    c = b - 5
	    # Really
	    # long
	    # comment
	    # goes
	    # here.
	    return func2(a, c)
	
	func1(1, 5)

snippet cgitb_with_classes.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cgitb_with_classes.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann.  All rights reserved.
	#
	"""Show tracebacks with classes
	"""
	#end_pymotw_header
	
	import cgitb
	cgitb.enable(format='text', context=12)
	
	class BrokenClass(object):
	    """This class has an error.
	    """
	    
	    def __init__(self, a, b):
	        """Be careful passing arguments in here.
	        """
	        self.a = a
	        self.b = b
	        self.c = self.a * self.b
	        # Really
	        # long
	        # comment
	        # goes
	        # here.
	        self.d = self.a / self.b
	        return
	
	o = BrokenClass(1, 0)

snippet cmd_arg_completion.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cmd_arg_completion.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import cmd
	
	class HelloWorld(cmd.Cmd):
	    """Simple command processor example."""
	    
	    FRIENDS = [ 'Alice', 'Adam', 'Barbara', 'Bob' ]
	    
	    def do_greet(self, person):
	        "Greet the person"
	        if person and person in self.FRIENDS:
	            greeting = 'hi, %s!' % person
	        elif person:
	            greeting = "hello, " + person
	        else:
	            greeting = 'hello'
	        print greeting
	    
	    def complete_greet(self, text, line, begidx, endidx):
	        if not text:
	            completions = self.FRIENDS[:]
	        else:
	            completions = [ f
	                            for f in self.FRIENDS
	                            if f.startswith(text)
	                            ]
	        return completions
	    
	    def do_EOF(self, line):
	        return True
	
	if __name__ == '__main__':
	    HelloWorld().cmdloop() 
snippet cmd_arguments.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cmd_arguments.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import cmd
	
	class HelloWorld(cmd.Cmd):
	    """Simple command processor example."""
	    
	    def do_greet(self, person):
	        """greet [person]
	        Greet the named person"""
	        if person:
	            print "hi,", person
	        else:
	            print 'hi'
	    
	    def do_EOF(self, line):
	        return True
	    
	    def postloop(self):
	        print
	
	if __name__ == '__main__':
	    HelloWorld().cmdloop() 
snippet cmd_argv.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cmd_argv.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import cmd
	
	class InteractiveOrCommandLine(cmd.Cmd):
	    """Accepts commands via the normal interactive
	    prompt or on the command line.
	    """
	
	    def do_greet(self, line):
	        print 'hello,', line
	    
	    def do_EOF(self, line):
	        return True
	
	if __name__ == '__main__':
	    import sys
	    if len(sys.argv) > 1:
	        InteractiveOrCommandLine().onecmd(' '.join(sys.argv[1:]))
	    else:
	        InteractiveOrCommandLine().cmdloop()

snippet cmd_attributes.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cmd_attributes.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import cmd
	
	class HelloWorld(cmd.Cmd):
	    """Simple command processor example."""
	
	    prompt = 'prompt: '
	    intro = "Simple command processor example."
	
	    doc_header = 'doc_header'
	    misc_header = 'misc_header'
	    undoc_header = 'undoc_header'
	    
	    ruler = '-'
	    
	    def do_prompt(self, line):
	        "Change the interactive prompt"
	        self.prompt = line + ': '
	
	    def do_EOF(self, line):
	        return True
	
	if __name__ == '__main__':
	    HelloWorld().cmdloop() 
snippet cmd_do_help.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cmd_do_help.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import cmd
	
	class HelloWorld(cmd.Cmd):
	    """Simple command processor example."""
	    
	    def do_greet(self, person):
	        if person:
	            print "hi,", person
	        else:
	            print 'hi'
	    
	    def help_greet(self):
	        print '\n'.join([ 'greet [person]',
	                          'Greet the named person',
	                          ])
	    
	    def do_EOF(self, line):
	        return True
	
	if __name__ == '__main__':
	    HelloWorld().cmdloop()

snippet cmd_do_shell.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cmd_do_shell.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import cmd
	import subprocess
	
	class ShellEnabled(cmd.Cmd):
	    
	    last_output = ''
	
	    def do_shell(self, line):
	        "Run a shell command"
	        print "running shell command:", line
	        sub_cmd = subprocess.Popen(line,
	                                   shell=True,
	                                   stdout=subprocess.PIPE)
	        output = sub_cmd.communicate()[0]
	        print output
	        self.last_output = output
	    
	    def do_echo(self, line):
	        """Print the input, replacing '$out' with
	        the output of the last shell command.
	        """
	        # Obviously not robust
	        print line.replace('$out', self.last_output)
	    
	    def do_EOF(self, line):
	        return True
	    
	if __name__ == '__main__':
	    ShellEnabled().cmdloop()

snippet cmd_file.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cmd_file.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import cmd
	
	class HelloWorld(cmd.Cmd):
	    """Simple command processor example."""
	    
	    # Disable rawinput module use
	    use_rawinput = False
	    
	    # Do not show a prompt after each command read
	    prompt = ''
	    
	    def do_greet(self, line):
	        print "hello,", line
	    
	    def do_EOF(self, line):
	        return True
	
	if __name__ == '__main__':
	    import sys
	    with open(sys.argv[1], 'rt') as input:
	        HelloWorld(stdin=input).cmdloop()

snippet cmd_illustrate_methods.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cmd_illustrate_methods.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import cmd
	
	class Illustrate(cmd.Cmd):
	    "Illustrate the base class method use."
	    
	    def cmdloop(self, intro=None):
	        print 'cmdloop(%s)' % intro
	        return cmd.Cmd.cmdloop(self, intro)
	    
	    def preloop(self):
	        print 'preloop()'
	    
	    def postloop(self):
	        print 'postloop()'
	        
	    def parseline(self, line):
	        print 'parseline(%s) =>' % line,
	        ret = cmd.Cmd.parseline(self, line)
	        print ret
	        return ret
	    
	    def onecmd(self, s):
	        print 'onecmd(%s)' % s
	        return cmd.Cmd.onecmd(self, s)
	
	    def emptyline(self):
	        print 'emptyline()'
	        return cmd.Cmd.emptyline(self)
	    
	    def default(self, line):
	        print 'default(%s)' % line
	        return cmd.Cmd.default(self, line)
	    
	    def precmd(self, line):
	        print 'precmd(%s)' % line
	        return cmd.Cmd.precmd(self, line)
	    
	    def postcmd(self, stop, line):
	        print 'postcmd(%s, %s)' % (stop, line)
	        return cmd.Cmd.postcmd(self, stop, line)
	    
	    def do_greet(self, line):
	        print 'hello,', line
	
	    def do_EOF(self, line):
	        "Exit"
	        return True
	
	if __name__ == '__main__':
	    Illustrate().cmdloop('Illustrating the methods of cmd.Cmd')

snippet cmd_simple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/cmd_simple.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import cmd
	
	class HelloWorld(cmd.Cmd):
	    """Simple command processor example."""
	    
	    def do_greet(self, line):
	        print "hello"
	    
	    def do_EOF(self, line):
	        return True
	
	if __name__ == '__main__':
	    HelloWorld().cmdloop() 
snippet codecs_bom_create_file.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_bom_create_file.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Create a file with nonnative BOM.
	"""
	#end_pymotw_header
	
	import codecs
	from codecs_to_hex import to_hex
	
	# Pick the nonnative version of UTF-16 encoding
	if codecs.BOM_UTF16 == codecs.BOM_UTF16_BE:
	    bom = codecs.BOM_UTF16_LE
	    encoding = 'utf_16_le'
	else:
	    bom = codecs.BOM_UTF16_BE
	    encoding = 'utf_16_be'
	
	print 'Native order  :', to_hex(codecs.BOM_UTF16, 2)
	print 'Selected order:', to_hex(bom, 2)
	
	# Encode the text.
	encoded_text = u'pi: \u03c0'.encode(encoding)
	print '{:14}: {}'.format(encoding, to_hex(encoded_text, 2))
	
	with open('nonnative-encoded.txt', mode='wb') as f:
	    # Write the selected byte-order marker.  It is not included
	    # in the encoded text because the byte order was given
	    # explicitly when selecting the encoding.
	    f.write(bom)
	    # Write the byte string for the encoded text.
	    f.write(encoded_text)

snippet codecs_bom_detection.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_bom_detection.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Detecting the BOM.
	"""
	#end_pymotw_header
	
	import codecs
	from codecs_to_hex import to_hex
	
	# Look at the raw data
	with open('nonnative-encoded.txt', mode='rb') as f:
	    raw_bytes = f.read()
	
	print 'Raw    :', to_hex(raw_bytes, 2)
	
	# Re-open the file and let codecs detect the BOM
	with codecs.open('nonnative-encoded.txt',
	                 mode='rt',
	                 encoding='utf-16',
	                 ) as f:
	    decoded_text = f.read()
	
	print 'Decoded:', repr(decoded_text)

snippet codecs_bom.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_bom.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Byte-order markers
	"""
	#end_pymotw_header
	
	import codecs
	from codecs_to_hex import to_hex
	
	for name in [ 'BOM', 'BOM_BE', 'BOM_LE',
	              'BOM_UTF8',
	              'BOM_UTF16', 'BOM_UTF16_BE', 'BOM_UTF16_LE',
	              'BOM_UTF32', 'BOM_UTF32_BE', 'BOM_UTF32_LE',
	              ]:
	    print '{:12} : {}'.format(name, to_hex(getattr(codecs, name), 2))

snippet codecs_decode_error.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_decode_error.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Errors decoding Unicode data.
	"""
	#end_pymotw_header
	
	import codecs
	import sys
	
	from codecs_to_hex import to_hex
	
	error_handling = sys.argv[1]
	
	text = u'pi: \u03c0'
	print 'Original     :', repr(text)
	
	# Save the data with one encoding
	with codecs.open('decode_error.txt', 'w', encoding='utf-16') as f:
	    f.write(text)
	
	# Dump the bytes from the file
	with open('decode_error.txt', 'rb') as f:
	    print 'File contents:', to_hex(f.read(), 1)
	
	# Try to read the data with the wrong encoding
	with codecs.open('decode_error.txt', 'r',
	                 encoding='utf-8',
	                 errors=error_handling) as f:
	    try:
	        data = f.read()
	    except UnicodeDecodeError, err:
	        print 'ERROR:', err
	    else:
	        print 'Read         :', repr(data)

snippet codecs_decode.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_decode.py
	
	from codecs_to_hex import to_hex
	
	text = 'pi: π'
	encoded = text.encode('utf-8')
	decoded = encoded.decode('utf-8')
	
	
	print('Original :', repr(text))
	print('Encoded  :', to_hex(encoded, 1), type(encoded))
	print('Decoded  :', repr(decoded), type(decoded))

snippet codecs_encodedfile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_encodedfile.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Translating between encodings on the fly.
	"""
	#end_pymotw_header
	
	from codecs_to_hex import to_hex
	
	import codecs
	from cStringIO import StringIO
	
	# Raw version of the original data.
	data = u'pi: \u03c0'
	
	# Manually encode it as UTF-8.
	utf8 = data.encode('utf-8')
	print 'Start as UTF-8   :', to_hex(utf8, 1)
	
	# Set up an output buffer, then wrap it as an EncodedFile.
	output = StringIO()
	encoded_file = codecs.EncodedFile(output, data_encoding='utf-8',
	                                  file_encoding='utf-16')
	encoded_file.write(utf8)
	
	# Fetch the buffer contents as a UTF-16 encoded byte string
	utf16 = output.getvalue()
	print 'Encoded to UTF-16:', to_hex(utf16, 2)
	
	# Set up another buffer with the UTF-16 data for reading,
	# and wrap it with another EncodedFile.
	buffer = StringIO(utf16)
	encoded_file = codecs.EncodedFile(buffer, data_encoding='utf-8',
	                                  file_encoding='utf-16')
	
	# Read the UTF-8 encoded version of the data.
	recoded = encoded_file.read()
	print 'Back to UTF-8    :', to_hex(recoded, 1)
	

snippet codecs_encode_error.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_encode_error.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Demonstrate encoding errors.
	"""
	#end_pymotw_header
	
	import codecs
	import sys
	
	error_handling = sys.argv[1]
	
	text = u'pi: \u03c0'
	
	try:
	    # Save the data, encoded as ASCII, using the error
	    # handling mode specified on the command line.
	    with codecs.open('encode_error.txt', 'w',
	                     encoding='ascii',
	                     errors=error_handling) as f:
	        f.write(text)
	        
	except UnicodeEncodeError, err:
	    print 'ERROR:', err
	    
	else:
	    # If there was no error writing to the file,
	    # show what it contains.
	    with open('encode_error.txt', 'rb') as f:
	        print 'File contents:', repr(f.read())

snippet codecs_encodings.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_encodings.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Demonstrate the representations of values using different encodings.
	"""
	#end_pymotw_header
	
	from codecs_to_hex import to_hex
	
	text = u'pi: π'
	
	print 'Raw   :', repr(text)
	print 'UTF-8 :', to_hex(text.encode('utf-8'), 1)
	print 'UTF-16:', to_hex(text.encode('utf-16'), 2)

snippet codecs_incremental_bz2.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_incremental_bz2.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Using the incremental reader/writer interfaces.
	"""
	#end_pymotw_header
	
	import codecs
	import sys
	
	from codecs_to_hex import to_hex
	
	text = 'abcdefghijklmnopqrstuvwxyz\n'
	repetitions = 50
	
	print 'Text length :', len(text)
	print 'Repetitions :', repetitions
	print 'Expected len:', len(text) * repetitions
	
	# Encode the text several times to build up a large amount of data
	encoder = codecs.getincrementalencoder('bz2')()
	encoded = []
	
	print
	print 'Encoding:',
	for i in range(repetitions):
	    en_c = encoder.encode(text, final = (i==repetitions-1))
	    if en_c:
	        print '\nEncoded : {} bytes'.format(len(en_c))
	        encoded.append(en_c)
	    else:
	        sys.stdout.write('.')
	    
	bytes = ''.join(encoded)
	print
	print 'Total encoded length:', len(bytes)
	print
	
	# Decode the byte string one byte at a time
	decoder = codecs.getincrementaldecoder('bz2')()
	decoded = []
	
	print 'Decoding:',
	for i, b in enumerate(bytes):
	    final= (i+1) == len(text)
	    c = decoder.decode(b, final)
	    if c:
	        print '\nDecoded : {} characters'.format(len(c))
	        print 'Decoding:',
	        decoded.append(c)
	    else:
	        sys.stdout.write('.')
	print
	
	restored = u''.join(decoded)
	
	print
	print 'Total uncompressed length:', len(restored)

snippet codecs_invertcaps_charmap.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_invertcaps_charmap.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Character mapping encoder
	"""
	#end_pymotw_header
	
	import codecs
	import string
	
	# Map every character to itself
	decoding_map = codecs.make_identity_dict(range(256))
	
	# Make a list of pairs of ordinal values for the lower and uppercase
	# letters
	pairs = zip([ ord(c) for c in string.ascii_lowercase],
	            [ ord(c) for c in string.ascii_uppercase])
	
	# Modify the mapping to convert upper to lower and lower to upper.
	decoding_map.update( dict( (upper, lower)
	                           for (lower, upper)
	                           in pairs
	                           )
	                     )
	decoding_map.update( dict( (lower, upper)
	                           for (lower, upper)
	                           in pairs
	                           )
	                     )
	
	# Create a separate encoding map.
	encoding_map = codecs.make_encoding_map(decoding_map)
	
	if __name__ == '__main__':
	    print codecs.charmap_encode('abc.DEF', 'strict', encoding_map)
	    print codecs.charmap_decode('abc.DEF', 'strict', decoding_map)
	    print encoding_map == decoding_map
	    

snippet codecs_invertcaps_error.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_invertcaps_error.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Error handling with character map encodings.
	"""
	#end_pymotw_header
	
	import codecs
	from codecs_invertcaps_charmap import encoding_map
	
	text = u'pi: π'
	
	for error in [ 'ignore', 'replace', 'strict' ]:
	    try:
	        encoded = codecs.charmap_encode(text, error, encoding_map)
	    except UnicodeEncodeError, err:
	        encoded = str(err)
	    print '{:7}: {}'.format(error, encoded)

snippet codecs_invertcaps.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_invertcaps.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Trivial encoder/decoder that switches capitalization of input characters.
	"""
	#end_pymotw_header
	
	import string
	
	def invertcaps(text):
	    """Return new string with the case of all letters switched.
	    """
	    return ''.join( c.upper() if c in string.ascii_lowercase
	                    else c.lower() if c in string.ascii_uppercase
	                    else c
	                    for c in text
	                    )
	
	if __name__ == '__main__':
	    print invertcaps('ABC.def')
	    print invertcaps('abc.DEF')

snippet codecs_invertcaps_register.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_invertcaps_register.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Set up the invertcaps codec.
	"""
	#end_pymotw_header
	
	import codecs
	
	from codecs_invertcaps_charmap import encoding_map, decoding_map
	
	# Stateless encoder/decoder
	
	class InvertCapsCodec(codecs.Codec):
	    def encode(self, input, errors='strict'):
	        return codecs.charmap_encode(input, errors, encoding_map)
	
	    def decode(self, input, errors='strict'):
	        return codecs.charmap_decode(input, errors, decoding_map)
	
	# Incremental forms
	
	class InvertCapsIncrementalEncoder(codecs.IncrementalEncoder):
	    def encode(self, input, final=False):
	        data, nbytes = codecs.charmap_encode(input,
	                                             self.errors,
	                                             encoding_map)
	        return data
	
	class InvertCapsIncrementalDecoder(codecs.IncrementalDecoder):
	    def decode(self, input, final=False):
	        data, nbytes = codecs.charmap_decode(input,
	                                             self.errors,
	                                             decoding_map)
	        return data
	
	# Stream reader and writer
	
	class InvertCapsStreamReader(InvertCapsCodec, codecs.StreamReader):
	    pass
	
	class InvertCapsStreamWriter(InvertCapsCodec, codecs.StreamWriter):
	    pass
	
	# Register the codec search function
	
	def find_invertcaps(encoding):
	    """Return the codec for 'invertcaps'.
	    """
	    if encoding == 'invertcaps':
	        return codecs.CodecInfo(
	            name='invertcaps',
	            encode=InvertCapsCodec().encode,
	            decode=InvertCapsCodec().decode,
	            incrementalencoder=InvertCapsIncrementalEncoder,
	            incrementaldecoder=InvertCapsIncrementalDecoder,
	            streamreader=InvertCapsStreamReader,
	            streamwriter=InvertCapsStreamWriter,
	            )
	    return None
	
	codecs.register(find_invertcaps)
	
	if __name__ == '__main__':
	
	    # Stateless encoder/decoder
	    encoder = codecs.getencoder('invertcaps')
	    text = 'abc.DEF'
	    encoded_text, consumed = encoder(text)
	    print 'Encoded "{}" to "{}", consuming {} characters'.format(
	        text, encoded_text, consumed)
	
	    # Stream writer
	    import sys
	    writer = codecs.getwriter('invertcaps')(sys.stdout)
	    print 'StreamWriter for stdout: ',
	    writer.write('abc.DEF')
	    print
	
	    # Incremental decoder
	    decoder_factory = codecs.getincrementaldecoder('invertcaps')
	    decoder = decoder_factory()
	    decoded_text_parts = []
	    for c in encoded_text:
	        decoded_text_parts.append(decoder.decode(c, final=False))
	    decoded_text_parts.append(decoder.decode('', final=True))
	    decoded_text = ''.join(decoded_text_parts)
	    print 'IncrementalDecoder converted "{}" to "{}"'.format(
	        encoded_text, decoded_text)

snippet codecs_open_read.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_open_read.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Writing Unicode data to a file.
	"""
	#end_pymotw_header
	
	import codecs
	import sys
	
	encoding = sys.argv[1]
	filename = encoding + '.txt'
	
	print 'Reading from', filename
	with codecs.open(filename, mode='rt', encoding=encoding) as f:
	    print repr(f.read())

snippet codecs_open_write.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_open_write.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Writing Unicode data to a file.
	"""
	#end_pymotw_header
	
	from codecs_to_hex import to_hex
	
	import codecs
	import sys
	
	encoding = sys.argv[1]
	filename = encoding + '.txt'
	
	print 'Writing to', filename
	with codecs.open(filename, mode='wt', encoding=encoding) as f:
	    f.write(u'pi: \u03c0')
	
	# Determine the byte grouping to use for to_hex()
	nbytes = { 'utf-8':1,
	           'utf-16':2,
	           'utf-32':4,
	           }.get(encoding, 1) 
	
	# Show the raw bytes in the file
	print 'File contents:'
	with open(filename, mode='rt') as f:
	    print to_hex(f.read(), nbytes)

snippet codecs_register.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_register.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Registering your own codec search function.
	"""
	#end_pymotw_header
	
	import codecs
	import encodings
	
	def search1(encoding):
	    print 'search1: Searching for:', encoding
	    return None
	
	def search2(encoding):
	    print 'search2: Searching for:', encoding
	    return None
	
	codecs.register(search1)
	codecs.register(search2)
	
	utf8 = codecs.lookup('utf-8')
	print 'UTF-8:', utf8
	
	try:
	    unknown = codecs.lookup('no-such-encoding')
	except LookupError, err:
	    print 'ERROR:', err
	

snippet codecs_rot13.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_rot13.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Demonstrate a non-Unicode codec.
	"""
	#end_pymotw_header
	
	import codecs
	from cStringIO import StringIO
	
	buffer = StringIO()
	stream = codecs.getwriter('rot_13')(buffer)
	
	text = 'abcdefghijklmnopqrstuvwxyz'
	
	stream.write(text)
	stream.flush()
	
	print 'Original:', text
	print 'ROT-13  :', buffer.getvalue()

snippet codecs_socket_fail.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_socket_fail.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Sending Unicode data over a socket.
	"""
	#end_pymotw_header
	
	import sys
	import SocketServer
	
	
	class Echo(SocketServer.BaseRequestHandler):
	
	    def handle(self):
	        # Get some bytes and echo them back to the client.
	        data = self.request.recv(1024)
	        self.request.send(data)
	        return
	
	
	if __name__ == '__main__':
	    import codecs
	    import socket
	    import threading
	
	    address = ('localhost', 0) # let the kernel assign a port
	    server = SocketServer.TCPServer(address, Echo)
	    ip, port = server.server_address # what port was assigned?
	
	    t = threading.Thread(target=server.serve_forever)
	    t.setDaemon(True) # don't hang on exit
	    t.start()
	
	    # Connect to the server
	    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	    s.connect((ip, port))
	
	    # Send the data
	    # WRONG: Not encoded first!
	    text = u'pi: π'
	    len_sent = s.send(text)
	
	    # Receive a response
	    response = s.recv(len_sent)
	    print repr(response)
	
	    # Clean up
	    s.close()
	    server.socket.close()

snippet codecs_socket.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_socket.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Sending Unicode data over a socket.
	"""
	#end_pymotw_header
	
	import sys
	import SocketServer
	
	
	class Echo(SocketServer.BaseRequestHandler):
	
	    def handle(self):
	        # Get some bytes and echo them back to the client.  There is
	        # no need to decode them, since they are not used.
	        data = self.request.recv(1024)
	        self.request.send(data)
	        return
	
	
	class PassThrough(object):
	
	    def __init__(self, other):
	        self.other = other
	
	    def write(self, data):
	        print 'Writing :', repr(data)
	        return self.other.write(data)
	
	    def read(self, size=-1):
	        print 'Reading :',
	        data = self.other.read(size)
	        print repr(data)
	        return data
	
	    def flush(self):
	        return self.other.flush()
	
	    def close(self):
	        return self.other.close()
	    
	
	if __name__ == '__main__':
	    import codecs
	    import socket
	    import threading
	
	    address = ('localhost', 0) # let the kernel assign a port
	    server = SocketServer.TCPServer(address, Echo)
	    ip, port = server.server_address # what port was assigned?
	
	    t = threading.Thread(target=server.serve_forever)
	    t.setDaemon(True) # don't hang on exit
	    t.start()
	
	    # Connect to the server
	    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	    s.connect((ip, port))
	
	    # Wrap the socket with a reader and writer.
	    read_file = s.makefile('r')
	    incoming = codecs.getreader('utf-8')(PassThrough(read_file))
	    write_file = s.makefile('w')
	    outgoing = codecs.getwriter('utf-8')(PassThrough(write_file))
	
	    # Send the data
	    text = u'pi: π'
	    print 'Sending :', repr(text)
	    outgoing.write(text)
	    outgoing.flush()
	
	    # Receive a response
	    response = incoming.read()
	    print 'Received:', repr(response)
	
	    # Clean up
	    s.close()
	    server.socket.close()

snippet codecs_stdin.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_stdin.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Printing unicode text to sys.stdout.
	"""
	#end_pymotw_header
	
	import codecs
	import locale
	import sys
	
	# Configure locale from the user's environment settings.
	locale.setlocale(locale.LC_ALL, '')
	
	# Wrap stdin with an encoding-aware reader.
	lang, encoding = locale.getdefaultlocale()
	sys.stdin = codecs.getreader(encoding)(sys.stdin)
	
	print 'From stdin:'
	print repr(sys.stdin.read())

snippet codecs_stdout_locale.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_stdout_locale.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Printing unicode text to sys.stdout.
	"""
	#end_pymotw_header
	
	import codecs
	import locale
	import sys
	
	text = u'pi: π'
	
	# Configure locale from the user's environment settings.
	locale.setlocale(locale.LC_ALL, '')
	
	# Wrap stdout with an encoding-aware writer.
	lang, encoding = locale.getdefaultlocale()
	print 'Locale encoding    :', encoding
	sys.stdout = codecs.getwriter(encoding)(sys.stdout)
	
	print 'With wrapped stdout:', text

snippet codecs_stdout.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_stdout.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Printing unicode text to sys.stdout.
	"""
	#end_pymotw_header
	
	import codecs
	import sys
	
	text = u'pi: π'
	
	# Printing to stdout may cause an encoding error
	print 'Default encoding:', sys.stdout.encoding
	print 'TTY:', sys.stdout.isatty()
	print text

snippet codecs_stdout_wrapped.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_stdout_wrapped.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Printing unicode text to sys.stdout.
	"""
	#end_pymotw_header
	
	import codecs
	import sys
	
	text = u'pi: π'
	
	# Wrap sys.stdout with a writer that knows how to handle encoding
	# Unicode data.
	wrapped_stdout = codecs.getwriter('UTF-8')(sys.stdout)
	wrapped_stdout.write(u'Via write: ' + text + '\n')
	
	# Replace sys.stdout with a writer
	sys.stdout = wrapped_stdout
	
	print u'Via print:', text

snippet codecs_to_hex.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_to_hex.py
	
	import binascii
	
	
	def to_hex(t, nbytes):
	    """Format text t as a sequence of nbyte long values
	    separated by spaces.
	    """
	    chars_per_item = nbytes * 2
	    hex_version = binascii.hexlify(t)
	    return b' '.join(
	        hex_version[start:start + chars_per_item]
	        for start in range(0, len(hex_version), chars_per_item)
	    )
	
	
	if __name__ == '__main__':
	    print(to_hex(b'abcdef', 1))
	    print(to_hex(b'abcdef', 2))

snippet codecs_zlib.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/codecs_zlib.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Demonstrate a non-Unicode codec.
	"""
	#end_pymotw_header
	
	import codecs
	from cStringIO import StringIO
	
	from codecs_to_hex import to_hex
	
	buffer = StringIO()
	stream = codecs.getwriter('zlib')(buffer)
	
	text = 'abcdefghijklmnopqrstuvwxyz\n' * 50
	
	stream.write(text)
	stream.flush()
	
	print 'Original length :', len(text)
	compressed_data = buffer.getvalue()
	print 'ZIP compressed  :', len(compressed_data)
	
	buffer = StringIO(compressed_data)
	stream = codecs.getreader('zlib')(buffer)
	
	first_line = stream.readline()
	print 'Read first line :', repr(first_line)
	
	uncompressed_data = first_line + stream.read()
	print 'Uncompressed    :', len(uncompressed_data)
	print 'Same            :', text == uncompressed_data

snippet collections_counter_arithmetic.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_counter_arithmetic.py
	# -*- coding: utf-8 -*-
	
	import collections
	
	c1 = collections.Counter(['a', 'b', 'c', 'a', 'b', 'b'])
	c2 = collections.Counter('alphabet')
	
	print('C1:', c1)
	print('C2:', c2)
	
	print('\nCombined counts:')
	print(c1 + c2)
	
	print('\nSubtraction:')
	print(c1 - c2)
	
	print('\nIntersection (taking positive minimums):')
	print(c1 & c2)
	
	print('\nUnion (taking maximums):')
	print(c1 | c2)

snippet collections_counter_elements.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_counter_elements.py
	# -*- coding: utf-8 -*-
	
	import collections
	
	c = collections.Counter('extremely')
	c['z'] = 0
	print(c)
	print(list(c.elements()))

snippet collections_counter_get_values.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_counter_get_values.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Updating counts.
	"""
	#end_pymotw_header
	
	import collections
	
	c = collections.Counter('abcdaab')
	
	for letter in 'abcde':
	    print '%s : %d' % (letter, c[letter])
	

snippet collections_counter_init.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_counter_init.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Initializing a Counter
	"""
	#end_pymotw_header
	
	import collections
	
	print collections.Counter(['a', 'b', 'c', 'a', 'b', 'b'])
	print collections.Counter({'a':2, 'b':3, 'c':1})
	print collections.Counter(a=2, b=3, c=1)

snippet collections_counter_most_common.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_counter_most_common.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Count the most common letters in words.
	"""
	#end_pymotw_header
	
	import collections
	
	c = collections.Counter()
	with open('/usr/share/dict/words', 'rt') as f:
	    for line in f:
	        c.update(line.rstrip().lower())
	
	print 'Most common:'
	for letter, count in c.most_common(3):
	    print '%s: %7d' % (letter, count)

snippet collections_counter_update.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_counter_update.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Updating counts.
	"""
	#end_pymotw_header
	
	import collections
	
	c = collections.Counter()
	print 'Initial :', c
	
	c.update('abcdaab')
	print 'Sequence:', c
	
	c.update({'a':1, 'd':5})
	print 'Dict    :', c

snippet collections_defaultdict.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_defaultdict.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Initializing a defaultdict.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import collections
	
	def default_factory():
	    return 'default value'
	
	d = collections.defaultdict(default_factory, foo='bar')
	print 'd:', d
	print 'foo =>', d['foo']
	print 'bar =>', d['bar']

snippet collections_deque_both_ends.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_deque_both_ends.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Burning a candle at both ends.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import collections
	import threading
	import time
	
	candle = collections.deque(xrange(5))
	
	def burn(direction, nextSource):
	    while True:
	        try:
	            next = nextSource()
	        except IndexError:
	            break
	        else:
	            print '%8s: %s' % (direction, next)
	            time.sleep(0.1)
	    print '%8s done' % direction
	    return
	
	left = threading.Thread(target=burn, args=('Left', candle.popleft))
	right = threading.Thread(target=burn, args=('Right', candle.pop))
	
	left.start()
	right.start()
	
	left.join()
	right.join()

snippet collections_deque_consuming.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_deque_consuming.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Removing items from a deque.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import collections
	
	print 'From the right:'
	d = collections.deque('abcdefg')
	while True:
	    try:
	        print d.pop(),
	    except IndexError:
	        break
	print
	
	print '\nFrom the left:'
	d = collections.deque(xrange(6))
	while True:
	    try:
	        print d.popleft(),
	    except IndexError:
	        break
	print

snippet collections_deque_populating.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_deque_populating.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Adding items to a deque.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import collections
	
	# Add to the right
	d1 = collections.deque()
	d1.extend('abcdefg')
	print 'extend    :', d1
	d1.append('h')
	print 'append    :', d1
	
	# Add to the left
	d2 = collections.deque()
	d2.extendleft(xrange(6))
	print 'extendleft:', d2
	d2.appendleft(6)
	print 'appendleft:', d2

snippet collections_deque.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_deque.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Double-ended queue.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import collections
	
	d = collections.deque('abcdefg')
	print 'Deque:', d
	print 'Length:', len(d)
	print 'Left end:', d[0]
	print 'Right end:', d[-1]
	
	d.remove('c')
	print 'remove(c):', d 
snippet collections_deque_rotate.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_deque_rotate.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Manipulating the order of items in a deque.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import collections
	
	d = collections.deque(xrange(10))
	print 'Normal        :', d
	
	d = collections.deque(xrange(10))
	d.rotate(2)
	print 'Right rotation:', d
	
	d = collections.deque(xrange(10))
	d.rotate(-2)
	print 'Left rotation :', d

snippet collections_namedtuple_bad_fields.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_namedtuple_bad_fields.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import collections
	
	try:
	    collections.namedtuple('Person', 'name class age gender')
	except ValueError, err:
	    print err
	
	try:
	    collections.namedtuple('Person', 'name age gender age')
	except ValueError, err:
	    print err
	    

snippet collections_namedtuple_person.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_namedtuple_person.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import collections
	
	Person = collections.namedtuple('Person', 'name age gender')
	
	print 'Type of Person:', type(Person)
	
	bob = Person(name='Bob', age=30, gender='male')
	print '\nRepresentation:', bob
	
	jane = Person(name='Jane', age=29, gender='female')
	print '\nField by name:', jane.name
	
	print '\nFields by index:'
	for p in [ bob, jane ]:
	    print '%s is a %d year old %s' % p
	     
snippet collections_namedtuple_rename.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_namedtuple_rename.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import collections
	
	with_class = collections.namedtuple(
	    'Person', 'name class age gender',
	    rename=True)
	print with_class._fields
	
	two_ages = collections.namedtuple(
	    'Person', 'name age gender age',
	    rename=True)
	print two_ages._fields

snippet collections_ordereddict_equality.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_ordereddict_equality.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Iterating over an OrderedDict
	"""
	#end_pymotw_header
	
	import collections
	
	print 'dict       :',
	d1 = {}
	d1['a'] = 'A'
	d1['b'] = 'B'
	d1['c'] = 'C'
	
	d2 = {}
	d2['c'] = 'C'
	d2['b'] = 'B'
	d2['a'] = 'A'
	
	print d1 == d2
	
	print 'OrderedDict:',
	
	d1 = collections.OrderedDict()
	d1['a'] = 'A'
	d1['b'] = 'B'
	d1['c'] = 'C'
	
	d2 = collections.OrderedDict()
	d2['c'] = 'C'
	d2['b'] = 'B'
	d2['a'] = 'A'
	
	print d1 == d2

snippet collections_ordereddict_iter.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_ordereddict_iter.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Iterating over an OrderedDict
	"""
	#end_pymotw_header
	
	import collections
	
	print 'Regular dictionary:'
	d = {}
	d['a'] = 'A'
	d['b'] = 'B'
	d['c'] = 'C'
	
	for k, v in d.items():
	    print k, v
	
	print '\nOrderedDict:'
	d = collections.OrderedDict()
	d['a'] = 'A'
	d['b'] = 'B'
	d['c'] = 'C'
	
	for k, v in d.items():
	    print k, v
	    

snippet collections_tuple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/collections_tuple.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Using a regular tuple
	"""
	#end_pymotw_header
	
	bob = ('Bob', 30, 'male')
	print 'Representation:', bob
	
	jane = ('Jane', 29, 'female')
	print '\nField by index:', jane[0]
	
	print '\nFields by index:'
	for p in [ bob, jane ]:
	    print '%s is a %d year old %s' % p

snippet compileall_compile_dir.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/compileall_compile_dir.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import compileall
	
	compileall.compile_dir('examples') 
snippet compileall_exclude_dirs.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/compileall_exclude_dirs.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import compileall
	import re
	
	compileall.compile_dir('examples', 
	    rx=re.compile(r'/subdir'))

snippet compileall_path.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/compileall_path.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import compileall
	import sys
	
	sys.path[:] = ['examples', 'notthere']
	print 'sys.path =', sys.path
	compileall.compile_path() 
snippet compileall_recursion_depth.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/compileall_recursion_depth.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import compileall
	import re
	
	compileall.compile_dir('examples', 
	    maxlevels=0, 
	    rx=re.compile(r'/\.svn')) 
snippet ConfigParser_allow_no_value.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_allow_no_value.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Reading a configuration file.
	"""
	#end_pymotw_header
	
	import ConfigParser
	
	# Require values
	try:
	    parser = ConfigParser.SafeConfigParser()
	    parser.read('allow_no_value.ini')
	except ConfigParser.ParsingError, err:
	    print 'Could not parse:', err
	
	# Allow stand-alone option names
	print '\nTrying again with allow_no_value=True'
	parser = ConfigParser.SafeConfigParser(allow_no_value=True)
	parser.read('allow_no_value.ini')
	for flag in [ 'turn_feature_on', 'turn_other_feature_on' ]:
	    print
	    print flag
	    exists = parser.has_option('flags', flag)
	    print '  has_option:', exists
	    if exists:
	        print '         get:', parser.get('flags', flag)

snippet ConfigParser_defaults.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_defaults.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Default handling.
	"""
	#end_pymotw_header
	
	import ConfigParser
	
	# Define the names of the options
	option_names =  [
	    'from-default',
	    'from-section', 'section-only',
	    'file-only', 'init-only', 'init-and-file',
	    'from-vars',
	    ]
	
	# Initialize the parser with some defaults
	parser = ConfigParser.SafeConfigParser(
	    defaults={'from-default':'value from defaults passed to init',
	              'init-only':'value from defaults passed to init',
	              'init-and-file':'value from defaults passed to init',
	              'from-section':'value from defaults passed to init',
	              'from-vars':'value from defaults passed to init',
	              })
	
	print 'Defaults before loading file:'
	defaults = parser.defaults()
	for name in option_names:
	    if name in defaults:
	        print '  %-15s = %r' % (name, defaults[name])
	
	# Load the configuration file
	parser.read('with-defaults.ini')
	
	print '\nDefaults after loading file:'
	defaults = parser.defaults()
	for name in option_names:
	    if name in defaults:
	        print '  %-15s = %r' % (name, defaults[name])
	
	# Define some local overrides
	vars = {'from-vars':'value from vars'}
	
	# Show the values of all the options
	print '\nOption lookup:'
	for name in option_names:
	    value = parser.get('sect', name, vars=vars)
	    print '  %-15s = %r' % (name, value)
	
	# Show error messages for options that do not exist
	print '\nError cases:'
	try:
	    print 'No such option :', parser.get('sect', 'no-option')
	except ConfigParser.NoOptionError, err:
	    print str(err)
	
	try:
	    print 'No such section:', parser.get('no-sect', 'no-option')
	except ConfigParser.NoSectionError, err:
	    print str(err)
	

snippet ConfigParser_has_option.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_has_option.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Reading a configuration file.
	"""
	#end_pymotw_header
	
	from ConfigParser import SafeConfigParser
	
	parser = SafeConfigParser()
	parser.read('multisection.ini')
	
	SECTIONS = [ 'wiki', 'none' ]
	OPTIONS = [ 'username', 'password', 'url', 'description' ]
	
	for section in SECTIONS:
	    has_section = parser.has_section(section)
	    print '%s section exists: %s' % (section, has_section)
	    for candidate in OPTIONS:
	        has_option = parser.has_option(section, candidate)
	        print '%s.%-12s  : %s' % (section,
	                                  candidate,
	                                  has_option,
	                                  )
	    print
	

snippet ConfigParser_has_section.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_has_section.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Reading a configuration file.
	"""
	#end_pymotw_header
	
	from ConfigParser import SafeConfigParser
	
	parser = SafeConfigParser()
	parser.read('multisection.ini')
	
	for candidate in [ 'wiki', 'bug_tracker', 'dvcs' ]:
	    print '%-12s: %s' % (candidate, parser.has_section(candidate))

snippet ConfigParser_interpolation_defaults.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_interpolation_defaults.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Reading a configuration file.
	"""
	#end_pymotw_header
	
	from ConfigParser import SafeConfigParser
	
	parser = SafeConfigParser()
	parser.read('interpolation_defaults.ini')
	
	print 'URL:', parser.get('bug_tracker', 'url')

snippet ConfigParser_interpolation_error.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_interpolation_error.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Default handling.
	"""
	#end_pymotw_header
	
	import ConfigParser
	
	parser = ConfigParser.SafeConfigParser()
	
	parser.add_section('bug_tracker')
	parser.set('bug_tracker', 'url', 'http://%(server)s:%(port)s/bugs')
	
	try:
	    print parser.get('bug_tracker', 'url')
	except ConfigParser.InterpolationMissingOptionError, err:
	    print 'ERROR:', err

snippet ConfigParser_interpolation.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_interpolation.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Reading a configuration file.
	"""
	#end_pymotw_header
	
	from ConfigParser import SafeConfigParser
	
	parser = SafeConfigParser()
	parser.read('interpolation.ini')
	
	print 'Original value       :', parser.get('bug_tracker', 'url')
	
	parser.set('bug_tracker', 'port', '9090')
	print 'Altered port value   :', parser.get('bug_tracker', 'url')
	
	print 'Without interpolation:', parser.get('bug_tracker', 'url',
	                                           raw=True)

snippet ConfigParser_interpolation_recursion.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_interpolation_recursion.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Default handling.
	"""
	#end_pymotw_header
	
	import ConfigParser
	
	parser = ConfigParser.SafeConfigParser()
	
	parser.add_section('sect')
	parser.set('sect', 'opt', '%(opt)s')
	
	try:
	    print parser.get('sect', 'opt')
	except ConfigParser.InterpolationDepthError, err:
	    print 'ERROR:', err

snippet ConfigParser_populate.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_populate.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Default handling.
	"""
	#end_pymotw_header
	
	import ConfigParser
	
	parser = ConfigParser.SafeConfigParser()
	
	parser.add_section('bug_tracker')
	parser.set('bug_tracker', 'url', 'http://localhost:8080/bugs')
	parser.set('bug_tracker', 'username', 'dhellmann')
	parser.set('bug_tracker', 'password', 'secret')
	
	for section in parser.sections():
	    print section
	    for name, value in parser.items(section):
	        print '  %s = %r' % (name, value)

snippet ConfigParser_read_many.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_read_many.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Reading a configuration file.
	"""
	#end_pymotw_header
	
	from ConfigParser import SafeConfigParser
	import glob
	
	parser = SafeConfigParser()
	
	candidates = ['does_not_exist.ini', 'also-does-not-exist.ini',
	              'simple.ini', 'multisection.ini',
	              ]
	
	found = parser.read(candidates)
	
	missing = set(candidates) - set(found)
	
	print 'Found config files:', sorted(found)
	print 'Missing files     :', sorted(missing)
	
	
	
	
	

snippet ConfigParser_read.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_read.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Reading a configuration file.
	"""
	#end_pymotw_header
	
	from ConfigParser import SafeConfigParser
	
	parser = SafeConfigParser()
	parser.read('simple.ini')
	
	print parser.get('bug_tracker', 'url')
	
	
	

snippet ConfigParser_remove.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_remove.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Reading a configuration file.
	"""
	#end_pymotw_header
	
	from ConfigParser import SafeConfigParser
	
	parser = SafeConfigParser()
	parser.read('multisection.ini')
	
	print 'Read values:\n'
	for section in parser.sections():
	    print section
	    for name, value in parser.items(section):
	        print '  %s = %r' % (name, value)
	
	parser.remove_option('bug_tracker', 'password')
	parser.remove_section('wiki')
	        
	print '\nModified values:\n'
	for section in parser.sections():
	    print section
	    for name, value in parser.items(section):
	        print '  %s = %r' % (name, value)

snippet ConfigParser_structure.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_structure.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Reading a configuration file.
	"""
	#end_pymotw_header
	
	from ConfigParser import SafeConfigParser
	
	parser = SafeConfigParser()
	parser.read('multisection.ini')
	
	for section_name in parser.sections():
	    print 'Section:', section_name
	    print '  Options:', parser.options(section_name)
	    for name, value in parser.items(section_name):
	        print '  %s = %s' % (name, value)
	    print

snippet ConfigParser_unicode.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_unicode.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Reading a configuration file.
	"""
	#end_pymotw_header
	
	from ConfigParser import SafeConfigParser
	import codecs
	
	parser = SafeConfigParser()
	
	# Open the file with the correct encoding
	with codecs.open('unicode.ini', 'r', encoding='utf-8') as f:
	    parser.readfp(f)
	
	password = parser.get('bug_tracker', 'password')
	
	print 'Password:', password.encode('utf-8')
	print 'Type    :', type(password)
	print 'repr()  :', repr(password)

snippet ConfigParser_value_types.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_value_types.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Reading a configuration file.
	"""
	#end_pymotw_header
	
	from ConfigParser import SafeConfigParser
	
	parser = SafeConfigParser()
	parser.read('types.ini')
	
	print 'Integers:'
	for name in parser.options('ints'):
	    string_value = parser.get('ints', name)
	    value = parser.getint('ints', name)
	    print '  %-12s : %-7r -> %d' % (name, string_value, value)
	
	print '\nFloats:'
	for name in parser.options('floats'):
	    string_value = parser.get('floats', name)
	    value = parser.getfloat('floats', name)
	    print '  %-12s : %-7r -> %0.2f' % (name, string_value, value)
	
	print '\nBooleans:'
	for name in parser.options('booleans'):
	    string_value = parser.get('booleans', name)
	    value = parser.getboolean('booleans', name)
	    print '  %-12s : %-7r -> %s' % (name, string_value, value)

snippet ConfigParser_write.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ConfigParser_write.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Default handling.
	"""
	#end_pymotw_header
	
	import ConfigParser
	import sys
	
	parser = ConfigParser.SafeConfigParser()
	
	parser.add_section('bug_tracker')
	parser.set('bug_tracker', 'url', 'http://localhost:8080/bugs')
	parser.set('bug_tracker', 'username', 'dhellmann')
	parser.set('bug_tracker', 'password', 'secret')
	
	parser.write(sys.stdout)

snippet contextlib_api_error.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/contextlib_api_error.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Implementing the context manager API by hand.
	"""
	#end_pymotw_header
	
	class Context(object):
	    def __init__(self, handle_error):
	        print '__init__(%s)' % handle_error
	        self.handle_error = handle_error
	    def __enter__(self):
	        print '__enter__()'
	        return self
	    def __exit__(self, exc_type, exc_val, exc_tb):
	        print '__exit__()'
	        print '  exc_type =', exc_type
	        print '  exc_val  =', exc_val
	        print '  exc_tb   =', exc_tb
	        return self.handle_error
	        
	with Context(True):
	    raise RuntimeError('error message handled')
	
	print
	
	with Context(False):
	    raise RuntimeError('error message propagated')

snippet contextlib_api_other_object.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/contextlib_api_other_object.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Implementing the context manager API by hand.
	"""
	#end_pymotw_header
	
	class WithinContext(object):
	    def __init__(self, context):
	        print 'WithinContext.__init__(%s)' % context
	    def do_something(self):
	        print 'WithinContext.do_something()'
	    def __del__(self):
	        print 'WithinContext.__del__'
	
	class Context(object):
	    def __init__(self):
	        print 'Context.__init__()'
	    def __enter__(self):
	        print 'Context.__enter__()'
	        return WithinContext(self)
	    def __exit__(self, exc_type, exc_val, exc_tb):
	        print 'Context.__exit__()'
	    
	with Context() as c:
	    c.do_something()

snippet contextlib_api.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/contextlib_api.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Implementing the context manager API by hand.
	"""
	#end_pymotw_header
	
	class Context(object):
	    def __init__(self):
	        print '__init__()'
	    def __enter__(self):
	        print '__enter__()'
	        return self
	    def __exit__(self, exc_type, exc_val, exc_tb):
	        print '__exit__()'
	        
	with Context():
	    print 'Doing work in the context'

snippet contextlib_closing.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/contextlib_closing.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	$Id$
	"""
	#end_pymotw_header
	import contextlib
	
	class Door(object):
	    def __init__(self):
	        print '  __init__()'
	    def close(self):
	        print '  close()'
	
	print 'Normal Example:'
	with contextlib.closing(Door()) as door:
	    print '  inside with statement'
	
	print '\nError handling example:'
	try:
	    with contextlib.closing(Door()) as door:
	        print '  raising from inside with statement'
	        raise RuntimeError('error message')
	except Exception, err:
	    print '  Had an error:', err
	

snippet contextlib_contextmanager.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/contextlib_contextmanager.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	$Id$
	"""
	#end_pymotw_header
	import contextlib
	
	@contextlib.contextmanager
	def make_context():
	    print '  entering'
	    try:
	        yield {}
	    except RuntimeError, err:
	        print '  ERROR:', err
	    finally:
	        print '  exiting'
	
	print 'Normal:'
	with make_context() as value:
	    print '  inside with statement:', value
	
	print '\nHandled error:'
	with make_context() as value:
	    raise RuntimeError('showing example of handling an error')
	
	print '\nUnhandled error:'
	with make_context() as value:
	    raise ValueError('this exception is not handled')

snippet contextlib_file.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/contextlib_file.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Files as context managers.
	"""
	#end_pymotw_header
	
	with open('/tmp/pymotw.txt', 'wt') as f:
	    f.write('contents go here')
	# file is automatically closed
	
	

snippet contextlib_nested.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/contextlib_nested.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	$Id$
	"""
	#end_pymotw_header
	import contextlib
	
	@contextlib.contextmanager
	def make_context(name):
	    print 'entering:', name
	    yield name
	    print 'exiting :', name
	
	with contextlib.nested(make_context('A'),
	                       make_context('B')) as (A, B):
	    print 'inside with statement:', A, B
	

snippet contextlib_nested_with.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/contextlib_nested_with.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	$Id$
	"""
	#end_pymotw_header
	import contextlib
	
	@contextlib.contextmanager
	def make_context(name):
	    print 'entering:', name
	    yield name
	    print 'exiting :', name
	
	with make_context('A') as A, make_context('B') as B:
	    print 'inside with statement:', A, B
	

snippet Cookie_coded_value.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/Cookie_coded_value.py
	
	from http import cookies
	
	
	c = cookies.SimpleCookie()
	c['integer'] = 5
	c['string_with_quotes'] = 'He said, "Hello, World!"'
	
	
	for name in ['integer', 'string_with_quotes']:
	    print(c[name].key)
	    print('  %s' % c[name])
	    print('  value=%r' % c[name].value)
	    print('  coded_value=%r' % c[name].coded_value)
	    print()

snippet Cookie_js_output.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/Cookie_js_output.py
	
	from http import cookies
	
	c = cookies.SimpleCookie()
	c['mycookie'] = 'cookie_value'
	c['another_cookie'] = 'second value'
	print(c.js_output())

snippet Cookie_Morsel.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/Cookie_Morsel.py
	
	from http import cookies
	import datetime
	
	
	def show_cookie(c):
	    print(c)
	    for key, morsel in c.items():
	        print()
	        print('key =', morsel.key)
	        print('  value =', morsel.value)
	        print('  coded_value =', morsel.coded_value)
	        for name in morsel.keys():
	            if morsel[name]:
	                print('  %s = %s' % (name, morsel[name]))
	
	
	c = cookies.SimpleCookie()
	
	# A cookie with a value that has to be encoded to fit into the header
	c['encoded_value_cookie'] = '"cookie_value"'
	c['encoded_value_cookie']['comment'] = 'Value has escaped quotes'
	
	# A cookie that only applies to part of a site
	c['restricted_cookie'] = 'cookie_value'
	c['restricted_cookie']['path'] = '/sub/path'
	c['restricted_cookie']['domain'] = 'PyMOTW'
	c['restricted_cookie']['secure'] = True
	
	# A cookie that expires in 5 minutes
	c['with_max_age'] = 'expires in 5 minutes'
	c['with_max_age']['max-age'] = 300  # seconds
	
	# A cookie that expires at a specific time
	c['expires_at_time'] = 'cookie_value'
	time_to_live = datetime.timedelta(hours=1)
	expires = datetime.datetime(2009, 2, 14, 18, 30, 14) + time_to_live
	
	# Date format: Wdy, DD-Mon-YY HH:MM:SS GMT
	expires_at_time = expires.strftime('%a, %d %b %Y %H:%M:%S')
	c['expires_at_time']['expires'] = expires_at_time
	
	show_cookie(c)

snippet Cookie_parse.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/Cookie_parse.py
	
	from http import cookies
	
	
	HTTP_COOKIE = '; '.join([
	    r'integer=5',
	    r'string_with_quotes="He said, \"Hello, World!\""',
	])
	
	
	print('From constructor:')
	c = cookies.SimpleCookie(HTTP_COOKIE)
	print(c)
	
	print()
	print('From load():')
	c = cookies.SimpleCookie()
	c.load(HTTP_COOKIE)
	print(c)

snippet Cookie_setheaders.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/Cookie_setheaders.py
	
	from http import cookies
	
	c = cookies.SimpleCookie()
	c['mycookie'] = 'cookie_value'
	print(c)

snippet copy_deep.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/copy_deep.py
	# -*- coding: utf-8 -*-
	
	import copy
	
	
	class MyClass:
	    def __init__(self, name):
	        self.name = name
	
	    def __cmp__(self, other):
	        return cmp(self.name, other.name)
	
	
	a = MyClass('a')
	my_list = [a]
	dup = copy.deepcopy(my_list)
	
	print('             my_list:', my_list)
	print('                 dup:', dup)
	print('      dup is my_list:', (dup is my_list))
	print('      dup == my_list:', (dup == my_list))
	print('dup[0] is my_list[0]:', (dup[0] is my_list[0]))
	print('dup[0] == my_list[0]:', (dup[0] == my_list[0]))

snippet copy_hooks.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/copy_hooks.py
	# -*- coding: utf-8 -*-
	
	import copy
	
	
	class MyClass:
	    def __init__(self, name):
	        self.name = name
	
	    def __cmp__(self, other):
	        return cmp(self.name, other.name)
	
	    def __copy__(self):
	        print('__copy__()')
	        return MyClass(self.name)
	
	    def __deepcopy__(self, memo):
	        print('__deepcopy__(%s)' % str(memo))
	        return MyClass(copy.deepcopy(self.name, memo))
	
	
	a = MyClass('a')
	
	sc = copy.copy(a)
	dc = copy.deepcopy(a)

snippet copy_recursion.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/copy_recursion.py
	# -*- coding: utf-8 -*-
	
	import copy
	import pprint
	
	
	class Graph:
	
	    def __init__(self, name, connections):
	        self.name = name
	        self.connections = connections
	
	    def add_connection(self, other):
	        self.connections.append(other)
	
	    def __repr__(self):
	        return 'Graph(name=%s, id=%s)' % (self.name, id(self))
	
	    def __deepcopy__(self, memo):
	        print('\nCalling __deepcopy__ for %r' % self)
	        if self in memo:
	            existing = memo.get(self)
	            print('  Already copied to %r' % existing)
	            return existing
	        print('  Memo dictionary:')
	        pprint.pprint(memo, indent=4, width=40)
	        dup = Graph(copy.deepcopy(self.name, memo), [])
	        print('  Copying to new object %s' % dup)
	        memo[self] = dup
	        for c in self.connections:
	            dup.add_connection(copy.deepcopy(c, memo))
	        return dup
	
	
	root = Graph('root', [])
	a = Graph('a', [root])
	b = Graph('b', [a, root])
	root.add_connection(a)
	root.add_connection(b)
	
	dup = copy.deepcopy(root)

snippet copy_shallow.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/copy_shallow.py
	# -*- coding: utf-8 -*-
	
	import copy
	
	
	class MyClass:
	    def __init__(self, name):
	        self.name = name
	
	    def __cmp__(self, other):
	        return cmp(self.name, other.name)
	
	
	a = MyClass('a')
	my_list = [a]
	dup = copy.copy(my_list)
	
	print('             my_list:', my_list)
	print('                 dup:', dup)
	print('      dup is my_list:', (dup is my_list))
	print('      dup == my_list:', (dup == my_list))
	print('dup[0] is my_list[0]:', (dup[0] is my_list[0]))
	print('dup[0] == my_list[0]:', (dup[0] == my_list[0]))

snippet csv_dialect.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/csv_dialect.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import csv
	
	csv.register_dialect('pipes', delimiter='|')
	
	with open('testdata.pipes', 'r') as f:
	    reader = csv.reader(f, dialect='pipes')
	    for row in reader:
	        print row

snippet csv_dialect_sniffer.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/csv_dialect_sniffer.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import csv
	from StringIO import StringIO
	import textwrap
	
	csv.register_dialect('escaped',
	                     escapechar='\\',
	                     doublequote=False,
	                     quoting=csv.QUOTE_NONE)
	csv.register_dialect('singlequote',
	                     quotechar="'",
	                     quoting=csv.QUOTE_ALL)
	
	# Generate sample data for all known dialects
	samples = []
	for name in sorted(csv.list_dialects()):
	    buffer = StringIO()
	    dialect = csv.get_dialect(name)
	    writer = csv.writer(buffer, dialect=dialect)
	    writer.writerow(
	        ('col1', 1, '10/01/2010',
	         'Special chars " \' %s to parse' % dialect.delimiter)
	        )
	    samples.append( (name, dialect, buffer.getvalue()) )
	
	# Guess the dialect for a given sample, and then use the results to parse
	# the data.
	sniffer = csv.Sniffer()
	for name, expected, sample in samples:
	    print 'Dialect: "%s"\n' % name
	    dialect = sniffer.sniff(sample, delimiters=',\t')
	    reader = csv.reader(StringIO(sample), dialect=dialect)
	    print reader.next()
	    print
	    

snippet csv_dialect_variations.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/csv_dialect_variations.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import csv
	import sys
	
	csv.register_dialect('escaped',
	                     escapechar='\\',
	                     doublequote=False,
	                     quoting=csv.QUOTE_NONE,
	                     )
	csv.register_dialect('singlequote',
	                     quotechar="'",
	                     quoting=csv.QUOTE_ALL,
	                     )
	
	quoting_modes = dict( (getattr(csv,n), n)
	                      for n in dir(csv)
	                      if n.startswith('QUOTE_')
	                      )
	
	for name in sorted(csv.list_dialects()):
	    print 'Dialect: "%s"\n' % name
	    dialect = csv.get_dialect(name)
	
	    print '  delimiter   = %-6r    skipinitialspace = %r' % (
	        dialect.delimiter, dialect.skipinitialspace)
	    print '  doublequote = %-6r    quoting          = %s' % (
	        dialect.doublequote, quoting_modes[dialect.quoting])
	    print '  quotechar   = %-6r    lineterminator   = %r' % (
	        dialect.quotechar, dialect.lineterminator)
	    print '  escapechar  = %-6r' % dialect.escapechar
	    print
	    
	    writer = csv.writer(sys.stdout, dialect=dialect)
	    writer.writerow(
	        ('col1', 1, '10/01/2010',
	         'Special chars: " \' %s to parse' % dialect.delimiter)
	        )
	    print
	

snippet csv_dictreader.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/csv_dictreader.py
	
	"""Dictionary reader.
	
	"""
	
	__module_id__ = "$Id$"
	
	import csv
	import sys
	
	with open(sys.argv[1], 'rt') as f:
	    reader = csv.DictReader(f)
	    for row in reader:
	        print row

snippet csv_dictwriter.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/csv_dictwriter.py
	
	"""Example of writing a comma separated value file.
	
	"""
	
	__module_id__ = "$Id$"
	
	import csv
	import sys
	
	with open(sys.argv[1], 'wt') as f:
	
	    fieldnames = ('Title 1', 'Title 2', 'Title 3')
	    headers = dict( (n,n) for n in fieldnames )
	
	    writer = csv.DictWriter(f, fieldnames=fieldnames)
	    writer.writerow(headers)
	    
	    for i in range(3):
	        writer.writerow({ 'Title 1':i+1,
	                          'Title 2':chr(ord('a') + i),
	                          'Title 3':'08/%02d/07' % (i+1),
	                          })
	
	print open(sys.argv[1], 'rt').read()

snippet csv_list_dialects.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/csv_list_dialects.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""List the registered dialects.
	"""
	#end_pymotw_header
	
	import csv
	
	print csv.list_dialects()

snippet csv_reader.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/csv_reader.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Example of reading a comma separated value file.
	"""
	
	__module_id__ = "$Id$"
	#end_pymotw_header
	
	import csv
	import sys
	
	with open(sys.argv[1], 'rt') as f:
	    reader = csv.reader(f)
	    for row in reader:
	        print row

snippet csv_writer.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/csv_writer.py
	#!/usr/bin/env python
	"""Example of writing a comma separated value file.
	"""
	#end_pymotw_header
	
	import csv
	import sys
	
	with open(sys.argv[1], 'wt') as f:
	    writer = csv.writer(f)
	    writer.writerow( ('Title 1', 'Title 2', 'Title 3') )
	    for i in range(3):
	        writer.writerow( (i+1,
	                          chr(ord('a') + i),
	                          '08/%02d/07' % (i+1),
	                          )
	                         )
	
	print open(sys.argv[1], 'rt').read()

snippet csv_writer_quoted.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/csv_writer_quoted.py
	
	"""Example of writing a comma separated value file, using more quoting.
	
	"""
	
	__module_id__ = "$Id$"
	
	import csv
	import sys
	
	with open(sys.argv[1], 'wt') as f:
	    writer = csv.writer(f, quoting=csv.QUOTE_NONNUMERIC)
	    writer.writerow( ('Title 1', 'Title 2', 'Title 3') )
	    for i in range(3):
	        writer.writerow( (i+1, chr(ord('a') + i), '08/%02d/07' % (i+1)) )
	
	print open(sys.argv[1], 'rt').read()

snippet datetime_comparing.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_comparing.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Comparing dates and times.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	import time
	
	print 'Times:'
	t1 = datetime.time(12, 55, 0)
	print '  t1:', t1
	t2 = datetime.time(13, 5, 0)
	print '  t2:', t2
	print '  t1 < t2:', t1 < t2
	
	print
	print 'Dates:'
	d1 = datetime.date.today()
	print '  d1:', d1
	d2 = datetime.date.today() + datetime.timedelta(days=1)
	print '  d2:', d2
	print '  d1 > d2:', d1 > d2

snippet datetime_date_fromordinal.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_date_fromordinal.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	import time
	
	o = 733114
	print 'o               :', o
	print 'fromordinal(o)  :', datetime.date.fromordinal(o)
	
	t = time.time()
	print 't               :', t
	print 'fromtimestamp(t):', datetime.date.fromtimestamp(t)

snippet datetime_date_fromothervalue.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_date_fromothervalue.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Creating datetime.date() instances from other types of values.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	import time
	
	o = 733114
	print 'o:', o
	print 'fromordinal(o):', datetime.date.fromordinal(o)
	t = time.time()
	print 't:', t
	print 'fromtimestamp(t):', datetime.date.fromtimestamp(t) 
snippet datetime_date_isocalendar.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_date_isocalendar.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Demonstrate the ISO calendar features of date().
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	import locale
	
	day_names = [ locale.nl_langinfo(x)
	              for x in (locale.DAY_1, locale.DAY_2, locale.DAY_3, locale.DAY_4, 
	              locale.DAY_5, locale.DAY_6, locale.DAY_7, locale.DAY_1) ]
	                  
	print 'US days :', day_names[:-1]
	print 'ISO days:', day_names[1:]
	
	d = datetime.date(2007, 12, 30)
	for i in range(7):
	    delta = datetime.timedelta(days=i)
	    date = d + delta
	    print
	    print day_names[date.weekday()], date
	    print '\tISO Weekday:', day_names[date.isoweekday()]
	    print '\tISO Calendar:', date.isocalendar()

snippet datetime_date_math.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_date_math.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Calculations with dates.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	today = datetime.date.today()
	print 'Today    :', today
	
	one_day = datetime.timedelta(days=1)
	print 'One day  :', one_day
	
	yesterday = today - one_day
	print 'Yesterday:', yesterday
	
	tomorrow = today + one_day
	print 'Tomorrow :', tomorrow
	
	print
	print 'tomorrow - yesterday:', tomorrow - yesterday
	print 'yesterday - tomorrow:', yesterday - tomorrow

snippet datetime_date_minmax.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_date_minmax.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Minimum and maximum values for dates.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	print 'Earliest  :', datetime.date.min
	print 'Latest    :', datetime.date.max
	print 'Resolution:', datetime.date.resolution 
snippet datetime_date.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_date.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Some basic date() methods and attributes.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	today = datetime.date.today()
	print today
	print 'ctime  :', today.ctime()
	tt = today.timetuple()
	print 'tuple  : tm_year  =', tt.tm_year
	print '         tm_mon   =', tt.tm_mon
	print '         tm_mday  =', tt.tm_mday
	print '         tm_hour  =', tt.tm_hour
	print '         tm_min   =', tt.tm_min
	print '         tm_sec   =', tt.tm_sec
	print '         tm_wday  =', tt.tm_wday
	print '         tm_yday  =', tt.tm_yday
	print '         tm_isdst =', tt.tm_isdst
	print 'ordinal:', today.toordinal()
	print 'Year   :', today.year
	print 'Mon    :', today.month
	print 'Day    :', today.day

snippet datetime_date_replace.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_date_replace.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Creating dates from existing objects.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	d1 = datetime.date(2008, 3, 29)
	print 'd1:', d1.ctime()
	
	d2 = d1.replace(year=2009)
	print 'd2:', d2.ctime()

snippet datetime_datetime_combine.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_datetime_combine.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	t = datetime.time(1, 2, 3)
	print 't :', t
	
	d = datetime.date.today()
	print 'd :', d
	
	dt = datetime.datetime.combine(d, t)
	print 'dt:', dt 
snippet datetime_datetime_math.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_datetime_math.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Calculations with datetime values.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	today = datetime.datetime.today()
	print 'Today    :', today
	
	yesterday = today - datetime.timedelta(days=1)
	print 'Yesterday:', yesterday
	
	tomorrow = today + datetime.timedelta(days=1)
	print 'Tomorrow :', tomorrow
	
	print 'tomorrow - yesterday:', tomorrow - yesterday
	print 'yesterday - tomorrow:', yesterday - tomorrow
	
	print 'tomorrow > yesterday:', tomorrow > yesterday 
snippet datetime_datetime_minmax.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_datetime_minmax.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""The range of valid datetime values.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	print 'Earliest  :', datetime.datetime.min
	print 'Latest    :', datetime.datetime.max
	print 'Resolution:', datetime.datetime.resolution

snippet datetime_datetime.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_datetime.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Combining dates and times into a single object.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	print 'Now    :', datetime.datetime.now()
	print 'Today  :', datetime.datetime.today()
	print 'UTC Now:', datetime.datetime.utcnow()
	print
	
	FIELDS = [ 'year', 'month', 'day',
	           'hour', 'minute', 'second', 'microsecond',
	           ]
	
	d = datetime.datetime.now()
	for attr in FIELDS:
	    print '%15s: %s' % (attr, getattr(d, attr))

snippet datetime_datetime_strptime.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_datetime_strptime.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	format = "%a %b %d %H:%M:%S %Y"
	
	today = datetime.datetime.today()
	print 'ISO     :', today
	
	s = today.strftime(format)
	print 'strftime:', s
	
	d = datetime.datetime.strptime(s, format)
	print 'strptime:', d.strftime(format)

snippet datetime_timedelta.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_timedelta.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	print "microseconds:", datetime.timedelta(microseconds=1)
	print "milliseconds:", datetime.timedelta(milliseconds=1)
	print "seconds     :", datetime.timedelta(seconds=1)
	print "minutes     :", datetime.timedelta(minutes=1)
	print "hours       :", datetime.timedelta(hours=1)
	print "days        :", datetime.timedelta(days=1)
	print "weeks       :", datetime.timedelta(weeks=1)

snippet datetime_timedelta_total_seconds.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_timedelta_total_seconds.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	for delta in [datetime.timedelta(microseconds=1),
	              datetime.timedelta(milliseconds=1),
	              datetime.timedelta(seconds=1),
	              datetime.timedelta(minutes=1),
	              datetime.timedelta(hours=1),
	              datetime.timedelta(days=1),
	              datetime.timedelta(weeks=1),
	              ]:
	    print '%15s = %s seconds' % (delta, delta.total_seconds())

snippet datetime_time_minmax.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_time_minmax.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Valid range of time values.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	print 'Earliest  :', datetime.time.min
	print 'Latest    :', datetime.time.max
	print 'Resolution:', datetime.time.resolution 
snippet datetime_time.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_time.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Basic features of time objects.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	t = datetime.time(1, 2, 3)
	print t
	print 'hour       :', t.hour
	print 'minute     :', t.minute
	print 'second     :', t.second
	print 'microsecond:', t.microsecond
	print 'tzinfo     :', t.tzinfo

snippet datetime_time_resolution.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/datetime_time_resolution.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Time resolution.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import datetime
	
	for m in [ 1, 0, 0.1, 0.6 ]:
	    try:
	        print '%02.1f :' % m, datetime.time(0, 0, 0, microsecond=m)
	    except TypeError, err:
	        print 'ERROR:', err

snippet decimal_context_manager.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/decimal_context_manager.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	
	with decimal.localcontext() as c:
	    c.prec = 2
	    print 'Local precision:', c.prec
	    print '3.14 / 3 =', (decimal.Decimal('3.14') / 3)
	
	print
	print 'Default precision:', decimal.getcontext().prec
	print '3.14 / 3 =', (decimal.Decimal('3.14') / 3)

snippet decimal_create.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/decimal_create.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	
	fmt = '{0:<25} {1:<25}'
	print fmt.format('Input', 'Output')
	print fmt.format('-' * 25, '-' * 25)
	
	# Integer
	print fmt.format(5, decimal.Decimal(5))
	
	# String
	print fmt.format('3.14', decimal.Decimal('3.14'))
	
	# Float
	f = 0.1
	print fmt.format(repr(f), decimal.Decimal(str(f)))
	print fmt.format('%.23g' % f,
	                 str(decimal.Decimal.from_float(f))[:25])

snippet decimal_getcontext.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/decimal_getcontext.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	import pprint
	
	context = decimal.getcontext()
	
	print 'Emax     =', context.Emax
	print 'Emin     =', context.Emin
	print 'capitals =', context.capitals
	print 'prec     =', context.prec
	print 'rounding =', context.rounding
	print 'flags    ='
	pprint.pprint(context.flags)
	print 'traps    ='
	pprint.pprint(context.traps)

snippet decimal_instance_context.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/decimal_instance_context.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	
	# Set up a context with limited precision
	c = decimal.getcontext().copy()
	c.prec = 3
	
	# Create our constant
	pi = c.create_decimal('3.1415')
	
	# The constant value is rounded off
	print 'PI    :', pi
	
	# The result of using the constant uses the global context
	print 'RESULT:', decimal.Decimal('2.01') * pi

snippet decimal_log.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/decimal_log.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	
	d = decimal.Decimal(100)
	print 'd     :', d
	print 'log10 :', d.log10()
	print 'ln    :', d.ln()

snippet decimal_operators.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/decimal_operators.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	
	a = decimal.Decimal('5.1')
	b = decimal.Decimal('3.14')
	c = 4
	d = 3.14
	
	print 'a     =', repr(a)
	print 'b     =', repr(b)
	print 'c     =', repr(c)
	print 'd     =', repr(d)
	print
	
	print 'a + b =', a + b
	print 'a - b =', a - b
	print 'a * b =', a * b
	print 'a / b =', a / b
	print
	
	print 'a + c =', a + c
	print 'a - c =', a - c
	print 'a * c =', a * c
	print 'a / c =', a / c
	print
	
	print 'a + d =',
	try:
	    print a + d
	except TypeError, e:
	    print e

snippet decimal_precision.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/decimal_precision.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	
	d = decimal.Decimal('0.123456')
	
	for i in range(4):
	    decimal.getcontext().prec = i
	    print i, ':', d, d * 1

snippet decimal_rounding.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/decimal_rounding.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	
	context = decimal.getcontext()
	
	ROUNDING_MODES = [ 
	    'ROUND_CEILING', 
	    'ROUND_DOWN',
	    'ROUND_FLOOR', 
	    'ROUND_HALF_DOWN', 
	    'ROUND_HALF_EVEN',
	    'ROUND_HALF_UP',
	    'ROUND_UP',
	    'ROUND_05UP',
	    ]
	
	header_fmt = '{:10} ' + ' '.join(['{:^8}'] * 6)
	
	print header_fmt.format(' ',
	                        '1/8 (1)', '-1/8 (1)',
	                        '1/8 (2)', '-1/8 (2)',
	                        '1/8 (3)', '-1/8 (3)',
	                        )
	for rounding_mode in ROUNDING_MODES:
	    print '{0:10}'.format(rounding_mode.partition('_')[-1]),
	    for precision in [ 1, 2, 3 ]:
	        context.prec = precision
	        context.rounding = getattr(decimal, rounding_mode)
	        value = decimal.Decimal(1) / decimal.Decimal(8)
	        print '{0:^8}'.format(value),
	        value = decimal.Decimal(-1) / decimal.Decimal(8)
	        print '{0:^8}'.format(value),
	    print

snippet decimal_special.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/decimal_special.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	
	for value in [ 'Infinity', 'NaN', '0' ]:
	    print decimal.Decimal(value), decimal.Decimal('-' + value)
	print
	
	# Math with infinity
	print 'Infinity + 1:', (decimal.Decimal('Infinity') + 1)
	print '-Infinity + 1:', (decimal.Decimal('-Infinity') + 1)
	
	# Print comparing NaN
	print decimal.Decimal('NaN') == decimal.Decimal('Infinity')
	print decimal.Decimal('NaN') != decimal.Decimal(1) 
snippet decimal_thread_context.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/decimal_thread_context.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	import threading
	from Queue import PriorityQueue
	
	class Multiplier(threading.Thread):
	    def __init__(self, a, b, prec, q):
	        self.a = a
	        self.b = b
	        self.prec = prec
	        self.q = q
	        threading.Thread.__init__(self)
	    def run(self):
	        c = decimal.getcontext().copy()
	        c.prec = self.prec
	        decimal.setcontext(c)
	        self.q.put( (self.prec, a * b) )
	        return
	
	a = decimal.Decimal('3.14')
	b = decimal.Decimal('1.234')
	# A PriorityQueue will return values sorted by precision, no matter
	# what order the threads finish.
	q = PriorityQueue() 
	threads = [ Multiplier(a, b, i, q) for i in range(1, 6) ]
	for t in threads:
	    t.start()
	
	for t in threads:
	    t.join()
	
	for i in range(5):
	    prec, value = q.get()
	    print prec, '\t', value

snippet decimal_tuple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/decimal_tuple.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	
	# Tuple
	t = (1, (1, 1), -2)
	print 'Input  :', t
	print 'Decimal:', decimal.Decimal(t)
	

snippet difflib_context.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/difflib_context.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Context diff example
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import difflib
	from difflib_data import *
	
	diff = difflib.context_diff(text1_lines, text2_lines, lineterm='')
	print '\n'.join(list(diff))

snippet difflib_data.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/difflib_data.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Data for use with difflib examples.
	"""
	
	#end_pymotw_header
	
	text1 = """Lorem ipsum dolor sit amet, consectetuer adipiscing
	elit. Integer eu lacus accumsan arcu fermentum euismod. Donec
	pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis
	pharetra tortor.  In nec mauris eget magna consequat
	convallis. Nam sed sem vitae odio pellentesque interdum. Sed
	consequat viverra nisl. Suspendisse arcu metus, blandit quis,
	rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy
	molestie orci. Praesent nisi elit, fringilla ac, suscipit non,
	tristique vel, mauris. Curabitur vel lorem id nisl porta
	adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate
	tristique enim. Donec quis lectus a justo imperdiet tempus."""
	
	text1_lines = text1.splitlines()
	
	text2 = """Lorem ipsum dolor sit amet, consectetuer adipiscing
	elit. Integer eu lacus accumsan arcu fermentum euismod. Donec
	pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis
	pharetra tortor. In nec mauris eget magna consequat
	convallis. Nam cras vitae mi vitae odio pellentesque interdum. Sed
	consequat viverra nisl. Suspendisse arcu metus, blandit quis,
	rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy
	molestie orci. Praesent nisi elit, fringilla ac, suscipit non,
	tristique vel, mauris. Curabitur vel lorem id nisl porta
	adipiscing. Duis vulputate tristique enim. Donec quis lectus a
	justo imperdiet tempus.  Suspendisse eu lectus. In nunc."""
	
	text2_lines = text2.splitlines()

snippet difflib_differ.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/difflib_differ.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Differ example
	"""
	
	#end_pymotw_header
	
	import difflib
	from difflib_data import *
	
	d = difflib.Differ()
	diff = d.compare(text1_lines, text2_lines)
	print '\n'.join(diff)

snippet difflib_html.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/difflib_html.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""HtmlDiff example
	"""
	
	#end_pymotw_header
	
	import difflib
	from difflib_data import *
	
	d = difflib.HtmlDiff()
	print d.make_table(text1_lines, text2_lines)

snippet difflib_junk.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/difflib_junk.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	
	"""Using the junk filter feature.
	
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	# This example is adapted from the source for difflib.py.
	
	from difflib import SequenceMatcher
	
	def show_results(s):
	    i, j, k = s.find_longest_match(0, 5, 0, 9)
	    print '  i = %d' % i
	    print '  j = %d' % j
	    print '  k = %d' % k
	    print '  A[i:i+k] = %r' % A[i:i+k]
	    print '  B[j:j+k] = %r' % B[j:j+k]
	
	A = " abcd"
	B = "abcd abcd"
	
	print 'A = %r' % A
	print 'B = %r' % B
	
	print '\nWithout junk detection:'
	show_results(SequenceMatcher(None, A, B))
	
	print '\nTreat spaces as junk:'
	show_results(SequenceMatcher(lambda x: x==" ", A, B))
	

snippet difflib_ndiff.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/difflib_ndiff.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""ndiff example
	"""
	
	#end_pymotw_header
	
	import difflib
	from difflib_data import *
	
	diff = difflib.ndiff(text1_lines, text2_lines)
	print '\n'.join(list(diff))

snippet difflib_seq.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/difflib_seq.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""SequenceMatcher example
	"""
	
	#end_pymotw_header
	
	import difflib
	from difflib_data import *
	
	s1 = [ 1, 2, 3, 5, 6, 4 ]
	s2 = [ 2, 3, 5, 4, 6, 1 ]
	
	print 'Initial data:'
	print 's1 =', s1
	print 's2 =', s2
	print 's1 == s2:', s1==s2
	print
	
	matcher = difflib.SequenceMatcher(None, s1, s2)
	for tag, i1, i2, j1, j2 in reversed(matcher.get_opcodes()):
	
	    if tag == 'delete':
	        print 'Remove %s from positions [%d:%d]' % \
	            (s1[i1:i2], i1, i2)
	        del s1[i1:i2]
	
	    elif tag == 'equal':
	        print 's1[%d:%d] and s2[%d:%d] are the same' % \
	            (i1, i2, j1, j2)
	
	    elif tag == 'insert':
	        print 'Insert %s from s2[%d:%d] into s1 at %d' % \
	            (s2[j1:j2], j1, j2, i1)
	        s1[i1:i2] = s2[j1:j2]
	
	    elif tag == 'replace':
	        print 'Replace %s from s1[%d:%d] with %s from s2[%d:%d]' % (
	            s1[i1:i2], i1, i2, s2[j1:j2], j1, j2)
	        s1[i1:i2] = s2[j1:j2]
	
	    print '  s1 =', s1
	
	print 's1 == s2:', s1==s2

snippet difflib_unified.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/difflib_unified.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Unified diff example
	"""
	
	#end_pymotw_header
	
	import difflib
	from difflib_data import *
	
	diff = difflib.unified_diff(text1_lines,
	                            text2_lines,
	                            lineterm='',
	                            )
	print '\n'.join(list(diff))

snippet dircache_annotate.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dircache_annotate.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import dircache
	from pprint import pprint
	import os
	
	path = '../..'
	
	contents = dircache.listdir(path)
	
	annotated = contents[:]
	dircache.annotate(path, annotated)
	
	fmt = '%25s\t%25s'
	
	print fmt % ('ORIGINAL', 'ANNOTATED')
	print fmt % (('-' * 25,)*2)
	
	for o, a in zip(contents, annotated):
	    print fmt % (o, a)

snippet dircache_listdir_file_added.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dircache_listdir_file_added.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import dircache
	import os
	
	path = '/tmp'
	file_to_create = os.path.join(path, 'pymotw_tmp.txt')
	
	# Look at the directory contents
	first = dircache.listdir(path)
	
	# Create the new file
	open(file_to_create, 'wt').close()
	
	# Rescan the directory
	second = dircache.listdir(path)
	
	# Remove the file we created
	os.unlink(file_to_create)
	
	print 'Identical :', first is second
	print 'Equal     :', first == second
	print 'Difference:', list(set(second) - set(first)) 
snippet dircache_listdir.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dircache_listdir.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import dircache
	
	path = '.'
	first = dircache.listdir(path)
	second = dircache.listdir(path)
	
	print 'Contents :'
	for name in first:
	    print '  ', name
	
	print
	print 'Identical:', first is second
	print 'Equal    :', first == second

snippet dircache_reset.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dircache_reset.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import dircache
	
	path = '/tmp'
	first = dircache.listdir(path)
	dircache.reset()
	second = dircache.listdir(path)
	
	print 'Identical :', first is second
	print 'Equal     :', first == second
	print 'Difference:', list(set(second) - set(first))

snippet dis_class.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dis_class.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	import dis
	
	class MyObject(object):
	    """Example for dis."""
	    
	    CLASS_ATTRIBUTE = 'some value'
	    
	    def __str__(self):
	        return 'MyObject(%s)' % self.name
	    
	    def __init__(self, name):
	        self.name = name
	
	dis.dis(MyObject)

snippet dis_constant_folding.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dis_constant_folding.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	# Folded
	i = 1 + 2
	f = 3.4 * 5.6
	s = 'Hello,' + ' World!'
	
	# Not folded
	I = i * 3 * 4
	F = f / 2 / 3
	S = s + '\n' + 'Fantastic!' 
snippet dis_eliminate_loop.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dis_eliminate_loop.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	import operator
	import itertools
	
	class Dictionary(object):
	
	    def __init__(self, words):
	        self.by_letter = {}
	        self.load_data(words)
	
	    def load_data(self, words):
	        # Arrange by letter
	        grouped = itertools.groupby(words, key=operator.itemgetter(0))
	        # Save arranged sets of words
	        self.by_letter = dict((group[0][0], group) for group in grouped)
	         
snippet dis_faster_loop.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dis_faster_loop.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	import string
	
	class Dictionary(object):
	
	    def __init__(self, words):
	        self.by_letter = dict( (letter, []) 
	                                for letter in string.letters)
	        self.load_data(words)
	
	    def load_data(self, words):
	        for word in words:
	            self.by_letter[word[0]].append(word)

snippet dis_fastest_loop.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dis_fastest_loop.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	import collections
	
	class Dictionary(object):
	
	    def __init__(self, words):
	        self.by_letter = collections.defaultdict(list)
	        self.load_data(words)
	
	    def load_data(self, words):
	        by_letter = self.by_letter
	        for word in words:
	            by_letter[word[0]].append(word)

snippet dis_function.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dis_function.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	def f(*args):
	    nargs = len(args)
	    print nargs, args
	
	if __name__ == '__main__':
	    import dis
	    dis.dis(f)

snippet dis_loops.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dis_loops.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import dis
	import timeit
	
	def add(words):
	    result = ''
	    for word in words:
	        result = result + word
	    return result
	
	def add_inline(words):
	    result = ''
	    for word in words:
	        result += word
	    return result
	
	def join(words):
	    return ''.join(words)
	
	if __name__ == '__main__':
	    for fname in [ 'add', 'add_inline', 'join' ]:
	        print 'FUNCTION:', fname
	        print
	        f = globals()[fname]
	        dis.dis(f)
	        t = timeit.Timer(
	            'd = %(fname)s(words)' % locals(), 
	            """from dis_loops import %(fname)s; words = [l.strip() for l in open('/usr/share/dict/words', 'rt')]
	            """ % locals()
	            )
	        iterations = 3
	        print 'TIME: %0.4f' % t.timeit(iterations)
	        print

snippet dis_simple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dis_simple.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	my_dict = { 'a':1 }

snippet dis_slow_loop.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dis_slow_loop.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	class Dictionary(object):
	
	    def __init__(self, words):
	        self.by_letter = {}
	        self.load_data(words)
	
	    def load_data(self, words):
	        for word in words:
	            try:
	                self.by_letter[word[0]].append(word)
	            except KeyError:
	                self.by_letter[word[0]] = [word]

snippet dis_test_loop.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dis_test_loop.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import dis
	import sys
	import timeit
	
	module_name = sys.argv[1]
	module = __import__(module_name)
	Dictionary = module.Dictionary
	
	dis.dis(Dictionary.load_data)
	print
	t = timeit.Timer(
	    'd = Dictionary(words)', 
	    """from %(module_name)s import Dictionary
	words = [l.strip() for l in open('/usr/share/dict/words', 'rt')]
	    """ % locals()
	    )
	iterations = 10
	print 'TIME: %0.4f' % (t.timeit(iterations)/iterations)

snippet dis_traceback.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/dis_traceback.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	i = 1
	j = 0
	k = 3
	
	# ... many lines removed ...
	
	try:
	    result = k * (i / j) + (i / k)
	except:
	    import dis
	    import sys
	    exc_type, exc_value, exc_tb = sys.exc_info()
	    dis.distb(exc_tb)

snippet doctest_blankline_fail.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_blankline_fail.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Blank lines in the input cause mis-matches.
	"""
	#end_pymotw_header
	
	def double_space(lines):
	    """Prints a list of lines double-spaced.
	
	    >>> double_space(['Line one.', 'Line two.'])
	    Line one.
	    
	    Line two.
	    
	    """
	    for l in lines:
	        print l
	        print
	    return
	
	

snippet doctest_blankline.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_blankline.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Blank lines in the input cause mis-matches.
	"""
	#end_pymotw_header
	
	def double_space(lines):
	    """Prints a list of lines double-spaced.
	
	    >>> double_space(['Line one.', 'Line two.'])
	    Line one.
	    <BLANKLINE>
	    Line two.
	    <BLANKLINE>
	    """
	    for l in lines:
	        print l
	        print
	    return
	
	

snippet doctest_docstrings.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_docstrings.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	"""Tests can appear in any docstring within the module.
	
	Module-level tests cross class and function boundaries.
	
	>>> A('a') == B('b')
	False
	"""
	
	class A(object):
	    """Simple class.
	
	    >>> A('instance_name').name
	    'instance_name'
	    """
	    def __init__(self, name):
	        self.name = name
	    def method(self):
	        """Returns an unusual value.
	
	        >>> A('name').method()
	        'eman'
	        """
	        return ''.join(reversed(list(self.name)))
	
	class B(A):
	    """Another simple class.
	        
	    >>> B('different_name').name
	    'different_name'
	    """

snippet doctest_ellipsis.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_ellipsis.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Ignoring part of the verification value with ELIPSIS
	"""
	#end_pymotw_header
	
	class MyClass(object):
	    pass
	
	def unpredictable(obj):
	    """Returns a new list containing obj.
	
	    >>> unpredictable(MyClass()) #doctest: +ELLIPSIS
	    [<doctest_ellipsis.MyClass object at 0x...>]
	    """
	    return [obj]

snippet doctest_extra_space.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_extra_space.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Whitespace at the end of a line can cause a mis-match.
	"""
	#end_pymotw_header
	
	def my_function(a, b):
	    """
	    >>> my_function(2, 3)
	    6 
	    >>> my_function('a', 3)
	    'aaa'
	    """
	    return a * b

snippet doctest_hashed_values.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_hashed_values.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Demonstrate how insertion order affects dictonaries and sets.
	"""
	#end_pymotw_header
	
	keys = [ 'a', 'aa', 'aaa' ]
	
	d1 = dict( (k,len(k)) for k in keys )
	d2 = dict( (k,len(k)) for k in reversed(keys) )
	
	print 'd1:', d1
	print 'd2:', d2
	print 'd1 == d2:', d1 == d2
	
	s1 = set(keys)
	s2 = set(reversed(keys))
	
	print
	print 's1:', s1
	print 's2:', s2
	print 's1 == s2:', s1 == s2

snippet doctest_hashed_values_tests.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_hashed_values_tests.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Demonstrate how insertion order affects dictonaries and sets.
	"""
	#end_pymotw_header
	
	def group_by_length(words):
	    """Returns a dictionary grouping words into sets by length.
	
	    >>> grouped = group_by_length([ 'python', 'module', 'of',
	    ... 'the', 'week' ])
	    >>> grouped == { 2:set(['of']),
	    ...              3:set(['the']),
	    ...              4:set(['week']),
	    ...              6:set(['python', 'module']),
	    ...              }
	    True
	
	    """
	    d = {}
	    for word in words:
	        s = d.setdefault(len(word), set())
	        s.add(word)
	    return d
	

snippet doctest_in_help.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_in_help.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Tests for this module are in the external help text.
	"""
	#end_pymotw_header
	
	def my_function(a, b):
	    """Returns a*b
	    """
	    return a * b
	    
	
	
	
	

snippet doctest_mutable_globals.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_mutable_globals.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Tests that modify module-level global values.
	"""
	#end_pymotw_header
	
	_module_data = {}
	
	class TestGlobals(object):
	
	    def one(self):
	        """
	        >>> TestGlobals().one()
	        >>> 'var' in _module_data
	        True
	        """
	        _module_data['var'] = 'value'
	
	    def two(self):
	        """
	        >>> 'var' in _module_data
	        False
	        """
	    
	
	

snippet doctest_ndiff.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_ndiff.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Whitespace at the end of a line can cause a mis-match.
	"""
	#end_pymotw_header
	
	def my_function(a, b):
	    """
	    >>> my_function(2, 3) #doctest: +REPORT_NDIFF
	    6 
	    >>> my_function('a', 3)
	    'aaa'
	    """
	    return a * b

snippet doctest_normalize_whitespace.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_normalize_whitespace.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Telling doctest to ignore extra whitespace in test data.
	"""
	#end_pymotw_header
	
	def my_function(a, b):
	    """Returns a * b.
	
	    >>> my_function(['A', 'B'], 3) #doctest: +NORMALIZE_WHITESPACE
	    ['A', 'B',
	     'A', 'B',
	     'A', 'B',]
	
	    This does not match because of the extra space after the [ in
	    the list.
	    
	    >>> my_function(['A', 'B'], 2) #doctest: +NORMALIZE_WHITESPACE
	    [ 'A', 'B',
	      'A', 'B', ]
	    """
	    return a * b
	
	    
	

snippet doctest_private_tests_external.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_private_tests_external.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""External tests associated with doctest_private_tests.py.
	
	>>> my_function(['A', 'B', 'C'], 2)
	['A', 'B', 'C', 'A', 'B', 'C']
	"""
	

snippet doctest_private_tests.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_private_tests.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Defining tests not visible in the documentation.
	"""
	#end_pymotw_header
	
	import doctest_private_tests_external
	
	__test__ = {
	    'numbers':"""
	>>> my_function(2, 3)
	6
	
	>>> my_function(2.0, 3)
	6.0
	""",
	
	    'strings':"""
	>>> my_function('a', 3)
	'aaa'
	
	>>> my_function(3, 'a')
	'aaa'
	""",
	
	    'external':doctest_private_tests_external,
	    
	    }
	
	def my_function(a, b):
	    """Returns a * b
	    """
	    return a * b
	

snippet doctest_simple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_simple.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Simple example using doctest
	"""
	#end_pymotw_header
	
	def my_function(a, b):
	    """
	    >>> my_function(2, 3)
	    6
	    >>> my_function('a', 3)
	    'aaa'
	    """
	    return a * b
	    
	
	

snippet doctest_simple_with_docs.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_simple_with_docs.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Simple example using doctest
	"""
	#end_pymotw_header
	
	def my_function(a, b):
	    """Returns a * b.
	
	    Works with numbers:
	    
	    >>> my_function(2, 3)
	    6
	
	    and strings:
	    
	    >>> my_function('a', 3)
	    'aaa'
	    """
	    return a * b
	    
	
	

snippet doctest_testfile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_testfile.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Run the tests from an external file.
	"""
	#end_pymotw_header
	
	import doctest
	
	if __name__ == '__main__':
	    doctest.testfile('doctest_in_help.rst')
	    

snippet doctest_test_globals.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_test_globals.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the globals exposed in a test.
	"""
	#end_pymotw_header
	
	class TestGlobals(object):
	
	    def one(self):
	        """
	        >>> var = 'value'
	        >>> 'var' in globals()
	        True
	        """
	
	    def two(self):
	        """
	        >>> 'var' in globals()
	        False
	        """
	    

snippet doctest_testmod_other_module.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_testmod_other_module.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Run tests for another module we import.
	"""
	#end_pymotw_header
	
	import doctest_simple
	
	if __name__ == '__main__':
	    import doctest
	    doctest.testmod(doctest_simple)
	    

snippet doctest_testmod.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_testmod.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Simple example using doctest
	"""
	#end_pymotw_header
	
	def my_function(a, b):
	    """
	    >>> my_function(2, 3)
	    6
	    >>> my_function('a', 3)
	    'aaa'
	    """
	    return a * b
	    
	if __name__ == '__main__':
	    import doctest
	    doctest.testmod()
	    

snippet doctest_tracebacks_no_body.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_tracebacks_no_body.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Expecting exceptions
	"""
	#end_pymotw_header
	
	def this_raises():
	    """This function always raises an exception.
	
	    >>> this_raises()
	    Traceback (most recent call last):
	    RuntimeError: here is the error
	    """
	    raise RuntimeError('here is the error')
	
	

snippet doctest_tracebacks.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_tracebacks.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Expecting exceptions
	"""
	#end_pymotw_header
	
	def this_raises():
	    """This function always raises an exception.
	
	    >>> this_raises()
	    Traceback (most recent call last):
	      File "<stdin>", line 1, in <module>
	      File "/no/such/path/doctest_tracebacks.py", line 14, in
	      this_raises
	        raise RuntimeError('here is the error')
	    RuntimeError: here is the error
	    """
	    raise RuntimeError('here is the error')
	
	

snippet doctest_unittest.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_unittest.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Integrating with unittest.
	"""
	#end_pymotw_header
	
	import doctest
	import unittest
	
	import doctest_simple
	
	suite = unittest.TestSuite()
	suite.addTest(doctest.DocTestSuite(doctest_simple))
	suite.addTest(doctest.DocFileSuite('doctest_in_help.rst'))
	
	runner = unittest.TextTestRunner(verbosity=2)
	runner.run(suite)

snippet doctest_unpredictable.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/doctest_unpredictable.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Unpredictable values in the expected results for a test cause failures.
	"""
	#end_pymotw_header
	
	class MyClass(object):
	    pass
	
	def unpredictable(obj):
	    """Returns a new list containing obj.
	
	    >>> unpredictable(MyClass())
	    [<doctest_unpredictable.MyClass object at 0x10055a2d0>]
	    """
	    return [obj]

snippet exceptions_AssertionError_assert.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_AssertionError_assert.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	assert False, 'The assertion failed'

snippet exceptions_AssertionError_unittest.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_AssertionError_unittest.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import unittest
	
	class AssertionExample(unittest.TestCase):
	    
	    def test(self):
	        self.failUnless(False)
	
	unittest.main()

snippet exceptions_AttributeError_assignment.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_AttributeError_assignment.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	class MyClass(object):
	    
	    @property
	    def attribute(self):
	        return 'This is the attribute value'
	
	o = MyClass()
	print o.attribute
	o.attribute = 'New value'

snippet exceptions_AttributeError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_AttributeError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	class NoAttributes(object):
	    pass
	
	o = NoAttributes()
	print o.attribute

snippet exceptions_AttributeError_slot.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_AttributeError_slot.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""AttributeError from class that uses __slots__
	"""
	#end_pymotw_header
	
	class MyClass(object):
	    __slots__ = ( 'attribute', )
	
	o = MyClass()
	o.attribute = 'known attribute'
	o.not_a_slot = 'new attribute'
	

snippet exceptions_EOFError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_EOFError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	while True:
	    data = raw_input('prompt:')
	    print 'READ:', data

snippet exceptions_FloatingPointError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_FloatingPointError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import math
	import fpectl
	
	print 'Control off:', math.exp(1000)
	fpectl.turnon_sigfpe()
	print 'Control on:', math.exp(1000)

snippet exceptions_GeneratorExit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_GeneratorExit.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	def my_generator():
	    try:
	        for i in range(5):
	            print 'Yielding', i
	            yield i
	    except GeneratorExit:
	        print 'Exiting early'
	
	g = my_generator()
	print g.next()
	g.close()

snippet exceptions_ImportError_missingname.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_ImportError_missingname.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from exceptions import MadeUpName

snippet exceptions_ImportError_nomodule.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_ImportError_nomodule.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import module_does_not_exist

snippet exceptions_IndexError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_IndexError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	my_seq = [ 0, 1, 2 ]
	print my_seq[3]

snippet exceptions_IOError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_IOError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	try:
	    f = open('/does/not/exist', 'r')
	except IOError as err:
	    print 'Formatted   :', str(err)
	    print 'Filename    :', err.filename
	    print 'Errno       :', err.errno
	    print 'String error:', err.strerror

snippet exceptions_KeyboardInterrupt.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_KeyboardInterrupt.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	try:
	    print 'Press Return or Ctrl-C:',
	    ignored = raw_input()
	except Exception, err:
	    print 'Caught exception:', err
	except KeyboardInterrupt, err:
	    print 'Caught KeyboardInterrupt'
	else:
	    print 'No exception' 
snippet exceptions_KeyError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_KeyError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	d = { 'a':1, 'b':2 }
	print d['c'] 
snippet exceptions_MemoryError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_MemoryError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import itertools
	
	# Try to create a MemoryError by allocating a lot of memory
	l = []
	for i in range(3):
	    try:
	        for j in itertools.count(1):
	            print i, j
	            l.append('*' * (2**30))
	    except MemoryError:
	        print '(error, discarding existing list)'
	        l = [] 
snippet exceptions_NameError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_NameError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	def func():
	    print unknown_name
	
	func()

snippet exceptions_NotImplementedError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_NotImplementedError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	class BaseClass(object):
	    """Defines the interface"""
	    def __init__(self):
	        super(BaseClass, self).__init__()
	    def do_something(self):
	        """The interface, not implemented"""
	        raise NotImplementedError(
	            self.__class__.__name__ + '.do_something'
	            )
	
	class SubClass(BaseClass):
	    """Implementes the interface"""
	    def do_something(self):
	        """really does something"""
	        print self.__class__.__name__ + ' doing something!'
	
	SubClass().do_something()
	BaseClass().do_something()

snippet exceptions_OSError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_OSError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os
	
	for i in range(10):
	    try:
	        print i, os.ttyname(i)
	    except OSError as err:
	        print
	        print '  Formatted   :', str(err)
	        print '  Errno       :', err.errno
	        print '  String error:', err.strerror
	        break

snippet exceptions_OverflowError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_OverflowError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import sys
	
	print 'Regular integer: (maxint=%s)' % sys.maxint
	try:
	    i = sys.maxint * 3
	    print 'No overflow for ', type(i), 'i =', i
	except OverflowError, err:
	    print 'Overflowed at ', i, err
	
	print
	print 'Long integer:'
	for i in range(0, 100, 10):
	    print '%2d' % i, 2L ** i
	
	print
	print 'Floating point values:'
	try:
	    f = 2.0**i
	    for i in range(100):
	        print i, f
	        f = f ** 2
	except OverflowError, err:
	    print 'Overflowed after ', f, err
	

snippet exceptions_ReferenceError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_ReferenceError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import gc
	import weakref
	
	class ExpensiveObject(object):
	    def __init__(self, name):
	        self.name = name
	    def __del__(self):
	        print '(Deleting %s)' % self
	
	obj = ExpensiveObject('obj')
	p = weakref.proxy(obj)
	
	print 'BEFORE:', p.name
	obj = None
	print 'AFTER:', p.name
	

snippet exceptions_StopIteration.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_StopIteration.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	l=[0,1,2]
	i=iter(l)
	
	print i
	print i.next()
	print i.next()
	print i.next()
	print i.next()

snippet exceptions_SyntaxError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_SyntaxError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	try:
	    print eval('five times three')
	except SyntaxError, err:
	    print 'Syntax error %s (%s-%s): %s' % \
	        (err.filename, err.lineno, err.offset, err.text)
	    print err 
snippet exceptions_SystemExit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_SystemExit.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import sys
	
	try:
	    sys.exit(1)
	except SystemExit, err:
	    print 'Tried to exit with code', err.code

snippet exceptions_TypeError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_TypeError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	result = 5 + 'string'

snippet exceptions_UnboundLocalError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_UnboundLocalError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	def throws_global_name_error():
	    print unknown_global_name
	
	def throws_unbound_local():
	    local_val = local_val + 1
	    print local_val
	
	try:
	    throws_global_name_error()
	except NameError, err:
	    print 'Global name error:', err
	
	try:
	    throws_unbound_local()
	except UnboundLocalError, err:
	    print 'Local name error:', err

snippet exceptions_ValueError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_ValueError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	print chr(1024) 
snippet exceptions_ZeroDivisionError.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/exceptions_ZeroDivisionError.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	print 'Division:',
	try:
	    print 1 / 0
	except ZeroDivisionError as err:
	    print err
	
	print 'Modulo  :',
	try:
	    print 1 % 0
	except ZeroDivisionError as err:
	    print err
	    

snippet filecmp_cmpfiles.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/filecmp_cmpfiles.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Compare files in two directories.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import filecmp
	import os
	
	# Determine the items that exist in both directories
	d1_contents = set(os.listdir('example/dir1'))
	d2_contents = set(os.listdir('example/dir2'))
	common = list(d1_contents & d2_contents)
	common_files = [ f 
	                 for f in common 
	                 if os.path.isfile(os.path.join('example/dir1', f))
	                 ]
	print 'Common files:', common_files
	
	# Compare the directories
	match, mismatch, errors = filecmp.cmpfiles('example/dir1', 
	                                           'example/dir2', 
	                                           common_files)
	print 'Match   :', match
	print 'Mismatch:', mismatch
	print 'Errors  :', errors

snippet filecmp_cmp.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/filecmp_cmp.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Compare two files.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import filecmp
	
	print 'common_file:', 
	print filecmp.cmp('example/dir1/common_file', 
	                  'example/dir2/common_file'),
	print filecmp.cmp('example/dir1/common_file', 
	                  'example/dir2/common_file',
	                  shallow=False)
	
	print 'not_the_same:', 
	print filecmp.cmp('example/dir1/not_the_same', 
	                  'example/dir2/not_the_same'),
	print filecmp.cmp('example/dir1/not_the_same', 
	                  'example/dir2/not_the_same',
	                  shallow=False)
	
	print 'identical:',
	print filecmp.cmp('example/dir1/file_only_in_dir1', 
	                  'example/dir1/file_only_in_dir1'),
	print filecmp.cmp('example/dir1/file_only_in_dir1', 
	                  'example/dir1/file_only_in_dir1',
	                  shallow=False)
	

snippet filecmp_dircmp_common.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/filecmp_dircmp_common.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import filecmp
	import pprint
	
	dc = filecmp.dircmp('example/dir1', 'example/dir2')
	print 'Common:'
	pprint.pprint(dc.common)
	
	print '\nDirectories:'
	pprint.pprint(dc.common_dirs)
	
	print '\nFiles:'
	pprint.pprint(dc.common_files)
	
	print '\nFunny:'
	pprint.pprint(dc.common_funny)

snippet filecmp_dircmp_diff.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/filecmp_dircmp_diff.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import filecmp
	
	dc = filecmp.dircmp('example/dir1', 'example/dir2')
	print 'Same      :', dc.same_files
	print 'Different :', dc.diff_files
	print 'Funny     :', dc.funny_files 
snippet filecmp_dircmp_list_filter.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/filecmp_dircmp_list_filter.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import filecmp
	import pprint
	
	dc = filecmp.dircmp('example/dir1', 'example/dir2',
	                    ignore=['common_file'])
	
	print 'Left:'
	pprint.pprint(dc.left_list)
	
	print '\nRight:'
	pprint.pprint(dc.right_list)

snippet filecmp_dircmp_list.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/filecmp_dircmp_list.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import filecmp
	import pprint
	
	dc = filecmp.dircmp('example/dir1', 'example/dir2')
	print 'Left:'
	pprint.pprint(dc.left_list)
	
	print '\nRight:'
	pprint.pprint(dc.right_list)

snippet filecmp_dircmp_membership.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/filecmp_dircmp_membership.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import filecmp
	import pprint
	
	dc = filecmp.dircmp('example/dir1', 'example/dir2')
	print 'Common:'
	pprint.pprint(dc.common)
	
	print '\nLeft:'
	pprint.pprint(dc.left_only)
	
	print '\nRight:'
	pprint.pprint(dc.right_only)
	

snippet filecmp_dircmp_report_full_closure.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/filecmp_dircmp_report_full_closure.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import filecmp
	
	filecmp.dircmp('example/dir1', 'example/dir2').report_full_closure() 
snippet filecmp_dircmp_report.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/filecmp_dircmp_report.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import filecmp
	
	filecmp.dircmp('example/dir1', 'example/dir2').report() 
snippet filecmp_dircmp_subdirs.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/filecmp_dircmp_subdirs.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import filecmp
	
	dc = filecmp.dircmp('example/dir1', 'example/dir2')
	print 'Subdirectories:'
	print dc.subdirs

snippet filecmp_mkexamples.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/filecmp_mkexamples.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""This script creates the example directory and its contents.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os
	
	def mkfile(filename, body=None):
	    with open(filename, 'w') as f:
	        f.write(body or filename)
	    return
	
	def make_example_dir(top):
	    if not os.path.exists(top):
	        os.mkdir(top)
	    curdir = os.getcwd()
	    os.chdir(top)
	
	    os.mkdir('dir1')
	    os.mkdir('dir2')
	
	    mkfile('dir1/file_only_in_dir1')
	    mkfile('dir2/file_only_in_dir2')
	
	    os.mkdir('dir1/dir_only_in_dir1')
	    os.mkdir('dir2/dir_only_in_dir2')
	
	    os.mkdir('dir1/common_dir')
	    os.mkdir('dir2/common_dir')
	
	    mkfile('dir1/common_file', 'this file is the same')
	    mkfile('dir2/common_file', 'this file is the same')
	
	    mkfile('dir1/not_the_same')
	    mkfile('dir2/not_the_same')
	
	    mkfile('dir1/file_in_dir1', 'This is a file in dir1')
	    os.mkdir('dir2/file_in_dir1')
	    
	    os.chdir(curdir)
	    return
	
	if __name__ == '__main__':
	    os.chdir(os.path.dirname(__file__) or os.getcwd())
	    make_example_dir('example')
	    make_example_dir('example/dir1/common_dir')
	    make_example_dir('example/dir2/common_dir')
	    

snippet fileinput_change_subnet_noisy.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fileinput_change_subnet_noisy.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Simplistic grep implementation
	"""
	#end_pymotw_header
	
	import fileinput
	import glob
	import sys
	
	from_base = sys.argv[1]
	to_base = sys.argv[2]
	files = sys.argv[3:]
	
	for line in fileinput.input(files, inplace=True):
	    if fileinput.isfirstline():
	        sys.stderr.write('Started processing %s\n' %
	                         fileinput.filename())
	        sys.stderr.write('Directory contains: %s\n' %
	                         glob.glob('etc_hosts.txt*'))
	    line = line.rstrip().replace(from_base, to_base)
	    print line
	
	sys.stderr.write('Finished processing\n')
	sys.stderr.write('Directory contains: %s\n' %
	                 glob.glob('etc_hosts.txt*'))

snippet fileinput_change_subnet.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fileinput_change_subnet.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Simplistic grep implementation
	"""
	#end_pymotw_header
	
	import fileinput
	import sys
	
	from_base = sys.argv[1]
	to_base = sys.argv[2]
	files = sys.argv[3:]
	
	for line in fileinput.input(files, inplace=True):
	    line = line.rstrip().replace(from_base, to_base)
	    print line

snippet fileinput_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fileinput_example.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Example for fileinput module.
	"""
	#end_pymotw_header
	
	import fileinput
	import sys
	import time
	from xml.etree.ElementTree import Element, SubElement, tostring
	from xml.dom import minidom
	
	# Establish the RSS and channel nodes
	rss = Element('rss', {'xmlns:dc':"http://purl.org/dc/elements/1.1/",
	                      'version':'2.0',
	                      })
	channel = SubElement(rss, 'channel')
	title = SubElement(channel, 'title')
	title.text = 'Sample podcast feed'
	desc = SubElement(channel, 'description')
	desc.text = 'Generated for PyMOTW'
	pubdate = SubElement(channel, 'pubDate')
	pubdate.text = time.asctime()
	gen = SubElement(channel, 'generator')
	gen.text = 'http://www.doughellmann.com/PyMOTW/'
	
	for line in fileinput.input(sys.argv[1:]):
	    mp3filename = line.strip()
	    if not mp3filename or mp3filename.startswith('#'):
	        continue
	    item = SubElement(rss, 'item')
	    title = SubElement(item, 'title')
	    title.text = mp3filename
	    encl = SubElement(item, 'enclosure',
	                      {'type':'audio/mpeg',
	                       'url':mp3filename})
	        
	rough_string = tostring(rss)
	reparsed = minidom.parseString(rough_string)
	print reparsed.toprettyxml(indent="  ")

snippet fileinput_grep.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fileinput_grep.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Simplistic grep implementation
	"""
	#end_pymotw_header
	
	import fileinput
	import re
	import sys
	
	pattern = re.compile(sys.argv[1])
	
	for line in fileinput.input(sys.argv[2:]):
	    if pattern.search(line):
	        if fileinput.isstdin():
	            fmt = '{lineno}:{line}'
	        else:
	            fmt = '{filename}:{lineno}:{line}'
	        print fmt.format(filename=fileinput.filename(),
	                         lineno=fileinput.filelineno(),
	                         line=line.rstrip())

snippet fnmatch_filter.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fnmatch_filter.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Filter a list of filenames against a pattern.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import fnmatch
	import os
	import pprint
	
	pattern = 'fnmatch_*.py'
	print 'Pattern :', pattern
	
	files = os.listdir('.')
	
	print
	print 'Files   :'
	pprint.pprint(files)
	
	print
	print 'Matches :'
	pprint.pprint(fnmatch.filter(files, pattern))

snippet fnmatch_fnmatchcase.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fnmatch_fnmatchcase.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Force a case-sensitive test of a filename with a pattern.
	"""
	
	#end_pymotw_header
	
	import fnmatch
	import os
	
	pattern = 'FNMATCH_*.PY'
	print 'Pattern :', pattern
	print
	
	files = os.listdir('.')
	
	for name in files:
	    print 'Filename: %-25s %s' % \
	        (name, fnmatch.fnmatchcase(name, pattern))

snippet fnmatch_fnmatch.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fnmatch_fnmatch.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Test an individual filename with a pattern.
	"""
	
	#end_pymotw_header
	
	import fnmatch
	import os
	
	pattern = 'fnmatch_*.py'
	print 'Pattern :', pattern
	print
	
	files = os.listdir('.')
	for name in files:
	    print 'Filename: %-25s %s' % \
	        (name, fnmatch.fnmatch(name, pattern))

snippet fnmatch_translate.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fnmatch_translate.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Translate a glob-style pattern to a regular expression.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import fnmatch
	
	pattern = 'fnmatch_*.py'
	print 'Pattern :', pattern
	print 'Regex   :', fnmatch.translate(pattern) 
snippet fractions_arithmetic.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fractions_arithmetic.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import fractions
	
	f1 = fractions.Fraction(1, 2)
	f2 = fractions.Fraction(3, 4)
	
	print '%s + %s = %s' % (f1, f2, f1 + f2)
	print '%s - %s = %s' % (f1, f2, f1 - f2)
	print '%s * %s = %s' % (f1, f2, f1 * f2)
	print '%s / %s = %s' % (f1, f2, f1 / f2)

snippet fractions_create_integers.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fractions_create_integers.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import fractions
	
	for n, d in [ (1, 2), (2, 4), (3, 6) ]:
	    f = fractions.Fraction(n, d)
	    print '%s/%s = %s' % (n, d, f)

snippet fractions_create_strings_floats.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fractions_create_strings_floats.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import fractions
	
	for s in [ '0.5', '1.5', '2.0' ]:
	    f = fractions.Fraction(s)
	    print '%s = %s' % (s, f)

snippet fractions_create_strings.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fractions_create_strings.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import fractions
	
	for s in [ '1/2', '2/4', '3/6' ]:
	    f = fractions.Fraction(s)
	    print '%s = %s' % (s, f)

snippet fractions_from_decimal.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fractions_from_decimal.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import decimal
	import fractions
	
	for v in [ decimal.Decimal('0.1'), 
	           decimal.Decimal('0.5'), 
	           decimal.Decimal('1.5'), 
	           decimal.Decimal('2.0'),
	           ]:
	    print '%s = %s' % (v, fractions.Fraction.from_decimal(v))

snippet fractions_from_float.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fractions_from_float.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import fractions
	
	for v in [ 0.1, 0.5, 1.5, 2.0 ]:
	    print '%s = %s' % (v, fractions.Fraction.from_float(v))
	     
snippet fractions_limit_denominator.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/fractions_limit_denominator.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import fractions
	import math
	
	print 'PI       =', math.pi
	
	f_pi = fractions.Fraction(str(math.pi))
	print 'No limit =', f_pi
	
	for i in [ 1, 6, 11, 60, 70, 90, 100 ]:
	    limited = f_pi.limit_denominator(i)
	    print '{0:8} = {1}'.format(i, limited)

snippet functools_cmp_to_key.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/functools_cmp_to_key.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Use total_ordering decorator to fill in missing rich comparison methods.
	"""
	#end_pymotw_header
	
	import functools
	
	class MyObject(object):
	    def __init__(self, val):
	        self.val = val
	    def __str__(self):
	        return 'MyObject(%s)' % self.val
	
	def compare_obj(a, b):
	    """Old-style comparison function.
	    """
	    print 'comparing %s and %s' % (a, b)
	    return cmp(a.val, b.val)
	
	# Make a key function using cmp_to_key()
	get_key = functools.cmp_to_key(compare_obj)
	
	def get_key_wrapper(o):
	    """Wrapper function for get_key to allow for print statements.
	    """
	    new_key = get_key(o)
	    print 'key_wrapper(%s) -> %s' % (o, new_key)
	    return new_key
	        
	objs = [ MyObject(x) for x in xrange(5, 0, -1) ]
	
	for o in sorted(objs, key=get_key_wrapper):
	    print o
	    

snippet functools_method.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/functools_method.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import functools
	
	class MyClass(object):
	    """Demonstration class for functools"""
	    
	    def method1(self, a, b=2):
	        """Docstring for method1()."""
	        print '  called method1 with:', (self, a, b)
	        return
	    
	    def method2(self, c, d=5):
	        """Docstring for method2"""
	        print '  called method2 with:', (self, c, d)
	        return
	    wrapped_method2 = functools.partial(method2, 'wrapped c')
	    functools.update_wrapper(wrapped_method2, method2)
	    
	    def __call__(self, e, f=6):
	        """Docstring for MyClass.__call__"""
	        print '  called object with:', (self, e, f)
	        return
	
	def show_details(name, f):
	    """Show details of a callable object."""
	    print '%s:' % name
	    print '  object:', f
	    print '  __name__:', 
	    try:
	        print f.__name__
	    except AttributeError:
	        print '(no __name__)'
	    print '  __doc__', repr(f.__doc__)
	    return
	    
	o = MyClass()
	
	show_details('method1 straight', o.method1)
	o.method1('no default for a', b=3)
	print
	
	p1 = functools.partial(o.method1, b=4)
	functools.update_wrapper(p1, o.method1)
	show_details('method1 wrapper', p1)
	p1('a goes here')
	print
	
	show_details('method2', o.method2)
	o.method2('no default for c', d=6)
	print
	
	show_details('wrapped method2', o.wrapped_method2)
	o.wrapped_method2('no default for c', d=6)
	print
	
	show_details('instance', o)
	o('no default for e')
	print
	
	p2 = functools.partial(o, f=7)
	show_details('instance wrapper', p2)
	p2('e goes here')

snippet functools_partial.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/functools_partial.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import functools
	
	def myfunc(a, b=2):
	    """Docstring for myfunc()."""
	    print '  called myfunc with:', (a, b)
	    return
	
	def show_details(name, f, is_partial=False):
	    """Show details of a callable object."""
	    print '%s:' % name
	    print '  object:', f
	    if not is_partial:
	        print '  __name__:', f.__name__
	    if is_partial:
	        print '  func:', f.func
	        print '  args:', f.args
	        print '  keywords:', f.keywords
	    return
	
	show_details('myfunc', myfunc)
	myfunc('a', 3)
	print
	
	# Set a different default value for 'b', but require
	# the caller to provide 'a'.
	p1 = functools.partial(myfunc, b=4)
	show_details('partial with named default', p1, True)
	p1('passing a')
	p1('override b', b=5)
	print
	
	# Set default values for both 'a' and 'b'.
	p2 = functools.partial(myfunc, 'default a', b=99)
	show_details('partial with defaults', p2, True)
	p2()
	p2(b='override b')
	print
	
	print 'Insufficient arguments:'
	p1()

snippet functools_total_ordering.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/functools_total_ordering.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Use total_ordering decorator to fill in missing rich comparison methods.
	"""
	#end_pymotw_header
	
	import functools
	import inspect
	from pprint import pprint
	
	@functools.total_ordering
	class MyObject(object):
	    def __init__(self, val):
	        self.val = val
	    def __eq__(self, other):
	        print '  testing __eq__(%s, %s)' % (self.val, other.val)
	        return self.val == other.val
	    def __gt__(self, other):
	        print '  testing __gt__(%s, %s)' % (self.val, other.val)
	        return self.val > other.val
	
	print 'Methods:\n'
	pprint(inspect.getmembers(MyObject, inspect.ismethod))
	
	a = MyObject(1)
	b = MyObject(2)
	
	print '\nComparisons:'
	for expr in [ 'a < b', 'a <= b', 'a == b', 'a >= b', 'a > b' ]:
	    print '\n%-6s:' % expr
	    result = eval(expr)
	    print '  result of %s: %s' % (expr, result)

snippet functools_update_wrapper.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/functools_update_wrapper.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import functools
	
	def myfunc(a, b=2):
	    """Docstring for myfunc()."""
	    print '  called myfunc with:', (a, b)
	    return
	
	def show_details(name, f):
	    """Show details of a callable object."""
	    print '%s:' % name
	    print '  object:', f
	    print '  __name__:', 
	    try:
	        print f.__name__
	    except AttributeError:
	        print '(no __name__)'
	    print '  __doc__', repr(f.__doc__)
	    print
	    return
	
	show_details('myfunc', myfunc)
	
	p1 = functools.partial(myfunc, b=4)
	show_details('raw wrapper', p1)
	
	print 'Updating wrapper:'
	print '  assign:', functools.WRAPPER_ASSIGNMENTS
	print '  update:', functools.WRAPPER_UPDATES
	print
	
	functools.update_wrapper(p1, myfunc)
	show_details('updated wrapper', p1)

snippet functools_wraps.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/functools_wraps.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import functools
	
	def show_details(name, f):
	    """Show details of a callable object."""
	    print '%s:' % name
	    print '  object:', f
	    print '  __name__:', 
	    try:
	        print f.__name__
	    except AttributeError:
	        print '(no __name__)'
	    print '  __doc__', repr(f.__doc__)
	    print
	    return
	
	def simple_decorator(f):
	    @functools.wraps(f)
	    def decorated(a='decorated defaults', b=1):
	        print '  decorated:', (a, b)
	        print '  ',
	        f(a, b=b)
	        return
	    return decorated
	
	def myfunc(a, b=2):
	    "myfunc() is not complicated"
	    print '  myfunc:', (a,b)
	    return
	
	# The raw function
	show_details('myfunc', myfunc)
	myfunc('unwrapped, default b')
	myfunc('unwrapped, passing b', 3)
	print
	
	# Wrap explicitly
	wrapped_myfunc = simple_decorator(myfunc)
	show_details('wrapped_myfunc', wrapped_myfunc)
	wrapped_myfunc()
	wrapped_myfunc('args to wrapped', 4)
	print
	
	# Wrap with decorator syntax
	@simple_decorator
	def decorated_myfunc(a, b):
	    myfunc(a, b)
	    return
	
	show_details('decorated_myfunc', decorated_myfunc)
	decorated_myfunc()
	decorated_myfunc('args to decorated', 4)

snippet gc_collect_break_cycle.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_collect_break_cycle.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the objects with references to a given object.
	"""
	#end_pymotw_header
	
	import gc
	import pprint
	
	class Graph(object):
	    def __init__(self, name):
	        self.name = name
	        self.next = None
	    def set_next(self, next):
	        print 'Linking nodes %s.next = %s' % (self, next)
	        self.next = next
	    def __repr__(self):
	        return '%s(%s)' % (self.__class__.__name__, self.name)
	    def __del__(self):
	        print '%s.__del__()' % self
	
	# Construct a graph cycle
	one = Graph('one')
	two = Graph('two')
	three = Graph('three')
	one.set_next(two)
	two.set_next(three)
	three.set_next(one)
	
	# Remove references to the graph nodes in this module's namespace
	one = two = three = None
	
	# Collecting now keeps the objects as uncollectable
	print
	print 'Collecting...'
	n = gc.collect()
	print 'Unreachable objects:', n
	print 'Remaining Garbage:', 
	pprint.pprint(gc.garbage)
	    
	# Break the cycle
	print
	print 'Breaking the cycle'
	gc.garbage[0].set_next(None)
	print 'Removing references in gc.garbage'
	del gc.garbage[:]
	
	# Now the objects are removed
	print
	print 'Collecting...'
	n = gc.collect()
	print 'Unreachable objects:', n
	print 'Remaining Garbage:', 
	pprint.pprint(gc.garbage)

snippet gc_collect.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_collect.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the objects with references to a given object.
	"""
	#end_pymotw_header
	
	import gc
	import pprint
	
	class Graph(object):
	    def __init__(self, name):
	        self.name = name
	        self.next = None
	    def set_next(self, next):
	        print 'Linking nodes %s.next = %s' % (self, next)
	        self.next = next
	    def __repr__(self):
	        return '%s(%s)' % (self.__class__.__name__, self.name)
	
	# Construct a graph cycle
	one = Graph('one')
	two = Graph('two')
	three = Graph('three')
	one.set_next(two)
	two.set_next(three)
	three.set_next(one)
	
	print
	
	# Remove references to the graph nodes in this module's namespace
	one = two = three = None
	
	# Show the effect of garbage collection
	for i in range(2):
	    print 'Collecting %d ...' % i
	    n = gc.collect()
	    print 'Unreachable objects:', n
	    print 'Remaining Garbage:', 
	    pprint.pprint(gc.garbage)
	    print
	    

snippet gc_collect_with_del.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_collect_with_del.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the objects with references to a given object.
	"""
	#end_pymotw_header
	
	import gc
	import pprint
	
	class Graph(object):
	    def __init__(self, name):
	        self.name = name
	        self.next = None
	    def set_next(self, next):
	        print '%s.next = %s' % (self, next)
	        self.next = next
	    def __repr__(self):
	        return '%s(%s)' % (self.__class__.__name__, self.name)
	    def __del__(self):
	        print '%s.__del__()' % self
	
	# Construct a graph cycle
	one = Graph('one')
	two = Graph('two')
	three = Graph('three')
	one.set_next(two)
	two.set_next(three)
	three.set_next(one)
	
	# Remove references to the graph nodes in this module's namespace
	one = two = three = None
	
	# Show the effect of garbage collection
	print 'Collecting...'
	n = gc.collect()
	print 'Unreachable objects:', n
	print 'Remaining Garbage:', 
	pprint.pprint(gc.garbage)
	    

snippet gc_debug_collectable_instances.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_debug_collectable_instances.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the objects with references to a given object.
	"""
	#end_pymotw_header
	
	import gc
	
	flags = (gc.DEBUG_COLLECTABLE |
	         gc.DEBUG_UNCOLLECTABLE |
	         gc.DEBUG_INSTANCES
	         )
	gc.set_debug(flags)
	
	class Graph:
	    def __init__(self, name):
	        self.name = name
	        self.next = None
	        print 'Creating %s 0x%x (%s)' % \
	            (self.__class__.__name__, id(self), name)
	    def set_next(self, next):
	        print 'Linking nodes %s.next = %s' % (self, next)
	        self.next = next
	    def __repr__(self):
	        return '%s(%s)' % (self.__class__.__name__, self.name)
	
	class CleanupGraph(Graph):
	    def __del__(self):
	        print '%s.__del__()' % self
	
	# Construct a graph cycle
	one = Graph('one')
	two = Graph('two')
	one.set_next(two)
	two.set_next(one)
	
	# Construct another node that stands on its own
	three = CleanupGraph('three')
	
	# Construct a graph cycle with a finalizer
	four = CleanupGraph('four')
	five = CleanupGraph('five')
	four.set_next(five)
	five.set_next(four)
	
	# Remove references to the graph nodes in this module's namespace
	one = two = three = four = five = None
	
	print
	
	# Force a sweep
	print 'Collecting'
	gc.collect()
	print 'Done'

snippet gc_debug_collectable_objects.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_debug_collectable_objects.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the objects with references to a given object.
	"""
	#end_pymotw_header
	
	import gc
	
	flags = (gc.DEBUG_COLLECTABLE |
	         gc.DEBUG_UNCOLLECTABLE |
	         gc.DEBUG_OBJECTS
	         )
	gc.set_debug(flags)
	
	class Graph(object):
	    def __init__(self, name):
	        self.name = name
	        self.next = None
	        print 'Creating %s 0x%x (%s)' % \
	            (self.__class__.__name__, id(self), name)
	    def set_next(self, next):
	        print 'Linking nodes %s.next = %s' % (self, next)
	        self.next = next
	    def __repr__(self):
	        return '%s(%s)' % (self.__class__.__name__, self.name)
	
	class CleanupGraph(Graph):
	    def __del__(self):
	        print '%s.__del__()' % self
	
	# Construct a graph cycle
	one = Graph('one')
	two = Graph('two')
	one.set_next(two)
	two.set_next(one)
	
	# Construct another node that stands on its own
	three = CleanupGraph('three')
	
	# Construct a graph cycle with a finalizer
	four = CleanupGraph('four')
	five = CleanupGraph('five')
	four.set_next(five)
	five.set_next(four)
	
	# Remove references to the graph nodes in this module's namespace
	one = two = three = four = five = None
	
	print
	
	# Force a sweep
	print 'Collecting'
	gc.collect()
	print 'Done'

snippet gc_debug_leak.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_debug_leak.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the objects with references to a given object.
	"""
	#end_pymotw_header
	
	import gc
	
	flags = gc.DEBUG_LEAK
	
	gc.set_debug(flags)
	
	class Graph(object):
	    def __init__(self, name):
	        self.name = name
	        self.next = None
	    def set_next(self, next):
	        self.next = next
	    def __repr__(self):
	        return '%s(%s)' % (self.__class__.__name__, self.name)
	
	class CleanupGraph(Graph):
	    def __del__(self):
	        print '%s.__del__()' % self
	
	# Construct a graph cycle
	one = Graph('one')
	two = Graph('two')
	one.set_next(two)
	two.set_next(one)
	
	# Construct another node that stands on its own
	three = CleanupGraph('three')
	
	# Construct a graph cycle with a finalizer
	four = CleanupGraph('four')
	five = CleanupGraph('five')
	four.set_next(five)
	five.set_next(four)
	
	# Remove references to the graph nodes in this module's namespace
	one = two = three = four = five = None
	
	# Force a sweep
	print 'Collecting'
	gc.collect()
	print 'Done'
	
	# Report on what was left
	for o in gc.garbage:
	    if isinstance(o, Graph):
	        print 'Retained: %s 0x%x' % (o, id(o))

snippet gc_debug_saveall.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_debug_saveall.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the objects with references to a given object.
	"""
	#end_pymotw_header
	
	import gc
	
	flags = (gc.DEBUG_COLLECTABLE |
	         gc.DEBUG_UNCOLLECTABLE |
	         gc.DEBUG_OBJECTS |
	         gc.DEBUG_SAVEALL
	         )
	
	gc.set_debug(flags)
	
	class Graph(object):
	    def __init__(self, name):
	        self.name = name
	        self.next = None
	    def set_next(self, next):
	        self.next = next
	    def __repr__(self):
	        return '%s(%s)' % (self.__class__.__name__, self.name)
	
	class CleanupGraph(Graph):
	    def __del__(self):
	        print '%s.__del__()' % self
	
	# Construct a graph cycle
	one = Graph('one')
	two = Graph('two')
	one.set_next(two)
	two.set_next(one)
	
	# Construct another node that stands on its own
	three = CleanupGraph('three')
	
	# Construct a graph cycle with a finalizer
	four = CleanupGraph('four')
	five = CleanupGraph('five')
	four.set_next(five)
	five.set_next(four)
	
	# Remove references to the graph nodes in this module's namespace
	one = two = three = four = five = None
	
	# Force a sweep
	print 'Collecting'
	gc.collect()
	print 'Done'
	
	# Report on what was left
	for o in gc.garbage:
	    if isinstance(o, Graph):
	        print 'Retained: %s 0x%x' % (o, id(o))

snippet gc_debug_stats.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_debug_stats.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Tuning the garbage collector threshold.
	"""
	#end_pymotw_header
	
	import gc
	
	gc.set_debug(gc.DEBUG_STATS)
	
	gc.collect()

snippet gc_get_objects.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_get_objects.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Examine the objects being managed.
	"""
	#end_pymotw_header
	
	import gc
	
	print len(gc.get_objects())

snippet gc_get_referents_cycles.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_get_referents_cycles.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the objects with references to a given object.
	"""
	#end_pymotw_header
	
	import gc
	import pprint
	import Queue
	
	class Graph(object):
	    def __init__(self, name):
	        self.name = name
	        self.next = None
	    def set_next(self, next):
	        print 'Linking nodes %s.next = %s' % (self, next)
	        self.next = next
	    def __repr__(self):
	        return '%s(%s)' % (self.__class__.__name__, self.name)
	
	# Construct a graph cycle
	one = Graph('one')
	two = Graph('two')
	three = Graph('three')
	one.set_next(two)
	two.set_next(three)
	three.set_next(one)
	
	print
	
	seen = set()
	to_process = Queue.Queue()
	
	# Start with an empty object chain and Graph three.
	to_process.put( ([], three) )
	
	# Look for cycles, building the object chain for each object found
	# in the queue so the full cycle can be printed at the end.
	while not to_process.empty():
	    chain, next = to_process.get()
	    chain = chain[:]
	    chain.append(next)
	    print 'Examining:', repr(next)
	    seen.add(id(next))
	    for r in gc.get_referents(next):
	        if isinstance(r, basestring) or isinstance(r, type):
	            # Ignore strings and classes
	            pass
	        elif id(r) in seen:
	            print
	            print 'Found a cycle to %s:' % r
	            for i, link in enumerate(chain):
	                print '  %d: ' % i,
	                pprint.pprint(link)
	        else:
	            to_process.put( (chain, r) )
	            

snippet gc_get_referents.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_get_referents.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the objects with references to a given object.
	"""
	#end_pymotw_header
	
	import gc
	import pprint
	
	class Graph(object):
	    def __init__(self, name):
	        self.name = name
	        self.next = None
	    def set_next(self, next):
	        print 'Linking nodes %s.next = %s' % (self, next)
	        self.next = next
	    def __repr__(self):
	        return '%s(%s)' % (self.__class__.__name__, self.name)
	
	# Construct a graph cycle
	one = Graph('one')
	two = Graph('two')
	three = Graph('three')
	one.set_next(two)
	two.set_next(three)
	three.set_next(one)
	
	print
	print 'three refers to:'
	for r in gc.get_referents(three):
	    pprint.pprint(r)

snippet gc_get_referrers.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_get_referrers.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the objects with references to a given object.
	"""
	#end_pymotw_header
	
	import gc
	import pprint
	import Queue
	
	class Graph(object):
	    def __init__(self, name):
	        self.name = name
	        self.next = None
	    def set_next(self, next):
	        print 'Linking nodes %s.next = %s' % (self, next)
	        self.next = next
	    def __repr__(self):
	        return '%s(%s)' % (self.__class__.__name__, self.name)
	    def __del__(self):
	        print '%s.__del__()' % self
	
	# Construct two graph cycles
	one = Graph('one')
	two = Graph('two')
	three = Graph('three')
	one.set_next(two)
	two.set_next(three)
	three.set_next(one)
	
	# Remove references to the graph nodes in this module's namespace
	one = two = three = None
	
	# Collecting now keeps the objects as uncollectable
	print
	print 'Collecting...'
	n = gc.collect()
	print 'Unreachable objects:', n
	print 'Remaining Garbage:', 
	pprint.pprint(gc.garbage)
	
	REFERRERS_TO_IGNORE = [ locals(), globals(), gc.garbage ]
	
	def find_referring_graphs(obj):
	    print 'Looking for references to %s' % repr(obj)
	    referrers = (r for r in gc.get_referrers(obj)
	                 if r not in REFERRERS_TO_IGNORE)
	    for ref in referrers:
	        if isinstance(ref, Graph):
	            # A graph node
	            yield ref
	        elif isinstance(ref, dict):
	            # An instance or other namespace dictionary
	            for parent in find_referring_graphs(ref):
	                yield parent
	
	# Look for objects that refer to the objects that remain in
	# gc.garbage.
	print
	print 'Clearing referrers:'
	for obj in gc.garbage:
	    for ref in find_referring_graphs(obj):
	        ref.set_next(None)
	        del ref # remove local reference so the node can be deleted
	    del obj # remove local reference so the node can be deleted
	
	# Clear references held by gc.garbage
	print
	print 'Clearing gc.garbage:'
	del gc.garbage[:]
	        
	# Everything should have been freed this time
	print
	print 'Collecting...'
	n = gc.collect()
	print 'Unreachable objects:', n
	print 'Remaining Garbage:', 
	pprint.pprint(gc.garbage)

snippet gc_get_threshold.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_get_threshold.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the default thresholds.
	"""
	#end_pymotw_header
	
	import gc
	
	print gc.get_threshold()

snippet gc_threshold.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gc_threshold.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Tuning the garbage collector threshold.
	"""
	#end_pymotw_header
	
	import gc
	import pprint
	import sys
	
	try:
	    threshold = int(sys.argv[1])
	except (IndexError, ValueError, TypeError):
	    print 'Missing or invalid threshold, using default'
	    threshold = 5
	
	class MyObj(object):
	    def __init__(self, name):
	        self.name = name
	        print 'Created', self.name
	
	gc.set_debug(gc.DEBUG_STATS)
	
	gc.set_threshold(threshold, 1, 1)
	print 'Thresholds:', gc.get_threshold()
	
	print 'Clear the collector by forcing a run'
	gc.collect()
	print
	
	print 'Creating objects'
	objs = []
	for i in range(10):
	    objs.append(MyObj(i))

snippet getopt_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/getopt_example.py
	
	"""More complete example which parses and uses the options.
	
	"""
	
	__module_id__ = "$Id$"
	
	import getopt
	import sys
	
	version = '1.0'
	verbose = False
	output_filename = 'default.out'
	
	print 'ARGV      :', sys.argv[1:]
	
	try:
	    options, remainder = getopt.getopt(
	        sys.argv[1:],
	        'o:v',
	        ['output=', 
	         'verbose',
	         'version=',
	         ])
	except getopt.GetoptError as err:
	    print 'ERROR:', err
	    sys.exit(1)
	    
	print 'OPTIONS   :', options
	
	for opt, arg in options:
	    if opt in ('-o', '--output'):
	        output_filename = arg
	    elif opt in ('-v', '--verbose'):
	        verbose = True
	    elif opt == '--version':
	        version = arg
	
	print 'VERSION   :', version
	print 'VERBOSE   :', verbose
	print 'OUTPUT    :', output_filename
	print 'REMAINING :', remainder

snippet getopt_gnu.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/getopt_gnu.py
	#!/usr/bin/env python
	"""More complete example which parses and uses the options.
	"""
	#end_pymotw_header
	
	import getopt
	import sys
	
	version = '1.0'
	verbose = False
	output_filename = 'default.out'
	
	print 'ARGV      :', sys.argv[1:]
	
	try:
	    options, remainder = getopt.gnu_getopt(
	        sys.argv[1:],
	        'o:v',
	        ['output=', 
	         'verbose',
	         'version=',
	         ])
	except getopt.GetoptError as err:
	    print 'ERROR:', err
	    sys.exit(1)
	    
	print 'OPTIONS   :', options
	
	for opt, arg in options:
	    if opt in ('-o', '--output'):
	        output_filename = arg
	    elif opt in ('-v', '--verbose'):
	        verbose = True
	    elif opt == '--version':
	        version = arg
	
	print 'VERSION   :', version
	print 'VERBOSE   :', verbose
	print 'OUTPUT    :', output_filename
	print 'REMAINING :', remainder

snippet getopt_long.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/getopt_long.py
	#!/usr/bin/env python
	"""Using getopt with longer option names.
	"""
	#end_pymotw_header
	
	import getopt
	
	opts, args = getopt.getopt([ '--noarg',
	                             '--witharg', 'val',
	                             '--witharg2=another',
	                             ],
	                           '',
	                           [ 'noarg', 'witharg=', 'witharg2=' ])
	for opt in opts:
	    print opt
	    

snippet getopt_short.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/getopt_short.py
	#!/usr/bin/env python
	"""Using optparse with single-letter options.
	"""
	#end_pymotw_header
	
	import getopt
	
	opts, args = getopt.getopt(['-a', '-bval', '-c', 'val'], 'ab:c:')
	
	for opt in opts:
	    print opt
	    

snippet getpass_defaults.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/getpass_defaults.py
	#!/usr/bin/env python
	"""Default use of getpass.
	"""
	#end_pymotw_header
	
	import getpass
	
	try:
	    p = getpass.getpass()
	except Exception, err:
	    print 'ERROR:', err
	else:
	    print 'You entered:', p

snippet getpass_noterminal.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/getpass_noterminal.py
	
	"""Using read when getpass won't work because we are not connected to a terminal.
	
	"""
	
	__module_id__ = "$Id$"
	
	import getpass
	import sys
	
	if sys.stdin.isatty():
	    p = getpass.getpass('Using getpass: ')
	else:
	    print 'Using readline'
	    p = sys.stdin.readline().rstrip()
	
	print 'Read: ', p

snippet getpass_prompt.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/getpass_prompt.py
	
	"""Passing a prompt to getpass.
	
	"""
	
	__module_id__ = "$Id$"
	
	import getpass
	
	p = getpass.getpass(prompt='What is your favorite color? ')
	if p.lower() == 'blue':
	    print 'Right.  Off you go.'
	else:
	    print 'Auuuuugh!'
	

snippet getpass_stream.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/getpass_stream.py
	
	"""Using sys.stderr for the prompt lets us redirect stdout.
	
	"""
	
	__module_id__ = "$Id$"
	
	import getpass
	import sys
	
	p = getpass.getpass(stream=sys.stderr)
	print 'You entered:', p

snippet gettext_app_builtin.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gettext_app_builtin.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import gettext
	gettext.install('gettext_example', 'locale',
	                unicode=True, names=['ngettext'])
	
	print _('This message is in the script.')

snippet gettext_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gettext_example.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import gettext
	
	# Set up message catalog access
	t = gettext.translation('example', 'locale', fallback=True)
	_ = t.ugettext
	
	print _('This message is in the script.')

snippet gettext_find.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gettext_find.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import gettext
	
	catalogs = gettext.find('example', 'locale', all=True)
	print 'Catalogs:', catalogs

snippet gettext_module_global.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gettext_module_global.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import gettext
	t = gettext.translation('gettext_example', 'locale', fallback=True)
	_ = t.ugettext
	ngettext = t.ungettext
	
	print _('This message is in the script.')

snippet gettext_plural.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gettext_plural.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	from gettext import translation
	import sys
	
	t = translation('gettext_plural', 'locale', fallback=True)
	num = int(sys.argv[1])
	msg = t.ungettext('%(num)d means singular.',
	                  '%(num)d means plural.',
	                  num)
	
	# Still need to add the values to the message ourself.
	print msg % {'num':num}

snippet glob_asterisk.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/glob_asterisk.py
	
	"""The asterisk as wildcard character.
	
	"""
	
	__module_id__ = "$Id$"
	
	import glob
	for name in glob.glob('dir/*'):
	    print name

snippet glob_charrange.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/glob_charrange.py
	
	"""Using character range in patterns.
	
	"""
	
	__module_id__ = "$Id$"
	
	import glob
	for name in glob.glob('dir/*[0-9].*'):
	    print name

snippet glob_extension.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/glob_extension.py
	
	"""Using glob to find files matching a pattern with a filename extension.
	
	"""
	
	__module_id__ = "$Id$"
	
	import glob
	
	for name in glob.glob('*.py'):
	    print name

snippet glob_maketestdata.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/glob_maketestdata.py
	
	"""Create test data for the glob examples.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	def mkfile(filename):
	    print filename
	    f = open(filename, 'wt')
	    try:
	        f.write('\n')
	    finally:
	        f.close()
	
	print 'dir'
	os.mkdir('dir')
	
	mkfile('dir/file.txt')
	mkfile('dir/file1.txt')
	mkfile('dir/file2.txt')
	mkfile('dir/filea.txt')
	mkfile('dir/fileb.txt')
	
	print 'dir/subdir'
	os.mkdir('dir/subdir')
	
	mkfile('dir/subdir/subfile.txt')

snippet glob_question.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/glob_question.py
	
	"""Example expansion of question mark wild card.
	
	"""
	
	__module_id__ = "$Id$"
	
	import glob
	
	for name in glob.glob('dir/file?.txt'):
	    print name

snippet glob_subdir.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/glob_subdir.py
	
	"""Listing files in a subdirectory.
	
	"""
	
	__module_id__ = "$Id$"
	
	import glob
	
	print 'Named explicitly:'
	for name in glob.glob('dir/subdir/*'):
	    print '\t', name
	
	print 'Named with wildcard:'
	for name in glob.glob('dir/*/*'):
	    print '\t', name

snippet gzip_compresslevel.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gzip_compresslevel.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import gzip
	import os
	import hashlib
	
	def get_hash(data):
	    return hashlib.md5(data).hexdigest()
	
	data = open('lorem.txt', 'r').read() * 1024
	cksum = get_hash(data)
	
	print 'Level  Size        Checksum'
	print '-----  ----------  ---------------------------------'
	print 'data   %10d  %s' % (len(data), cksum)
	
	for i in xrange(1, 10):
	    filename = 'compress-level-%s.gz' % i
	    with gzip.open(filename, 'wb', compresslevel=i) as output:
	        output.write(data)
	    size = os.stat(filename).st_size
	    cksum = get_hash(open(filename, 'rb').read())
	    print '%5d  %10d  %s' % (i, size, cksum)

snippet gzip_read.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gzip_read.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import gzip
	
	with gzip.open('example.txt.gz', 'rb') as input_file:
	    print input_file.read()

snippet gzip_seek.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gzip_seek.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import gzip
	
	with gzip.open('example.txt.gz', 'rb') as input_file:
	    print 'Entire file:'
	    all_data = input_file.read()
	    print all_data
	    
	    expected = all_data[5:15]
	    
	    # rewind to beginning
	    input_file.seek(0)
	    
	    # move ahead 5 bytes
	    input_file.seek(5)
	    print 'Starting at position 5 for 10 bytes:'
	    partial = input_file.read(10)
	    print partial
	    
	    print
	    print expected == partial

snippet gzip_StringIO.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gzip_StringIO.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import gzip
	from cStringIO import StringIO
	import binascii
	
	uncompressed_data = 'The same line, over and over.\n' * 10
	print 'UNCOMPRESSED:', len(uncompressed_data)
	print uncompressed_data
	
	buf = StringIO()
	with gzip.GzipFile(mode='wb', fileobj=buf) as f:
	    f.write(uncompressed_data)
	
	compressed_data = buf.getvalue()
	print 'COMPRESSED:', len(compressed_data)
	print binascii.hexlify(compressed_data)
	
	inbuffer = StringIO(compressed_data)
	with gzip.GzipFile(mode='rb', fileobj=inbuffer) as f:
	    reread_data = f.read(len(uncompressed_data))
	
	print
	print 'REREAD:', len(reread_data)
	print reread_data

snippet gzip_writelines.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gzip_writelines.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import gzip
	import itertools
	import os
	
	with gzip.open('example_lines.txt.gz', 'wb') as output:
	    output.writelines(
	        itertools.repeat('The same line, over and over.\n', 10)
	        )
	
	os.system('gzcat example_lines.txt.gz')

snippet gzip_write.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/gzip_write.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import gzip
	import os
	
	outfilename = 'example.txt.gz'
	with gzip.open(outfilename, 'wb') as output:
	    output.write('Contents of the example file go here.\n')
	
	print outfilename, 'contains', os.stat(outfilename).st_size, 'bytes'
	os.system('file -b --mime %s' % outfilename)

snippet hashlib_data.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/hashlib_data.py
	
	lorem = '''Lorem ipsum dolor sit amet, consectetur adipisicing elit,
	sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
	enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi
	ut aliquip ex ea commodo consequat. Duis aute irure dolor in
	reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
	pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
	culpa qui officia deserunt mollit anim id est laborum.'''

snippet hashlib_md5.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/hashlib_md5.py
	
	import hashlib
	
	from hashlib_data import lorem
	
	
	data = "http://www.sdbid.cn/BiddingChange/Detail/170036"
	h = hashlib.md5()
	h.update(lorem.encode())
	print(h.hexdigest())
	print()
	
	print(hashlib.md5(data.encode()).hexdigest() + '.txt')

snippet hashlib_new.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/hashlib_new.py
	
	import hashlib
	import sys
	
	
	try:
	    hash_name = sys.argv[1]
	except IndexError:
	    print('Specify the hash name as the first argument.')
	else:
	    try:
	        data = sys.argv[2]
	    except IndexError:
	        from hashlib_data import lorem as data
	
	    h = hashlib.new(hash_name)
	    h.update(data)
	    print(h.hexdigest())

snippet hashlib_sha1.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/hashlib_sha1.py
	
	import hashlib
	
	from hashlib_data import lorem
	
	h = hashlib.sha1()
	h.update(lorem.encode())
	print(h.hexdigest())

snippet hashlib_update.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/hashlib_update.py
	
	import hashlib
	
	from hashlib_data import lorem
	
	h = hashlib.md5()
	h.update(lorem.encode())
	all_at_once = h.hexdigest()
	
	
	def chunkize(size, text):
	    "Return parts of the text in size-based increments."
	    start = 0
	    while start < len(text):
	        chunk = text[start:start + size]
	        yield chunk
	        start += size
	
	
	h = hashlib.md5()
	for chunk in chunkize(64, lorem.encode()):
	    h.update(chunk)
	line_by_line = h.hexdigest()
	
	print('All at once :', all_at_once)
	print('Line by line:', line_by_line)
	print('Same        :', (all_at_once == line_by_line))

snippet heapq_extremes.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/heapq_extremes.py
	
	import heapq
	from heapq_heapdata import data
	
	
	print('all       :', data)
	print('3 largest :', heapq.nlargest(3, data))
	print('from sort :', list(reversed(sorted(data)[-3:])))
	print('3 smallest:', heapq.nsmallest(3, data))
	print('from sort :', sorted(data)[:3])

snippet heapq_heapdata.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/heapq_heapdata.py
	
	# This data was generated with the random module.
	data = [19, 9, 4, 10, 11]

snippet heapq_heapify.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/heapq_heapify.py
	
	import heapq
	from heapq_showtree import show_tree
	from heapq_heapdata import data
	
	
	print('random    :', data)
	heapq.heapify(data)
	print('heapified :')
	show_tree(data)

snippet heapq_heappop.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/heapq_heappop.py
	
	import heapq
	from heapq_showtree import show_tree
	from heapq_heapdata import data
	
	print('random    :', data)
	heapq.heapify(data)
	print('heapified :')
	show_tree(data)
	print
	
	
	for i in range(2):
	    smallest = heapq.heappop(data)
	    print('pop    %3d:' % smallest)
	    show_tree(data)

snippet heapq_heappush.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/heapq_heappush.py
	
	import heapq
	from heapq_showtree import show_tree
	from heapq_heapdata import data
	
	heap = []
	print('random :', data)
	print()
	
	
	for n in data:
	    print('add %3d:' % n)
	    heapq.heappush(heap, n)
	    show_tree(heap)

snippet heapq_heapreplace.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/heapq_heapreplace.py
	
	import heapq
	from heapq_showtree import show_tree
	from heapq_heapdata import data
	
	
	heapq.heapify(data)
	print('start:')
	show_tree(data)
	
	for n in [0, 13]:
	    smallest = heapq.heapreplace(data, n)
	    print('replace %2d with %2d:' % (smallest, n))
	    show_tree(data)

snippet heapq_showtree.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/heapq_showtree.py
	
	import math
	from io import StringIO
	
	
	def show_tree(tree, total_width=36, fill=' '):
	    """Pretty-print a tree."""
	    output = StringIO()
	    last_row = -1
	    for i, n in enumerate(tree):
	        if i:
	            row = int(math.floor(math.log(i + 1, 2)))
	        else:
	            row = 0
	        if row != last_row:
	            output.write('\n')
	        columns = 2**row
	        col_width = int(math.floor((total_width * 1.0) / columns))
	        output.write(str(n).center(col_width, fill))
	        last_row = row
	    print(output.getvalue())
	    print('-' * total_width)
	    print()

snippet hmac_base64.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/hmac_base64.py
	
	"""Generate a base64 encoded HMAC signature.
	
	"""
	
	__module_id__ = "$Id$"
	
	import base64
	import hmac
	import hashlib
	
	with open('lorem.txt', 'rb') as f:
	    body = f.read()
	
	hash = hmac.new('secret-shared-key-goes-here', body, hashlib.sha1)
	digest = hash.digest()
	print base64.encodestring(digest)

snippet hmac_pickle.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/hmac_pickle.py
	#!/usr/bin/env python
	"""Check the digests of pickles passed through a stream.
	"""
	#end_pymotw_header
	
	import hashlib
	import hmac
	try:
	    import cPickle as pickle
	except:
	    import pickle
	import pprint
	from StringIO import StringIO
	
	
	def make_digest(message):
	    "Return a digest for the message."
	    hash = hmac.new('secret-shared-key-goes-here',
	                    message,
	                    hashlib.sha1)
	    return hash.hexdigest()
	
	
	class SimpleObject(object):
	    """A very simple class to demonstrate checking digests before
	    unpickling.
	    """
	    def __init__(self, name):
	        self.name = name
	    def __str__(self):
	        return self.name
	
	
	# Simulate a writable socket or pipe with StringIO
	out_s = StringIO()
	
	# Write a valid object to the stream:
	#  digest\nlength\npickle
	o = SimpleObject('digest matches')
	pickled_data = pickle.dumps(o)
	digest = make_digest(pickled_data)
	header = '%s %s' % (digest, len(pickled_data))
	print 'WRITING:', header
	out_s.write(header + '\n')
	out_s.write(pickled_data)
	
	# Write an invalid object to the stream
	o = SimpleObject('digest does not match')
	pickled_data = pickle.dumps(o)
	digest = make_digest('not the pickled data at all')
	header = '%s %s' % (digest, len(pickled_data))
	print '\nWRITING:', header
	out_s.write(header + '\n')
	out_s.write(pickled_data)
	
	out_s.flush()
	
	
	# Simulate a readable socket or pipe with StringIO
	in_s = StringIO(out_s.getvalue())
	
	# Read the data
	while True:
	    first_line = in_s.readline()
	    if not first_line:
	        break
	    incoming_digest, incoming_length = first_line.split(' ')
	    incoming_length = int(incoming_length)
	    print '\nREAD:', incoming_digest, incoming_length
	
	    incoming_pickled_data = in_s.read(incoming_length)
	
	    actual_digest = make_digest(incoming_pickled_data)
	    print 'ACTUAL:', actual_digest
	
	    if incoming_digest != actual_digest:
	        print 'WARNING: Data corruption'
	    else:
	        obj = pickle.loads(incoming_pickled_data)
	        print 'OK:', obj
	    

snippet hmac_sha.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/hmac_sha.py
	#!/usr/bin/env python
	"""Generate an HMAC signature using SHA1.
	"""
	#end_pymotw_header
	
	import hmac
	import hashlib
	
	digest_maker = hmac.new('secret-shared-key-goes-here',
	                        '',
	                        hashlib.sha1)
	
	with open('hmac_sha.py', 'rb') as f:
	    while True:
	        block = f.read(1024)
	        if not block:
	            break
	        digest_maker.update(block)
	
	digest = digest_maker.hexdigest()
	print digest

snippet hmac_simple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/hmac_simple.py
	
	"""Generate a simple HMAC signature.
	
	"""
	
	__module_id__ = "$Id$"
	
	import hmac
	
	digest_maker = hmac.new('secret-shared-key-goes-here')
	
	with open('lorem.txt', 'rb') as f:
	    while True:
	        block = f.read(1024)
	        if not block:
	            break
	        digest_maker.update(block)
	
	digest = digest_maker.hexdigest()
	print digest

snippet imaplib_append.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_append.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import time
	import email.message
	import imaplib_connect
	
	new_message = email.message.Message()
	new_message.set_unixfrom('pymotw')
	new_message['Subject'] = 'subject goes here'
	new_message['From'] = 'pymotw@example.com'
	new_message['To'] = 'example@example.com'
	new_message.set_payload('This is the body of the message.\n')
	
	print new_message
	
	c = imaplib_connect.open_connection()
	try:
	    c.append('INBOX', '',
	             imaplib.Time2Internaldate(time.time()),
	             str(new_message))
	
	    # Show the headers for all messages in the mailbox
	    c.select('INBOX')
	    typ, [msg_ids] = c.search(None, 'ALL')
	    for num in msg_ids.split():
	        typ, msg_data = c.fetch(num, '(BODY.PEEK[HEADER])')
	        for response_part in msg_data:
	            if isinstance(response_part, tuple):
	                print '\n%s:' % num
	                print response_part[1]
	        
	finally:
	    try:
	        c.close()
	    except:
	        pass
	    c.logout()

snippet imaplib_archive_read.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_archive_read.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import imaplib_connect
	
	c = imaplib_connect.open_connection()
	try:
	    # Find the "SEEN" messages in INBOX
	    c.select('INBOX')
	    typ, [response] = c.search(None, 'SEEN')
	    if typ != 'OK':
	        raise RuntimeError(response)
	    
	    # Create a new mailbox, "Archive.Today"
	    msg_ids = ','.join(response.split(' '))
	    typ, create_response = c.create('Archive.Today')
	    print 'CREATED Archive.Today:', create_response
	    
	    # Copy the messages
	    print 'COPYING:', msg_ids
	    c.copy(msg_ids, 'Archive.Today')
	    
	    # Look at the results
	    c.select('Archive.Today')
	    typ, [response] = c.search(None, 'ALL')
	    print 'COPIED:', response
	    
	finally:
	    c.close()
	    c.logout()
	     
snippet imaplib_connect_fail.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_connect_fail.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import ConfigParser
	import os
	
	# Read the config file
	config = ConfigParser.ConfigParser()
	config.read([os.path.expanduser('~/.pymotw')])
	
	# Connect to the server
	hostname = config.get('server', 'hostname')
	print 'Connecting to', hostname
	connection = imaplib.IMAP4_SSL(hostname)
	
	# Login to our account
	username = config.get('account', 'username')
	password = 'this_is_the_wrong_password'
	print 'Logging in as', username
	try:
	    connection.login(username, password)
	except Exception as err:
	    print 'ERROR:', err

snippet imaplib_connect.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_connect.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import ConfigParser
	import os
	
	def open_connection(verbose=False):
	    # Read the config file
	    config = ConfigParser.ConfigParser()
	    config.read([os.path.expanduser('~/.pymotw')])
	
	    # Connect to the server
	    hostname = config.get('server', 'hostname')
	    if verbose: print 'Connecting to', hostname
	    connection = imaplib.IMAP4_SSL(hostname)
	
	    # Login to our account
	    username = config.get('account', 'username')
	    password = config.get('account', 'password')
	    if verbose: print 'Logging in as', username
	    connection.login(username, password)
	    return connection
	
	if __name__ == '__main__':
	    c = open_connection(verbose=True)
	    try:
	        print c
	    finally:
	        c.logout()

snippet imaplib_delete_messages.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_delete_messages.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import imaplib_connect
	from imaplib_list_parse import parse_list_response
	
	c = imaplib_connect.open_connection()
	try:
	    c.select('Archive.Today')
	
	    # What ids are in the mailbox?
	    typ, [msg_ids] = c.search(None, 'ALL')
	    print 'Starting messages:', msg_ids
	    
	    # Find the message(s)
	    typ, [msg_ids] = c.search(None, '(SUBJECT "Lorem ipsum")')
	    msg_ids = ','.join(msg_ids.split(' '))
	    print 'Matching messages:', msg_ids
	    
	    # What are the current flags?
	    typ, response = c.fetch(msg_ids, '(FLAGS)')
	    print 'Flags before:', response
	    
	    # Change the Deleted flag
	    typ, response = c.store(msg_ids, '+FLAGS', r'(\Deleted)')
	    
	    # What are the flags now?
	    typ, response = c.fetch(msg_ids, '(FLAGS)')
	    print 'Flags after:', response
	    
	    # Really delete the message.
	    typ, response = c.expunge()
	    print 'Expunged:', response
	    
	    # What ids are left in the mailbox?
	    typ, [msg_ids] = c.search(None, 'ALL')
	    print 'Remaining messages:', msg_ids
	    
	finally:
	    try:
	        c.close()
	    except:
	        pass
	    c.logout()

snippet imaplib_fetch_body.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_fetch_body.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import imaplib_connect
	
	c = imaplib_connect.open_connection()
	try:
	    c.select('INBOX', readonly=True)
	    
	    print 'BODY:'
	    typ, msg_data = c.fetch('1', '(BODY.PEEK[TEXT])')
	    for response_part in msg_data:
	        if isinstance(response_part, tuple):
	            print response_part[1]
	
	finally:
	    try:
	        c.close()
	    except:
	        pass
	    c.logout()

snippet imaplib_fetch_raw.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_fetch_raw.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import pprint
	import imaplib_connect
	
	imaplib.Debug = 4
	c = imaplib_connect.open_connection()
	try:
	    c.select('INBOX', readonly=True)
	    typ, msg_data = c.fetch('1', '(BODY.PEEK[HEADER] FLAGS)')
	    pprint.pprint(msg_data)
	finally:
	    try:
	        c.close()
	    except:
	        pass
	    c.logout()

snippet imaplib_fetch_rfc822.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_fetch_rfc822.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import email
	import imaplib_connect
	
	c = imaplib_connect.open_connection()
	try:
	    c.select('INBOX', readonly=True)
	    
	    typ, msg_data = c.fetch('1', '(RFC822)')
	    for response_part in msg_data:
	        if isinstance(response_part, tuple):
	            msg = email.message_from_string(response_part[1])
	            for header in [ 'subject', 'to', 'from' ]:
	                print '%-8s: %s' % (header.upper(), msg[header])
	
	finally:
	    try:
	        c.close()
	    except:
	        pass
	    c.logout()

snippet imaplib_fetch_separately.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_fetch_separately.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import pprint
	import imaplib_connect
	
	c = imaplib_connect.open_connection()
	try:
	    c.select('INBOX', readonly=True)
	    
	    print 'HEADER:'
	    typ, msg_data = c.fetch('1', '(BODY.PEEK[HEADER])')
	    for response_part in msg_data:
	        if isinstance(response_part, tuple):
	            print response_part[1]
	    
	    print 'BODY TEXT:'
	    typ, msg_data = c.fetch('1', '(BODY.PEEK[TEXT])')
	    for response_part in msg_data:
	        if isinstance(response_part, tuple):
	            print response_part[1]
	
	    print '\nFLAGS:'
	    typ, msg_data = c.fetch('1', '(FLAGS)')
	    for response_part in msg_data:
	        print response_part
	        print imaplib.ParseFlags(response_part)
	finally:
	    try:
	        c.close()
	    except:
	        pass
	    c.logout()

snippet imaplib_list_parse.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_list_parse.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import re
	
	from imaplib_connect import open_connection
	
	list_response_pattern = re.compile(
	    r'\((?P<flags>.*?)\) "(?P<delimiter>.*)" (?P<name>.*)'
	    )
	
	def parse_list_response(line):
	    match = list_response_pattern.match(line)
	    flags, delimiter, mailbox_name = match.groups()
	    mailbox_name = mailbox_name.strip('"')
	    return (flags, delimiter, mailbox_name)
	
	if __name__ == '__main__':
	    c = open_connection()
	    try:
	        typ, data = c.list()
	    finally:
	        c.logout()
	    print 'Response code:', typ
	
	    for line in data:
	        print 'Server response:', line
	        flags, delimiter, mailbox_name = parse_list_response(line)
	        print 'Parsed response:', (flags, delimiter, mailbox_name)

snippet imaplib_list_pattern.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_list_pattern.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	
	from imaplib_connect import open_connection
	
	if __name__ == '__main__':
	    c = open_connection()
	    try:
	        typ, data = c.list(pattern='*Archive*')
	    finally:
	        c.logout()
	    print 'Response code:', typ
	
	    for line in data:
	        print 'Server response:', line

snippet imaplib_list.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_list.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	from pprint import pprint
	from imaplib_connect import open_connection
	
	c = open_connection()
	try:
	    typ, data = c.list()
	    print 'Response code:', typ
	    print 'Response:'
	    pprint(data)
	finally:
	    c.logout()

snippet imaplib_list_subfolders.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_list_subfolders.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	
	from imaplib_connect import open_connection
	
	if __name__ == '__main__':
	    c = open_connection()
	    try:
	        typ, data = c.list(directory='Archive')
	    finally:
	        c.logout()
	    print 'Response code:', typ
	
	    for line in data:
	        print 'Server response:', line

snippet imaplib_search_all.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_search_all.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import imaplib_connect
	from imaplib_list_parse import parse_list_response
	
	c = imaplib_connect.open_connection()
	try:
	    typ, mailbox_data = c.list()
	    for line in mailbox_data:
	        flags, delimiter, mailbox_name = parse_list_response(line)
	        c.select(mailbox_name, readonly=True)
	        typ, msg_ids = c.search(None, 'ALL')
	        print mailbox_name, typ, msg_ids        
	finally:
	    try:
	        c.close()
	    except:
	        pass
	    c.logout()

snippet imaplib_search_from.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_search_from.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import imaplib_connect
	from imaplib_list_parse import parse_list_response
	
	c = imaplib_connect.open_connection()
	try:
	    typ, mailbox_data = c.list()
	    for line in mailbox_data:
	        flags, delimiter, mailbox_name = parse_list_response(line)
	        c.select(mailbox_name, readonly=True)
	        typ, msg_ids = c.search(
	            None,
	            '(FROM "Doug" SUBJECT "test message 2")')
	        print mailbox_name, typ, msg_ids        
	finally:
	    try:
	        c.close()
	    except:
	        pass
	    c.logout()

snippet imaplib_search_subject.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_search_subject.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import imaplib_connect
	from imaplib_list_parse import parse_list_response
	
	c = imaplib_connect.open_connection()
	try:
	    typ, mailbox_data = c.list()
	    for line in mailbox_data:
	        flags, delimiter, mailbox_name = parse_list_response(line)
	        c.select(mailbox_name, readonly=True)
	        typ, msg_ids = c.search(None, '(SUBJECT "test message 2")')
	        print mailbox_name, typ, msg_ids        
	finally:
	    try:
	        c.close()
	    except:
	        pass
	    c.logout()

snippet imaplib_select_invalid.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_select_invalid.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import imaplib_connect
	
	c = imaplib_connect.open_connection()
	try:
	    typ, data = c.select('Does Not Exist')
	    print typ, data
	finally:
	    c.logout() 
snippet imaplib_select.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_select.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import imaplib_connect
	
	c = imaplib_connect.open_connection()
	try:
	    typ, data = c.select('INBOX')
	    print typ, data
	    num_msgs = int(data[0])
	    print 'There are %d messages in INBOX' % num_msgs
	finally:
	    c.close()
	    c.logout() 
snippet imaplib_status.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imaplib_status.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imaplib
	import re
	
	from imaplib_connect import open_connection
	from imaplib_list_parse import parse_list_response
	
	if __name__ == '__main__':
	    c = open_connection()
	    try:
	        typ, data = c.list()
	        for line in data:
	            flags, delimiter, mailbox = parse_list_response(line)
	            print c.status(
	                mailbox,
	                '(MESSAGES RECENT UIDNEXT UIDVALIDITY UNSEEN)')
	    finally:
	        c.logout()
	        

snippet imp_find_module_error.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imp_find_module_error.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imp
	
	try:
	    imp.find_module('no_such_module')
	except ImportError, err:
	    print 'ImportError:', err
	

snippet imp_find_module.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imp_find_module.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imp
	from imp_get_suffixes import module_types
	import os
	
	# Get the full name of the directory containing this module
	base_dir = os.path.dirname(__file__) or os.getcwd()
	
	print 'Package:'
	f, pkg_fname, description = imp.find_module('example')
	print module_types[description[2]], pkg_fname.replace(base_dir, '.')
	print
	
	print 'Submodule:'
	f, mod_fname, description = imp.find_module('submodule', [pkg_fname])
	print module_types[description[2]], mod_fname.replace(base_dir, '.')
	if f: f.close()

snippet imp_get_suffixes.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imp_get_suffixes.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imp
	
	module_types = { imp.PY_SOURCE:   'source',
	                 imp.PY_COMPILED: 'compiled',
	                 imp.C_EXTENSION: 'extension',
	                 imp.PY_RESOURCE: 'resource',
	                 imp.PKG_DIRECTORY: 'package',
	                 }
	
	def main():
	    fmt = '%10s %10s %10s'
	    print fmt % ('Extension', 'Mode', 'Type')
	    print '-' * 32
	    for extension, mode, module_type in imp.get_suffixes():
	        print fmt % (extension, mode, module_types[module_type])
	
	if __name__ == '__main__':
	    main()

snippet imp_load_module.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imp_load_module.py
	#!/usr/bin/env python
	# encoding: utf-8
	"""
	"""
	#end_pymotw_header
	
	import imp
	
	f, filename, description = imp.find_module('example')
	try:
	    example_package = imp.load_module('example', f,
	                                      filename, description)
	    print 'Package:', example_package
	finally:
	    if f:
	        f.close()
	
	f, filename, description = imp.find_module(
	    'submodule', example_package.__path__)
	try:
	    submodule = imp.load_module('example.submodule', f,
	                                filename, description)
	    print 'Submodule:', submodule
	finally:
	    if f:
	        f.close()

snippet imp_load_module_reload.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/imp_load_module_reload.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import imp
	import sys
	
	for i in range(2):
	    print i,
	    try:
	        m = sys.modules['example']
	    except KeyError:
	        print '(not in sys.modules)',
	    else:
	        print '(have in sys.modules)',
	    f, filename, description = imp.find_module('example')
	    example_package = imp.load_module('example', f, filename,
	                                      description)

snippet inspect_formatargspec.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_formatargspec.py
	
	"""Print information about the arguments to a method.
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	import example
	
	spec = inspect.getargspec(example.module_level_function)
	print spec
	print inspect.formatargspec(spec)

snippet inspect_getargspec_function.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getargspec_function.py
	
	"""Print information about the arguments to a method.
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	import example
	
	arg_spec = inspect.getargspec(example.module_level_function)
	print 'NAMES   :', arg_spec[0]
	print '*       :', arg_spec[1]
	print '**      :', arg_spec[2]
	print 'defaults:', arg_spec[3]
	
	args_with_defaults = arg_spec[0][-len(arg_spec[3]):]
	print 'args & defaults:', zip(args_with_defaults, arg_spec[3])

snippet inspect_getargvalues.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getargvalues.py
	
	"""Inspecting the call stack.
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	
	def recurse(limit):
	    local_variable = '.' * limit
	    print limit, inspect.getargvalues(inspect.currentframe())
	    if limit <= 0:
	        return
	    recurse(limit - 1)
	    return
	
	if __name__ == '__main__':
	    recurse(2)

snippet inspect_getcallargs.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getcallargs.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show how values map to function arguments.
	"""
	#end_pymotw_header
	
	import inspect
	import example
	import pprint
	
	for args, kwds in [
	    (('a',), {'unknown_name':'value'}),
	    (('a',), {'arg2':'value'}),
	    (('a', 'b', 'c', 'd'), {}),
	    ((), {'arg1':'a'}),
	    ]:
	    print args, kwds
	    callargs = inspect.getcallargs(example.module_level_function,
	                                   *args, **kwds)
	    pprint.pprint(callargs, width=74)
	    example.module_level_function(**callargs)
	    print

snippet inspect_getclasstree.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getclasstree.py
	
	"""
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	import example
	
	class C(example.B):
	    pass
	
	class D(C, example.A):
	    pass
	
	def print_class_tree(tree, indent=-1):
	    if isinstance(tree, list):
	        for node in tree:
	            print_class_tree(node, indent+1)
	    else:
	        print '  ' * indent, tree[0].__name__
	    return
	
	if __name__ == '__main__':
	    print 'A, B, C, D:'
	    print_class_tree(inspect.getclasstree([example.A, example.B, C, D]))

snippet inspect_getclasstree_unique.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getclasstree_unique.py
	
	"""
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	import example
	from inspect_getclasstree import *
	
	print_class_tree(inspect.getclasstree([example.A, example.B, C, D],
	                                      unique=True,
	                                      ))

snippet inspect_getcomments_method.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getcomments_method.py
	
	"""Show the comment before a method.
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	import example
	
	print inspect.getcomments(example.B.do_something)

snippet inspect_getcomments_module.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getcomments_module.py
	
	"""Show the comment before a method.
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	import example
	
	print inspect.getcomments(example)

snippet inspect_getdoc.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getdoc.py
	
	"""Docstrings
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	import example
	
	print 'B.__doc__:'
	print example.B.__doc__
	print
	print 'getdoc(B):'
	print inspect.getdoc(example.B)

snippet inspect_getmembers_class_methods_b.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getmembers_class_methods_b.py
	
	"""Using getmembers()
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	from pprint import pprint
	
	import example
	
	pprint(inspect.getmembers(example.B, inspect.ismethod))

snippet inspect_getmembers_class_methods.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getmembers_class_methods.py
	
	"""Using getmembers()
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	from pprint import pprint
	
	import example
	
	pprint(inspect.getmembers(example.A, inspect.ismethod))

snippet inspect_getmembers_class.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getmembers_class.py
	#!/usr/bin/env python
	"""Using getmembers()
	"""
	#end_pymotw_header
	
	import inspect
	from pprint import pprint
	
	import example
	
	pprint(inspect.getmembers(example.A), width=65)

snippet inspect_getmembers_instance.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getmembers_instance.py
	
	"""Using getmembers()
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	from pprint import pprint
	
	import example
	
	a = example.A(name='inspect_getmembers')
	pprint(inspect.getmembers(a))

snippet inspect_getmembers_module_class.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getmembers_module_class.py
	
	"""Using getmembers()
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	
	import example
	
	for name, data in inspect.getmembers(example, inspect.isclass):
	    print '%s :' % name, repr(data)

snippet inspect_getmembers_module.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getmembers_module.py
	#!/usr/bin/env python
	"""Using getmembers()
	"""
	#end_pymotw_header
	
	import inspect
	
	import example
	
	for name, data in inspect.getmembers(example):
	    if name.startswith('__'):
	        continue
	    print '%s : %r' % (name, data)

snippet inspect_getmoduleinfo.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getmoduleinfo.py
	
	"""Learn about a module
	
	"""
	
	__version__ = "$Id$"
	
	import imp
	import inspect
	import sys
	
	if len(sys.argv) >= 2:
	    filename = sys.argv[1]
	else:
	    filename = 'example.py'
	
	try:
	    (name, suffix, mode, mtype)  = inspect.getmoduleinfo(filename)
	except TypeError:
	    print 'Could not determine module type of %s' % filename
	else:
	    mtype_name = { imp.PY_SOURCE:'source',
	                   imp.PY_COMPILED:'compiled',
	                   }.get(mtype, mtype)
	
	    mode_description = { 'rb':'(read-binary)',
	                         'U':'(universal newline)',
	                         }.get(mode, '')
	
	    print 'NAME   :', name
	    print 'SUFFIX :', suffix
	    print 'MODE   :', mode, mode_description
	    print 'MTYPE  :', mtype_name
	

snippet inspect_getmro.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getmro.py
	
	"""
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	import example
	
	class C(object):
	    pass
	
	class C_First(C, example.B):
	    pass
	
	class B_First(example.B, C):
	    pass
	
	print 'B_First:'
	for c in inspect.getmro(B_First):
	    print '\t', c.__name__
	print
	print 'C_First:'
	for c in inspect.getmro(C_First):
	    print '\t', c.__name__

snippet inspect_getsource_class.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getsource_class.py
	
	"""
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	import example
	
	print inspect.getsource(example.A)

snippet inspect_getsourcelines_method.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getsourcelines_method.py
	
	"""
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	import pprint
	import example
	
	pprint.pprint(inspect.getsourcelines(example.A.get_name))

snippet inspect_getsource_method.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_getsource_method.py
	
	"""
	
	"""
	
	__version__ = "$Id$"
	
	import inspect
	import example
	
	print inspect.getsource(example.A.get_name)

snippet inspect_stack.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_stack.py
	#!/usr/bin/env python
	"""Inspecting the call stack.
	"""
	#end_pymotw_header
	
	import inspect
	
	def show_stack():
	    for level in inspect.stack():
	        frame, filename, line_num, func, src_code, src_index = level
	        print '%s[%d]\n  -> %s' % (filename,
	                                   line_num,
	                                   src_code[src_index].strip(),
	                                   )
	        print inspect.getargvalues(frame)
	        print
	
	def recurse(limit):
	    local_variable = '.' * limit
	    if limit <= 0:
	        show_stack()
	        return
	    recurse(limit - 1)
	    return
	
	if __name__ == '__main__':
	    recurse(2)

snippet itertools_chain.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_chain.py
	
	from itertools import *
	
	for i in chain([1, 2, 3], ['a', 'b', 'c']):
	    print(i)
	print()

snippet itertools_count.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_count.py
	
	from itertools import *
	
	for i in zip(count(1), ['a', 'b', 'c']):
	    print(i)

snippet itertools_cycle.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_cycle.py
	
	from itertools import *
	
	for i, item in zip(range(7), cycle(['a', 'b', 'c'])):
	    print(i, item)

snippet itertools_dropwhile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_dropwhile.py
	
	from itertools import *
	
	
	def should_drop(x):
	    print('Testing:', x)
	    return (x < 1)
	
	
	for i in dropwhile(should_drop, [-1, 0, 1, 2, -2]):
	    print('Yielding:', i)

snippet itertools_groupby.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_groupby.py
	
	from itertools import *
	from operator import itemgetter
	
	d = dict(a=1, b=2, c=1, d=2, e=1, f=2, g=3)
	di = sorted(d.items(), key=itemgetter(1))
	
	
	for k, g in groupby(di, key=itemgetter(1)):
	    print(k, list(map(itemgetter(0), g)))

snippet itertools_groupby_seq.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_groupby_seq.py
	
	from itertools import *
	import operator
	import pprint
	
	
	class Point:
	    def __init__(self, x, y):
	        self.x = x
	        self.y = y
	
	    def __repr__(self):
	        return '(%s, %s)' % (self.x, self.y)
	
	    def __cmp__(self, other):
	        return cmp((self.x, self.y), (other.x, other.y))
	
	
	# Create a dataset of Point instances
	data = list(map(Point,
	                cycle(islice(count(), 3)),
	                islice(count(), 7),
	                )
	            )
	print('Data:')
	pprint.pprint(data, width=69)
	print()
	
	# Try to group the unsorted data based on X values
	print('Grouped, unsorted:')
	for k, g in groupby(data, operator.attrgetter('x')):
	    print(k, list(g))
	print()
	
	# Sort the data
	data.sort()
	print('Sorted:')
	pprint.pprint(data, width=69)
	print()
	
	# Group the sorted data based on X values
	print('Grouped, sorted:')
	for k, g in groupby(data, operator.attrgetter('x')):
	    print(k, list(g))
	print()

snippet itertools_ifilterfalse.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_ifilterfalse.py
	
	"""Using ifilterfalse()
	
	"""
	
	__version__ = "$Id$"
	
	from itertools import *
	
	def check_item(x):
	    print 'Testing:', x
	    return (x<1)
	
	for i in ifilterfalse(check_item, [ -1, 0, 1, 2, -2 ]):
	    print 'Yielding:', i

snippet itertools_ifilter.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_ifilter.py
	
	from itertools import *
	
	
	def check_item(x):
	    print('Testing:', x)
	    return (x < 1)
	
	
	for i in filter(check_item, [-1, 0, 1, 2, -2]):
	    print('Yielding:', i)

snippet itertools_imap.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_imap.py
	
	"""Using imap()
	
	"""
	
	__version__ = "$Id$"
	
	from itertools import *
	
	print 'Doubles:'
	for i in imap(lambda x:2*x, xrange(5)):
	    print i
	
	print 'Multiples:'
	for i in imap(lambda x,y:(x, y, x*y), xrange(5), xrange(5,10)):
	    print '%d * %d = %d' % i

snippet itertools_islice.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_islice.py
	
	"""Using islice()
	
	"""
	
	__version__ = "$Id$"
	
	from itertools import *
	
	print 'Stop at 5:'
	for i in islice(count(), 5):
	    print i,
	print '\n'
	
	print 'Start at 5, Stop at 10:'
	for i in islice(count(), 5, 10):
	    print i,
	print '\n'
	
	print 'By tens to 100:'
	for i in islice(count(), 0, 100, 10):
	    print i,
	print '\n'

snippet itertools_izip.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_izip.py
	
	"""Using izip()
	
	"""
	
	__version__ = "$Id$"
	
	from itertools import *
	
	for i in izip([1, 2, 3], ['a', 'b', 'c']):
	    print i

snippet itertools_repeat_imap.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_repeat_imap.py
	
	"""Using repeat() and imap()
	
	"""
	
	__version__ = "$Id$"
	
	from itertools import *
	
	for i in imap(lambda x,y:(x, y, x*y), repeat(2), xrange(5)):
	    print '%d * %d = %d' % i

snippet itertools_repeat_izip.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_repeat_izip.py
	
	"""Using repeat() with izip().
	
	"""
	
	__version__ = "$Id$"
	
	from itertools import *
	
	for i, s in izip(count(), repeat('over-and-over', 5)):
	    print i, s

snippet itertools_repeat.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_repeat.py
	
	"""Using repeat()
	
	"""
	
	__version__ = "$Id$"
	
	from itertools import *
	
	for i in repeat('over-and-over', 5):
	    print i

snippet itertools_starmap.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_starmap.py
	
	"""Using starmap()
	
	"""
	
	__version__ = "$Id$"
	
	from itertools import *
	
	values = [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]
	for i in starmap(lambda x,y:(x, y, x*y), values):
	    print '%d * %d = %d' % i

snippet itertools_takewhile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_takewhile.py
	
	"""Using takewhile()
	
	"""
	
	__version__ = "$Id$"
	
	from itertools import *
	
	def should_take(x):
	    print 'Testing:', x
	    return (x<2)
	
	for i in takewhile(should_take, [ -1, 0, 1, 2, -2 ]):
	    print 'Yielding:', i

snippet itertools_tee_error.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_tee_error.py
	
	"""Using tee()
	
	"""
	
	__version__ = "$Id$"
	
	from itertools import *
	
	r = islice(count(), 5)
	i1, i2 = tee(r)
	
	print 'r:',
	for i in r:
	    print i,
	    if i > 1:
	        break
	print
	
	print 'i1:', list(i1)
	print 'i2:', list(i2)
	

snippet itertools_tee.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/itertools_tee.py
	
	"""Using tee()
	
	"""
	
	__version__ = "$Id$"
	
	from itertools import *
	
	r = islice(count(), 5)
	i1, i2 = tee(r)
	
	print 'i1:', list(i1)
	print 'i2:', list(i2)

snippet json_compact_encoding.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_compact_encoding.py
	# -*- coding: utf-8 -*-
	
	import json
	
	data = [{'a': 'A', 'b': (2, 4), 'c': 3.0}]
	print('DATA:', repr(data))
	
	print('repr(data)             :', len(repr(data)))
	
	plain_dump = json.dumps(data)
	print('dumps(data)            :', len(plain_dump))
	
	small_indent = json.dumps(data, indent=2)
	print('dumps(data, indent=2)  :', len(small_indent))
	
	with_separators = json.dumps(data, separators=(',', ':'))
	print('dumps(data, separators):', len(with_separators))

snippet json_decoder_object_hook.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_decoder_object_hook.py
	# -*- coding: utf-8 -*-
	
	import json
	
	
	class MyDecoder(json.JSONDecoder):
	
	    def __init__(self):
	        json.JSONDecoder.__init__(self, object_hook=self.dict_to_object)
	
	    def dict_to_object(self, d):
	        if '__class__' in d:
	            class_name = d.pop('__class__')
	            module_name = d.pop('__module__')
	            module = __import__(module_name)
	            print('MODULE:', module.__name__)
	            class_ = getattr(module, class_name)
	            print('CLASS:', class_)
	            args = {key: value for key, value in d.items()}
	            print('INSTANCE ARGS:', args)
	            inst = class_(**args)
	        else:
	            inst = d
	        return inst
	
	
	encoded_object = '''
	[{"s": "instance value goes here",
	  "__module__": "json_myobj", "__class__": "MyObj"}]
	'''
	
	myobj_instance = MyDecoder().decode(encoded_object)
	print(myobj_instance)

snippet json_dump_default.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_dump_default.py
	# -*- coding: utf-8 -*-
	
	import json
	import json_myobj
	
	obj = json_myobj.MyObj('instance value goes here')
	
	print('First attempt')
	try:
	    print(json.dumps(obj))
	except TypeError as e:
	    print('ERROR:', e)
	
	
	def convert_to_builtin_type(obj):
	    print('default(', repr(obj), ')')
	    # Convert objects to a dictionary of their representation
	    d = {'__class__': obj.__class__.__name__,
	         '__module__': obj.__module__,
	         }
	    d.update(obj.__dict__)
	    return d
	
	
	print()
	print('With default')
	print(json.dumps(obj, default=convert_to_builtin_type))

snippet json_dump_file.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_dump_file.py
	# -*- coding: utf-8 -*-
	
	import json
	from io import StringIO
	
	data = [{'a': 'A', 'b': (2, 4), 'c': 3.0}]
	
	f = StringIO()
	json.dump(data, f)
	
	print(f.getvalue())

snippet json_encoder_default.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_encoder_default.py
	# -*- coding: utf-8 -*-
	
	import json
	import json_myobj
	
	
	class MyEncoder(json.JSONEncoder):
	
	    def default(self, obj):
	        print('default(', repr(obj), ')')
	        # Convert objects to a dictionary of their representation
	        d = {'__class__': obj.__class__.__name__,
	             '__module__': obj.__module__,
	             }
	        d.update(obj.__dict__)
	        return d
	
	
	obj = json_myobj.MyObj('internal data')
	print(obj)
	print(MyEncoder().encode(obj))

snippet json_encoder_iterable.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_encoder_iterable.py
	# -*- coding: utf-8 -*-
	
	import json
	
	encoder = json.JSONEncoder()
	data = [{'a': 'A', 'b': (2, 4), 'c': 3.0}]
	
	for part in encoder.iterencode(data):
	    print('PART:', part)

snippet json_indent.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_indent.py
	# -*- coding: utf-8 -*-
	
	import json
	
	data = [{'a': 'A', 'b': (2, 4), 'c': 3.0}]
	print('DATA:', repr(data))
	
	print('NORMAL:', json.dumps(data, sort_keys=True))
	print('INDENT:', json.dumps(data, sort_keys=True, indent=2))

snippet json_load_file.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_load_file.py
	# -*- coding: utf-8 -*-
	
	import json
	from io import StringIO
	
	f = StringIO('[{"a": "A", "c": 3.0, "b": [2, 4]}]')
	print(json.load(f))

snippet json_load_object_hook.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_load_object_hook.py
	# -*- coding: utf-8 -*-
	
	import json
	
	
	def dict_to_object(d):
	    if '__class__' in d:
	        class_name = d.pop('__class__')
	        module_name = d.pop('__module__')
	        module = __import__(module_name)
	        print('MODULE:', module.__name__)
	        class_ = getattr(module, class_name)
	        print('CLASS:', class_)
	        args = {key: value for key, value in d.items()}
	        print('INSTANCE ARGS:', args)
	        inst = class_(**args)
	    else:
	        inst = d
	    return inst
	
	
	encoded_object = '''
	    [{"s": "instance value goes here",
	      "__module__": "json_myobj", "__class__": "MyObj"}]
	    '''
	
	myobj_instance = json.loads(encoded_object, object_hook=dict_to_object)
	print(myobj_instance)

snippet json_mixed_data.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_mixed_data.py
	# -*- coding: utf-8 -*-
	
	import json
	
	decoder = json.JSONDecoder()
	
	
	def get_decoded_and_remainder(input_data):
	    obj, end = decoder.raw_decode(input_data)
	    remaining = input_data[end:]
	    return (obj, end, remaining)
	
	
	encoded_object = '[{"a": "A", "c": 3.0, "b": [2, 4]}]'
	extra_text = 'This text is not JSON.'
	
	print('JSON first:')
	data = ' '.join([encoded_object, extra_text])
	obj, end, remaining = get_decoded_and_remainder(data)
	
	print('Object              :', obj)
	print('End of parsed input :', end)
	print('Remaining text      :', repr(remaining))
	
	print()
	print('JSON embedded:')
	try:
	    data = ' '.join([extra_text, encoded_object, extra_text])
	    obj, end, remaining = get_decoded_and_remainder(data)
	except ValueError as e:
	    print('ERROR:', e)

snippet json_myobj.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_myobj.py
	# -*- coding: utf-8 -*-
	
	
	class MyObj(object):
	
	    def __init__(self, s):
	        self.s = s
	
	    def __repr__(self):
	        return '<MyObj(%s)>' % self.s

snippet json_simple_types_decode.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_simple_types_decode.py
	# -*- coding: utf-8 -*-
	
	import json
	
	data = [{'a': 'A', 'b': (2, 4), 'c': 3.0}]
	print('DATA   :', data)
	
	data_string = json.dumps(data)
	print('ENCODED:', data_string)
	
	decoded = json.loads(data_string)
	print('DECODED:', decoded)
	
	print('ORIGINAL:', type(data[0]['b']))
	print('DECODED :', type(decoded[0]['b']))

snippet json_simple_types.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_simple_types.py
	# -*- coding: utf-8 -*-
	
	import json
	
	data = [{'a': 'A', 'b': (2, 4), 'c': 3.0}]
	print('DATA:', repr(data))
	
	data_string = json.dumps(data)
	print('JSON:', data_string)

snippet json_skipkeys.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_skipkeys.py
	# -*- coding: utf-8 -*-
	
	import json
	
	data = [{'a': 'A', 'b': (2, 4), 'c': 3.0, ('d',): 'D tuple'}]
	
	print('First attempt')
	try:
	    print(json.dumps(data))
	except (TypeError, ValueError) as e:
	    print('ERROR:', e)
	
	print()
	print('Second attempt')
	print(json.dumps(data, skipkeys=True))

snippet json_sort_keys.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/json_sort_keys.py
	# -*- coding: utf-8 -*-
	
	import json
	
	data = [{'a': 'A', 'b': (2, 4), 'c': 3.0}]
	print('DATA:', repr(data))
	
	unsorted = json.dumps(data)
	print('JSON:', json.dumps(data))
	print('SORT:', json.dumps(data, sort_keys=True))
	
	first = json.dumps(data, sort_keys=True)
	second = json.dumps(data, sort_keys=True)
	
	print('UNSORTED MATCH:', unsorted == first)
	print('SORTED MATCH  :', first == second)

snippet linecache_data.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/linecache_data.py
	#!/usr/bin/env python
	"""Example use of linecache module.
	"""
	#end_pymotw_header
	
	import os
	import tempfile
	
	lorem = '''Lorem ipsum dolor sit amet, consectetuer
	adipiscing elit.  Vivamus eget elit. In posuere mi non
	risus. Mauris id quam posuere lectus sollicitudin
	varius. Praesent at mi. Nunc eu velit. Sed augue massa,
	fermentum id, nonummy a, nonummy sit amet, ligula. Curabitur
	eros pede, egestas at, ultricies ac, apellentesque eu,
	tellus.
	
	Sed sed odio sed mi luctus mollis. Integer et nulla ac augue
	convallis accumsan. Ut felis. Donec lectus sapien, elementum
	nec, condimentum ac, interdum non, tellus. Aenean viverra,
	mauris vehicula semper porttitor, ipsum odio consectetuer
	lorem, ac imperdiet eros odio a sapien. Nulla mauris tellus,
	aliquam non, egestas a, nonummy et, erat. Vivamus sagittis
	porttitor eros.'''
	
	def make_tempfile():
	    fd, temp_file_name = tempfile.mkstemp()
	    os.close(fd)
	    f = open(temp_file_name, 'wt')
	    try:
	        f.write(lorem)
	    finally:
	        f.close()
	    return temp_file_name
	
	def cleanup(filename):
	    os.unlink(filename)

snippet linecache_empty_line.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/linecache_empty_line.py
	#!/usr/bin/env python
	"""Example use of linecache module.
	"""
	#end_pymotw_header
	
	import linecache
	from linecache_data import *
	
	filename = make_tempfile()
	
	# Blank lines include the newline
	print 'BLANK : %r' % linecache.getline(filename, 8)
	
	cleanup(filename)

snippet linecache_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/linecache_example.py
	
	"""Example use of linecache module.
	
	See http://blog.doughellmann.com/2007/04/pymotw-linecache.html
	"""
	
	__module_id__ = '$Id$'
	
	import linecache
	import os
	import tempfile
	
	lorem = '''Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
	Vivamus eget elit. In posuere mi non risus. Mauris id quam posuere
	lectus sollicitudin varius. Praesent at mi. Nunc eu velit. Sed augue
	massa, fermentum id, nonummy a, nonummy sit amet, ligula. Curabitur
	eros pede, egestas at, ultricies ac, pellentesque eu, tellus. 
	
	Sed sed odio sed mi luctus mollis. Integer et nulla ac augue convallis
	accumsan. Ut felis. Donec lectus sapien, elementum nec, condimentum ac,
	interdum non, tellus. Aenean viverra, mauris vehicula semper porttitor,
	ipsum odio consectetuer lorem, ac imperdiet eros odio a sapien. Nulla
	mauris tellus, aliquam non, egestas a, nonummy et, erat. Vivamus
	sagittis porttitor eros.'''
	
	fd, temp_file_name = tempfile.mkstemp()
	os.close(fd)
	f = open(temp_file_name, 'wt')
	try:
		f.write(lorem)
	finally:
		f.close()
	
	print 'SOURCE: ', lorem.split('\n')[4]
	print 'CACHE : ', linecache.getline(temp_file_name, 5).rstrip()
	
	print '\nBLANK : %r' % linecache.getline(temp_file_name, 6)
	
	not_there = linecache.getline(temp_file_name, 500)
	print '\nNOT THERE: %r includes %d characters' %  (not_there, len(not_there))
	
	no_such_file = linecache.getline('this_file_does_not_exist.txt', 1)
	print '\nNO FILE: ', no_such_file
	
	module_line = linecache.getline('linecache.py', 3)
	print '\nMODULE : ', module_line
	
	os.unlink(temp_file_name)

snippet linecache_getline.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/linecache_getline.py
	#!/usr/bin/env python
	"""Example use of linecache module.
	"""
	#end_pymotw_header
	
	import linecache
	from linecache_data import *
	
	filename = make_tempfile()
	
	# Pick out the same line from source and cache.
	# (Notice that linecache counts from 1)
	print 'SOURCE:'
	print '%r' % lorem.split('\n')[4]
	print
	print 'CACHE:'
	print '%r' % linecache.getline(filename, 5)
	
	cleanup(filename)

snippet linecache_missing_file.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/linecache_missing_file.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import linecache
	
	# Errors are even hidden if linecache cannot find the file
	no_such_file = linecache.getline('this_file_does_not_exist.txt', 1)
	print 'NO FILE: %r' % no_such_file

snippet linecache_out_of_range.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/linecache_out_of_range.py
	#!/usr/bin/env python
	"""Example use of linecache module.
	"""
	#end_pymotw_header
	
	import linecache
	from linecache_data import *
	
	filename = make_tempfile()
	
	# The cache always returns a string, and uses
	# an empty string to indicate a line which does
	# not exist.
	not_there = linecache.getline(filename, 500)
	print 'NOT THERE: %r includes %d characters' % \
	    (not_there, len(not_there))
	
	cleanup(filename)

snippet linecache_path_search.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/linecache_path_search.py
	#!/usr/bin/env python
	# encoding: utf-8
	"""
	"""
	#end_pymotw_header
	
	import linecache
	import os
	
	# Look for the linecache module, using
	# the built in sys.path search.
	module_line = linecache.getline('linecache.py', 3)
	print 'MODULE:'
	print repr(module_line)
	
	# Look at the linecache module source directly.
	file_src = linecache.__file__
	if file_src.endswith('.pyc'):
	    file_src = file_src[:-1]
	print '\nFILE:'
	with open(file_src, 'r') as f:
	    file_line = f.readlines()[2]
	print repr(file_line)

snippet locale_atof_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/locale_atof_example.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Converting strings to floating point numbers.
	"""
	#end_pymotw_header
	
	import locale
	
	sample_data = [ ('USA',      'en_US', '1,234.56'),
	                ('France',   'fr_FR', '1234,56'),
	                ('Spain',    'es_ES', '1234,56'),
	                ('Portugal', 'pt_PT', '1234.56'),
	                ('Poland',   'pl_PL', '1 234,56'),
	                ]
	
	for name, loc, a in sample_data:
	    locale.setlocale(locale.LC_ALL, loc)
	    f = locale.atof(a)
	    print '%20s: %9s => %f' % (name, a, f)
	    

snippet locale_currency_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/locale_currency_example.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Show the same currency value in different formats for different locales.
	"""
	#end_pymotw_header
	
	import locale
	
	sample_locales = [ ('USA',      'en_US'),
	                   ('France',   'fr_FR'),
	                   ('Spain',    'es_ES'),
	                   ('Portugal', 'pt_PT'),
	                   ('Poland',   'pl_PL'),
	                   ]
	
	for name, loc in sample_locales:
	    locale.setlocale(locale.LC_ALL, loc)
	    print '%20s: %10s  %10s' % (name,
	                                locale.currency(1234.56),
	                                locale.currency(-1234.56))
	

snippet locale_date_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/locale_date_example.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Print dates in locale-specfic format.
	"""
	#end_pymotw_header
	
	import locale
	import time
	
	sample_locales = [ ('USA',      'en_US'),
	                   ('France',   'fr_FR'),
	                   ('Spain',    'es_ES'),
	                   ('Portugal', 'pt_PT'),
	                   ('Poland',   'pl_PL'),
	                   ]
	
	for name, loc in sample_locales:
	    locale.setlocale(locale.LC_ALL, loc)
	    format = locale.nl_langinfo(locale.D_T_FMT)
	    print '%20s: %s' % (name, time.strftime(format))

snippet locale_env_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/locale_env_example.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Example setting the locale using environment variable(s).
	"""
	#end_pymotw_header
	
	import locale
	import os
	import pprint
	import codecs
	import sys
	
	sys.stdout = codecs.getwriter('UTF-8')(sys.stdout)
	
	# Default settings based on the user's environment.
	locale.setlocale(locale.LC_ALL, '')
	
	print 'Environment settings:'
	for env_name in [ 'LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE' ]:
	    print '\t%s = %s' % (env_name, os.environ.get(env_name, ''))
	
	# What is the locale?
	print
	print 'Locale from environment:', locale.getlocale()
	
	template = """
	Numeric formatting:
	
	  Decimal point      : "%(decimal_point)s"
	  Grouping positions : %(grouping)s
	  Thousands separator: "%(thousands_sep)s"
	
	Monetary formatting:
	
	  International currency symbol             : "%(int_curr_symbol)r"
	  Local currency symbol                     : %(currency_symbol)r
	    Unicode version                           %(currency_symbol_u)s
	  Symbol precedes positive value            : %(p_cs_precedes)s
	  Symbol precedes negative value            : %(n_cs_precedes)s
	  Decimal point                             : "%(mon_decimal_point)s"
	  Digits in fractional values               : %(frac_digits)s
	  Digits in fractional values, international: %(int_frac_digits)s
	  Grouping positions                        : %(mon_grouping)s
	  Thousands separator                       : "%(mon_thousands_sep)s"
	  Positive sign                             : "%(positive_sign)s"
	  Positive sign position                    : %(p_sign_posn)s
	  Negative sign                             : "%(negative_sign)s"
	  Negative sign position                    : %(n_sign_posn)s
	
	"""
	
	sign_positions = {
	    0 : 'Surrounded by parentheses',
	    1 : 'Before value and symbol',
	    2 : 'After value and symbol',
	    3 : 'Before value',
	    4 : 'After value',
	    locale.CHAR_MAX : 'Unspecified',
	    }
	
	info = {}
	info.update(locale.localeconv())
	info['p_sign_posn'] = sign_positions[info['p_sign_posn']]
	info['n_sign_posn'] = sign_positions[info['n_sign_posn']]
	# convert the currency symbol to unicode
	info['currency_symbol_u'] = info['currency_symbol'].decode('utf-8')
	
	print (template % info)

snippet locale_grouping.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/locale_grouping.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import locale
	
	sample_locales = [ ('USA',      'en_US'),
	                   ('France',   'fr_FR'),
	                   ('Spain',    'es_ES'),
	                   ('Portugal', 'pt_PT'),
	                   ('Poland',   'pl_PL'),
	                   ]
	
	print '%20s %15s %20s' % ('Locale', 'Integer', 'Float')
	for name, loc in sample_locales:
	    locale.setlocale(locale.LC_ALL, loc)
	
	    print '%20s' % name,
	    print locale.format('%15d', 123456, grouping=True),
	    print locale.format('%20.2f', 123456.78, grouping=True)

snippet locale_list.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/locale_list.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Print a list of locale codes and location names.
	
	This information was cut from the Python 2.5 version of locale.py, and
	reformatted to move the place names out of comments into text which
	could be printed by the script.
	
	"""
	#end_pymotw_header
	
	
	locales = [
	 ("af_ZA", "Afrikaans"),
	 ("sq_AL", "Albanian"),
	 ("ar_SA", "Arabic - Saudi Arabia"),
	 ("ar_IQ", "Arabic - Iraq"),
	 ("ar_EG", "Arabic - Egypt"),
	 ("ar_LY", "Arabic - Libya"),
	 ("ar_DZ", "Arabic - Algeria"),
	 ("ar_MA", "Arabic - Morocco"),
	 ("ar_TN", "Arabic - Tunisia"),
	 ("ar_OM", "Arabic - Oman"),
	 ("ar_YE", "Arabic - Yemen"),
	 ("ar_SY", "Arabic - Syria"),
	 ("ar_JO", "Arabic - Jordan"),
	 ("ar_LB", "Arabic - Lebanon"),
	 ("ar_KW", "Arabic - Kuwait"),
	 ("ar_AE", "Arabic - United Arab Emirates"),
	 ("ar_BH", "Arabic - Bahrain"),
	 ("ar_QA", "Arabic - Qatar"),
	 ("hy_AM", "Armenian"),
	 ("az_AZ", "Azeri Latin"),
	 ("az_AZ", "Azeri - Cyrillic"),
	 ("eu_ES", "Basque"),
	 ("be_BY", "Belarusian"),
	 ("bn_IN", "Begali"),
	 ("bs_BA", "Bosnian"),
	 ("bs_BA", "Bosnian - Cyrillic"),
	 ("br_FR", "Breton - France"),
	 ("bg_BG", "Bulgarian"),
	 ("ca_ES", "Catalan"),
	 ("zh_CHS", "Chinese - Simplified"),
	 ("zh_TW", "Chinese - Taiwan"),
	 ("zh_CN", "Chinese - PRC"),
	 ("zh_HK", "Chinese - Hong Kong S.A.R."),
	 ("zh_SG", "Chinese - Singapore"),
	 ("zh_MO", "Chinese - Macao S.A.R."),
	 ("zh_CHT", "Chinese - Traditional"),
	 ("hr_HR", "Croatian"),
	 ("hr_BA", "Croatian - Bosnia"),
	 ("cs_CZ", "Czech"),
	 ("da_DK", "Danish"),
	 ("gbz_AF", "Dari - Afghanistan"),
	 ("div_MV", "Divehi - Maldives"),
	 ("nl_NL", "Dutch - The Netherlands"),
	 ("nl_BE", "Dutch - Belgium"),
	 ("en_US", "English - United States"),
	 ("en_GB", "English - United Kingdom"),
	 ("en_AU", "English - Australia"),
	 ("en_CA", "English - Canada"),
	 ("en_NZ", "English - New Zealand"),
	 ("en_IE", "English - Ireland"),
	 ("en_ZA", "English - South Africa"),
	 ("en_JA", "English - Jamaica"),
	 ("en_CB", "English - Carribbean"),
	 ("en_BZ", "English - Belize"),
	 ("en_TT", "English - Trinidad"),
	 ("en_ZW", "English - Zimbabwe"),
	 ("en_PH", "English - Phillippines"),
	 ("et_EE", "Estonian"),
	 ("fo_FO", "Faroese"),
	 ("fil_PH", "Filipino"),
	 ("fi_FI", "Finnish"),
	 ("fr_FR", "French - France"),
	 ("fr_BE", "French - Belgium"),
	 ("fr_CA", "French - Canada"),
	 ("fr_CH", "French - Switzerland"),
	 ("fr_LU", "French - Luxembourg"),
	 ("fr_MC", "French - Monaco"),
	 ("fy_NL", "Frisian - Netherlands"),
	 ("gl_ES", "Galician"),
	 ("ka_GE", "Georgian"),
	 ("de_DE", "German - Germany"),
	 ("de_CH", "German - Switzerland"),
	 ("de_AT", "German - Austria"),
	 ("de_LU", "German - Luxembourg"),
	 ("de_LI", "German - Liechtenstein"),
	 ("el_GR", "Greek"),
	 ("gu_IN", "Gujarati"),
	 ("he_IL", "Hebrew"),
	 ("hi_IN", "Hindi"),
	 ("hu_HU", "Hungarian"),
	 ("is_IS", "Icelandic"),
	 ("id_ID", "Indonesian"),
	 ("iu_CA", "Inuktitut"),
	 ("iu_CA", "Inuktitut - Latin"),
	 ("ga_IE", "Irish - Ireland"),
	 ("xh_ZA", "Xhosa - South Africa"),
	 ("zu_ZA", "Zulu"),
	 ("it_IT", "Italian - Italy"),
	 ("it_CH", "Italian - Switzerland"),
	 ("ja_JP", "Japanese"),
	 ("kn_IN", "Kannada - India"),
	 ("kk_KZ", "Kazakh"),
	 ("kok_IN", "Konkani"),
	 ("ko_KR", "Korean"),
	 ("ky_KG", "Kyrgyz"),
	 ("lv_LV", "Latvian"),
	 ("lt_LT", "Lithuanian"),
	 ("lb_LU", "Luxembourgish"),
	 ("mk_MK", "FYRO Macedonian"),
	 ("ms_MY", "Malay - Malaysia"),
	 ("ms_BN", "Malay - Brunei"),
	 ("ml_IN", "Malayalam - India"),
	 ("mt_MT", "Maltese"),
	 ("mi_NZ", "Maori"),
	 ("arn_CL", "Mapudungun"),
	 ("mr_IN", "Marathi"),
	 ("moh_CA", "Mohawk - Canada"),
	 ("mn_MN", "Mongolian"),
	 ("ne_NP", "Nepali"),
	 ("nb_NO", "Norwegian - Bokmal"),
	 ("nn_NO", "Norwegian - Nynorsk"),
	 ("oc_FR", "Occitan - France"),
	 ("or_IN", "Oriya - India"),
	 ("ps_AF", "Pashto - Afghanistan"),
	 ("fa_IR", "Persian"),
	 ("pl_PL", "Polish"),
	 ("pt_BR", "Portuguese - Brazil"),
	 ("pt_PT", "Portuguese - Portugal"),
	 ("pa_IN", "Punjabi"),
	 ("quz_BO", "Quechua (Bolivia)"),
	 ("quz_EC", "Quechua (Ecuador)"),
	 ("quz_PE", "Quechua (Peru)"),
	 ("ro_RO", "Romanian - Romania"),
	 ("rm_CH", "Raeto-Romanese"),
	 ("ru_RU", "Russian"),
	 ("smn_FI", "Sami Finland"),
	 ("smj_NO", "Sami Norway"),
	 ("smj_SE", "Sami Sweden"),
	 ("se_NO", "Sami Northern Norway"),
	 ("se_SE", "Sami Northern Sweden"),
	 ("se_FI", "Sami Northern Finland"),
	 ("sms_FI", "Sami Skolt"),
	 ("sma_NO", "Sami Southern Norway"),
	 ("sma_SE", "Sami Southern Sweden"),
	 ("sa_IN", "Sanskrit"),
	 ("sr_SP", "Serbian - Cyrillic"),
	 ("sr_BA", "Serbian - Bosnia Cyrillic"),
	 ("sr_SP", "Serbian - Latin"),
	 ("sr_BA", "Serbian - Bosnia Latin"),
	 ("ns_ZA", "Northern Sotho"),
	 ("tn_ZA", "Setswana - Southern Africa"),
	 ("sk_SK", "Slovak"),
	 ("sl_SI", "Slovenian"),
	 ("es_ES", "Spanish - Spain"),
	 ("es_MX", "Spanish - Mexico"),
	 ("es_ES", "Spanish - Spain (Modern)"),
	 ("es_GT", "Spanish - Guatemala"),
	 ("es_CR", "Spanish - Costa Rica"),
	 ("es_PA", "Spanish - Panama"),
	 ("es_DO", "Spanish - Dominican Republic"),
	 ("es_VE", "Spanish - Venezuela"),
	 ("es_CO", "Spanish - Colombia"),
	 ("es_PE", "Spanish - Peru"),
	 ("es_AR", "Spanish - Argentina"),
	 ("es_EC", "Spanish - Ecuador"),
	 ("es_CL", "Spanish - Chile"),
	 ("es_UR", "Spanish - Uruguay"),
	 ("es_PY", "Spanish - Paraguay"),
	 ("es_BO", "Spanish - Bolivia"),
	 ("es_SV", "Spanish - El Salvador"),
	 ("es_HN", "Spanish - Honduras"),
	 ("es_NI", "Spanish - Nicaragua"),
	 ("es_PR", "Spanish - Puerto Rico"),
	 ("sw_KE", "Swahili"),
	 ("sv_SE", "Swedish - Sweden"),
	 ("sv_FI", "Swedish - Finland"),
	 ("syr_SY", "Syriac"),
	 ("ta_IN", "Tamil"),
	 ("tt_RU", "Tatar"),
	 ("te_IN", "Telugu"),
	 ("th_TH", "Thai"),
	 ("tr_TR", "Turkish"),
	 ("uk_UA", "Ukrainian"),
	 ("ur_PK", "Urdu"),
	 ("ur_IN", "Urdu - India"),
	 ("uz_UZ", "Uzbek - Latin"),
	 ("uz_UZ", "Uzbek - Cyrillic"),
	 ("vi_VN", "Vietnamese"),
	 ("cy_GB", "Welsh"),
	]
	
	for code, place in locales:
	    print '%6s : %s' % (code, place)

snippet logging_file_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/logging_file_example.py
	# -*- coding: utf-8 -*-
	
	import os
	import logging
	
	
	LOG_FILENAME = os.path.join(os.path.dirname(__file__), 'debug.log')
	logging.basicConfig(filename=LOG_FILENAME,
	                    level=logging.DEBUG,
	                    )
	
	
	logging.info('This message should go to the log file')
	
	with open(LOG_FILENAME, 'rt') as f:
	    body = f.read()
	
	
	print('FILE:')
	print(body)

snippet logging_level_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/logging_level_example.py
	# -*- coding: utf-8 -*-
	
	import logging
	import sys
	
	
	LEVELS = {'debug': logging.DEBUG,
	          'info': logging.INFO,
	          'warning': logging.WARNING,
	          'error': logging.ERROR,
	          'critical': logging.CRITICAL,
	          }
	
	if len(sys.argv) > 1:
	    level_name = sys.argv[1]
	    level = LEVELS.get(level_name, logging.NOTSET)
	    logging.basicConfig(level=level)
	
	logging.debug('This is a debug message')
	logging.info('This is an info message')
	logging.warning('This is a warning message')
	logging.error('This is an error message')
	logging.critical('This is a critical error message')

snippet logging_modules_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/logging_modules_example.py
	# -*- coding: utf-8 -*-
	
	import logging
	
	logging.basicConfig(level=logging.WARNING)
	
	logger1 = logging.getLogger('package1.module1')
	logger2 = logging.getLogger('package2.module2')
	
	logger1.warning('This message comes from one module')
	logger2.warning('And this message comes from another module')

snippet logging_rotatingfile_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/logging_rotatingfile_example.py
	# -*- coding: utf-8 -*-
	
	import os
	import glob
	import logging
	import logging.handlers
	
	LOG_FILENAME = os.path.join(os.path.dirname(__file__), 'debug.log')
	
	# Set up a specific logger with our desired output level
	my_logger = logging.getLogger('MyLogger')
	my_logger.setLevel(logging.DEBUG)
	
	# Add the log message handler to the logger
	handler = logging.handlers.RotatingFileHandler(LOG_FILENAME,
	                                               maxBytes=20,
	                                               backupCount=5,
	                                               )
	my_logger.addHandler(handler)
	
	# Log some messages
	for i in range(20):
	    my_logger.debug('i = %d' % i)
	
	
	# See what files are created
	logfiles = glob.glob('%s*' % LOG_FILENAME)
	for filename in logfiles:
	    print(filename)

snippet mailbox_maildir_create.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/mailbox_maildir_create.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import mailbox
	import email.utils
	import os
	
	from_addr = email.utils.formataddr(('Author',
	                                    'author@example.com'))
	to_addr = email.utils.formataddr(('Recipient',
	                                  'recipient@example.com'))
	
	mbox = mailbox.Maildir('Example')
	mbox.lock()
	try:
	    msg = mailbox.mboxMessage()
	    msg.set_unixfrom('author Sat Feb  7 01:05:34 2009')
	    msg['From'] = from_addr
	    msg['To'] = to_addr
	    msg['Subject'] = 'Sample message 1'
	    msg.set_payload('\n'.join(['This is the body.',
	                               'From (will not be escaped).',
	                               'There are 3 lines.\n',
	                               ]))
	    mbox.add(msg)
	    mbox.flush()
	
	    msg = mailbox.mboxMessage()
	    msg.set_unixfrom('author Sat Feb  7 01:05:34 2009')
	    msg['From'] = from_addr
	    msg['To'] = to_addr
	    msg['Subject'] = 'Sample message 2'
	    msg.set_payload('This is the second body.\n')
	    mbox.add(msg)
	    mbox.flush()
	finally:
	    mbox.unlock()
	
	for dirname, subdirs, files in os.walk('Example'):
	    print dirname
	    print '\tDirectories:', subdirs
	    for name in files:
	        fullname = os.path.join(dirname, name)
	        print
	        print '***', fullname
	        print open(fullname).read()
	        print '*' * 20

snippet mailbox_maildir_folders.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/mailbox_maildir_folders.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import mailbox
	import os
	
	def show_maildir(name):
	    os.system('find %s -print' % name)
	
	mbox = mailbox.Maildir('Example')
	print 'Before:', mbox.list_folders()
	show_maildir('Example')
	
	print
	print '#' * 30
	print
	
	mbox.add_folder('subfolder')
	print 'subfolder created:', mbox.list_folders()
	show_maildir('Example')
	
	subfolder = mbox.get_folder('subfolder')
	print 'subfolder contents:', subfolder.list_folders()
	
	print
	print '#' * 30
	print
	
	subfolder.add_folder('second_level')
	print 'second_level created:', subfolder.list_folders()
	show_maildir('Example')
	
	print
	print '#' * 30
	print
	
	subfolder.remove_folder('second_level')
	print 'second_level removed:', subfolder.list_folders()
	show_maildir('Example')

snippet mailbox_maildir_read.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/mailbox_maildir_read.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import mailbox
	
	mbox = mailbox.Maildir('Example')
	for message in mbox:
	    print message['subject']

snippet mailbox_maildir_remove.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/mailbox_maildir_remove.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import mailbox
	import os
	
	mbox = mailbox.Maildir('Example')
	mbox.lock()
	try:
	    to_remove = []
	    for key, msg in mbox.iteritems():
	        if '2' in msg['subject']:
	            print 'Removing:', key
	            to_remove.append(key)
	    for key in to_remove:
	        mbox.remove(key)
	finally:
	    mbox.flush()
	    mbox.close()
	
	for dirname, subdirs, files in os.walk('Example'):
	    print dirname
	    print '\tDirectories:', subdirs
	    for name in files:
	        fullname = os.path.join(dirname, name)
	        print
	        print '***', fullname
	        print open(fullname).read()
	        print '*' * 20

snippet mailbox_mbox_create.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/mailbox_mbox_create.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import mailbox
	import email.utils
	
	from_addr = email.utils.formataddr(('Author',
	                                    'author@example.com'))
	to_addr = email.utils.formataddr(('Recipient',
	                                  'recipient@example.com'))
	
	mbox = mailbox.mbox('example.mbox')
	mbox.lock()
	try:
	    msg = mailbox.mboxMessage()
	    msg.set_unixfrom('author Sat Feb  7 01:05:34 2009')
	    msg['From'] = from_addr
	    msg['To'] = to_addr
	    msg['Subject'] = 'Sample message 1'
	    msg.set_payload('\n'.join(['This is the body.',
	                               'From (should be escaped).',
	                               'There are 3 lines.\n',
	                               ]))
	    mbox.add(msg)
	    mbox.flush()
	
	    msg = mailbox.mboxMessage()
	    msg.set_unixfrom('author')
	    msg['From'] = from_addr
	    msg['To'] = to_addr
	    msg['Subject'] = 'Sample message 2'
	    msg.set_payload('This is the second body.\n')
	    mbox.add(msg)
	    mbox.flush()
	finally:
	    mbox.unlock()
	
	print open('example.mbox', 'r').read()

snippet mailbox_mbox_read.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/mailbox_mbox_read.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import mailbox
	
	mbox = mailbox.mbox('example.mbox')
	for message in mbox:
	    print message['subject']

snippet mailbox_mbox_remove.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/mailbox_mbox_remove.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import mailbox
	
	mbox = mailbox.mbox('example.mbox')
	mbox.lock()
	try:
	    to_remove = []
	    for key, msg in mbox.iteritems():
	        if '2' in msg['subject']:
	            print 'Removing:', key
	            to_remove.append(key)
	    for key in to_remove:
	        mbox.remove(key)
	finally:
	    mbox.flush()
	    mbox.close()
	
	print open('example.mbox', 'r').read()

snippet math_constants.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_constants.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Constants in the math module.
	"""
	#end_pymotw_header
	
	import math
	
	print 'π: %.30f' % math.pi
	print 'e: %.30f' % math.e

snippet math_copysign.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_copysign.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Checking the sign of a value.
	"""
	#end_pymotw_header
	
	import math
	
	HEADINGS = ('f', 's', '< 0', '> 0', '= 0')
	print '{:^5}  {:^5}  {:^5}  {:^5}  {:^5}'.format(*HEADINGS)
	print '{:-^5}  {:-^5}  {:-^5}  {:-^5}  {:-^5}'.format(
	    '', '', '', '', '',
	    )
	
	for f in [ -1.0,
	            0.0,
	            1.0,
	            float('-inf'),
	            float('inf'),
	            float('-nan'),
	            float('nan'),
	            ]:
	    s = int(math.copysign(1, f))
	    print '{:5.1f}  {:5d}  {!s:5}  {!s:5}  {!s:5}'.format(
	        f, s, f < 0, f > 0, f==0,
	        )

snippet math_degrees.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_degrees.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Converting from radians to degrees.
	"""
	#end_pymotw_header
	
	import math
	
	print '{:^8}  {:^8}  {:^8}'.format('Radians', 'Degrees', 'Expected')
	print '{:-^8}  {:-^8}  {:-^8}'.format('', '', '')
	for rad, expected in [ (0,                  0),
	                       (math.pi/6,         30),
	                       (math.pi/4,         45),
	                       (math.pi/3,         60),
	                       (math.pi/2,         90),
	                       (math.pi,          180),
	                       (3 * math.pi / 2,  270),
	                       (2 * math.pi,      360),
	                       ]:
	    print '{:8.2f}  {:8.2f}  {:8.2f}'.format(rad,
	                                             math.degrees(rad),
	                                             expected,
	                                             )

snippet math_distance_2_points.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_distance_2_points.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Calculate the distance to a point.
	"""
	#end_pymotw_header
	
	import math
	
	print '{:^8}  {:^8}  {:^8}  {:^8}  {:^8}'.format(
	    'X1', 'Y1', 'X2', 'Y2', 'Distance',
	    )
	print '{:-^8}  {:-^8}  {:-^8}  {:-^8}  {:-^8}'.format(
	    '', '', '', '', '',
	    )
	
	
	for (x1, y1), (x2, y2) in [ ((5, 5), (6, 6)),
	                            ((-6, -6), (-5, -5)),
	                            ((0, 0), (3, 4)), # 3-4-5 triangle
	                            ((-1, -1), (2, 3)), # 3-4-5 triangle
	                            ]:
	    x = x1 - x2
	    y = y1 - y2
	    h = math.hypot(x, y)
	    print '{:8.2f}  {:8.2f}  {:8.2f}  {:8.2f}  {:8.2f}'.format(
	        x1, y1, x2, y2, h,
	        )

snippet math_erfc.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_erfc.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Gauss Error Function
	"""
	#end_pymotw_header
	
	import math
	
	print '{:^5}  {:7}'.format('x', 'erfc(x)')
	print '{:-^5}  {:-^7}'.format('', '')
	
	for x in [ -3, -2, -1, -0.5, -0.25, 0, 0.25, 0.5, 1, 2, 3 ]:
	    print '{:5.2f}  {:7.4f}'.format(x, math.erfc(x))
	    

snippet math_erf.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_erf.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Gauss Error Function
	"""
	#end_pymotw_header
	
	import math
	
	print '{:^5}  {:7}'.format('x', 'erf(x)')
	print '{:-^5}  {:-^7}'.format('', '')
	
	for x in [ -3, -2, -1, -0.5, -0.25, 0, 0.25, 0.5, 1, 2, 3 ]:
	    print '{:5.2f}  {:7.4f}'.format(x, math.erf(x))
	    

snippet math_expm1.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_expm1.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Logarithms close to zero.
	"""
	#end_pymotw_header
	
	import math
	
	x = 0.0000000000000000000000001
	
	print x
	print math.exp(x) - 1
	print math.expm1(x)

snippet math_exp.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_exp.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Raise e to a power.
	"""
	#end_pymotw_header
	
	import math
	
	x = 2
	
	fmt = '%.20f'
	print fmt % (math.e ** 2)
	print fmt % math.pow(math.e, 2)
	print fmt % math.exp(2)

snippet math_fabs.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_fabs.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Absolute value
	"""
	#end_pymotw_header
	
	import math
	
	print math.fabs(-1.1)
	print math.fabs(-0.0)
	print math.fabs(0.0)
	print math.fabs(1.1)

snippet math_factorial.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_factorial.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Factorial
	"""
	#end_pymotw_header
	
	import math
	
	for i in [ 0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.1 ]:
	    try:
	        print '{:2.0f}  {:6.0f}'.format(i, math.factorial(i))
	    except ValueError, err:
	        print 'Error computing factorial(%s):' % i, err

snippet math_fmod.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_fmod.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Floating point modulo
	"""
	#end_pymotw_header
	
	import math
	
	print '{:^4}  {:^4}  {:^5}  {:^5}'.format('x', 'y', '%', 'fmod')
	print '----  ----  -----  -----'
	
	for x, y in [ (5, 2),
	              (5, -2),
	              (-5, 2),
	              ]:
	    print '{:4.1f}  {:4.1f}  {:5.2f}  {:5.2f}'.format(
	        x,
	        y,
	        x % y,
	        math.fmod(x, y),
	        )

snippet math_frexp.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_frexp.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Separate mantissa from exponent.
	"""
	#end_pymotw_header
	
	import math
	
	print '{:^7}  {:^7}  {:^7}'.format('x', 'm', 'e')
	print '{:-^7}  {:-^7}  {:-^7}'.format('', '', '')
	
	for x in [ 0.1, 0.5, 4.0 ]:
	    m, e = math.frexp(x)
	    print '{:7.2f}  {:7.2f}  {:7d}'.format(x, m, e)

snippet math_fsum.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_fsum.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Calculating accurate sums of floating point values.
	"""
	#end_pymotw_header
	
	import math
	
	values = [ 0.1 ] * 10
	
	print 'Input values:', values
	
	print 'sum()       : {:.20f}'.format(sum(values))
	
	s = 0.0
	for i in values:
	    s += i
	print 'for-loop    : {:.20f}'.format(s)
	    
	print 'math.fsum() : {:.20f}'.format(math.fsum(values))

snippet math_gamma.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_gamma.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Factorial
	"""
	#end_pymotw_header
	
	import math
	
	for i in [ 0, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6 ]:
	    try:
	        print '{:2.1f}  {:6.2f}'.format(i, math.gamma(i))
	    except ValueError, err:
	        print 'Error computing gamma(%s):' % i, err

snippet math_hyperbolic.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_hyperbolic.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Hyperbolic functions
	"""
	#end_pymotw_header
	
	import math
	
	print '{:^6}  {:^6}  {:^6}  {:^6}'.format(
	    'X', 'sinh', 'cosh', 'tanh',
	    )
	print '{:-^6}  {:-^6}  {:-^6}  {:-^6}'.format('', '', '', '')
	
	fmt = '  '.join(['{:6.4f}'] * 4)
	
	for i in range(0, 11, 2):
	    x = i/10.0
	    print fmt.format(x, math.sinh(x), math.cosh(x), math.tanh(x))
	    

snippet math_hypot.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_hypot.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Calculate the distance to a point.
	"""
	#end_pymotw_header
	
	import math
	
	print '{:^7}  {:^7}  {:^10}'.format('X', 'Y', 'Hypotenuse')
	print '{:-^7}  {:-^7}  {:-^10}'.format('', '', '')
	
	for x, y in [ # simple points
	              (1, 1),
	              (-1, -1),
	              (math.sqrt(2), math.sqrt(2)),
	              (3, 4), # 3-4-5 triangle
	              # on the circle
	              (math.sqrt(2)/2, math.sqrt(2)/2), # pi/4 rads
	              (0.5, math.sqrt(3)/2), # pi/3 rads
	              ]:
	    h = math.hypot(x, y)
	    print '{:7.2f}  {:7.2f}  {:7.2f}'.format(x, y, h)

snippet math_integers.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_integers.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Converting floats to ints.
	"""
	#end_pymotw_header
	
	import math
	
	HEADINGS = ('i', 'int', 'trunk', 'floor', 'ceil')
	print '{:^5}  {:^5}  {:^5}  {:^5}  {:^5}'.format(*HEADINGS)
	print '{:-^5}  {:-^5}  {:-^5}  {:-^5}  {:-^5}'.format(
	    '', '', '', '', '',
	    )
	
	fmt = '  '.join(['{:5.1f}'] * 5)
	
	TEST_VALUES = [ -1.5,
	                 -0.8,
	                 -0.5,
	                 -0.2,
	                 0,
	                 0.2,
	                 0.5,
	                 0.8,
	                 1,
	                 ]
	
	for i in TEST_VALUES:
	    print fmt.format(i,
	                     int(i),
	                     math.trunc(i),
	                     math.floor(i),
	                     math.ceil(i))
	    

snippet math_inverse_trig.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_inverse_trig.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Inverse trigonometric functions
	"""
	#end_pymotw_header
	
	import math
	
	for r in [ 0, 0.5, 1 ]:
	    print 'arcsine(%.1f)    = %5.2f' % (r, math.asin(r))
	    print 'arccosine(%.1f)  = %5.2f' % (r, math.acos(r))
	    print 'arctangent(%.1f) = %5.2f' % (r, math.atan(r))
	    print

snippet math_isinf.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_isinf.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Checking for overflow or infinite values.
	"""
	#end_pymotw_header
	
	import math
	
	print '{:^3}  {:6}  {:6}  {:6}'.format('e', 'x', 'x**2', 'isinf')
	print '{:-^3}  {:-^6}  {:-^6}  {:-^6}'.format('', '', '', '')
	
	for e in range(0, 201, 20):
	    x = 10.0 ** e
	    y = x*x
	    print '{:3d}  {!s:6}  {!s:6}  {!s:6}'.format(e, x, y,
	                                                 math.isinf(y),
	                                                 )

snippet math_isnan.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_isnan.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Testing for not-a-number.
	"""
	#end_pymotw_header
	
	import math
	
	x = (10.0 ** 200) * (10.0 ** 200)
	y = x/x
	
	print 'x =', x
	print 'isnan(x) =', math.isnan(x)
	print 'y = x / x =', x/x
	print 'y == nan =', y == float('nan')
	print 'isnan(y) =', math.isnan(y)

snippet math_ldexp.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_ldexp.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""From mantissa, exponent pair to floating point value.
	"""
	#end_pymotw_header
	
	import math
	
	print '{:^7}  {:^7}  {:^7}'.format('m', 'e', 'x')
	print '{:-^7}  {:-^7}  {:-^7}'.format('', '', '')
	
	for m, e in [ (0.8, -3),
	              (0.5,  0),
	              (0.5,  3),
	              ]:
	    x = math.ldexp(m, e)
	    print '{:7.2f}  {:7d}  {:7.2f}'.format(m, e, x)

snippet math_lgamma.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_lgamma.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Natural logarithm of Gamma
	"""
	#end_pymotw_header
	
	import math
	
	for i in [ 0, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6 ]:
	    try:
	        print '{:2.1f}  {:.20f}  {:.20f}'.format(
	            i,
	            math.lgamma(i),
	            math.log(math.gamma(i)),
	            )
	    except ValueError, err:
	        print 'Error computing lgamma(%s):' % i, err
	

snippet math_log10.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_log10.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""log10 example
	"""
	#end_pymotw_header
	
	import math
	
	print '{:2}  {:^12}  {:^10}  {:^20}  {:8}'.format(
	    'i', 'x', 'accurate', 'inaccurate', 'mismatch',
	    )
	print '{:-^2}  {:-^12}  {:-^10}  {:-^20}  {:-^8}'.format(
	    '', '', '', '', '',
	    )
	
	for i in range(0, 10):
	    x = math.pow(10, i)
	    accurate = math.log10(x)
	    inaccurate = math.log(x, 10)
	    match = '' if int(inaccurate) == i else '*'
	    print '{:2d}  {:12.1f}  {:10.8f}  {:20.18f}  {:^5}'.format(
	        i, x, accurate, inaccurate, match,
	        )

snippet math_log1p.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_log1p.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Logarithms close to zero.
	"""
	#end_pymotw_header
	
	import math
	
	x = 0.0000000000000000000000001
	print 'x       :', x
	print '1 + x   :', 1+x
	print 'log(1+x):', math.log(1+x)
	print 'log1p(x):', math.log1p(x)

snippet math_log.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_log.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Logarithms
	"""
	#end_pymotw_header
	
	import math
	
	print math.log(8)
	print math.log(8, 2)
	print math.log(0.5, 2)

snippet math_modf.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_modf.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Split fractional from whole number part.
	"""
	#end_pymotw_header
	
	import math
	
	for i in range(6):
	    print '{}/2 = {}'.format(i, math.modf(i/2.0))

snippet math_overflow.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_overflow.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""OverflowError
	"""
	#end_pymotw_header
	
	x = 10.0 ** 200
	
	print 'x    =', x
	print 'x*x  =', x*x
	try:
	    print 'x**2 =', x**2
	except OverflowError, err:
	    print err

snippet math_pow.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_pow.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Exponentiation
	"""
	#end_pymotw_header
	
	import math
	
	for x, y in [
	    # Typical uses
	    (2, 3),
	    (2.1, 3.2),
	
	    # Always 1
	    (1.0, 5),
	    (2.0, 0),
	
	    # Not-a-number
	    (2, float('nan')),
	
	    # Roots
	    (9.0, 0.5),
	    (27.0, 1.0/3),
	    ]:
	    print '{:5.1f} ** {:5.3f} = {:6.3f}'.format(x, y, math.pow(x, y))

snippet math_radians.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_radians.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Converting from degrees to radians.
	"""
	#end_pymotw_header
	
	import math
	
	print '{:^7}  {:^7}  {:^7}'.format('Degrees', 'Radians', 'Expected')
	print '{:-^7}  {:-^7}  {:-^7}'.format('', '', '')
	
	for deg, expected in [ (  0,  0),
	                       ( 30,  math.pi/6),
	                       ( 45,  math.pi/4),
	                       ( 60,  math.pi/3),
	                       ( 90,  math.pi/2),
	                       (180,  math.pi),
	                       (270,  3/2.0 * math.pi),
	                       (360,  2 * math.pi),
	                       ]:
	    print '{:7d}  {:7.2f}  {:7.2f}'.format(deg,
	                                           math.radians(deg),
	                                           expected,
	                                           )

snippet math_sqrt.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_sqrt.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Square roots
	"""
	#end_pymotw_header
	
	import math
	
	print math.sqrt(9.0)
	print math.sqrt(3)
	try:
	    print math.sqrt(-1)
	except ValueError, err:
	    print 'Cannot compute sqrt(-1):', err
	    

snippet math_trig.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/math_trig.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Basic trigonometric functions
	"""
	#end_pymotw_header
	
	import math
	
	print 'Degrees  Radians  Sine     Cosine    Tangent'
	print '-------  -------  -------  --------  -------'
	
	fmt = '  '.join(['%7.2f'] * 5)
	
	for deg in range(0, 361, 30):
	    rad = math.radians(deg)
	    if deg in (90, 270):
	        t = float('inf')
	    else:
	        t = math.tan(rad)
	    print fmt % (deg, rad, math.sin(rad), math.cos(rad), t)

snippet mmap_read.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/mmap_read.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Reading from a memory mapped file.
	
	"""
	
	#end_pymotw_header
	
	import mmap
	import contextlib
	
	with open('lorem.txt', 'r') as f:
	    with contextlib.closing(mmap.mmap(f.fileno(), 0,
	                                      access=mmap.ACCESS_READ)
	                            ) as m:
	        print 'First 10 bytes via read :', m.read(10)
	        print 'First 10 bytes via slice:', m[:10]
	        print '2nd   10 bytes via read :', m.read(10)

snippet mmap_regex.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/mmap_regex.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Searching memory mapped files with regular expressions.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import mmap
	import re
	import contextlib
	
	pattern = re.compile(r'(\.\W+)?([^.]?nulla[^.]*?\.)',
	                     re.DOTALL | re.IGNORECASE | re.MULTILINE)
	
	with open('lorem.txt', 'r') as f:
	    with contextlib.closing(mmap.mmap(f.fileno(), 0,
	                                      access=mmap.ACCESS_READ)
	                            ) as m:
	        for match in pattern.findall(m):
	            print match[1].replace('\n', ' ')

snippet mmap_write_copy.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/mmap_write_copy.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Writing to a memory mapped file with ACCESS_COPY.
	
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import mmap
	import shutil
	import contextlib
	
	# Copy the example file
	shutil.copyfile('lorem.txt', 'lorem_copy.txt')
	
	word = 'consectetuer'
	reversed = word[::-1]
	
	with open('lorem_copy.txt', 'r+') as f:
	    with contextlib.closing(mmap.mmap(f.fileno(), 0,
	                                      access=mmap.ACCESS_COPY)
	                            ) as m:
	        print 'Memory Before:'
	        print m.readline().rstrip()
	        print 'File Before  :'
	        print f.readline().rstrip()
	        print
	
	        m.seek(0) # rewind
	        loc = m.find(word)
	        m[loc:loc+len(word)] = reversed
	
	        m.seek(0) # rewind
	        print 'Memory After :'
	        print m.readline().rstrip()
	
	        f.seek(0)
	        print 'File After   :'
	        print f.readline().rstrip()

snippet mmap_write_slice.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/mmap_write_slice.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Writing to a memory mapped file using a slice assignment.
	
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import mmap
	import shutil
	import contextlib
	
	# Copy the example file
	shutil.copyfile('lorem.txt', 'lorem_copy.txt')
	
	word = 'consectetuer'
	reversed = word[::-1]
	print 'Looking for    :', word
	print 'Replacing with :', reversed
	
	with open('lorem_copy.txt', 'r+') as f:
	    with contextlib.closing(mmap.mmap(f.fileno(), 0)) as m:
	        print 'Before:'
	        print m.readline().rstrip()
	        m.seek(0) # rewind
	
	        loc = m.find(word)
	        m[loc:loc+len(word)] = reversed
	        m.flush()
	
	        m.seek(0) # rewind
	        print 'After :'
	        print m.readline().rstrip()
	
	        f.seek(0) # rewind
	        print 'File  :'
	        print f.readline().rstrip()

snippet multiprocessing_condition.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_condition.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Using a Condition to control sequencing between workers.
	"""
	#end_pymotw_header
	import multiprocessing
	import time
	
	def stage_1(cond):
	    """perform first stage of work,
	    then notify stage_2 to continue
	    """
	    name = multiprocessing.current_process().name
	    print 'Starting', name
	    with cond:
	        print '%s done and ready for stage 2' % name
	        cond.notify_all()
	
	def stage_2(cond):
	    """wait for the condition telling us stage_1 is done"""
	    name = multiprocessing.current_process().name
	    print 'Starting', name
	    with cond:
	        cond.wait()
	        print '%s running' % name
	
	if __name__ == '__main__':
	    condition = multiprocessing.Condition()
	    s1 = multiprocessing.Process(name='s1',
	                                 target=stage_1,
	                                 args=(condition,))
	    s2_clients = [
	        multiprocessing.Process(name='stage_2[%d]' % i,
	                                target=stage_2,
	                                args=(condition,))
	        for i in range(1, 3)
	        ]
	
	    for c in s2_clients:
	        c.start()
	        time.sleep(1)
	    s1.start()
	
	    s1.join()
	    for c in s2_clients:
	        c.join()

snippet multiprocessing_daemon_join.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_daemon_join.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Daemon vs. non-daemon processes.
	"""
	#end_pymotw_header
	
	import multiprocessing
	import time
	import sys
	
	def daemon():
	    name = multiprocessing.current_process().name
	    print 'Starting:', name
	    time.sleep(2)
	    print 'Exiting :', name
	
	def non_daemon():
	    name = multiprocessing.current_process().name
	    print 'Starting:', name
	    print 'Exiting :', name
	
	if __name__ == '__main__':
	    d = multiprocessing.Process(name='daemon',
	                                target=daemon)
	    d.daemon = True
	
	    n = multiprocessing.Process(name='non-daemon',
	                                target=non_daemon)
	    n.daemon = False
	
	    d.start()
	    time.sleep(1)
	    n.start()
	
	    d.join()
	    n.join()

snippet multiprocessing_daemon_join_timeout.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_daemon_join_timeout.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Daemon vs. non-daemon processes.
	"""
	#end_pymotw_header
	
	import multiprocessing
	import time
	import sys
	
	def daemon():
	    name = multiprocessing.current_process().name
	    print 'Starting:', name
	    time.sleep(2)
	    print 'Exiting :', name
	
	def non_daemon():
	    name = multiprocessing.current_process().name
	    print 'Starting:', name
	    print 'Exiting :', name
	
	if __name__ == '__main__':
	    d = multiprocessing.Process(name='daemon',
	                                target=daemon)
	    d.daemon = True
	
	    n = multiprocessing.Process(name='non-daemon',
	                                target=non_daemon)
	    n.daemon = False
	
	    d.start()
	    n.start()
	
	    d.join(1)
	    print 'd.is_alive()', d.is_alive()
	    n.join()

snippet multiprocessing_daemon.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_daemon.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Daemon vs. non-daemon processes.
	"""
	#end_pymotw_header
	
	import multiprocessing
	import time
	import sys
	
	def daemon():
	    p = multiprocessing.current_process()
	    print 'Starting:', p.name, p.pid
	    sys.stdout.flush()
	    time.sleep(2)
	    print 'Exiting :', p.name, p.pid
	    sys.stdout.flush()
	
	def non_daemon():
	    p = multiprocessing.current_process()
	    print 'Starting:', p.name, p.pid
	    sys.stdout.flush()
	    print 'Exiting :', p.name, p.pid
	    sys.stdout.flush()
	
	if __name__ == '__main__':
	    d = multiprocessing.Process(name='daemon', target=daemon)
	    d.daemon = True
	
	    n = multiprocessing.Process(name='non-daemon', target=non_daemon)
	    n.daemon = False
	
	    d.start()
	    time.sleep(1)
	    n.start()

snippet multiprocessing_event.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_event.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Using Events to synchronize threads.
	"""
	#end_pymotw_header
	
	import multiprocessing
	import time
	
	def wait_for_event(e):
	    """Wait for the event to be set before doing anything"""
	    print 'wait_for_event: starting'
	    e.wait()
	    print 'wait_for_event: e.is_set()->', e.is_set()
	
	def wait_for_event_timeout(e, t):
	    """Wait t seconds and then timeout"""
	    print 'wait_for_event_timeout: starting'
	    e.wait(t)
	    print 'wait_for_event_timeout: e.is_set()->', e.is_set()
	
	
	if __name__ == '__main__':
	    e = multiprocessing.Event()
	    w1 = multiprocessing.Process(name='block', 
	                                 target=wait_for_event,
	                                 args=(e,))
	    w1.start()
	
	    w2 = multiprocessing.Process(name='nonblock', 
	                                 target=wait_for_event_timeout, 
	                                 args=(e, 2))
	    w2.start()
	
	    print 'main: waiting before calling Event.set()'
	    time.sleep(3)
	    e.set()
	    print 'main: event is set'

snippet multiprocessing_exitcode.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_exitcode.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import multiprocessing
	import sys
	import time
	
	def exit_error():
	    sys.exit(1)
	
	def exit_ok():
	    return
	
	def return_value():
	    return 1
	
	def raises():
	    raise RuntimeError('There was an error!')
	
	def terminated():
	    time.sleep(3)
	
	if __name__ == '__main__':
	    jobs = []
	    for f in [exit_error, exit_ok, return_value, raises, terminated]:
	        print 'Starting process for', f.func_name
	        j = multiprocessing.Process(target=f, name=f.func_name)
	        jobs.append(j)
	        j.start()
	        
	    jobs[-1].terminate()
	
	    for j in jobs:
	        j.join()
	        print '%15s.exitcode = %s' % (j.name, j.exitcode)

snippet multiprocessing_get_logger.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_get_logger.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import multiprocessing
	import logging
	import sys
	
	def worker():
	    print 'Doing some work'
	    sys.stdout.flush()
	
	if __name__ == '__main__':
	    multiprocessing.log_to_stderr()
	    logger = multiprocessing.get_logger()
	    logger.setLevel(logging.INFO)
	    p = multiprocessing.Process(target=worker)
	    p.start()
	    p.join()

snippet multiprocessing_import_main.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_import_main.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Creating and waiting for a process
	"""
	#end_pymotw_header
	
	import multiprocessing
	import multiprocessing_import_worker
	
	if __name__ == '__main__':
	    jobs = []
	    for i in range(5):
	        p = multiprocessing.Process(
	            target=multiprocessing_import_worker.worker,
	            )
	        jobs.append(p)
	        p.start()

snippet multiprocessing_import_worker.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_import_worker.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Creating and waiting for a process
	"""
	#end_pymotw_header
	
	def worker():
	    """worker function"""
	    print 'Worker'
	    return

snippet multiprocessing_lock.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_lock.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Locking via the 'with' statement
	"""
	#end_pymotw_header
	import multiprocessing
	import sys
	
	def worker_with(lock, stream):
	    with lock:
	        stream.write('Lock acquired via with\n')
	        
	def worker_no_with(lock, stream):
	    lock.acquire()
	    try:
	        stream.write('Lock acquired directly\n')
	    finally:
	        lock.release()
	
	lock = multiprocessing.Lock()
	w = multiprocessing.Process(target=worker_with,
	                            args=(lock, sys.stdout))
	nw = multiprocessing.Process(target=worker_no_with,
	                             args=(lock, sys.stdout))
	
	w.start()
	nw.start()
	
	w.join()
	nw.join()

snippet multiprocessing_log_to_stderr.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_log_to_stderr.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import multiprocessing
	import logging
	import sys
	
	def worker():
	    print 'Doing some work'
	    sys.stdout.flush()
	
	if __name__ == '__main__':
	    multiprocessing.log_to_stderr(logging.DEBUG)
	    p = multiprocessing.Process(target=worker)
	    p.start()
	    p.join()
	    

snippet multiprocessing_manager_dict.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_manager_dict.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import multiprocessing
	import pprint
	
	def worker(d, key, value):
	    d[key] = value
	
	if __name__ == '__main__':
	    mgr = multiprocessing.Manager()
	    d = mgr.dict()
	    jobs = [ multiprocessing.Process(target=worker, args=(d, i, i*2))
	             for i in range(10) 
	             ]
	    for j in jobs:
	        j.start()
	    for j in jobs:
	        j.join()
	    print 'Results:', d
	    

snippet multiprocessing_mapreduce.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_mapreduce.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	import collections
	import itertools
	import multiprocessing
	
	class SimpleMapReduce(object):
	    
	    def __init__(self, map_func, reduce_func, num_workers=None):
	        """
	        map_func
	
	          Function to map inputs to intermediate data. Takes as
	          argument one input value and returns a tuple with the key
	          and a value to be reduced.
	        
	        reduce_func
	
	          Function to reduce partitioned version of intermediate data
	          to final output. Takes as argument a key as produced by
	          map_func and a sequence of the values associated with that
	          key.
	         
	        num_workers
	
	          The number of workers to create in the pool. Defaults to
	          the number of CPUs available on the current host.
	        """
	        self.map_func = map_func
	        self.reduce_func = reduce_func
	        self.pool = multiprocessing.Pool(num_workers)
	    
	    def partition(self, mapped_values):
	        """Organize the mapped values by their key.
	        Returns an unsorted sequence of tuples with a key
	        and a sequence of values.
	        """
	        partitioned_data = collections.defaultdict(list)
	        for key, value in mapped_values:
	            partitioned_data[key].append(value)
	        return partitioned_data.items()
	    
	    def __call__(self, inputs, chunksize=1):
	        """Process the inputs through the map and reduce functions
	        given.
	        
	        inputs
	          An iterable containing the input data to be processed.
	        
	        chunksize=1
	          The portion of the input data to hand to each worker.  This
	          can be used to tune performance during the mapping phase.
	        """
	        map_responses = self.pool.map(self.map_func,
	                                      inputs,
	                                      chunksize=chunksize)
	        partitioned_data = self.partition(
	            itertools.chain(*map_responses)
	            )
	        reduced_values = self.pool.map(self.reduce_func,
	                                       partitioned_data)
	        return reduced_values

snippet multiprocessing_namespaces_mutable.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_namespaces_mutable.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import multiprocessing
	
	def producer(ns, event):
	    # DOES NOT UPDATE GLOBAL VALUE!
	    ns.my_list.append('This is the value') 
	    event.set()
	
	def consumer(ns, event):
	    print 'Before event:', ns.my_list
	    event.wait()
	    print 'After event :', ns.my_list
	
	if __name__ == '__main__':
	    mgr = multiprocessing.Manager()
	    namespace = mgr.Namespace()
	    namespace.my_list = []
	    
	    event = multiprocessing.Event()
	    p = multiprocessing.Process(target=producer,
	                                args=(namespace, event))
	    c = multiprocessing.Process(target=consumer,
	                                args=(namespace, event))
	    
	    c.start()
	    p.start()
	    
	    c.join()
	    p.join()

snippet multiprocessing_namespaces.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_namespaces.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import multiprocessing
	
	def producer(ns, event):
	    ns.value = 'This is the value'
	    event.set()
	
	def consumer(ns, event):
	    try:
	        value = ns.value
	    except Exception, err:
	        print 'Before event, error:', str(err)
	    event.wait()
	    print 'After event:', ns.value
	
	if __name__ == '__main__':
	    mgr = multiprocessing.Manager()
	    namespace = mgr.Namespace()
	    event = multiprocessing.Event()
	    p = multiprocessing.Process(target=producer,
	                                args=(namespace, event))
	    c = multiprocessing.Process(target=consumer,
	                                args=(namespace, event))
	    
	    c.start()
	    p.start()
	    
	    c.join()
	    p.join()

snippet multiprocessing_names.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_names.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Naming threads
	"""
	#end_pymotw_header
	
	import multiprocessing
	import time
	
	def worker():
	    name = multiprocessing.current_process().name
	    print name, 'Starting'
	    time.sleep(2)
	    print name, 'Exiting'
	
	def my_service():
	    name = multiprocessing.current_process().name
	    print name, 'Starting'
	    time.sleep(3)
	    print name, 'Exiting'
	
	if __name__ == '__main__':
	    service = multiprocessing.Process(name='my_service',
	                                      target=my_service)
	    worker_1 = multiprocessing.Process(name='worker 1',
	                                       target=worker)
	    worker_2 = multiprocessing.Process(target=worker) # default name
	
	    worker_1.start()
	    worker_2.start()
	    service.start()

snippet multiprocessing_pool_maxtasksperchild.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_pool_maxtasksperchild.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import multiprocessing
	
	def do_calculation(data):
	    return data * 2
	
	def start_process():
	    print 'Starting', multiprocessing.current_process().name
	
	if __name__ == '__main__':
	    inputs = list(range(10))
	    print 'Input   :', inputs
	    
	    builtin_outputs = map(do_calculation, inputs)
	    print 'Built-in:', builtin_outputs
	    
	    pool_size = multiprocessing.cpu_count() * 2
	    pool = multiprocessing.Pool(processes=pool_size,
	                                initializer=start_process,
	                                maxtasksperchild=2,
	                                )
	    pool_outputs = pool.map(do_calculation, inputs)
	    pool.close() # no more tasks
	    pool.join()  # wrap up current tasks
	    
	    print 'Pool    :', pool_outputs

snippet multiprocessing_pool.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_pool.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import multiprocessing
	
	def do_calculation(data):
	    return data * 2
	
	def start_process():
	    print 'Starting', multiprocessing.current_process().name
	
	if __name__ == '__main__':
	    inputs = list(range(10))
	    print 'Input   :', inputs
	    
	    builtin_outputs = map(do_calculation, inputs)
	    print 'Built-in:', builtin_outputs
	    
	    pool_size = multiprocessing.cpu_count() * 2
	    pool = multiprocessing.Pool(processes=pool_size,
	                                initializer=start_process,
	                                )
	    pool_outputs = pool.map(do_calculation, inputs)
	    pool.close() # no more tasks
	    pool.join()  # wrap up current tasks
	
	    print 'Pool    :', pool_outputs

snippet multiprocessing_producer_consumer.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_producer_consumer.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import multiprocessing
	import time
	
	class Consumer(multiprocessing.Process):
	    
	    def __init__(self, task_queue, result_queue):
	        multiprocessing.Process.__init__(self)
	        self.task_queue = task_queue
	        self.result_queue = result_queue
	
	    def run(self):
	        proc_name = self.name
	        while True:
	            next_task = self.task_queue.get()
	            if next_task is None:
	                # Poison pill means shutdown
	                print '%s: Exiting' % proc_name
	                self.task_queue.task_done()
	                break
	            print '%s: %s' % (proc_name, next_task)
	            answer = next_task()
	            self.task_queue.task_done()
	            self.result_queue.put(answer)
	        return
	
	
	class Task(object):
	    def __init__(self, a, b):
	        self.a = a
	        self.b = b
	    def __call__(self):
	        time.sleep(0.1) # pretend to take some time to do the work
	        return '%s * %s = %s' % (self.a, self.b, self.a * self.b)
	    def __str__(self):
	        return '%s * %s' % (self.a, self.b)
	
	
	if __name__ == '__main__':
	    # Establish communication queues
	    tasks = multiprocessing.JoinableQueue()
	    results = multiprocessing.Queue()
	    
	    # Start consumers
	    num_consumers = multiprocessing.cpu_count() * 2
	    print 'Creating %d consumers' % num_consumers
	    consumers = [ Consumer(tasks, results)
	                  for i in xrange(num_consumers) ]
	    for w in consumers:
	        w.start()
	    
	    # Enqueue jobs
	    num_jobs = 10
	    for i in xrange(num_jobs):
	        tasks.put(Task(i, i))
	    
	    # Add a poison pill for each consumer
	    for i in xrange(num_consumers):
	        tasks.put(None)
	
	    # Wait for all of the tasks to finish
	    tasks.join()
	    
	    # Start printing results
	    while num_jobs:
	        result = results.get()
	        print 'Result:', result
	        num_jobs -= 1

snippet multiprocessing_queue.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_queue.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import multiprocessing
	
	class MyFancyClass(object):
	    
	    def __init__(self, name):
	        self.name = name
	    
	    def do_something(self):
	        proc_name = multiprocessing.current_process().name
	        print 'Doing something fancy in %s for %s!' % \
	            (proc_name, self.name)
	
	
	def worker(q):
	    obj = q.get()
	    obj.do_something()
	
	
	if __name__ == '__main__':
	    queue = multiprocessing.Queue()
	
	    p = multiprocessing.Process(target=worker, args=(queue,))
	    p.start()
	    
	    queue.put(MyFancyClass('Fancy Dan'))
	    
	    # Wait for the worker to finish
	    queue.close()
	    queue.join_thread()
	    p.join()
	    

snippet multiprocessing_semaphore.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_semaphore.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Multiple concurrent access to a resource
	"""
	#end_pymotw_header
	import random
	import multiprocessing
	import time
	
	class ActivePool(object):
	    def __init__(self):
	        super(ActivePool, self).__init__()
	        self.mgr = multiprocessing.Manager()
	        self.active = self.mgr.list()
	        self.lock = multiprocessing.Lock()
	    def makeActive(self, name):
	        with self.lock:
	            self.active.append(name)
	    def makeInactive(self, name):
	        with self.lock:
	            self.active.remove(name)
	    def __str__(self):
	        with self.lock:
	            return str(self.active)
	
	def worker(s, pool):
	    name = multiprocessing.current_process().name
	    with s:
	        pool.makeActive(name)
	        print 'Now running: %s' % str(pool)
	        time.sleep(random.random())
	        pool.makeInactive(name)
	
	if __name__ == '__main__':
	    pool = ActivePool()
	    s = multiprocessing.Semaphore(3)
	    jobs = [
	        multiprocessing.Process(target=worker,
	                                name=str(i),
	                                args=(s, pool),
	                                )
	        for i in range(10)
	        ]
	
	    for j in jobs:
	        j.start()
	
	    for j in jobs:
	        j.join()
	        print 'Now running: %s' % str(pool)

snippet multiprocessing_simpleargs.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_simpleargs.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Passing arguments to threads when they are created
	"""
	#end_pymotw_header
	
	import multiprocessing
	
	def worker(num):
	    """thread worker function"""
	    print 'Worker:', num
	    return
	
	if __name__ == '__main__':
	    jobs = []
	    for i in range(5):
	        p = multiprocessing.Process(target=worker, args=(i,))
	        jobs.append(p)
	        p.start()

snippet multiprocessing_simple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_simple.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Creating and waiting for a process
	"""
	#end_pymotw_header
	
	import multiprocessing
	
	def worker():
	    """worker function"""
	    print 'Worker'
	    return
	
	if __name__ == '__main__':
	    jobs = []
	    for i in range(5):
	        p = multiprocessing.Process(target=worker)
	        jobs.append(p)
	        p.start()

snippet multiprocessing_subclass.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_subclass.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Creating and waiting for a process
	"""
	#end_pymotw_header
	
	import multiprocessing
	
	class Worker(multiprocessing.Process):
	
	    def run(self):
	        print 'In %s' % self.name
	        return
	
	if __name__ == '__main__':
	    jobs = []
	    for i in range(5):
	        p = Worker()
	        jobs.append(p)
	        p.start()
	    for j in jobs:
	        j.join()

snippet multiprocessing_terminate.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_terminate.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import multiprocessing
	import time
	
	def slow_worker():
	    print 'Starting worker'
	    time.sleep(0.1)
	    print 'Finished worker'
	
	if __name__ == '__main__':
	    p = multiprocessing.Process(target=slow_worker)
	    print 'BEFORE:', p, p.is_alive()
	    
	    p.start()
	    print 'DURING:', p, p.is_alive()
	    
	    p.terminate()
	    print 'TERMINATED:', p, p.is_alive()
	
	    p.join()
	    print 'JOINED:', p, p.is_alive()

snippet multiprocessing_wordcount.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/multiprocessing_wordcount.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	import multiprocessing
	import string
	
	from multiprocessing_mapreduce import SimpleMapReduce
	
	def file_to_words(filename):
	    """Read a file and return a sequence of
	    (word, occurences) values.
	    """
	    STOP_WORDS = set([
	            'a', 'an', 'and', 'are', 'as', 'be', 'by', 'for', 'if',
	            'in', 'is', 'it', 'of', 'or', 'py', 'rst', 'that', 'the',
	            'to', 'with',
	            ])
	    TR = string.maketrans(string.punctuation,
	                          ' ' * len(string.punctuation))
	
	    print multiprocessing.current_process().name, 'reading', filename
	    output = []
	
	    with open(filename, 'rt') as f:
	        for line in f:
	            if line.lstrip().startswith('..'): # Skip comment lines
	                continue
	            line = line.translate(TR) # Strip punctuation
	            for word in line.split():
	                word = word.lower()
	                if word.isalpha() and word not in STOP_WORDS:
	                    output.append( (word, 1) )
	    return output
	
	
	def count_words(item):
	    """Convert the partitioned data for a word to a
	    tuple containing the word and the number of occurences.
	    """
	    word, occurences = item
	    return (word, sum(occurences))
	
	
	if __name__ == '__main__':
	    import operator
	    import glob
	
	    input_files = glob.glob('*.rst')
	    
	    mapper = SimpleMapReduce(file_to_words, count_words)
	    word_counts = mapper(input_files)
	    word_counts.sort(key=operator.itemgetter(1))
	    word_counts.reverse()
	    
	    print '\nTOP 20 WORDS BY FREQUENCY\n'
	    top20 = word_counts[:20]
	    longest = max(len(word) for word, count in top20)
	    for word, count in top20:
	        print '%-*s: %5s' % (longest+1, word, count)
	

snippet operator_attrgetter.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/operator_attrgetter.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from operator import *
	
	class MyObj(object):
	    """example class for attrgetter"""
	    def __init__(self, arg):
	        super(MyObj, self).__init__()
	        self.arg = arg
	    def __repr__(self):
	        return 'MyObj(%s)' % self.arg
	
	l = [ MyObj(i) for i in xrange(5) ]
	print 'objects   :', l
	
	# Extract the 'arg' value from each object
	g = attrgetter('arg')
	vals = [ g(i) for i in l ]
	print 'arg values:', vals
	
	# Sort using arg
	l.reverse()
	print 'reversed  :', l
	print 'sorted    :', sorted(l, key=g)

snippet operator_boolean.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/operator_boolean.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from operator import *
	
	a = -1
	b = 5
	
	print 'a =', a
	print 'b =', b
	print
	
	print 'not_(a)     :', not_(a)
	print 'truth(a)    :', truth(a)
	print 'is_(a, b)   :', is_(a,b)
	print 'is_not(a, b):', is_not(a,b)

snippet operator_classes.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/operator_classes.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from operator import *
	
	class MyObj(object):
	    """Example for operator overloading"""
	    def __init__(self, val):
	        super(MyObj, self).__init__()
	        self.val = val
	        return
	    def __str__(self):
	        return 'MyObj(%s)' % self.val
	    def __lt__(self, other):
	        """compare for less-than"""
	        print 'Testing %s < %s' % (self, other)
	        return self.val < other.val
	    def __add__(self, other):
	        """add values"""
	        print 'Adding %s + %s' % (self, other)
	        return MyObj(self.val + other.val)
	
	a = MyObj(1)
	b = MyObj(2)
	
	print 'Comparison:'
	print lt(a, b)
	
	print '\nArithmetic:'
	print add(a, b)

snippet operator_comparisons.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/operator_comparisons.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from operator import *
	
	a = 1
	b = 5.0
	
	print 'a =', a
	print 'b =', b
	for func in (lt, le, eq, ne, ge, gt):
	    print '%s(a, b):' % func.__name__, func(a, b)

snippet operator_inplace.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/operator_inplace.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from operator import *
	
	a = -1
	b = 5.0
	c = [ 1, 2, 3 ]
	d = [ 'a', 'b', 'c']
	print 'a =', a
	print 'b =', b
	print 'c =', c
	print 'd =', d
	print
	
	a = iadd(a, b)
	print 'a = iadd(a, b) =>', a
	print
	
	c = iconcat(c, d)
	print 'c = iconcat(c, d) =>', c

snippet operator_itemgetter.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/operator_itemgetter.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from operator import *
	
	l = [ dict(val=-1 * i) for i in xrange(4) ]
	print 'Dictionaries:', l
	g = itemgetter('val')
	vals = [ g(i) for i in l ]
	print '      values:', vals
	print '      sorted:', sorted(l, key=g)
	
	print
	l = [ (i, i*-2) for i in xrange(4) ]
	print 'Tuples      :', l
	g = itemgetter(1)
	vals = [ g(i) for i in l ]
	print '      values:', vals
	print '      sorted:', sorted(l, key=g)

snippet operator_math.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/operator_math.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from operator import *
	
	a = -1
	b = 5.0
	c = 2
	d = 6
	
	print 'a =', a
	print 'b =', b
	print 'c =', c
	print 'd =', d
	
	print '\nPositive/Negative:'
	print 'abs(a):', abs(a)
	print 'neg(a):', neg(a)
	print 'neg(b):', neg(b)
	print 'pos(a):', pos(a)
	print 'pos(b):', pos(b)
	
	print '\nArithmetic:'
	print 'add(a, b)     :', add(a, b)
	print 'div(a, b)     :', div(a, b)
	print 'div(d, c)     :', div(d, c)
	print 'floordiv(a, b):', floordiv(a, b)
	print 'floordiv(d, c):', floordiv(d, c)
	print 'mod(a, b)     :', mod(a, b)
	print 'mul(a, b)     :', mul(a, b)
	print 'pow(c, d)     :', pow(c, d)
	print 'sub(b, a)     :', sub(b, a)
	print 'truediv(a, b) :', truediv(a, b)
	print 'truediv(d, c) :', truediv(d, c)
	
	print '\nBitwise:'
	print 'and_(c, d)  :', and_(c, d)
	print 'invert(c)   :', invert(c)
	print 'lshift(c, d):', lshift(c, d)
	print 'or_(c, d)   :', or_(c, d)
	print 'rshift(d, c):', rshift(d, c)
	print 'xor(c, d)   :', xor(c, d)

snippet operator_sequences.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/operator_sequences.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from operator import *
	
	a = [ 1, 2, 3 ]
	b = [ 'a', 'b', 'c' ]
	
	print 'a =', a
	print 'b =', b
	
	print '\nConstructive:'
	print '  concat(a, b):', concat(a, b)
	print '  repeat(a, 3):', repeat(a, 3)
	
	print '\nSearching:'
	print '  contains(a, 1)  :', contains(a, 1)
	print '  contains(b, "d"):', contains(b, "d")
	print '  countOf(a, 1)   :', countOf(a, 1)
	print '  countOf(b, "d") :', countOf(b, "d")
	print '  indexOf(a, 5)   :', indexOf(a, 1)
	
	print '\nAccess Items:'
	print '  getitem(b, 1)            :', getitem(b, 1)
	print '  getslice(a, 1, 3)        :', getslice(a, 1, 3)
	print '  setitem(b, 1, "d")       :', setitem(b, 1, "d"),
	print ', after b =', b
	print '  setslice(a, 1, 3, [4, 5]):', setslice(a, 1, 3, [4, 5]),
	print ', after a =', a
	
	print '\nDestructive:'
	print '  delitem(b, 1)    :', delitem(b, 1), ', after b =', b
	print '  delslice(a, 1, 3):', delslice(a, 1, 3), ', after a =', a

snippet operator_typechecking.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/operator_typechecking.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from operator import *
	
	class NoType(object):
	    """Supports none of the type APIs"""
	    
	class MultiType(object):
	    """Supports multiple type APIs"""
	    def __len__(self):
	        return 0
	    def __getitem__(self, name):
	        return 'mapping'
	    def __int__(self):
	        return 0
	
	o = NoType()
	t = MultiType()
	
	for func in (isMappingType, isNumberType, isSequenceType):
	    print '%s(o):' % func.__name__, func(o)
	    print '%s(t):' % func.__name__, func(t)

snippet optparse_append.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_append.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Using optparse with single-letter options.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('-o', action="append", dest='outputs', default=[])
	
	options, args = parser.parse_args()
	
	print options.outputs
	

snippet optparse_boolean.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_boolean.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Boolean flags.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('-t', action='store_true',
	                  default=False, dest='flag')
	parser.add_option('-f', action='store_false',
	                  default=False, dest='flag')
	
	options, args = parser.parse_args()
	
	print 'Flag:', options.flag
	
	

snippet optparse_callback_nargs.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_callback_nargs.py
	
	"""Using callbacks for options with multiple arguments.
	
	"""
	
	__module_id__ = "$Id$"
	
	import optparse
	
	def with_callback(option, opt_str, value, parser):
	    print 'with_callback:'
	    print '\toption:', repr(option)
	    print '\topt_str:', opt_str
	    print '\tvalue:', value
	    print '\tparser:', parser
	    return
	
	parser = optparse.OptionParser()
	parser.add_option('--with', 
	                  action="callback",
	                  callback=with_callback,
	                  type="string",
	                  nargs=2,
	                  help="Include optional feature")
	
	parser.parse_args(['--with', 'foo', 'bar'])

snippet optparse_callback.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_callback.py
	#!/usr/bin/env python
	"""Using callbacks for options.
	"""
	#end_pymotw_header
	
	import optparse
	
	def flag_callback(option, opt_str, value, parser):
	    print 'flag_callback:'
	    print '\toption:', repr(option)
	    print '\topt_str:', opt_str
	    print '\tvalue:', value
	    print '\tparser:', parser
	    return
	
	def with_callback(option, opt_str, value, parser):
	    print 'with_callback:'
	    print '\toption:', repr(option)
	    print '\topt_str:', opt_str
	    print '\tvalue:', value
	    print '\tparser:', parser
	    return
	
	parser = optparse.OptionParser()
	parser.add_option('--flag', action="callback",
	                  callback=flag_callback)
	parser.add_option('--with', 
	                  action="callback",
	                  callback=with_callback,
	                  type="string",
	                  help="Include optional feature")
	
	parser.parse_args(['--with', 'foo', '--flag'])

snippet optparse_choice.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_choice.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Choice enumerations for option values.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	
	parser.add_option('-c', type='choice', choices=['a', 'b', 'c'])
	
	options, args = parser.parse_args()
	
	print 'Choice:', options.c

snippet optparse_count.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_count.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Using optparse with single-letter options.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('-v', action="count",
	                  dest='verbosity', default=1)
	parser.add_option('-q', action='store_const',
	                  const=0, dest='verbosity')
	
	options, args = parser.parse_args()
	
	print options.verbosity
	

snippet optparse_default.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_default.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Using optparse with single-letter options.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('-o', action="store", default="default value")
	
	options, args = parser.parse_args()
	
	print options.o

snippet optparse_getoptcomparison.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_getoptcomparison.py
	
	"""Reproduce the getopt example from 12 Aug 2007.
	
	"""
	
	__module_id__ = "$Id$"
	
	import optparse
	import sys
	
	print 'ARGV      :', sys.argv[1:]
	
	parser = optparse.OptionParser()
	parser.add_option('-o', '--output', 
	                  dest="output_filename", 
	                  default="default.out",
	                  )
	parser.add_option('-v', '--verbose',
	                  dest="verbose",
	                  default=False,
	                  action="store_true",
	                  )
	parser.add_option('--version',
	                  dest="version",
	                  default=1.0,
	                  type="float",
	                  )
	options, remainder = parser.parse_args()
	
	print 'VERSION   :', options.version
	print 'VERBOSE   :', options.verbose
	print 'OUTPUT    :', options.output_filename
	print 'REMAINING :', remainder

snippet optparse_groups.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_groups.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	"""Using optparse with single-letter options.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	
	parser.add_option('-q', action='store_const',
	                  const='query', dest='mode',
	                  help='Query')
	parser.add_option('-i', action='store_const',
	                  const='install', dest='mode',
	                  help='Install')
	
	query_opts = optparse.OptionGroup(
	    parser, 'Query Options',
	    'These options control the query mode.',
	    )
	query_opts.add_option('-l', action='store_const',
	                      const='list', dest='query_mode',
	                      help='List contents')
	query_opts.add_option('-f', action='store_const',
	                      const='file', dest='query_mode',
	                      help='Show owner of file')
	query_opts.add_option('-a', action='store_const',
	                      const='all', dest='query_mode',
	                      help='Show all packages')
	parser.add_option_group(query_opts)
	
	install_opts = optparse.OptionGroup(
	    parser, 'Installation Options',
	    'These options control installation.',
	    )
	install_opts.add_option(
	    '--hash', action='store_true', default=False,
	    help='Show hash marks as progress indication')
	install_opts.add_option(
	    '--force', dest='install_force', action='store_true',
	    default=False,
	    help='Install, regardless of dependencies or existing version')
	parser.add_option_group(install_opts)
	
	print parser.parse_args()

snippet optparse_help.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_help.py
	#!/usr/bin/env python
	"""Printing help with optparse.  
	
	Call this script with --help on the command line.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('--no-foo', action="store_true", 
	                  default=False, 
	                  dest="foo",
	                  help="Turn off foo",
	                  )
	parser.add_option('--with', action="store",
	                  help="Include optional feature")
	
	parser.parse_args()

snippet optparse_long.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_long.py
	#!/usr/bin/env python
	"""Using optparse with longer option names.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('--noarg', action="store_true", default=False)
	parser.add_option('--witharg', action="store", dest="witharg")
	parser.add_option('--witharg2', action="store",
	                  dest="witharg2", type="int")
	
	print parser.parse_args([ '--noarg',
	                          '--witharg', 'val',
	                          '--witharg2=3' ])

snippet optparse_metavar.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_metavar.py
	#!/usr/bin/env python
	"""Printing help with optparse.  
	
	Call this script with --help on the command line.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('--no-foo', action="store_true", 
	                  default=False, 
	                  dest="foo",
	                  help="Turn off foo",
	                  )
	parser.add_option('--with', action="store",
	                  help="Include optional feature",
	                  metavar='feature_NAME')
	
	parser.parse_args()

snippet optparse_no_default.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_no_default.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Using optparse with single-letter options.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('-o', action="store")
	
	options, args = parser.parse_args()
	
	print options.o

snippet optparse_prog.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_prog.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	"""Explicit usage message
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser(
	    usage='%prog [options] <arg1> <arg2> [<arg3>...]',
	    prog='my_program_name',
	    )
	parser.add_option('-a', action="store_true", default=False)
	parser.add_option('-b', action="store", dest="b")
	parser.add_option('-c', action="store", dest="c", type="int")
	
	parser.parse_args()

snippet optparse_set_defaults.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_set_defaults.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Using optparse with single-letter options.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('-o', action="store")
	
	parser.set_defaults(o='default value')
	
	options, args = parser.parse_args()
	
	print options.o

snippet optparse_short.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_short.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	"""Using optparse with single-letter options.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('-a', action="store_true", default=False)
	parser.add_option('-b', action="store", dest="b")
	parser.add_option('-c', action="store", dest="c", type="int")
	
	print parser.parse_args(['-a', '-bval', '-c', '3'])

snippet optparse_store_const.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_store_const.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	"""Using optparse with single-letter options.
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('--earth', action="store_const",
	                  const='earth', dest='element',
	                  default='earth',
	                  )
	parser.add_option('--air', action='store_const',
	                  const='air', dest='element',
	                  )
	parser.add_option('--water', action='store_const',
	                  const='water', dest='element',
	                  )
	parser.add_option('--fire', action='store_const',
	                  const='fire', dest='element',
	                  )
	
	options, args = parser.parse_args()
	
	print options.element
	

snippet optparse_types.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_types.py
	#!/usr/bin/env python
	#
	# Copyright 2010 Doug Hellmann.
	#
	"""Type conversions
	"""
	
	__module_id__ = "$Id$"
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser()
	parser.add_option('-i', action="store", type="int")
	parser.add_option('-f', action="store", type="float")
	parser.add_option('-l', action="store", type="long")
	parser.add_option('-c', action="store", type="complex")
	
	options, args = parser.parse_args()
	
	print 'int    : %-16r %s' % (type(options.i), options.i)
	print 'float  : %-16r %s' % (type(options.f), options.f)
	print 'long   : %-16r %s' % (type(options.l), options.l)
	print 'complex: %-16r %s' % (type(options.c), options.c)

snippet optparse_usage.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_usage.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	"""Explicit usage message
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser(
	    usage='%prog [options] <arg1> <arg2> [<arg3>...]'
	    )
	parser.add_option('-a', action="store_true", default=False)
	parser.add_option('-b', action="store", dest="b")
	parser.add_option('-c', action="store", dest="c", type="int")
	
	parser.parse_args()

snippet optparse_version.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/optparse_version.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	"""Explicit usage message
	"""
	#end_pymotw_header
	
	import optparse
	
	parser = optparse.OptionParser(
	    usage='%prog [options] <arg1> <arg2> [<arg3>...]',
	    version='1.0',
	    )
	
	parser.parse_args()

snippet os_access.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_access.py
	
	"""Check access rights on a file
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	print 'Testing:', __file__
	print 'Exists:', os.access(__file__, os.F_OK)
	print 'Readable:', os.access(__file__, os.R_OK)
	print 'Writable:', os.access(__file__, os.W_OK)
	print 'Executable:', os.access(__file__, os.X_OK)

snippet os_cwd_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_cwd_example.py
	
	"""Using the os module to read and write environment variables.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	print 'Starting:', os.getcwd()
	
	print 'Moving up one:', os.pardir
	os.chdir(os.pardir)
	
	print 'After move:', os.getcwd()

snippet os_directories.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_directories.py
	
	"""Working with directories.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	dir_name = 'os_directories_example'
	
	print 'Creating', dir_name
	os.makedirs(dir_name)
	
	file_name = os.path.join(dir_name, 'example.txt')
	print 'Creating', file_name
	with open(file_name, 'wt') as f:
	    f.write('example file')
	
	print 'Listing', dir_name
	print os.listdir(dir_name)
	
	print 'Cleaning up'
	os.unlink(file_name)
	os.rmdir(dir_name)

snippet os_environ_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_environ_example.py
	
	"""Using the os module to read and write environment variables.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	print 'Initial value:', os.environ.get('TESTVAR', None)
	print 'Child process:'
	os.system('echo $TESTVAR')
	
	os.environ['TESTVAR'] = 'THIS VALUE WAS CHANGED'
	
	print
	print 'Changed value:', os.environ['TESTVAR']
	print 'Child process:' 
	os.system('echo $TESTVAR')
	
	del os.environ['TESTVAR']
	
	print
	print 'Removed value:', os.environ.get('TESTVAR', None)
	print 'Child process:' 
	os.system('echo $TESTVAR')

snippet os_exec_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_exec_example.py
	
	"""Using os.exec*().
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	child_pid = os.fork()
	if child_pid:
	    os.waitpid(child_pid, 0)
	else:
	    os.execlp('pwd', 'pwd', '-P')

snippet os_fork_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_fork_example.py
	
	"""Simple example of using os.fork to create a new child process.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	pid = os.fork()
	
	if pid:
	    print 'Child process id:', pid
	else:
	    print 'I am the child'

snippet os_kill_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_kill_example.py
	
	"""Fork, then send the child process a signal.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	import signal
	import time
	
	def signal_usr1(signum, frame):
	    "Callback invoked when a signal is received"
	    pid = os.getpid()
	    print 'Received USR1 in process %s' % pid
	
	print 'Forking...'
	child_pid = os.fork()
	if child_pid:
	    print 'PARENT: Pausing before sending signal...'
	    time.sleep(1)
	    print 'PARENT: Signaling %s' % child_pid
	    os.kill(child_pid, signal.SIGUSR1)
	else:
	    print 'CHILD: Setting up signal handler'
	    signal.signal(signal.SIGUSR1, signal_usr1)
	    print 'CHILD: Pausing to wait for signal'
	    time.sleep(5)

snippet ospath_abspath.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_abspath.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Compute an absolute path from a relative path.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os
	import os.path
	
	os.chdir('/tmp')
	
	for path in [ '.',
	              '..',
	              './one/two/three',
	              '../one/two/three',
	              ]:
	    print '%17s : "%s"' % (path, os.path.abspath(path))

snippet ospath_basename.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_basename.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Determine the base filename from a path.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os.path
	
	for path in [ '/one/two/three', 
	              '/one/two/three/',
	              '/',
	              '.',
	              '']:
	    print '%15s : %s' % (path, os.path.basename(path))

snippet ospath_commonprefix.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_commonprefix.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Find the prefix string common to a group of paths.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os.path
	
	paths = ['/one/two/three/four',
	         '/one/two/threefold',
	         '/one/two/three/',
	         ]
	for path in paths:
	    print 'PATH:', path
	
	print
	print 'PREFIX:', os.path.commonprefix(paths)

snippet ospath_dirname.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_dirname.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Find the directory portion of a filename.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os.path
	
	for path in [ '/one/two/three', 
	              '/one/two/three/',
	              '/',
	              '.',
	              '']:
	    print '%15s : %s' % (path, os.path.dirname(path))

snippet ospath_expanduser.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_expanduser.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Expand tilde in filenames.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os.path
	
	for user in [ '', 'dhellmann', 'postgresql' ]:
	    lookup = '~' + user
	    print '%12s : %s' % (lookup, os.path.expanduser(lookup))

snippet ospath_expandvars.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_expandvars.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Expand shell variables in filenames.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os.path
	import os
	
	os.environ['MYVAR'] = 'VALUE'
	
	print os.path.expandvars('/path/to/$MYVAR')

snippet ospath_join.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_join.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Combine path components to create a single path.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os.path
	
	for parts in [ ('one', 'two', 'three'),
	               ('/', 'one', 'two', 'three'),
	               ('/one', '/two', '/three'),
	               ]:
	    print parts, ':', os.path.join(*parts)

snippet ospath_normpath.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_normpath.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Compute a "normalized" path.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os.path
	
	for path in [ 'one//two//three', 
	              'one/./two/./three', 
	              'one/../alt/two/three',
	              ]:
	    print '%20s : %s' % (path, os.path.normpath(path))

snippet ospath_properties.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_properties.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Find attributes of a file other than its name.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os.path
	import time
	
	print 'File         :', __file__
	print 'Access time  :', time.ctime(os.path.getatime(__file__))
	print 'Modified time:', time.ctime(os.path.getmtime(__file__))
	print 'Change time  :', time.ctime(os.path.getctime(__file__))
	print 'Size         :', os.path.getsize(__file__) 
snippet ospath_splitext.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_splitext.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Separate a filename into the base and extension.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os.path
	
	for path in [ 'filename.txt',
	              'filename',
	              '/path/to/filename.txt',
	              '/',
	              '',
	              'my-archive.tar.gz',
	              'no-extension.',
	              ]:
	    print '%21s :' % path, os.path.splitext(path)

snippet ospath_split.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_split.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Separate a path into its directory and base components.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os.path
	
	for path in [ '/one/two/three', 
	              '/one/two/three/',
	              '/',
	              '.',
	              '']:
	    print '%15s : %s' % (path, os.path.split(path))

snippet ospath_tests.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_tests.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Test properties of a file.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os.path
	
	FILENAMES = [ __file__,
	              os.path.dirname(__file__),
	              '/',
	              './broken_link',
	              ]
	
	for file in FILENAMES:
	    print 'File        :', file
	    print 'Absolute    :', os.path.isabs(file)
	    print 'Is File?    :', os.path.isfile(file)
	    print 'Is Dir?     :', os.path.isdir(file)
	    print 'Is Link?    :', os.path.islink(file)
	    print 'Mountpoint? :', os.path.ismount(file)
	    print 'Exists?     :', os.path.exists(file)
	    print 'Link Exists?:', os.path.lexists(file)
	    print

snippet ospath_walk.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ospath_walk.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Traverse a directory tree.
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os
	import os.path
	import pprint
	
	def visit(arg, dirname, names):
	    print dirname, arg
	    for name in names:
	        subname = os.path.join(dirname, name)
	        if os.path.isdir(subname):
	            print '  %s/' % name
	        else:
	            print '  %s' % name
	    print
	
	if not os.path.exists('example'):
	    os.mkdir('example')
	if not os.path.exists('example/one'):
	    os.mkdir('example/one')
	
	with open('example/one/file.txt', 'wt') as f:
	    f.write('contents')
	with open('example/two.txt', 'wt') as f:
	    f.write('contents')
	
	os.path.walk('example', visit, '(User data)')

snippet os_popen2.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_popen2.py
	
	"""Example use of popen() varients from os.
	
	"""
	
	import warnings
	warnings.filterwarnings('ignore', 'os.popen.* is deprecated.*',)
	
	import os
	
	print 'popen2:'
	stdin, stdout = os.popen2('cat -')
	try:
	    stdin.write('through stdin to stdout')
	finally:
	    stdin.close()
	try:
	    stdout_value = stdout.read()
	finally:
	    stdout.close()
	print '\tpass through:', repr(stdout_value)

snippet os_popen2_seq.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_popen2_seq.py
	
	"""Example use of popen() varients from os.
	
	"""
	
	import warnings
	warnings.filterwarnings('ignore', 'os.popen.* is deprecated.*',)
	
	import os
	
	print 'popen2, cmd as sequence:'
	stdin, stdout = os.popen2(['cat', '-'])
	try:
	    stdin.write('through stdin to stdout')
	finally:
	    stdin.close()
	try:
	    stdout_value = stdout.read()
	finally:
	    stdout.close()
	print '\tpass through:', repr(stdout_value)

snippet os_popen3.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_popen3.py
	
	"""Example use of popen() varients from os.
	
	"""
	
	import warnings
	warnings.filterwarnings('ignore', 'os.popen.* is deprecated.*',)
	
	
	import os
	
	print 'popen3:'
	stdin, stdout, stderr = os.popen3('cat -; echo ";to stderr" 1>&2')
	try:
	    stdin.write('through stdin to stdout')
	finally:
	    stdin.close()
	try:
	    stdout_value = stdout.read()
	finally:
	    stdout.close()
	print '\tpass through:', repr(stdout_value)
	try:
	    stderr_value = stderr.read()
	finally:
	    stderr.close()
	print '\tstderr:', repr(stderr_value)

snippet os_popen4.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_popen4.py
	
	"""Example use of popen() varients from os.
	
	"""
	
	import warnings
	warnings.filterwarnings('ignore', 'os.popen.* is deprecated.*',)
	
	
	import os
	
	print 'popen4:'
	stdin, stdout_and_stderr = os.popen4('cat -; echo ";to stderr" 1>&2')
	try:
	    stdin.write('through stdin to stdout')
	finally:
	    stdin.close()
	try:
	    stdout_value = stdout_and_stderr.read()
	finally:
	    stdout_and_stderr.close()
	print '\tcombined output:', repr(stdout_value)

snippet os_popen.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_popen.py
	
	"""Example use of popen() varients from os.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	print 'popen, read:'
	stdout = os.popen('echo "to stdout"', 'r')
	try:
	    stdout_value = stdout.read()
	finally:
	    stdout.close()
	print '\tstdout:', repr(stdout_value)
	
	print '\npopen, write:'
	stdin = os.popen('cat -', 'w')
	try:
	    stdin.write('\tstdin: to stdin\n')
	finally:
	    stdin.close()

snippet os_process_id_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_process_id_example.py
	
	"""Using the os module to find information about the current process.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	print 'This process id:', os.getpid()
	print 'Parent process :', os.getppid()
	print 'Process group  :', os.getpgid(os.getpid())
	print 'Parent group   :', os.getpgid(os.getppid())
	print 'Session id     :', os.getsid(0)

snippet os_process_user_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_process_user_example.py
	#!/usr/bin/env python
	"""Using the os module to find information about the user running the current process.
	"""
	#end_pymotw_header
	
	import os
	
	TEST_GID=501
	TEST_UID=527
	
	def show_user_info():
	    print 'User (actual/effective)  : %d / %d' % \
	        (os.getuid(), os.geteuid())
	    print 'Group (actual/effective) : %d / %d' % \
	        (os.getgid(), os.getegid())
	    print 'Actual Groups   :', os.getgroups()
	    return
	
	print 'BEFORE CHANGE:'
	show_user_info()
	print
	
	try:
	    os.setegid(TEST_GID)
	except OSError:
	    print 'ERROR: Could not change effective group.  Rerun as root.'
	else:
	    print 'CHANGED GROUP:'
	    show_user_info()
	    print
	
	try:
	    os.seteuid(TEST_UID)
	except OSError:
	    print 'ERROR: Could not change effective user.  Rerun as root.'
	else:
	    print 'CHANGE USER:'
	    show_user_info()
	    print

snippet os_spawn_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_spawn_example.py
	
	"""Using spawn*() instead of fork() and exec*().
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	os.spawnlp(os.P_WAIT, 'pwd', 'pwd', '-P')

snippet os_stat_chmod.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_stat_chmod.py
	
	"""Change permissions on a file
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	import stat
	
	filename = 'os_stat_chmod_example.txt'
	if os.path.exists(filename):
	    os.unlink(filename)
	with open(filename, 'wt') as f:
	    f.write('contents')
	
	existing_permissions = stat.S_IMODE(os.stat(filename).st_mode)
	
	if not os.access(filename, os.X_OK):
	    print 'Adding execute permission'
	    new_permissions = existing_permissions | stat.S_IXUSR
	else:
	    print 'Removing execute permission'
	    # use xor to remove the user execute permission
	    new_permissions = existing_permissions ^ stat.S_IXUSR
	
	os.chmod(filename, new_permissions)
	    

snippet os_stat.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_stat.py
	
	"""Show stat info for a file.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	import sys
	import time
	
	if len(sys.argv) == 1:
	    filename = __file__
	else:
	    filename = sys.argv[1]
	
	stat_info = os.stat(filename)
	
	print 'os.stat(%s):' % filename
	print '\tSize:', stat_info.st_size
	print '\tPermissions:', oct(stat_info.st_mode)
	print '\tOwner:', stat_info.st_uid
	print '\tDevice:', stat_info.st_dev
	print '\tLast modified:', time.ctime(stat_info.st_mtime)
	

snippet os_symlinks.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_symlinks.py
	
	"""Working with symbolic links
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	link_name = '/tmp/' + os.path.basename(__file__)
	
	print 'Creating link %s -> %s' % (link_name, __file__)
	os.symlink(__file__, link_name)
	
	stat_info = os.lstat(link_name)
	print 'Permissions:', oct(stat_info.st_mode)
	
	print 'Points to:', os.readlink(link_name)
	
	os.unlink(link_name)

snippet os_system_background.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_system_background.py
	
	"""Running a command in the background
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	import time
	
	print 'Calling...'
	os.system('date; (sleep 3; date) &')
	
	print 'Sleeping...'
	time.sleep(5)

snippet os_system_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_system_example.py
	
	"""Using os.system() to run external commands.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	os.system('pwd')

snippet os_system_shell.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_system_shell.py
	
	"""Using os.system() to run external commands.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	
	os.system('echo $TMPDIR')

snippet os_wait_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_wait_example.py
	
	"""Wait for a worker process.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	import sys
	import time
	
	for i in range(2):
	    print 'PARENT %s: Forking %s' % (os.getpid(), i)
	    worker_pid = os.fork()
	    if not worker_pid:
	        print 'WORKER %s: Starting' % i
	        time.sleep(2 + i)
	        print 'WORKER %s: Finishing' % i
	        sys.exit(i)
	
	for i in range(2):
	    print 'PARENT: Waiting for %s' % i
	    done = os.wait()
	    print 'PARENT: Child done:', done
	

snippet os_waitpid_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_waitpid_example.py
	
	"""Wait for a worker process.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	import sys
	import time
	
	workers = []
	for i in range(2):
	    print 'PARENT %d: Forking %s' % (os.getpid(), i)
	    worker_pid = os.fork()
	    if not worker_pid:
	        print 'WORKER %s: Starting' % i
	        time.sleep(2 + i)
	        print 'WORKER %s: Finishing' % i
	        sys.exit(i)
	    workers.append(worker_pid)
	
	for pid in workers:
	    print 'PARENT: Waiting for %s' % pid
	    done = os.waitpid(pid, 0)
	    print 'PARENT: Child done:', done
	

snippet os_walk.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/os_walk.py
	
	"""Example of os.walk() implementing a simple recursive directory listing.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os, sys
	
	if len(sys.argv) == 1:
	    root = '/tmp'
	else:
	    root = sys.argv[1]
	
	for dir_name, sub_dirs, files in os.walk(root):
	    print dir_name
	    # Make the subdirectory names stand out with /
	    sub_dirs = [ '%s/' % n for n in sub_dirs ]
	    # Mix the directory contents together
	    contents = sub_dirs + files
	    contents.sort()
	    # Show the contents
	    for c in contents:
	        print '\t%s' % c
	    print

snippet pdb_break.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_break.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	
	def calc(i, n):
	    j = i * n
	    print 'j =', j
	    if j > 0:
	        print 'Positive!'
	    return j
	
	def f(n):
	    for i in range(n):
	        print 'i =', i
	        j = calc(i, n)
	    return
	
	if __name__ == '__main__':
	    f(5)

snippet pdb_break_remote.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_break_remote.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	from pdb_break import f
	
	f(5)
	
	

snippet pdb_function_arguments.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_function_arguments.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	
	import pdb
	
	def recursive_function(n=5, output='to be printed'):
	    if n > 0:
	        recursive_function(n-1)
	    else:
	        pdb.set_trace()
	        print output
	    return
	
	if __name__ == '__main__':
	    recursive_function()

snippet pdb_jump.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_jump.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	
	def f(n):
	    result = []
	    j = 0
	    for i in range(n):
	        j = i * n + j
	        j += n
	        result.append(j)
	    return result
	
	if __name__ == '__main__':
	    print f(5)
	
	

snippet pdb_next.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_next.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	
	import pdb
	
	def calc(i, n):
	    j = i * n
	    return j
	
	def f(n):
	    for i in range(n):
	        j = calc(i, n)
	        print i, j
	    return
	
	if __name__ == '__main__':
	    pdb.set_trace()
	    f(5)

snippet pdb_no_jump.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_no_jump.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	
	def f(n):
	    if n < 0:
	        raise ValueError('Invalid n: %s' % n)
	    result = []
	    j = 0
	    for i in range(n):
	        j = i * n + j
	        j += n
	        result.append(j)
	    return result
	
	
	if __name__ == '__main__':
	    try:
	        print f(5)
	    finally:
	        print 'Always printed'
	
	    try:
	        print f(-5)
	    except:
	        print 'There was an error'
	    else:
	        print 'There was no error'
	
	    print 'Last statement'

snippet pdb_post_mortem.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_post_mortem.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	
	class MyObj(object):
	
	    def __init__(self, num_loops):
	        self.count = num_loops
	
	    def go(self):
	        for i in range(self.num_loops):
	            print i
	        return

snippet pdb_pp.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_pp.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	
	import pdb
	
	with open('lorem.txt', 'rt') as f:
	    lines = f.readlines()
	
	pdb.set_trace()

snippet pdb_run.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_run.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	
	import sys
	
	def f():
	    print 'Command-line args:', sys.argv
	    return
	
	if __name__ == '__main__':
	    f()

snippet pdb_script.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_script.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	
	class MyObj(object):
	
	    def __init__(self, num_loops):
	        self.count = num_loops
	
	    def go(self):
	        for i in range(self.count):
	            print i
	        return
	
	if __name__ == '__main__':
	    MyObj(5).go()

snippet pdb_set_trace.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_set_trace.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	
	import pdb
	
	class MyObj(object):
	
	    def __init__(self, num_loops):
	        self.count = num_loops
	
	    def go(self):
	        for i in range(self.count):
	            pdb.set_trace()
	            print i
	        return
	
	if __name__ == '__main__':
	    MyObj(5).go()

snippet pdb_step.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pdb_step.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	
	import pdb
	
	def f(n):
	    for i in range(n):
	        j = i * n
	        print i, j
	    return
	
	if __name__ == '__main__':
	    pdb.set_trace()
	    f(5)

snippet pickle_cycle.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pickle_cycle.py
	
	import pickle
	
	
	class Node(object):
	    """A simple digraph
	    """
	
	    def __init__(self, name):
	        self.name = name
	        self.connections = []
	
	    def add_edge(self, node):
	        "Create an edge between this node and the other."
	        self.connections.append(node)
	
	    def __iter__(self):
	        return iter(self.connections)
	
	
	def preorder_traversal(root, seen=None, parent=None):
	    """Generator function to yield the edges in a graph.
	    """
	    if seen is None:
	        seen = set()
	    yield (parent, root)
	    if root in seen:
	        return
	    seen.add(root)
	    for node in root:
	        for parent, subnode in preorder_traversal(node, seen, root):
	            yield (parent, subnode)
	
	
	def show_edges(root):
	    "Print all the edges in the graph."
	    for parent, child in preorder_traversal(root):
	        if not parent:
	            continue
	        print('%5s -> %2s (%s)' % (parent.name, child.name, id(child)))
	
	
	# Set up the nodes.
	root = Node('root')
	a = Node('a')
	b = Node('b')
	c = Node('c')
	
	# Add edges between them.
	root.add_edge(a)
	root.add_edge(b)
	a.add_edge(b)
	b.add_edge(a)
	b.add_edge(c)
	a.add_edge(a)
	
	print('ORIGINAL GRAPH:')
	show_edges(root)
	
	# Pickle and unpickle the graph to create
	# a new set of nodes.
	dumped = pickle.dumps(root)
	reloaded = pickle.loads(dumped)
	
	print('\nRELOADED GRAPH:')
	show_edges(reloaded)

snippet pickle_dump_to_file_1.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pickle_dump_to_file_1.py
	
	import pickle
	import sys
	
	
	class SimpleObject(object):
	    def __init__(self, name):
	        self.name = name
	        self.name_backwards = name[::-1]
	
	
	if __name__ == '__main__':
	    data = []
	    data.append(SimpleObject('pickle'))
	    data.append(SimpleObject('cPickle'))
	    data.append(SimpleObject('last'))
	
	    filename = sys.argv[1]
	
	    with open(filename, 'wb') as out_s:
	        # Write to the stream
	        for o in data:
	            print('WRITING: %s (%s)' % (o.name, o.name_backwards))
	            pickle.dump(o, out_s)

snippet pickle_load_from_file_1.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pickle_load_from_file_1.py
	
	import pickle
	import sys
	
	filename = sys.argv[1]
	
	with open(filename, 'rb') as in_s:
	    # Read the data
	    while True:
	        try:
	            o = pickle.load(in_s)
	        except EOFError:
	            break
	        else:
	            print('READ: %s (%s)' % (o.name, o.name_backwards))

snippet pickle_load_from_file_2.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pickle_load_from_file_2.py
	
	import pickle
	import sys
	
	
	filename = sys.argv[1]
	
	with open(filename, 'rb') as in_s:
	    # Read the data
	    while True:
	        try:
	            o = pickle.load(in_s)
	        except EOFError:
	            break
	        else:
	            print('READ: %s (%s)' % (o.name, o.name_backwards))

snippet pickle_stream.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pickle_stream.py
	
	import pickle
	from io import BytesIO
	
	
	class SimpleObject(object):
	
	    def __init__(self, name):
	        self.name = name
	        self.name_backwards = name[::-1]
	
	
	data = []
	data.append(SimpleObject('pickle'))
	data.append(SimpleObject('cPickle'))
	data.append(SimpleObject('last'))
	
	# Simulate a file with StringIO
	out_s = BytesIO()
	
	# Write to the stream
	for o in data:
	    print('WRITING : %s (%s)' % (o.name, o.name_backwards))
	    pickle.dump(o, out_s)
	    out_s.flush()
	
	# Set up a read-able stream
	in_s = BytesIO(out_s.getvalue())
	
	# Read the data
	while True:
	    try:
	        o = pickle.load(in_s)
	    except EOFError:
	        break
	    else:
	        print('READ    : %s (%s)' % (o.name, o.name_backwards))

snippet pickle_string.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pickle_string.py
	
	import pickle
	import pprint
	
	
	data = [{'a': 'A', 'b': 2, 'c': 3.0}]
	print('DATA:')
	pprint.pprint(data)
	
	data_string = pickle.dumps(data)
	print('PICKLE: %r' % data_string)

snippet pickle_unpickle.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pickle_unpickle.py
	
	import pickle
	import pprint
	
	
	data1 = [{'a': 'A', 'b': 2, 'c': 3.0}]
	print('BEFORE: ')
	pprint.pprint(data1)
	
	data1_string = pickle.dumps(data1)
	
	data2 = pickle.loads(data1_string)
	print('AFTER : ')
	pprint.pprint(data2)
	
	print('SAME? :', (data1 is data2))  # 比较的是内存地址
	print('EQUAL?:', (data1 == data2))  # 比较值是否相等

snippet pkgutil_devel.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pkgutil_devel.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import demopkg2
	print 'demopkg2           :', demopkg2.__file__
	
	import demopkg2.overloaded
	print 'demopkg2.overloaded:', demopkg2.overloaded.__file__
	
	print
	demopkg2.overloaded.func()

snippet pkgutil_extend_path.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pkgutil_extend_path.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import demopkg1
	print 'demopkg1           :', demopkg1.__file__
	
	try:
	    import demopkg1.shared
	except Exception, err:
	    print 'demopkg1.shared    : Not found (%s)' % err
	else:
	    print 'demopkg1.shared    :', demopkg1.shared.__file__
	
	try:
	    import demopkg1.not_shared
	except Exception, err:
	    print 'demopkg1.not_shared: Not found (%s)' % err
	else:
	    print 'demopkg1.not_shared:', demopkg1.not_shared.__file__

snippet pkgutil_get_data.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pkgutil_get_data.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Load package data
	"""
	#end_pymotw_header
	
	import pkgutil
	
	template = pkgutil.get_data('pkgwithdata', 'templates/base.html')
	print template.encode('utf-8')

snippet pkgutil_get_data_zip.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pkgutil_get_data_zip.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Loading data from a zipfile.
	"""
	#end_pymotw_header
	
	import pkgutil
	import zipfile
	import sys
	
	# Create a ZIP file with code from the current directory
	# and the template using a name that does not appear on the
	# local filesystem.
	with zipfile.PyZipFile('pkgwithdatainzip.zip', mode='w') as zf:
	    zf.writepy('.')
	    zf.write('pkgwithdata/templates/base.html',
	             'pkgwithdata/templates/fromzip.html',
	             )
	
	# Add the ZIP file to the import path.
	sys.path.insert(0, 'pkgwithdatainzip.zip')
	
	# Import pkgwithdata to show that it comes from the ZIP archive.
	import pkgwithdata
	print 'Loading pkgwithdata from', pkgwithdata.__file__
	
	# Print the template body
	print '\nTemplate:'
	data = pkgutil.get_data('pkgwithdata', 'templates/fromzip.html')
	print data.encode('utf-8')

snippet pkgutil_nested.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pkgutil_nested.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import nested
	
	import nested.shallow
	print 'nested.shallow:', nested.shallow.__file__
	nested.shallow.func()
	
	print
	import nested.second.deep
	print 'nested.second.deep:', nested.second.deep.__file__
	nested.second.deep.func() 
snippet pkgutil_os_specific.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pkgutil_os_specific.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import demopkg1
	print 'demopkg1:', demopkg1.__file__
	
	import demopkg1.shared
	print 'demopkg1.shared:', demopkg1.shared.__file__
	
	import demopkg1.not_shared
	print 'demopkg1.not_shared:', demopkg1.not_shared.__file__

snippet platform_architecture.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/platform_architecture.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import platform
	
	print 'interpreter:', platform.architecture()
	print '/bin/ls    :', platform.architecture('/bin/ls') 
snippet platform_os_info.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/platform_os_info.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import platform
	
	print 'uname:', platform.uname()
	
	print
	print 'system   :', platform.system()
	print 'node     :', platform.node()
	print 'release  :', platform.release()
	print 'version  :', platform.version()
	print 'machine  :', platform.machine()
	print 'processor:', platform.processor()

snippet platform_platform.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/platform_platform.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import platform
	
	print 'Normal :', platform.platform()
	print 'Aliased:', platform.platform(aliased=True)
	print 'Terse  :', platform.platform(terse=True) 
snippet platform_python.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/platform_python.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import platform
	
	print 'Version      :', platform.python_version()
	print 'Version tuple:', platform.python_version_tuple()
	print 'Compiler     :', platform.python_compiler()
	print 'Build        :', platform.python_build()

snippet pprint_arbitrary_object.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pprint_arbitrary_object.py
	# -*- coding: utf-8 -*-
	
	from pprint import pprint
	
	
	class node(object):
	    def __init__(self, name, contents=[]):
	        self.name = name
	        self.contents = contents[:]
	
	    def __repr__(self):
	        return ('node(' + repr(self.name) + ', ' +
	                repr(self.contents) + ')'
	                )
	
	
	trees = [node('node-1'),
	         node('node-2', [node('node-2-1')]),
	         node('node-3', [node('node-3-1')]),
	         ]
	pprint(trees)

snippet pprint_data.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pprint_data.py
	# -*- coding: utf-8 -*-
	
	data = [(1, {'a': 'A', 'b': 'B', 'c': 'C', 'd': 'D'}),
	        (2, {'e': 'E', 'f': 'F', 'g': 'G', 'h': 'H',
	             'i': 'I', 'j': 'J', 'k': 'K', 'l': 'L',
	             }),
	        ]

snippet pprint_depth.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pprint_depth.py
	# -*- coding: utf-8 -*-
	
	from pprint import pprint
	
	from pprint_data import data
	
	pprint(data, depth=2)

snippet pprint_pformat.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pprint_pformat.py
	# -*- coding: utf-8 -*-
	
	import logging
	from pprint import pformat
	from pprint_data import data
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='%(levelname)-8s %(message)s',
	                    )
	
	logging.debug('Logging pformatted data')
	formatted = pformat(data)
	for line in formatted.splitlines():
	    logging.debug(line.rstrip())

snippet pprint_pprint.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pprint_pprint.py
	# -*- coding: utf-8 -*-
	
	from pprint import pprint
	
	from pprint_data import data
	
	print('PRINT:')
	print(data)
	print()
	print('PPRINT:')
	pprint(data)

snippet pprint_recursion.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pprint_recursion.py
	# -*- coding: utf-8 -*-
	
	from pprint import pprint
	
	local_data = ['a', 'b', 1, 2]
	local_data.append(local_data)
	
	print('id(local_data) =>', id(local_data))
	print(len(local_data))
	pprint(local_data)

snippet pprint_width.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pprint_width.py
	# -*- coding: utf-8 -*-
	
	from pprint import pprint
	
	from pprint_data import data
	
	
	for width in [80, 5]:
	    print('WIDTH =', width)
	    pprint(data, width=width)
	    print()

snippet profile_fibonacci_memoized.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/profile_fibonacci_memoized.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	#end_pymotw_header
	
	import profile
	
	class memoize:
	    # from Avinash Vora's memoize decorator
	    # http://bit.ly/fGzfR7
	    def __init__(self, function):
	        self.function = function
	        self.memoized = {}
	
	    def __call__(self, *args):
	        try:
	            return self.memoized[args]
	        except KeyError:
	            self.memoized[args] = self.function(*args)
	            return self.memoized[args]
	
	@memoize
	def fib(n):
	    # from literateprograms.org
	    # http://bit.ly/hlOQ5m
	    if n == 0:
	        return 0
	    elif n == 1:
	        return 1
	    else:
	        return fib(n-1) + fib(n-2)
	
	def fib_seq(n):
	    seq = [ ]
	    if n > 0:
	        seq.extend(fib_seq(n-1))
	    seq.append(fib(n))
	    return seq
	
	if __name__ == '__main__':
	    profile.run('print fib_seq(20); print')

snippet profile_fibonacci_raw.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/profile_fibonacci_raw.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	#end_pymotw_header
	
	import profile
	
	def fib(n):
	    # from literateprograms.org
	    # http://bit.ly/hlOQ5m
	    if n == 0:
	        return 0
	    elif n == 1:
	        return 1
	    else:
	        return fib(n-1) + fib(n-2)
	
	def fib_seq(n):
	    seq = [ ]
	    if n > 0:
	        seq.extend(fib_seq(n-1))
	    seq.append(fib(n))
	    return seq
	
	profile.run('print fib_seq(20); print')

snippet profile_runctx.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/profile_runctx.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import profile
	from profile_fibonacci_memoized import fib, fib_seq
	
	if __name__ == '__main__':
	    profile.runctx('print fib_seq(n); print', globals(), {'n':20})

snippet profile_stats_callers.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/profile_stats_callers.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import cProfile as profile
	import pstats
	from profile_fibonacci_memoized import fib, fib_seq
	
	# Read all 5 stats files into a single object
	stats = pstats.Stats('profile_stats_0.stats')
	for i in range(1, 5):
	    stats.add('profile_stats_%d.stats' % i)
	stats.strip_dirs()
	stats.sort_stats('cumulative')
	
	print 'INCOMING CALLERS:'
	stats.print_callers('\(fib')
	
	print 'OUTGOING CALLEES:'
	stats.print_callees('\(fib')

snippet profile_stats.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/profile_stats.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import cProfile as profile
	import pstats
	from profile_fibonacci_memoized import fib, fib_seq
	
	# Create 5 set of stats
	filenames = []
	for i in range(5):
	    filename = 'profile_stats_%d.stats' % i
	    profile.run('print %d, fib_seq(20)' % i, filename)
	
	# Read all 5 stats files into a single object
	stats = pstats.Stats('profile_stats_0.stats')
	for i in range(1, 5):
	    stats.add('profile_stats_%d.stats' % i)
	
	# Clean up filenames for the report
	stats.strip_dirs()
	
	# Sort the statistics by the cumulative time spent in the function
	stats.sort_stats('cumulative')
	
	stats.print_stats()

snippet profile_stats_restricted.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/profile_stats_restricted.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import profile
	import pstats
	from profile_fibonacci_memoized import fib, fib_seq
	
	# Read all 5 stats files into a single object
	stats = pstats.Stats('profile_stats_0.stats')
	for i in range(1, 5):
	    stats.add('profile_stats_%d.stats' % i)
	stats.strip_dirs()
	stats.sort_stats('cumulative')
	
	# limit output to lines with "(fib" in them
	stats.print_stats('\(fib')

snippet pyclbr_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pyclbr_example.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	#end_pymotw_header
	"""Example source for pyclbr.
	"""
	
	class Base(object):
	    """This is the base class.
	    """
	    
	    def method1(self):
	        return
	
	class Sub1(Base):
	    """This is the first subclass.
	    """
	
	class Sub2(Base):
	    """This is the second subclass.
	    """
	
	class Mixin:
	    """A mixin class.
	    """
	    
	    def method2(self):
	        return
	
	class MixinUser(Sub2, Mixin):
	    """Overrides method1 and method2
	    """
	    
	    def method1(self):
	        return
	    
	    def method2(self):
	        return
	        
	    def method3(self):
	        return
	
	def my_function():
	    """Stand-alone function.
	    """
	    return

snippet pyclbr_readmodule_ex.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pyclbr_readmodule_ex.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	import pyclbr
	import os
	from operator import itemgetter
	
	example_data = pyclbr.readmodule_ex('pyclbr_example')
	
	for name, data in sorted(example_data.items(), key=lambda x:x[1].lineno):
	    if isinstance(data, pyclbr.Function):
	        print 'Function: {0} [{1}]'.format(name, data.lineno)
	

snippet pyclbr_readmodule.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pyclbr_readmodule.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	import pyclbr
	import os
	from operator import itemgetter
	
	def show_class(name, class_data):
	    print 'Class:', name
	    filename = os.path.basename(class_data.file)
	    print '\tFile: {0} [{1}]'.format(filename, class_data.lineno)
	    show_super_classes(name, class_data)
	    show_methods(name, class_data)
	    print
	    return
	
	def show_methods(class_name, class_data):
	    for name, lineno in sorted(class_data.methods.items(),
	                               key=itemgetter(1)):
	        print '\tMethod: {0} [{1}]'.format(name, lineno)
	    return
	
	def show_super_classes(name, class_data):
	    super_class_names = []
	    for super_class in class_data.super:
	        if super_class == 'object':
	            continue
	        if isinstance(super_class, basestring):
	            super_class_names.append(super_class)
	        else:
	            super_class_names.append(super_class.name)
	    if super_class_names:
	        print '\tSuper classes:', super_class_names
	    return
	
	example_data = pyclbr.readmodule('pyclbr_example')
	
	for name, class_data in sorted(example_data.items(),
	                               key=lambda x:x[1].lineno):
	    show_class(name, class_data)

snippet Queue_fifo.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/Queue_fifo.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""FIFO Queue
	"""
	#end_pymotw_header
	
	import Queue
	
	q = Queue.Queue()
	
	for i in range(5):
	    q.put(i)
	
	while not q.empty():
	    print q.get(),
	print
	

snippet Queue_lifo.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/Queue_lifo.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""LIFO Queue
	"""
	#end_pymotw_header
	
	import Queue
	
	q = Queue.LifoQueue()
	
	for i in range(5):
	    q.put(i)
	
	while not q.empty():
	    print q.get(),
	print

snippet Queue_priority.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/Queue_priority.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""PriorityQueue
	"""
	#end_pymotw_header
	
	import Queue
	import threading
	
	class Job(object):
	    def __init__(self, priority, description):
	        self.priority = priority
	        self.description = description
	        print 'New job:', description
	        return
	    def __cmp__(self, other):
	        return cmp(self.priority, other.priority)
	
	q = Queue.PriorityQueue()
	
	q.put( Job(3, 'Mid-level job') )
	q.put( Job(10, 'Low-level job') )
	q.put( Job(1, 'Important job') )
	
	def process_job(q):
	    while True:
	        next_job = q.get()
	        print 'Processing job:', next_job.description
	        q.task_done()
	
	workers = [ threading.Thread(target=process_job, args=(q,)),
	            threading.Thread(target=process_job, args=(q,)),
	            ]
	for w in workers:
	    w.setDaemon(True)
	    w.start()
	
	q.join()

snippet random_choice.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_choice.py
	# -*- coding: utf-8 -*-
	
	import random
	
	outcomes = {'heads': 0,
	            'tails': 0,
	            }
	sides = outcomes.keys()
	
	for i in range(10000):
	    outcomes[random.choice(list(sides))] += 1
	
	print('Heads:', outcomes['heads'])
	print('Tails:', outcomes['tails'])

snippet random_jumpahead.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_jumpahead.py
	# -*- coding: utf-8 -*-
	
	import random
	
	r1 = random.Random()
	r2 = random.Random()
	
	# Force r2 to a different part of the random period than r1.
	r2.setstate(r1.getstate())
	# jumpahead 已从python3中移除
	r2.jumpahead(1024)
	
	for i in range(3):
	    print('%04.3f  %04.3f' % (r1.random(), r2.random()))

snippet random_randint.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_randint.py
	# -*- coding: utf-8 -*-
	
	import random
	
	for i in range(5):
	    print(random.randint(1, 100), end=',')
	
	print()
	
	for i in range(5):
	    print(random.randint(-5, 5), end=',')
	
	print()

snippet random_random_class.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_random_class.py
	# -*- coding: utf-8 -*-
	
	import random
	import time
	
	print('Default initializiation:\n')
	
	r1 = random.Random()
	r2 = random.Random()
	
	for i in range(3):
	    print('%04.3f  %04.3f' % (r1.random(), r2.random()))
	
	print('\nSame seed:\n')
	
	seed = time.time()
	r1 = random.Random(seed)
	r2 = random.Random(seed)
	
	for i in range(3):
	    print('%04.3f  %04.3f' % (r1.random(), r2.random()))

snippet random_random.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_random.py
	# -*- coding: utf-8 -*-
	
	import random
	
	for i in range(5):
	    print('%04.3f' % random.random())
	
	print()

snippet random_randrange.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_randrange.py
	# -*- coding: utf-8 -*-
	
	import random
	
	# 能被5整除的随机数
	for i in range(3):
	    print(random.randrange(0, 101, 5))
	
	print()

snippet random_sample.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_sample.py
	# -*- coding: utf-8 -*-
	
	import random
	
	with open('poems.txt', 'rt') as f:
	    words = f.readlines()
	words = [w.rstrip() for w in words]
	
	for w in random.sample(words, 5):
	    print(w)

snippet random_seed.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_seed.py
	# -*- coding: utf-8 -*-
	
	import random
	
	random.seed(1)
	
	# 多次运行产生的随机数是一样的
	for i in range(5):
	    print('%04.3f' % random.random())
	print()

snippet random_shuffle.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_shuffle.py
	# -*- coding: utf-8 -*-
	
	import random
	import itertools
	
	FACE_CARDS = ('J', 'Q', 'K', 'A')
	SUITS = ('H', 'D', 'C', 'S')
	
	
	def new_deck():
	    return list(itertools.product(
	        itertools.chain(range(2, 11), FACE_CARDS),
	        SUITS,
	    ))
	
	
	def show_deck(deck):
	    p_deck = deck[:]
	    while p_deck:
	        row = p_deck[:13]
	        p_deck = p_deck[13:]
	        for j in row:
	            print('%2s%s' % j, end=',')
	        print()
	
	
	# Make a new deck, with the cards in order
	deck = new_deck()
	print('Initial deck:')
	show_deck(deck)
	
	# Shuffle the deck to randomize the order
	random.shuffle(deck)
	print('\nShuffled deck:')
	show_deck(deck)
	
	# Deal 4 hands of 5 cards each
	hands = [[], [], [], []]
	
	for i in range(5):
	    for h in hands:
	        h.append(deck.pop())
	
	# Show the hands
	print('\nHands:')
	for n, h in enumerate(hands):
	    print('%d:' % (n + 1))
	    for c in h:
	        print('%2s%s' % c, end=',')
	    print()
	
	# Show the remaining deck
	print('\nRemaining deck:')
	show_deck(deck)

snippet random_state.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_state.py
	# -*- coding: utf-8 -*-
	
	import random
	import os
	import pickle
	
	if os.path.exists('state.dat'):
	    # Restore the previously saved state
	    print('Found state.dat, initializing random module')
	    with open('state.dat', 'rb') as f:
	        state = pickle.load(f)
	    random.setstate(state)
	else:
	    # Use a well-known start state
	    print('No state.dat, seeding')
	    random.seed(1)
	
	# Produce random values
	for i in range(3):
	    print('%04.3f' % random.random(), end=',')
	print
	
	# Save state for next time
	with open('state.dat', 'wb') as f:
	    pickle.dump(random.getstate(), f)
	
	# Produce more random values
	print('\nAfter saving state:')
	for i in range(3):
	    print('%04.3f' % random.random(), end=',')
	print()

snippet random_system_random.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_system_random.py
	# -*- coding: utf-8 -*-
	
	import random
	import time
	
	print('Default initializiation:\n')
	
	r1 = random.SystemRandom()
	r2 = random.SystemRandom()
	
	for i in range(3):
	    print('%04.3f  %04.3f' % (r1.random(), r2.random()))
	
	print('\nSame seed:\n')
	
	seed = time.time()
	r1 = random.SystemRandom(seed)
	r2 = random.SystemRandom(seed)
	
	for i in range(3):
	    print('%04.3f  %04.3f' % (r1.random(), r2.random()))

snippet random_uniform.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/random_uniform.py
	# -*- coding: utf-8 -*-
	
	import random
	
	for i in range(5):
	    print('%04.3f' % random.uniform(1, 100), end=',')
	print()

snippet readline_buffer.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/readline_buffer.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import readline
	import logging
	
	LOG_FILENAME = '/tmp/completer.log'
	logging.basicConfig(filename=LOG_FILENAME,
	                    level=logging.DEBUG,
	                    )
	
	class BufferAwareCompleter(object):
	    
	    def __init__(self, options):
	        self.options = options
	        self.current_candidates = []
	        return
	
	    def complete(self, text, state):
	        response = None
	        if state == 0:
	            # This is the first time for this text,
	            # so build a match list.
	            
	            origline = readline.get_line_buffer()
	            begin = readline.get_begidx()
	            end = readline.get_endidx()
	            being_completed = origline[begin:end]
	            words = origline.split()
	
	            logging.debug('origline=%s', repr(origline))
	            logging.debug('begin=%s', begin)
	            logging.debug('end=%s', end)
	            logging.debug('being_completed=%s', being_completed)
	            logging.debug('words=%s', words)
	            
	            if not words:
	                self.current_candidates = sorted(self.options.keys())
	            else:
	                try:
	                    if begin == 0:
	                        # first word
	                        candidates = self.options.keys()
	                    else:
	                        # later word
	                        first = words[0]
	                        candidates = self.options[first]
	                    
	                    if being_completed:
	                        # match options with portion of input
	                        # being completed
	                        self.current_candidates = [
	                            w for w in candidates
	                            if w.startswith(being_completed)
	                            ]
	                    else:
	                        # matching empty string so use all candidates
	                        self.current_candidates = candidates
	
	                    logging.debug('candidates=%s',
	                                  self.current_candidates)
	                    
	                except (KeyError, IndexError), err:
	                    logging.error('completion error: %s', err)
	                    self.current_candidates = []
	        
	        try:
	            response = self.current_candidates[state]
	        except IndexError:
	            response = None
	        logging.debug('complete(%s, %s) => %s',
	                      repr(text), state, response)
	        return response
	            
	
	def input_loop():
	    line = ''
	    while line != 'stop':
	        line = raw_input('Prompt ("stop" to quit): ')
	        print 'Dispatch %s' % line
	
	# Register our completer function
	readline.set_completer(BufferAwareCompleter(
	    {'list':['files', 'directories'],
	     'print':['byname', 'bysize'],
	     'stop':[],
	    }).complete)
	
	# Use the tab key for completion
	readline.parse_and_bind('tab: complete')
	
	# Prompt the user for text
	input_loop()

snippet readline_completer.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/readline_completer.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import readline
	import logging
	
	LOG_FILENAME = '/tmp/completer.log'
	logging.basicConfig(filename=LOG_FILENAME,
	                    level=logging.DEBUG,
	                    )
	
	class SimpleCompleter(object):
	    
	    def __init__(self, options):
	        self.options = sorted(options)
	        return
	
	    def complete(self, text, state):
	        response = None
	        if state == 0:
	            # This is the first time for this text,
	            # so build a match list.
	            if text:
	                self.matches = [s 
	                                for s in self.options
	                                if s and s.startswith(text)]
	                logging.debug('%s matches: %s',
	                              repr(text), self.matches)
	            else:
	                self.matches = self.options[:]
	                logging.debug('(empty input) matches: %s',
	                              self.matches)
	        
	        # Return the state'th item from the match list,
	        # if we have that many.
	        try:
	            response = self.matches[state]
	        except IndexError:
	            response = None
	        logging.debug('complete(%s, %s) => %s', 
	                      repr(text), state, repr(response))
	        return response
	
	def input_loop():
	    line = ''
	    while line != 'stop':
	        line = raw_input('Prompt ("stop" to quit): ')
	        print 'Dispatch %s' % line
	
	# Register the completer function
	OPTIONS = ['start', 'stop', 'list', 'print']
	readline.set_completer(SimpleCompleter(OPTIONS).complete)
	
	# Use the tab key for completion
	readline.parse_and_bind('tab: complete')
	
	# Prompt the user for text
	input_loop()

snippet readline_history.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/readline_history.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import readline
	import logging
	import os
	
	LOG_FILENAME = '/tmp/completer.log'
	HISTORY_FILENAME = '/tmp/completer.hist'
	
	logging.basicConfig(filename=LOG_FILENAME,
	                    level=logging.DEBUG,
	                    )
	
	def get_history_items():
	    num_items = readline.get_current_history_length() + 1
	    return [ readline.get_history_item(i)
	             for i in xrange(1, num_items)
	             ]
	
	class HistoryCompleter(object):
	    
	    def __init__(self):
	        self.matches = []
	        return
	
	    def complete(self, text, state):
	        response = None
	        if state == 0:
	            history_values = get_history_items()
	            logging.debug('history: %s', history_values)
	            if text:
	                self.matches = sorted(h 
	                                      for h in history_values 
	                                      if h and h.startswith(text))
	            else:
	                self.matches = []
	            logging.debug('matches: %s', self.matches)
	        try:
	            response = self.matches[state]
	        except IndexError:
	            response = None
	        logging.debug('complete(%s, %s) => %s', 
	                      repr(text), state, repr(response))
	        return response
	
	def input_loop():
	    if os.path.exists(HISTORY_FILENAME):
	        readline.read_history_file(HISTORY_FILENAME)
	    print 'Max history file length:', readline.get_history_length()
	    print 'Startup history:', get_history_items()
	    try:
	        while True:
	            line = raw_input('Prompt ("stop" to quit): ')
	            if line == 'stop':
	                break
	            if line:
	                print 'Adding "%s" to the history' % line
	    finally:
	        print 'Final history:', get_history_items()
	        readline.write_history_file(HISTORY_FILENAME)
	
	# Register our completer function
	readline.set_completer(HistoryCompleter().complete)
	
	# Use the tab key for completion
	readline.parse_and_bind('tab: complete')
	
	# Prompt the user for text
	input_loop()

snippet readline_hooks.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/readline_hooks.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import readline
	
	def startup_hook():
	    readline.insert_text('from startup_hook')
	
	def pre_input_hook():
	    readline.insert_text(' from pre_input_hook')
	    readline.redisplay()
	
	readline.set_startup_hook(startup_hook)
	readline.set_pre_input_hook(pre_input_hook)
	readline.parse_and_bind('tab: complete')
	
	while True:
	    line = raw_input('Prompt ("stop" to quit): ')
	    if line == 'stop':
	        break
	    print 'ENTERED: "%s"' % line

snippet readline_parse_and_bind.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/readline_parse_and_bind.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import readline
	
	readline.parse_and_bind('tab: complete')
	readline.parse_and_bind('set editing-mode vi')
	
	while True:
	    line = raw_input('Prompt ("stop" to quit): ')
	    if line == 'stop':
	        break
	    print 'ENTERED: "%s"' % line

snippet readline_read_init_file.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/readline_read_init_file.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import readline
	
	readline.read_init_file('myreadline.rc')
	
	while True:
	    line = raw_input('Prompt ("stop" to quit): ')
	    if line == 'stop':
	        break
	    print 'ENTERED: "%s"' % line

snippet re_anchoring.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_anchoring.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Anchoring the search
	"""
	#end_pymotw_header
	
	from re_test_patterns import test_patterns
	
	test_patterns(
	    'This is some text -- with punctuation.',
	    [ (r'^\w+',     'word at start of string'),
	      (r'\A\w+',    'word at start of string'),
	      (r'\w+\S*$',  'word near end of string, skip punctuation'),
	      (r'\w+\S*\Z', 'word near end of string, skip punctuation'),
	      (r'\w*t\w*',  'word containing t'),
	      (r'\bt\w+',   't at start of word'),
	      (r'\w+t\b',   't at end of word'),
	      (r'\Bt\B',    't, not start or end of word'),
	      ])

snippet re_charset_dot.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_charset_dot.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Repetition of patterns
	"""
	#end_pymotw_header
	
	from re_test_patterns import test_patterns
	
	test_patterns(
	    'abbaabbba',
	    [ ('a.',    'a followed by any one character'),
	      ('b.',    'b followed by any one character'),
	      ('a.*b',  'a followed by anything, ending in b'),
	      ('a.*?b', 'a followed by anything, ending in b'),
	      ])

snippet re_charset_exclude.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_charset_exclude.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Repetition of patterns
	"""
	#end_pymotw_header
	
	from re_test_patterns import test_patterns
	
	test_patterns(
	    'This is some text -- with punctuation.',
	    [ ('[^-. ]+',  'sequences without -, ., or space'),
	      ])

snippet re_charset.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_charset.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Repetition of patterns
	"""
	#end_pymotw_header
	
	from re_test_patterns import test_patterns
	
	test_patterns(
	    'abbaabbba',
	    [ ('[ab]',    'either a or b'),
	      ('a[ab]+',  'a followed by 1 or more a or b'),
	      ('a[ab]+?', 'a followed by 1 or more a or b, not greedy'),
	      ])

snippet re_charset_ranges.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_charset_ranges.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Repetition of patterns
	"""
	#end_pymotw_header
	
	from re_test_patterns import test_patterns
	
	test_patterns(
	    'This is some text -- with punctuation.',
	    [ ('[a-z]+', 'sequences of lowercase letters'),
	      ('[A-Z]+', 'sequences of uppercase letters'),
	      ('[a-zA-Z]+', 'sequences of lowercase or uppercase letters'),
	      ('[A-Z][a-z]+', 'one uppercase followed by lowercase'),
	      ])

snippet re_email_compact.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_email_compact.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Match email addresses
	"""
	#end_pymotw_header
	
	import re
	
	address = re.compile('[\w\d.+-]+@([\w\d.]+\.)+(com|org|edu)',
	                     re.UNICODE)
	
	candidates = [
	    u'first.last@example.com',
	    u'first.last+category@gmail.com',
	    u'valid-address@mail.example.com',
	    u'not-valid@example.foo',
	    ]
	
	for candidate in candidates:
	    match = address.search(candidate)
	    print '%-30s  %s' % (candidate, 'Matches' if match else 'No match')
	    

snippet re_email_verbose.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_email_verbose.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Match email addresses
	"""
	#end_pymotw_header
	
	import re
	
	address = re.compile(
	    '''
	    [\w\d.+-]+       # username
	    @
	    ([\w\d.]+\.)+    # domain name prefix
	    (com|org|edu)    # TODO: support more top-level domains
	    ''',
	    re.UNICODE | re.VERBOSE)
	
	candidates = [
	    u'first.last@example.com',
	    u'first.last+category@gmail.com',
	    u'valid-address@mail.example.com',
	    u'not-valid@example.foo',
	    ]
	
	for candidate in candidates:
	    match = address.search(candidate)
	    print '%-30s  %s' % (candidate, 'Matches' if match else 'No match')
	    

snippet re_email_with_name.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_email_with_name.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Match email addresses
	"""
	#end_pymotw_header
	
	import re
	
	address = re.compile(
	    '''
	
	    # A name is made up of letters, and may include "."
	    # for title abbreviations and middle initials.
	    ((?P<name>
	       ([\w.,]+\s+)*[\w.,]+)
	       \s*
	       # Email addresses are wrapped in angle
	       # brackets: < > but only if a name is
	       # found, so keep the start bracket in this
	       # group.
	       <
	    )? # the entire name is optional
	
	    # The address itself: username@domain.tld
	    (?P<email>
	      [\w\d.+-]+       # username
	      @
	      ([\w\d.]+\.)+    # domain name prefix
	      (com|org|edu)    # limit the allowed top-level domains
	    )
	
	    >? # optional closing angle bracket
	    ''',
	    re.UNICODE | re.VERBOSE)
	
	candidates = [
	    u'first.last@example.com',
	    u'first.last+category@gmail.com',
	    u'valid-address@mail.example.com',
	    u'not-valid@example.foo',
	    u'First Last <first.last@example.com>',
	    u'No Brackets first.last@example.com',
	    u'First Last',
	    u'First Middle Last <first.last@example.com>',
	    u'First M. Last <first.last@example.com>',
	    u'<first.last@example.com>',
	    ]
	
	for candidate in candidates:
	    print 'Candidate:', candidate
	    match = address.search(candidate)
	    if match:
	        print '  Name :', match.groupdict()['name']
	        print '  Email:', match.groupdict()['email']
	    else:
	        print '  No match'

snippet re_escape_codes.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_escape_codes.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Escape codes
	"""
	#end_pymotw_header
	
	from re_test_patterns import test_patterns
	
	test_patterns(
	    'A prime #1 example!',
	    [ (r'\d+', 'sequence of digits'),
	      (r'\D+', 'sequence of nondigits'),
	      (r'\s+', 'sequence of whitespace'),
	      (r'\S+', 'sequence of nonwhitespace'),
	      (r'\w+', 'alphanumeric characters'),
	      (r'\W+', 'nonalphanumeric'),
	      ])

snippet re_escape_escapes.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_escape_escapes.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Escaping escape codes
	"""
	#end_pymotw_header
	
	from re_test_patterns import test_patterns
	
	test_patterns(
	    r'\d+ \D+ \s+',
	    [ (r'\\.\+', 'escape code'),
	      ])

snippet re_findall.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_findall.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Repetition of patterns
	"""
	#end_pymotw_header
	
	import re
	
	text = 'abbaaabbbbaaaaa'
	
	pattern = 'ab'
	
	for match in re.findall(pattern, text):
	    print 'Found "%s"' % match

snippet re_finditer.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_finditer.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Repetition of patterns
	"""
	#end_pymotw_header
	
	import re
	
	text = 'abbaaabbbbaaaaa'
	
	pattern = 'ab'
	
	for match in re.finditer(pattern, text):
	    s = match.start()
	    e = match.end()
	    print 'Found "%s" at %d:%d' % (text[s:e], s, e)

snippet re_flags_dotall.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_flags_dotall.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Matching newlines in multiline input
	"""
	#end_pymotw_header
	
	import re
	
	text = 'This is some text -- with punctuation.\nA second line.'
	pattern = r'.+'
	no_newlines = re.compile(pattern)
	dotall = re.compile(pattern, re.DOTALL)
	
	print 'Text:\n  %r' % text
	print 'Pattern:\n  %s' % pattern
	print 'No newlines :'
	for match in no_newlines.findall(text):
	    print '  %r' % match
	print 'Dotall      :'
	for match in dotall.findall(text):
	    print '  %r' % match
	

snippet re_flags_embedded.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_flags_embedded.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Embedding flags in the expression.
	"""
	#end_pymotw_header
	
	import re
	
	text = 'This is some text -- with punctuation.'
	pattern = r'(?i)\bT\w+'
	regex = re.compile(pattern)
	
	print 'Text      :', text
	print 'Pattern   :', pattern
	print 'Matches   :', regex.findall(text)
	

snippet re_flags_ignorecase.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_flags_ignorecase.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Case-insensitive matches
	"""
	#end_pymotw_header
	
	import re
	
	text = 'This is some text -- with punctuation.'
	pattern = r'\bT\w+'
	with_case = re.compile(pattern)
	without_case = re.compile(pattern, re.IGNORECASE)
	
	print 'Text:\n  %r' % text
	print 'Pattern:\n  %s' % pattern
	print 'Case-sensitive:'
	for match in with_case.findall(text):
	    print '  %r' % match
	print 'Case-insensitive:'
	for match in without_case.findall(text):
	    print '  %r' % match
	

snippet re_flags_multiline.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_flags_multiline.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Multiline input
	"""
	#end_pymotw_header
	
	import re
	
	text = 'This is some text -- with punctuation.\nA second line.'
	pattern = r'(^\w+)|(\w+\S*$)'
	single_line = re.compile(pattern)
	multiline = re.compile(pattern, re.MULTILINE)
	
	print 'Text:\n  %r' % text
	print 'Pattern:\n  %s' % pattern
	print 'Single Line :'
	for match in single_line.findall(text):
	    print '  %r' % (match,)
	print 'Multline    :'
	for match in multiline.findall(text):
	    print '  %r' % (match,)

snippet re_flags_unicode.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_flags_unicode.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Unicode character definitions
	"""
	#end_pymotw_header
	
	import re
	import codecs
	import sys
	
	# Set standard output encoding to UTF-8.
	sys.stdout = codecs.getwriter('UTF-8')(sys.stdout)
	
	text = u'Français złoty Österreich'
	pattern = ur'\w+'
	ascii_pattern = re.compile(pattern)
	unicode_pattern = re.compile(pattern, re.UNICODE)
	
	print 'Text    :', text
	print 'Pattern :', pattern
	print 'ASCII   :', u', '.join(ascii_pattern.findall(text))
	print 'Unicode :', u', '.join(unicode_pattern.findall(text))

snippet re_groups_alternative.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_groups_alternative.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Matching alternative groups
	"""
	#end_pymotw_header
	
	from re_test_patterns_groups import test_patterns
	
	test_patterns(
	    'abbaabbba',
	    [ (r'a((a+)|(b+))', 'a then seq. of a or seq. of b'),
	      (r'a((a|b)+)', 'a then seq. of [ab]'),
	     ])

snippet re_groups_individual.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_groups_individual.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Looking for a specific group in a match
	"""
	#end_pymotw_header
	
	import re
	
	text = 'This is some text -- with punctuation.'
	
	print 'Input text            :', text
	
	# word starting with 't' then another word
	regex = re.compile(r'(\bt\w+)\W+(\w+)')
	print 'Pattern               :', regex.pattern
	
	match = regex.search(text)
	print 'Entire match          :', match.group(0)
	print 'Word starting with "t":', match.group(1)
	print 'Word after "t" word   :', match.group(2)

snippet re_groups_match.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_groups_match.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Looking at groups on a match object
	"""
	#end_pymotw_header
	
	import re
	
	text = 'This is some text -- with punctuation.'
	
	print text
	print
	
	patterns = [
	    (r'^(\w+)', 'word at start of string'),
	    (r'(\w+)\S*$', 'word at end, with optional punctuation'),
	    (r'(\bt\w+)\W+(\w+)', 'word starting with t, another word'),
	    (r'(\w+t)\b', 'word ending with t'),
	    ]
	
	for pattern, desc in patterns:
	    regex = re.compile(pattern)
	    match = regex.search(text)
	    print 'Pattern %r (%s)\n' % (pattern, desc)
	    print '  ', match.groups()
	    print
	

snippet re_groups_named.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_groups_named.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Naming pattern groups
	"""
	#end_pymotw_header
	
	import re
	
	text = 'This is some text -- with punctuation.'
	
	print text
	print
	
	for pattern in [ r'^(?P<first_word>\w+)',
	                 r'(?P<last_word>\w+)\S*$',
	                 r'(?P<t_word>\bt\w+)\W+(?P<other_word>\w+)',
	                 r'(?P<ends_with_t>\w+t)\b',
	                 ]:
	    regex = re.compile(pattern)
	    match = regex.search(text)
	    print 'Matching "%s"' % pattern
	    print '  ', match.groups()
	    print '  ', match.groupdict()
	    print
	

snippet re_groups_nested.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_groups_nested.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Nested groups
	"""
	#end_pymotw_header
	
	from re_test_patterns_groups import test_patterns
	
	test_patterns(
	    'abbaabbba',
	    [ (r'a((a*)(b*))', 'a followed by 0-n a and 0-n b'),
	     ])

snippet re_groups_noncapturing.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_groups_noncapturing.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Noncapturing groups
	"""
	#end_pymotw_header
	
	from re_test_patterns_groups import test_patterns
	
	test_patterns(
	    'abbaabbba',
	    [ (r'a((a+)|(b+))',     'capturing form'),
	      (r'a((?:a+)|(?:b+))', 'noncapturing'),
	     ])

snippet re_groups.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_groups.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Regular expression grouping
	"""
	#end_pymotw_header
	
	from re_test_patterns import test_patterns
	
	test_patterns(
	    'abbaaabbbbaaaaa',
	    [ ('a(ab)',    'a followed by literal ab'),
	      ('a(a*b*)',  'a followed by 0-n a and 0-n b'),
	      ('a(ab)*',   'a followed by 0-n ab'),
	      ('a(ab)+',   'a followed by 1-n ab'),
	      ])

snippet re_id.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_id.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""ID-based conditional expressions
	"""
	#end_pymotw_header
	
	import re
	
	address = re.compile(
	    '''
	    ^
	
	    # A name is made up of letters, and may include "."
	    # for title abbreviations and middle initials.
	    (?P<name>
	       ([\w.]+\s+)*[\w.]+
	     )?
	    \s*
	
	    # Email addresses are wrapped in angle brackets, but
	    # only if a name is found.
	    (?(name)
	      # remainder wrapped in angle brackets because
	      # there is a name
	      (?P<brackets>(?=(<.*>$)))
	      |
	      # remainder does not include angle brackets without name
	      (?=([^<].*[^>]$))
	     )
	
	    # Only look for a bracket if the look-ahead assertion
	    # found both of them.
	    (?(brackets)<|\s*)
	
	    # The address itself: username@domain.tld
	    (?P<email>
	      [\w\d.+-]+       # username
	      @
	      ([\w\d.]+\.)+    # domain name prefix
	      (com|org|edu)    # limit the allowed top-level domains
	     )
	
	    # Only look for a bracket if the look-ahead assertion
	    # found both of them.
	    (?(brackets)>|\s*)
	
	    $
	    ''',
	    re.UNICODE | re.VERBOSE)
	
	candidates = [
	    u'First Last <first.last@example.com>',
	    u'No Brackets first.last@example.com',
	    u'Open Bracket <first.last@example.com',
	    u'Close Bracket first.last@example.com>',
	    u'no.brackets@example.com',
	    ]
	
	for candidate in candidates:
	    print 'Candidate:', candidate
	    match = address.search(candidate)
	    if match:
	        print '  Match name :', match.groupdict()['name']
	        print '  Match email:', match.groupdict()['email']
	    else:
	        print '  No match'

snippet re_look_ahead.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_look_ahead.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Positive look-ahead assertion
	"""
	#end_pymotw_header
	
	import re
	
	address = re.compile(
	    '''
	    # A name is made up of letters, and may include "."
	    # for title abbreviations and middle initials.
	    ((?P<name>
	       ([\w.,]+\s+)*[\w.,]+
	     )
	     \s+
	    ) # name is no longer optional
	
	    # LOOKAHEAD
	    # Email addresses are wrapped in angle brackets, but only 
	    # if they are both present or neither is.
	    (?= (<.*>$)       # remainder wrapped in angle brackets
	        |
	        ([^<].*[^>]$) # remainder *not* wrapped in angle brackets
	      )
	
	    <? # optional opening angle bracket
	
	    # The address itself: username@domain.tld
	    (?P<email>
	      [\w\d.+-]+       # username
	      @
	      ([\w\d.]+\.)+    # domain name prefix
	      (com|org|edu)    # limit the allowed top-level domains
	    )
	
	    >? # optional closing angle bracket
	    ''',
	    re.UNICODE | re.VERBOSE)
	
	candidates = [
	    u'First Last <first.last@example.com>',
	    u'No Brackets first.last@example.com',
	    u'Open Bracket <first.last@example.com',
	    u'Close Bracket first.last@example.com>',
	    ]
	
	for candidate in candidates:
	    print 'Candidate:', candidate
	    match = address.search(candidate)
	    if match:
	        print '  Name :', match.groupdict()['name']
	        print '  Email:', match.groupdict()['email']
	    else:
	        print '  No match'

snippet re_look_behind.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_look_behind.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Look behind assertion.
	"""
	#end_pymotw_header
	
	import re
	
	twitter = re.compile(
	    '''
	    # A twitter handle: @username
	    (?<=@)
	    ([\w\d_]+)       # username
	    ''',
	    re.UNICODE | re.VERBOSE)
	
	text = '''This text includes two Twitter handles.
	One for @ThePSF, and one for the author, @doughellmann.
	'''
	
	print text
	for match in twitter.findall(text):
	    print 'Handle:', match

snippet re_match.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_match.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Matching vs. searching
	"""
	#end_pymotw_header
	
	import re
	
	text = 'This is some text -- with punctuation.'
	pattern = 'is'
	
	print 'Text   :', text
	print 'Pattern:', pattern
	
	m = re.match(pattern, text)
	print 'Match  :', m
	s = re.search(pattern, text)
	print 'Search :', s

snippet rename_all.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/rename_all.py
	import glob
	import os;
	ret = filter( lambda x: os.path.isdir(x),  glob.glob("*"));
	
	for each in  ret:
	    for each2 in glob.glob("%s/%s_*"%(each,each)):
	        print "mv %s  ./"%(each2)

snippet re_negative_look_ahead.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_negative_look_ahead.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Negative look ahead assertion.
	"""
	#end_pymotw_header
	
	import re
	
	address = re.compile(
	    '''
	    ^
	
	    # An address: username@domain.tld
	
	    # Ignore noreply addresses
	    (?!noreply@.*$)
	
	    [\w\d.+-]+       # username
	    @
	    ([\w\d.]+\.)+    # domain name prefix
	    (com|org|edu)    # limit the allowed top-level domains
	
	    $
	    ''',
	    re.UNICODE | re.VERBOSE)
	
	candidates = [
	    u'first.last@example.com',
	    u'noreply@example.com',
	    ]
	
	for candidate in candidates:
	    print 'Candidate:', candidate
	    match = address.search(candidate)
	    if match:
	        print '  Match:', candidate[match.start():match.end()]
	    else:
	        print '  No match'

snippet re_negative_look_behind.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_negative_look_behind.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Negative look behind assertion.
	"""
	#end_pymotw_header
	
	import re
	
	address = re.compile(
	    '''
	    ^
	
	    # An address: username@domain.tld
	
	    [\w\d.+-]+       # username
	
	    # Ignore noreply addresses
	    (?<!noreply)
	
	    @
	    ([\w\d.]+\.)+    # domain name prefix
	    (com|org|edu)    # limit the allowed top-level domains
	
	    $
	    ''',
	    re.UNICODE | re.VERBOSE)
	
	candidates = [
	    u'first.last@example.com',
	    u'noreply@example.com',
	    ]
	
	for candidate in candidates:
	    print 'Candidate:', candidate
	    match = address.search(candidate)
	    if match:
	        print '  Match:', candidate[match.start():match.end()]
	    else:
	        print '  No match'

snippet re_paragraphs_findall.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_paragraphs_findall.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Splitting input based on a pattern.
	"""
	#end_pymotw_header
	
	import re
	
	text = '''Paragraph one
	on two lines.
	
	Paragraph two.
	
	
	Paragraph three.'''
	
	for num, para in enumerate(re.findall(r'(.+?)\n{2,}',
	                                      text,
	                                      flags=re.DOTALL)
	                           ):
	    print num, repr(para)
	    print

snippet re_refer_to_group.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_refer_to_group.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Find email addresses that match the person's name
	"""
	#end_pymotw_header
	
	import re
	
	address = re.compile(
	    r'''
	
	    # The regular name
	    (\w+)               # first name
	    \s+
	    (([\w.]+)\s+)?      # optional middle name or initial
	    (\w+)               # last name
	
	    \s+
	
	    <
	
	    # The address: first_name.last_name@domain.tld
	    (?P<email>
	      \1               # first name
	      \.
	      \4               # last name
	      @
	      ([\w\d.]+\.)+    # domain name prefix
	      (com|org|edu)    # limit the allowed top-level domains
	    )
	
	    >
	    ''',
	    re.UNICODE | re.VERBOSE | re.IGNORECASE)
	
	candidates = [
	    u'First Last <first.last@example.com>',
	    u'Different Name <first.last@example.com>',
	    u'First Middle Last <first.last@example.com>',
	    u'First M. Last <first.last@example.com>',
	    ]
	
	for candidate in candidates:
	    print 'Candidate:', candidate
	    match = address.search(candidate)
	    if match:
	        print '  Match name :', match.group(1), match.group(4)
	        print '  Match email:', match.group(5)
	    else:
	        print '  No match'

snippet re_refer_to_named_group.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_refer_to_named_group.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Find email addresses that match the person's name
	"""
	#end_pymotw_header
	
	import re
	
	address = re.compile(
	    '''
	
	    # The regular name
	    (?P<first_name>\w+)
	    \s+
	    (([\w.]+)\s+)?      # optional middle name or initial
	    (?P<last_name>\w+)
	
	    \s+
	
	    <
	
	    # The address: first_name.last_name@domain.tld
	    (?P<email>
	      (?P=first_name)
	      \.
	      (?P=last_name)
	      @
	      ([\w\d.]+\.)+    # domain name prefix
	      (com|org|edu)    # limit the allowed top-level domains
	    )
	
	    >
	    ''',
	    re.UNICODE | re.VERBOSE | re.IGNORECASE)
	
	candidates = [
	    u'First Last <first.last@example.com>',
	    u'Different Name <first.last@example.com>',
	    u'First Middle Last <first.last@example.com>',
	    u'First M. Last <first.last@example.com>',
	    ]
	
	for candidate in candidates:
	    print 'Candidate:', candidate
	    match = address.search(candidate)
	    if match:
	        print '  Match name :', match.groupdict()['first_name'],
	        print match.groupdict()['last_name']
	        print '  Match email:', match.groupdict()['email']
	    else:
	        print '  No match'

snippet re_repetition_non_greedy.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_repetition_non_greedy.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Repetition of patterns
	"""
	#end_pymotw_header
	
	from re_test_patterns import test_patterns
	
	test_patterns(
	    'abbaabbba',
	    [ ('ab*?',     'a followed by zero or more b'),
	      ('ab+?',     'a followed by one or more b'),
	      ('ab??',     'a followed by zero or one b'),
	      ('ab{3}?',   'a followed by three b'),
	      ('ab{2,3}?', 'a followed by two to three b'),
	      ])

snippet re_repetition.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_repetition.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Repetition of patterns
	"""
	#end_pymotw_header
	
	from re_test_patterns import test_patterns
	
	test_patterns(
	    'abbaabbba',
	    [ ('ab*',     'a followed by zero or more b'),
	      ('ab+',     'a followed by one or more b'),
	      ('ab?',     'a followed by zero or one b'),
	      ('ab{3}',   'a followed by three b'),
	      ('ab{2,3}', 'a followed by two to three b'),
	      ])

snippet re_search_substring.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_search_substring.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Searching a substring of the input.
	"""
	#end_pymotw_header
	
	import re
	
	text = 'This is some text -- with punctuation.'
	pattern = re.compile(r'\b\w*is\w*\b')
	
	print 'Text:', text
	print
	
	pos = 0
	while True:
	    match = pattern.search(text, pos)
	    if not match:
	        break
	    s = match.start()
	    e = match.end()
	    print '  %2d : %2d = "%s"' % \
	        (s, e-1, text[s:e])
	    # Move forward in text for the next search
	    pos = e
	    

snippet re_simple_compiled.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_simple_compiled.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Simple pattern examples.
	"""
	#end_pymotw_header
	
	import re
	
	# Precompile the patterns
	regexes = [ re.compile(p)
	            for p in [ 'this', 'that' ]
	            ]
	text = 'Does this text match the pattern?'
	
	print 'Text: %r\n' % text
	
	for regex in regexes:
	    print 'Seeking "%s" ->' % regex.pattern,
	
	    if regex.search(text):
	        print 'match!'
	    else:
	        print 'no match'

snippet re_simple_match.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_simple_match.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Match objects.
	"""
	#end_pymotw_header
	
	import re
	
	pattern = 'this'
	text = 'Does this text match the pattern?'
	
	match = re.search(pattern, text)
	
	s = match.start()
	e = match.end()
	
	print 'Found "%s"\nin "%s"\nfrom %d to %d ("%s")' % \
	    (match.re.pattern, match.string, s, e, text[s:e])

snippet re_simple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_simple.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Simple pattern examples.
	"""
	#end_pymotw_header
	
	import re
	
	patterns = [ 'this', 'that' ]
	text = 'Does this text match the pattern?'
	
	print 'Text: %r\n' % text
	
	for pattern in patterns:
	    print 'Seeking "%s" ->' % pattern, 
	
	    if re.search(pattern,  text) is None:
	        print 'no match'
	    else:
	        print 'match!'

snippet resource_getrlimit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/resource_getrlimit.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import resource
	
	print 'Resource limits (soft/hard):'
	for name, desc in [
	    ('RLIMIT_CORE', 'core file size'),
	    ('RLIMIT_CPU',  'CPU time'),
	    ('RLIMIT_FSIZE', 'file size'),
	    ('RLIMIT_DATA', 'heap size'),
	    ('RLIMIT_STACK', 'stack size'),
	    ('RLIMIT_RSS', 'resident set size'),
	    ('RLIMIT_NPROC', 'number of processes'),
	    ('RLIMIT_NOFILE', 'number of open files'),
	    ('RLIMIT_MEMLOCK', 'lockable memory address'),
	    ]:
	    limit_num = getattr(resource, name)
	    soft, hard = resource.getrlimit(limit_num)
	    print '%-23s %s / %s' % (desc, soft, hard)

snippet resource_getrusage.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/resource_getrusage.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import resource
	import time
	
	usage = resource.getrusage(resource.RUSAGE_SELF)
	
	for name, desc in [
	    ('ru_utime', 'User time'),
	    ('ru_stime', 'System time'),
	    ('ru_maxrss', 'Max. Resident Set Size'),
	    ('ru_ixrss', 'Shared Memory Size'),
	    ('ru_idrss', 'Unshared Memory Size'),
	    ('ru_isrss', 'Stack Size'),
	    ('ru_inblock', 'Block inputs'),
	    ('ru_oublock', 'Block outputs'),
	    ]:
	    print '%-25s (%-10s) = %s' % (desc, name, getattr(usage, name))

snippet resource_setrlimit_cpu.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/resource_setrlimit_cpu.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import resource
	import sys
	import signal
	import time
	
	# Set up a signal handler to notify us
	# when we run out of time.
	def time_expired(n, stack):
	    print 'EXPIRED :', time.ctime()
	    raise SystemExit('(time ran out)')
	
	signal.signal(signal.SIGXCPU, time_expired)
	
	# Adjust the CPU time limit
	soft, hard = resource.getrlimit(resource.RLIMIT_CPU)
	print 'Soft limit starts as  :', soft
	
	resource.setrlimit(resource.RLIMIT_CPU, (1, hard))
	
	soft, hard = resource.getrlimit(resource.RLIMIT_CPU)
	print 'Soft limit changed to :', soft
	print
	
	# Consume some CPU time in a pointless exercise
	print 'Starting:', time.ctime()
	for i in range(200000):
	    for i in range(200000):
	        v = i * i
	
	# We should never make it this far
	print 'Exiting :', time.ctime() 
snippet resource_setrlimit_nofile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/resource_setrlimit_nofile.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import resource
	import os
	
	soft, hard = resource.getrlimit(resource.RLIMIT_NOFILE)
	print 'Soft limit starts as  :', soft
	
	resource.setrlimit(resource.RLIMIT_NOFILE, (4, hard))
	
	soft, hard = resource.getrlimit(resource.RLIMIT_NOFILE)
	print 'Soft limit changed to :', soft
	
	random = open('/dev/random', 'r')
	print 'random has fd =', random.fileno()
	try:
	    null = open('/dev/null', 'w')
	except IOError, err:
	    print err
	else:
	    print 'null has fd =', null.fileno()

snippet re_split_groups.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_split_groups.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Splitting input based on a pattern.
	"""
	#end_pymotw_header
	
	import re
	
	text = '''Paragraph one
	on two lines.
	
	Paragraph two.
	
	
	Paragraph three.'''
	
	print 'With split:'
	for num, para in enumerate(re.split(r'(\n{2,})', text)):
	    print num, repr(para)
	    print

snippet re_split.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_split.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Splitting input based on a pattern.
	"""
	#end_pymotw_header
	
	import re
	
	text = '''Paragraph one
	on two lines.
	
	Paragraph two.
	
	
	Paragraph three.'''
	
	print 'With findall:'
	for num, para in enumerate(re.findall(r'(.+?)(\n{2,}|$)',
	                                      text,
	                                      flags=re.DOTALL)):
	    print num, repr(para)
	    print
	
	print
	print 'With split:'
	for num, para in enumerate(re.split(r'\n{2,}', text)):
	    print num, repr(para)
	    print

snippet re_sub_count.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_sub_count.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Substitute based on patterns.
	"""
	#end_pymotw_header
	
	import re
	
	bold = re.compile(r'\*{2}(.*?)\*{2}', re.UNICODE)
	
	text = 'Make this **bold**.  This **too**.'
	
	print 'Text:', text
	print 'Bold:', bold.sub(r'<b>\1</b>', text, count=1)

snippet re_sub_named_groups.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_sub_named_groups.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Substitute based on patterns.
	"""
	#end_pymotw_header
	
	import re
	
	bold = re.compile(r'\*{2}(?P<bold_text>.*?)\*{2}', re.UNICODE)
	
	text = 'Make this **bold**.  This **too**.'
	
	print 'Text:', text
	print 'Bold:', bold.sub(r'<b>\g<bold_text></b>', text)

snippet re_subn.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_subn.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Substitute based on patterns.
	"""
	#end_pymotw_header
	
	import re
	
	bold = re.compile(r'\*{2}(.*?)\*{2}', re.UNICODE)
	
	text = 'Make this **bold**.  This **too**.'
	
	print 'Text:', text
	print 'Bold:', bold.subn(r'<b>\1</b>', text)

snippet re_sub.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_sub.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Substitute based on patterns.
	"""
	#end_pymotw_header
	
	import re
	
	bold = re.compile(r'\*{2}(.*?)\*{2}')
	
	text = 'Make this **bold**.  This **too**.'
	
	print 'Text:', text
	print 'Bold:', bold.sub(r'<b>\1</b>', text)

snippet re_test_patterns_groups.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_test_patterns_groups.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the groups within the matches for a pattern.
	"""
	#end_pymotw_header
	
	import re
	
	def test_patterns(text, patterns=[]):
	    """Given source text and a list of patterns, look for
	    matches for each pattern within the text and print
	    them to stdout.
	    """
	    # Look for each pattern in the text and print the results
	    for pattern, desc in patterns:
	        print 'Pattern %r (%s)\n' % (pattern, desc)
	        print '  %r' % text
	        for match in re.finditer(pattern, text):
	            s = match.start()
	            e = match.end()
	            prefix = ' ' * (s)
	            print '  %s%r%s ' % (prefix, text[s:e], ' '*(len(text)-e)),
	            print match.groups()
	            if match.groupdict():
	                print '%s%s' % (' ' * (len(text)-s), match.groupdict())
	        print
	    return

snippet re_test_patterns.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/re_test_patterns.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show all matches for a list of patterns.
	"""
	#end_pymotw_header
	
	import re
	
	def test_patterns(text, patterns=[]):
	    """Given source text and a list of patterns, look for
	    matches for each pattern within the text and print
	    them to stdout.
	    """
	    # Look for each pattern in the text and print the results
	    for pattern, desc in patterns:
	        print 'Pattern %r (%s)\n' % (pattern, desc)
	        print '  %r' % text
	        for match in re.finditer(pattern, text):
	            s = match.start()
	            e = match.end()
	            substr = text[s:e]
	            n_backslashes = text[:s].count('\\')
	            prefix = '.' * (s + n_backslashes)
	            print '  %s%r' % (prefix, substr)
	        print
	    return
	
	if __name__ == '__main__':
	    test_patterns('abbaaabbbbaaaaa',
	                  [('ab', "'a' followed by 'b'"),
	                   ])

snippet robotparser_longlived.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/robotparser_longlived.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import robotparser
	import time
	import urlparse
	
	AGENT_NAME = 'PyMOTW'
	parser = robotparser.RobotFileParser()
	# Using the local copy
	parser.set_url('robots.txt')
	parser.read()
	parser.modified()
	
	PATHS = [
	    '/',
	    '/PyMOTW/',
	    '/admin/',
	    '/downloads/PyMOTW-1.92.tar.gz',
	    ]
	
	for path in PATHS:
	    age = int(time.time() - parser.mtime())
	    print 'age:', age,
	    if age > 1:
	        print 'rereading robots.txt'
	        parser.read()
	        parser.modified()
	    else:
	        print
	    print '%6s : %s' % (parser.can_fetch(AGENT_NAME, path), path)
	    # Simulate a delay in processing
	    time.sleep(1)
	    print
	    

snippet robotparser_simple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/robotparser_simple.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import robotparser
	import urlparse
	
	AGENT_NAME = 'PyMOTW'
	URL_BASE = 'http://www.doughellmann.com/'
	parser = robotparser.RobotFileParser()
	parser.set_url(urlparse.urljoin(URL_BASE, 'robots.txt'))
	parser.read()
	
	PATHS = [
	    '/',
	    '/PyMOTW/',
	    '/admin/',
	    '/downloads/PyMOTW-1.92.tar.gz',
	    ]
	
	for path in PATHS:
	    print '%6s : %s' % (parser.can_fetch(AGENT_NAME, path), path)
	    url = urlparse.urljoin(URL_BASE, path)
	    print '%6s : %s' % (parser.can_fetch(AGENT_NAME, url), url)
	    print

snippet sched_basic.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sched_basic.py
	#!/usr/bin/env python
	"""Basic sched example
	"""
	#end_pymotw_header
	
	import sched
	import time
	
	scheduler = sched.scheduler(time.time, time.sleep)
	
	def print_event(name, start):
	    now = time.time()
	    elapsed = int(now - start)
	    print 'EVENT: %s elapsed=%s name=%s' % (time.ctime(now),
	                                            elapsed,
	                                            name)
	
	start = time.time()
	print 'START:', time.ctime(start)
	scheduler.enter(2, 1, print_event, ('first', start))
	scheduler.enter(3, 1, print_event, ('second', start))
	
	scheduler.run()

snippet sched_cancel.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sched_cancel.py
	
	"""Basic sched example
	
	"""
	
	__version__ = "$Id$"
	
	import sched
	import threading
	import time
	
	scheduler = sched.scheduler(time.time, time.sleep)
	
	counter = 0
	
	def increment_counter(name):
	    global counter
	    print 'EVENT:', time.ctime(time.time()), name
	    counter += 1
	    print 'NOW:', counter
	
	print 'START:', time.ctime(time.time())
	e1 = scheduler.enter(2, 1, increment_counter, ('E1',))
	e2 = scheduler.enter(3, 1, increment_counter, ('E2',))
	
	t = threading.Thread(target=scheduler.run)
	t.start()
	
	scheduler.cancel(e1)
	
	t.join()
	
	print 'FINAL:', counter

snippet sched_overlap.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sched_overlap.py
	
	"""Overlapping events sched example
	
	"""
	
	__version__ = "$Id$"
	
	import sched
	import time
	
	scheduler = sched.scheduler(time.time, time.sleep)
	
	def long_event(name):
	    print 'BEGIN EVENT :', time.ctime(time.time()), name
	    time.sleep(2)
	    print 'FINISH EVENT:', time.ctime(time.time()), name
	
	print 'START:', time.ctime(time.time())
	scheduler.enter(2, 1, long_event, ('first',))
	scheduler.enter(3, 1, long_event, ('second',))
	
	scheduler.run()

snippet sched_priority.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sched_priority.py
	
	"""Basic sched example
	
	"""
	
	__version__ = "$Id$"
	
	import sched
	import time
	
	scheduler = sched.scheduler(time.time, time.sleep)
	
	def print_event(name):
	    print 'EVENT:', time.ctime(time.time()), name
	
	now = time.time()
	print 'START:', time.ctime(now)
	scheduler.enterabs(now+2, 2, print_event, ('first',))
	scheduler.enterabs(now+2, 1, print_event, ('second',))
	
	scheduler.run()

snippet select_echo_multiclient.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/select_echo_multiclient.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Client half of echo example
	"""
	#end_pymotw_header
	
	import socket
	import sys
	
	messages = [ 'This is the message. ',
	             'It will be sent ',
	             'in parts.',
	             ]
	server_address = ('localhost', 10000)
	
	# Create a TCP/IP socket
	socks = [ socket.socket(socket.AF_INET, socket.SOCK_STREAM),
	          socket.socket(socket.AF_INET, socket.SOCK_STREAM),
	          ]
	
	# Connect the socket to the port where the server is listening
	print >>sys.stderr, 'connecting to %s port %s' % server_address
	for s in socks:
	    s.connect(server_address)
	
	for message in messages:
	
	    # Send messages on both sockets
	    for s in socks:
	        print >>sys.stderr, '%s: sending "%s"' % \
	            (s.getsockname(), message)
	        s.send(message)
	
	    # Read responses on both sockets
	    for s in socks:
	        data = s.recv(1024)
	        print >>sys.stderr, '%s: received "%s"' % \
	            (s.getsockname(), data)
	        if not data:
	            print >>sys.stderr, 'closing socket', s.getsockname()
	            s.close()

snippet select_echo_server.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/select_echo_server.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Server half of echo example.
	"""
	#end_pymotw_header
	
	import select
	import socket
	import sys
	import Queue
	
	# Create a TCP/IP socket
	server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	server.setblocking(0)
	
	# Bind the socket to the port
	server_address = ('localhost', 10000)
	print >>sys.stderr, 'starting up on %s port %s' % server_address
	server.bind(server_address)
	
	# Listen for incoming connections
	server.listen(5)
	
	# Sockets from which we expect to read
	inputs = [ server ]
	
	# Sockets to which we expect to write
	outputs = [ ]
	
	# Outgoing message queues (socket:Queue)
	message_queues = {}
	
	while inputs:
	
	    # Wait for at least one of the sockets to be ready for processing
	    print >>sys.stderr, 'waiting for the next event'
	    readable, writable, exceptional = select.select(inputs,
	                                                    outputs,
	                                                    inputs)
	
	    # Handle inputs
	    for s in readable:
	
	        if s is server:
	            # A "readable" socket is ready to accept a connection
	            connection, client_address = s.accept()
	            print >>sys.stderr, '  connection from', client_address
	            connection.setblocking(0)
	            inputs.append(connection)
	
	            # Give the connection a queue for data we want to send
	            message_queues[connection] = Queue.Queue()
	
	        else:
	            data = s.recv(1024)
	            if data:
	                # A readable client socket has data
	                print >>sys.stderr, '  received "%s" from %s' % \
	                    (data, s.getpeername())
	                message_queues[s].put(data)
	                # Add output channel for response
	                if s not in outputs:
	                    outputs.append(s)
	                    
	            else:
	                # Interpret empty result as closed connection
	                print >>sys.stderr, '  closing', client_address
	                # Stop listening for input on the connection
	                if s in outputs:
	                    outputs.remove(s)
	                inputs.remove(s)
	                s.close()
	
	                # Remove message queue
	                del message_queues[s]
	
	    # Handle outputs
	    for s in writable:
	        try:
	            next_msg = message_queues[s].get_nowait()
	        except Queue.Empty:
	            # No messages waiting so stop checking for writability.
	            print >>sys.stderr, '  ', s.getpeername(), 'queue empty'
	            outputs.remove(s)
	        else:
	            print >>sys.stderr, '  sending "%s" to %s' % \
	                (next_msg, s.getpeername())
	            s.send(next_msg)
	
	    # Handle "exceptional conditions"
	    for s in exceptional:
	        print >>sys.stderr, 'exception condition on', s.getpeername()
	        # Stop listening for input on the connection
	        inputs.remove(s)
	        if s in outputs:
	            outputs.remove(s)
	        s.close()
	
	        # Remove message queue
	        del message_queues[s]

snippet select_echo_server_timeout.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/select_echo_server_timeout.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Server half of echo example.
	"""
	#end_pymotw_header
	
	import select
	import socket
	import sys
	import Queue
	
	# Create a TCP/IP socket
	server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	server.setblocking(0)
	
	# Bind the socket to the port
	server_address = ('localhost', 10000)
	print >>sys.stderr, 'starting up on %s port %s' % server_address
	server.bind(server_address)
	
	# Listen for incoming connections
	server.listen(5)
	
	# Sockets from which we expect to read
	inputs = [ server ]
	
	# Sockets to which we expect to write
	outputs = [ ]
	
	# Keep up with the queues of outgoing messages
	message_queues = {}
	
	while inputs:
	
	    # Wait for at least one of the sockets to be ready for processing
	    print >>sys.stderr, '\nwaiting for the next event'
	    timeout = 1
	    readable, writable, exceptional = select.select(inputs,
	                                                    outputs,
	                                                    inputs,
	                                                    timeout)
	
	    if not (readable or writable or exceptional):
	        print >>sys.stderr, '  timed out, do some other work here'
	        continue
	
	    # Handle inputs
	    for s in readable:
	
	        if s is server:
	            # A "readable" server socket is ready to accept a connection
	            connection, client_address = s.accept()
	            print >>sys.stderr, 'connection from', client_address
	            connection.setblocking(0)
	            inputs.append(connection)
	
	            # Give the connection a queue for data we want to send
	            message_queues[connection] = Queue.Queue()
	
	        else:
	            data = s.recv(1024)
	            if data:
	                # A readable client socket has data
	                print >>sys.stderr, 'received "%s" from %s' % \
	                    (data, s.getpeername())
	                message_queues[s].put(data)
	                # Add output channel for response
	                if s not in outputs:
	                    outputs.append(s)
	                    
	            else:
	                # Interpret empty result as closed connection
	                print >>sys.stderr, 'closing', client_address
	                # Stop listening for input on the connection
	                if s in outputs:
	                    outputs.remove(s)
	                inputs.remove(s)
	                s.close()
	
	                # Remove message queue
	                del message_queues[s]
	
	    # Handle outputs
	    for s in writable:
	        try:
	            next_msg = message_queues[s].get_nowait()
	        except Queue.Empty:
	            # No messages waiting so stop checking for writability.
	            print >>sys.stderr, s.getpeername(), 'queue empty'
	            outputs.remove(s)
	        else:
	            print >>sys.stderr, 'sending "%s" to %s' % \
	                (next_msg, s.getpeername())
	            s.send(next_msg)
	
	    # Handle "exceptional conditions"
	    for s in exceptional:
	        print >>sys.stderr, 'exception condition on', s.getpeername()
	        # Stop listening for input on the connection
	        inputs.remove(s)
	        if s in outputs:
	            outputs.remove(s)
	        s.close()
	
	        # Remove message queue
	        del message_queues[s]

snippet select_echo_slow_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/select_echo_slow_client.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Client half of echo example
	"""
	#end_pymotw_header
	
	import socket
	import sys
	import time
	
	# Create a TCP/IP socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	
	# Connect the socket to the port where the server is listening
	server_address = ('localhost', 10000)
	print >>sys.stderr, 'connecting to %s port %s' % server_address
	sock.connect(server_address)
	
	time.sleep(1)
	
	messages = [ 'Part one of the message.',
	             'Part two of the message.',
	             ]
	amount_expected = len(''.join(messages))
	
	try:
	
	    # Send data
	    for message in messages:
	        print >>sys.stderr, 'sending "%s"' % message
	        sock.sendall(message)
	        time.sleep(1.5)
	
	    # Look for the response
	    amount_received = 0
	    
	    while amount_received < amount_expected:
	        data = sock.recv(16)
	        amount_received += len(data)
	        print >>sys.stderr, 'received "%s"' % data
	
	finally:
	    print >>sys.stderr, 'closing socket'
	    sock.close()

snippet select_poll_echo_server.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/select_poll_echo_server.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Server half of echo example.
	"""
	#end_pymotw_header
	
	import select
	import socket
	import sys
	import Queue
	
	# Create a TCP/IP socket
	server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	server.setblocking(0)
	
	# Bind the socket to the port
	server_address = ('localhost', 10000)
	print >>sys.stderr, 'starting up on %s port %s' % server_address
	server.bind(server_address)
	
	# Listen for incoming connections
	server.listen(5)
	
	# Keep up with the queues of outgoing messages
	message_queues = {}
	
	# Do not block forever (milliseconds)
	TIMEOUT = 1000
	
	# Commonly used flag sets
	READ_ONLY = ( select.POLLIN |
	              select.POLLPRI |
	              select.POLLHUP |
	              select.POLLERR )
	READ_WRITE = READ_ONLY | select.POLLOUT
	
	# Set up the poller
	poller = select.poll()
	poller.register(server, READ_ONLY)
	
	# Map file descriptors to socket objects
	fd_to_socket = { server.fileno(): server,
	               }
	
	while True:
	
	    # Wait for at least one of the sockets to be ready for processing
	    print >>sys.stderr, 'waiting for the next event'
	    events = poller.poll(TIMEOUT)
	
	    for fd, flag in events:
	
	        # Retrieve the actual socket from its file descriptor
	        s = fd_to_socket[fd]
	
	        # Handle inputs
	        if flag & (select.POLLIN | select.POLLPRI):
	
	            if s is server:
	                # A readable socket is ready to accept a connection
	                connection, client_address = s.accept()
	                print >>sys.stderr, '  connection', client_address
	                connection.setblocking(0)
	                fd_to_socket[ connection.fileno() ] = connection
	                poller.register(connection, READ_ONLY)
	
	                # Give the connection a queue for data to send
	                message_queues[connection] = Queue.Queue()
	
	            else:
	                data = s.recv(1024)
	                if data:
	                    # A readable client socket has data
	                    print >>sys.stderr, '  received "%s" from %s' % \
	                        (data, s.getpeername())
	                    message_queues[s].put(data)
	                    # Add output channel for response
	                    poller.modify(s, READ_WRITE)
	
	                else:
	                    # Interpret empty result as closed connection
	                    print >>sys.stderr, '  closing', client_address
	                    # Stop listening for input on the connection
	                    poller.unregister(s)
	                    s.close()
	
	                    # Remove message queue
	                    del message_queues[s]
	
	        elif flag & select.POLLHUP:
	            # Client hung up
	            print >>sys.stderr, '  closing', client_address, '(HUP)'
	            # Stop listening for input on the connection
	            poller.unregister(s)
	            s.close()
	
	        elif flag & select.POLLOUT:
	            # Socket is ready to send data, if there is any to send.
	            try:
	                next_msg = message_queues[s].get_nowait()
	            except Queue.Empty:
	                # No messages waiting so stop checking
	                print >>sys.stderr, s.getpeername(), 'queue empty'
	                poller.modify(s, READ_ONLY)
	            else:
	                print >>sys.stderr, '  sending "%s" to %s' % \
	                    (next_msg, s.getpeername())
	                s.send(next_msg)
	
	        elif flag & select.POLLERR:
	            print >>sys.stderr, '  exception on', s.getpeername()
	            # Stop listening for input on the connection
	            poller.unregister(s)
	            s.close()
	
	            # Remove message queue
	            del message_queues[s]

snippet shelve_create.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shelve_create.py
	#!/usr/bin/env python
	"""Creating a new shelf.
	"""
	#end_pymotw_header
	
	import shelve
	from contextlib import closing
	
	with closing(shelve.open('test_shelf.db')) as s:
	    s['key1'] = { 'int': 10, 'float':9.5, 'string':'Sample data' }

snippet shelve_existing.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shelve_existing.py
	#!/usr/bin/env python
	"""Opening an existing shelf.
	"""
	#end_pymotw_header
	
	import shelve
	from contextlib import closing
	
	with closing(shelve.open('test_shelf.db')) as s:
	    existing = s['key1']
	
	print existing

snippet shelve_readonly.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shelve_readonly.py
	#!/usr/bin/env python
	"""Opening an existing shelf read-only.
	"""
	#end_pymotw_header
	
	import shelve
	from contextlib import closing
	
	with closing(shelve.open('test_shelf.db', flag='r')) as s:
	    existing = s['key1']
	
	print existing

snippet shelve_withoutwriteback.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shelve_withoutwriteback.py
	#!/usr/bin/env python
	"""Modifying an existing shelf opened with write-back enabled.
	"""
	#end_pymotw_header
	
	import shelve
	from contextlib import closing
	
	with closing(shelve.open('test_shelf.db')) as s:
	    print s['key1']
	    s['key1']['new_value'] = 'this was not here before'
	
	with closing(shelve.open('test_shelf.db', writeback=True)) as s:
	    print s['key1']
	

snippet shelve_writeback.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shelve_writeback.py
	#!/usr/bin/env python
	"""Modifying an existing shelf opened with write-back enabled.
	"""
	#end_pymotw_header
	
	import shelve
	import pprint
	from contextlib import closing
	
	with closing(shelve.open('test_shelf.db', writeback=True)) as s:
	    print 'Initial data:'
	    pprint.pprint(s['key1'])
	    
	    s['key1']['new_value'] = 'this was not here before'
	    print '\nModified:'
	    pprint.pprint(s['key1'])
	
	with closing(shelve.open('test_shelf.db', writeback=True)) as s:
	    print '\nPreserved:'
	    pprint.pprint(s['key1'])

snippet shlex_errors.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shlex_errors.py
	#!/usr/bin/env python
	"""Handling parse errors.
	"""
	#end_pymotw_header
	
	import shlex
	
	text = """This line is ok.
	This line has an "unfinished quote.
	This line is ok, too.
	"""
	
	print 'ORIGINAL:', repr(text)
	print
	
	lexer = shlex.shlex(text)
	
	print 'TOKENS:'
	try:
	    for token in lexer:
	        print repr(token)
	except ValueError, err:
	    first_line_of_error = lexer.token.splitlines()[0]
	    print 'ERROR:', lexer.error_leader(), str(err)
	    print 'following "' + first_line_of_error + '"'

snippet shlex_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shlex_example.py
	
	"""Parsing strings with shlex.
	
	"""
	
	__version__ = "$Id$"
	
	import shlex
	import sys
	
	if len(sys.argv) != 2:
	    print 'Please specify one filename on the command line.'
	    sys.exit(1)
	
	filename = sys.argv[1]
	body = file(filename, 'rt').read()
	print 'ORIGINAL:', repr(body)
	print
	
	print 'TOKENS:'
	lexer = shlex.shlex(body)
	for token in lexer:
	    print repr(token)

snippet shlex_posix.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shlex_posix.py
	
	"""Differences between POSIX and non-POSIX parsing.
	
	"""
	
	__version__ = "$Id$"
	
	import shlex
	
	for s in [ 'Do"Not"Separate',
	           '"Do"Separate',
	           'Escaped \e Character not in quotes',
	           'Escaped "\e" Character in double quotes',
	           "Escaped '\e' Character in single quotes",
	           r"Escaped '\'' \"\'\" single quote",
	           r'Escaped "\"" \'\"\' double quote',
	           "\"'Strip extra layer of quotes'\"",
	           ]:
	    print 'ORIGINAL :', repr(s)
	    print 'non-POSIX:',
	
	    non_posix_lexer = shlex.shlex(s, posix=False)
	    try:
	        print repr(list(non_posix_lexer))
	    except ValueError, err:
	        print 'error(%s)' % err
	
	    
	    print 'POSIX    :',
	    posix_lexer = shlex.shlex(s, posix=True)
	    try:
	        print repr(list(posix_lexer))
	    except ValueError, err:
	        print 'error(%s)' % err
	
	    print

snippet shlex_source.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shlex_source.py
	
	"""Including content from other files in the token stream.
	
	"""
	
	__version__ = "$Id$"
	
	import shlex
	
	text = """This text says to source quotes.txt before continuing."""
	print 'ORIGINAL:', repr(text)
	print
	
	lexer = shlex.shlex(text)
	lexer.wordchars += '.'
	lexer.source = 'source'
	
	print 'TOKENS:'
	for token in lexer:
	    print repr(token)

snippet shlex_split.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shlex_split.py
	
	"""Splitting strings with shlex.
	
	"""
	
	__version__ = "$Id$"
	
	import shlex
	
	text = """This text has "quoted parts" inside it."""
	print 'ORIGINAL:', repr(text)
	print
	
	print 'TOKENS:'
	print shlex.split(text)

snippet shlex_table.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shlex_table.py
	
	"""Other uses for the parser.
	
	"""
	
	__version__ = "$Id$"
	
	import shlex
	
	text = """|Col 1||Col 2||Col 3|"""
	print 'ORIGINAL:', repr(text)
	print
	
	lexer = shlex.shlex(text)
	lexer.quotes = '|'
	
	print 'TOKENS:'
	for token in lexer:
	    print repr(token)

snippet shlex_whitespace.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shlex_whitespace.py
	
	"""Parsing strings with shlex.
	
	"""
	
	__version__ = "$Id$"
	
	import shlex
	import sys
	
	if len(sys.argv) != 2:
	    print 'Please specify one filename on the command line.'
	    sys.exit(1)
	
	filename = sys.argv[1]
	body = file(filename, 'rt').read()
	print 'ORIGINAL:', repr(body)
	print
	
	print 'TOKENS:'
	lexer = shlex.shlex(body)
	lexer.whitespace += '.,'
	for token in lexer:
	    print repr(token)

snippet shutil_copy2.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shutil_copy2.py
	
	"""Copying a file
	
	"""
	
	__version__ = "$Id$"
	
	from shutil import *
	import os
	import time
	
	def show_file_info(filename):
	    stat_info = os.stat(filename)
	    print '\tMode    :', stat_info.st_mode
	    print '\tCreated :', time.ctime(stat_info.st_ctime)
	    print '\tAccessed:', time.ctime(stat_info.st_atime)
	    print '\tModified:', time.ctime(stat_info.st_mtime)
	
	os.mkdir('example')
	print 'SOURCE:'
	show_file_info('shutil_copy2.py')
	copy2('shutil_copy2.py', 'example')
	print 'DEST:'
	show_file_info('example/shutil_copy2.py')

snippet shutil_copyfileobj.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shutil_copyfileobj.py
	#!/usr/bin/env python
	"""Copying a file
	"""
	#end_pymotw_header
	
	from shutil import *
	import os
	from StringIO import StringIO
	import sys
	
	class VerboseStringIO(StringIO):
	    def read(self, n=-1):
	        next = StringIO.read(self, n)
	        print 'read(%d) bytes' % n
	        return next
	
	lorem_ipsum = '''Lorem ipsum dolor sit amet, consectetuer adipiscing
	elit.  Vestibulum aliquam mollis dolor. Donec vulputate nunc ut diam.
	Ut rutrum mi vel sem. Vestibulum ante ipsum.'''
	
	print 'Default:'
	input = VerboseStringIO(lorem_ipsum)
	output = StringIO()
	copyfileobj(input, output)
	
	print
	
	print 'All at once:'
	input = VerboseStringIO(lorem_ipsum)
	output = StringIO()
	copyfileobj(input, output, -1)
	
	print
	
	print 'Blocks of 256:'
	input = VerboseStringIO(lorem_ipsum)
	output = StringIO()
	copyfileobj(input, output, 256)

snippet shutil_copyfile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shutil_copyfile.py
	
	"""Copying a file
	
	"""
	
	__version__ = "$Id$"
	
	from shutil import *
	from glob import glob
	
	print 'BEFORE:', glob('shutil_copyfile.*')
	copyfile('shutil_copyfile.py', 'shutil_copyfile.py.copy')
	print 'AFTER:', glob('shutil_copyfile.*')

snippet shutil_copymode.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shutil_copymode.py
	#!/usr/bin/env python
	"""Copying the permissions from one file to another
	"""
	#end_pymotw_header
	
	from shutil import *
	from commands import *
	import os
	
	with open('file_to_change.txt', 'wt') as f:
	    f.write('content')
	os.chmod('file_to_change.txt', 0444)
	
	print 'BEFORE:'
	print getstatus('file_to_change.txt')
	copymode('shutil_copymode.py', 'file_to_change.txt')
	print 'AFTER :'
	print getstatus('file_to_change.txt')

snippet shutil_copy.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shutil_copy.py
	
	"""Copying a file
	
	"""
	
	__version__ = "$Id$"
	
	from shutil import *
	import os
	
	os.mkdir('example')
	print 'BEFORE:', os.listdir('example')
	copy('shutil_copy.py', 'example')
	print 'AFTER:', os.listdir('example')

snippet shutil_copystat.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shutil_copystat.py
	
	"""Copying the meta-data from one file to another
	
	"""
	
	__version__ = "$Id$"
	
	from shutil import *
	import os
	import time
	
	def show_file_info(filename):
	    stat_info = os.stat(filename)
	    print '\tMode    :', stat_info.st_mode
	    print '\tCreated :', time.ctime(stat_info.st_ctime)
	    print '\tAccessed:', time.ctime(stat_info.st_atime)
	    print '\tModified:', time.ctime(stat_info.st_mtime)
	
	with open('file_to_change.txt', 'wt') as f:
	    f.write('content')
	os.chmod('file_to_change.txt', 0444)
	
	print 'BEFORE:'
	show_file_info('file_to_change.txt')
	copystat('shutil_copystat.py', 'file_to_change.txt')
	print 'AFTER:'
	show_file_info('file_to_change.txt')
	

snippet shutil_copytree.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shutil_copytree.py
	
	"""Copying an entire tree of files.
	
	"""
	
	__version__ = "$Id$"
	
	from shutil import *
	from commands import *
	
	print 'BEFORE:'
	print getoutput('ls -rlast /tmp/example')
	copytree('../shutil', '/tmp/example')
	print '\nAFTER:'
	print getoutput('ls -rlast /tmp/example')

snippet shutil_move.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shutil_move.py
	
	"""Copying a file
	
	"""
	
	__version__ = "$Id$"
	
	from shutil import *
	from glob import glob
	
	with open('example.txt', 'wt') as f:
	    f.write('contents')
	
	print 'BEFORE: ', glob('example*')
	move('example.txt', 'example.out')
	print 'AFTER : ', glob('example*')

snippet shutil_rmtree.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/shutil_rmtree.py
	
	"""Remove an entire tree of files.
	
	"""
	
	__version__ = "$Id$"
	
	from shutil import *
	from commands import *
	
	print 'BEFORE:'
	print getoutput('ls -rlast /tmp/example')
	rmtree('/tmp/example')
	print 'AFTER:'
	print getoutput('ls -rlast /tmp/example')

snippet signal_alarm.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/signal_alarm.py
	
	import signal
	import time
	
	
	def receive_alarm(signum, stack):
	    print('Alarm :', time.ctime())
	
	
	# Call receive_alarm in 2 seconds
	signal.signal(signal.SIGALRM, receive_alarm)
	signal.alarm(2)
	
	
	print('Before:', time.ctime())
	time.sleep(4)
	print('After :', time.ctime())

snippet signal_getsignal.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/signal_getsignal.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import signal
	
	def alarm_received(n, stack):
	    return
	
	signal.signal(signal.SIGALRM, alarm_received)
	
	signals_to_names = dict(
	    (getattr(signal, n), n)
	    for n in dir(signal)
	    if n.startswith('SIG') and '_' not in n
	    )
	
	for s, name in sorted(signals_to_names.items()):
	    handler = signal.getsignal(s)
	    if handler is signal.SIG_DFL:
	        handler = 'SIG_DFL'
	    elif handler is signal.SIG_IGN:
	        handler = 'SIG_IGN'
	    print '%-10s (%2d):' % (name, s), handler

snippet signal_ignore.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/signal_ignore.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import signal
	import os
	import time
	
	def do_exit(sig, stack):
	    raise SystemExit('Exiting')
	
	signal.signal(signal.SIGINT, signal.SIG_IGN)
	signal.signal(signal.SIGUSR1, do_exit)
	
	print 'My PID:', os.getpid()
	
	signal.pause()

snippet signal_signal.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/signal_signal.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import signal
	import os
	import time
	
	def receive_signal(signum, stack):
	    print 'Received:', signum
	
	# Register signal handlers
	signal.signal(signal.SIGUSR1, receive_signal)
	signal.signal(signal.SIGUSR2, receive_signal)
	
	# Print the process ID so it can be used with 'kill'
	# to send this program signals.
	print 'My PID is:', os.getpid()
	
	while True:
	    print 'Waiting...'
	    time.sleep(3)

snippet signal_threads_alarm.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/signal_threads_alarm.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import signal
	import time
	import threading
	
	def signal_handler(num, stack):
	    print time.ctime(), 'Alarm in', threading.currentThread().name
	
	signal.signal(signal.SIGALRM, signal_handler)
	
	def use_alarm():
	    t_name = threading.currentThread().name
	    print time.ctime(), 'Setting alarm in', t_name
	    signal.alarm(1)
	    print time.ctime(), 'Sleeping in', t_name
	    time.sleep(3)
	    print time.ctime(), 'Done with sleep in', t_name
	
	# Start a thread that will not receive the signal
	alarm_thread = threading.Thread(target=use_alarm,
	                                name='alarm_thread')
	alarm_thread.start()
	time.sleep(0.1)
	
	# Wait for the thread to see the signal (not going to happen!)
	print time.ctime(), 'Waiting for', alarm_thread.name
	alarm_thread.join()
	
	print time.ctime(), 'Exiting normally'

snippet signal_threads.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/signal_threads.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import signal
	import threading
	import os
	import time
	
	def signal_handler(num, stack):
	    print 'Received signal %d in %s' % \
	        (num, threading.currentThread().name)
	
	signal.signal(signal.SIGUSR1, signal_handler)
	
	def wait_for_signal():
	    print 'Waiting for signal in', threading.currentThread().name
	    signal.pause()
	    print 'Done waiting'
	
	# Start a thread that will not receive the signal
	receiver = threading.Thread(target=wait_for_signal, name='receiver')
	receiver.start()
	time.sleep(0.1)
	
	def send_signal():
	    print 'Sending signal in', threading.currentThread().name
	    os.kill(os.getpid(), signal.SIGUSR1)
	
	sender = threading.Thread(target=send_signal, name='sender')
	sender.start()
	sender.join()
	
	# Wait for the thread to see the signal (not going to happen!)
	print 'Waiting for', receiver.name
	signal.alarm(2)
	receiver.join()

snippet SimpleXMLRPCServer_alternate_name_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_alternate_name_client.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import xmlrpclib
	
	proxy = xmlrpclib.ServerProxy('http://localhost:9000')
	print 'dir():', proxy.dir('/tmp')
	try:
	    print '\nlist_contents():', proxy.list_contents('/tmp')
	except xmlrpclib.Fault as err:
	    print '\nERROR:', err

snippet SimpleXMLRPCServer_alternate_name.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_alternate_name.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from SimpleXMLRPCServer import SimpleXMLRPCServer
	import os
	
	server = SimpleXMLRPCServer(('localhost', 9000))
	
	# Expose a function with an alternate name
	def list_contents(dir_name):
	    return os.listdir(dir_name)
	server.register_function(list_contents, 'dir')
	
	try:
	    print 'Use Control-C to exit'
	    server.serve_forever()
	except KeyboardInterrupt:
	    print 'Exiting' 
snippet SimpleXMLRPCServer_arbitrary_name_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_arbitrary_name_client.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import xmlrpclib
	
	proxy = xmlrpclib.ServerProxy('http://localhost:9000')
	print getattr(proxy, 'multiply args')(5, 5)

snippet SimpleXMLRPCServer_arbitrary_name.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_arbitrary_name.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from SimpleXMLRPCServer import SimpleXMLRPCServer
	
	server = SimpleXMLRPCServer(('localhost', 9000))
	
	def my_function(a, b):
	    return a * b
	server.register_function(my_function, 'multiply args')
	
	try:
	    print 'Use Control-C to exit'
	    server.serve_forever()
	except KeyboardInterrupt:
	    print 'Exiting' 
snippet SimpleXMLRPCServer_dotted_name_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_dotted_name_client.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import xmlrpclib
	
	proxy = xmlrpclib.ServerProxy('http://localhost:9000')
	print 'BEFORE       :', 'EXAMPLE' in proxy.dir.list('/tmp')
	print 'CREATE       :', proxy.dir.create('/tmp/EXAMPLE')
	print 'SHOULD EXIST :', 'EXAMPLE' in proxy.dir.list('/tmp')
	print 'REMOVE       :', proxy.dir.remove('/tmp/EXAMPLE')
	print 'AFTER        :', 'EXAMPLE' in proxy.dir.list('/tmp')

snippet SimpleXMLRPCServer_dotted_name.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_dotted_name.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from SimpleXMLRPCServer import SimpleXMLRPCServer
	import os
	
	server = SimpleXMLRPCServer(('localhost', 9000), allow_none=True)
	
	server.register_function(os.listdir, 'dir.list')
	server.register_function(os.mkdir, 'dir.create')
	server.register_function(os.rmdir, 'dir.remove')
	
	try:
	    print 'Use Control-C to exit'
	    server.serve_forever()
	except KeyboardInterrupt:
	    print 'Exiting' 
snippet SimpleXMLRPCServer_function_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_function_client.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import xmlrpclib
	
	proxy = xmlrpclib.ServerProxy('http://localhost:9000')
	print proxy.list_contents('/tmp')

snippet SimpleXMLRPCServer_function.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_function.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from SimpleXMLRPCServer import SimpleXMLRPCServer
	import logging
	import os
	
	# Set up logging
	logging.basicConfig(level=logging.DEBUG)
	
	server = SimpleXMLRPCServer(('localhost', 9000), logRequests=True)
	
	# Expose a function
	def list_contents(dir_name):
	    logging.debug('list_contents(%s)', dir_name)
	    return os.listdir(dir_name)
	server.register_function(list_contents)
	
	# Start the server
	try:
	    print 'Use Control-C to exit'
	    server.serve_forever()
	except KeyboardInterrupt:
	    print 'Exiting'

snippet SimpleXMLRPCServer_instance_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_instance_client.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import xmlrpclib
	
	proxy = xmlrpclib.ServerProxy('http://localhost:9000')
	print proxy.list('/tmp')

snippet SimpleXMLRPCServer_instance_dotted_names_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_instance_dotted_names_client.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import xmlrpclib
	
	proxy = xmlrpclib.ServerProxy('http://localhost:9000')
	print proxy.dir.list('/tmp')

snippet SimpleXMLRPCServer_instance_dotted_names.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_instance_dotted_names.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from SimpleXMLRPCServer import SimpleXMLRPCServer
	import os
	import inspect
	
	server = SimpleXMLRPCServer(('localhost', 9000), logRequests=True)
	
	class ServiceRoot:
	    pass
	
	class DirectoryService:
	    def list(self, dir_name):
	        return os.listdir(dir_name)
	
	root = ServiceRoot()
	root.dir = DirectoryService()
	
	server.register_instance(root, allow_dotted_names=True)
	
	try:
	    print 'Use Control-C to exit'
	    server.serve_forever()
	except KeyboardInterrupt:
	    print 'Exiting' 
snippet SimpleXMLRPCServer_instance.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_instance.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from SimpleXMLRPCServer import SimpleXMLRPCServer
	import os
	import inspect
	
	server = SimpleXMLRPCServer(('localhost', 9000), logRequests=True)
	
	class DirectoryService:
	    def list(self, dir_name):
	        return os.listdir(dir_name)
	
	server.register_instance(DirectoryService())
	
	try:
	    print 'Use Control-C to exit'
	    server.serve_forever()
	except KeyboardInterrupt:
	    print 'Exiting' 
snippet SimpleXMLRPCServer_instance_with_prefix_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_instance_with_prefix_client.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import xmlrpclib
	
	proxy = xmlrpclib.ServerProxy('http://localhost:9000')
	print 'public():', proxy.prefix.public()
	try:
	    print 'private():', proxy.prefix.private()
	except Exception, err:
	    print '\nERROR:', err
	try:
	    print 'public() without prefix:', proxy.public()
	except Exception, err:
	    print '\nERROR:', err
	

snippet SimpleXMLRPCServer_instance_with_prefix.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_instance_with_prefix.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from SimpleXMLRPCServer import SimpleXMLRPCServer
	import os
	import inspect
	
	server = SimpleXMLRPCServer(('localhost', 9000), logRequests=True)
	
	def expose(f):
	    "Decorator to set exposed flag on a function."
	    f.exposed = True
	    return f
	
	def is_exposed(f):
	    "Test whether another function should be publicly exposed."
	    return getattr(f, 'exposed', False)
	
	class MyService:
	    PREFIX = 'prefix'
	
	    def _dispatch(self, method, params):
	        # Remove our prefix from the method name
	        if not method.startswith(self.PREFIX + '.'):
	            raise Exception('method "%s" is not supported' % method)
	        
	        method_name = method.partition('.')[2]
	        func = getattr(self, method_name)            
	        if not is_exposed(func):
	            raise Exception('method "%s" is not supported' % method)
	        
	        return func(*params)
	
	    @expose
	    def public(self):
	        return 'This is public'
	        
	    def private(self):
	        return 'This is private'
	
	server.register_instance(MyService())
	
	try:
	    print 'Use Control-C to exit'
	    server.serve_forever()
	except KeyboardInterrupt:
	    print 'Exiting' 
snippet SimpleXMLRPCServer_introspection_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_introspection_client.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import xmlrpclib
	
	proxy = xmlrpclib.ServerProxy('http://localhost:9000')
	for method_name in proxy.system.listMethods():
	    print '=' * 60
	    print method_name
	    print '-' * 60
	    print proxy.system.methodHelp(method_name)
	    print
	

snippet SimpleXMLRPCServer_introspection.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SimpleXMLRPCServer_introspection.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	from SimpleXMLRPCServer import ( SimpleXMLRPCServer,
	                                 list_public_methods,
	                                 )
	import os
	import inspect
	
	server = SimpleXMLRPCServer(('localhost', 9000), logRequests=True)
	server.register_introspection_functions()
	
	class DirectoryService:
	    
	    def _listMethods(self):
	        return list_public_methods(self)
	
	    def _methodHelp(self, method):
	        f = getattr(self, method)
	        return inspect.getdoc(f)
	    
	    def list(self, dir_name):
	        """list(dir_name) => [<filenames>]
	        
	        Returns a list containing the contents of
	        the named directory.
	        """
	        return os.listdir(dir_name)
	
	server.register_instance(DirectoryService())
	
	try:
	    print 'Use Control-C to exit'
	    server.serve_forever()
	except KeyboardInterrupt:
	    print 'Exiting'

snippet site_addsitedir.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/site_addsitedir.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Add site import directory containing regular python modules.
	"""
	#end_pymotw_header
	
	import site
	import os
	import sys
	
	script_directory = os.path.dirname(__file__)
	module_directory = os.path.join(script_directory, sys.argv[1])
	
	try:
	    import mymodule
	except ImportError, err:
	    print 'Could not import mymodule:', err
	
	print
	before_len = len(sys.path)
	site.addsitedir(module_directory)
	print 'New paths:'
	for p in sys.path[before_len:]:
	    print p.replace(os.getcwd(), '.') # shorten dirname
	
	print
	import mymodule

snippet site_enable_user_site.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/site_enable_user_site.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Check whether user site directory is enabled.
	"""
	#end_pymotw_header
	
	import site
	
	status = {
	    None:'Disabled for security',
	    True:'Enabled',
	    False:'Disabled by command-line option',
	    }
	
	print 'Flag   :', site.ENABLE_USER_SITE
	print 'Meaning:', status[site.ENABLE_USER_SITE]

snippet site_import_path.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/site_import_path.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""The default import path from site
	"""
	#end_pymotw_header
	
	import sys
	import os
	import platform
	import site
	
	if 'Windows' in platform.platform():
	    SUFFIXES = [
	        '',
	        'lib/site-packages',
	        ]
	else:
	    SUFFIXES = [
	        'lib/python%s/site-packages' % sys.version[:3],
	        'lib/site-python',
	        ]
	
	print 'Path prefixes:'
	for p in site.PREFIXES:
	    print '  ', p
	
	for prefix in sorted(set(site.PREFIXES)):
	    print
	    print prefix
	    for suffix in SUFFIXES:
	        print
	        print ' ', suffix
	        path = os.path.join(prefix, suffix).rstrip(os.sep)
	        print '   exists :', os.path.exists(path)
	        print '   in path:', path in sys.path

snippet site_user_base.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/site_user_base.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the user base directory.
	"""
	#end_pymotw_header
	
	import site
	
	print 'Base:', site.USER_BASE
	print 'Site:', site.USER_SITE

snippet smtpd_custom.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/smtpd_custom.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import smtpd
	import asyncore
	
	class CustomSMTPServer(smtpd.SMTPServer):
	    
	    def process_message(self, peer, mailfrom, rcpttos, data):
	        print 'Receiving message from:', peer
	        print 'Message addressed from:', mailfrom
	        print 'Message addressed to  :', rcpttos
	        print 'Message length        :', len(data)
	        return
	
	server = CustomSMTPServer(('127.0.0.1', 1025), None)
	
	asyncore.loop()

snippet smtpd_debug.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/smtpd_debug.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import smtpd
	import asyncore
	
	server = smtpd.DebuggingServer(('127.0.0.1', 1025), None)
	
	asyncore.loop()

snippet smtpd_proxy.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/smtpd_proxy.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import smtpd
	import asyncore
	
	server = smtpd.PureProxy(('127.0.0.1', 1025), ('mail', 25))
	
	asyncore.loop()

snippet smtpd_senddata.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/smtpd_senddata.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import smtplib
	import email.utils
	from email.mime.text import MIMEText
	
	# Create the message
	msg = MIMEText('This is the body of the message.')
	msg['To'] = email.utils.formataddr(('Recipient',
	                                    'recipient@example.com'))
	msg['From'] = email.utils.formataddr(('Author',
	                                      'author@example.com'))
	msg['Subject'] = 'Simple test message'
	
	server = smtplib.SMTP('127.0.0.1', 1025)
	server.set_debuglevel(True) # show communication with the server
	try:
	    server.sendmail('author@example.com',
	                    ['recipient@example.com'],
	                    msg.as_string())
	finally:
	    server.quit()

snippet smtplib_authenticated.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/smtplib_authenticated.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import smtplib
	import email.utils
	from email.mime.text import MIMEText
	import getpass
	
	# Prompt the user for connection info
	to_email = raw_input('Recipient: ')
	servername = raw_input('Mail server name: ')
	username = raw_input('Mail username: ')
	password = getpass.getpass("%s's password: " % username)
	
	# Create the message
	msg = MIMEText('Test message from PyMOTW.')
	msg.set_unixfrom('author')
	msg['To'] = email.utils.formataddr(('Recipient', to_email))
	msg['From'] = email.utils.formataddr(('Author',
	                                      'author@example.com'))
	msg['Subject'] = 'Test from PyMOTW'
	
	server = smtplib.SMTP(servername)
	try:
	    server.set_debuglevel(True)
	
	    # identify ourselves, prompting server for supported features
	    server.ehlo()
	
	    # If we can encrypt this session, do it
	    if server.has_extn('STARTTLS'):
	        server.starttls()
	        server.ehlo() # reidentify ourselves over TLS connection
	
	    server.login(username, password)
	    server.sendmail('author@example.com',
	                    [to_email],
	                    msg.as_string())
	finally:
	    server.quit()

snippet smtplib_sendmail.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/smtplib_sendmail.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import smtplib
	import email.utils
	from email.mime.text import MIMEText
	
	# Create the message
	msg = MIMEText('This is the body of the message.')
	msg['To'] = email.utils.formataddr(('Recipient',
	                                    'recipient@example.com'))
	msg['From'] = email.utils.formataddr(('Author',
	                                      'author@example.com'))
	msg['Subject'] = 'Simple test message'
	
	server = smtplib.SMTP('mail')
	server.set_debuglevel(True) # show communication with the server
	try:
	    server.sendmail('author@example.com',
	                    ['recipient@example.com'],
	                    msg.as_string())
	finally:
	    server.quit()

snippet smtplib_verify.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/smtplib_verify.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import smtplib
	
	server = smtplib.SMTP('mail')
	server.set_debuglevel(True) # show communication with the server
	try:
	    dhellmann_result = server.verify('dhellmann')
	    notthere_result = server.verify('notthere')
	finally:
	    server.quit()
	
	print 'dhellmann:', dhellmann_result
	print 'notthere :', notthere_result

snippet socket_address_packing.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_address_packing.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Converting between string and binary representations of addresses.
	"""
	#end_pymotw_header
	
	import binascii
	import socket
	import struct
	import sys
	
	for string_address in [ '192.168.1.1', '127.0.0.1' ]:
	    packed = socket.inet_aton(string_address)
	    print 'Original:', string_address
	    print 'Packed  :', binascii.hexlify(packed)
	    print 'Unpacked:', socket.inet_ntoa(packed)
	    print

snippet socket_binary_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_binary_client.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Send binary data
	"""
	#end_pymotw_header
	
	import binascii
	import socket
	import struct
	import sys
	
	# Create a TCP/IP socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	server_address = ('localhost', 10000)
	sock.connect(server_address)
	
	values = (1, 'ab', 2.7)
	packer = struct.Struct('I 2s f')
	packed_data = packer.pack(*values)
	
	print 'values =', values
	
	try:
	    
	    # Send data
	    print >>sys.stderr, 'sending %r' % binascii.hexlify(packed_data)
	    sock.sendall(packed_data)
	
	finally:
	    print >>sys.stderr, 'closing socket'
	    sock.close()

snippet socket_binary_server.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_binary_server.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Receive and unpack binary data
	"""
	#end_pymotw_header
	
	import binascii
	import socket
	import struct
	import sys
	
	# Create a TCP/IP socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	server_address = ('localhost', 10000)
	sock.bind(server_address)
	sock.listen(1)
	
	unpacker = struct.Struct('I 2s f')
	
	while True:
	    print >>sys.stderr, '\nwaiting for a connection'
	    connection, client_address = sock.accept()
	    try:
	        data = connection.recv(unpacker.size)
	        print >>sys.stderr, 'received %r' % binascii.hexlify(data)
	
	        unpacked_data = unpacker.unpack(data)
	        print >>sys.stderr, 'unpacked:', unpacked_data
	        
	    finally:
	        connection.close()

snippet socket_echo_client_dgram.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_echo_client_dgram.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Client half of echo example
	"""
	#end_pymotw_header
	
	import socket
	import sys
	
	# Create a UDP socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	
	server_address = ('localhost', 10000)
	message = 'This is the message.  It will be repeated.'
	
	try:
	
	    # Send data
	    print >>sys.stderr, 'sending "%s"' % message
	    sent = sock.sendto(message, server_address)
	
	    # Receive response
	    print >>sys.stderr, 'waiting to receive'
	    data, server = sock.recvfrom(4096)
	    print >>sys.stderr, 'received "%s"' % data
	
	finally:
	    print >>sys.stderr, 'closing socket'
	    sock.close()

snippet socket_echo_client_easy.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_echo_client_easy.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Client half of echo example
	"""
	#end_pymotw_header
	
	import socket
	import sys
	
	def get_constants(prefix):
	    """Create a dictionary mapping socket module
	    constants to their names.
	    """
	    return dict( (getattr(socket, n), n)
	                 for n in dir(socket)
	                 if n.startswith(prefix)
	                 )
	
	families = get_constants('AF_')
	types = get_constants('SOCK_')
	protocols = get_constants('IPPROTO_')
	
	# Create a TCP/IP socket
	sock = socket.create_connection(('localhost', 10000))
	
	print >>sys.stderr, 'Family  :', families[sock.family]
	print >>sys.stderr, 'Type    :', types[sock.type]
	print >>sys.stderr, 'Protocol:', protocols[sock.proto]
	print >>sys.stderr
	
	try:
	    
	    # Send data
	    message = 'This is the message.  It will be repeated.'
	    print >>sys.stderr, 'sending "%s"' % message
	    sock.sendall(message)
	
	    amount_received = 0
	    amount_expected = len(message)
	    
	    while amount_received < amount_expected:
	        data = sock.recv(16)
	        amount_received += len(data)
	        print >>sys.stderr, 'received "%s"' % data
	
	finally:
	    print >>sys.stderr, 'closing socket'
	    sock.close()

snippet socket_echo_client_explicit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_echo_client_explicit.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Client half of echo example
	"""
	#end_pymotw_header
	
	import socket
	import sys
	
	# Create a TCP/IP socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	
	# Connect the socket to the port on the server given by the caller
	server_address = (sys.argv[1], 10000)
	print >>sys.stderr, 'connecting to %s port %s' % server_address
	sock.connect(server_address)
	
	try:
	    
	    message = 'This is the message.  It will be repeated.'
	    print >>sys.stderr, 'sending "%s"' % message
	    sock.sendall(message)
	
	    amount_received = 0
	    amount_expected = len(message)
	    while amount_received < amount_expected:
	        data = sock.recv(16)
	        amount_received += len(data)
	        print >>sys.stderr, 'received "%s"' % data
	
	finally:
	    sock.close()

snippet socket_echo_client.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_echo_client.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Client half of echo example
	"""
	#end_pymotw_header
	
	import socket
	import sys
	
	# Create a TCP/IP socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	
	# Connect the socket to the port where the server is listening
	server_address = ('localhost', 10000)
	print >>sys.stderr, 'connecting to %s port %s' % server_address
	sock.connect(server_address)
	
	try:
	    
	    # Send data
	    message = 'This is the message.  It will be repeated.'
	    print >>sys.stderr, 'sending "%s"' % message
	    sock.sendall(message)
	
	    # Look for the response
	    amount_received = 0
	    amount_expected = len(message)
	    
	    while amount_received < amount_expected:
	        data = sock.recv(16)
	        amount_received += len(data)
	        print >>sys.stderr, 'received "%s"' % data
	
	finally:
	    print >>sys.stderr, 'closing socket'
	    sock.close()

snippet socket_echo_client_uds.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_echo_client_uds.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Client half of echo example
	"""
	#end_pymotw_header
	
	import socket
	import sys
	
	# Create a UDS socket
	sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	
	# Connect the socket to the port where the server is listening
	server_address = './uds_socket'
	print >>sys.stderr, 'connecting to %s' % server_address
	try:
	    sock.connect(server_address)
	except socket.error, msg:
	    print >>sys.stderr, msg
	    sys.exit(1)
	
	try:
	    
	    # Send data
	    message = 'This is the message.  It will be repeated.'
	    print >>sys.stderr, 'sending "%s"' % message
	    sock.sendall(message)
	
	    amount_received = 0
	    amount_expected = len(message)
	    
	    while amount_received < amount_expected:
	        data = sock.recv(16)
	        amount_received += len(data)
	        print >>sys.stderr, 'received "%s"' % data
	
	finally:
	    print >>sys.stderr, 'closing socket'
	    sock.close()

snippet socket_echo_server_any.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_echo_server_any.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Server half of echo example.
	"""
	#end_pymotw_header
	
	import socket
	import sys
	
	# Create a TCP/IP socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	
	# Bind the socket to the address given on the command line
	server_address = ('', 10000)
	sock.bind(server_address)
	print >>sys.stderr, 'starting up on %s port %s' % sock.getsockname()
	sock.listen(1)
	
	while True:
	    print >>sys.stderr, 'waiting for a connection'
	    connection, client_address = sock.accept()
	    try:
	        print >>sys.stderr, 'client connected:', client_address
	        while True:
	            data = connection.recv(16)
	            print >>sys.stderr, 'received "%s"' % data
	            if data:
	                connection.sendall(data)
	            else:
	                break
	    finally:
	        connection.close()

snippet socket_echo_server_dgram.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_echo_server_dgram.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Echo the data to the client without printing it on the console.
	"""
	#end_pymotw_header
	
	import socket
	import sys
	
	# Create a UDP socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	
	# Bind the socket to the port
	server_address = ('localhost', 10000)
	print >>sys.stderr, 'starting up on %s port %s' % server_address
	sock.bind(server_address)
	
	while True:
	    print >>sys.stderr, '\nwaiting to receive message'
	    data, address = sock.recvfrom(4096)
	    
	    print >>sys.stderr, 'received %s bytes from %s' % \
	        (len(data), address)
	    print >>sys.stderr, data
	    
	    if data:
	        sent = sock.sendto(data, address)
	        print >>sys.stderr, 'sent %s bytes back to %s' % \
	            (sent, address)

snippet socket_echo_server_explicit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_echo_server_explicit.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Server half of echo example.
	"""
	#end_pymotw_header
	
	import socket
	import sys
	
	# Create a TCP/IP socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	
	# Bind the socket to the address given on the command line
	server_name = sys.argv[1]
	server_address = (server_name, 10000)
	print >>sys.stderr, 'starting up on %s port %s' % server_address
	sock.bind(server_address)
	sock.listen(1)
	
	while True:
	    print >>sys.stderr, 'waiting for a connection'
	    connection, client_address = sock.accept()
	    try:
	        print >>sys.stderr, 'client connected:', client_address
	        while True:
	            data = connection.recv(16)
	            print >>sys.stderr, 'received "%s"' % data
	            if data:
	                connection.sendall(data)
	            else:
	                break
	    finally:
	        connection.close()

snippet socket_echo_server.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_echo_server.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Server half of echo example.
	"""
	#end_pymotw_header
	
	import socket
	import sys
	
	# Create a TCP/IP socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	
	# Bind the socket to the port
	server_address = ('localhost', 10000)
	print >>sys.stderr, 'starting up on %s port %s' % server_address
	sock.bind(server_address)
	
	# Listen for incoming connections
	sock.listen(1)
	
	while True:
	    # Wait for a connection
	    print >>sys.stderr, 'waiting for a connection'
	    connection, client_address = sock.accept()
	    try:
	        print >>sys.stderr, 'connection from', client_address
	
	        # Receive the data in small chunks and retransmit it
	        while True:
	            data = connection.recv(16)
	            print >>sys.stderr, 'received "%s"' % data
	            if data:
	                print >>sys.stderr, 'sending data back to the client'
	                connection.sendall(data)
	            else:
	                print >>sys.stderr, 'no data from', client_address
	                break
	            
	    finally:
	        # Clean up the connection
	        connection.close()

snippet socket_echo_server_uds.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_echo_server_uds.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Server half of echo example, using Unix domain sockets
	"""
	#end_pymotw_header
	
	import socket
	import sys
	import os
	
	server_address = './uds_socket'
	
	# Make sure the socket does not already exist
	try:
	    os.unlink(server_address)
	except OSError:
	    if os.path.exists(server_address):
	        raise
	
	# Create a UDS socket
	sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	
	# Bind the socket to the address
	print >>sys.stderr, 'starting up on %s' % server_address
	sock.bind(server_address)
	
	# Listen for incoming connections
	sock.listen(1)
	
	while True:
	    # Wait for a connection
	    print >>sys.stderr, 'waiting for a connection'
	    connection, client_address = sock.accept()
	    try:
	        print >>sys.stderr, 'connection from', client_address
	
	        # Receive the data in small chunks and retransmit it
	        while True:
	            data = connection.recv(16)
	            print >>sys.stderr, 'received "%s"' % data
	            if data:
	                print >>sys.stderr, 'sending data back to the client'
	                connection.sendall(data)
	            else:
	                print >>sys.stderr, 'no data from', client_address
	                break
	            
	    finally:
	        # Clean up the connection
	        connection.close()
	        

snippet socket_getaddrinfo_extra_args.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_getaddrinfo_extra_args.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Get address info for a service
	"""
	#end_pymotw_header
	
	import socket
	
	def get_constants(prefix):
	    """Create a dictionary mapping socket module
	    constants to their names.
	    """
	    return dict( (getattr(socket, n), n)
	                 for n in dir(socket)
	                 if n.startswith(prefix)
	                 )
	
	families = get_constants('AF_')
	types = get_constants('SOCK_')
	protocols = get_constants('IPPROTO_')
	
	for response in socket.getaddrinfo('www.doughellmann.com', 'http',
	                                   socket.AF_INET,      # family
	                                   socket.SOCK_STREAM,  # socktype
	                                   socket.IPPROTO_TCP,  # protocol
	                                   socket.AI_CANONNAME, # flags
	                                   ):
	    
	    # Unpack the response tuple
	    family, socktype, proto, canonname, sockaddr = response
	
	    print 'Family        :', families[family]
	    print 'Type          :', types[socktype]
	    print 'Protocol      :', protocols[proto]
	    print 'Canonical name:', canonname
	    print 'Socket address:', sockaddr
	    print 

snippet socket_getaddrinfo.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_getaddrinfo.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Get address info for a service
	"""
	#end_pymotw_header
	
	import socket
	
	def get_constants(prefix):
	    """Create a dictionary mapping socket module
	    constants to their names.
	    """
	    return dict( (getattr(socket, n), n)
	                 for n in dir(socket)
	                 if n.startswith(prefix)
	                 )
	
	families = get_constants('AF_')
	types = get_constants('SOCK_')
	protocols = get_constants('IPPROTO_')
	
	for response in socket.getaddrinfo('www.python.org', 'http'):
	
	    # Unpack the response tuple
	    family, socktype, proto, canonname, sockaddr = response
	
	    print 'Family        :', families[family]
	    print 'Type          :', types[socktype]
	    print 'Protocol      :', protocols[proto]
	    print 'Canonical name:', canonname
	    print 'Socket address:', sockaddr
	    print 

snippet socket_getfqdn.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_getfqdn.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Look up the fully qualified domain name for a host.
	"""
	#end_pymotw_header
	
	import socket
	
	for host in [ 'homer', 'www' ]:
	    print '%6s : %s' % (host, socket.getfqdn(host))

snippet socket_gethostbyaddr.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_gethostbyaddr.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Look up a hostname from its address.
	"""
	#end_pymotw_header
	
	import socket
	
	hostname, aliases, addresses = socket.gethostbyaddr('192.168.1.8')
	
	print 'Hostname :', hostname
	print 'Aliases  :', aliases
	print 'Addresses:', addresses

snippet socket_gethostbyname_ex.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_gethostbyname_ex.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Convert hostname to IP address.
	"""
	#end_pymotw_header
	
	import socket
	
	for host in [ 'homer', 'www', 'www.python.org', 'nosuchname' ]:
	    print host
	    try:
	        hostname, aliases, addresses = socket.gethostbyname_ex(host)
	        print '  Hostname:', hostname
	        print '  Aliases :', aliases
	        print ' Addresses:', addresses
	    except socket.error as msg:
	        print 'ERROR:', msg
	    print

snippet socket_gethostbyname.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_gethostbyname.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Convert hostname to IP address.
	"""
	#end_pymotw_header
	
	import socket
	
	for host in [ 'homer', 'www', 'www.python.org', 'nosuchname' ]:
	    try:
	        print '%s : %s' % (host, socket.gethostbyname(host))
	    except socket.error, msg:
	        print '%s : %s' % (host, msg)

snippet socket_gethostname.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_gethostname.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Look up the name of the current host
	"""
	#end_pymotw_header
	
	import socket
	
	print socket.gethostname()

snippet socket_getprotobyname.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_getprotobyname.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Lookup the constant for a named protocol.
	"""
	#end_pymotw_header
	
	import socket
	
	def get_constants(prefix):
	    """Create a dictionary mapping socket module
	    constants to their names.
	    """
	    return dict( (getattr(socket, n), n)
	                 for n in dir(socket)
	                 if n.startswith(prefix)
	                 )
	
	protocols = get_constants('IPPROTO_')
	
	for name in [ 'icmp', 'udp', 'tcp' ]:
	    proto_num = socket.getprotobyname(name)
	    const_name = protocols[proto_num]
	    print '%4s -> %2d (socket.%-12s = %2d)' % \
	        (name, proto_num, const_name, getattr(socket, const_name))

snippet socket_getservbyname.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_getservbyname.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Look up port numbers for a service by name.
	"""
	#end_pymotw_header
	
	import socket
	from urlparse import urlparse
	
	for url in [ 'http://www.python.org',
	             'https://www.mybank.com',
	             'ftp://prep.ai.mit.edu',
	             'gopher://gopher.micro.umn.edu',
	             'smtp://mail.example.com',
	             'imap://mail.example.com',
	             'imaps://mail.example.com',
	             'pop3://pop.example.com',
	             'pop3s://pop.example.com',
	             ]:
	    parsed_url = urlparse(url)
	    port = socket.getservbyname(parsed_url.scheme)
	    print '%6s : %s' % (parsed_url.scheme, port)

snippet socket_getservbyport.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_getservbyport.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Look up a service name by its port number.
	"""
	#end_pymotw_header
	
	import socket
	import urlparse
	
	for port in [ 80, 443, 21, 70, 25, 143, 993, 110, 995 ]:
	    print urlparse.urlunparse(
	        (socket.getservbyport(port), 'example.com', '/', '', '', '')
	        )

snippet socket_ipv6_address_packing.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_ipv6_address_packing.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Converting between string and binary representations of addresses.
	"""
	#end_pymotw_header
	
	import binascii
	import socket
	import struct
	import sys
	
	string_address = '2002:ac10:10a:1234:21e:52ff:fe74:40e'
	packed = socket.inet_pton(socket.AF_INET6, string_address)
	
	print 'Original:', string_address
	print 'Packed  :', binascii.hexlify(packed)
	print 'Unpacked:', socket.inet_ntop(socket.AF_INET6, packed)

snippet socket_multicast_receiver.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_multicast_receiver.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Receive multicast messages.
	"""
	#end_pymotw_header
	
	import socket
	import struct
	import sys
	
	multicast_group = '224.3.29.71'
	server_address = ('', 10000)
	
	# Create the socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	
	# Bind to the server address
	sock.bind(server_address)
	
	# Tell the operating system to add the socket to the multicast group
	# on all interfaces.
	group = socket.inet_aton(multicast_group)
	mreq = struct.pack('4sL', group, socket.INADDR_ANY)
	sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
	
	# Receive/respond loop
	while True:
	    print >>sys.stderr, '\nwaiting to receive message'
	    data, address = sock.recvfrom(1024)
	    
	    print >>sys.stderr, 'received %s bytes from %s' % \
	        (len(data), address)
	    print >>sys.stderr, data
	
	    print >>sys.stderr, 'sending acknowledgement to', address
	    sock.sendto('ack', address)

snippet socket_multicast_sender.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_multicast_sender.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Sending multicast messages.
	"""
	#end_pymotw_header
	
	import socket
	import struct
	import sys
	
	message = 'very important data'
	multicast_group = ('224.3.29.71', 10000)
	
	# Create the datagram socket
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	
	# Set a timeout so the socket does not block indefinitely when trying
	# to receive data.
	sock.settimeout(0.2)
	
	# Set the time-to-live for messages to 1 so they do not go past the
	# local network segment.
	ttl = struct.pack('b', 1)
	sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl)
	
	try:
	
	    # Send data to the multicast group
	    print >>sys.stderr, 'sending "%s"' % message
	    sent = sock.sendto(message, multicast_group)
	
	    # Look for responses from all recipients
	    while True:
	        print >>sys.stderr, 'waiting to receive'
	        try:
	            data, server = sock.recvfrom(16)
	        except socket.timeout:
	            print >>sys.stderr, 'timed out, no more responses'
	            break
	        else:
	            print >>sys.stderr, 'received "%s" from %s' % \
	                (data, server)
	
	finally:
	    print >>sys.stderr, 'closing socket'
	    sock.close()

snippet SocketServer_echo.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SocketServer_echo.py
	#!/usr/bin/env python
	"""Echo server example for SocketServer
	"""
	#end_pymotw_header
	
	import logging
	import sys
	import SocketServer
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='%(name)s: %(message)s',
	                    )
	
	class EchoRequestHandler(SocketServer.BaseRequestHandler):
	    
	    def __init__(self, request, client_address, server):
	        self.logger = logging.getLogger('EchoRequestHandler')
	        self.logger.debug('__init__')
	        SocketServer.BaseRequestHandler.__init__(self, request,
	                                                 client_address,
	                                                 server)
	        return
	
	    def setup(self):
	        self.logger.debug('setup')
	        return SocketServer.BaseRequestHandler.setup(self)
	
	    def handle(self):
	        self.logger.debug('handle')
	
	        # Echo the back to the client
	        data = self.request.recv(1024)
	        self.logger.debug('recv()->"%s"', data)
	        self.request.send(data)
	        return
	
	    def finish(self):
	        self.logger.debug('finish')
	        return SocketServer.BaseRequestHandler.finish(self)
	
	class EchoServer(SocketServer.TCPServer):
	    
	    def __init__(self, server_address,
	                 handler_class=EchoRequestHandler,
	                 ):
	        self.logger = logging.getLogger('EchoServer')
	        self.logger.debug('__init__')
	        SocketServer.TCPServer.__init__(self, server_address,
	                                        handler_class)
	        return
	
	    def server_activate(self):
	        self.logger.debug('server_activate')
	        SocketServer.TCPServer.server_activate(self)
	        return
	
	    def serve_forever(self, poll_interval=0.5):
	        self.logger.debug('waiting for request')
	        self.logger.info('Handling requests, press <Ctrl-C> to quit')
	        SocketServer.TCPServer.serve_forever(self, poll_interval)
	        return
	
	    def handle_request(self):
	        self.logger.debug('handle_request')
	        return SocketServer.TCPServer.handle_request(self)
	
	    def verify_request(self, request, client_address):
	        self.logger.debug('verify_request(%s, %s)',
	                          request, client_address)
	        return SocketServer.TCPServer.verify_request(self, request,
	                                                     client_address)
	
	    def process_request(self, request, client_address):
	        self.logger.debug('process_request(%s, %s)',
	                          request, client_address)
	        return SocketServer.TCPServer.process_request(self, request,
	                                                      client_address)
	
	    def server_close(self):
	        self.logger.debug('server_close')
	        return SocketServer.TCPServer.server_close(self)
	
	    def finish_request(self, request, client_address):
	        self.logger.debug('finish_request(%s, %s)',
	                          request, client_address)
	        return SocketServer.TCPServer.finish_request(self, request,
	                                                     client_address)
	
	    def close_request(self, request_address):
	        self.logger.debug('close_request(%s)', request_address)
	        return SocketServer.TCPServer.close_request(self,
	                                                    request_address)
	    
	    def shutdown(self):
	        self.logger.debug('shutdown()')
	        return SocketServer.TCPServer.shutdown(self)
	        
	
	if __name__ == '__main__':
	    import socket
	    import threading
	
	    address = ('localhost', 0) # let the kernel assign a port
	    server = EchoServer(address, EchoRequestHandler)
	    ip, port = server.server_address # what port was assigned?
	
	    # Start the server in a thread
	    t = threading.Thread(target=server.serve_forever)
	    t.setDaemon(True) # don't hang on exit
	    t.start()
	
	    logger = logging.getLogger('client')
	    logger.info('Server on %s:%s', ip, port)
	
	    # Connect to the server
	    logger.debug('creating socket')
	    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	    logger.debug('connecting to server')
	    s.connect((ip, port))
	
	    # Send the data
	    message = 'Hello, world'
	    logger.debug('sending data: "%s"', message)
	    len_sent = s.send(message)
	
	    # Receive a response
	    logger.debug('waiting for response')
	    response = s.recv(len_sent)
	    logger.debug('response from server: "%s"', response)
	
	    # Clean up
	    server.shutdown()
	    logger.debug('closing socket')
	    s.close()
	    logger.debug('done')
	    server.socket.close()

snippet SocketServer_echo_simple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SocketServer_echo_simple.py
	#!/usr/bin/env python
	"""Echo server example for SocketServer
	"""
	#end_pymotw_header
	
	import SocketServer
	
	class EchoRequestHandler(SocketServer.BaseRequestHandler):
	
	    def handle(self):
	        # Echo the back to the client
	        data = self.request.recv(1024)
	        self.request.send(data)
	        return
	
	if __name__ == '__main__':
	    import socket
	    import threading
	
	    address = ('localhost', 0) # let the kernel assign a port
	    server = SocketServer.TCPServer(address, EchoRequestHandler)
	    ip, port = server.server_address # what port was assigned?
	
	    t = threading.Thread(target=server.serve_forever)
	    t.setDaemon(True) # don't hang on exit
	    t.start()
	
	    # Connect to the server
	    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	    s.connect((ip, port))
	
	    # Send the data
	    message = 'Hello, world'
	    print 'Sending : "%s"' % message
	    len_sent = s.send(message)
	
	    # Receive a response
	    response = s.recv(len_sent)
	    print 'Received: "%s"' % response
	
	    # Clean up
	    server.shutdown()
	    s.close()
	    server.socket.close()

snippet SocketServer_forking.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SocketServer_forking.py
	#!/usr/bin/env python
	"""Echo server example for SocketServer
	"""
	#end_pymotw_header
	
	import os
	import SocketServer
	
	class ForkingEchoRequestHandler(SocketServer.BaseRequestHandler):
	
	    def handle(self):
	        # Echo the back to the client
	        data = self.request.recv(1024)
	        cur_pid = os.getpid()
	        response = '%s: %s' % (cur_pid, data)
	        self.request.send(response)
	        return
	
	class ForkingEchoServer(SocketServer.ForkingMixIn,
	                        SocketServer.TCPServer,
	                        ):
	    pass
	
	if __name__ == '__main__':
	    import socket
	    import threading
	
	    address = ('localhost', 0) # let the kernel assign a port
	    server = ForkingEchoServer(address, ForkingEchoRequestHandler)
	    ip, port = server.server_address # what port was assigned?
	
	    t = threading.Thread(target=server.serve_forever)
	    t.setDaemon(True) # don't hang on exit
	    t.start()
	    print 'Server loop running in process:', os.getpid()
	
	    # Connect to the server
	    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	    s.connect((ip, port))
	
	    # Send the data
	    message = 'Hello, world'
	    print 'Sending : "%s"' % message
	    len_sent = s.send(message)
	
	    # Receive a response
	    response = s.recv(1024)
	    print 'Received: "%s"' % response
	
	    # Clean up
	    server.shutdown()
	    s.close()
	    server.socket.close()

snippet SocketServer_threaded.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/SocketServer_threaded.py
	#!/usr/bin/env python
	"""Echo server example for SocketServer
	"""
	#end_pymotw_header
	
	import threading
	import SocketServer
	
	class ThreadedEchoRequestHandler(SocketServer.BaseRequestHandler):
	
	    def handle(self):
	        # Echo the back to the client
	        data = self.request.recv(1024)
	        cur_thread = threading.currentThread()
	        response = '%s: %s' % (cur_thread.getName(), data)
	        self.request.send(response)
	        return
	
	class ThreadedEchoServer(SocketServer.ThreadingMixIn,
	                         SocketServer.TCPServer,
	                         ):
	    pass
	
	if __name__ == '__main__':
	    import socket
	    import threading
	
	    address = ('localhost', 0) # let the kernel assign a port
	    server = ThreadedEchoServer(address, ThreadedEchoRequestHandler)
	    ip, port = server.server_address # what port was assigned?
	
	    t = threading.Thread(target=server.serve_forever)
	    t.setDaemon(True) # don't hang on exit
	    t.start()
	    print 'Server loop running in thread:', t.getName()
	
	    # Connect to the server
	    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	    s.connect((ip, port))
	
	    # Send the data
	    message = 'Hello, world'
	    print 'Sending : "%s"' % message
	    len_sent = s.send(message)
	
	    # Receive a response
	    response = s.recv(1024)
	    print 'Received: "%s"' % response
	
	    # Clean up
	    server.shutdown()
	    s.close()
	    server.socket.close()

snippet socket_socketpair.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/socket_socketpair.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Parent/child communication through a socket pair.
	"""
	#end_pymotw_header
	
	import socket
	import os
	
	parent, child = socket.socketpair()
	
	pid = os.fork()
	
	if pid:
	    print 'in parent, sending message'
	    child.close()
	    parent.sendall('ping')
	    response = parent.recv(1024)
	    print 'response from child:', response
	    parent.close()
	
	else:
	    print 'in child, waiting for message'
	    parent.close()
	    message = child.recv(1024)
	    print 'message from parent:', message
	    child.sendall('pong')
	    child.close()

snippet sqlite3_argument_named.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_argument_named.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Query tasks in the database.
	"""
	#end_pymotw_header
	
	import sqlite3
	import sys
	
	db_filename = 'todo.db'
	project_name = sys.argv[1]
	
	with sqlite3.connect(db_filename) as conn:
	    cursor = conn.cursor()
	
	    query = """select id, priority, details, status, deadline from task
	            where project = :project_name
	            order by deadline, priority
	            """
	
	    cursor.execute(query, {'project_name':project_name})
	
	    for row in cursor.fetchall():
	        task_id, priority, details, status, deadline = row
	        print '%2d {%d} %-25s [%-8s] (%s)' % (\
	            task_id, priority, details, status, deadline)

snippet sqlite3_argument_positional.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_argument_positional.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Query tasks in the database.
	"""
	#end_pymotw_header
	
	import sqlite3
	import sys
	
	db_filename = 'todo.db'
	project_name = sys.argv[1]
	
	with sqlite3.connect(db_filename) as conn:
	    cursor = conn.cursor()
	
	    query = """select id, priority, details, status, deadline from task
	            where project = ?
	            """
	
	    cursor.execute(query, (project_name,))
	
	    for row in cursor.fetchall():
	        task_id, priority, details, status, deadline = row
	        print '%2d {%d} %-20s [%-8s] (%s)' % (
	            task_id, priority, details, status, deadline)

snippet sqlite3_argument_update.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_argument_update.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Update the status of a task
	"""
	#end_pymotw_header
	
	import sqlite3
	import sys
	
	db_filename = 'todo.db'
	id = int(sys.argv[1])
	status = sys.argv[2]
	
	with sqlite3.connect(db_filename) as conn:
	    cursor = conn.cursor()
	    query = "update task set status = :status where id = :id"
	    cursor.execute(query, {'status':status, 'id':id})

snippet sqlite3_autocommit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_autocommit.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Illustrate the effect of autocommit mode.
	"""
	#end_pymotw_header
	
	import logging
	import sqlite3
	import sys
	import threading
	import time
	
	logging.basicConfig(
	    level=logging.DEBUG,
	    format='%(asctime)s (%(threadName)-10s) %(message)s',
	    )
	
	db_filename = 'todo.db'
	isolation_level = None # autocommit mode
	
	def writer():
	    my_name = threading.currentThread().name
	    with sqlite3.connect(db_filename,
	                         isolation_level=isolation_level) as conn:
	        cursor = conn.cursor()
	        cursor.execute('update task set priority = priority + 1')
	        logging.debug('waiting to synchronize')
	        ready.wait() # synchronize threads
	        logging.debug('PAUSING')
	        time.sleep(1)
	    return
	
	def reader():
	    my_name = threading.currentThread().name
	    with sqlite3.connect(db_filename,
	                         isolation_level=isolation_level) as conn:
	        cursor = conn.cursor()
	        logging.debug('waiting to synchronize')
	        ready.wait() # synchronize threads
	        logging.debug('wait over')
	        cursor.execute('select * from task')
	        logging.debug('SELECT EXECUTED')
	        results = cursor.fetchall()
	        logging.debug('results fetched')
	    return
	
	if __name__ == '__main__':
	    ready = threading.Event()
	
	    threads = [
	        threading.Thread(name='Reader 1', target=reader),
	        threading.Thread(name='Reader 2', target=reader),
	        threading.Thread(name='Writer 1', target=writer),
	        threading.Thread(name='Writer 2', target=writer),
	        ]
	    
	    [ t.start() for t in threads ]
	    
	    time.sleep(1)
	    logging.debug('setting ready')
	    ready.set()
	
	    [ t.join() for t in threads ]

snippet sqlite3_create_aggregate.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_create_aggregate.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Define a new aggregator function.
	"""
	#end_pymotw_header
	
	import sqlite3
	import collections
	
	db_filename = 'todo.db'
	
	class Mode(object):
	    def __init__(self):
	        self.counter = collections.Counter()
	    def step(self, value):
	        print 'step(%r)' % value
	        self.counter[value] += 1
	    def finalize(self):
	        result, count = self.counter.most_common(1)[0]
	        print 'finalize() -> %r (%d times)' % (result, count)
	        return result
	
	with sqlite3.connect(db_filename) as conn:
	
	    conn.create_aggregate('mode', 1, Mode)
	    
	    cursor = conn.cursor()
	    cursor.execute("""
	    select mode(deadline) from task where project = 'pymotw'
	    """)
	    row = cursor.fetchone()
	    print 'mode(deadline) is:', row[0]

snippet sqlite3_create_collation.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_create_collation.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Sorting a custom type.
	"""
	#end_pymotw_header
	
	import sqlite3
	try:
	    import cPickle as pickle
	except:
	    import pickle
	
	db_filename = 'todo.db'
	
	def adapter_func(obj):
	    return pickle.dumps(obj)
	
	def converter_func(data):
	    return pickle.loads(data)
	
	class MyObj(object):
	    def __init__(self, arg):
	        self.arg = arg
	    def __str__(self):
	        return 'MyObj(%r)' % self.arg
	    def __cmp__(self, other):
	        return cmp(self.arg, other.arg)
	
	# Register the functions for manipulating the type.
	sqlite3.register_adapter(MyObj, adapter_func)
	sqlite3.register_converter("MyObj", converter_func)
	
	def collation_func(a, b):
	    a_obj = converter_func(a)
	    b_obj = converter_func(b)
	    print 'collation_func(%s, %s)' % (a_obj, b_obj)
	    return cmp(a_obj, b_obj)
	
	with sqlite3.connect(db_filename,
	                     detect_types=sqlite3.PARSE_DECLTYPES,
	                     ) as conn:
	    # Define the collation
	    conn.create_collation('unpickle', collation_func)
	
	    # Clear the table and insert new values
	    conn.execute('delete from obj')
	    conn.executemany('insert into obj (data) values (?)',
	                     [(MyObj(x),) for x in xrange(5, 0, -1)],
	                     )
	
	    # Query the database for the objects just saved
	    print 'Querying:'
	    cursor = conn.cursor()
	    cursor.execute("""
	    select id, data from obj order by data collate unpickle
	    """)
	    for obj_id, obj in cursor.fetchall():
	        print obj_id, obj

snippet sqlite3_createdb.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_createdb.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating an sqlite3 database.
	"""
	#end_pymotw_header
	
	import os
	import sqlite3
	
	db_filename = 'todo.db'
	
	db_is_new = not os.path.exists(db_filename)
	
	conn = sqlite3.connect(db_filename)
	
	if db_is_new:
	    print 'Need to create schema'
	else:
	    print 'Database exists, assume schema does, too.'
	
	conn.close()

snippet sqlite3_create_function.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_create_function.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating functions to run in SQL statements.
	"""
	#end_pymotw_header
	
	import sqlite3
	
	db_filename = 'todo.db'
	
	def encrypt(s):
	    print 'Encrypting %r' % s
	    return s.encode('rot-13')
	
	def decrypt(s):
	    print 'Decrypting %r' % s
	    return s.encode('rot-13')
	
	
	with sqlite3.connect(db_filename) as conn:
	
	    conn.create_function('encrypt', 1, encrypt)
	    conn.create_function('decrypt', 1, decrypt)
	    cursor = conn.cursor()
	
	    # Raw values
	    print 'Original values:'
	    query = "select id, details from task"
	    cursor.execute(query)
	    for row in cursor.fetchall():
	        print row
	
	    print '\nEncrypting...'
	    query = "update task set details = encrypt(details)"
	    cursor.execute(query)
	    
	    print '\nRaw encrypted values:'
	    query = "select id, details from task"
	    cursor.execute(query)
	    for row in cursor.fetchall():
	        print row
	    
	    print '\nDecrypting in query...'
	    query = "select id, decrypt(details) from task"
	    cursor.execute(query)
	    for row in cursor.fetchall():
	        print row

snippet sqlite3_create_schema.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_create_schema.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating the schema in an sqlite3 database.
	"""
	#end_pymotw_header
	
	import os
	import sqlite3
	
	db_filename = 'todo.db'
	schema_filename = 'todo_schema.sql'
	
	db_is_new = not os.path.exists(db_filename)
	
	with sqlite3.connect(db_filename) as conn:
	    if db_is_new:
	        print 'Creating schema'
	        with open(schema_filename, 'rt') as f:
	            schema = f.read()
	        conn.executescript(schema)
	
	        print 'Inserting initial data'
	        
	        conn.executescript("""
	        insert into project (name, description, deadline)
	        values ('pymotw', 'Python Module of the Week', '2010-11-01');
	        
	        insert into task (details, status, deadline, project)
	        values ('write about select', 'done', '2010-10-03',
	                'pymotw');
	        
	        insert into task (details, status, deadline, project)
	        values ('write about random', 'waiting', '2010-10-10',
	                'pymotw');
	        
	        insert into task (details, status, deadline, project)
	        values ('write about sqlite3', 'active', '2010-10-17',
	                'pymotw');
	        """)
	    else:
	        print 'Database exists, assume schema does, too.'

snippet sqlite3_cursor_description.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_cursor_description.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Query tasks in the database.
	"""
	#end_pymotw_header
	
	import sqlite3
	
	db_filename = 'todo.db'
	
	with sqlite3.connect(db_filename) as conn:
	    cursor = conn.cursor()
	
	    cursor.execute("""
	    select * from task where project = 'pymotw'
	    """)
	
	    print 'Task table has these columns:'
	    for colinfo in cursor.description:
	        print colinfo

snippet sqlite3_custom_type_column.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_custom_type_column.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Defining a custom type.
	"""
	#end_pymotw_header
	
	import sqlite3
	try:
	    import cPickle as pickle
	except:
	    import pickle
	
	db_filename = 'todo.db'
	
	def adapter_func(obj):
	    """Convert from in-memory to storage representation.
	    """
	    print 'adapter_func(%s)\n' % obj
	    return pickle.dumps(obj)
	
	def converter_func(data):
	    """Convert from storage to in-memory representation.
	    """
	    print 'converter_func(%r)\n' % data
	    return pickle.loads(data)
	
	
	class MyObj(object):
	    def __init__(self, arg):
	        self.arg = arg
	    def __str__(self):
	        return 'MyObj(%r)' % self.arg
	
	# Register the functions for manipulating the type.
	sqlite3.register_adapter(MyObj, adapter_func)
	sqlite3.register_converter("MyObj", converter_func)
	
	# Create some objects to save.  Use a list of tuples so we can pass
	# this sequence directly to executemany().
	to_save = [ (MyObj('this is a value to save'),),
	            (MyObj(42),),
	            ]
	
	with sqlite3.connect(db_filename,
	                     detect_types=sqlite3.PARSE_COLNAMES) as conn:
	    # Create a table with column of type "text"
	    conn.execute("""
	    create table if not exists obj2 (
	        id    integer primary key autoincrement not null,
	        data  text
	    )
	    """)
	    cursor = conn.cursor()
	
	    # Insert the objects into the database
	    cursor.executemany("insert into obj2 (data) values (?)", to_save)
	
	    # Query the database for the objects just saved,
	    # using a type specifier to convert the text
	    # to objects.
	    cursor.execute('select id, data as "pickle [MyObj]" from obj2')
	    for obj_id, obj in cursor.fetchall():
	        print 'Retrieved', obj_id, obj, type(obj)
	        print

snippet sqlite3_custom_type.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_custom_type.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Defining a custom type.
	"""
	#end_pymotw_header
	
	import sqlite3
	try:
	    import cPickle as pickle
	except:
	    import pickle
	
	db_filename = 'todo.db'
	
	def adapter_func(obj):
	    """Convert from in-memory to storage representation.
	    """
	    print 'adapter_func(%s)\n' % obj
	    return pickle.dumps(obj)
	
	def converter_func(data):
	    """Convert from storage to in-memory representation.
	    """
	    print 'converter_func(%r)\n' % data
	    return pickle.loads(data)
	
	
	class MyObj(object):
	    def __init__(self, arg):
	        self.arg = arg
	    def __str__(self):
	        return 'MyObj(%r)' % self.arg
	
	# Register the functions for manipulating the type.
	sqlite3.register_adapter(MyObj, adapter_func)
	sqlite3.register_converter("MyObj", converter_func)
	
	# Create some objects to save.  Use a list of tuples so
	# the sequence can be passed directly to executemany().
	to_save = [ (MyObj('this is a value to save'),),
	            (MyObj(42),),
	            ]
	
	with sqlite3.connect(db_filename,
	                     detect_types=sqlite3.PARSE_DECLTYPES) as conn:
	    # Create a table with column of type "MyObj"
	    conn.execute("""
	    create table if not exists obj (
	        id    integer primary key autoincrement not null,
	        data  MyObj
	    )
	    """)
	    cursor = conn.cursor()
	
	    # Insert the objects into the database
	    cursor.executemany("insert into obj (data) values (?)", to_save)
	
	    # Query the database for the objects just saved
	    cursor.execute("select id, data from obj")
	    for obj_id, obj in cursor.fetchall():
	        print 'Retrieved', obj_id, obj, type(obj)
	        print

snippet sqlite3_date_types.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_date_types.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Query tasks in the database.
	"""
	#end_pymotw_header
	
	import sqlite3
	import sys
	
	db_filename = 'todo.db'
	
	sql = "select id, details, deadline from task"
	
	def show_deadline(conn):
	    conn.row_factory = sqlite3.Row
	    cursor = conn.cursor()
	    cursor.execute(sql)
	    row = cursor.fetchone()
	    for col in ['id', 'details', 'deadline']:
	        print '  %-8s  %-30r %s' % (col, row[col], type(row[col]))
	    return
	
	print 'Without type detection:'
	with sqlite3.connect(db_filename) as conn:
	    show_deadline(conn)
	
	print '\nWith type detection:'
	with sqlite3.connect(db_filename,
	                     detect_types=sqlite3.PARSE_DECLTYPES,
	                     ) as conn:
	    show_deadline(conn)

snippet sqlite3_isolation_levels.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_isolation_levels.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Illustrate the effect of isolation levels.
	"""
	#end_pymotw_header
	
	import logging
	import sqlite3
	import sys
	import threading
	import time
	
	logging.basicConfig(
	    level=logging.DEBUG,
	    format='%(asctime)s (%(threadName)-10s) %(message)s',
	    )
	
	db_filename = 'todo.db'
	isolation_level = sys.argv[1]
	
	def writer():
	    my_name = threading.currentThread().name
	    with sqlite3.connect(db_filename,
	                         isolation_level=isolation_level) as conn:
	        cursor = conn.cursor()
	        cursor.execute('update task set priority = priority + 1')
	        logging.debug('waiting to synchronize')
	        ready.wait() # synchronize threads
	        logging.debug('PAUSING')
	        time.sleep(1)
	        conn.commit()
	        logging.debug('CHANGES COMMITTED')
	    return
	
	def reader():
	    my_name = threading.currentThread().name
	    with sqlite3.connect(db_filename,
	                         isolation_level=isolation_level) as conn:
	        cursor = conn.cursor()
	        logging.debug('waiting to synchronize')
	        ready.wait() # synchronize threads
	        logging.debug('wait over')
	        cursor.execute('select * from task')
	        logging.debug('SELECT EXECUTED')
	        results = cursor.fetchall()
	        logging.debug('results fetched')
	    return
	
	if __name__ == '__main__':
	    ready = threading.Event()
	
	    threads = [
	        threading.Thread(name='Reader 1', target=reader),
	        threading.Thread(name='Reader 2', target=reader),
	        threading.Thread(name='Writer 1', target=writer),
	        threading.Thread(name='Writer 2', target=writer),
	        ]
	    
	    [ t.start() for t in threads ]
	    
	    time.sleep(1)
	    logging.debug('setting ready')
	    ready.set()
	
	    [ t.join() for t in threads ]

snippet sqlite3_iterdump.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_iterdump.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Dumping a database
	"""
	#end_pymotw_header
	
	import sqlite3
	
	schema_filename = 'todo_schema.sql'
	
	with sqlite3.connect(':memory:') as conn:
	    conn.row_factory = sqlite3.Row
	    
	    print 'Creating schema'
	    with open(schema_filename, 'rt') as f:
	        schema = f.read()
	    conn.executescript(schema)
	
	    print 'Inserting initial data'
	    conn.execute("""
	        insert into project (name, description, deadline)
	        values ('pymotw', 'Python Module of the Week', '2010-11-01')
	        """)
	    data = [
	        ('write about select', 'done', '2010-10-03', 'pymotw'),
	        ('write about random', 'waiting', '2010-10-10', 'pymotw'),
	        ('write about sqlite3', 'active', '2010-10-17', 'pymotw'),
	        ]
	    conn.executemany("""
	        insert into task (details, status, deadline, project)
	        values (?, ?, ?, ?)
	        """, data)
	
	    print 'Dumping:'
	    for text in conn.iterdump():
	        print text
	    

snippet sqlite3_load_csv.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_load_csv.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Load bulk data from a CSV file.
	"""
	#end_pymotw_header
	
	import csv
	import sqlite3
	import sys
	
	db_filename = 'todo.db'
	data_filename = sys.argv[1]
	
	SQL = """
	      insert into task (details, priority, status, deadline, project)
	      values (:details, :priority, 'active', :deadline, :project)
	      """
	
	with open(data_filename, 'rt') as csv_file:
	    csv_reader = csv.DictReader(csv_file)
	    
	    with sqlite3.connect(db_filename) as conn:
	        cursor = conn.cursor()
	        cursor.executemany(SQL, csv_reader)

snippet sqlite3_load_extension_fts3.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_load_extension_fts3.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Query tasks in the database.
	"""
	#end_pymotw_header
	
	import sqlite3
	
	db_filename = 'todo.db'
	
	with sqlite3.connect(db_filename) as conn:
	
	    # Load the full-text-search extension module
	    conn.enable_load_extension(True)
	    conn.load_extension('fts3.so')
	    conn.enable_load_extension(False)
	    
	    cursor = conn.cursor()
	
	    cursor.execute("""
	    create virtual table searchable_task using fts3(details);
	    insert into searchable_task select (id, details) from task;
	    """)
	
	    cursor.execute(
	        "select id, details from searchable_task where searchable_task match ?",
	        ('write',),
	        )
	    for row in cursor.fetchall():
	        task_id, priority, details, status, deadline = row
	        print '%2d {%d} %-20s [%-8s] (%s)' % (task_id, priority, details, status, deadline)

snippet sqlite3_memory.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_memory.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Working with an in-memory database
	"""
	#end_pymotw_header
	
	import sqlite3
	
	schema_filename = 'todo_schema.sql'
	
	with sqlite3.connect(':memory:') as conn:
	    conn.row_factory = sqlite3.Row
	    
	    print 'Creating schema'
	    with open(schema_filename, 'rt') as f:
	        schema = f.read()
	    conn.executescript(schema)
	
	    print 'Inserting initial data'
	    conn.execute("""
	        insert into project (name, description, deadline)
	        values ('pymotw', 'Python Module of the Week', '2010-11-01')
	        """)
	    data = [
	        ('write about select', 'done', '2010-10-03', 'pymotw'),
	        ('write about random', 'waiting', '2010-10-10', 'pymotw'),
	        ('write about sqlite3', 'active', '2010-10-17', 'pymotw'),
	        ]
	    conn.executemany("""
	        insert into task (details, status, deadline, project)
	        values (?, ?, ?, ?)
	        """, data)
	
	    print 'Looking for tasks...'
	    cursor = conn.cursor()
	    cursor.execute("""
	    select id, priority, status, deadline, details from task
	    where project = 'pymotw' order by deadline
	    """)
	    for row in cursor.fetchall():
	        print '%2d {%d} %-25s [%-8s] (%s)' % (
	            row['id'], row['priority'], row['details'],
	            row['status'], row['deadline'],
	            )
	
	with sqlite3.connect(':memory:') as conn2:
	    print '\nLooking for tasks in second connection...'
	    cursor = conn2.cursor()
	    cursor.execute("""
	    select id, priority, status, deadline, details from task
	    where project = 'pymotw' order by deadline
	    """)
	    for row in cursor.fetchall():
	        print '%2d {%d} %-25s [%-8s] (%s)' % (
	            row['id'], row['priority'], row['details'],
	            row['status'], row['deadline'],
	            )

snippet sqlite3_row_factory.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_row_factory.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Query tasks in the database.
	"""
	#end_pymotw_header
	
	import sqlite3
	
	db_filename = 'todo.db'
	
	with sqlite3.connect(db_filename) as conn:
	    # Change the row factory to use Row
	    conn.row_factory = sqlite3.Row
	    
	    cursor = conn.cursor()
	
	    cursor.execute("""
	    select name, description, deadline from project
	    where name = 'pymotw'
	    """)
	    name, description, deadline = cursor.fetchone()
	
	    print 'Project details for %s (%s) due %s' % (
	        description, name, deadline)
	
	    cursor.execute("""
	    select id, priority, status, deadline, details from task
	    where project = 'pymotw' order by deadline
	    """)
	
	    print '\nNext 5 tasks:'
	    for row in cursor.fetchmany(5):
	        print '%2d {%d} %-25s [%-8s] (%s)' % (
	            row['id'], row['priority'], row['details'],
	            row['status'], row['deadline'],
	            )

snippet sqlite3_select_tasks.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_select_tasks.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Query tasks in the database.
	"""
	#end_pymotw_header
	
	import sqlite3
	
	db_filename = 'todo.db'
	
	with sqlite3.connect(db_filename) as conn:
	    cursor = conn.cursor()
	
	    cursor.execute("""
	    select id, priority, details, status, deadline from task
	    where project = 'pymotw'
	    """)
	
	    for row in cursor.fetchall():
	        task_id, priority, details, status, deadline = row
	        print '%2d {%d} %-20s [%-8s] (%s)' % \
	            (task_id, priority, details, status, deadline)

snippet sqlite3_select_variations.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_select_variations.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Query tasks in the database.
	"""
	#end_pymotw_header
	
	import sqlite3
	
	db_filename = 'todo.db'
	
	with sqlite3.connect(db_filename) as conn:
	    cursor = conn.cursor()
	
	    cursor.execute("""
	    select name, description, deadline from project
	    where name = 'pymotw'
	    """)
	    name, description, deadline = cursor.fetchone()
	
	    print 'Project details for %s (%s) due %s' % \
	        (description, name, deadline)
	
	    cursor.execute("""
	    select id, priority, details, status, deadline from task
	    where project = 'pymotw' order by deadline
	    """)
	
	    print '\nNext 5 tasks:'
	    for row in cursor.fetchmany(5):
	        task_id, priority, details, status, deadline = row
	        print '%2d {%d} %-25s [%-8s] (%s)' % \
	            (task_id, priority, details, status, deadline)

snippet sqlite3_set_authorizer.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_set_authorizer.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Control access to columns using an authorizer function.
	"""
	#end_pymotw_header
	
	import sqlite3
	
	db_filename = 'todo.db'
	
	def authorizer_func(action, table, column, sql_location, ignore):
	    print '\nauthorizer_func(%s, %s, %s, %s, %s)' % \
	        (action, table, column, sql_location, ignore)
	
	    response = sqlite3.SQLITE_OK # be permissive by default
	
	    if action == sqlite3.SQLITE_SELECT:
	        print 'requesting permission to run a select statement'
	        response = sqlite3.SQLITE_OK
	    
	    elif action == sqlite3.SQLITE_READ:
	        print 'requesting access to column %s.%s from %s' % \
	            (table, column, sql_location)
	        if column == 'details':
	            print '  ignoring details column'
	            response = sqlite3.SQLITE_IGNORE
	        elif column == 'priority':
	            print '  preventing access to priority column'
	            response = sqlite3.SQLITE_DENY
	
	    return response
	
	with sqlite3.connect(db_filename) as conn:
	    conn.row_factory = sqlite3.Row
	    conn.set_authorizer(authorizer_func)
	
	    print 'Using SQLITE_IGNORE to mask a column value:'
	    cursor = conn.cursor()
	    cursor.execute("""
	    select id, details from task where project = 'pymotw'
	    """)
	    for row in cursor.fetchall():
	        print row['id'], row['details']
	
	    print '\nUsing SQLITE_DENY to deny access to a column:'
	    cursor.execute("""
	    select id, priority from task where project = 'pymotw'
	    """)
	    for row in cursor.fetchall():
	        print row['id'], row['details']
	

snippet sqlite3_threading.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_threading.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Illustrate the effect of autocommit mode.
	"""
	#end_pymotw_header
	
	import sqlite3
	import sys
	import threading
	import time
	
	db_filename = 'todo.db'
	isolation_level = None # autocommit mode
	
	def reader(conn):
	    my_name = threading.currentThread().name
	    print 'Starting thread'
	    try:
	        cursor = conn.cursor()
	        cursor.execute('select * from task')
	        results = cursor.fetchall()
	        print 'results fetched'
	    except Exception, err:
	        print 'ERROR:', err
	    return
	
	if __name__ == '__main__':
	
	    with sqlite3.connect(db_filename,
	                         isolation_level=isolation_level,
	                         ) as conn:
	        t = threading.Thread(name='Reader 1',
	                             target=reader,
	                             args=(conn,),
	                             )
	        t.start()
	        t.join()

snippet sqlite3_transaction_commit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_transaction_commit.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating the schema in an sqlite3 database.
	"""
	#end_pymotw_header
	
	import sqlite3
	
	db_filename = 'todo.db'
	
	def show_projects(conn):
	    cursor = conn.cursor()
	    cursor.execute('select name, description from project')
	    for name, desc in cursor.fetchall():
	        print '  ', name
	    return
	
	with sqlite3.connect(db_filename) as conn1:
	
	    print 'Before changes:'
	    show_projects(conn1)
	
	    # Insert in one cursor
	    cursor1 = conn1.cursor()
	    cursor1.execute("""
	    insert into project (name, description, deadline)
	    values ('virtualenvwrapper', 'Virtualenv Extensions',
	            '2011-01-01')
	    """)
	
	    print '\nAfter changes in conn1:'
	    show_projects(conn1)
	
	    # Select from another connection, without committing first
	    print '\nBefore commit:'
	    with sqlite3.connect(db_filename) as conn2:
	        show_projects(conn2)
	
	    # Commit then select from another connection
	    conn1.commit()
	    print '\nAfter commit:'
	    with sqlite3.connect(db_filename) as conn3:
	        show_projects(conn3)
	    

snippet sqlite3_transaction_rollback.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sqlite3_transaction_rollback.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating the schema in an sqlite3 database.
	"""
	#end_pymotw_header
	
	import sqlite3
	
	db_filename = 'todo.db'
	
	def show_projects(conn):
	    cursor = conn.cursor()
	    cursor.execute('select name, description from project')
	    for name, desc in cursor.fetchall():
	        print '  ', name
	    return
	
	with sqlite3.connect(db_filename) as conn:
	
	    print 'Before changes:'
	    show_projects(conn)
	
	    try:
	
	        # Insert
	        cursor = conn.cursor()
	        cursor.execute("""delete from project
	                       where name = 'virtualenvwrapper'
	                       """)
	
	        # Show the settings
	        print '\nAfter delete:'
	        show_projects(conn)
	
	        # Pretend the processing caused an error
	        raise RuntimeError('simulated error')
	
	    except Exception, err:
	        # Discard the changes
	        print 'ERROR:', err
	        conn.rollback()
	        
	    else:
	        # Save the changes
	        conn.commit()
	
	    # Show the results
	    print '\nAfter rollback:'
	    show_projects(conn)

snippet string_capwords.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/string_capwords.py
	# -*- coding: utf-8 -*-
	
	import string
	
	s = 'The quick brown fox jumped over the lazy dog.'
	
	print(s)
	
	# 首字母大写
	print(string.capwords(s))

snippet string_constants.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/string_constants.py
	# -*- coding: utf-8 -*-
	
	import string
	
	for name in (s for s in dir(string) if not s.startswith('_')):
	    value = getattr(string, name)
	    # Look for byte string and unicode values
	    if isinstance(value, str):
	        print('%s=%r\n' % (name, value))

snippet string_template_advanced.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/string_template_advanced.py
	# -*- coding: utf-8 -*-
	
	import string
	
	template_text = '''
	  Delimiter : %%
	  Replaced  : %with_underscore
	  Ignored   : %notunderscored
	'''
	
	d = {'with_underscore': 'replaced',
	     'notunderscored': 'not replaced',
	     }
	
	
	class MyTemplate(string.Template):
	    delimiter = '%'
	    idpattern = '[a-z]+_[a-z]+'
	
	
	t = MyTemplate(template_text)
	print('Modified ID pattern:')
	print(t.safe_substitute(d))

snippet string_template_defaultpattern.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/string_template_defaultpattern.py
	# -*- coding: utf-8 -*-
	
	import string
	
	t = string.Template('$var')
	print(t.pattern.pattern)

snippet string_template_missing.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/string_template_missing.py
	# -*- coding: utf-8 -*-
	
	import string
	
	values = {'var': 'foo'}
	
	t = string.Template("$var is here but $missing is not provided")
	
	try:
	    print('substitute()     :', t.substitute(values))
	except KeyError as err:
	    print('ERROR:', str(err))
	
	print('safe_substitute():', t.safe_substitute(values))

snippet string_template_newsyntax.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/string_template_newsyntax.py
	# -*- coding: utf-8 -*-
	
	import string
	
	
	class MyTemplate(string.Template):
	    delimiter = '{{'
	    pattern = r'''
	    \{\{(?:
	    (?P<escaped>\{\{)|
	    (?P<named>[_a-z][_a-z0-9]*)\}\}|
	    (?P<braced>[_a-z][_a-z0-9]*)\}\}|
	    (?P<invalid>)
	    )
	    '''
	
	
	t = MyTemplate('''
	{{{{
	{{var}}
	''')
	
	print('MATCHES:', t.pattern.findall(t.template))
	print('SUBSTITUTED:', t.safe_substitute(var='replacement'))

snippet string_template.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/string_template.py
	# -*- coding: utf-8 -*-
	
	import string
	
	values = {'var': 'foo'}
	
	t = string.Template("""
	Variable        : $var
	Escape          : $$
	Variable in text: ${var}iable
	""")
	
	print('TEMPLATE:', t.substitute(values))
	
	s = """
	Variable        : %(var)s
	Escape          : %%
	Variable in text: %(var)siable
	"""
	
	print('INTERPOLATION:', s % values)

snippet string_translate.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/string_translate.py
	# -*- coding: utf-8 -*-
	
	intab = 'aeiou'
	outtab = '12345'
	
	s = 'this is string example....wow!!!'
	
	print(s.translate({ord(x): y for (x, y) in zip(intab, outtab)}))

snippet struct_buffers.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/struct_buffers.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	__version__ = "$Id$"
	#end_pymotw_header
	
	import struct
	import binascii
	
	s = struct.Struct('I 2s f')
	values = (1, 'ab', 2.7)
	print 'Original:', values
	
	print
	print 'ctypes string buffer'
	
	import ctypes
	b = ctypes.create_string_buffer(s.size)
	print 'Before  :', binascii.hexlify(b.raw)
	s.pack_into(b, 0, *values)
	print 'After   :', binascii.hexlify(b.raw)
	print 'Unpacked:', s.unpack_from(b, 0)
	
	print
	print 'array'
	
	import array
	a = array.array('c', '\0' * s.size)
	print 'Before  :', binascii.hexlify(a)
	s.pack_into(a, 0, *values)
	print 'After   :', binascii.hexlify(a)
	print 'Unpacked:', s.unpack_from(a, 0)

snippet struct_endianness.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/struct_endianness.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import struct
	import binascii
	
	values = (1, 'ab', 2.7)
	print 'Original values:', values
	
	endianness = [
	    ('@', 'native, native'),
	    ('=', 'native, standard'),
	    ('<', 'little-endian'),
	    ('>', 'big-endian'),
	    ('!', 'network'),
	    ]
	
	for code, name in endianness:
	    s = struct.Struct(code + ' I 2s f')
	    packed_data = s.pack(*values)
	    print
	    print 'Format string  :', s.format, 'for', name
	    print 'Uses           :', s.size, 'bytes'
	    print 'Packed Value   :', binascii.hexlify(packed_data)
	    print 'Unpacked Value :', s.unpack(packed_data) 
snippet struct_pack.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/struct_pack.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import struct
	import binascii
	
	values = (1, 'ab', 2.7)
	s = struct.Struct('I 2s f')
	packed_data = s.pack(*values)
	
	print 'Original values:', values
	print 'Format string  :', s.format
	print 'Uses           :', s.size, 'bytes'
	print 'Packed Value   :', binascii.hexlify(packed_data)

snippet struct_unpack.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/struct_unpack.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import struct
	import binascii
	
	packed_data = binascii.unhexlify('0100000061620000cdcc2c40')
	
	s = struct.Struct('I 2s f')
	unpacked_data = s.unpack(packed_data)
	print 'Unpacked Values:', unpacked_data

snippet subprocess_check_call.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_check_call.py
	#!/usr/bin/env python
	#
	# Copyright 2010 Doug Hellmann.
	#
	"""Checking exit codes from external processes
	"""
	#end_pymotw_header
	
	import subprocess
	
	try:
	    subprocess.check_call(['false'])
	except subprocess.CalledProcessError as err:
	    print 'ERROR:', err

snippet subprocess_check_output_error.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_check_output_error.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Capture the output of a command and test its exit code at the same time.
	"""
	#end_pymotw_header
	
	import subprocess
	
	try:
	    output = subprocess.check_output(
	        'echo to stdout; echo to stderr 1>&2; exit 1',
	        shell=True,
	        )
	except subprocess.CalledProcessError as err:
	    print 'ERROR:', err
	else:
	    print 'Have %d bytes in output' % len(output)
	    print output

snippet subprocess_check_output_error_trap_output.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_check_output_error_trap_output.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Capture the output of a command and test its exit code at the same time.
	"""
	#end_pymotw_header
	
	import subprocess
	
	try:
	    output = subprocess.check_output(
	        'echo to stdout; echo to stderr 1>&2; exit 1',
	        shell=True,
	        stderr=subprocess.STDOUT,
	        )
	except subprocess.CalledProcessError as err:
	    print 'ERROR:', err
	else:
	    print 'Have %d bytes in output' % len(output)
	    print output
	
	                                  

snippet subprocess_check_output.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_check_output.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Capture the output of a command and test its exit code at the same time.
	"""
	#end_pymotw_header
	
	import subprocess
	
	output = subprocess.check_output(['ls', '-1'])
	print 'Have %d bytes in output' % len(output)
	print output
	
	                                  

snippet subprocess_os_system.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_os_system.py
	#!/usr/bin/env python
	"""Replacing os.system with subprocess.
	"""
	#end_pymotw_header
	
	import subprocess
	
	# Simple command
	subprocess.call(['ls', '-1'])

snippet subprocess_pipes.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_pipes.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import subprocess
	
	cat = subprocess.Popen(['cat', 'index.rst'], 
	                        stdout=subprocess.PIPE,
	                        )
	
	grep = subprocess.Popen(['grep', '.. include::'],
	                        stdin=cat.stdout,
	                        stdout=subprocess.PIPE,
	                        )
	
	cut = subprocess.Popen(['cut', '-f', '3', '-d:'],
	                        stdin=grep.stdout,
	                        stdout=subprocess.PIPE,
	                        )
	
	end_of_pipe = cut.stdout
	
	print 'Included files:'
	for line in end_of_pipe:
	    print '\t', line.strip()

snippet subprocess_popen2.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_popen2.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import subprocess
	
	print 'popen2:'
	
	proc = subprocess.Popen(['cat', '-'],
	                        stdin=subprocess.PIPE,
	                        stdout=subprocess.PIPE,
	                        )
	msg = 'through stdin to stdout'
	stdout_value = proc.communicate(msg)[0]
	print '\tpass through:', repr(stdout_value)

snippet subprocess_popen3.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_popen3.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import subprocess
	
	print 'popen3:'
	proc = subprocess.Popen('cat -; echo "to stderr" 1>&2',
	                        shell=True,
	                        stdin=subprocess.PIPE,
	                        stdout=subprocess.PIPE,
	                        stderr=subprocess.PIPE,
	                        )
	msg = 'through stdin to stdout'
	stdout_value, stderr_value = proc.communicate(msg)
	print '\tpass through:', repr(stdout_value)
	print '\tstderr      :', repr(stderr_value)

snippet subprocess_popen4.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_popen4.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import subprocess
	
	print 'popen4:'
	proc = subprocess.Popen('cat -; echo "to stderr" 1>&2',
	                        shell=True,
	                        stdin=subprocess.PIPE,
	                        stdout=subprocess.PIPE,
	                        stderr=subprocess.STDOUT,
	                        )
	msg = 'through stdin to stdout\n'
	stdout_value, stderr_value = proc.communicate(msg)
	print '\tcombined output:', repr(stdout_value)
	print '\tstderr value   :', repr(stderr_value)

snippet subprocess_popen_read.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_popen_read.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import subprocess
	
	print 'read:'
	proc = subprocess.Popen(['echo', '"to stdout"'], 
	                        stdout=subprocess.PIPE,
	                        )
	stdout_value = proc.communicate()[0]
	print '\tstdout:', repr(stdout_value)

snippet subprocess_popen_write.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_popen_write.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import subprocess
	
	print 'write:'
	proc = subprocess.Popen(['cat', '-'],
	                        stdin=subprocess.PIPE,
	                        )
	proc.communicate('\tstdin: to stdin\n')

snippet subprocess_shell_variables.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_shell_variables.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import subprocess
	
	# Command with shell expansion
	subprocess.call('echo $HOME', shell=True)

snippet subprocess_signal_parent_shell.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_signal_parent_shell.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import os
	import signal
	import subprocess
	import tempfile
	import time
	import sys
	
	script = '''#!/bin/sh
	echo "Shell script in process $$"
	set -x
	python signal_child.py
	'''
	script_file = tempfile.NamedTemporaryFile('wt')
	script_file.write(script)
	script_file.flush()
	
	proc = subprocess.Popen(['sh', script_file.name], close_fds=True)
	print 'PARENT      : Pausing before signaling %s...' % proc.pid
	sys.stdout.flush()
	time.sleep(1)
	print 'PARENT      : Signaling child %s' % proc.pid
	sys.stdout.flush()
	os.kill(proc.pid, signal.SIGUSR1)
	time.sleep(3)

snippet subprocess_signal_setsid.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_signal_setsid.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import os
	import signal
	import subprocess
	import tempfile
	import time
	import sys
	
	script = '''#!/bin/sh
	echo "Shell script in process $$"
	set -x
	python signal_child.py
	'''
	script_file = tempfile.NamedTemporaryFile('wt')
	script_file.write(script)
	script_file.flush()
	
	def show_setting_sid():
	    print 'Calling os.setsid() from %s' % os.getpid()
	    sys.stdout.flush()
	    os.setsid()
	
	proc = subprocess.Popen(['sh', script_file.name], 
	                        close_fds=True,
	                        preexec_fn=show_setting_sid,
	                        )
	print 'PARENT      : Pausing before signaling %s...' % proc.pid
	sys.stdout.flush()
	time.sleep(1)
	print 'PARENT      : Signaling process group %s' % proc.pid
	sys.stdout.flush()
	os.killpg(proc.pid, signal.SIGUSR1)
	time.sleep(3)

snippet sys_argv.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_argv.py
	# -*- coding: utf-8 -*-
	
	import sys
	
	print('Arguments:', sys.argv)

snippet sys_builtins.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_builtins.py
	# -*- coding: utf-8 -*-
	
	import sys
	import textwrap
	
	name_text = ', '.join(sorted(sys.builtin_module_names))
	
	print(textwrap.fill(name_text, width=65))

snippet sys_byteorder.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_byteorder.py
	# -*- coding: utf-8 -*-
	
	import sys
	
	print(sys.byteorder)

snippet sys_checkinterval_io.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_checkinterval_io.py
	# -*- coding: utf-8 -*-
	
	import sys
	import threading
	from queue import Queue
	
	
	def show_thread(q, extraByteCodes):
	    for i in range(5):
	        for j in range(extraByteCodes):
	            pass
	        # q.put(threading.current_thread().name)
	        print(threading.current_thread().name)
	    return
	
	
	def run_threads(prefix, interval, extraByteCodes):
	    print('%s interval = %s with %s extra operations' %
	          (prefix, interval, extraByteCodes))
	    sys.setcheckinterval(interval)
	    q = Queue()
	    threads = [threading.Thread(target=show_thread,
	                                name='%s T%s' % (prefix, i),
	                                args=(q, extraByteCodes)
	                                )
	               for i in range(3)
	               ]
	    for t in threads:
	        t.start()
	    for t in threads:
	        t.join()
	    while not q.empty():
	        print(q.get())
	    print()
	    return
	
	
	run_threads('Default', interval=100, extraByteCodes=1000)
	run_threads('Custom', interval=10, extraByteCodes=0)

snippet sys_checkinterval.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_checkinterval.py
	# -*- coding: utf-8 -*-
	
	import sys
	import threading
	from queue import Queue
	
	
	def show_thread(q, extraByteCodes):
	    for i in range(5):
	        for j in range(extraByteCodes):
	            pass
	        q.put(threading.current_thread().name)
	    return
	
	
	def run_threads(prefix, interval, extraByteCodes):
	    print('%s interval = %s with %s extra operations' %
	          (prefix, interval, extraByteCodes))
	    sys.setcheckinterval(interval)
	    q = Queue()
	    threads = [threading.Thread(target=show_thread,
	                                name='%s T%s' % (prefix, i),
	                                args=(q, extraByteCodes)
	                                )
	               for i in range(3)
	               ]
	    for t in threads:
	        t.start()
	    for t in threads:
	        t.join()
	    while not q.empty():
	        print(q.get())
	    print()
	    return
	
	
	run_threads('Default', interval=10, extraByteCodes=1000)
	run_threads('Custom', interval=10, extraByteCodes=0)

snippet sysconfig_get_config_var.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sysconfig_get_config_var.py
	# -*- coding: utf-8 -*-
	
	import sysconfig
	
	print('User base directory:', sysconfig.get_config_var('userbase'))
	print('Unknown variable   :', sysconfig.get_config_var('NoSuchVariable'))

snippet sysconfig_get_config_vars_by_name.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sysconfig_get_config_vars_by_name.py
	# -*- coding: utf-8 -*-
	
	import sysconfig
	
	bases = sysconfig.get_config_vars('base', 'platbase', 'userbase')
	print('Base directories:')
	for b in bases:
	    print('   ', b)

snippet sysconfig_get_config_vars.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sysconfig_get_config_vars.py
	# -*- coding: utf-8 -*-
	
	import pprint
	import sysconfig
	
	config_values = sysconfig.get_config_vars()
	print('Found %d configuration settings' % len(config_values.keys()))
	print()
	
	print('Some highlights:')
	
	print()
	print('  Installation prefixes:')
	print('    prefix={prefix}'.format(**config_values))
	print('    exec_prefix={exec_prefix}'.format(**config_values))
	
	print
	print('  Version info:')
	print('    py_version={py_version}'.format(**config_values))
	print('    py_version_short={py_version_short}'.format(**config_values))
	print('    py_version_nodot={py_version_nodot}'.format(**config_values))
	
	print()
	print('  Base directories:')
	print('    base={base}'.format(**config_values))
	print('    platbase={platbase}'.format(**config_values))
	print('    userbase={userbase}'.format(**config_values))
	print('    srcdir={srcdir}'.format(**config_values))
	
	# 这部分在windows下没有
	# print()
	# print('  Compiler and linker flags:')
	# print('    LDFLAGS={LDFLAGS}'.format(**config_values))
	# print('    BASECFLAGS={BASECFLAGS}'.format(**config_values))
	# print('    Py_ENABLE_SHARED={Py_ENABLE_SHARED}'.format(**config_values))
	
	print()
	print('All:')
	pprint.pprint(config_values)

snippet sysconfig_get_path_names.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sysconfig_get_path_names.py
	# -*- coding: utf-8 -*-
	
	import sysconfig
	
	for name in sysconfig.get_path_names():
	    print(name)

snippet sysconfig_get_path.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sysconfig_get_path.py
	# -*- coding: utf-8 -*-
	
	import sysconfig
	
	for scheme in ['posix_prefix', 'posix_user']:
	    print(scheme)
	    print('=' * len(scheme))
	    print('purelib =', sysconfig.get_path(name='purelib',
	                                          scheme=scheme))
	    print()

snippet sysconfig_get_paths.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sysconfig_get_paths.py
	# -*- coding: utf-8 -*-
	
	import sysconfig
	import os
	
	for scheme in ['posix_prefix', 'posix_user']:
	    print(scheme)
	    print('=' * len(scheme))
	    paths = sysconfig.get_paths(scheme=scheme)
	    prefix = os.path.commonprefix(paths.values())
	    print('prefix = %s\n' % prefix)
	    for name, path in sorted(paths.items()):
	        print('%s\n  .%s' % (name, path[len(prefix):]))
	    print()

snippet sysconfig_get_platform.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sysconfig_get_platform.py
	# -*- coding: utf-8 -*-
	
	import sysconfig
	
	print(sysconfig.get_platform())

snippet sysconfig_get_python_version.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sysconfig_get_python_version.py
	# -*- coding: utf-8 -*-
	
	import sysconfig
	import sys
	
	print('sysconfig.get_python_version():', sysconfig.get_python_version())
	print('\nsys.version_info:')
	print('  major       :', sys.version_info.major)
	print('  minor       :', sys.version_info.minor)
	print('  micro       :', sys.version_info.micro)
	print('  releaselevel:', sys.version_info.releaselevel)
	print('  serial      :', sys.version_info.serial)

snippet sysconfig_get_scheme_names.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sysconfig_get_scheme_names.py
	# -*- coding: utf-8 -*-
	
	import sysconfig
	
	for name in sysconfig.get_scheme_names():
	    print(name)
	print()

snippet sys_current_frames.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_current_frames.py
	# -*- coding: utf-8 -*-
	
	import sys
	import threading
	import time
	
	io_lock = threading.Lock()
	blocker = threading.Lock()
	
	
	def block(i):
	    t = threading.current_thread()
	    with io_lock:
	        print('%s with ident %s going to sleep' % (t.name, t.ident))
	    if i:
	        blocker.acquire()  # acquired but never released
	        time.sleep(0.2)
	    with io_lock:
	        print(t.name, 'finishing')
	    return
	
	
	# Create and start several threads that "block"
	threads = [threading.Thread(target=block, args=(i,)) for i in range(3)]
	for t in threads:
	    t.setDaemon(True)
	    t.start()
	
	# Map the threads from their identifier to the thread object
	threads_by_ident = dict((t.ident, t) for t in threads)
	
	# Show where each thread is "blocked"
	time.sleep(0.01)
	with io_lock:
	    for ident, frame in sys._current_frames().items():
	        t = threads_by_ident.get(ident)
	        if not t:
	            # Main thread
	            continue
	        print(t.name, 'stopped in', frame.f_code.co_name)
	        print('at line', frame.f_lineno, 'of', frame.f_code.co_filename)

snippet sys_displayhook.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_displayhook.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	class ExpressionCounter(object):
	
	    def __init__(self):
	        self.count = 0
	        self.previous_value = self
	
	    def __call__(self, value):
	        print
	        print '  Previous:', self.previous_value
	        print '  New     :', value
	        print
	        if value != self.previous_value:
	            self.count += 1
	            sys.ps1 = '(%3d)> ' % self.count
	        self.previous_value = value
	        sys.__displayhook__(value)
	
	print 'installing'
	sys.displayhook = ExpressionCounter()

snippet sys_excepthook.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_excepthook.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	def my_excepthook(type, value, traceback):
	    print 'Unhandled error:', type, value
	
	sys.excepthook = my_excepthook
	
	print 'Before exception'
	
	raise RuntimeError('This is the error message')
	
	print 'After exception'

snippet sys_exc_info.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_exc_info.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	import threading
	import time
	
	def do_something_with_exception():
	    exc_type, exc_value = sys.exc_info()[:2]
	    print 'Handling %s exception with message "%s" in %s' % \
	        (exc_type.__name__, exc_value, threading.current_thread().name)
	
	def cause_exception(delay):
	    time.sleep(delay)
	    raise RuntimeError('This is the error message')
	
	def thread_target(delay):
	    try:
	        cause_exception(delay)
	    except:
	        do_something_with_exception()
	
	threads = [ threading.Thread(target=thread_target, args=(0.3,)),
	            threading.Thread(target=thread_target, args=(0.1,)),
	            ]
	for t in threads:
	    t.start()
	for t in threads:
	    t.join()

snippet sys_exit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_exit.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	exit_code = int(sys.argv[1])
	sys.exit(exit_code)

snippet sys_flags.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_flags.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	if sys.flags.debug:
	    print 'Debuging'
	if sys.flags.py3k_warning:
	    print 'Warning about Python 3.x incompatibilities'
	if sys.flags.division_warning:
	    print 'Warning about division change'
	if sys.flags.division_new:
	    print 'New division behavior enabled'
	if sys.flags.inspect:
	    print 'Will enter interactive mode after running'
	if sys.flags.optimize:
	    print 'Optimizing byte-code'
	if sys.flags.dont_write_bytecode:
	    print 'Not writing byte-code files'
	if sys.flags.no_site:
	    print 'Not importing "site"'
	if sys.flags.ignore_environment:
	    print 'Ignoring environment'
	if sys.flags.tabcheck:
	    print 'Checking for mixed tabs and spaces'
	if sys.flags.verbose:
	    print 'Verbose mode'
	if sys.flags.unicode:
	    print 'Unicode'

snippet sys_float_info.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_float_info.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	print 'Smallest difference (epsilon):', sys.float_info.epsilon
	print
	print 'Digits (dig)              :', sys.float_info.dig
	print 'Mantissa digits (mant_dig):', sys.float_info.mant_dig
	print
	print 'Maximum (max):', sys.float_info.max
	print 'Minimum (min):', sys.float_info.min
	print
	print 'Radix of exponents (radix):', sys.float_info.radix
	print
	print 'Maximum exponent for radix (max_exp):', sys.float_info.max_exp
	print 'Minimum exponent for radix (min_exp):', sys.float_info.min_exp
	print
	print 'Max. exponent power of 10 (max_10_exp):', \
	    sys.float_info.max_10_exp
	print 'Min. exponent power of 10 (min_10_exp):', \
	    sys.float_info.min_10_exp
	print
	print 'Rounding for addition (rounds):', sys.float_info.rounds

snippet sys_getrefcount.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_getrefcount.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	one = []
	print 'At start         :', sys.getrefcount(one)
	
	two = one
	
	print 'Second reference :', sys.getrefcount(one)
	
	del two
	
	print 'After del        :', sys.getrefcount(one)

snippet sys_getsizeof_custom.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_getsizeof_custom.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	class WithAttributes(object):
	    def __init__(self):
	        self.a = 'a'
	        self.b = 'b'
	        return
	    def __sizeof__(self):
	        return object.__sizeof__(self) + \
	            sum(sys.getsizeof(v) for v in self.__dict__.values())
	
	my_inst = WithAttributes()
	print sys.getsizeof(my_inst)

snippet sys_getsizeof_object.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_getsizeof_object.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	class WithoutAttributes(object):
	    pass
	
	class WithAttributes(object):
	    def __init__(self):
	        self.a = 'a'
	        self.b = 'b'
	        return
	
	without_attrs = WithoutAttributes()
	print 'WithoutAttributes:', sys.getsizeof(without_attrs)
	
	with_attrs = WithAttributes()
	print 'WithAttributes:', sys.getsizeof(with_attrs)

snippet sys_getsizeof.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_getsizeof.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	class OldStyle:
	    pass
	
	class NewStyle(object):
	    pass
	
	for obj in [ [], (), {}, 'c', 'string', 1, 2.3, 
	             OldStyle, OldStyle(), NewStyle, NewStyle(),
	             ]:
	    print '%10s : %s' % (type(obj).__name__, sys.getsizeof(obj))

snippet sys_locations.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_locations.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	print 'Interpreter executable:', sys.executable
	print 'Installation prefix   :', sys.prefix

snippet sys_maximums.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_maximums.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	print 'maxint    :', sys.maxint
	print 'maxsize   :', sys.maxsize
	print 'maxunicode:', sys.maxunicode 
snippet sys_meta_path.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_meta_path.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	import sys_shelve_importer
	import imp
	
	
	class NoisyMetaImportFinder(object):
	    
	    def __init__(self, prefix):
	        print 'Creating NoisyMetaImportFinder for %s' % prefix
	        self.prefix = prefix
	        return
	    
	    def find_module(self, fullname, path=None):
	        print 'looking for "%s" with path "%s"' % (fullname, path)
	        name_parts = fullname.split('.')
	        if name_parts and name_parts[0] == self.prefix:
	            print ' ... found prefix, returning loader'
	            return NoisyMetaImportLoader(path)
	        else:
	            print ' ... not the right prefix, cannot load'
	        return None
	
	
	class NoisyMetaImportLoader(object):
	    
	    def __init__(self, path_entry):
	        self.path_entry = path_entry
	        return
	        
	    def load_module(self, fullname):
	        print 'loading %s' % fullname
	        if fullname in sys.modules:
	            mod = sys.modules[fullname]
	        else:
	            mod = sys.modules.setdefault(fullname,
	                                         imp.new_module(fullname))
	
	        # Set a few properties required by PEP 302
	        mod.__file__ = fullname
	        mod.__name__ = fullname
	        # always looks like a package
	        mod.__path__ = [ 'path-entry-goes-here' ]
	        mod.__loader__ = self
	        mod.__package__ = '.'.join(fullname.split('.')[:-1])
	        
	        return mod
	
	
	# Install the meta-path finder
	sys.meta_path.append(NoisyMetaImportFinder('foo'))
	
	# Import some modules that are "found" by the meta-path finder
	print
	import foo
	
	print
	import foo.bar
	
	# Import a module that is not found
	print
	try:
	    import bar
	except ImportError, e:
	    pass

snippet sys_modules.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_modules.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	import textwrap
	
	names = sorted(sys.modules.keys())
	name_text = ', '.join(names)
	
	print textwrap.fill(name_text, width=65)

snippet sys_path_hooks_noisy.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_path_hooks_noisy.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	class NoisyImportFinder(object):
	    
	    PATH_TRIGGER = 'NoisyImportFinder_PATH_TRIGGER'
	    
	    def __init__(self, path_entry):
	        print 'Checking %s:' % path_entry,
	        if path_entry != self.PATH_TRIGGER:
	            print 'wrong finder'
	            raise ImportError()
	        else:
	            print 'works'
	        return
	    
	    def find_module(self, fullname, path=None):
	        print 'Looking for "%s"' % fullname
	        return None
	
	sys.path_hooks.append(NoisyImportFinder)
	
	sys.path.insert(0, NoisyImportFinder.PATH_TRIGGER)
	
	try:
	    import target_module
	except Exception, e:
	    print 'Import failed:', e

snippet sys_path_importer_cache.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_path_importer_cache.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	print 'PATH:'
	for name in sys.path:
	    if name.startswith(sys.prefix):
	        name = '...' + name[len(sys.prefix):]
	    print ' ', name
	    
	print
	print 'IMPORTERS:'
	for name, cache_value in sys.path_importer_cache.items():
	    name = name.replace(sys.prefix, '...')
	    print '  %s: %r' % (name, cache_value)
	    

snippet sys_path_modify.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_path_modify.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	import os
	
	base_dir = os.path.dirname(__file__) or '.'
	print 'Base directory:', base_dir
	
	# Insert the package_dir_a directory at the front of the path.
	package_dir_a = os.path.join(base_dir, 'package_dir_a')
	sys.path.insert(0, package_dir_a)
	
	# Import the example module
	import example
	print 'Imported example from:', example.__file__
	print '\t', example.DATA
	
	# Make package_dir_b the first directory in the search path
	package_dir_b = os.path.join(base_dir, 'package_dir_b')
	sys.path.insert(0, package_dir_b)
	
	# Reload the module to get the other version
	reload(example)
	print 'Reloaded example from:', example.__file__
	print '\t', example.DATA

snippet sys_path_show.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_path_show.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	for d in sys.path:
	    print d

snippet sys_platform.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_platform.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	print 'This interpreter was built for:', sys.platform

snippet sys_ps1.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_ps1.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	class LineCounter(object):
	    def __init__(self):
	        self.count = 0
	    def __str__(self):
	        self.count += 1
	        return '(%3d)> ' % self.count

snippet sys_recursionlimit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_recursionlimit.py
	#
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann.  All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	print 'Initial limit:', sys.getrecursionlimit()
	
	sys.setrecursionlimit(10)
	
	print 'Modified limit:', sys.getrecursionlimit()
	
	def generate_recursion_error(i):
	    print 'generate_recursion_error(%s)' % i
	    generate_recursion_error(i+1)
	
	try:
	    generate_recursion_error(1)
	except RuntimeError, err:
	    print 'Caught exception:', err

snippet sys_settrace_call.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_settrace_call.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	import sys
	
	def trace_calls(frame, event, arg):
	    if event != 'call':
	        return
	    co = frame.f_code
	    func_name = co.co_name
	    if func_name == 'write':
	        # Ignore write() calls from print statements
	        return
	    func_line_no = frame.f_lineno
	    func_filename = co.co_filename
	    caller = frame.f_back
	    caller_line_no = caller.f_lineno
	    caller_filename = caller.f_code.co_filename
	    print 'Call to %s\n  on line %s of %s\n  from line %s of %s\n' % \
	        (func_name, func_line_no, func_filename,
	         caller_line_no, caller_filename)
	    return
	
	def b():
	    print 'in b()\n'
	
	def a():
	    print 'in a()\n'
	    b()
	
	sys.settrace(trace_calls)
	a()

snippet sys_settrace_exception.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_settrace_exception.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	import sys
	
	def trace_exceptions(frame, event, arg):
	    if event != 'exception':
	        return
	    co = frame.f_code
	    func_name = co.co_name
	    line_no = frame.f_lineno
	    filename = co.co_filename
	    exc_type, exc_value, exc_traceback = arg
	    print 'Tracing exception:\n%s "%s"\non line %s of %s\n' % \
	        (exc_type.__name__, exc_value, line_no, func_name)
	
	def trace_calls(frame, event, arg):
	    if event != 'call':
	        return
	    co = frame.f_code
	    func_name = co.co_name
	    if func_name in TRACE_INTO:
	        return trace_exceptions
	
	def c():
	    raise RuntimeError('generating exception in c()')
	
	def b():
	    c()
	    print 'Leaving b()'
	
	def a():
	    b()
	    print 'Leaving a()'
	    
	TRACE_INTO = ['a', 'b', 'c']
	
	sys.settrace(trace_calls)
	try:
	    a()
	except Exception, e:
	    print 'Exception handler:', e

snippet sys_settrace_line.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_settrace_line.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	import sys
	
	def trace_lines(frame, event, arg):
	    if event != 'line':
	        return
	    co = frame.f_code
	    func_name = co.co_name
	    line_no = frame.f_lineno
	    filename = co.co_filename
	    print '  %s line %s' % (func_name, line_no)
	
	def trace_calls(frame, event, arg):
	    if event != 'call':
	        return
	    co = frame.f_code
	    func_name = co.co_name
	    if func_name == 'write':
	        # Ignore write() calls from print statements
	        return
	    line_no = frame.f_lineno
	    filename = co.co_filename
	    print 'Call to %s on line %s of %s' % \
	        (func_name, line_no, filename)
	    if func_name in TRACE_INTO:
	        # Trace into this function
	        return trace_lines
	    return
	
	def c(input):
	    print 'input =', input
	    print 'Leaving c()'
	
	def b(arg):
	    val = arg * 5
	    c(val)
	    print 'Leaving b()'
	
	def a():
	    b(2)
	    print 'Leaving a()'
	    
	TRACE_INTO = ['b']
	
	sys.settrace(trace_calls)
	a()

snippet sys_settrace_return.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_settrace_return.py
	#!/usr/bin/env python
	# encoding: utf-8
	
	import sys
	
	def trace_calls_and_returns(frame, event, arg):
	    co = frame.f_code
	    func_name = co.co_name
	    if func_name == 'write':
	        # Ignore write() calls from print statements
	        return
	    line_no = frame.f_lineno
	    filename = co.co_filename
	    if event == 'call':
	        print 'Call to %s on line %s of %s' % (func_name,
	                                               line_no,
	                                               filename)
	        return trace_calls_and_returns
	    elif event == 'return':
	        print '%s => %s' % (func_name, arg)
	    return
	
	def b():
	    print 'in b()'
	    return 'response_from_b '
	
	def a():
	    print 'in a()'
	    val = b()
	    return val * 2
	
	sys.settrace(trace_calls_and_returns)
	a()

snippet sys_shelve_importer_create.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_shelve_importer_create.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	import shelve
	import os
	
	filename = '/tmp/pymotw_import_example.shelve'
	if os.path.exists(filename):
	    os.unlink(filename)
	db = shelve.open(filename)
	try:
	    db['data:README'] = """
	==============
	package README
	==============
	
	This is the README for ``package``.
	"""
	    db['package.__init__'] = """
	print 'package imported'
	message = 'This message is in package.__init__'
	"""
	    db['package.module1'] = """
	print 'package.module1 imported'
	message = 'This message is in package.module1'
	"""
	    db['package.subpackage.__init__'] = """
	print 'package.subpackage imported'
	message = 'This message is in package.subpackage.__init__'
	"""
	    db['package.subpackage.module2'] = """
	print 'package.subpackage.module2 imported'
	message = 'This message is in package.subpackage.module2'
	"""
	    db['package.with_error'] = """
	print 'package.with_error being imported'
	raise ValueError('raising exception to break import')
	"""
	    print 'Created %s with:' % filename
	    for key in sorted(db.keys()):
	        print '\t', key
	finally:
	    db.close()

snippet sys_shelve_importer_get_data.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_shelve_importer_get_data.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	import sys_shelve_importer
	import os
	import pkgutil
	
	filename = '/tmp/pymotw_import_example.shelve'
	sys.path_hooks.append(sys_shelve_importer.ShelveFinder)
	sys.path.insert(0, filename)
	
	import package
	
	readme_path = os.path.join(package.__path__[0], 'README')
	
	readme = pkgutil.get_data('package', 'README')
	# Equivalent to:
	#  readme = package.__loader__.get_data(readme_path)
	print readme
	
	foo_path = os.path.join(package.__path__[0], 'foo')
	try:
	    foo = pkgutil.get_data('package', 'foo')
	    # Equivalent to:
	    #  foo = package.__loader__.get_data(foo_path)
	except IOError as err:
	    print 'ERROR: Could not load "foo"', err
	else:
	    print foo

snippet sys_shelve_importer_missing.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_shelve_importer_missing.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	import sys_shelve_importer
	
	filename = '/tmp/pymotw_import_example.shelve'
	sys.path_hooks.append(sys_shelve_importer.ShelveFinder)
	sys.path.insert(0, filename)
	
	try:
	    import package.module3
	except ImportError, e:
	    print 'Failed to import:', e 
snippet sys_shelve_importer_module.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_shelve_importer_module.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	import sys_shelve_importer
	
	def show_module_details(module):
	    print '  message    :', module.message
	    print '  __name__   :', module.__name__
	    print '  __package__:', module.__package__
	    print '  __file__   :', module.__file__
	    print '  __path__   :', module.__path__
	    print '  __loader__ :', module.__loader__
	
	filename = '/tmp/pymotw_import_example.shelve'
	sys.path_hooks.append(sys_shelve_importer.ShelveFinder)
	sys.path.insert(0, filename)
	
	print 'Import of "package.module1":'
	import package.module1
	
	print
	print 'Examine package.module1 details:'
	show_module_details(package.module1)
	
	print
	print 'Import of "package.subpackage.module2":'
	import package.subpackage.module2
	
	print
	print 'Examine package.subpackage.module2 details:'
	show_module_details(package.subpackage.module2)

snippet sys_shelve_importer_package.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_shelve_importer_package.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	import sys_shelve_importer
	
	def show_module_details(module):
	    print '  message    :', module.message
	    print '  __name__   :', module.__name__
	    print '  __package__:', module.__package__
	    print '  __file__   :', module.__file__
	    print '  __path__   :', module.__path__
	    print '  __loader__ :', module.__loader__
	
	filename = '/tmp/pymotw_import_example.shelve'
	sys.path_hooks.append(sys_shelve_importer.ShelveFinder)
	sys.path.insert(0, filename)
	
	print 'Import of "package":'
	import package
	
	print
	print 'Examine package details:'
	show_module_details(package)
	
	print
	print 'Global settings:'
	print 'sys.modules entry:'
	print sys.modules['package']

snippet sys_shelve_importer.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_shelve_importer.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import contextlib
	import imp
	import os
	import shelve
	import sys
	
	    
	def _mk_init_name(fullname):
	    """Return the name of the __init__ module
	    for a given package name.
	    """
	    if fullname.endswith('.__init__'):
	        return fullname
	    return fullname + '.__init__'
	
	
	def _get_key_name(fullname, db):
	    """Look in an open shelf for fullname or
	    fullname.__init__, return the name found.
	    """
	    if fullname in db:
	        return fullname
	    init_name = _mk_init_name(fullname)
	    if init_name in db:
	        return init_name
	    return None
	    
	
	class ShelveFinder(object):
	    """Find modules collected in a shelve archive."""
	    
	    def __init__(self, path_entry):
	        if not os.path.isfile(path_entry):
	            raise ImportError
	        try:
	            # Test the path_entry to see if it is a valid shelf
	            with contextlib.closing(shelve.open(path_entry, 'r')):
	                pass
	        except Exception, e:
	            raise ImportError(str(e))
	        else:
	            print 'shelf added to import path:', path_entry
	            self.path_entry = path_entry
	        return
	        
	    def __str__(self):
	        return '<%s for "%s">' % (self.__class__.__name__,
	                                  self.path_entry)
	        
	    def find_module(self, fullname, path=None):
	        path = path or self.path_entry
	        print '\nlooking for "%s"\n  in %s' % (fullname, path)
	        with contextlib.closing(shelve.open(self.path_entry, 'r')
	                                ) as db:
	            key_name = _get_key_name(fullname, db)
	            if key_name:
	                print '  found it as %s' % key_name
	                return ShelveLoader(path)
	        print '  not found'
	        return None
	
	
	class ShelveLoader(object):
	    """Load source for modules from shelve databases."""
	    
	    def __init__(self, path_entry):
	        self.path_entry = path_entry
	        return
	        
	    def _get_filename(self, fullname):
	        # Make up a fake filename that starts with the path entry
	        # so pkgutil.get_data() works correctly.
	        return os.path.join(self.path_entry, fullname)
	        
	    def get_source(self, fullname):
	        print 'loading source for "%s" from shelf' % fullname
	        try:
	            with contextlib.closing(shelve.open(self.path_entry, 'r')
	                                    ) as db:
	                key_name = _get_key_name(fullname, db)
	                if key_name:
	                    return db[key_name]
	                raise ImportError('could not find source for %s' %
	                                  fullname)
	        except Exception, e:
	            print 'could not load source:', e
	            raise ImportError(str(e))
	            
	    def get_code(self, fullname):
	        source = self.get_source(fullname)
	        print 'compiling code for "%s"' % fullname
	        return compile(source, self._get_filename(fullname),
	                       'exec', dont_inherit=True)
	    
	    def get_data(self, path):
	        print 'looking for data\n  in %s\n  for "%s"' % \
	            (self.path_entry, path)
	        if not path.startswith(self.path_entry):
	            raise IOError
	        path = path[len(self.path_entry)+1:]
	        key_name = 'data:' + path
	        try:
	            with contextlib.closing(shelve.open(self.path_entry, 'r')
	                                    ) as db:
	                return db[key_name]
	        except Exception, e:
	            # Convert all errors to IOError
	            raise IOError
	        
	    def is_package(self, fullname):
	        init_name = _mk_init_name(fullname)
	        with contextlib.closing(shelve.open(self.path_entry, 'r')
	                                ) as db:
	            return init_name in db
	
	    def load_module(self, fullname):
	        source = self.get_source(fullname)
	
	        if fullname in sys.modules:
	            print 'reusing existing module from import of "%s"' % \
	                fullname
	            mod = sys.modules[fullname]
	        else:
	            print 'creating a new module object for "%s"' % fullname
	            mod = sys.modules.setdefault(fullname,
	                                         imp.new_module(fullname))
	
	        # Set a few properties required by PEP 302
	        mod.__file__ = self._get_filename(fullname)
	        mod.__name__ = fullname
	        mod.__path__ = self.path_entry
	        mod.__loader__ = self
	        mod.__package__ = '.'.join(fullname.split('.')[:-1])
	        
	        if self.is_package(fullname):
	            print 'adding path for package'
	            # Set __path__ for packages
	            # so we can find the sub-modules.
	            mod.__path__ = [ self.path_entry ]
	        else:
	            print 'imported as regular module'
	        
	        print 'execing source...'
	        exec source in mod.__dict__
	        print 'done'
	        return mod
	        

snippet sys_shelve_importer_reload.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_shelve_importer_reload.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	import sys_shelve_importer
	
	filename = '/tmp/pymotw_import_example.shelve'
	sys.path_hooks.append(sys_shelve_importer.ShelveFinder)
	sys.path.insert(0, filename)
	
	print 'First import of "package":'
	import package
	
	print
	print 'Reloading "package":'
	reload(package)

snippet sys_stdio.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_stdio.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	print >>sys.stderr, 'STATUS: Reading from stdin'
	
	data = sys.stdin.read()
	
	print >>sys.stderr, 'STATUS: Writing data to stdout'
	
	sys.stdout.write(data)
	sys.stdout.flush()
	
	print >>sys.stderr, 'STATUS: Done'

snippet sys_unicode.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_unicode.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	print 'Default encoding     :', sys.getdefaultencoding()
	print 'File system encoding :', sys.getfilesystemencoding()

snippet sys_version_values.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/sys_version_values.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import sys
	
	print 'Version info:'
	print
	print 'sys.version      =', repr(sys.version)
	print 'sys.version_info =', sys.version_info
	print 'sys.hexversion   =', hex(sys.hexversion)
	print 'sys.subversion   =', sys.subversion
	print 'sys.api_version  =', sys.api_version

snippet tarfile_addfile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_addfile.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	from contextlib import closing
	
	print 'creating archive'
	with closing(tarfile.open('tarfile_addfile.tar', mode='w')) as out:
	    print 'adding README.txt as RENAMED.txt'
	    info = out.gettarinfo('README.txt', arcname='RENAMED.txt')
	    out.addfile(info)
	
	print
	print 'Contents:'
	with closing(tarfile.open('tarfile_addfile.tar', mode='r')) as t:
	    for member_info in t.getmembers():
	        print member_info.name

snippet tarfile_addfile_string.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_addfile_string.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	from cStringIO import StringIO
	from contextlib import closing
	
	data = 'This is the data to write to the archive.'
	
	with closing(tarfile.open('addfile_string.tar', mode='w')) as out:
	    info = tarfile.TarInfo('made_up_file.txt')
	    info.size = len(data)
	    out.addfile(info, StringIO(data))
	
	print 'Contents:'
	with closing(tarfile.open('addfile_string.tar', mode='r')) as t:
	    for member_info in t.getmembers():
	        print member_info.name
	        f = t.extractfile(member_info)
	        print f.read()

snippet tarfile_add.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_add.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	from contextlib import closing
	
	print 'creating archive'
	with closing(tarfile.open('tarfile_add.tar', mode='w')) as out:
	    print 'adding README.txt'
	    out.add('README.txt')
	
	print
	print 'Contents:'
	with closing(tarfile.open('tarfile_add.tar', mode='r')) as t:
	    for member_info in t.getmembers():
	        print member_info.name

snippet tarfile_append.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_append.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	from contextlib import closing
	
	print 'creating archive'
	with closing(tarfile.open('tarfile_append.tar', mode='w')) as out:
	    out.add('README.txt')
	
	print 'contents:',
	with closing(tarfile.open('tarfile_append.tar', mode='r')) as t:
	    print [m.name for m in t.getmembers()]
	
	print 'adding index.rst'
	with closing(tarfile.open('tarfile_append.tar', mode='a')) as out:
	    out.add('index.rst')
	
	print 'contents:',
	with closing(tarfile.open('tarfile_append.tar', mode='r')) as t:
	    print [m.name for m in t.getmembers()]

snippet tarfile_compression.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_compression.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	import os
	
	fmt = '%-30s %-10s'
	print fmt % ('FILENAME', 'SIZE')
	print fmt % ('README.txt', os.stat('README.txt').st_size)
	
	for filename, write_mode in [
	    ('tarfile_compression.tar', 'w'),
	    ('tarfile_compression.tar.gz', 'w:gz'),
	    ('tarfile_compression.tar.bz2', 'w:bz2'),
	    ]:
	    out = tarfile.open(filename, mode=write_mode)
	    try:
	        out.add('README.txt')
	    finally:
	        out.close()
	
	    print fmt % (filename, os.stat(filename).st_size),
	    print [m.name
	           for m in tarfile.open(filename, 'r:*').getmembers()
	           ]

snippet tarfile_extractall_members.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_extractall_members.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	import os
	from contextlib import closing
	
	os.mkdir('outdir')
	with closing(tarfile.open('example.tar', 'r')) as t:
	    t.extractall('outdir',
	                 members=[t.getmember('README.txt')],
	                 )
	print os.listdir('outdir')

snippet tarfile_extractall.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_extractall.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	import os
	from contextlib import closing
	
	os.mkdir('outdir')
	with closing(tarfile.open('example.tar', 'r')) as t:
	    t.extractall('outdir')
	print os.listdir('outdir')

snippet tarfile_extractfile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_extractfile.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	from contextlib import closing
	
	with closing(tarfile.open('example.tar', 'r')) as t:
	    for filename in [ 'README.txt', 'notthere.txt' ]:
	        try:
	            f = t.extractfile(filename)
	        except KeyError:
	            print 'ERROR: Did not find %s in tar archive' % filename
	        else:
	            print filename, ':'
	            print f.read()

snippet tarfile_extract.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_extract.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	import os
	from contextlib import closing
	
	os.mkdir('outdir')
	with closing(tarfile.open('example.tar', 'r')) as t:
	    t.extract('README.txt', 'outdir')
	print os.listdir('outdir')

snippet tarfile_getmember.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_getmember.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	import time
	from contextlib import closing
	
	with closing(tarfile.open('example.tar', 'r')) as t:
	    for filename in [ 'README.txt', 'notthere.txt' ]:
	        try:
	            info = t.getmember(filename)
	        except KeyError:
	            print 'ERROR: Did not find %s in tar archive' % filename
	        else:
	            print '%s is %d bytes' % (info.name, info.size)

snippet tarfile_getmembers.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_getmembers.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	import time
	from contextlib import closing
	
	with closing(tarfile.open('example.tar', 'r')) as t:
	    for member_info in t.getmembers():
	        print member_info.name
	        print '\tModified:\t', time.ctime(member_info.mtime)
	        print '\tMode    :\t', oct(member_info.mode)
	        print '\tType    :\t', member_info.type
	        print '\tSize    :\t', member_info.size, 'bytes'
	        print

snippet tarfile_getnames.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_getnames.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	from contextlib import closing
	
	with closing(tarfile.open('example.tar', 'r')) as t:
	    print t.getnames()

snippet tarfile_is_tarfile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tarfile_is_tarfile.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tarfile
	
	for filename in [ 'README.txt', 'example.tar', 
	                  'bad_example.tar', 'notthere.tar' ]:
	    try:
	        print '%15s  %s' % (filename, tarfile.is_tarfile(filename))
	    except IOError, err:
	        print '%15s  %s' % (filename, err)

snippet tempfile_mkdtemp.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tempfile_mkdtemp.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os
	import tempfile
	
	directory_name = tempfile.mkdtemp()
	print directory_name
	# Clean up the directory
	os.removedirs(directory_name)

snippet tempfile_NamedTemporaryFile_args.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tempfile_NamedTemporaryFile_args.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tempfile
	
	with tempfile.NamedTemporaryFile(
	    suffix='_suffix', prefix='prefix_', dir='/tmp',
	    ) as temp:
	    print 'temp:'
	    print '  ', temp
	    print 'temp.name:'
	    print '  ', temp.name

snippet tempfile_NamedTemporaryFile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tempfile_NamedTemporaryFile.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os
	import tempfile
	
	with tempfile.NamedTemporaryFile() as temp:
	    print 'temp:'
	    print '  ', temp
	    print 'temp.name:'
	    print '  ', temp.name
	
	print 'Exists after close:', os.path.exists(temp.name)

snippet tempfile_settings.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tempfile_settings.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tempfile
	
	print 'gettempdir():', tempfile.gettempdir()
	print 'gettempprefix():', tempfile.gettempprefix() 
snippet tempfile_tempdir.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tempfile_tempdir.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tempfile
	
	tempfile.tempdir = '/I/changed/this/path'
	print 'gettempdir():', tempfile.gettempdir() 
snippet tempfile_TemporaryFile_binary.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tempfile_TemporaryFile_binary.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os
	import tempfile
	
	with tempfile.TemporaryFile() as temp:
	    temp.write('Some data')
	    temp.seek(0)
	    
	    print temp.read()

snippet tempfile_TemporaryFile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tempfile_TemporaryFile.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import os
	import tempfile
	
	print 'Building a filename with PID:'
	filename = '/tmp/guess_my_name.%s.txt' % os.getpid()
	temp = open(filename, 'w+b')
	try:
	    print 'temp:'
	    print '  ', temp
	    print 'temp.name:'
	    print '  ', temp.name
	finally:
	    temp.close()
	    # Clean up the temporary file yourself
	    os.remove(filename)
	
	print
	print 'TemporaryFile:'
	temp = tempfile.TemporaryFile()
	try:
	    print 'temp:'
	    print '  ', temp
	    print 'temp.name:'
	    print '  ', temp.name
	finally:
	    # Automatically cleans up the file
	    temp.close()

snippet tempfile_TemporaryFile_text.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/tempfile_TemporaryFile_text.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import tempfile
	
	with tempfile.TemporaryFile(mode='w+t') as f:
	    f.writelines(['first\n', 'second\n'])
	    f.seek(0)
	
	    for line in f:
	        print line.rstrip()

snippet textwrap_dedent.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/textwrap_dedent.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import textwrap
	from textwrap_example import sample_text
	
	dedented_text = textwrap.dedent(sample_text)
	print 'Dedented:'
	print dedented_text

snippet textwrap_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/textwrap_example.py
	
	"""Examples of using the textwrap module.
	
	See http://blog.doughellmann.com/2007/04/pymotw-textwrap.html
	"""
	
	__module_id__ = "$Id$"
	
	sample_text = '''
	    The textwrap module can be used to format text for output in
	    situations where pretty-printing is desired.  It offers
	    programmatic functionality similar to the paragraph wrapping
	    or filling features found in many text editors.
	    '''

snippet textwrap_fill.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/textwrap_fill.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import textwrap
	from textwrap_example import sample_text
	
	print 'No dedent:\n'
	print textwrap.fill(sample_text, width=50)

snippet textwrap_fill_width.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/textwrap_fill_width.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import textwrap
	from textwrap_example import sample_text
	
	dedented_text = textwrap.dedent(sample_text).strip()
	for width in [ 45, 70 ]:
		print '%d Columns:\n' % width
		print textwrap.fill(dedented_text, width=width)
		print

snippet textwrap_hanging_indent.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/textwrap_hanging_indent.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import textwrap
	from textwrap_example import sample_text
	
	dedented_text = textwrap.dedent(sample_text).strip()
	print textwrap.fill(dedented_text,
	                    initial_indent='',
	                    subsequent_indent=' ' * 4,
	                    width=50,
	                    )

snippet threading_condition.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_condition.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Using a Condition to control sequencing between threads.
	"""
	#end_pymotw_header
	import logging
	import threading
	import time
	
	logging.basicConfig(
	    level=logging.DEBUG,
	    format='%(asctime)s (%(threadName)-2s) %(message)s',
	    )
	
	def consumer(cond):
	    """wait for the condition and use the resource"""
	    logging.debug('Starting consumer thread')
	    t = threading.currentThread()
	    with cond:
	        cond.wait()
	        logging.debug('Resource is available to consumer')
	
	def producer(cond):
	    """set up the resource to be used by the consumer"""
	    logging.debug('Starting producer thread')
	    with cond:
	        logging.debug('Making resource available')
	        cond.notifyAll()
	
	condition = threading.Condition()
	c1 = threading.Thread(name='c1', target=consumer,
	                      args=(condition,))
	c2 = threading.Thread(name='c2', target=consumer,
	                      args=(condition,))
	p = threading.Thread(name='p', target=producer,
	                     args=(condition,))
	
	c1.start()
	time.sleep(2)
	c2.start()
	time.sleep(2)
	p.start()

snippet threading_daemon_join.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_daemon_join.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Joining daemon threads to prevent premature exit.
	"""
	#end_pymotw_header
	
	import threading
	import time
	import logging
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	
	def daemon():
	    logging.debug('Starting')
	    time.sleep(2)
	    logging.debug('Exiting')
	
	d = threading.Thread(name='daemon', target=daemon)
	d.setDaemon(True)
	
	def non_daemon():
	    logging.debug('Starting')
	    logging.debug('Exiting')
	
	t = threading.Thread(name='non-daemon', target=non_daemon)
	
	d.start()
	t.start()
	
	d.join()
	t.join()

snippet threading_daemon_join_timeout.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_daemon_join_timeout.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Timing out join() for busy daemon threads
	"""
	#end_pymotw_header
	
	import threading
	import time
	import logging
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	
	def daemon():
	    logging.debug('Starting')
	    time.sleep(2)
	    logging.debug('Exiting')
	
	d = threading.Thread(name='daemon', target=daemon)
	d.setDaemon(True)
	
	def non_daemon():
	    logging.debug('Starting')
	    logging.debug('Exiting')
	
	t = threading.Thread(name='non-daemon', target=non_daemon)
	
	d.start()
	t.start()
	
	d.join(1)
	print 'd.isAlive()', d.isAlive()
	t.join()

snippet threading_daemon.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_daemon.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Daemon vs. non-daemon threads.
	"""
	#end_pymotw_header
	
	import threading
	import time
	import logging
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	
	def daemon():
	    logging.debug('Starting')
	    time.sleep(2)
	    logging.debug('Exiting')
	
	d = threading.Thread(name='daemon', target=daemon)
	d.setDaemon(True)
	
	def non_daemon():
	    logging.debug('Starting')
	    logging.debug('Exiting')
	
	t = threading.Thread(name='non-daemon', target=non_daemon)
	
	d.start()
	t.start()

snippet threading_enumerate.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_enumerate.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Using enumerate() to find the active threads.
	"""
	#end_pymotw_header
	
	import random
	import threading
	import time
	import logging
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	
	def worker():
	    """thread worker function"""
	    t = threading.currentThread()
	    pause = random.randint(1,5)
	    logging.debug('sleeping %s', pause)
	    time.sleep(pause)
	    logging.debug('ending')
	    return
	
	for i in range(3):
	    t = threading.Thread(target=worker)
	    t.setDaemon(True)
	    t.start()
	
	main_thread = threading.currentThread()
	for t in threading.enumerate():
	    if t is main_thread:
	        continue
	    logging.debug('joining %s', t.getName())
	    t.join()

snippet threading_event.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_event.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Using Events to synchronize threads.
	"""
	#end_pymotw_header
	
	import logging
	import threading
	import time
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	                    
	def wait_for_event(e):
	    """Wait for the event to be set before doing anything"""
	    logging.debug('wait_for_event starting')
	    event_is_set = e.wait()
	    logging.debug('event set: %s', event_is_set)
	
	def wait_for_event_timeout(e, t):
	    """Wait t seconds and then timeout"""
	    while not e.isSet():
	        logging.debug('wait_for_event_timeout starting')
	        event_is_set = e.wait(t)
	        logging.debug('event set: %s', event_is_set)
	        if event_is_set:
	            logging.debug('processing event')
	        else:
	            logging.debug('doing other work')
	
	
	e = threading.Event()
	t1 = threading.Thread(name='block', 
	                      target=wait_for_event,
	                      args=(e,))
	t1.start()
	
	t2 = threading.Thread(name='nonblock', 
	                      target=wait_for_event_timeout, 
	                      args=(e, 2))
	t2.start()
	
	logging.debug('Waiting before calling Event.set()')
	time.sleep(3)
	e.set()
	logging.debug('Event is set')

snippet threading_local_defaults.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_local_defaults.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Defaults for thread-local values
	"""
	#end_pymotw_header
	
	import random
	import threading
	import logging
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	
	
	def show_value(data):
	    try:
	        val = data.value
	    except AttributeError:
	        logging.debug('No value yet')
	    else:
	        logging.debug('value=%s', val)
	
	def worker(data):
	    show_value(data)
	    data.value = random.randint(1, 100)
	    show_value(data)
	
	class MyLocal(threading.local):
	    def __init__(self, value):
	        logging.debug('Initializing %r', self)
	        self.value = value
	
	local_data = MyLocal(1000)
	show_value(local_data)
	
	for i in range(2):
	    t = threading.Thread(target=worker, args=(local_data,))
	    t.start()

snippet threading_local.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_local.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Keeping thread-local values
	"""
	#end_pymotw_header
	
	import random
	import threading
	import logging
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	
	def show_value(data):
	    try:
	        val = data.value
	    except AttributeError:
	        logging.debug('No value yet')
	    else:
	        logging.debug('value=%s', val)
	
	
	def worker(data):
	    show_value(data)
	    data.value = random.randint(1, 100)
	    show_value(data)
	
	local_data = threading.local()
	show_value(local_data)
	local_data.value = 1000
	show_value(local_data)
	
	for i in range(2):
	    t = threading.Thread(target=worker, args=(local_data,))
	    t.start()

snippet threading_lock_noblock.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_lock_noblock.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Using a Lock without blocking
	"""
	#end_pymotw_header
	
	import logging
	import threading
	import time
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	                    
	def lock_holder(lock):
	    logging.debug('Starting')
	    while True:
	        lock.acquire()
	        try:
	            logging.debug('Holding')
	            time.sleep(0.5)
	        finally:
	            logging.debug('Not holding')
	            lock.release()
	        time.sleep(0.5)
	    return
	                    
	def worker(lock):
	    logging.debug('Starting')
	    num_tries = 0
	    num_acquires = 0
	    while num_acquires < 3:
	        time.sleep(0.5)
	        logging.debug('Trying to acquire')
	        have_it = lock.acquire(0)
	        try:
	            num_tries += 1
	            if have_it:
	                logging.debug('Iteration %d: Acquired',
	                              num_tries)
	                num_acquires += 1
	            else:
	                logging.debug('Iteration %d: Not acquired',
	                              num_tries)
	        finally:
	            if have_it:
	                lock.release()
	    logging.debug('Done after %d iterations', num_tries)
	
	
	lock = threading.Lock()
	
	holder = threading.Thread(target=lock_holder,
	                          args=(lock,),
	                          name='LockHolder')
	holder.setDaemon(True)
	holder.start()
	
	worker = threading.Thread(target=worker,
	                          args=(lock,),
	                          name='Worker')
	worker.start()

snippet threading_lock.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_lock.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Controlling access to a resource using a Lock
	"""
	#end_pymotw_header
	
	import logging
	import random
	import threading
	import time
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	                    
	class Counter(object):
	    def __init__(self, start=0):
	        self.lock = threading.Lock()
	        self.value = start
	    def increment(self):
	        logging.debug('Waiting for lock')
	        self.lock.acquire()
	        try:
	            logging.debug('Acquired lock')
	            self.value = self.value + 1
	        finally:
	            self.lock.release()
	
	def worker(c):
	    for i in range(2):
	        pause = random.random()
	        logging.debug('Sleeping %0.02f', pause)
	        time.sleep(pause)
	        c.increment()
	    logging.debug('Done')
	
	counter = Counter()
	for i in range(2):
	    t = threading.Thread(target=worker, args=(counter,))
	    t.start()
	
	logging.debug('Waiting for worker threads')
	main_thread = threading.currentThread()
	for t in threading.enumerate():
	    if t is not main_thread:
	        t.join()
	logging.debug('Counter: %d', counter.value)

snippet threading_lock_reacquire.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_lock_reacquire.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Normal locks cannot be acquired more than once, even by the same thread
	"""
	#end_pymotw_header
	
	import threading
	
	lock = threading.Lock()
	
	print 'First try :', lock.acquire()
	print 'Second try:', lock.acquire(0)

snippet threading_lock_with.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_lock_with.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Locking via the 'with' statement
	"""
	#end_pymotw_header
	import threading
	import logging
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	
	def worker_with(lock):
	    with lock:
	        logging.debug('Lock acquired via with')
	        
	def worker_no_with(lock):
	    lock.acquire()
	    try:
	        logging.debug('Lock acquired directly')
	    finally:
	        lock.release()
	
	lock = threading.Lock()
	w = threading.Thread(target=worker_with, args=(lock,))
	nw = threading.Thread(target=worker_no_with, args=(lock,))
	
	w.start()
	nw.start()

snippet threading_names_log.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_names_log.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Using thread names in logs
	"""
	#end_pymotw_header
	
	import logging
	import threading
	import time
	
	logging.basicConfig(
	    level=logging.DEBUG,
	    format='[%(levelname)s] (%(threadName)-10s) %(message)s',
	    )
	
	def worker():
	    logging.debug('Starting')
	    time.sleep(2)
	    logging.debug('Exiting')
	
	def my_service():
	    logging.debug('Starting')
	    time.sleep(3)
	    logging.debug('Exiting')
	
	t = threading.Thread(name='my_service', target=my_service)
	w = threading.Thread(name='worker', target=worker)
	w2 = threading.Thread(target=worker) # use default name
	
	w.start()
	w2.start()
	t.start()

snippet threading_names.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_names.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Naming threads
	"""
	#end_pymotw_header
	
	import threading
	import time
	
	def worker():
	    print threading.currentThread().getName(), 'Starting'
	    time.sleep(2)
	    print threading.currentThread().getName(), 'Exiting'
	
	def my_service():
	    print threading.currentThread().getName(), 'Starting'
	    time.sleep(3)
	    print threading.currentThread().getName(), 'Exiting'
	
	t = threading.Thread(name='my_service', target=my_service)
	w = threading.Thread(name='worker', target=worker)
	w2 = threading.Thread(target=worker) # use default name
	
	w.start()
	w2.start()
	t.start()

snippet threading_rlock.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_rlock.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Re-entrant locks
	"""
	#end_pymotw_header
	
	import threading
	
	lock = threading.RLock()
	
	print 'First try :', lock.acquire()
	print 'Second try:', lock.acquire(0)

snippet threading_semaphore.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_semaphore.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Multiple concurrent access to a resource
	"""
	#end_pymotw_header
	import logging
	import random
	import threading
	import time
	
	logging.basicConfig(
	    level=logging.DEBUG,
	    format='%(asctime)s (%(threadName)-2s) %(message)s',
	    )
	
	class ActivePool(object):
	    def __init__(self):
	        super(ActivePool, self).__init__()
	        self.active = []
	        self.lock = threading.Lock()
	    def makeActive(self, name):
	        with self.lock:
	            self.active.append(name)
	            logging.debug('Running: %s', self.active)
	    def makeInactive(self, name):
	        with self.lock:
	            self.active.remove(name)
	            logging.debug('Running: %s', self.active)
	
	def worker(s, pool):
	    logging.debug('Waiting to join the pool')
	    with s:
	        name = threading.currentThread().getName()
	        pool.makeActive(name)
	        time.sleep(0.1)
	        pool.makeInactive(name)
	
	pool = ActivePool()
	s = threading.Semaphore(2)
	for i in range(4):
	    t = threading.Thread(target=worker,
	                         name=str(i),
	                         args=(s, pool))
	    t.start()

snippet threading_simpleargs.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_simpleargs.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Passing arguments to threads when they are created
	"""
	#end_pymotw_header
	
	import threading
	
	def worker(num):
	    """thread worker function"""
	    print 'Worker: %s' % num
	    return
	
	threads = []
	for i in range(5):
	    t = threading.Thread(target=worker, args=(i,))
	    threads.append(t)
	    t.start()

snippet threading_simple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_simple.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Creating and waiting for a thread.
	"""
	#end_pymotw_header
	
	import threading
	
	def worker():
	    """thread worker function"""
	    print 'Worker'
	    return
	
	threads = []
	for i in range(5):
	    t = threading.Thread(target=worker)
	    threads.append(t)
	    t.start()

snippet threading_subclass_args.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_subclass_args.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Subclassing Thread to create your own thread types.
	"""
	#end_pymotw_header
	
	import threading
	import logging
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	
	class MyThreadWithArgs(threading.Thread):
	
	    def __init__(self, group=None, target=None, name=None,
	                 args=(), kwargs=None, verbose=None):
	        threading.Thread.__init__(self, group=group,
	                                  target=target,
	                                  name=name,
	                                  verbose=verbose)
	        self.args = args
	        self.kwargs = kwargs
	        return
	
	    def run(self):
	        logging.debug('running with %s and %s',
	                      self.args, self.kwargs)
	        return
	
	for i in range(5):
	    t = MyThreadWithArgs(args=(i,),
	                         kwargs={'a':'A', 'b':'B'})
	    t.start()

snippet threading_subclass.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_subclass.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Subclassing Thread to create your own thread types.
	"""
	#end_pymotw_header
	
	import threading
	import logging
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	
	class MyThread(threading.Thread):
	
	    def run(self):
	        logging.debug('running')
	        return
	
	for i in range(5):
	    t = MyThread()
	    t.start()

snippet threading_timer.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/threading_timer.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Starting a thread after an initial delay
	"""
	#end_pymotw_header
	
	import threading
	import time
	import logging
	
	logging.basicConfig(level=logging.DEBUG,
	                    format='(%(threadName)-10s) %(message)s',
	                    )
	
	def delayed():
	    logging.debug('worker running')
	    return
	
	t1 = threading.Timer(3, delayed)
	t1.setName('t1')
	t2 = threading.Timer(3, delayed)
	t2.setName('t2')
	
	logging.debug('starting timers')
	t1.start()
	t2.start()
	
	logging.debug('waiting before canceling %s', t2.getName())
	time.sleep(2)
	logging.debug('canceling %s', t2.getName())
	t2.cancel()
	logging.debug('done')

snippet time_clock.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/time_clock.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""The difference between clock and time.
	"""
	#end_pymotw_header
	
	import hashlib
	import time
	
	# Data to use to calculate md5 checksums
	data = open(__file__, 'rt').read()
	
	for i in range(5):
	    h = hashlib.sha1()
	    print time.ctime(), ': %0.3f %0.3f' % (time.time(), time.clock())
	    for i in range(300000):
	        h.update(data)
	    cksum = h.digest()

snippet time_clock_sleep.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/time_clock_sleep.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import time
	
	for i in range(6, 1, -1):
	    print '%s %0.2f %0.2f' % (time.ctime(),
	                              time.time(),
	                              time.clock())
	    print 'Sleeping', i
	    time.sleep(i)

snippet time_ctime.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/time_ctime.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import time
	
	print 'The time is      :', time.ctime()
	later = time.time() + 15
	print '15 secs from now :', time.ctime(later) 
snippet timeit_dictionary.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/timeit_dictionary.py
	#!/usr/bin/env python
	
	"""Example of using timeit programatically.
	
	Time various ways to populate and check a dictionary using a long list
	of strings and integers.
	"""
	#end_pymotw_header
	
	import timeit
	import sys
	
	# A few constants
	range_size=1000
	count=1000
	setup_statement = "l = [ (str(x), x) for x in range(1000) ]; d = {}"
	
	def show_results(result):
	    "Print results in terms of microseconds per pass and per item."
	    global count, range_size
	    per_pass = 1000000 * (result / count)
	    print '%.2f usec/pass' % per_pass,
	    per_item = per_pass / range_size
	    print '%.2f usec/item' % per_item
	
	print "%d items" % range_size
	print "%d iterations" % count
	print
	
	# Using __setitem__ without checking for existing values first
	print '__setitem__:',
	t = timeit.Timer("""
	for s, i in l:
	    d[s] = i
	""", 
	setup_statement)
	show_results(t.timeit(number=count))
	
	# Using setdefault
	print 'setdefault :',
	t = timeit.Timer("""
	for s, i in l:
	    d.setdefault(s, i)
	""",
	setup_statement)
	show_results(t.timeit(number=count))
	
	# Using has_key
	print 'has_key    :',
	t = timeit.Timer("""
	for s, i in l:
	    if not d.has_key(s):
	        d[s] = i
	""", 
	setup_statement)
	show_results(t.timeit(number=count))
	
	# Using exceptions
	print 'KeyError   :',
	t = timeit.Timer("""
	for s, i in l:
	    try:
	        existing = d[s]
	    except KeyError:
	        d[s] = i
	""", 
	setup_statement)
	show_results(t.timeit(number=count))
	
	# Using "in"
	print '"not in"   :',
	t = timeit.Timer("""
	for s, i in l:
	    if s not in d:
	        d[s] = i
	""", 
	setup_statement)
	show_results(t.timeit(number=count))
	

snippet timeit_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/timeit_example.py
	
	"""Example of using timeit programatically.
	
	Time various ways to populate and check a dictionary using a long list
	of strings and integers.
	"""
	
	__version__ = "$Id$"
	
	import timeit
	
	t = timeit.Timer("print 'main statement'", "print 'setup'")
	
	print 'TIMEIT:'
	print t.timeit(2)
	
	print 'REPEAT:'
	print t.repeat(3, 2)

snippet timeit_setitem.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/timeit_setitem.py
	
	"""
	
	"""
	
	__version__ = "$Id$"
	
	def test_setitem(range_size=1000):
	    l = [ (str(x), x) for x in range(range_size) ]
	    d = {}
	    for s, i in l:
	        d[s] = i

snippet time_strptime.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/time_strptime.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import time
	
	def show_struct(s):
	    print '  tm_year :', s.tm_year
	    print '  tm_mon  :', s.tm_mon
	    print '  tm_mday :', s.tm_mday
	    print '  tm_hour :', s.tm_hour
	    print '  tm_min  :', s.tm_min
	    print '  tm_sec  :', s.tm_sec
	    print '  tm_wday :', s.tm_wday
	    print '  tm_yday :', s.tm_yday
	    print '  tm_isdst:', s.tm_isdst
	
	now = time.ctime()
	print 'Now:', now
	
	parsed = time.strptime(now)
	print '\nParsed:'
	show_struct(parsed)
	
	print '\nFormatted:', time.strftime("%a %b %d %H:%M:%S %Y", parsed)

snippet time_struct.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/time_struct.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import time
	
	def show_struct(s):
	    print '  tm_year :', s.tm_year
	    print '  tm_mon  :', s.tm_mon
	    print '  tm_mday :', s.tm_mday
	    print '  tm_hour :', s.tm_hour
	    print '  tm_min  :', s.tm_min
	    print '  tm_sec  :', s.tm_sec
	    print '  tm_wday :', s.tm_wday
	    print '  tm_yday :', s.tm_yday
	    print '  tm_isdst:', s.tm_isdst
	
	print 'gmtime:'
	show_struct(time.gmtime())
	print '\nlocaltime:'
	show_struct(time.localtime())
	print '\nmktime:', time.mktime(time.localtime())

snippet time_time.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/time_time.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import time
	
	print 'The time is:', time.time() 
snippet time_timezone.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/time_timezone.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import time
	import os
	
	def show_zone_info():
	    print '  TZ    :', os.environ.get('TZ', '(not set)')
	    print '  tzname:', time.tzname
	    print '  Zone  : %d (%d)' % (time.timezone,
	                                 (time.timezone / 3600))
	    print '  DST   :', time.daylight
	    print '  Time  :', time.ctime()
	    print
	
	print 'Default :'
	show_zone_info()
	
	ZONES = [ 'GMT',
	          'Europe/Amsterdam',
	          ]
	
	for zone in ZONES:
	    os.environ['TZ'] = zone
	    time.tzset()
	    print zone, ':'
	    show_zone_info()

snippet trace_run.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/trace_run.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import trace
	from trace_example.recurse import recurse
	
	tracer = trace.Trace(count=False, trace=True)
	tracer.run('recurse(2)')

snippet traceback_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/traceback_example.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import traceback
	import sys
	
	def produce_exception(recursion_level=2):
	    sys.stdout.flush()
	    if recursion_level:
	        produce_exception(recursion_level-1)
	    else:
	        raise RuntimeError()
	
	def call_function(f, recursion_level=2):
	    if recursion_level:
	        return call_function(f, recursion_level-1)
	    else:
	        return f()

snippet traceback_extract_stack.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/traceback_extract_stack.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import traceback
	import sys
	import os
	
	from traceback_example import call_function
	
	def f():
	    return traceback.extract_stack()
	
	stack = call_function(f)
	for filename, linenum, funcname, source in stack:
	    print '%-26s:%s "%s" in %s()' % \
	        (os.path.basename(filename), linenum, source, funcname)

snippet traceback_extract_tb.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/traceback_extract_tb.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import traceback
	import sys
	import os
	from traceback_example import produce_exception
	
	try:
	    produce_exception()
	except Exception, err:
	    print 'format_exception():'
	    exc_type, exc_value, exc_tb = sys.exc_info()
	    for tb_info in traceback.extract_tb(exc_tb):
	        filename, linenum, funcname, source = tb_info
	        print '%-23s:%s "%s" in %s()' % \
	            (os.path.basename(filename),
	             linenum,
	             source,
	             funcname)

snippet traceback_format_exception.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/traceback_format_exception.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import traceback
	import sys
	from pprint import pprint
	
	from traceback_example import produce_exception
	
	try:
	    produce_exception()
	except Exception, err:
	    print 'format_exception():'
	    exc_type, exc_value, exc_tb = sys.exc_info()
	    pprint(traceback.format_exception(exc_type, exc_value, exc_tb))

snippet traceback_format_exc.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/traceback_format_exc.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import traceback
	import sys
	
	from traceback_example import produce_exception
	
	try:
	    produce_exception()
	except Exception, err:
	    print 'format_exc():'
	    print traceback.format_exc() 
snippet traceback_format_stack.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/traceback_format_stack.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import traceback
	import sys
	from pprint import pprint
	
	from traceback_example import call_function
	
	def f():
	    return traceback.format_stack()
	
	formatted_stack = call_function(f)
	pprint(formatted_stack)

snippet traceback_print_exception.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/traceback_print_exception.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import traceback
	import sys
	
	from traceback_example import produce_exception
	
	try:
	    produce_exception()
	except Exception, err:
	    print 'print_exception():'
	    exc_type, exc_value, exc_tb = sys.exc_info()
	    traceback.print_exception(exc_type, exc_value, exc_tb)

snippet traceback_print_exc.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/traceback_print_exc.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import traceback
	import sys
	
	from traceback_example import produce_exception
	
	print 'print_exc() with no exception:'
	traceback.print_exc(file=sys.stdout)
	print
	
	try:
	    produce_exception()
	except Exception, err:
	    print 'print_exc():'
	    traceback.print_exc(file=sys.stdout)
	    print
	    print 'print_exc(1):'
	    traceback.print_exc(limit=1, file=sys.stdout)

snippet traceback_print_stack.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/traceback_print_stack.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import traceback
	import sys
	
	from traceback_example import call_function
	
	def f():
	    traceback.print_stack(file=sys.stdout)
	
	print 'Calling f() directly:'
	f()
	
	print
	print 'Calling f() from 3 levels deep:'
	call_function(f)

snippet traceback_print_tb.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/traceback_print_tb.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import traceback
	import sys
	
	from traceback_example import produce_exception
	
	try:
	    produce_exception()
	except Exception, err:
	    print 'print_tb():'
	    exc_type, exc_value, exc_tb = sys.exc_info()
	    traceback.print_tb(exc_tb)

snippet trace_CoverageResults.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/trace_CoverageResults.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import trace
	from trace_example.recurse import recurse
	
	tracer = trace.Trace(count=True, trace=False)
	tracer.runfunc(recurse, 2)
	
	results = tracer.results()
	results.write_results(coverdir='coverdir2')

snippet trace_report.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/trace_report.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import trace
	from trace_example.recurse import recurse
	
	tracer = trace.Trace(count=True,
	                     trace=False,
	                     outfile='trace_report.dat')
	tracer.runfunc(recurse, 2)
	
	report_tracer = trace.Trace(count=False,
	                            trace=False,
	                            infile='trace_report.dat')
	results = tracer.results()
	results.write_results(summary=True, coverdir='/tmp')

snippet trace_runfunc.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/trace_runfunc.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import trace
	from trace_example.recurse import recurse
	
	tracer = trace.Trace(count=False, trace=True)
	tracer.runfunc(recurse, 2)

snippet unittest_almostequal.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/unittest_almostequal.py
	
	"""Test for near equality
	
	"""
	
	import unittest
	
	class AlmostEqualTest(unittest.TestCase):
	
	    def testEqual(self):
	        self.failUnlessEqual(1.1, 3.3-2.2)
	
	    def testAlmostEqual(self):
	        self.failUnlessAlmostEqual(1.1, 3.3-2.2, places=1)
	
	    def testNotAlmostEqual(self):
	        self.failIfAlmostEqual(1.1, 3.3-2.0, places=1)
	
	if __name__ == '__main__':
	    unittest.main()

snippet unittest_equality.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/unittest_equality.py
	
	"""Test for equality
	
	"""
	
	import unittest
	
	class EqualityTest(unittest.TestCase):
	
	    def testExpectEqual(self):
	        self.failUnlessEqual(1, 3-2)
	
	    def testExpectEqualFails(self):
	        self.failUnlessEqual(2, 3-2)
	
	    def testExpectNotEqual(self):
	        self.failIfEqual(2, 3-2)
	
	    def testExpectNotEqualFails(self):
	        self.failIfEqual(1, 3-2)
	
	if __name__ == '__main__':
	    unittest.main()

snippet unittest_exception.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/unittest_exception.py
	
	"""Unit tests to verify exceptions.
	
	"""
	
	import unittest
	
	def raises_error(*args, **kwds):
	    raise ValueError('Invalid value: ' + str(args) + str(kwds))
	
	class ExceptionTest(unittest.TestCase):
	
	    def testTrapLocally(self):
	        try:
	            raises_error('a', b='c')
	        except ValueError:
	            pass
	        else:
	            self.fail('Did not see ValueError')
	
	    def testFailUnlessRaises(self):
	        self.failUnlessRaises(ValueError, raises_error, 'a', b='c')
	
	if __name__ == '__main__':
	    unittest.main()

snippet unittest_failwithmessage.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/unittest_failwithmessage.py
	
	"""A test that fails with a custom message.
	
	"""
	
	import unittest
	
	class FailureMessageTest(unittest.TestCase):
	
	    def testFail(self):
	        self.failIf(True, 'failure message goes here')
	
	if __name__ == '__main__':
	    unittest.main()

snippet unittest_fixtures.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/unittest_fixtures.py
	
	"""A test with fixtures.
	
	"""
	
	import unittest
	
	class FixturesTest(unittest.TestCase):
	
	    def setUp(self):
	        print 'In setUp()'
	        self.fixture = range(1, 10)
	
	    def tearDown(self):
	        print 'In tearDown()'
	        del self.fixture
	
	    def test(self):
	        print 'In test()'
	        self.failUnlessEqual(self.fixture, range(1, 10))
	
	if __name__ == '__main__':
	    unittest.main()

snippet unittest_outcomes.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/unittest_outcomes.py
	
	"""Demonstrate possible test outcomes
	
	"""
	
	import unittest
	
	class OutcomesTest(unittest.TestCase):
	
	    def testPass(self):
	        return
	
	    def testFail(self):
	        self.failIf(True)
	
	    def testError(self):
	        raise RuntimeError('Test error!')
	
	if __name__ == '__main__':
	    unittest.main()

snippet unittest_simple.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/unittest_simple.py
	
	"""Simplistic examples of unit tests.
	
	"""
	
	import unittest
	
	class SimplisticTest(unittest.TestCase):
	
	    def test(self):
	        self.failUnless(True)
	
	if __name__ == '__main__':
	    unittest.main()

snippet unittest_truth.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/unittest_truth.py
	
	"""Test for truth
	
	"""
	
	import unittest
	
	class TruthTest(unittest.TestCase):
	
	    def testFailUnless(self):
	        self.failUnless(True)
	
	    def testAssertTrue(self):
	        self.assertTrue(True)
	
	    def testFailIf(self):
	        self.failIf(False)
	
	    def testAssertFalse(self):
	        self.assertFalse(False)
	
	if __name__ == '__main__':
	    unittest.main()

snippet urllib2_http_get_args.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib2_http_get_args.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import urllib
	import urllib2
	
	query_args = { 'q':'query string', 'foo':'bar' }
	encoded_args = urllib.urlencode(query_args)
	print 'Encoded:', encoded_args
	
	url = 'http://localhost:8080/?' + encoded_args
	print urllib2.urlopen(url).read()

snippet urllib2_nfs_handler.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib2_nfs_handler.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2009 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import mimetypes
	import os
	import tempfile
	import urllib
	import urllib2
	
	class NFSFile(file):
	    def __init__(self, tempdir, filename):
	        self.tempdir = tempdir
	        file.__init__(self, filename, 'rb')
	    def close(self):
	        print 'NFSFile:'
	        print '  unmounting %s' % os.path.basename(self.tempdir)
	        print '  when %s is closed' % os.path.basename(self.name)
	        return file.close(self)
	
	class FauxNFSHandler(urllib2.BaseHandler):
	    
	    def __init__(self, tempdir):
	        self.tempdir = tempdir
	    
	    def nfs_open(self, req):
	        url = req.get_selector()
	        directory_name, file_name = os.path.split(url)
	        server_name = req.get_host()
	        print 'FauxNFSHandler simulating mount:'
	        print '  Remote path: %s' % directory_name
	        print '  Server     : %s' % server_name
	        print '  Local path : %s' % os.path.basename(tempdir)
	        print '  Filename   : %s' % file_name
	        local_file = os.path.join(tempdir, file_name)
	        fp = NFSFile(tempdir, local_file)
	        content_type = ( mimetypes.guess_type(file_name)[0]
	                         or
	                         'application/octet-stream'
	                         )
	        stats = os.stat(local_file)
	        size = stats.st_size
	        headers = { 'Content-type': content_type,
	                    'Content-length': size,
	                  }
	        return urllib.addinfourl(fp, headers, req.get_full_url())
	
	if __name__ == '__main__':
	    tempdir = tempfile.mkdtemp()
	    try:
	        # Populate the temporary file for the simulation
	        with open(os.path.join(tempdir, 'file.txt'), 'wt') as f:
	            f.write('Contents of file.txt')
	        
	        # Construct an opener with our NFS handler
	        # and register it as the default opener.
	        opener = urllib2.build_opener(FauxNFSHandler(tempdir))
	        urllib2.install_opener(opener)
	
	        # Open the file through a URL.
	        response = urllib2.urlopen(
	            'nfs://remote_server/path/to/the/file.txt'
	            )
	        print
	        print 'READ CONTENTS:', response.read()
	        print 'URL          :', response.geturl()
	        print 'HEADERS:'
	        for name, value in sorted(response.info().items()):
	            print '  %-15s = %s' % (name, value)
	        response.close()
	    finally:
	        os.remove(os.path.join(tempdir, 'file.txt'))
	        os.removedirs(tempdir)

snippet urllib2_request_header.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib2_request_header.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Simple example with urllib2.urlopen().
	"""
	#end_pymotw_header
	
	import urllib2
	
	request = urllib2.Request('http://localhost:8080/')
	request.add_header(
	    'User-agent',
	    'PyMOTW (http://www.doughellmann.com/PyMOTW/)',
	    )
	
	response = urllib2.urlopen(request)
	data = response.read()
	print data

snippet urllib2_request_post.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib2_request_post.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import urllib
	import urllib2
	
	query_args = { 'q':'query string', 'foo':'bar' }
	
	request = urllib2.Request('http://localhost:8080/')
	print 'Request method before data:', request.get_method()
	
	request.add_data(urllib.urlencode(query_args))
	print 'Request method after data :', request.get_method()
	request.add_header(
	    'User-agent',
	    'PyMOTW (http://www.doughellmann.com/PyMOTW/)',
	    )
	
	print
	print 'OUTGOING DATA:'
	print request.get_data()
	
	print
	print 'SERVER RESPONSE:'
	print urllib2.urlopen(request).read()

snippet urllib2_upload_files.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib2_upload_files.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import itertools
	import mimetools
	import mimetypes
	from cStringIO import StringIO
	import urllib
	import urllib2
	
	class MultiPartForm(object):
	    """Accumulate the data to be used when posting a form."""
	
	    def __init__(self):
	        self.form_fields = []
	        self.files = []
	        self.boundary = mimetools.choose_boundary()
	        return
	    
	    def get_content_type(self):
	        return 'multipart/form-data; boundary=%s' % self.boundary
	
	    def add_field(self, name, value):
	        """Add a simple field to the form data."""
	        self.form_fields.append((name, value))
	        return
	
	    def add_file(self, fieldname, filename, fileHandle,
	                 mimetype=None):
	        """Add a file to be uploaded."""
	        body = fileHandle.read()
	        if mimetype is None:
	            mimetype = ( mimetypes.guess_type(filename)[0]
	                         or
	                         'application/octet-stream'
	                         )
	        self.files.append((fieldname, filename, mimetype, body))
	        return
	    
	    def __str__(self):
	        """Return a string representing the form data,
	        including attached files.
	        """
	        # Build a list of lists, each containing "lines" of the
	        # request.  Each part is separated by a boundary string.
	        # Once the list is built, return a string where each
	        # line is separated by '\r\n'.  
	        parts = []
	        part_boundary = '--' + self.boundary
	        
	        # Add the form fields
	        parts.extend(
	            [ part_boundary,
	              'Content-Disposition: form-data; name="%s"' % name,
	              '',
	              value,
	            ]
	            for name, value in self.form_fields
	            )
	        
	        # Add the files to upload
	        parts.extend([
	            part_boundary,
	            'Content-Disposition: file; name="%s"; filename="%s"' % \
	               (field_name, filename),
	            'Content-Type: %s' % content_type,
	            '',
	            body,
	          ]
	          for field_name, filename, content_type, body in self.files
	          )
	        
	        # Flatten the list and add closing boundary marker, and
	        # then return CR+LF separated data
	        flattened = list(itertools.chain(*parts))
	        flattened.append('--' + self.boundary + '--')
	        flattened.append('')
	        return '\r\n'.join(flattened)
	
	if __name__ == '__main__':
	    # Create the form with simple fields
	    form = MultiPartForm()
	    form.add_field('firstname', 'Doug')
	    form.add_field('lastname', 'Hellmann')
	    
	    # Add a fake file
	    form.add_file(
	        'biography', 'bio.txt', 
	        fileHandle=StringIO('Python developer and blogger.'))
	
	    # Build the request
	    request = urllib2.Request('http://localhost:8080/')
	    request.add_header(
	        'User-agent',
	        'PyMOTW (http://www.doughellmann.com/PyMOTW/)')
	    body = str(form)
	    request.add_header('Content-type', form.get_content_type())
	    request.add_header('Content-length', len(body))
	    request.add_data(body)
	
	    print
	    print 'OUTGOING DATA:'
	    print request.get_data()
	
	    print
	    print 'SERVER RESPONSE:'
	    print urllib2.urlopen(request).read()

snippet urllib2_urlopen_iterator.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib2_urlopen_iterator.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Simple example with urllib.urlopen().
	"""
	#end_pymotw_header
	
	import urllib2
	
	response = urllib2.urlopen('http://localhost:8080/')
	for line in response:
	    print line.rstrip()

snippet urllib2_urlopen_post.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib2_urlopen_post.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import urllib
	import urllib2
	
	query_args = { 'q':'query string', 'foo':'bar' }
	encoded_args = urllib.urlencode(query_args)
	url = 'http://localhost:8080/'
	print urllib2.urlopen(url, encoded_args).read()

snippet urllib2_urlopen.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib2_urlopen.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Simple example with urllib2.urlopen().
	"""
	#end_pymotw_header
	
	import urllib2
	
	response = urllib2.urlopen('http://localhost:8080/')
	print 'RESPONSE:', response
	print 'URL     :', response.geturl()
	
	headers = response.info()
	print 'DATE    :', headers['date']
	print 'HEADERS :'
	print '---------'
	print headers
	
	data = response.read()
	print 'LENGTH  :', len(data)
	print 'DATA    :'
	print '---------'
	print data

snippet urllib_pathnames.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib_pathnames.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import os
	
	from urllib import pathname2url, url2pathname
	
	print '== Default =='
	path = '/a/b/c'
	print 'Original:', path
	print 'URL     :', pathname2url(path)
	print 'Path    :', url2pathname('/d/e/f')
	print
	
	from nturl2path import pathname2url, url2pathname
	
	print '== Windows, without drive letter =='
	path = r'\a\b\c'
	print 'Original:', path
	print 'URL     :', pathname2url(path)
	print 'Path    :', url2pathname('/d/e/f')
	print
	
	print '== Windows, with drive letter =='
	path = r'C:\a\b\c'
	print 'Original:', path
	print 'URL     :', pathname2url(path)
	print 'Path    :', url2pathname('/d/e/f')

snippet urllib_quote.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib_quote.py
	
	import urllib.parse
	import urllib.request
	
	url = "http://www.maibiaoku.com/Trademark/lmVwlpdoa2s="
	
	print('urlencode() :', urllib.parse.urlencode({'url': url}))
	print('quote()     :', urllib.request.quote(url))
	print('quote_plus():', urllib.request.quote(urllib.request.quote(url)))

snippet urllib_unquote.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib_unquote.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import urllib
	
	print urllib.unquote('http%3A//localhost%3A8080/%7Edhellmann/')
	print urllib.unquote_plus(
	    'http%3A%2F%2Flocalhost%3A8080%2F%7Edhellmann%2F'
	    )

snippet urllib_urlencode_doseq.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib_urlencode_doseq.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import urllib
	
	query_args = { 'foo':['foo1', 'foo2'] }
	print 'Single  :', urllib.urlencode(query_args)
	print 'Sequence:', urllib.urlencode(query_args, doseq=True  )
	

snippet urllib_urlencode.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib_urlencode.py
	
	import urllib.parse
	import urllib.request
	
	query_args = {'appCnName': '华为终端有限公司', 'foo': 'bar'}
	encoded_args = urllib.parse.urlencode(query_args)
	print('Encoded:', encoded_args)
	
	url = 'http://localhost:8080/?' + encoded_args
	print(url)
	print()
	print(urllib.request.quote(urllib.request.quote("华为终端有限公司")))

snippet urllib_urlopen_iterator.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib_urlopen_iterator.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Simple example with urllib.urlopen().
	"""
	#end_pymotw_header
	
	import urllib
	
	response = urllib.urlopen('http://localhost:8080/')
	for line in response:
	    print line.rstrip()

snippet urllib_urlopen_post.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib_urlopen_post.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import urllib
	
	query_args = { 'q':'query string', 'foo':'bar' }
	encoded_args = urllib.urlencode(query_args)
	url = 'http://localhost:8080/'
	print urllib.urlopen(url, encoded_args).read()

snippet urllib_urlopen.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib_urlopen.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Simple example with urllib.urlopen().
	"""
	#end_pymotw_header
	
	import urllib
	
	response = urllib.urlopen('http://localhost:8080/')
	print 'RESPONSE:', response
	print 'URL     :', response.geturl()
	
	headers = response.info()
	print 'DATE    :', headers['date']
	print 'HEADERS :'
	print '---------'
	print headers
	
	data = response.read()
	print 'LENGTH  :', len(data)
	print 'DATA    :'
	print '---------'
	print data 
snippet urllib_urlretrieve.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urllib_urlretrieve.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import urllib
	import os
	
	def reporthook(blocks_read, block_size, total_size):
	    """total_size is reported in bytes.
	    block_size is the amount read each time.
	    blocks_read is the number of blocks successfully read.
	    """
	    if not blocks_read:
	        print 'Connection opened'
	        return
	    if total_size < 0:
	        # Unknown size
	        print 'Read %d blocks (%d bytes)' % (blocks_read,
	                                             blocks_read * block_size)
	    else:
	        amount_read = blocks_read * block_size
	        print 'Read %d blocks, or %d/%d' % \
	            (blocks_read, amount_read, total_size)
	    return
	
	try:
	    filename, msg = urllib.urlretrieve(
	        'http://blog.doughellmann.com/',
	        reporthook=reporthook)
	    print
	    print 'File:', filename
	    print 'Headers:'
	    print msg
	    print 'File exists before cleanup:', os.path.exists(filename)
	
	finally:
	    urllib.urlcleanup()
	
	    print 'File still exists:', os.path.exists(filename)

snippet urlparse_geturl.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urlparse_geturl.py
	#!/usr/bin/env python
	"""Parsing URLs
	"""
	#end_pymotw_header
	
	from urlparse import urlparse
	
	original = 'http://netloc/path;param?query=arg#frag'
	print 'ORIG  :', original
	parsed = urlparse(original)
	print 'PARSED:', parsed.geturl()

snippet urlparse_urldefrag.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urlparse_urldefrag.py
	#!/usr/bin/env python
	"""Remove fragment portion of URL
	"""
	#end_pymotw_header
	
	from urlparse import urldefrag
	
	original = 'http://netloc/path;param?query=arg#frag'
	print 'original:', original
	url, fragment = urldefrag(original)
	print 'url     :', url
	print 'fragment:', fragment

snippet urlparse_urljoin.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urlparse_urljoin.py
	#!/usr/bin/env python
	"""Joining relative fragments into absolute URLs
	"""
	#end_pymotw_header
	
	from urlparse import urljoin
	
	print urljoin('http://www.example.com/path/file.html',
	              'anotherfile.html')
	print urljoin('http://www.example.com/path/file.html',
	              '../anotherfile.html')

snippet urlparse_urljoin_with_path.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urlparse_urljoin_with_path.py
	#!/usr/bin/env python
	"""Joining fragments into absolute URLs
	"""
	#end_pymotw_header
	
	from urlparse import urljoin
	
	print urljoin('http://www.example.com/path/',
	              '/subpath/file.html')
	print urljoin('http://www.example.com/path/',
	              'subpath/file.html')

snippet urlparse_urlparseattrs.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urlparse_urlparseattrs.py
	#!/usr/bin/env python
	"""Parsing URLs
	"""
	#end_pymotw_header
	
	from urlparse import urlparse
	
	url = 'http://user:pwd@NetLoc:80/path;param?query=arg#frag'
	parsed = urlparse(url)
	print 'scheme  :', parsed.scheme
	print 'netloc  :', parsed.netloc
	print 'path    :', parsed.path
	print 'params  :', parsed.params
	print 'query   :', parsed.query
	print 'fragment:', parsed.fragment
	print 'username:', parsed.username
	print 'password:', parsed.password
	print 'hostname:', parsed.hostname, '(netloc in lowercase)'
	print 'port    :', parsed.port

snippet urlparse_urlparse.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urlparse_urlparse.py
	#!/usr/bin/env python
	"""Parsing URLs
	"""
	#end_pymotw_header
	
	from urlparse import urlparse
	
	url = 'http://netloc/path;param?query=arg#frag'
	parsed = urlparse(url)
	print parsed

snippet urlparse_urlsplit.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urlparse_urlsplit.py
	#!/usr/bin/env python
	"""Parsing URLs
	"""
	#end_pymotw_header
	
	from urlparse import urlsplit
	
	url = 'http://user:pwd@NetLoc:80/p1;param/p2;param?query=arg#frag'
	parsed = urlsplit(url)
	print parsed
	print 'scheme  :', parsed.scheme
	print 'netloc  :', parsed.netloc
	print 'path    :', parsed.path
	print 'query   :', parsed.query
	print 'fragment:', parsed.fragment
	print 'username:', parsed.username
	print 'password:', parsed.password
	print 'hostname:', parsed.hostname, '(netloc in lowercase)'
	print 'port    :', parsed.port

snippet urlparse_urlunparseextra.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urlparse_urlunparseextra.py
	#!/usr/bin/env python
	"""Parsing URLs
	"""
	#end_pymotw_header
	
	from urlparse import urlparse, urlunparse
	
	original = 'http://netloc/path;?#'
	print 'ORIG  :', original
	parsed = urlparse(original)
	print 'PARSED:', type(parsed), parsed
	t = parsed[:]
	print 'TUPLE :', type(t), t
	print 'NEW   :', urlunparse(t)
	

snippet urlparse_urlunparse.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/urlparse_urlunparse.py
	#!/usr/bin/env python
	"""Parsing URLs
	"""
	#end_pymotw_header
	
	from urlparse import urlparse, urlunparse
	
	original = 'http://netloc/path;param?query=arg#frag'
	print 'ORIG  :', original
	parsed = urlparse(original)
	print 'PARSED:', type(parsed), parsed
	t = parsed[:]
	print 'TUPLE :', type(t), t
	print 'NEW   :', urlunparse(t)
	

snippet uuid_getnode.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/uuid_getnode.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import uuid
	
	print hex(uuid.getnode())

snippet uuid_uuid1_othermac.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/uuid_uuid1_othermac.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import uuid
	
	for node in [ 0x1ec200d9e0, 0x1e5274040e ]:
	    print uuid.uuid1(node), hex(node)

snippet uuid_uuid1.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/uuid_uuid1.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import uuid
	
	u = uuid.uuid1()
	
	print u
	print type(u)
	print 'bytes   :', repr(u.bytes)
	print 'hex     :', u.hex
	print 'int     :', u.int
	print 'urn     :', u.urn
	print 'variant :', u.variant
	print 'version :', u.version
	print 'fields  :', u.fields
	print '\ttime_low            : ', u.time_low
	print '\ttime_mid            : ', u.time_mid
	print '\ttime_hi_version     : ', u.time_hi_version
	print '\tclock_seq_hi_variant: ', u.clock_seq_hi_variant
	print '\tclock_seq_low       : ', u.clock_seq_low
	print '\tnode                : ', u.node
	print '\ttime                : ', u.time
	print '\tclock_seq           : ', u.clock_seq

snippet uuid_uuid1_repeat.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/uuid_uuid1_repeat.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import uuid
	
	for i in xrange(3):
	    print uuid.uuid1()

snippet uuid_uuid3_repeat.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/uuid_uuid3_repeat.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import uuid
	
	namespace_types = sorted(n
	                         for n in dir(uuid)
	                         if n.startswith('NAMESPACE_')
	                         )
	name = 'www.doughellmann.com'
	
	for namespace_type in namespace_types:
	    print namespace_type
	    namespace_uuid = getattr(uuid, namespace_type)
	    print ' ', uuid.uuid3(namespace_uuid, name)
	    print ' ', uuid.uuid3(namespace_uuid, name)
	    print

snippet uuid_uuid3_uuid5.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/uuid_uuid3_uuid5.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import uuid
	
	hostnames = ['www.doughellmann.com', 'blog.doughellmann.com']
	
	for name in hostnames:
	    print name
	    print '  MD5   :', uuid.uuid3(uuid.NAMESPACE_DNS, name)
	    print '  SHA-1 :', uuid.uuid5(uuid.NAMESPACE_DNS, name)
	    print

snippet uuid_uuid4.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/uuid_uuid4.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import uuid
	
	for i in xrange(3):
	    print uuid.uuid4()

snippet uuid_uuid_objects.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/uuid_uuid_objects.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import uuid
	
	def show(msg, l):
	    print msg
	    for v in l:
	        print ' ', v
	    print
	
	input_values = [ 
	    'urn:uuid:f2f84497-b3bf-493a-bba9-7c68e6def80b',
	    '{417a5ebb-01f7-4ed5-aeac-3d56cd5037b0}',
	    '2115773a-5bf1-11dd-ab48-001ec200d9e0',
	    ]
	
	show('input_values', input_values)
	
	uuids = [ uuid.UUID(s) for s in input_values ]
	show('converted to uuids', uuids)
	
	uuids.sort()
	show('sorted', uuids)

snippet warnings_filtering.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/warnings_filtering.py
	
	import warnings
	
	warnings.warn('Show this message')
	warnings.warn('Do not show this message')

snippet warnings_filterwarnings_lineno.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/warnings_filterwarnings_lineno.py
	
	import warnings
	
	warnings.filterwarnings('ignore',
	                        '.*',
	                        UserWarning,
	                        'warnings_filtering',
	                        13)
	
	import warnings_filtering

snippet warnings_filterwarnings_message.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/warnings_filterwarnings_message.py
	
	import warnings
	
	warnings.filterwarnings('ignore', '.*do not.*',)
	
	warnings.warn('Show this message')
	warnings.warn('Do not show this message')

snippet warnings_filterwarnings_module.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/warnings_filterwarnings_module.py
	
	import warnings
	
	warnings.filterwarnings('ignore',
	                        '.*',
	                        UserWarning,
	                        'warnings_filtering',
	                        )
	
	import warnings_filtering

snippet warnings_formatwarning.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/warnings_formatwarning.py
	
	import warnings
	
	def warning_on_one_line(message, category, filename, lineno,
	                        file=None, line=None):
	    return '-> %s:%s: %s:%s' % \
	        (filename, lineno, category.__name__, message)
	
	warnings.warn('Warning message, before')
	warnings.formatwarning = warning_on_one_line
	warnings.warn('Warning message, after')

snippet warnings_once.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/warnings_once.py
	
	import warnings
	
	warnings.simplefilter('once', UserWarning)
	
	warnings.warn('This is a warning!')
	warnings.warn('This is a warning!')
	warnings.warn('This is a warning!')

snippet warnings_repeated.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/warnings_repeated.py
	
	import warnings
	
	def function_with_warning():
	    warnings.warn('This is a warning!')
	
	
	function_with_warning()
	function_with_warning()
	function_with_warning()

snippet warnings_showwarning.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/warnings_showwarning.py
	
	import warnings
	import logging
	
	logging.basicConfig(level=logging.INFO)
	
	def send_warnings_to_log(message, category, filename, lineno, file=None):
	    logging.warning(
	        '%s:%s: %s:%s' %
	        (filename, lineno, category.__name__, message))
	
	
	old_showwarning = warnings.showwarning
	warnings.showwarning = send_warnings_to_log
	
	warnings.warn('message')

snippet warnings_warn.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/warnings_warn.py
	
	import warnings
	
	print('Before the warning')
	warnings.warn('This is a warning message')
	print('After the warning')

snippet warnings_warn_raise.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/warnings_warn_raise.py
	
	import warnings
	
	warnings.simplefilter('error', UserWarning)
	
	print('Before the warning')
	warnings.warn('This is a warning message')
	print('After the warning')

snippet warnings_warn_stacklevel.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/warnings_warn_stacklevel.py
	
	import warnings
	
	def old_function():
	    warnings.warn(
	        'old_function() is deprecated, use new_function() instead',
	        stacklevel=2)
	
	
	def caller_of_old_function():
	    old_function()
	
	
	caller_of_old_function()

snippet weakref_cycle.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/weakref_cycle.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Using proxy to prevent cycles.
	"""
	#end_pymotw_header
	
	import gc
	from pprint import pprint
	import weakref
	
	from weakref_graph import Graph, demo, collect_and_show_garbage
	
	gc.set_debug(gc.DEBUG_LEAK)
	
	print 'Setting up the cycle'
	print
	demo(Graph)
	
	print
	print 'Breaking the cycle and cleaning up garbage'
	print
	gc.garbage[0].set_next(None)
	while gc.garbage:
	    del gc.garbage[0]
	print
	collect_and_show_garbage()

snippet weakref_graph.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/weakref_graph.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Tools for demonstrating garbage collection
	"""
	#end_pymotw_header
	
	import gc
	from pprint import pprint
	import weakref
	
	class Graph(object):
	    def __init__(self, name):
	        self.name = name
	        self.other = None
	    def set_next(self, other):
	        print '%s.set_next(%r)' % (self.name, other)
	        self.other = other
	    def all_nodes(self):
	        "Generate the nodes in the graph sequence."
	        yield self
	        n = self.other
	        while n and n.name != self.name:
	            yield n
	            n = n.other
	        if n is self:
	            yield n
	        return
	    def __str__(self):
	        return '->'.join(n.name for n in self.all_nodes())
	    def __repr__(self):
	        return '<%s at 0x%x name=%s>' % (self.__class__.__name__,
	                                         id(self), self.name)
	    def __del__(self):
	        print '(Deleting %s)' % self.name
	        self.set_next(None)
	
	def collect_and_show_garbage():
	    "Show what garbage is present."
	    print 'Collecting...'
	    n = gc.collect()
	    print 'Unreachable objects:', n
	    print 'Garbage:', 
	    pprint(gc.garbage)
	
	def demo(graph_factory):
	    print 'Set up graph:'
	    one = graph_factory('one')
	    two = graph_factory('two')
	    three = graph_factory('three')
	    one.set_next(two)
	    two.set_next(three)
	    three.set_next(one)
	    
	    print
	    print 'Graph:'
	    print str(one)
	    collect_and_show_garbage()
	
	    print
	    three = None
	    two = None
	    print 'After 2 references removed:'
	    print str(one)
	    collect_and_show_garbage()
	
	    print
	    print 'Removing last reference:'
	    one = None
	    collect_and_show_garbage()

snippet weakref_proxy.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/weakref_proxy.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Using proxy instead of ref.
	"""
	#end_pymotw_header
	
	import weakref
	
	class ExpensiveObject(object):
	    def __init__(self, name):
	        self.name = name
	    def __del__(self):
	        print '(Deleting %s)' % self
	
	obj = ExpensiveObject('My Object')
	r = weakref.ref(obj)
	p = weakref.proxy(obj)
	
	print 'via obj:', obj.name
	print 'via ref:', r().name
	print 'via proxy:', p.name
	del obj
	print 'via proxy:', p.name

snippet weakref_ref_callback.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/weakref_ref_callback.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Example using weakref.ref to manage a reference to an object
	with a callback.
	"""
	#end_pymotw_header
	
	import weakref
	
	class ExpensiveObject(object):
	    def __del__(self):
	        print '(Deleting %s)' % self
	        
	def callback(reference):
	    """Invoked when referenced object is deleted"""
	    print 'callback(', reference, ')'
	
	obj = ExpensiveObject()
	r = weakref.ref(obj, callback)
	
	print 'obj:', obj
	print 'ref:', r
	print 'r():', r()
	
	print 'deleting obj'
	del obj
	print 'r():', r()

snippet weakref_ref.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/weakref_ref.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Example using weakref.ref to manage a reference to an object.
	"""
	#end_pymotw_header
	
	import weakref
	
	class ExpensiveObject(object):
	    def __del__(self):
	        print '(Deleting %s)' % self
	
	obj = ExpensiveObject()
	r = weakref.ref(obj)
	
	print 'obj:', obj
	print 'ref:', r
	print 'r():', r()
	
	print 'deleting obj'
	del obj
	print 'r():', r()

snippet weakref_valuedict.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/weakref_valuedict.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Demonstrate WeakValueDictionary.
	"""
	#end_pymotw_header
	
	import gc
	from pprint import pprint
	import weakref
	
	gc.set_debug(gc.DEBUG_LEAK)
	
	class ExpensiveObject(object):
	    def __init__(self, name):
	        self.name = name
	    def __repr__(self):
	        return 'ExpensiveObject(%s)' % self.name
	    def __del__(self):
	        print '    (Deleting %s)' % self
	        
	def demo(cache_factory):
	    # hold objects so any weak references 
	    # are not removed immediately
	    all_refs = {}
	    # create the cache using the factory
	    print 'CACHE TYPE:', cache_factory
	    cache = cache_factory()
	    for name in [ 'one', 'two', 'three' ]:
	        o = ExpensiveObject(name)
	        cache[name] = o
	        all_refs[name] = o
	        del o # decref
	
	    print '  all_refs =',
	    pprint(all_refs)
	    print '\n  Before, cache contains:', cache.keys()
	    for name, value in cache.items():
	        print '    %s = %s' % (name, value)
	        del value # decref
	        
	    # Remove all references to the objects except the cache
	    print '\n  Cleanup:'
	    del all_refs
	    gc.collect()
	
	    print '\n  After, cache contains:', cache.keys()
	    for name, value in cache.items():
	        print '    %s = %s' % (name, value)
	    print '  demo returning'
	    return
	
	demo(dict)
	print
	
	demo(weakref.WeakValueDictionary)

snippet weakref_weakgraph.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/weakref_weakgraph.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""Tools for demonstrating garbage collection
	"""
	#end_pymotw_header
	
	import gc
	from pprint import pprint
	import weakref
	
	from weakref_graph import Graph, demo
	
	class WeakGraph(Graph):
	    def set_next(self, other):
	        if other is not None:
	            # See if we should replace the reference
	            # to other with a weakref.
	            if self in other.all_nodes():
	                other = weakref.proxy(other)
	        super(WeakGraph, self).set_next(other)
	        return
	                
	demo(WeakGraph)

snippet whichdb_whichdb.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/whichdb_whichdb.py
	# -*- coding: utf-8 -*-
	
	import dbm
	
	db = dbm.open('test.db', 'n')
	db['key'] = 'value'
	db.close()
	
	print((dbm.whichdb('test.db')))

snippet xmlrpclib_Binary_pickle.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_Binary_pickle.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	import cPickle as pickle
	import pprint
	
	class MyObj:
	    def __init__(self, a, b):
	        self.a = a
	        self.b = b
	    def __repr__(self):
	        return 'MyObj(%s, %s)' % (repr(self.a), repr(self.b))
	
	server = xmlrpclib.ServerProxy('http://localhost:9000')
	
	o = MyObj(1, 'b goes here')
	print 'Local:', id(o)
	print o
	
	print '\nAs object:'
	pprint.pprint(server.show_type(o))
	
	p = pickle.dumps(o)
	b = xmlrpclib.Binary(p)
	r = server.send_back_binary(b)
	
	o2 = pickle.loads(r.data)
	print '\nFrom pickle:', id(o2)
	pprint.pprint(o2)

snippet xmlrpclib_Binary.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_Binary.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	
	server = xmlrpclib.ServerProxy('http://localhost:9000')
	
	s = 'This is a string with control characters' + '\0'
	print 'Local string:', s
	
	data = xmlrpclib.Binary(s)
	print 'As binary:', server.send_back_binary(data)
	
	try:
	    print 'As string:', server.show_type(s)
	except xmlrpclib.Fault as err:
	    print '\nERROR:', err

snippet xmlrpclib_exception.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_exception.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	
	server = xmlrpclib.ServerProxy('http://localhost:9000')
	try:
	    server.raises_exception('A message')
	except Exception, err:
	    print 'Fault code:', err.faultCode
	    print 'Message   :', err.faultString

snippet xmlrpclib_MultiCall_exception.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_MultiCall_exception.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	
	server = xmlrpclib.ServerProxy('http://localhost:9000')
	
	multicall = xmlrpclib.MultiCall(server)
	multicall.ping()
	multicall.show_type(1)
	multicall.raises_exception('Next to last call stops execution')
	multicall.show_type('string')
	
	try:
	    for i, r in enumerate(multicall()):
	        print i, r
	except xmlrpclib.Fault as err:
	    print 'ERROR:', err

snippet xmlrpclib_MultiCall.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_MultiCall.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	
	server = xmlrpclib.ServerProxy('http://localhost:9000')
	
	multicall = xmlrpclib.MultiCall(server)
	multicall.ping()
	multicall.show_type(1)
	multicall.show_type('string')
	
	for i, r in enumerate(multicall()):
	    print i, r

snippet xmlrpclib_ServerProxy_allow_none.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_ServerProxy_allow_none.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	
	server = xmlrpclib.ServerProxy('http://localhost:9000',
	                               allow_none=True)
	print 'Allowed:', server.show_type(None)
	
	server = xmlrpclib.ServerProxy('http://localhost:9000',
	                               allow_none=False)
	try:
	    server.show_type(None)
	except TypeError as err:
	    print 'ERROR:', err
	    

snippet xmlrpclib_ServerProxy_encoding.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_ServerProxy_encoding.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	
	server = xmlrpclib.ServerProxy('http://localhost:9000',
	                               encoding='ISO-8859-1')
	print 'Ping:', server.ping()

snippet xmlrpclib_ServerProxy.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_ServerProxy.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	
	server = xmlrpclib.ServerProxy('http://localhost:9000')
	print 'Ping:', server.ping()

snippet xmlrpclib_ServerProxy_use_datetime.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_ServerProxy_use_datetime.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	
	server = xmlrpclib.ServerProxy('http://localhost:9000', use_datetime=True)
	now = server.now()
	print 'With:', now, type(now), now.__class__.__name__
	
	server = xmlrpclib.ServerProxy('http://localhost:9000', use_datetime=False)
	now = server.now()
	print 'Without:', now, type(now), now.__class__.__name__

snippet xmlrpclib_ServerProxy_verbose.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_ServerProxy_verbose.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	
	server = xmlrpclib.ServerProxy('http://localhost:9000', verbose=True)
	print 'Ping:', server.ping()

snippet xmlrpclib_server.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_server.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	from SimpleXMLRPCServer import SimpleXMLRPCServer
	from xmlrpclib import Binary
	import datetime
	
	server = SimpleXMLRPCServer(('localhost', 9000),
	                            logRequests=True,
	                            allow_none=True)
	server.register_introspection_functions()
	server.register_multicall_functions()
	
	class ExampleService:
	    
	    def ping(self):
	        """Simple function to respond when called
	        to demonstrate connectivity.
	        """
	        return True
	        
	    def now(self):
	        """Returns the server current date and time."""
	        return datetime.datetime.now()
	
	    def show_type(self, arg):
	        """Illustrates how types are passed in and out of
	        server methods.
	        
	        Accepts one argument of any type.  
	        Returns a tuple with string representation of the value, 
	        the name of the type, and the value itself.
	        """
	        return (str(arg), str(type(arg)), arg)
	
	    def raises_exception(self, msg):
	        "Always raises a RuntimeError with the message passed in"
	        raise RuntimeError(msg)
	
	    def send_back_binary(self, bin):
	        """Accepts single Binary argument, and unpacks and
	        repacks it to return it."""
	        data = bin.data
	        response = Binary(data)
	        return response
	
	server.register_instance(ExampleService())
	
	try:
	    print 'Use Control-C to exit'
	    server.serve_forever()
	except KeyboardInterrupt:
	    print 'Exiting'

snippet xmlrpclib_types_nested.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_types_nested.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	import datetime
	import pprint
	
	server = xmlrpclib.ServerProxy('http://localhost:9000')
	
	data = { 'boolean':True, 
	         'integer': 1,
	         'floating-point number': 2.5,
	         'string': 'some text',
	         'datetime': datetime.datetime.now(),
	         'array': ['a', 'list'],
	         'array': ('a', 'tuple'),
	         'structure': {'a':'dictionary'},
	         }
	arg = []
	for i in range(3):
	    d = {}
	    d.update(data)
	    d['integer'] = i
	    arg.append(d)
	
	print 'Before:'
	pprint.pprint(arg)
	
	print
	print 'After:'
	pprint.pprint(server.show_type(arg)[-1])

snippet xmlrpclib_types_object.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_types_object.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	import pprint
	
	class MyObj:
	    def __init__(self, a, b):
	        self.a = a
	        self.b = b
	    def __repr__(self):
	        return 'MyObj(%s, %s)' % (repr(self.a), repr(self.b))
	
	server = xmlrpclib.ServerProxy('http://localhost:9000')
	
	o = MyObj(1, 'b goes here')
	print 'o  :', o
	pprint.pprint(server.show_type(o))
	
	o2 = MyObj(2, o)
	print 'o2 :', o2
	pprint.pprint(server.show_type(o2))

snippet xmlrpclib_types.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/xmlrpclib_types.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	#end_pymotw_header
	
	import xmlrpclib
	import datetime
	
	server = xmlrpclib.ServerProxy('http://localhost:9000')
	
	for t, v in [ ('boolean', True), 
	              ('integer', 1),
	              ('float', 2.5),
	              ('string', 'some text'), 
	              ('datetime', datetime.datetime.now()),
	              ('array', ['a', 'list']),
	              ('array', ('a', 'tuple')),
	              ('structure', {'a':'dictionary'}),
	            ]:
	    as_string, type_name, value = server.show_type(v)
	    print '%-12s:' % t, as_string
	    print '%12s ' % '', type_name
	    print '%12s ' % '', value

snippet zipfile_append.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_append.py
	#!/usr/bin/env python
	"""Writing data to a new archive.
	"""
	#end_pymotw_header
	
	from zipfile_infolist import print_info
	import zipfile
	
	print 'creating archive'
	with zipfile.ZipFile('append.zip', mode='w') as zf:
	    zf.write('README.txt')
	
	print
	print_info('append.zip')
	
	print 'appending to the archive'
	with zipfile.ZipFile('append.zip', mode='a') as zf:
	    zf.write('README.txt', arcname='README2.txt')
	
	print
	print_info('append.zip')

snippet zipfile_getinfo.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_getinfo.py
	#!/usr/bin/env python
	"""Retrieve all of the metadata for one member of an archive.
	"""
	#end_pymotw_header
	
	import zipfile
	
	with zipfile.ZipFile('example.zip') as zf:
	    for filename in [ 'README.txt', 'notthere.txt' ]:
	        try:
	            info = zf.getinfo(filename)
	        except KeyError:
	            print 'ERROR: Did not find %s in zip file' % filename
	        else:
	            print '%s is %d bytes' % (info.filename, info.file_size)

snippet zipfile_infolist.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_infolist.py
	#!/usr/bin/env python
	"""Retrieve all of the metadata for the contents of an archive.
	"""
	#end_pymotw_header
	
	import datetime
	import zipfile
	
	def print_info(archive_name):
	    with zipfile.ZipFile(archive_name) as zf:
	        for info in zf.infolist():
	            print info.filename
	            print '\tComment     :', info.comment
	            mod_date = datetime.datetime(*info.date_time)
	            print '\tModified    :', mod_date
	            if info.create_system == 0:
	                system = 'Windows'
	            elif info.create_system == 3:
	                system = 'Unix'
	            else:
	                system = 'UNKNOWN'
	            print '\tSystem      :', system
	            print '\tZIP version :', info.create_version
	            print '\tCompressed  :', info.compress_size, 'bytes'
	            print '\tUncompressed:', info.file_size, 'bytes'
	            print
	
	if __name__ == '__main__':
	    print_info('example.zip')

snippet zipfile_is_zipfile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_is_zipfile.py
	#!/usr/bin/env python
	"""Test if a file is a zipfile.
	"""
	#end_pymotw_header
	
	import zipfile
	
	for filename in [ 'README.txt', 'example.zip', 
	                  'bad_example.zip', 'notthere.zip' ]:
	    print '%15s  %s' % (filename, zipfile.is_zipfile(filename))

snippet zipfile_namelist.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_namelist.py
	#!/usr/bin/env python
	"""Reading the names out of a ZIP archive.
	"""
	#end_pymotw_header
	
	import zipfile
	
	with zipfile.ZipFile('example.zip', 'r') as zf:
	    print zf.namelist()

snippet zipfile_printdir.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_printdir.py
	#!/usr/bin/env python
	"""Print the table of contents of a ZIP archive
	"""
	#end_pymotw_header
	
	import zipfile
	
	with zipfile.ZipFile('example.zip', 'r') as zf:
	    print zf.printdir()

snippet zipfile_pyzipfile.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_pyzipfile.py
	#!/usr/bin/env python
	"""Adding Python modules to a PyZipFile.
	"""
	#end_pymotw_header
	
	import sys
	import zipfile
	
	if __name__ == '__main__':
	    with zipfile.PyZipFile('pyzipfile.zip', mode='w') as zf:
	        zf.debug = 3
	        print 'Adding python files'
	        zf.writepy('.')
	    for name in zf.namelist():
	        print name
	
	    print
	    sys.path.insert(0, 'pyzipfile.zip')
	    import zipfile_pyzipfile
	    print 'Imported from:', zipfile_pyzipfile.__file__

snippet zipfile_read.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_read.py
	#!/usr/bin/env python
	"""Retrieve the contents of an archive member.
	"""
	#end_pymotw_header
	
	import zipfile
	
	with zipfile.ZipFile('example.zip') as zf:
	    for filename in [ 'README.txt', 'notthere.txt' ]:
	        try:
	            data = zf.read(filename)
	        except KeyError:
	            print 'ERROR: Did not find %s in zip file' % filename
	        else:
	            print filename, ':'
	            print data
	        print

snippet zipfile_write_arcname.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_write_arcname.py
	#!/usr/bin/env python
	"""Writing data to a new archive using an alternate name.
	"""
	#end_pymotw_header
	
	from zipfile_infolist import print_info
	import zipfile
	
	with zipfile.ZipFile('write_arcname.zip', mode='w') as zf:
	    zf.write('README.txt', arcname='NOT_README.txt')
	
	print_info('write_arcname.zip')

snippet zipfile_write_compression.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_write_compression.py
	#!/usr/bin/env python
	"""Writing data to a new archive.
	"""
	#end_pymotw_header
	
	from zipfile_infolist import print_info
	import zipfile
	try:
	    import zlib
	    compression = zipfile.ZIP_DEFLATED
	except:
	    compression = zipfile.ZIP_STORED
	
	modes = { zipfile.ZIP_DEFLATED: 'deflated',
	          zipfile.ZIP_STORED:   'stored',
	          }
	
	print 'creating archive'
	with zipfile.ZipFile('write_compression.zip', mode='w') as zf:
	    mode_name = modes[compression]
	    print 'adding README.txt with compression mode', mode_name
	    zf.write('README.txt', compress_type=compression)
	
	print
	print_info('write_compression.zip')

snippet zipfile_write.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_write.py
	#!/usr/bin/env python
	"""Writing data to a new archive.
	"""
	#end_pymotw_header
	
	from zipfile_infolist import print_info
	import zipfile
	
	print 'creating archive'
	with zipfile.ZipFile('write.zip', mode='w') as zf:
	    print 'adding README.txt'
	    zf.write('README.txt')
	
	print
	print_info('write.zip')

snippet zipfile_writestr.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_writestr.py
	#!/usr/bin/env python
	"""Writing data to a new archive with writestr().
	"""
	#end_pymotw_header
	
	from zipfile_infolist import print_info
	import zipfile
	
	msg = 'This data did not exist in a file.'
	with zipfile.ZipFile('writestr.zip', 
	                     mode='w',
	                     compression=zipfile.ZIP_DEFLATED, 
	                     ) as zf:
	    zf.writestr('from_string.txt', msg)
	
	print_info('writestr.zip')
	
	with zipfile.ZipFile('writestr.zip', 'r') as zf:
	    print zf.read('from_string.txt')

snippet zipfile_writestr_zipinfo.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipfile_writestr_zipinfo.py
	#!/usr/bin/env python
	"""Writing data to a new archive with writestr().
	"""
	#end_pymotw_header
	
	import time
	import zipfile
	from zipfile_infolist import print_info
	
	msg = 'This data did not exist in a file.'
	
	with zipfile.ZipFile('writestr_zipinfo.zip', 
	                     mode='w',
	                     ) as zf:
	    info = zipfile.ZipInfo('from_string.txt', 
	                           date_time=time.localtime(time.time()),
	                           )
	    info.compress_type=zipfile.ZIP_DEFLATED
	    info.comment='Remarks go here'
	    info.create_system=0
	    zf.writestr(info, msg)
	
	print_info('writestr_zipinfo.zip')

snippet zipimport_find_module.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipimport_find_module.py
	
	"""Finding a module within a zip archive.
	
	"""
	
	import zipimport
	
	importer = zipimport.zipimporter('zipimport_example.zip')
	
	for module_name in [ 'zipimport_find_module', 'not_there' ]:
	    print module_name, ':', importer.find_module(module_name)

snippet zipimport_get_code.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipimport_get_code.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	
	"""Retrieving the code for a module within a zip archive.
	"""
	#end_pymotw_header
	
	import zipimport
	
	importer = zipimport.zipimporter('zipimport_example.zip')
	code = importer.get_code('zipimport_get_code')
	print code

snippet zipimport_get_data_nozip.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipimport_get_data_nozip.py
	
	"""Retrieving data when there is no ZIP archive involved.
	
	"""
	
	import os
	import example_package
	
	pkg_dir = os.path.dirname(example_package.__file__)
	data_filename = os.path.join(pkg_dir, 'README.txt')
	
	dir_prefix = os.path.abspath(os.path.dirname(__file__) or os.getcwd())
	if data_filename.startswith(dir_prefix):
	    display_filename = data_filename[len(dir_prefix)+1:]
	else:
	    display_filename = data_filename
	
	print display_filename, ':'
	print open(data_filename, 'r').read()

snippet zipimport_get_data.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipimport_get_data.py
	
	"""Retrieving the data for a module within a zip archive.
	
	"""
	
	import sys
	sys.path.insert(0, 'zipimport_example.zip')
	
	import os
	import example_package
	print example_package.__file__
	print example_package.__loader__.get_data('example_package/README.txt')

snippet zipimport_get_data_zip.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipimport_get_data_zip.py
	
	"""Retrieving the data for a module within a zip archive.
	
	"""
	
	import sys
	sys.path.insert(0, 'zipimport_example.zip')
	
	import os
	import example_package
	print example_package.__file__
	data_filename = os.path.join(os.path.dirname(example_package.__file__), 
	                             'README.txt')
	print data_filename, ':'
	print open(data_filename, 'rt').read()

snippet zipimport_get_source.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipimport_get_source.py
	#!/usr/bin/env python
	#
	# Copyright 2007 Doug Hellmann.
	#
	
	"""Retrieving the source code for a module within a zip archive.
	
	"""
	#end_pymotw_header
	
	import zipimport
	
	importer = zipimport.zipimporter('zipimport_example.zip')
	for module_name in ['zipimport_get_code', 'zipimport_get_source']:
	    source = importer.get_source(module_name)
	    print '=' * 80
	    print module_name
	    print '=' * 80
	    print source
	    print

snippet zipimport_is_package.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipimport_is_package.py
	
	"""Determine whether a module within a ZIP archive is a package or a regular module.
	
	"""
	
	import zipimport
	
	importer = zipimport.zipimporter('zipimport_example.zip')
	for name in ['zipimport_is_package', 'example_package']:
	    print name, importer.is_package(name)
	
	

snippet zipimport_load_module.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipimport_load_module.py
	
	"""Retrieving the code for a module within a zip archive.
	
	"""
	
	import zipimport
	
	importer = zipimport.zipimporter('zipimport_example.zip')
	module = importer.load_module('zipimport_get_code')
	print 'Name   :', module.__name__
	print 'Loader :', module.__loader__
	print 'Code   :', module.code
	
	

snippet zipimport_make_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zipimport_make_example.py
	
	"""Create a sample zipfile with modules in it that can be imported.
	
	"""
	
	import sys
	import zipfile
	
	if __name__ == '__main__':
	    zf = zipfile.PyZipFile('zipimport_example.zip', mode='w')
	    try:
	        zf.writepy('.')
	        zf.write('zipimport_get_source.py')
	        zf.write('example_package/README.txt')
	    finally:
	        zf.close()
	    for name in zf.namelist():
	        print name

snippet zlib_checksums.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zlib_checksums.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import zlib
	
	data = open('lorem.txt', 'r').read()
	
	cksum = zlib.adler32(data)
	print 'Adler32: %12d' % cksum
	print '       : %12d' % zlib.adler32(data, cksum)
	
	cksum = zlib.crc32(data)
	print 'CRC-32 : %12d' % cksum
	print '       : %12d' % zlib.crc32(data, cksum)

snippet zlib_checksum_tests.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zlib_checksum_tests.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import timeit
	
	iterations = 1000
	
	def show_results(title, result, iterations):
	    "Print results in terms of microseconds per pass and per item."
	    per_pass = 1000000 * (result / iterations)
	    print '%s:\t%.2f usec/pass' % (title, per_pass)
	
	
	adler32 = timeit.Timer(
	    stmt="zlib.adler32(data)",
	    setup="import zlib; data=open('lorem.txt','r').read() * 10", 
	    )
	show_results('Adler32, separate',
	             adler32.timeit(iterations), iterations)
	
	adler32_running = timeit.Timer(
	    stmt="cksum = zlib.adler32(data, cksum)",
	    setup="""import zlib
	data=open('lorem.txt','r').read() * 10
	cksum = zlib.adler32(data)""", 
	    )
	show_results('Adler32, running',
	             adler32_running.timeit(iterations), iterations)
	
	crc32 = timeit.Timer(
	    stmt="zlib.crc32(data)",
	    setup="import zlib; data=open('lorem.txt','r').read() * 10", 
	    )
	show_results('CRC-32, separate',
	             crc32.timeit(iterations), iterations)
	
	crc32_running = timeit.Timer(
	    stmt="cksum = zlib.crc32(data, cksum)",
	    setup="""import zlib
	data=open('lorem.txt','r').read() * 10
	cksum = zlib.crc32(data)""", 
	    )
	show_results('CRC-32, running',
	             crc32_running.timeit(iterations), iterations)

snippet zlib_compresslevel.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zlib_compresslevel.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import zlib
	
	input_data = 'Some repeated text.\n' * 1024
	
	results = set()
	for i in xrange(1, 10):
	    data = zlib.compress(input_data, i)
	    results.add(data)
	
	print len(results)

snippet zlib_incremental.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zlib_incremental.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Incremental compression
	"""
	#end_pymotw_header
	
	import zlib
	import binascii
	
	compressor = zlib.compressobj(1)
	
	with open('lorem.txt', 'r') as input:
	    while True:
	        block = input.read(64)
	        if not block:
	            break
	        compressed = compressor.compress(block)
	        if compressed:
	            print 'Compressed: %s' % binascii.hexlify(compressed)
	        else:
	            print 'buffering...'
	    remaining = compressor.flush()
	    print 'Flushed: %s' % binascii.hexlify(remaining)
	    
	            

snippet zlib_lengths.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zlib_lengths.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import zlib
	
	original_data = 'This is the original text.'
	
	fmt = '%15s  %15s'
	print fmt % ('len(data)', 'len(compressed)')
	print fmt % ('-' * 15, '-' * 15)
	
	for i in xrange(5):
	    data = original_data * i
	    compressed = zlib.compress(data)
	    highlight = '*' if len(data) < len(compressed) else ''
	    print fmt % (len(data), len(compressed)), highlight

snippet zlib_memory.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zlib_memory.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import zlib
	import binascii
	
	original_data = 'This is the original text.'
	print 'Original     :', len(original_data), original_data
	
	compressed = zlib.compress(original_data)
	print 'Compressed   :', len(compressed), binascii.hexlify(compressed)
	
	decompressed = zlib.decompress(compressed)
	print 'Decompressed :', len(decompressed), decompressed

snippet zlib_mixed.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zlib_mixed.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	__version__ = "$Id$"
	#end_pymotw_header
	
	import zlib
	
	lorem = open('lorem.txt', 'rt').read()
	compressed = zlib.compress(lorem)
	combined = compressed + lorem
	
	decompressor = zlib.decompressobj()
	decompressed = decompressor.decompress(combined)
	
	decompressed_matches = decompressed == lorem
	print 'Decompressed matches lorem:', decompressed_matches
	
	unused_matches = decompressor.unused_data == lorem
	print 'Unused data matches lorem :', unused_matches

snippet zlib_server.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/zlib_server.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	#__version__ = "$Id$"
	#end_pymotw_header
	import zlib
	import logging
	import SocketServer
	import binascii
	
	BLOCK_SIZE = 64
	
	class ZlibRequestHandler(SocketServer.BaseRequestHandler):
	
	    logger = logging.getLogger('Server')
	    
	    def handle(self):
	        compressor = zlib.compressobj(1)
	        
	        # Find out what file the client wants
	        filename = self.request.recv(1024)
	        self.logger.debug('client asked for: "%s"', filename)
	        
	        # Send chunks of the file as they are compressed
	        with open(filename, 'rb') as input:
	            while True:            
	                block = input.read(BLOCK_SIZE)
	                if not block:
	                    break
	                self.logger.debug('RAW "%s"', block)
	                compressed = compressor.compress(block)
	                if compressed:
	                    self.logger.debug('SENDING "%s"',
	                                      binascii.hexlify(compressed))
	                    self.request.send(compressed)
	                else:
	                    self.logger.debug('BUFFERING')
	        
	        # Send any data being buffered by the compressor
	        remaining = compressor.flush()
	        while remaining:
	            to_send = remaining[:BLOCK_SIZE]
	            remaining = remaining[BLOCK_SIZE:]
	            self.logger.debug('FLUSHING "%s"',
	                              binascii.hexlify(to_send))
	            self.request.send(to_send)
	        return
	
	
	if __name__ == '__main__':
	    import socket
	    import threading
	    from cStringIO import StringIO
	
	    logging.basicConfig(level=logging.DEBUG,
	                        format='%(name)s: %(message)s',
	                        )
	    logger = logging.getLogger('Client')
	
	    # Set up a server, running in a separate thread
	    address = ('localhost', 0) # let the kernel assign a port
	    server = SocketServer.TCPServer(address, ZlibRequestHandler)
	    ip, port = server.server_address # what port was assigned?
	
	    t = threading.Thread(target=server.serve_forever)
	    t.setDaemon(True)
	    t.start()
	
	    # Connect to the server as a client
	    logger.info('Contacting server on %s:%s', ip, port)
	    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	    s.connect((ip, port))
	
	    # Ask for a file
	    requested_file = 'lorem.txt'
	    logger.debug('sending filename: "%s"', requested_file)
	    len_sent = s.send(requested_file)
	
	    # Receive a response
	    buffer = StringIO()
	    decompressor = zlib.decompressobj()
	    while True:
	        response = s.recv(BLOCK_SIZE)
	        if not response:
	            break
	        logger.debug('READ "%s"', binascii.hexlify(response))
	
	        # Include any unconsumed data when feeding the decompressor.
	        to_decompress = decompressor.unconsumed_tail + response
	        while to_decompress:
	            decompressed = decompressor.decompress(to_decompress)
	            if decompressed:
	                logger.debug('DECOMPRESSED "%s"', decompressed)
	                buffer.write(decompressed)
	                # Look for unconsumed data due to buffer overflow
	                to_decompress = decompressor.unconsumed_tail
	            else:
	                logger.debug('BUFFERING')
	                to_decompress = None
	
	    # deal with data reamining inside the decompressor buffer
	    remainder = decompressor.flush()
	    if remainder:
	        logger.debug('FLUSHED "%s"', remainder)
	        buffer.write(reaminder)
	    
	    full_response = buffer.getvalue()
	    lorem = open('lorem.txt', 'rt').read()
	    logger.debug('response matches file contents: %s',
	                 full_response == lorem)
	
	    # Clean up
	    s.close()
	    server.socket.close()

snippet configparser_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/configparser_example.py
	
	"""Example use of ConfigParser module.
	
	See http://blog.doughellmann.com/2007/04/pymotw-configparser.html
	
	"""
	
	__module_id__ = "$Id$"
	
	from ConfigParser import ConfigParser
	import os
	
	filename = 'approach.ini'
	config = ConfigParser()
	config.read([filename])
	
	url = config.get('portal', 'url')
	
	print url

snippet ElementTree_create_pretty.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_create_pretty.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating XML documents
	"""
	#end_pymotw_header
	
	from xml.etree.ElementTree import Element, SubElement, Comment
	from ElementTree_pretty import prettify
	
	top = Element('top')
	
	comment = Comment('Generated for PyMOTW')
	top.append(comment)
	
	child = SubElement(top, 'child')
	child.text = 'This child contains text.'
	
	child_with_tail = SubElement(top, 'child_with_tail')
	child_with_tail.text = 'This child has regular text.'
	child_with_tail.tail = 'And "tail" text.'
	
	child_with_entity_ref = SubElement(top, 'child_with_entity_ref')
	child_with_entity_ref.text = 'This & that'
	
	print prettify(top)

snippet ElementTree_create.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_create.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating XML documents
	"""
	#end_pymotw_header
	
	from xml.etree.ElementTree import ( Element,
	                                    SubElement,
	                                    Comment,
	                                    tostring,
	                                    )
	
	top = Element('top')
	
	comment = Comment('Generated for PyMOTW')
	top.append(comment)
	
	child = SubElement(top, 'child')
	child.text = 'This child contains text.'
	
	child_with_tail = SubElement(top, 'child_with_tail')
	child_with_tail.text = 'This child has regular text.'
	child_with_tail.tail = 'And "tail" text.'
	
	child_with_entity_ref = SubElement(top, 'child_with_entity_ref')
	child_with_entity_ref.text = 'This & that'
	
	print tostring(top)
	

snippet ElementTree_csv_to_xml.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_csv_to_xml.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Convert CSV file of podcasts to XML
	"""
	#end_pymotw_header
	
	import csv
	from xml.etree.ElementTree import ( Element,
	                                    SubElement,
	                                    Comment,
	                                    tostring,
	                                    )
	import datetime
	from ElementTree_pretty import prettify
	
	generated_on = str(datetime.datetime.now())
	
	# Configure one attribute with set()
	root = Element('opml')
	root.set('version', '1.0')
	
	root.append(
	    Comment('Generated by ElementTree_csv_to_xml.py for PyMOTW')
	    )
	
	head = SubElement(root, 'head')
	title = SubElement(head, 'title')
	title.text = 'My Podcasts'
	dc = SubElement(head, 'dateCreated')
	dc.text = generated_on
	dm = SubElement(head, 'dateModified')
	dm.text = generated_on
	
	body = SubElement(root, 'body')
	
	with open('podcasts.csv', 'rt') as f:
	    current_group = None
	    reader = csv.reader(f)
	    for row in reader:
	        group_name, podcast_name, xml_url, html_url = row
	        if current_group is None or group_name != current_group.text:
	            # Start a new group
	            current_group = SubElement(body, 'outline',
	                                       {'text':group_name})
	        # Add this podcast to the group,
	        # setting all its attributes at
	        # once.
	        podcast = SubElement(current_group, 'outline',
	                             {'text':podcast_name,
	                              'xmlUrl':xml_url,
	                              'htmlUrl':html_url,
	                              })
	
	print prettify(root)

snippet ElementTree_dump_opml.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_dump_opml.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Dump the OPML in plain text
	"""
	#end_pymotw_header
	
	from xml.etree import ElementTree
	import pprint
	
	with open('podcasts.opml', 'rt') as f:
	    tree = ElementTree.parse(f)
	
	for node in tree.iter():
	    print node.tag

snippet ElementTree_entity_references.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_entity_references.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Dump the OPML in plain text
	"""
	#end_pymotw_header
	
	from xml.etree import ElementTree
	
	with open('data.xml', 'rt') as f:
	    tree = ElementTree.parse(f)
	
	node = tree.find('entity_expansion')
	print node.tag
	print '  in attribute:', node.attrib['attribute']
	print '  in text     :', node.text.strip()

snippet ElementTree_extend_node_copy.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_extend_node_copy.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating XML documents with lists of nodes
	"""
	#end_pymotw_header
	
	from xml.etree.ElementTree import Element, SubElement, tostring, XML
	from ElementTree_pretty import prettify
	
	top = Element('top')
	
	parent_a = SubElement(top, 'parent', id='A')
	parent_b = SubElement(top, 'parent', id='B')
	
	# Create children
	children = XML(
	   '<root><child num="0" /><child num="1" /><child num="2" /></root>'
	   )
	
	# Set the id to the Python object id of the node
	# to make duplicates easier to spot.
	for c in children:
	    c.set('id', str(id(c)))
	
	# Add to first parent
	parent_a.extend(children)
	
	print 'A:'
	print prettify(top)
	print
	
	# Copy nodes to second parent
	parent_b.extend(children)
	
	print 'B:'
	print prettify(top)
	print
	

snippet ElementTree_extend_node.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_extend_node.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating XML documents with lists of nodes
	"""
	#end_pymotw_header
	
	from xml.etree.ElementTree import Element, SubElement, tostring, XML
	from ElementTree_pretty import prettify
	
	top = Element('top')
	
	parent = SubElement(top, 'parent')
	
	children = XML(
	   '<root><child num="0" /><child num="1" /><child num="2" /></root>'
	   )
	parent.extend(children)
	
	print prettify(top)
	

snippet ElementTree_extend.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_extend.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating XML documents with lists of nodes
	"""
	#end_pymotw_header
	
	from xml.etree.ElementTree import Element, tostring
	from ElementTree_pretty import prettify
	
	top = Element('top')
	
	children = [
	    Element('child', num=str(i))
	    for i in xrange(3)
	    ]
	
	top.extend(children)
	
	print prettify(top)

snippet ElementTree_find_feeds_by_structure.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_find_feeds_by_structure.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Dump the OPML in plain text
	"""
	#end_pymotw_header
	
	from xml.etree import ElementTree
	
	with open('podcasts.opml', 'rt') as f:
	    tree = ElementTree.parse(f)
	
	for node in tree.findall('.//outline/outline'):
	    url = node.attrib.get('xmlUrl')
	    print url

snippet ElementTree_find_feeds_by_tag.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_find_feeds_by_tag.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Dump the OPML in plain text
	"""
	#end_pymotw_header
	
	from xml.etree import ElementTree
	
	with open('podcasts.opml', 'rt') as f:
	    tree = ElementTree.parse(f)
	
	for node in tree.findall('.//outline'):
	    url = node.attrib.get('xmlUrl')
	    if url:
	        print url

snippet ElementTree_node_attributes.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_node_attributes.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Dump the OPML in plain text
	"""
	#end_pymotw_header
	
	from xml.etree import ElementTree
	
	with open('data.xml', 'rt') as f:
	    tree = ElementTree.parse(f)
	
	node = tree.find('./with_attributes')
	print node.tag
	for name, value in sorted(node.attrib.items()):
	    print '  %-4s = "%s"' % (name, value)
	    

snippet ElementTree_node_text.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_node_text.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Dump the OPML in plain text
	"""
	#end_pymotw_header
	
	from xml.etree import ElementTree
	
	with open('data.xml', 'rt') as f:
	    tree = ElementTree.parse(f)
	
	for path in [ './child', './child_with_tail' ]:
	    node = tree.find(path)
	    print node.tag
	    print '  child node text:', node.text
	    print '  and tail text  :', node.tail

snippet ElementTree_parse_opml.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_parse_opml.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Parse the input OPML file and show something about the results.
	"""
	#end_pymotw_header
	
	from xml.etree import ElementTree
	
	with open('podcasts.opml', 'rt') as f:
	    tree = ElementTree.parse(f)
	
	print tree
	
	
	

snippet ElementTree_podcast_csv_treebuilder.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_podcast_csv_treebuilder.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Convert XML list of podcasts to a CSV file.
	"""
	#end_pymotw_header
	
	import csv
	from xml.etree.ElementTree import XMLTreeBuilder
	import sys
	
	class PodcastListToCSV(object):
	
	    def __init__(self, outputFile):
	        self.writer = csv.writer(outputFile,
	                                 quoting=csv.QUOTE_NONNUMERIC)
	        self.group_name = ''
	        return
	
	    def start(self, tag, attrib):
	        if tag != 'outline':
	            # Ignore anything not part of the outline
	            return
	        if not attrib.get('xmlUrl'):
	            # Remember the current group
	            self.group_name = attrib['text']
	        else:
	            # Output a podcast entry
	            self.writer.writerow( (self.group_name, attrib['text'],
	                                   attrib['xmlUrl'],
	                                   attrib.get('htmlUrl', ''),
	                                   )
	                                  )
	
	    def end(self, tag):
	        # Ignore closing tags
	        pass
	    def data(self, data):
	        # Ignore data inside nodes
	        pass
	    def close(self):
	        # Nothing special to do here
	        return
	
	
	target = PodcastListToCSV(sys.stdout)
	parser = XMLTreeBuilder(target=target)
	with open('podcasts.opml', 'rt') as f:
	    for line in f:
	        parser.feed(line)
	parser.close()

snippet ElementTree_pretty.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_pretty.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Pretty-print function for ElementTree
	"""
	#end_pymotw_header
	
	from xml.etree import ElementTree
	from xml.dom import minidom
	
	def prettify(elem):
	    """Return a pretty-printed XML string for the Element.
	    """
	    rough_string = ElementTree.tostring(elem, 'utf-8')
	    reparsed = minidom.parseString(rough_string)
	    return reparsed.toprettyxml(indent="  ")

snippet ElementTree_show_all_events.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_show_all_events.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Show the events encountered while processing an XML input
	"""
	#end_pymotw_header
	
	from xml.etree.ElementTree import iterparse
	
	depth = 0
	prefix_width = 8
	prefix_dots = '.' * prefix_width
	line_template = ''.join([ '{prefix:<0.{prefix_len}}',
	                          '{event:<8}',
	                          '{suffix:<{suffix_len}} ',
	                          '{node.tag:<12} ',
	                          '{node_id}',
	                          ])
	
	EVENT_NAMES = ['start', 'end', 'start-ns', 'end-ns']
	
	for (event, node) in iterparse('podcasts.opml', EVENT_NAMES):
	    if event == 'end':
	        depth -= 1
	
	    prefix_len = depth * 2
	    
	    print line_template.format(
	        prefix=prefix_dots,
	        prefix_len=prefix_len,
	        suffix='',
	        suffix_len=(prefix_width - prefix_len),
	        node=node,
	        node_id=id(node),
	        event=event,
	        )
	    
	    if event == 'start':
	        depth += 1

snippet ElementTree_show_feed_urls.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_show_feed_urls.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Dump the OPML in plain text
	"""
	#end_pymotw_header
	
	from xml.etree import ElementTree
	
	with open('podcasts.opml', 'rt') as f:
	    tree = ElementTree.parse(f)
	
	for node in tree.iter('outline'):
	    name = node.attrib.get('text')
	    url = node.attrib.get('xmlUrl')
	    if name and url:
	        print '  %s' % name
	        print '    %s' % url
	    else:
	        print name

snippet ElementTree_write_method.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_write_method.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating XML documents
	"""
	#end_pymotw_header
	
	import sys
	from xml.etree.ElementTree import Element, SubElement, ElementTree
	
	top = Element('top')
	
	child = SubElement(top, 'child')
	child.text = 'Contains text.'
	
	empty_child = SubElement(top, 'empty_child')
	
	for method in [ 'xml', 'html', 'text' ]:
	    print method
	    ElementTree(top).write(sys.stdout, method=method)
	    print '\n'
	    

snippet ElementTree_write_podcast_csv.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_write_podcast_csv.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Convert XML list of podcasts to a CSV file.
	"""
	#end_pymotw_header
	
	import csv
	from xml.etree.ElementTree import iterparse
	import sys
	
	writer = csv.writer(sys.stdout, quoting=csv.QUOTE_NONNUMERIC)
	
	group_name = ''
	
	for (event, node) in iterparse('podcasts.opml', events=['start']):
	    if node.tag != 'outline':
	        # Ignore anything not part of the outline
	        continue
	    if not node.attrib.get('xmlUrl'):
	        # Remember the current group
	        group_name = node.attrib['text']
	    else:
	        # Output a podcast entry
	        writer.writerow( (group_name, node.attrib['text'],
	                          node.attrib['xmlUrl'],
	                          node.attrib.get('htmlUrl', ''),
	                          )
	                         )

snippet ElementTree_write.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_write.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Creating XML documents
	"""
	#end_pymotw_header
	
	import sys
	from xml.etree.ElementTree import ( Element,
	                                    SubElement,
	                                    Comment,
	                                    ElementTree,
	                                    )
	
	top = Element('top')
	
	comment = Comment('Generated for PyMOTW')
	top.append(comment)
	
	child = SubElement(top, 'child')
	child.text = 'This child contains text.'
	
	child_with_tail = SubElement(top, 'child_with_tail')
	child_with_tail.text = 'This child has regular text.'
	child_with_tail.tail = 'And "tail" text.'
	
	child_with_entity_ref = SubElement(top, 'child_with_entity_ref')
	child_with_entity_ref.text = 'This & that'
	
	empty_child = SubElement(top, 'empty_child')
	
	ElementTree(top).write(sys.stdout)

snippet ElementTree_XMLID.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_XMLID.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Embedded XML string with ID values
	"""
	#end_pymotw_header
	
	from xml.etree.ElementTree import XMLID
	
	tree, id_map = XMLID('''
	<root>
	  <group>
	    <child id="a">This is child "a".</child>
	    <child id="b">This is child "b".</child>
	  </group>
	  <group>
	    <child id="c">This is child "c".</child>
	  </group>
	</root>
	''')
	
	for key, value in sorted(id_map.items()):
	    print '%s = %s' % (key, value)
	    

snippet ElementTree_XML.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/ElementTree_XML.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2010 Doug Hellmann.  All rights reserved.
	#
	"""Embedded XML string
	"""
	#end_pymotw_header
	
	from xml.etree.ElementTree import XML
	
	parsed = XML('''
	<root>
	  <group>
	    <child id="a">This is child "a".</child>
	    <child id="b">This is child "b".</child>
	  </group>
	  <group>
	    <child id="c">This is child "c".</child>
	  </group>
	</root>
	''')
	
	print 'parsed =', parsed
	
	def show_node(node):
	    print node.tag
	    if node.text is not None and node.text.strip():
	        print '  text: "%s"' % node.text
	    if node.tail is not None and node.tail.strip():
	        print '  tail: "%s"' % node.tail
	    for name, value in sorted(node.attrib.items()):
	        print '  %-4s = "%s"' % (name, value)
	    for child in node:
	        show_node(child)
	    return
	
	for elem in parsed:
	    show_node(elem)

snippet inspect_example.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/inspect_example.py
	#!/usr/bin/env python
	
	# This comment appears first
	# and spans 2 lines.
	
	# This comment does not show up in the output of getcomments().
	
	"""Sample file to serve as the basis for inspect examples.
	"""
	
	def module_level_function(arg1, arg2='default', *args, **kwargs):
	    """This function is declared in the module."""
	    local_variable = arg1
	
	class A(object):
	    """The A class."""
	    def __init__(self, name):
	        self.name = name
	
	    def get_name(self):
	        "Returns the name of the instance."
	        return self.name
	
	instance_of_a = A('sample_instance')
	
	class B(A):
	    """This is the B class.
	    It is derived from A.
	    """
	
	    # This method is not part of A.
	    def do_something(self):
	        """Does some work"""
	
	    def get_name(self):
	        "Overrides version from A"
	        return 'B(' + self.name + ')'

snippet pathlib_basic_use.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/pathlib_basic_use.py
	from pathlib import Path
	
	p = Path('.')
	print([x for x in p.iterdir() if x.is_file()])
	print(list(p.glob('*.py')))
	
	test = p / 'test' / 'test.txt'
	print(test)
	print(test.exists())
	
	test = p / 'test.txt'
	
	with test.open('wt') as f:
	    f.write('hello')

snippet queue_fetch_podcasts.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/queue_fetch_podcasts.py
	#!/usr/bin/env python
	"""Use several threads to download enclosures from RSS feeds.
	"""
	#end_pymotw_header
	
	from Queue import Queue
	from threading import Thread
	import time
	import urllib
	import urlparse
	
	import feedparser
	
	# Set up some global variables
	num_fetch_threads = 2
	enclosure_queue = Queue()
	
	# A real app wouldn't use hard-coded data...
	feed_urls = [ 'http://advocacy.python.org/podcasts/littlebit.rss',
	             ]
	
	
	def downloadEnclosures(i, q):
	    """This is the worker thread function.
	    It processes items in the queue one after
	    another.  These daemon threads go into an
	    infinite loop, and only exit when
	    the main thread ends.
	    """
	    while True:
	        print '%s: Looking for the next enclosure' % i
	        url = q.get()
	        parsed_url = urlparse.urlparse(url)
	        print '%s: Downloading:' % i, parsed_url.path
	        response = urllib.urlopen(url)
	        data = response.read()
	        # Save the downloaded file to the current directory
	        outfile_name = url.rpartition('/')[-1]
	        with open(outfile_name, 'wb') as outfile:
	            outfile.write(data)
	        q.task_done()
	
	
	# Set up some threads to fetch the enclosures
	for i in range(num_fetch_threads):
	    worker = Thread(target=downloadEnclosures,
	                    args=(i, enclosure_queue,))
	    worker.setDaemon(True)
	    worker.start()
	
	# Download the feed(s) and put the enclosure URLs into
	# the queue.
	for url in feed_urls:
	    response = feedparser.parse(url, agent='fetch_podcasts.py')
	    for entry in response['entries'][-5:]:
	        for enclosure in entry.get('enclosures', []):
	            parsed_url = urlparse.urlparse(enclosure['url'])
	            print 'Queuing:', parsed_url.path
	            enclosure_queue.put(enclosure['url'])
	        
	# Now wait for the queue to be empty, indicating that we have
	# processed all of the downloads.
	print '*** Main thread waiting'
	enclosure_queue.join()
	print '*** Done'

snippet stringio_examples.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/stringio_examples.py
	
	from io import StringIO
	
	
	# Writing to a buffer
	output = StringIO()
	output.write('This goes into the buffer. ')
	print('And so does this.', file=output)
	
	# Retrieve the value written
	print(output.getvalue())
	
	output.close() # discard buffer memory
	
	# Initialize a read buffer
	input = StringIO('Inital value for read buffer')
	
	# Read from the buffer
	print(input.read())

snippet subprocess_interaction.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_interaction.py
	
	"""More interaction between child processes.
	
	"""
	
	__module_id__ = "$Id$"
	
	import subprocess
	
	print 'One line at a time:'
	proc = subprocess.Popen('python repeater.py', 
	                        shell=True,
	                        stdin=subprocess.PIPE,
	                        stdout=subprocess.PIPE,
	                        )
	for i in range(5):
	    proc.stdin.write('%d\n' % i)
	    output = proc.stdout.readline()
	    print output.rstrip()
	remainder = proc.communicate()[0]
	print remainder
	
	print
	print 'All output at once:'
	proc = subprocess.Popen('python repeater.py', 
	                        shell=True,
	                        stdin=subprocess.PIPE,
	                        stdout=subprocess.PIPE,
	                        )
	for i in range(5):
	    proc.stdin.write('%d\n' % i)
	
	output = proc.communicate()[0]
	print output

snippet subprocess_repeater.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_repeater.py
	
	"""Echo anything written to stdin on stdout.
	
	"""
	
	__module_id__ = "$Id$"
	
	import sys
	
	sys.stderr.write('repeater.py: starting\n')
	sys.stderr.flush()
	
	while True:
	    next_line = sys.stdin.readline()
	    if not next_line:
	        break
	    sys.stdout.write(next_line)
	    sys.stdout.flush()
	
	sys.stderr.write('repeater.py: exiting\n')
	sys.stderr.flush()

snippet subprocess_signal_child.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_signal_child.py
	
	"""Child process in signal example.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	import signal
	import time
	import sys
	
	pid = os.getpid()
	received = False
	
	def signal_usr1(signum, frame):
	    "Callback invoked when a signal is received"
	    global received
	    received = True
	    print 'CHILD %6s: Received USR1' % pid
	    sys.stdout.flush()
	
	print 'CHILD %6s: Setting up signal handler' % pid
	sys.stdout.flush()
	signal.signal(signal.SIGUSR1, signal_usr1)
	print 'CHILD %6s: Pausing to wait for signal' % pid
	sys.stdout.flush()
	time.sleep(3)
	
	if not received:
	    print 'CHILD %6s: Never received signal' % pid

snippet subprocess_signal_parent.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/subprocess_signal_parent.py
	
	"""Illustrate using Unix signals and subprocess.
	
	"""
	
	__module_id__ = "$Id$"
	
	import os
	import signal
	import subprocess
	import time
	import sys
	
	proc = subprocess.Popen(['python', 'signal_child.py'])
	print 'PARENT      : Pausing before sending signal...'
	sys.stdout.flush()
	time.sleep(1)
	print 'PARENT      : Signaling child'
	sys.stdout.flush()
	os.kill(proc.pid, signal.SIGUSR1)

snippet trace_main.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/trace_main.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	#__version__ = "$Id$"
	#end_pymotw_header
	
	from recurse import recurse
	
	def main():
	    print 'This is the main program.'
	    recurse(2)
	    return
	
	if __name__ == '__main__':
	    main()

snippet trace_recurse.py

	#deal with  /root/python3/The-Python-Standard-Library/code_gen/trace_recurse.py
	#!/usr/bin/env python
	# encoding: utf-8
	#
	# Copyright (c) 2008 Doug Hellmann All rights reserved.
	#
	"""
	"""
	
	#__version__ = "$Id$"
	#end_pymotw_header
	
	def recurse(level):
	    print 'recurse(%s)' % level
	    if level:
	        recurse(level-1)
	    return
	
	def not_called():
	    print 'This function is never called.'
