snippet gettypeonsteroids/mypath/v5.0

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/mypath/v5.0/myassembly.cs

	using System;
	
	namespace MyNamespace
	{
	    public class MyType {}
	}

snippet gettypeonsteroids

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/yourassembly.cs

	using System;
	using System.Reflection;
	[assembly:AssemblyVersion("1.0.0.0")]
	namespace YourNamespace
	{
	    public class YourType {}
	} 
snippet microsoft_visualstudio_data_core_dataclientobjectattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Visualstudio_Data_Core_DataClientObjectAttribute/DataClientObjectAttrib2.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	
	[DataClientObject("1520C77F-09AF-40b4-B1FE-53C30A177C59")]
	public interface IVsDataSupportEntity
	{
	    void DoSomething();
	}
snippet appdomain_executeassembly

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/myexecutable.cs

	using System;
	
	public class MyExecutable {
	   public static void Main() {
	      string name = AppDomain.CurrentDomain.FriendlyName;
	      Console.WriteLine("MyExecutable running on " + name);
	   }
	}
snippet testbasetype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TestBaseType/testbasetype.cs

	using System;
	class TestType 
	{
	    public static void Main() 
	    {
	        Type t = typeof(int);
	        Console.WriteLine("{0} inherits from {1}.", t,t.BaseType);
	    }
	}
snippet conceptual_assembly_contents

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_assembly_contents/source.cs

	using System;
	
	class MainApp
	{
	    public static void Main()
	    {
	        Console.WriteLine("Hello World using C#!");
	    }
	}

snippet regularexpressions_language_backreferences

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_backreferences/backreference6.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      Console.WriteLine(Regex.IsMatch("aa", @"(?<char>\w)\k<1>"));    
	   }
	}
	

snippet regularexpressions_language_backreferences

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_backreferences/backreference7.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      Console.WriteLine(Regex.IsMatch("aa", @"(?<2>\w)\k<1>"));    
	   }
	}
	

snippet environment_version

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_Version/version.cs

	using System;
	
	class Sample
	{
	    public static void Main()
	    {
	    Console.WriteLine();
	    Console.WriteLine("Version: {0}", Environment.Version.ToString());
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdatahostservice

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataHostService/IVsDataHostService4.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Shell.Interop;
	
	public class DdexHostSvcExample4
	{
	    public static IVsUIShell GetIVsUIShell(IVsDataHostService hostService)
	    {
	        return hostService.GetService<IVsUIShell>();
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdatahostservice

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataHostService/IVsDataHostService8.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Shell.Interop;
	
	public class DdexHostSvcExample8
	{
	    public static IVsUIShell GetIVsUIShell(IVsDataHostService hostService)
	    {
	        return hostService.TryGetService<IVsUIShell>();
	    }
	}
snippet assemblydelaysignattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyDelaySignAttribute/source.cs

	using System;
	using System.Reflection;
	
	[assembly:AssemblyKeyFileAttribute("TestPublicKey.snk")]
	[assembly:AssemblyDelaySignAttribute(true)]
	
	namespace DelaySign
	{
		public class Test { }
	}
snippet microsoft_visualstudio_data_core_ivsdatahostservice

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataHostService/IVsDataHostService6.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Shell.Interop;
	
	public class DdexHostSvcExample6
	{
	    public static IVsUIShell GetIVsUIShell(IVsDataHostService hostService)
	    {
	        return hostService.GetService<SVsUIShell, IVsUIShell>();
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdatahostservice

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataHostService/IVsDataHostService10.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Shell.Interop;
	
	public class DdexHostSvcExample10
	{
	    public static IVsUIShell GetIVsUIShell(IVsDataHostService hostService)
	    {
	        return hostService.TryGetService<SVsUIShell, IVsUIShell>();
	    }
	}
snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/singlecustom1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime date1 = new DateTime(2009, 9, 8);
	   }
	}

snippet runtime_compilerservices_compilerglobalscopeattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_CompilerServices_CompilerGlobalScopeAttribute/example.cs

	using System;
	using System.Runtime.CompilerServices;
	
	[CompilerGlobalScopeAttribute()]
	class Program
	{
	    static void Main(string[] args)
	    {
	        Console.WriteLine("The attribute was applied.");
	
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdataprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProvider/IVsDataProvider10.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	
	public class DDEX_IVsDataProviderExample10
	{
	    public static IVsDataConnectionProperties CreateConnectionProperties(
	        IVsDataProvider provider)
	    {
	        return provider.TryCreateObject<IVsDataConnectionProperties>();
	    }
	}
snippet projectn

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn/compat3.cs

	using System;
	
	public class InnerType{}
	
	public class X
	{
	   public InnerType instance { get; set; }
	}
	
	public class Y : X {} 
	

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/public2.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class Person
	{
	   private Int16 personAge = 0;
	
	   public Int16 Age 
	   { get { return personAge; } }
	}

snippet file_exists

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_Exists/program.cs

	using System;
	using System.IO;
	
	class Example
	{
	    static void Main()
	    {
	string curFile = @"c:\temp\test.txt";
	Console.WriteLine(File.Exists(curFile) ? "File exists." : "File does not exist.");
	    }
	}

snippet process_standardoutput

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Process_StandardOutput/Process_StandardOutput_Sample.cs

	/* This program is used by 'Process_StandardOutput.exe'. Its output will 
	get read  by Process_StandardOutput.exe. */
	
	using System;
	using System.ComponentModel;
	
	class Class1
	{
	   static void Main()
	   {
	      Console.WriteLine("Hello World");
	   }
	}

snippet environment_username

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_UserName/username.cs

	using System;
	
	class Sample
	{
	    public static void Main()
	    {
	    Console.WriteLine();
	    Console.WriteLine("UserName: {0}", Environment.UserName);
	    }
	}
snippet addinp1hva

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1HVA/calc1hva.cs

	namespace CalcHVAs 
	{
	    public interface ICalculator 
	    {
	        double Add(double a, double b);
	        double Subtract(double a, double b);
	        double Multiply(double a, double b);
	        double Divide(double a, double b);
	    }
	}
	

snippet runtime_compilerservices_compilationrelaxationsattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_CompilerServices_CompilationRelaxationsAttribute/example.cs

	using System;
	using System.Runtime.CompilerServices;
	
	[assembly:CompilationRelaxationsAttribute(CompilationRelaxations.NoStringInterning)]
	
	class Program
	{
	    static void Main(string[] args)
	    {
	        Console.WriteLine("The CompilationRelaxationsAttribute attribute was applied.");
	
	    }
	}
snippet runtime_compilerservices_suppressildasmattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_CompilerServices_SuppressIldasmAttribute/sample.cs

	using System;
	using System.Runtime.CompilerServices;
	
	[assembly: SuppressIldasmAttribute()]
	class Program
	{
	    static void Main(string[] args)
	    {
	        Console.WriteLine("The SuppressIldasmAttribute is applied to this assembly.");
	
	    }
	
	}
snippet microsoft_visualstudio_data_core_ivsdataprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProvider/IVsDataProvider9.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	
	public class DDEX_IVsDataProviderExample9
	{
	    public static bool HasSpecialConnectForUI(
	        IVsDataProvider provider, Guid source)
	    {
	        return provider.SupportsObject(
	            source, typeof(IVsDataConnectionUIConnector));
	    }
	}
snippet formatting_howto_weekdayname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_WeekdayName/abbrname1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime dateValue = new DateTime(2008, 6, 11);
	      Console.WriteLine(dateValue.ToString("ddd"));   
	   }
	}

snippet formatting_howto_weekdayname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_WeekdayName/fullname4.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime dateValue = new DateTime(2008, 6, 11);
	      Console.WriteLine(dateValue.ToString("dddd"));    
	   }
	}

snippet formatting_howto_weekdayname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_WeekdayName/weekdaynumber7.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime dateValue = new DateTime(2008, 6, 11);
	      Console.WriteLine((int) dateValue.DayOfWeek);      
	   }
	}

snippet conceptual_calendars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_calendars/formatstrings2.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	         DateTime dat = new DateTime(2012, 5, 1);
	         Console.WriteLine("{0:MM-dd-yyyy g}", dat);
	   }
	}

snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/explicitargs2.cs

	using System;
	
	namespace System
	{
	   public enum StringComparison {
	      CurrentCulture,
	      CurrentCultureIgnoreCase,
	      InvariantCulture,
	      InvariantCultureIgnoreCase,
	      Ordinal,
	      OrdinalIgnoreCase,
	    }
	}

snippet projectn

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn/missinginteropdataexception_syntax1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}
	
	public class MissingInteropDataException : Exception
	{}

snippet runtime_compilerservices_defaultdependencyattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_CompilerServices_DefaultDependencyAttribute/example.cs

	using System;
	using System.Runtime.CompilerServices;
	
	[assembly: DefaultDependencyAttribute(LoadHint.Always)]
	class Program
	{
	    
	    static void Main(string[] args)
	    {
	
	        Console.WriteLine("The DefaultDependencyAttribute attribute was applied.");
	
	    }
	}
snippet projectn

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn/missingmetadataexception_syntax1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}
	
	public sealed class MissingMetadataException : TypeAccessException
	{}

snippet projectn

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn/missingruntimeartifactexception_syntax1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}
	
	internal sealed class MissingRuntimeArtifactException : MemberAccessException
	{}

snippet obfuscateassemblyattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ObfuscateAssemblyAttribute/source.cs

	using System;
	using System.Reflection;
	
	[assembly: ObfuscateAssemblyAttribute(true, 
	    StripAfterObfuscation=false)]
	
	public class Type1
	{
	    [ObfuscationAttribute(Exclude=true)]
	    public void MethodA() {}
	
	    public static void Main() {}
	}

snippet appcompat_sslprotocols

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/appcompat_sslprotocols/program.cs

	using System;
	
	class Program
	{
	   static void Main()
	   {
	      const string DisableCachingName = @"TestSwitch.LocalAppContext.DisableCaching";
	      const string DontEnableSchUseStrongCryptoName = @"Switch.System.Net.DontEnableSchUseStrongCrypto";
	      AppContext.SetSwitch(DisableCachingName, true); 
	      AppContext.SetSwitch(DontEnableSchUseStrongCryptoName, true); 
	   }
	}
	

snippet howtogeneric

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/source.cs

	using System;
	
	class B<T, U> {}
	class D<V, W> : B<int, V> {}
	
	class GenTypes
	{
	    public static void Main()
	    {
	    }
	}

snippet formatting_numeric_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/formatting_numeric_custom/literal2.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      double n = 123.8;
	      Console.WriteLine($"{n:#,##0.0K}");
	   }
	}
	

snippet microsoft_visualstudio_data_core_ivsdatasupport

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSupport/IVsDataSupport.cs

	using System;
	using System.IO;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	
	internal class MyObjectSupport
	{
	    public Stream OpenSupportStream()
	    {
	        return GetType().Assembly.GetManifestResourceStream(
	            "MyObjectSupport.xml");
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdatahostservice

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataHostService/IVsDataHostService5.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Shell.Interop;
	
	public class DdexHostSvcExample5
	{
	    private static readonly Guid SID_IVsUIShell =
	        new Guid("B61FC35B-EEBF-4dec-BFF1-28A2DD43C38F");
	
	    public static IVsUIShell GetIVsUIShell(IVsDataHostService hostService)
	    {
	        return hostService.GetService<IVsUIShell>(SID_IVsUIShell);
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdatahostservice

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataHostService/IVsDataHostService9.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Shell.Interop;
	
	public class DdexHostSvcExample9
	{
	    private static readonly Guid SID_IVsUIShell =
	        new Guid("B61FC35B-EEBF-4dec-BFF1-28A2DD43C38F");
	
	    public static IVsUIShell GetIVsUIShell(IVsDataHostService hostService)
	    {
	        return hostService.TryGetService<IVsUIShell>(SID_IVsUIShell);
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdataprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProvider/IVsDataProvider6.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	
	public class DDEX_IVsDataProviderExample6
	{
	    public static IVsDataObjectSelector CreateObjectSelector(
	        IVsDataProvider provider, string objectSelectorTypeName)
	    {
	        Type objectSelectorType = provider.GetType(objectSelectorTypeName);
	        return Activator.CreateInstance(objectSelectorType)
	            as IVsDataObjectSelector;
	    }
	}
snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/telnumber1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      long number = 8009999999;
	      string fmt = "000-000-0000";
	      Console.WriteLine(number.ToString(fmt));
	   }
	}

snippet projectn

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn/compat1.cs

	using System;
	
	struct N<T> {}
	struct X { N<X> x; }
	
	public class Example
	{
	   public static void Main()
	   {
	      N<int> n = new N<int>();
	      X x = new X();
	   }
	}

snippet assembly_fullname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Assembly_FullName/example2.cs

	using System;
	using System.Reflection;
	
	class asmname
	{
	    public static void Main()
	    {
	        Type t = typeof(System.Data.DataSet);
	        string s = t.Assembly.FullName.ToString();
	        Console.WriteLine("The fully qualified assembly name " +
	            "containing the specified class is {0}.", s);
	    }
	}

snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/category1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(\p{IsGreek}+(\s)?)+\p{Pd}\s(\p{IsBasicLatin}+(\s)?)+";
	      string input = "Κατα Μαθθαίον - The Gospel of Matthew";
	
	   }
	}

snippet testfullname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TestFullName/testfullname.cs

	using System;
	class TestFullName 
	{
	public static void Main() 
	    {
	    Type t = typeof(Array);
	    Console.WriteLine("The full name of the Array type is {0}.", t.FullName);
	    }
	} 
	
	/* This example produces the following output:
	
	The full name of the Array type is System.Array.
	 */
snippet formatting_numeric_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/formatting_numeric_custom/SpaceOrDigit1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      Double value = .324;
	      Console.WriteLine("The value is: '{0,5:#.###}'", value);
	   }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/public1.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class Person
	{
	   private UInt16 personAge = 0;
	
	   public UInt16 Age 
	   { get { return personAge; } }
	}

snippet string_replace1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_replace1/string.replace1.cs

	using System;
	
	class stringReplace1 {
	    public static void Main() {
	        String str = "1 2 3 4 5 6 7 8 9";
	        Console.WriteLine("Original string: \"{0}\"", str);
	        Console.WriteLine("CSV string:      \"{0}\"", str.Replace(' ', ','));
	    
	    }
	}

snippet runtime_compilerservices_discardableattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_CompilerServices_DiscardableAttribute/example.cs

	using System;
	using System.Runtime.CompilerServices;
	
	
	[DiscardableAttribute()]
	class Program
	{
	    
	    static void Main(string[] args)
	    {
	
	        Console.WriteLine("The DiscardableAttribute attribute was applied.");
	
	    }
	}
snippet environment_workingset

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_WorkingSet/workingset.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine("WorkingSet: {0}", Environment.WorkingSet);
	    }
	}
	/*
	This example produces the following results:
	
	WorkingSet: 5038080
	*/
snippet adcreatedomain

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADCreateDomain/source2.cs

	using System;
	using System.Reflection;
	
	class AppDomain1
	{
	    public static void Main()
	    {
	        Console.WriteLine("Creating new AppDomain.");
	        AppDomain domain = AppDomain.CreateDomain("MyDomain");
	
	        Console.WriteLine("Host domain: " + AppDomain.CurrentDomain.FriendlyName);
	        Console.WriteLine("child domain: " + domain.FriendlyName);
	    }
	}

snippet microsoft_visualstudio_data_core_ivsdatahostservice

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataHostService/IVsDataHostService.cs

	using System;
	using System.Diagnostics;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Shell.Interop;
	
	public class DdexHostSvcExample1
	{
	    public static IVsUIShell GetIVsUIShell(IServiceProvider serviceProvider)
	    {
	        IVsDataHostService hostService = serviceProvider.GetService(
	            typeof(IVsDataHostService)) as IVsDataHostService;
	        return hostService.GetService<IVsUIShell>();
	    }
	}

snippet tools_certmgr

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/tools_certmgr/storenames1.cs

	using System;
	using System.Security.Cryptography.X509Certificates;
	
	public class Example
	{
	   public static void Main()
	   {
	      foreach (var storeValue in Enum.GetValues(typeof(StoreName))) {
	         X509Store store = new X509Store((StoreName) storeValue);
	         store.Open(OpenFlags.ReadOnly);
	         Console.WriteLine(store.Name);
	      }  
	   }
	}

snippet cocontrasimpleaction

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cocontrasimpleaction/example.cs

	using System;
	
	class Base {}
	class Derived : Base {}
	
	class Example
	{
	    static void Main()
	    {
	        Action<Base> b = (target) => { Console.WriteLine(target.GetType().Name); };
	        Action<Derived> d = b;
	        d(new Derived());
	    }
	}

snippet microsoft_visualstudio_data_core_ivsdataprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProvider/IVsDataProvider3.cs

	using System;
	using System.IO;
	using System.Reflection;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	
	public class DDEX_IVsDataProviderExample3
	{
	    public static Stream GetProviderString(IVsDataProvider provider,
	        string resourceName, string assemblyString)
	    {
	        Assembly assembly = provider.GetAssembly(assemblyString);
	        return assembly.GetManifestResourceStream(resourceName);
	    }
	}
snippet formatting_howto_weekdayname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_WeekdayName/abbrname2.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime dateValue = new DateTime(2008, 6, 11);
	      Console.WriteLine(dateValue.ToString("ddd", 
	                        new CultureInfo("fr-FR")));    
	   }
	}

snippet formatting_howto_weekdayname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_WeekdayName/fullname5.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime dateValue = new DateTime(2008, 6, 11);
	      Console.WriteLine(dateValue.ToString("dddd", 
	                        new CultureInfo("es-ES")));    
	   }
	}

snippet formatting_composite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_Composite/Escaping1.cs

	using System;
	
	public class Class1
	{
	   public static void Main()
	   {
	      int value = 6324;
	      string output = string.Format("{0}{1:D}{2}", 
	                                   "{", value, "}");
	      Console.WriteLine(output);
	   }
	}

snippet appdomain_executeassembly

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/executeassembly.cs

	using System;
	
	class Test {
	   public static void Main() {
	      AppDomain currentDomain = AppDomain.CurrentDomain;
	      AppDomain otherDomain = AppDomain.CreateDomain("otherDomain");
	      
	      currentDomain.ExecuteAssembly("MyExecutable.exe");
	
	      otherDomain.ExecuteAssembly("MyExecutable.exe");
	   }
	}

snippet conceptual_interop_pinvoke

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_Interop_PInvoke/Example1.cs

	using System;
	using System.Runtime.InteropServices;
	
	public class Win32 {
	     [DllImport("user32.dll", CharSet=CharSet.Auto)]
	     public static extern IntPtr MessageBox(int hWnd, String text, 
	                     String caption, uint type);
	}
	
	public class HelloWorld {
	    public static void Main() {
	       Win32.MessageBox(0, "Hello World", "Platform Invoke Sample", 0);
	    }
	}      

snippet testissubclassof

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TestIsSubclassOf/testissubclassof.cs

	using System;
	
	public class Class1 { }
	public class DerivedC1 : Class1 { }
	
	class IsSubclassTest
	{
	   public static void Main()
	   {
	      Console.WriteLine("DerivedC1 subclass of Class1: {0}",
	                         typeof(DerivedC1).IsSubclassOf(typeof(Class1)));
	   }
	}
snippet environment_commandline

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/environment_CommandLine/commandline.cs

	using System;
	
	class Example
	{
	    public static void Main() 
	    {
	       Console.WriteLine();
	       Console.WriteLine("CommandLine: {0}", Environment.CommandLine);
	    }
	}
snippet conceptual_string_basicops

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_string_basicops/trim2.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      String header = "* A Short String. *";
	      Console.WriteLine(header);
	      Console.WriteLine(header.Trim( new Char[] { ' ', '*', '.' } ));
	   }
	}

snippet conceptual_string_basicops

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_string_basicops/replace1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      String phrase = "a cold, dark night";
	      Console.WriteLine("Before: {0}", phrase);
	      phrase = phrase.Replace(",", "");
	      Console.WriteLine("After: {0}", phrase);
	   }
	}
snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/custom1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      string customFormat = "MMMM dd, yyyy (dddd)";
	      DateTime date1 = new DateTime(2009, 8, 28);
	      Console.WriteLine(date1.ToString(customFormat));   
	   }
	}

snippet projectn

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn/compat2.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}
	
	class A<T> {}
	
	class B<T> : A<B<A<T>>> 
	{}

snippet runtime_compilerservices_dependencyattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_CompilerServices_DependencyAttribute/example.cs

	using System;
	using System.Runtime.CompilerServices;
	
	[assembly: DependencyAttribute("AssemblyA", LoadHint.Always)]
	[assembly: DependencyAttribute("AssemblyB", LoadHint.Sometimes)]
	
	class Program
	{
	    
	    static void Main(string[] args)
	    {
	
	        Console.WriteLine("The DependencyAttribute attribute was applied.");
	
	    }
	}
snippet environment_userinteractive

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_UserInteractive/userinteractive.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine();
	    Console.WriteLine("UserInteractive: {0}", Environment.UserInteractive);
	    }
	}
	/*
	This example produces the following results:
	
	UserInteractive: True
	*/
snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/groupsyntax1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      int ctr = 1;
	      Match match = Regex.Match("aaabbbaaacccaaaddd", "(aaa)");
	      if (match.Success)
	      {
	         Group group = match.Groups[ctr];         
	      }
	   }
	}

snippet conceptual_observerdesign_howto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_observerdesign_howto/program.cs

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	
	class Program
	{
	   static void Main(string[] args)
	   {
	      TemperatureMonitor provider = new TemperatureMonitor();
	      TemperatureReporter observer1 = new TemperatureReporter();
	      observer1.Subscribe(provider);
	      TemperatureReporter observer2 = new TemperatureReporter();
	      observer2.Subscribe(provider);
	      provider.GetTemperature();
	   }
	}

snippet consolein

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/consolein/consolein.cs

	using System;
	using System.IO;
	
	class InTest {
	    public static void Main() {
	
	        TextReader tIn = Console.In;
	        TextWriter tOut = Console.Out;
	
	        tOut.WriteLine("Hola Mundo!");
	        tOut.Write("What is your name: ");
	        String name = tIn.ReadLine();
	
	        tOut.WriteLine("Buenos Dias, {0}!", name);
	    }
	}
snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/precisionspecifier1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      byte[] byteValues = { 12, 163, 255 };
	      foreach (byte byteValue in byteValues)
	         Console.WriteLine(byteValue.ToString("X4"));
	   }
	}

snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/replace1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b\d+\.\d{2}\b";
	      string replacement = "$$$&"; 
	      string input = "Total Cost: 103.64";
	      Console.WriteLine(Regex.Replace(input, pattern, replacement));     
	   }
	}

snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/any1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b.*[.?!;:](\s|\z)";
	      string input = "this. what: is? go, thing.";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(match.Value);
	   }
	}

snippet assembly_load1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Assembly_Load1/load1.cs

	using System;
	using System.Reflection;
	
	class Class1
	{
	    public static void Main()
	    {
	        Assembly SampleAssembly = Assembly.Load
			    ("SampleAssembly, Version=1.0.2004.0, Culture=neutral, PublicKeyToken=8744b20f8da049e3");
			foreach (Type oType in SampleAssembly.GetTypes()) {
	            Console.WriteLine(oType.Name);
	        }
	    }
	}
snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/righttoleft1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\bb\w+\s";
	      string input = "builder rob rabble";
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.RightToLeft))
	         Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);     
	   }
	}

snippet convertchangetype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/convertchangetype/convertchangetype.cs

	using System;
	
	public class ChangeTypeTest {
	    public static void Main() {
	
	        Double d = -2.345;
	        int i = (int)Convert.ChangeType(d, typeof(int));
	
	        Console.WriteLine("The double value {0} when converted to an int becomes {1}", d, i);
	
	        string s = "12/12/98";
	        DateTime dt = (DateTime)Convert.ChangeType(s, typeof(DateTime));
	
	        Console.WriteLine("The string value {0} when converted to a Date becomes {1}", s, dt);        
	    }
	}
snippet enumgetname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/enumgetname/EnumGetName.cs

	using System;
	
	public class GetNameTest {
	    enum Colors { Red, Green, Blue, Yellow };
	    enum Styles { Plaid, Striped, Tartan, Corduroy };
	
	    public static void Main() {
	
	        Console.WriteLine("The 4th value of the Colors Enum is {0}", Enum.GetName(typeof(Colors), 3));
	        Console.WriteLine("The 4th value of the Styles Enum is {0}", Enum.GetName(typeof(Styles), 3));
	    }
	}

snippet assemblyname_keypair

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyName_KeyPair/keyfileattrib.cs

	using System;
	using System.Reflection;
	
	[assembly:AssemblyKeyFileAttribute("keyfile.snk")]
	namespace KeyFileAttrib
	{
	    public class Dummy
	    {
	        public static void Main()
	        {
	            Console.WriteLine("KeyFileAttrib.Dummy.Main()");
	        }
	    }
	}

snippet cocontrasimpleienum

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cocontrasimpleienum/example.cs

	using System;
	using System.Collections.Generic;
	
	class Base {}
	class Derived : Base {}
	
	class C
	{
	    public static void Main()
	    {
	        IEnumerable<Derived> d = new List<Derived>();
	        IEnumerable<Base> b = d;
	    }
	}
	
	

snippet environment_getfolderpath

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_GetFolderPath/getfolderpath.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine();
	    Console.WriteLine("GetFolderPath: {0}", 
	                 Environment.GetFolderPath(Environment.SpecialFolder.System));
	    }
	}
	/*
	This example produces the following results:
	
	GetFolderPath: C:\WINNT\System32
	*/
snippet conceptual_resources_packaging

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_packaging/example1.cs

	using System;
	using System.Reflection;
	using System.Resources;
	
	[assembly:NeutralResourcesLanguage("fr", UltimateResourceFallbackLocation.Satellite)]
	
	public class Example
	{
	   public static void Main()
	   {
	      ResourceManager rm = new ResourceManager("resources", 
	                                               typeof(Example).Assembly);
	      string greeting = rm.GetString("Greeting");
	      Console.WriteLine(greeting); 
	   }
	}

snippet runtime_compilerservices_stringfreezingattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_CompilerServices_StringFreezingAttribute/example.cs

	using System;
	using System.Runtime.CompilerServices;
	
	[assembly :StringFreezingAttribute()]
	
	class Program
	{
	    
	    string frozenString = "This is a frozen string after Ngen is run.";
	    
	    static void Main(string[] args)
	    {
	
	        Console.WriteLine("The StringFreezingAttribute attribute was applied.");
	
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdatasourcemanager

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSourceManager/IVsDataSourceManager.cs

	using System;
	using System.Diagnostics;
	using Microsoft.VisualStudio.Data.Core;
	
	public class DDEX_IVsDataSourceManagerExample1
	{
	    public static void EnumerateDataSources(IServiceProvider serviceProvider)
	    {
	        IVsDataSourceManager sourceManager =
	            serviceProvider.GetService(typeof(IVsDataSourceManager))
	                as IVsDataSourceManager;
	        foreach (IVsDataSource source in sourceManager.Sources.Values)
	        {
	            Trace.WriteLine(source.DisplayName);
	        }
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdataprovidermanager

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProviderManager/IVsDataProviderManager.cs

	using System;
	using System.Diagnostics;
	using Microsoft.VisualStudio.Data.Core;
	
	public class DDEX_IVsDataProviderExample1
	{
	    public static void EnumerateProviders(IServiceProvider serviceProvider)
	    {
	        IVsDataProviderManager providerManager =
	            serviceProvider.GetService(typeof(IVsDataProviderManager))
	                as IVsDataProviderManager;
	        foreach (IVsDataProvider provider in providerManager.Providers.Values)
	        {
	            Trace.WriteLine(provider.Name);
	        }
	    }
	}
snippet conceptual_perfcounters_inprosxs

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_perfcounters_inprosxs/regsetting1.cs

	using System;
	
	public class Class1
	{
	   public static void Main()
	   {
	      Microsoft.Win32.RegistryKey key; 
	      key = Microsoft.Win32.Registry.LocalMachine.CreateSubKey( 
	                @"System\CurrentControlSet\Services\.NETFramework\Performance");
	      key.SetValue("ProcessNameFormat", 1, 
	                   Microsoft.Win32.RegistryValueKind.DWord);
	      key.Close();
	   }
	}

snippet microsoft_visualstudio_data_core_ivsdataproviderobjectfactory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProviderObjectFactory/IVsDataProviderObjectFactory3.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Framework;
	
	public class MyProviderObjectFactory3 : DataProviderObjectFactory
	{
	    public override object CreateObject(Type objType)
	    {
	        return null;
	    }
	
	    public override Type GetType(string typeName)
	    {
	        typeName = "Company.DdexProvider." + typeName;
	        return base.GetType(typeName);
	    }
	}
snippet projectn

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn/array1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      Type t = typeof(Class1);
	      Type at = t.MakeArrayType(1);
	      Array arr = Array.CreateInstance(at, 10);
	      Console.WriteLine("{0} has {1} elements", arr.GetType().Name, arr.Length);
	   }
	}
	
	public class Class1
	{
	 
	} 
snippet environment_systemdirectory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_SystemDirectory/systemdirectory.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine();
	    Console.WriteLine("SystemDirectory: {0}", Environment.SystemDirectory);
	    }
	}
	/*
	This example produces the following results:
	
	SystemDirectory: C:\WINNT\System32
	*/
snippet environment_getlogicaldrives

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_GetLogicalDrives/getlogicaldrives.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine();
	    String[] drives = Environment.GetLogicalDrives();
	    Console.WriteLine("GetLogicalDrives: {0}", String.Join(", ", drives));
	    }
	}
	/*
	This example produces the following results:
	
	GetLogicalDrives: A:\, C:\, D:\
	*/
snippet microsoft_visualstudio_data_core_ivsdataprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProvider/IVsDataProvider5.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	
	public class DDEX_IVsDataProviderExample5
	{
	    public static string GetDisplayName(
	        IVsDataProvider provider)
	    {
	        string displayName = String.Empty;
	        string resourceId = provider.GetProperty("DisplayName") as string;
	        if (resourceId != null)
	        {
	            displayName = provider.GetString(resourceId);
	        }
	        return displayName;
	    }
	}
snippet datetime_adddays

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_AddDays/class1.cs

	using System;
	
	class Class1
	{
		static void Main()
		{
			DateTime today = DateTime.Now;
			DateTime answer = today.AddDays(36);
	        Console.WriteLine("Today: {0:dddd}", today);
	        Console.WriteLine("36 days from today: {0:dddd}", answer);
		}
	}
	

snippet datetime_add

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_Add/class1.cs

	using System;
	
	namespace Add
	{
	   class Class1
	   {
	      static void Main(string[] args)
	      {
	         System.DateTime today = System.DateTime.Now;
	         System.TimeSpan duration = new System.TimeSpan(36, 0, 0, 0);
	         System.DateTime answer = today.Add(duration);
	         System.Console.WriteLine("{0:dddd}", answer);
	      }
	   }
	}

snippet conceptual_regularexpressions_backtracking

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_backtracking/backtracking1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "needing a reed";
	      string pattern = @"e{2}\w\b";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("{0} found at position {1}", 
	                           match.Value, match.Index);
	   }
	}

snippet conceptual_regex_language_substitutions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_substitutions/numberedgroup1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\p{Sc}*(\s?\d+[.,]?\d*)\p{Sc}*";
	      string replacement = "$1";
	      string input = "$16.32 12.19 £16.29 €18.29  €18,29";
	      string result = Regex.Replace(input, pattern, replacement);
	      Console.WriteLine(result);
	   }
	}

snippet conceptual_regex_language_substitutions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_substitutions/namedgroup1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\p{Sc}*(?<amount>\s?\d+[.,]?\d*)\p{Sc}*";
	      string replacement = "${amount}";
	      string input = "$16.32 12.19 £16.29 €18.29  €18,29";
	      string result = Regex.Replace(input, pattern, replacement);
	      Console.WriteLine(result);
	   }
	}

snippet conceptual_regex_language_substitutions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_substitutions/lastmatch1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(\w+)\s\1\b";
	      string substitution = "$+";
	      string input = "The the dog jumped over the fence fence.";
	      Console.WriteLine(Regex.Replace(input, pattern, substitution, 
	                        RegexOptions.IgnoreCase));
	   }
	}

snippet fileinfodelete

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/fileinfodelete/fileinfodelete.cs

	using System;
	using System.IO;
	
	public class DeleteTest 
	{
	    public static void Main() 
	    {
	        FileInfo fi = new FileInfo("temp.txt");
	        FileStream fs = fi.Create();
	        fs.Close();
	        fi.Delete();
	    }
	}
snippet string_gettypecode

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_gettypecode/gtc.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    String str = "abc";
	    TypeCode tc = str.GetTypeCode();
	    Console.WriteLine("The type code for '{0}' is {1}, which represents {2}.", 
	                         str, tc.ToString("D"), tc.ToString("F"));
	    }
	}
	/*
	This example produces the following results:
	The type code for 'abc' is 18, which represents String.
	*/
snippet conceptual_timespan_standard

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_standard/formatexample1.cs

	
	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      TimeSpan duration = new TimeSpan(1, 12, 23, 62);
	      string output = "Time of Travel: " + duration.ToString("c");
	      Console.WriteLine(output);
	      
	      Console.WriteLine("Time of Travel: {0:c}", duration); 
	   }
	}
snippet conceptual_timespan_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_custom/negativevalues1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      TimeSpan result = new DateTime(2010, 01, 01) - DateTime.Now; 
	      String fmt = (result < TimeSpan.Zero ?  "\\-" : "") + "dd\\.hh\\:mm";
	      
	      Console.WriteLine(result.ToString(fmt));
	      Console.WriteLine("Interval: {0:" + fmt + "}", result);
	   }
	}

snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/singleline1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {      
	      string pattern = "(?s)^.+";
	      string input = "This is one line and" + Environment.NewLine + "this is the second.";
	
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(Regex.Escape(match.Value));
	   }
	}

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/dates5.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime date1 = DateTime.SpecifyKind(new DateTime(2013, 3, 9, 10, 30, 0), 
	                                            DateTimeKind.Local);
	      TimeSpan interval = new TimeSpan(48, 0, 0);
	      DateTime date2 = date1 + interval;
	      Console.WriteLine("{0:g} + {1:N1} hours = {2:g}", 
	                        date1, interval.TotalHours, date2);
	   }
	}

snippet cryptowalkthru

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CryptoWalkThru/Program.cs

	using System;
	using System.Collections.Generic;
	using System.Windows.Forms;
	
	namespace CryptoWalkThru
	{
	    static class Program
	    {
	        [STAThread]
	        static void Main()
	        {
	            Application.EnableVisualStyles();
	            Application.SetCompatibleTextRenderingDefault(false);
	            Application.Run(new Form1());
	        }
	    }
	} 
snippet runtime_compilerservices_runtimehelpers_equals

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_CompilerServices_RuntimeHelpers_Equals/example.cs

	using System;
	using System.Runtime.CompilerServices;
	
	
	class Program
	{
	
	    static void Main(string[] args)
	    {
	
	        int x = 1; int y = 1;
	
	        bool ret = RuntimeHelpers.Equals(x, y);
	
	        Console.WriteLine("The return value of RuntimeHelpers.Equals is: " + ret);
	
	    }
	}
snippet conceptual_asyncinterop

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_AsyncInterop/Semaphore1.cs

	using System;
	using System.Threading;
	using System.Threading.Tasks;
	
	public class Example
	{
	    static int N = 3;
	    
	    static SemaphoreSlim m_throttle = new SemaphoreSlim(N, N);
	    
	    static async Task DoOperation()
	    {
	        await m_throttle.WaitAsync();
	        m_throttle.Release();
	    }
	}

snippet portableclasslibrarymvvm

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/portableclasslibrarymvvm/viewmodelbase.cs

	using System;
	using System.ComponentModel;
	
	namespace SimpleMVVM.ViewModel
	{
	    public abstract class ViewModelBase : INotifyPropertyChanged
	    {
	        public event PropertyChangedEventHandler PropertyChanged;
	
	        protected virtual void OnPropertyChanged(string propName)
	        {
	            if (PropertyChanged != null)
	            {
	                PropertyChanged(this, new PropertyChangedEventArgs(propName));
	            }
	        }
	    }
	}
snippet timespan_breakingchanges

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/timespan_breakingchanges/legacyformatmode1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      TimeSpan interval = new TimeSpan(12, 30, 45);
	      string output;
	      try {
	         output = String.Format("{0:r}", interval);
	      }
	      catch (FormatException) {
	         output = "Invalid Format";
	      }
	      Console.WriteLine(output);
	   }
	}

snippet getfldval

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/GetFldVal/getfldval.cs

	using System;
	using System.Reflection;
	
	class Example
	{
	    public static String val = "test";
	    
	    public static void Main()
	    {
	        FieldInfo fld = typeof(Example).GetField("val");
	        Console.WriteLine(fld.GetValue(null));
	        val = "hi";
	        Console.WriteLine(fld.GetValue(null));
	    }
	}
snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/default1.cs

	using System;
	
	public class Automobile
	{
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      Automobile firstAuto = new Automobile();
	      Console.WriteLine(firstAuto);
	   }
	}

snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/iformatprovider1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      decimal value = 1603.42m;
	      Console.WriteLine(value.ToString("C3", new CultureInfo("en-US")));
	      Console.WriteLine(value.ToString("C3", new CultureInfo("fr-FR")));
	      Console.WriteLine(value.ToString("C3", new CultureInfo("de-DE")));
	   }
	}

snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/lookbehind1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "2010 1999 1861 2140 2009";
	      string pattern = @"(?<=\b20)\d{2}\b";
	      
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(match.Value);
	   }
	}

snippet operatingsystem_servicepack

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/OperatingSystem_ServicePack/sp.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    OperatingSystem os = Environment.OSVersion;
	    String sp = os.ServicePack;
	    Console.WriteLine("Service pack version = \"{0}\"", sp);
	    }
	}
	/*
	This example produces the following results:
	
	Service pack version = "Service Pack 1"
	
	*/
snippet formatting_dateandtime_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Custom/literal1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime dat1 = new DateTime(2009, 6, 15, 13, 45, 0);
	      
	      Console.WriteLine("'{0:%h}'", dat1);
	      Console.WriteLine("'{0: h}'", dat1);
	      Console.WriteLine("'{0:h }'", dat1);
	   }
	}

snippet appcompat_ignoreemptykeysequences

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/appcompat_ignoreemptykeysequences/program.cs

	using System;
	
	class Example
	{
	   static void Main(string[] args)
	   {
	      AppContext.SetSwitch("System.Xml.IgnoreEmptyKeySequences", true);
	
	      AppContext.SetSwitch("System.Xml.IgnoreEmptyKeySequences", false);
	
	   }
	}
	

snippet environment_processorcount

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/environment_processorcount/pc.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine("The number of processors " +
	        "on this computer is {0}.", 
	        Environment.ProcessorCount);
	    }
	}
	/*
	This example produces the following results:
	
	The number of processors on this computer is 1.
	*/
snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/monthname1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime midYear = new DateTime(2013, 7, 1);
	      Console.WriteLine("{0:d} is a {1}.", midYear, GetDayName(midYear));   
	   }
	   
	   private static string GetDayName(DateTime date)
	   {
	      return date.DayOfWeek.ToString("G");
	   }
	}

snippet conceptual_regularexpressions_design

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_design/lookahead1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b[A-Z]+\b(?=\P{P})";
	      string input = "If so, what comes next?";
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.IgnoreCase))
	         Console.WriteLine(match.Value);
	   }
	}

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/search1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("pl-PL");
	      string composite = "\u0041\u0300"; 
	      Console.WriteLine("Comparing using Char:   {0}", composite.IndexOf('\u00C0'));
	      Console.WriteLine("Comparing using String: {0}", composite.IndexOf("\u00C0"));
	   }
	}

snippet addinp1addinviews

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInViews/Calc1AddInView.cs

	using System.AddIn.Pipeline;
	
	namespace CalcAddInViews 
	{
	    [AddInBase()]
	    public interface ICalculator 
	    {
		double Add(double a, double b);
		double Subtract(double a, double b);
		double Multiply(double a, double b);
		double Divide(double a, double b);
	    }
	}

snippet directoryinfogetfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/directoryinfogetfiles/directoryinfogetfiles.cs

	using System;
	using System.IO;
	
	public class GetFilesTest 
	{
	    public static void Main() 
	    {
	        DirectoryInfo di = new DirectoryInfo("c:\\");
	
	        FileInfo[] fiArr = di.GetFiles();
	
	        foreach (FileInfo fri in fiArr)
	            Console.WriteLine(fri.Name);
	    }
	}
snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/positivecharclasses.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"gr[ae]y\s\S+?[\s\p{P}]";
	      string input = "The gray wolf jumped over the grey wall.";
	      MatchCollection matches = Regex.Matches(input, pattern);
	      foreach (Match match in matches)
	         Console.WriteLine($"'{match.Value}'");
	   }
	}

snippet operatingsystem_versionstring

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/OperatingSystem_VersionString/osvs.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    OperatingSystem os = Environment.OSVersion;
	    Console.WriteLine("This operating system is {0}", os.VersionString);
	    }
	}
	/*
	This example produces the following results:
	
	This operating system is Microsoft Windows NT 5.1.2600.0 Service Pack 1
	*/
snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/noncapture1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"(?:\b(?:\w+)\W*)+\.";
	      string input = "This is a short sentence.";
	      Match match = Regex.Match(input, pattern);
	      Console.WriteLine("Match: {0}", match.Value);
	      for (int ctr = 1; ctr < match.Groups.Count; ctr++)
	         Console.WriteLine("   Group {0}: {1}", ctr, match.Groups[ctr].Value);
	   }
	}

snippet environment_getenvironmentvariables

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_GetEnvironmentVariables/getenvironmentvariables.cs

	using System;
	using System.Collections;
	
	class Sample 
	{
	    public static void Main() 
	    {
	       Console.WriteLine();
	       Console.WriteLine("GetEnvironmentVariables: ");
	       foreach (DictionaryEntry de in Environment.GetEnvironmentVariables()) 
	           Console.WriteLine("  {0} = {1}", de.Key, de.Value);
	    }
	}
snippet environment_machinename

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_MachineName/machinename.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine();
	    Console.WriteLine("MachineName: {0}", Environment.MachineName);
	    }
	}
	/*
	This example produces the following results:
	(Any result that is lengthy, specific to the machine on which this sample was tested, or reveals information that should remain secure, has been omitted and marked "!---OMITTED---!".)
	
	MachineName: !---OMITTED---!
	*/
snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/matches1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "This is a a farm that that raises dairy cattle."; 
	      string pattern = @"\b(\w+)\W+(\1)\b";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("Duplicate '{0}' found at position {1}.",  
	                           match.Groups[1].Value, match.Groups[2].Index);
	   }
	}

snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/grouping1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"(\w+)\s(\1)";
	      string input = "He said that that was the the correct answer.";
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.IgnoreCase))
	         Console.WriteLine("Duplicate '{0}' found at positions {1} and {2}.", 
	                           match.Groups[1].Value, match.Groups[1].Index, match.Groups[2].Index);
	   }
	}

snippet conceptual_regex

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex/example2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Class1
	{
	   public static void Main()
	   {
	      string pattern = @"\b(\w+?)\s\1\b";
	      string input = "This this is a nice day. What about this? This tastes good. I saw a a dog.";
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.IgnoreCase))
	         Console.WriteLine("{0} (duplicates '{1}') at position {2}", 
	                           match.Value, match.Groups[1].Value, match.Index);
	   }
	}

snippet formatting_dateandtime_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Custom/escape1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime date = new DateTime(2009, 06, 15, 13, 45, 30, 90);
	      string fmt1 = "h \\h m \\m";
	      string fmt2 = @"h \h m \m";
	
	      Console.WriteLine("{0} ({1}) -> {2}", date, fmt1, date.ToString(fmt1));
	      Console.WriteLine("{0} ({1}) -> {2}", date, fmt2, date.ToString(fmt2));
	   }
	}

snippet enumformat

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/enumformat/EnumFormat.cs

	using System;
	
	enum Colors { Red, Green, Blue, Yellow };
	
	public class FormatTest {
	    public static void Main() {
	        Colors myColor = Colors.Blue;
	
	        Console.WriteLine("My favorite color is {0}.", myColor);
	        Console.WriteLine("The value of my favorite color is {0}.", Enum.Format(typeof(Colors), myColor, "d"));
	        Console.WriteLine("The hex value of my favorite color is {0}.", Enum.Format(typeof(Colors), myColor, "x"));
	    }
	}

snippet objdispex

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ObjDispEx/objdispexc.cs

	using System;
	using System.IO;
	
	public class ObjectDisposedExceptionTest 
	{
	   public static void Main()
	   {     
	      MemoryStream ms = new MemoryStream(16);
	      ms.Close();
	      try 
	      {
	         ms.ReadByte();
	      } 
	      catch (ObjectDisposedException e) 
	      {
	         Console.WriteLine("Caught: {0}", e.Message);
	      }
	   }
	}
snippet servicecontoller_executecommand

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ServiceContoller_ExecuteCommand/program.cs

	using System;
	using System.ServiceProcess;
	
	namespace test_exec_cmnd
	{
	    class Program
	    {
	        private enum SimpleServiceCustomCommands { StopWorker = 128, RestartWorker, CheckWorker };
	        static void Main(string[] args)
	        {
	            ServiceController myService = new ServiceController("SimpleService");
	            myService.ExecuteCommand((int)SimpleServiceCustomCommands.StopWorker);
	            myService.ExecuteCommand((int)SimpleServiceCustomCommands.RestartWorker);
	            myService.ExecuteCommand((int)SimpleServiceCustomCommands.CheckWorker);
	
	
	        }
	    }
	}
snippet environment_stacktrace

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_StackTrace/stacktrace.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine();
	    Console.WriteLine("StackTrace: '{0}'", Environment.StackTrace);
	    }
	}
	/*
	This example produces the following results:
	
	StackTrace: '   at System.Environment.GetStackTrace(Exception e)
	   at System.Environment.GetStackTrace(Exception e)
	   at System.Environment.get_StackTrace()
	   at Sample.Main()'
	*/
snippet conceptual_asyncinterop

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_AsyncInterop/Wrap1.cs

	using System;
	using System.IO;
	using System.Threading.Tasks;
	
	public static class Wrapper
	{
	    public static Task<int> ReadAsync(this Stream stream, 
	                                      byte[] buffer, int offset, 
	                                      int count)
	    {
	        if (stream == null) 
	           throw new ArgumentNullException("stream");
	        
	        return Task<int>.Factory.FromAsync(stream.BeginRead, 
	                                           stream.EndRead, buffer, 
	                                           offset, count, null);
	    }
	}

snippet regularexpressions_examples_protocol

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Examples_Protocol/Example.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	
	                          RegexOptions.None, TimeSpan.FromMilliseconds(150));
	      Match m = r.Match(url);
	      if (m.Success)
	         Console.WriteLine(r.Match(url).Result("${proto}${port}")); 
	   }
	}

snippet regularexpressions_examples_protocol

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Examples_Protocol/example2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	
	                          RegexOptions.None, TimeSpan.FromMilliseconds(150));
	      Match m = r.Match(url);
	      if (m.Success)
	         Console.WriteLine(m.Groups["proto"].Value + m.Groups["port"].Value); 
	   }
	}

snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/standard1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      DayOfWeek thisDay = DayOfWeek.Monday;
	      string[] formatStrings = {"G", "F", "D", "X"};
	      
	      foreach (string formatString in formatStrings)
	         Console.WriteLine(thisDay.ToString(formatString));
	   }
	}

snippet conceptual_resources_textfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_textfiles/greeting.cs

	using System;
	using System.Reflection;
	using System.Resources;
	
	public class Example
	{
	   public static void Main()
	   {
	      ResourceManager rm = new ResourceManager("GreetingResources", 
	                               typeof(Example).Assembly);
	      Console.Write(rm.GetString("prompt"));
	      string name = Console.ReadLine();
	      Console.WriteLine(rm.GetString("greeting"), name);                                                                          
	   }
	}

snippet environment_isservergc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/environment_IsServerGC/isg.cs

	using System;
	using System.Runtime;
	
	class Sample
	{
	    public static void Main()
	    {
	        string result;
	
	        if (GCSettings.IsServerGC == true)
	            result = "server";
	        else
	            result = "workstation";
	        Console.WriteLine("The {0} garbage collector is running.", result);
	    }
	}

snippet assemblyinstaller_checkifinstallable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller_CheckIfInstallable/MyAssembly_CheckIfInstallable.cs

	/* The following example creates an assembly which is used to demonstrate
	   the methods, properties and constructors of the 'AssemblyInstaller' class.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.Collections;
	
	namespace MyAssembly
	{
	   [RunInstallerAttribute(true)]
	   public class MyProjectInstaller : Installer
	   {
	      static void Main()
	      {
	         Console.WriteLine( "Hello World" );
	      }
	   }
	}

snippet assemblyinstaller_install

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller_Install/MyAssembly_Install.cs

	/* The following example creates an assembly which is used to demonstrate
	   the methods, properties and constructors of the 'AssemblyInstaller' class.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.Collections;
	
	namespace MyAssembly
	{
	   [RunInstallerAttribute(true)]
	   public class MyProjectInstaller : Installer
	   {
	      static void Main()
	      {
	         Console.WriteLine( "Hello World" );
	      }
	   }
	}

snippet assemblyinstaller_uninstall

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller_Uninstall/MyAssembly_Uninstall.cs

	/* The following example creates an assembly which is used to demonstrate
	   the methods, properties and constructors of the 'AssemblyInstaller' class.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.Collections;
	
	namespace MyAssembly
	{
	   [RunInstallerAttribute(true)]
	   public class MyProjectInstaller : Installer
	   {
	      static void Main()
	      {
	         Console.WriteLine( "Hello World" );
	      }
	   }
	}

snippet assemblyinstaller_helptext

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller_HelpText/MyAssembly_HelpText.cs

	/*  The following example creates an assembly which is used to demonstrate
	      the methods, properties and constructors of the 'AssemblyInstaller' class.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.Collections;
	
	namespace MyAssembly
	{
	   [RunInstallerAttribute(true)]
	   public class MyProjectInstaller : Installer
	   {
	      static void Main()
	      {
	         Console.WriteLine( "Hello World" );
	      }
	   }
	}

snippet assemblyinstaller

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller/MyAssembly.cs

	/*  The following example creates an assembly which is used to demonstrate
	      the methods, properties and constructors of the 'AssemblyInstaller' class.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.Collections;
	
	namespace MyAssembly
	{
	   [RunInstallerAttribute(true)]
	   public class MyProjectInstaller : Installer
	   {
	      static void Main()
	      {
	         Console.WriteLine( "Hello World" );
	      }
	   }
	}

snippet assemblyinstaller_rollback

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller_Rollback/MyAssembly_Rollback.cs

	/*  The following example creates an assembly which is used to demonstrate
	      the methods, properties and constructors of the 'AssemblyInstaller' class.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.Collections;
	
	namespace MyAssembly
	{
	   [RunInstallerAttribute(true)]
	   public class MyProjectInstaller : Installer
	   {
	      static void Main()
	      {
	         Console.WriteLine( "Hello World" );
	      }
	   }
	}

snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/result1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b\d+(,\d{3})*\.\d{2}\b";
	      string input = "16.32\n194.03\n1,903,672.08"; 
	
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(match.Result("$$ $&"));
	   }
	}

snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/determine1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      Regex rgx = new Regex(@"\w*\s", RegexOptions.IgnoreCase);
	      if ((rgx.Options & RegexOptions.IgnoreCase) == RegexOptions.IgnoreCase)
	         Console.WriteLine("Case-insensitive pattern comparison.");
	      else
	         Console.WriteLine("Case-sensitive pattern comparison.");
	      if (rgx.Options == RegexOptions.None)
	         Console.WriteLine("No options have been set.");
	   }
	}

snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/whitespace1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b\w+(e)?s(\s|$)";
	      string input = "matches stores stops leave leaves";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(match.Value);
	   }
	}

snippet addinp1contract

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1Contract/ICalc1Contract.cs

	using System.AddIn.Contract;
	using System.AddIn.Pipeline;
	
	namespace CalculatorContracts
	{
	    [AddInContract]
	    public interface ICalc1Contract : IContract
	    {
		double Add(double a, double b);
		double Subtract(double a, double b);
		double Multiply(double a, double b);
		double Divide(double a, double b);
	    }
	}

snippet environment_getcommandlineargs

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_GetCommandLineArgs/getcommandlineargs.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine();
	    String[] arguments = Environment.GetCommandLineArgs();
	    Console.WriteLine("GetCommandLineArgs: {0}", String.Join(", ", arguments));
	    }
	}
	/*
	This example produces output like the following:
	    
	    C:\>GetCommandLineArgs ARBITRARY TEXT
	    
	      GetCommandLineArgs: GetCommandLineArgs, ARBITRARY, TEXT
	*/
snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/range.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b[A-Z]\w*\b";
	      string input = "A city Albany Zulu maritime Marseilles";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(match.Value);
	   }
	}

snippet conceptual_regularexpressions_design

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_design/lookahead2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(?!non)\w+\b";
	      string input = "Nonsense is not always non-functional.";
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.IgnoreCase))
	         Console.WriteLine(match.Value);
	   }
	}

snippet formatting_numeric_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/formatting_numeric_custom/example1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      double number1 = 1234567890;
	      string value1 = number1.ToString("(###) ###-####");
	      Console.WriteLine(value1);
	      
	      int number2 = 42;
	      string value2 = number2.ToString("My Number = #");
	      Console.WriteLine(value2);
	   }
	}

snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/negativelookahead1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(?!un)\w+\b";
	      string input = "unite one unethical ethics use untie ultimate";
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.IgnoreCase))
	         Console.WriteLine(match.Value);
	   }
	}

snippet assembly_load1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Assembly_Load1/load2.cs

	using System;
	using System.Reflection;
	
	class Class1
	{
	    public static void Main()
	    {
	        Assembly myDll =
	            Assembly.Load("myDll, Version=1.0.0.1, Culture=neutral, PublicKeyToken=9b35aa32c18d4fb1");
	
			foreach (Type oType in myDll.GetTypes()) {
	            Console.WriteLine(oType.Name);
	        }
	    }
	}
snippet directoryinfogetdirectories

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/directoryinfogetdirectories/directoryinfogetdirectories.cs

	using System;
	using System.IO;
	
	public class GetDirectoriesTest 
	{
	    public static void Main() 
	    {
	
	        DirectoryInfo di = new DirectoryInfo("c:\\");
	
	        DirectoryInfo[] diArr = di.GetDirectories();
	
	        foreach (DirectoryInfo dri in diArr)
	            Console.WriteLine(dri.Name);
	    }
	}
snippet conceptual_regex_language_substitutions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_substitutions/entire1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "ABC123DEF456";
	      string pattern = @"\d+";
	      string substitution = "$_";
	      Console.WriteLine("Original string:          {0}", input);
	      Console.WriteLine("String with substitution: {0}", 
	                        Regex.Replace(input, pattern, substitution));      
	   }
	}

snippet conceptual_basicio_textfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_basicio_textfiles/append.cs

	using System;
	using System.IO;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	
	        string docPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
	
	        using (StreamWriter outputFile = new StreamWriter(Path.Combine(docPath, "WriteLines.txt"), true))
	        {
	            outputFile.WriteLine("Fourth Line");
	        }
	    }
	}

snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/match2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = "abc";
	      string input = "abc123abc456abc789";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("{0} found at position {1}.", 
	                           match.Value, match.Index);
	   }
	}

snippet regularexpressions_language_alternation

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_alternation/alternation2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b";
	      string input = "01-9999999 020-333333 777-88-9999";
	      Console.WriteLine("Matches for {0}:", pattern);
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("   {0} at position {1}", match.Value, match.Index);
	   }
	}

snippet regularexpressions_language_alternation

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_alternation/alternation3.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(?(\d{2}-)\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b";
	      string input = "01-9999999 020-333333 777-88-9999";
	      Console.WriteLine("Matches for {0}:", pattern);
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("   {0} at position {1}", match.Value, match.Index);
	   }
	}

snippet regularexpressions_language_alternation

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_alternation/alternation5.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(\d{2}-)?(?(1)\d{7}|\d{3}-\d{2}-\d{4})\b";
	      string input = "01-9999999 020-333333 777-88-9999";
	      Console.WriteLine("Matches for {0}:", pattern);
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("   {0} at position {1}", match.Value, match.Index);
	   }
	}

snippet regularexpressions_language_alternation

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_alternation/alternation4.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(?<n2>\d{2}-)?(?(n2)\d{7}|\d{3}-\d{2}-\d{4})\b";
	      string input = "01-9999999 020-333333 777-88-9999";
	      Console.WriteLine("Matches for {0}:", pattern);
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("   {0} at position {1}", match.Value, match.Index);
	   }
	}

snippet conceptual_timespan_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_custom/literal1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      TimeSpan interval = new TimeSpan(0, 32, 45);
	      string fmt = @"mm\:ss\ \m\i\n\u\t\e\s";
	      Console.WriteLine(interval.ToString(fmt));
	      fmt = "mm':'ss' minutes'";      
	      Console.WriteLine(interval.ToString(fmt));
	   }
	}

snippet conceptual_regex_language_assertions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_assertions/nonword1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "equity queen equip acquaint quiet";
	      string pattern = @"\Bqu\w+";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("'{0}' found at position {1}", 
	                           match.Value, match.Index);
	   }
	}

snippet conceptual_regex

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex/example1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = "(Mr\\.? |Mrs\\.? |Miss |Ms\\.? )";
	      string[] names = { "Mr. Henry Hunt", "Ms. Sara Samuels", 
	                         "Abraham Adams", "Ms. Nicole Norris" };
	      foreach (string name in names)
	         Console.WriteLine(Regex.Replace(name, pattern, String.Empty));
	   }
	}
snippet conceptual_basicio_textfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_basicio_textfiles/async.cs

	using System;
	using System.IO;
	using System.Threading.Tasks;
	
	class Program
	{
	    static async Task Main()
	    {
	        string docPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
	
	        using (StreamWriter outputFile = new StreamWriter(Path.Combine(docPath, "WriteTextAsync.txt")))
	        {
	            await outputFile.WriteAsync("This is a sentence.");
	        }
	    }
	}

snippet formatting_dateandtime_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Custom/custandformatting1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime thisDate1 = new DateTime(2011, 6, 10);
	      Console.WriteLine("Today is " + thisDate1.ToString("MMMM dd, yyyy") + ".");
	       
	      DateTimeOffset thisDate2 = new DateTimeOffset(2011, 6, 10, 15, 24, 16, 
	                                                    TimeSpan.Zero);
	      Console.WriteLine("The current date and time: {0:MM/dd/yy H:mm:ss zzz}", 
	                         thisDate2); 
	   }
	}

snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/alias1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime date1 = new DateTime(2009, 6, 30);
	      Console.WriteLine("D Format Specifier:     {0:D}", date1);
	      string longPattern = CultureInfo.CurrentCulture.DateTimeFormat.LongDatePattern;
	      Console.WriteLine("'{0}' custom format string:     {1}", 
	                        longPattern, date1.ToString(longPattern));
	   }
	}

snippet cryptography_memoryprotectionsample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_MemoryProtectionSample/memoryprotectionsample.cs

	using System;
	using System.Security.Cryptography;
	
	public class MemoryProtectionSample
	{
	
	    public static void Main()
	    {
	        byte [] secret = { 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4 };
	
	        ProtectedMemory.Protect( secret, MemoryProtectionScope.SameLogon );
	
	        ProtectedMemory.Unprotect( secret, MemoryProtectionScope.SameLogon );
	    }
	}

snippet codedom_class_sample_main

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDOM_Class_Sample_Main/program.cs

	using System;
	using System.Reflection;
	using System.IO;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using Microsoft.CSharp;
	
	namespace SampleCodeDom
	{
	    class Sample
	    {
	        CodeCompileUnit targetUnit;
	        CodeTypeDeclaration targetClass;
	        private const string outputFileName = "SampleCode.cs";
	        static void Main(string[] args)
	        {
	        }
	    }
	}

snippet remotingservices_setobjecturiformarshal

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RemotingServices_SetObjectUriForMarshal/source.cs

	using System;
	using System.Runtime.Remoting;
	using System.Security.Permissions;
	
	public class SetObjectUriForMarshalTest  {
	
	    class TestClass : MarshalByRefObject {
	    }
	
	    [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.RemotingConfiguration)] 
	    public static void Main()  {
	
	        TestClass obj = new TestClass();    
	
	        RemotingServices.SetObjectUriForMarshal(obj, "testUri");
	        RemotingServices.Marshal(obj);
	
	        Console.WriteLine(RemotingServices.GetObjectUri(obj));
	    }
	}
snippet conceptual_assembly_multifile

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_assembly_multifile/stringer.cs

	using System;
	
	namespace myStringer
	{
	    public class Stringer
	    {
	        public void StringerMethod()
	        {
	            System.Console.WriteLine("This is a line from StringerMethod.");
	        }
	    }
	}
	
	#if false
	csc /t:module Stringer.cs
	#endif

snippet microsoft_visualstudio_data_core_ivsdataprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProvider/IVsDataProvider7.cs

	using System;
	using System.Windows.Forms;
	using System.ComponentModel.Design;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services;
	
	public class DDEX_IVsDataProviderExample7
	{
	    public static bool AllowDelete(IVsDataProvider provider,
	        IVsDataExplorerNode node)
	    {
	        if (!provider.IsOperationSupported(StandardCommands.Delete, node))
	        {
	            MessageBox.Show(provider.GetUnsupportedReason(
	                StandardCommands.Delete, node));
	            return false;
	        }
	        return true;
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdataprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProvider/IVsDataProvider8.cs

	using System;
	using System.Windows.Forms;
	using System.ComponentModel.Design;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services;
	
	public class DDEX_IVsDataProviderExample8
	{
	    public static bool AllowDelete(IVsDataProvider provider,
	        IVsDataExplorerNode node)
	    {
	        if (!provider.IsOperationSupported(StandardCommands.Delete, node))
	        {
	            MessageBox.Show(provider.GetUnsupportedReason(
	                StandardCommands.Delete, node));
	            return false;
	        }
	        return true;
	    }
	}
snippet improvedinteropsnippets

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ImprovedInteropSnippets/codefile1.cs

	using System;
	using System.Runtime.InteropServices;
	[assembly:IDispatchImpl(IDispatchImplType.CompatibleImpl)]
	
	namespace MyNamespace
	{
		[IDispatchImpl(IDispatchImplType.InternalImpl)]
		class MyClass
		{
		}
	}
	
	
	

snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/comparison2.cs

	using System;
	public class Class1
	{
	   public static void Main()
	   {
	      string strA = "Владимир";
	      string strB = "ВЛАДИМИР";
	      
	      String.Compare(strA, strB, StringComparison.OrdinalIgnoreCase);
	      Console.WriteLine(String.Compare(strA, strB, StringComparison.OrdinalIgnoreCase));
	
	      String.Compare(strA.ToUpperInvariant(), strB.ToUpperInvariant(), 
	                     StringComparison.Ordinal);
	      Console.WriteLine(String.Compare(strA.ToUpperInvariant(), strB.ToUpperInvariant(), 
	                                       StringComparison.Ordinal));
	   }
	}

snippet conceptual_conversion

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_conversion/iconvertible1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      CallEII();
	      Console.WriteLine("-----");
	      
	   }
	
	   private static void CallEII()
	   {   
	      int codePoint = 1067;
	      IConvertible iConv = codePoint;
	      char ch = iConv.ToChar(null);
	      Console.WriteLine("Converted {0} to {1}.", codePoint, ch);
	   }
	}

snippet microsoft_visualstudio_data_core_ivsdatasource

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSource/IVsDataSource3.cs

	using System;
	using System.Diagnostics;
	using Microsoft.VisualStudio.Data.Core;
	
	public class DDEX_IVsDataSourceExample3
	{
	    public static void OutputSupportingProviders(
	        IServiceProvider serviceProvider,
	        IVsDataSource dataSource)
	    {
	        IVsDataProviderManager providerManager =
	            serviceProvider.GetService(typeof(IVsDataProviderManager))
	                as IVsDataProviderManager;
	        foreach (Guid providerGuid in dataSource.GetProviders())
	        {
	            IVsDataProvider provider = providerManager.Providers[providerGuid];
	            Trace.WriteLine(provider.Name);
	        }
	    }
	}
snippet environment_newline

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_NewLine/newline.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine();
	    Console.WriteLine("NewLine: {0}  first line{0}  second line{0}  third line",
	                          Environment.NewLine);
	    }
	}
	/*
	This example produces the following results:
	
	NewLine:
	  first line
	  second line
	  third line
	*/
snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/specifier1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      int integerValue = 60312;
	
	      double cost = 1632.54; 
	      Console.WriteLine(cost.ToString("C", 
	                        new System.Globalization.CultureInfo("en-US")));   
	
	   }
	}

snippet conceptual_resources_retrieving

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_retrieving/createresources.cs

	using System;
	using System.Drawing;
	using System.Drawing.Imaging;
	using System.IO;
	using System.Resources;
	
	public class Example
	{
	   public static void Main()
	   {
	      Bitmap bmp = new Bitmap(@".\SplashScreen.jpg");
	      MemoryStream imageStream = new MemoryStream();
	      bmp.Save(imageStream, ImageFormat.Jpeg);
	      
	      ResXResourceWriter writer = new ResXResourceWriter("AppResources.resx");
	      writer.AddResource("SplashScreen", imageStream);
	      writer.Generate();
	      writer.Close();      
	   }
	}
snippet conceptual_regularexpressions_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_bestpractices/compile1.cs

	using System;
	using System.Reflection;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      RegexCompilationInfo SentencePattern =
	                           new RegexCompilationInfo(@"\b(\w+((\r?\n)|,?\s))*\w+[.?:;!]",
	                                                    RegexOptions.Multiline,
	                                                    "SentencePattern",
	                                                    "Utilities.RegularExpressions",
	                                                    true);
	      RegexCompilationInfo[] regexes = { SentencePattern };
	      AssemblyName assemName = new AssemblyName("RegexLib, Version=1.0.0.1001, Culture=neutral, PublicKeyToken=null");
	      Regex.CompileToAssembly(regexes, assemName);
	   }
	}

snippet conceptual_observerdesign_howto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_observerdesign_howto/data.cs

	using System;
	
	public struct Temperature
	{
	   private decimal temp;
	   private DateTime tempDate;
	
	   public Temperature(decimal temperature, DateTime dateAndTime)
	   {
	      this.temp = temperature;
	      this.tempDate = dateAndTime;
	   }
	
	   public decimal Degrees
	   { get { return this.temp; } }
	
	   public DateTime Date
	   { get { return this.tempDate; } }
	}

snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/notcategory1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"(\P{Sc})+";
	      
	      string[] values = { "$164,091.78", "£1,073,142.68", "73¢", "€120" };
	      foreach (string value in values)
	         Console.WriteLine(Regex.Match(value, pattern).Value);
	   }
	}

snippet regularexpressions_examples_stripchars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Examples_StripChars/Example.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	    static string CleanInput(string strIn)
	    {
	        try {
	           return Regex.Replace(strIn, @"[^\w\.@-]", "", 
	                                RegexOptions.None, TimeSpan.FromSeconds(1.5)); 
	        }
	        catch (RegexMatchTimeoutException) {
	           return String.Empty;   
	        }
	    }
	}

snippet conceptual_asyncinterop

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_AsyncInterop/Stream1.cs

	using System;
	
	public class Stream
	{
	    public int Read(byte[] buffer, int offset, int count)
	    { return 0; }
	
	    public IAsyncResult BeginRead(byte[] buffer, int offset, 
	                                  int count, AsyncCallback callback, 
	                                  object state)
	    { return null;  }
	   
	    public int EndRead(IAsyncResult asyncResult)
	    { return 0; }
	}

snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/negativelookahead2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b\w+\b(?!\p{P})";
	      string input = "Disconnected, disjointed thoughts in a sentence fragment.";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(match.Value);
	   }
	}

snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/negativecharclasses.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\bth[^o]\w+\b";
	      string input = "thought thing though them through thus thorough this";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(match.Value);
	   }
	}

snippet console_bufferhw

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_bufferHW/hw.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine("The current buffer height is {0} rows.",
	                      Console.BufferHeight);
	    Console.WriteLine("The current buffer width is {0} columns.",
	                      Console.BufferWidth);
	    }
	}
	/*
	This example produces the following results:
	
	The current buffer height is 300 rows.
	The current buffer width is 85 columns.
	*/
snippet appcompat_jit64

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppCompat_JIT64/SO2.cs

	using System;
	using System.Runtime.CompilerServices;
	
	public class Example
	{
	   public static void Main()
	   {
	   }
	
	   [MethodImpl(MethodImplOptions.NoOptimization)]
	   public bool TestCondition(int i) 
	   {
	      return Test1(i) && Test2(i) && Test3(i);
	   }
	   public bool Test1(int i) { return true; }
	   public bool Test2(int i) { return true; }
	   public bool Test3(int i) { return true; }
	}

snippet appdomain_setup

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/source2.cs

	using System;
	using System.Reflection;
	
	class AppDomain3
	{
	    public static void Main()
	    {
	        AppDomain domain = AppDomain.CreateDomain("MyDomain", null);
	    
	        Console.WriteLine("Host domain: " + AppDomain.CurrentDomain.FriendlyName);
	        Console.WriteLine("New domain: " + domain.FriendlyName);
	        Console.WriteLine("Application base is: " + domain.BaseDirectory);
	        Console.WriteLine("Relative search path is: " + domain.RelativeSearchPath);
	        Console.WriteLine("Shadow copy files is set to: " + domain.ShadowCopyFiles);
	        AppDomain.Unload(domain);
	    }
	}

snippet conceptual_resources_portablemetro

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetro/booleannegationconverter.cs

	using System;
	using Windows.UI.Xaml.Data;
	
	namespace ConsumerCS.Common
	{
	    public sealed class BooleanNegationConverter : IValueConverter
	    {
	        public object Convert(object value, Type targetType, object parameter, string language)
	        {
	            return !(value is bool && (bool)value);
	        }
	
	        public object ConvertBack(object value, Type targetType, object parameter, string language)
	        {
	            return !(value is bool && (bool)value);
	        }
	    }
	}

snippet conceptual_resources_portablemetroloc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetroloc/booleannegationconverter.cs

	using System;
	using Windows.UI.Xaml.Data;
	
	namespace LocConsumerCS.Common
	{
	    public sealed class BooleanNegationConverter : IValueConverter
	    {
	        public object Convert(object value, Type targetType, object parameter, string language)
	        {
	            return !(value is bool && (bool)value);
	        }
	
	        public object ConvertBack(object value, Type targetType, object parameter, string language)
	        {
	            return !(value is bool && (bool)value);
	        }
	    }
	}

snippet regularexpressions_language_miscellaneous

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_miscellaneous/miscellaneous3.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\{\d+(,-*\d+)*(\:\w{1,4}?)*\}(?x) # Looks for a composite format item.";
	      string input = "{0,-3:F}";
	      Console.WriteLine("'{0}':", input);
	      if (Regex.IsMatch(input, pattern))
	         Console.WriteLine("   contains a composite format item.");
	      else
	         Console.WriteLine("   does not contain a composite format item.");
	   }
	}

snippet conceptual_regex_language_assertions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_assertions/word1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "area bare arena mare";
	      string pattern = @"\bare\w*\b";
	      Console.WriteLine("Words that begin with 'are':");
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("'{0}' found at position {1}",
	                           match.Value, match.Index);
	   }
	}

snippet string_length

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_length/length.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	        string str = "abcdefg";
	        Console.WriteLine("1) The length of '{0}' is {1}", str, str.Length);
	        Console.WriteLine("2) The length of '{0}' is {1}", "xyz", "xyz".Length);
	
	        int length = str.Length;
	        Console.WriteLine("3) The length of '{0}' is {1}", str, length);
	
	    }
	}

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/dates6.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      TimeZoneInfo pst = TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time");
	      DateTime date1 = DateTime.SpecifyKind(new DateTime(2013, 3, 9, 10, 30, 0),  
	                                            DateTimeKind.Local);
	      DateTime utc1 = date1.ToUniversalTime();
	      TimeSpan interval = new TimeSpan(48, 0, 0);
	      DateTime utc2 = utc1 + interval;
	      DateTime date2 = TimeZoneInfo.ConvertTimeFromUtc(utc2, pst);
	      Console.WriteLine("{0:g} + {1:N1} hours = {2:g}", 
	                        date1, interval.TotalHours, date2);
	   }
	}

snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/grouping2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"(?<duplicateWord>\w+)\s\k<duplicateWord>\W(?<nextWord>\w+)";
	      string input = "He said that that was the the correct answer.";
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.IgnoreCase))
	         Console.WriteLine("A duplicate '{0}' at position {1} is followed by '{2}'.", 
	                           match.Groups["duplicateWord"].Value, match.Groups["duplicateWord"].Index, 
	                           match.Groups["nextWord"].Value);
	
	   }
	}

snippet conceptual_resources_satellites

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_satellites/stringlibrary.cs

	
	using System;
	using System.Globalization;
	using System.Reflection;
	using System.Resources;
	using System.Threading;
	
	[assembly:NeutralResourcesLanguageAttribute("en")]
	
	public class StringLibrary
	{
	   public string GetGreeting()
	   {
	      ResourceManager rm = new ResourceManager("Strings", 
	                           Assembly.GetAssembly(typeof(StringLibrary)));
	      string greeting = rm.GetString("Greeting");
	      return greeting;
	   }
	}
snippet conceptual_disposable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_disposable/using1.cs

	using System;
	using System.IO;
	
	public class Example
	{
	   public static void Main()
	   {
	      Char[] buffer = new Char[50];
	      using (StreamReader s = new StreamReader("File1.txt")) {
	         int charsRead = 0;
	         while (s.Peek() != -1) {
	            charsRead = s.Read(buffer, 0, buffer.Length);
	         }
	      }
	
	   }
	}

snippet microsoft_visualstudio_data_core_ivsdataprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProvider/IVsDataProvider2.cs

	using System;
	using System.Diagnostics;
	using Microsoft.VisualStudio.Data.Core;
	
	public class DDEX_IVsDataProviderExample2
	{
	    private static readonly Guid MSSqlServerDataSource =
	        new Guid("067EA0D9-BA62-43f7-9106-34930C60C528");
	    private static readonly Guid MSAccessDBFileDataSource =
	        new Guid("466CE797-67A4-4495-B75C-A3FD282E7FC3");
	
	    public static void Example(
	        IVsDataProvider provider)
	    {
	        Guid source1 = provider.DeriveSource("Provider=SQLOLEDB.1");
	        Guid source2 = provider.DeriveSource(
	            "Provider=Microsoft.Jet.OLEDB.4.0");
	    }
	}
snippet regularexpressions_language_backreferences

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_backreferences/backreference4.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"(?<1>a)(?<1>\1b)*";
	      string input = "aababb";
	      foreach (Match match in Regex.Matches(input, pattern))
	      {
	         Console.WriteLine("Match: " + match.Value);
	         foreach (Group group in match.Groups)
	            Console.WriteLine("   Group: " + group.Value);
	      }
	   }
	}

snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/validate1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] values = { "111-22-3333", "111-2-3333"};
	      string pattern = @"^\d{3}-\d{2}-\d{4}$";
	      foreach (string value in values) {
	         if (Regex.IsMatch(value, pattern))
	            Console.WriteLine("{0} is a valid SSN.", value);
	         else   
	            Console.WriteLine("{0}: Invalid", value);
	      }
	   }
	}

snippet type_ispublic

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsPublic/type_ispublic.cs

	using System;
	
	public class TestClass
	{
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      TestClass testClassInstance = new TestClass();
	      Type   testType = testClassInstance.GetType();
	      bool isPublic = testType.IsPublic;
	      Console.WriteLine("Is {0} public? {1}", testType.FullName, isPublic);
	   }
	}

snippet type_isautolayout

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsAutoLayout/type_isautolayout.cs

	using System;
	using System.Runtime.InteropServices;
	
	[StructLayoutAttribute(LayoutKind.Auto)]
	public class Demo
	{
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        Type  myType=typeof(Demo);
	        Console.WriteLine("\nThe AutoLayout property for the Demo class is {0}.",
	            myType.IsAutoLayout); 
	    }
	}
snippet math_bigmul

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/math_bigmul/bigmul.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    int int1 = Int32.MaxValue;
	    int int2 = Int32.MaxValue;
	    long longResult;
	    longResult = Math.BigMul(int1, int2);
	    Console.WriteLine("Calculate the product of two Int32 values:");
	    Console.WriteLine("{0} * {1} = {2}", int1, int2, longResult);
	    }
	}
	/*
	This example produces the following results:
	Calculate the product of two Int32 values:
	2147483647 * 2147483647 = 4611686014132420609
	*/
snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/lastcapture1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b((\w+)\s?)+\.";
	      string input = "This is a sentence. This is another sentence.";
	      Match match = Regex.Match(input, pattern);
	      if (match.Success)
	      {
	         Console.WriteLine("Match: " + match.Value);
	         Console.WriteLine("Group 2: " + match.Groups[2].Value);
	      }   
	   }
	}

snippet asyncdelegateexamples

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/TestMethod.cs

	using System;
	using System.Threading; 
	
	namespace Examples.AdvancedProgramming.AsynchronousOperations
	{
	    public class AsyncDemo 
	    {
	        public string TestMethod(int callDuration, out int threadId) 
	        {
	            Console.WriteLine("Test method begins.");
	            Thread.Sleep(callDuration);
	            threadId = Thread.CurrentThread.ManagedThreadId;
	            return String.Format("My call time was {0}.", callDuration.ToString());
	        }
	    }
	    public delegate string AsyncMethodCaller(int callDuration, out int threadId);
	}

snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/nocapture1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = "aaa(bbb)*ccc";
	      string input = "aaaccc";
	      Match match = Regex.Match(input, pattern);
	      Console.WriteLine("Match value: {0}", match.Value);
	      if (match.Groups[1].Success)
	         Console.WriteLine("Group 1 value: {0}", match.Groups[1].Value);
	      else
	         Console.WriteLine("The first capturing group has no match.");
	   }
	}

snippet type_issealed

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsSealed/type_issealed.cs

	using System;
	
	 public class Example
	 {
	     sealed public class InnerClass
	     {
	     }
	
	     public static void Main()
	     {
	          InnerClass inner = new InnerClass();
	          Type innerType = inner.GetType();
	          bool isSealed = innerType.IsSealed;
	          Console.WriteLine("{0} is sealed: {1}.", innerType.FullName, isSealed);
	     }
	}
snippet type_assembly

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/type_assembly.cs

	using System;
	
	class MyAssemblyClass
	{
	    public static void Main()
	    {
	        Type objType = typeof(Array);
	
	        Console.WriteLine($"Assembly full name:\n   {objType.Assembly.FullName}.");
	
	        Console.WriteLine($"Assembly qualified name:\n   {objType.AssemblyQualifiedName}.");
	    }
	}

snippet conceptual_regularexpressions_backtracking

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_backtracking/backtracking2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "Essential services are provided by regular expressions.";
	      string pattern = ".*(es)"; 
	      Match m = Regex.Match(input, pattern, RegexOptions.IgnoreCase);
	      if (m.Success) {
	         Console.WriteLine("'{0}' found at position {1}", 
	                           m.Value, m.Index);
	         Console.WriteLine("'es' found at position {0}", 
	                           m.Groups[1].Index);      
	      } 
	   }
	}

snippet sys_glob_ci_getcfuic

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_ci_getCFUIC/cfuic.cs

	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    CultureInfo ci = new CultureInfo("ar-DZ");
	    Console.WriteLine("Culture name: . . . . . . . . . {0}", ci.Name);
	    Console.WriteLine("Console fallback UI culture:. . {0}",
	                       ci.GetConsoleFallbackUICulture().Name);
	    }
	}
	/*
	This code example produces the following results:
	
	Culture name: . . . . . . . . . ar-DZ
	Console fallback UI culture:. . fr-FR
	
	*/
snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/groupcollection1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(\w+)\s(\d{1,2}),\s(\d{4})\b";
	      string input = "Born: July 28, 1989";
	      Match match = Regex.Match(input, pattern);
	      if (match.Success)
	         for (int ctr = 0; ctr <  match.Groups.Count; ctr++)
	            Console.WriteLine("Group {0}: {1}", ctr, match.Groups[ctr].Value);
	    }
	}

snippet testgetelementtype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TestGetElementType/testgetelementtype.cs

	using System;
	class TestGetElementType 
	{
	    public static void Main() 
	    {
	        int[] array = {1,2,3};
	        Type t = array.GetType();
	        Type t2 = t.GetElementType();
	        Console.WriteLine("The element type of {0} is {1}.",array, t2.ToString());
	        TestGetElementType newMe = new TestGetElementType();
	        t = newMe.GetType();
	        t2 = t.GetElementType();
	        Console.WriteLine("The element type of {0} is {1}.", newMe, t2==null? "null" : t2.ToString());
	    }
	}
	
	/* This code produces the following output:
	
	The element type of System.Int32[] is System.Int32.
	The element type of TestGetElementType is null.
	 */
snippet type_isvaluetype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsValueType/type_isvaluetype.cs

	using System;
	
	enum NumEnum { One, Two }
	
	public class Example
	{
	
	    public static void Main(string []args)
	    {
	        bool flag = false;
	        NumEnum testEnum = NumEnum.One;
	        Type t = testEnum.GetType();
	        flag = t.IsValueType;
	        Console.WriteLine("{0} is a value type: {1}", t.FullName, flag);
	    }
	}
snippet regularexpressions_language_backreferences

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_backreferences/backreference1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"(\w)\1";
	      string input = "trellis llama webbing dresser swagger";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("Found '{0}' at position {1}.", 
	                           match.Value, match.Index);
	   }
	}

snippet regularexpressions_language_backreferences

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_backreferences/backreference3.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"(?<2>\w)\k<2>";
	      string input = "trellis llama webbing dresser swagger";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("Found '{0}' at position {1}.", 
	                           match.Value, match.Index);
	   }
	}

snippet regularexpressions_language_backreferences

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_backreferences/backreference2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"(?<char>\w)\k<char>";
	      string input = "trellis llama webbing dresser swagger";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("Found '{0}' at position {1}.", 
	                           match.Value, match.Index);
	   }
	}

snippet string_join2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_join2/join2.cs

	using System;
	
	class Sample {
	    public static void Main() {
	        String[] val = {"apple", "orange", "grape", "pear"};
	        String sep   = ", ";
	        String result;
	
	        Console.WriteLine("sep = '{0}'", sep);
	        Console.WriteLine("val[] = {{'{0}' '{1}' '{2}' '{3}'}}", val[0], val[1], val[2], val[3]);
	        result = String.Join(sep, val, 1, 2);
	        Console.WriteLine("String.Join(sep, val, 1, 2) = '{0}'", result);
	
	    }
	}

snippet datetime_dayofweek

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_DayOfWeek/dow.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    DateTime dt = new DateTime(2003, 5, 1);
	    Console.WriteLine("Is Thursday the day of the week for {0:d}?: {1}", 
	                       dt, dt.DayOfWeek == DayOfWeek.Thursday);
	    Console.WriteLine("The day of the week for {0:d} is {1}.", dt, dt.DayOfWeek);
	    }
	}
	/*
	This example produces the following results:
	
	Is Thursday the day of the week for 5/1/2003?: True
	The day of the week for 5/1/2003 is Thursday.
	*/
snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/whitespace2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "This is the first sentence. Is it the beginning " + 
	                     "of a literary masterpiece? I think not. Instead, " + 
	                     "it is a nonsensical paragraph.";
	      string pattern = @"(?x)\b \(? ( (?>\w+) ,?\s? )+  [\.!?] \)? # Matches an entire sentence.";
	
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(match.Value);
	   }
	}

snippet stringconcat4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringconcat4/stringconcat4.cs

	using System;
	
	public class ConcatTest {
	    public static void Main() {
	
	        string fName = "Simon";
	        string mName = "Jake";
	        string lName = "Harrows";
	
	        mName = " " + mName.Trim();
	        lName = " " + lName.Trim();
	
	        Console.WriteLine("Welcome to this page, '{0}'!", string.Concat( string.Concat(fName, mName), lName ) );
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdatasupport

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSupport/IVsDataSupport2.cs

	using System;
	using System.IO;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	
	internal class MyViewSupport
	{
	    public Stream OpenSupportStream()
	    {
	        return GetType().Assembly.GetManifestResourceStream(
	            "MyViewSupport.xml");
	    }
	
	    public void Close()
	    {
	    }
	
	    public void Initialize()
	    {
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdataprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProvider/IVsDataProvider.cs

	using System;
	using System.Diagnostics;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	
	public class DDEX_IVsDataProviderExample1
	{
	    public static void UseDataProvider(
	        IServiceProvider serviceProvider,
	        Guid providerGuid)
	    {
	        IVsDataProviderManager providerManager =
	            serviceProvider.GetService(typeof(IVsDataProviderManager))
	                as IVsDataProviderManager;
	        IVsDataProvider provider = providerManager.Providers[providerGuid];
	        Trace.WriteLine(provider.DisplayName);
	        Trace.WriteLine(provider.Description);
	        IVsDataConnectionProperties connectionProperties =
	            provider.CreateObject<IVsDataConnectionProperties>();
	        connectionProperties.Parse("Test connection string");
	    }
	}
snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/generics5.cs

	using System;
	
	[assembly:CLSCompliant(true)]
	
	[CLSCompliant(false)] public class BaseClass
	{}
	
	
	public class BaseCollection<T> where T : BaseClass
	{}
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/interface2.cs

	using System;
	
	[assembly:CLSCompliant(true)]
	
	public interface INumber
	{
	   int Length();
	   [CLSCompliant(false)] ulong GetUnsigned();
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}

snippet dir_getdirs2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dir_GetDirs2/dir_getdirs3.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string[] dirs = Directory.GetDirectories(@"c:\", "p*", SearchOption.TopDirectoryOnly);
	            Console.WriteLine("The number of directories starting with p is {0}.", dirs.Length);
	            foreach (string dir in dirs) 
	            {
	                Console.WriteLine(dir);
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdatasourcespecializer

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSourceSpecializer/IVsDataSourceSpecializer5.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Framework;
	
	public class MySourceSpecializer5 : DataSourceSpecializer
	{
	    private static readonly Guid s_dataSource1 =
	        new Guid("EB5246D3-277C-4277-910F-111CB9EAD253");
	
	    public override Type GetType(Guid source, string typeName)
	    {
	        if (source == s_dataSource1)
	        {
	            typeName = "Company.DdexProvider.Source1." + typeName;
	        }
	        else
	        {
	            typeName = "Company.DdexProvider." + typeName;
	        }
	        return GetType().Assembly.GetType(typeName);
	    }
	}
snippet conceptual_types_members_properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_types_members_properties/example.cs

	using System;
	
	public class Person
	{
	   private int m_Age;
	   
	   public int Age
	   { 
	      get { return m_Age; }
	      set {
	         if (value < 0 || value > 125)
	         {
	            throw new ArgumentOutOfRangeException("The value of the Age property must be between 0 and 125.");
	         }
	         else
	         {
	            m_Age = value;
	         }         
	      }
	   }
	}

snippet formatting_dateandtime_standard

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Standard/stdandparsing1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      Console.WriteLine("'d' standard format string:");
	      foreach (var customString in DateTimeFormatInfo.CurrentInfo.GetAllDateTimePatterns('d'))
	          Console.WriteLine("   {0}", customString);
	   }
	}

snippet strongnamekeypairx

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StrongNameKeyPairX/source2.cs

	using System;
	using System.IO;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	
	class SNKToAssembly
	{
	    public static void Main()
	    {
	        FileStream fs = new FileStream("SomeKeyPair.snk", FileMode.Open);
	        StrongNameKeyPair kp = new StrongNameKeyPair(fs);
	        fs.Close();
	        AssemblyName an = new AssemblyName();
	        an.KeyPair = kp;
	        AppDomain appDomain = Thread.GetDomain();
	        AssemblyBuilder ab = appDomain.DefineDynamicAssembly(an, AssemblyBuilderAccess.RunAndSave);
	    }
	}

snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/classsubtraction1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] inputs = { "123", "13579753", "3557798", "335599901" };
	      string pattern = @"^[0-9-[2468]]+$";
	      
	      foreach (string input in inputs)
	      {
	         Match match = Regex.Match(input, pattern);
	         if (match.Success) 
	            Console.WriteLine(match.Value);
	      }      
	   }
	}

snippet codeprimitiveexpressionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodePrimitiveExpressionExample/codeprimitiveexpressionexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodePrimitiveExpressionExample
	    {
	        public CodePrimitiveExpressionExample()
	        {
	            CodePrimitiveExpression stringPrimitive = new CodePrimitiveExpression("Test String");
	            CodePrimitiveExpression intPrimitive = new CodePrimitiveExpression(10);
	            CodePrimitiveExpression floatPrimitive = new CodePrimitiveExpression(1.03189);
	            CodePrimitiveExpression nullPrimitive = new CodePrimitiveExpression(null);            
	        }
	    }
	}
snippet type_guid

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_Guid/type_guid.cs

	using System;
	
	class MyGetTypeFromCLSID
	{
	    public class MyClass1
	    {
	        public void MyMethod1()
	        {
	        }
	    }
	    public static void Main()
	    {
	        Type myType = typeof(MyClass1);
	        Guid myGuid =(Guid) myType.GUID;
	        Console.WriteLine("The name of the class is "+myType.ToString());
	        Console.WriteLine("The ClassId of MyClass is "+myType.GUID);				
	    }
	}
	

snippet appdomain_setup

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/setup.cs

	using System;
	using System.Security.Policy;
	
	class Test {
	   
	   public static void Main() {
	      AppDomainSetup setup = new AppDomainSetup();
	      setup.ApplicationBase = "(some directory)";
	      setup.ConfigurationFile = "(some file)";
	
	      Evidence baseEvidence = AppDomain.CurrentDomain.Evidence;
	      Evidence evidence = new Evidence(baseEvidence);
	      evidence.AddAssembly("(some assembly)");
	      evidence.AddHost("(some host)");
	
	      AppDomain newDomain = AppDomain.CreateDomain("newDomain", evidence, setup);
	   }
	}

snippet formatting_howto_weekdayname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_WeekdayName/Howto1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      CultureInfo originalCulture = Thread.CurrentThread.CurrentCulture;
	      Thread.CurrentThread.CurrentCulture = new CultureInfo("fr-FR");
	
	      DateTime dateValue = new DateTime(2008, 6, 11);
	      Console.WriteLine(dateValue.DayOfWeek.ToString());   
	      Thread.CurrentThread.CurrentCulture = originalCulture;
	   }
	}

snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/culturespecific4.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {                                                                                                    
	      Double value = 1043.62957;
	      string[] cultureNames = { "en-US", "en-GB", "ru", "fr" };
	      
	      foreach (var name in cultureNames) {
	         NumberFormatInfo nfi = CultureInfo.CreateSpecificCulture(name).NumberFormat;
	         Console.WriteLine("{0,-6} {1}", name + ":", value.ToString("N3", nfi));
	      }   
	   }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/enum3.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public enum Size : uint { 
	   Unspecified = 0, 
	   XSmall = 1, 
	   Small = 2, 
	   Medium = 3, 
	   Large = 4, 
	   XLarge = 5 
	};
	
	public class Clothing
	{
	   public string Name; 
	   public string Type;
	   public string Size;
	}
	  
snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/match1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "This is a a farm that that raises dairy cattle."; 
	      string pattern = @"\b(\w+)\W+(\1)\b";
	      Match match = Regex.Match(input, pattern);
	      while (match.Success)
	      {
	         Console.WriteLine("Duplicate '{0}' found at position {1}.",  
	                           match.Groups[1].Value, match.Groups[2].Index);
	         match = match.NextMatch();
	      }                       
	   }
	}

snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/any2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = "^.+";
	      string input = "This is one line and" + Environment.NewLine + "this is the second.";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(Regex.Escape(match.Value));
	
	      Console.WriteLine();
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.Singleline))
	         Console.WriteLine(Regex.Escape(match.Value));
	   }
	}

snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/culturespecific2.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {                                                                                                    
	      DateTime dat1 = new DateTime(2012, 5, 28, 11, 30, 0);
	      string[] cultureNames = { "en-US", "en-GB", "ru", "fr" };
	      
	      foreach (var name in cultureNames) {
	         DateTimeFormatInfo dtfi = CultureInfo.CreateSpecificCulture(name).DateTimeFormat;
	         Console.WriteLine("{0}: {1}", name, dat1.ToString(dtfi));
	      }   
	   }
	}

snippet environment_tickcount

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Environment_TickCount/tickcount.cs

	
	
	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    int result = Environment.TickCount & Int32.MaxValue;
	    Console.WriteLine("TickCount: {0}", result);
	    }
	}
	/*
	This example produces the following results:
	
	TickCount: 101931139
	*/
snippet strmrdrread

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StrmRdrRead/strmrdrread.cs

	using System;
	using System.IO;
	
	class StrmRdrRead
	{
	public static void Main()
	    {
	    FileInfo MyFile=new FileInfo(@"c:\csc.txt");
	    StreamReader sr=MyFile.OpenText();
	    int FirstChar=sr.Read();
	    Console.WriteLine("The ASCII number of the first character read is {0:D} in decimal and {1:X} in hexadecimal.",
	        FirstChar, FirstChar);
	    sr.Close();
	    }
	}
	    

snippet stringconcat3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringconcat3/stringconcat3.cs

	using System;
	
	public class Example
	{
	    public static void Main()
	    {
	        string [] s = { "hello ", "and ", "welcome ", "to ",
	                        "this ", "demo! " };
	
	        Console.WriteLine(string.Concat(s));
	
	        Array.Sort(s);
	        Console.WriteLine(string.Concat(s));
	    }
	}
	   
snippet coderemoveeventexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeRemoveEventExample/coderemoveeventexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeRemoveEventExample
	    {
	        public CodeRemoveEventExample()
	        {
	            CodeDelegateCreateExpression mouseEnterDelegate = new CodeDelegateCreateExpression( new CodeTypeReference("System.EventHandler"), new CodeThisReferenceExpression(), "OnMouseEnter" );
	            CodeRemoveEventStatement removeEvent1 = new CodeRemoveEventStatement( new CodeThisReferenceExpression(), "TestEvent", mouseEnterDelegate );
	            
	
	        }
	    }
	}
snippet testisenum

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TestIsEnum/testisenum.cs

	using System;
	public enum Color 
	{ Red, Blue, Green }
	
	class TestIsEnum 
	{
	    public static void Main() 
	    {
	       Type colorType = typeof(Color);
	       Type enumType = typeof(Enum);
	       Console.WriteLine("Is Color an enum? {0}.", colorType.IsEnum);
	       Console.WriteLine("Is Color a value type? {0}.", colorType.IsValueType);
	       Console.WriteLine("Is Enum an enum Type? {0}.", enumType.IsEnum);
	       Console.WriteLine("Is Enum a value type? {0}.", enumType.IsValueType);
	   }
	}

snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/whitespace1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "This is the first sentence. Is it the beginning " + 
	                     "of a literary masterpiece? I think not. Instead, " + 
	                     "it is a nonsensical paragraph.";
	      string pattern = @"\b\(?((?>\w+),?\s?)+[\.!?]\)?";
	
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.IgnorePatternWhitespace))
	         Console.WriteLine(match.Value);
	   }
	}

snippet capikey

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/capikey/capikey.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	public class StoreKey
	{
		public static void Main()
		{
			CspParameters cp = new CspParameters();
			cp.KeyContainerName = "MyKeyContainerName";
	
			RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(cp);
	
			Console.WriteLine("Key is : \n" + rsa.ToXmlString(true));
		}
	}

snippet enumcompareto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/enumcompareto/EnumCompareTo.cs

	using System;
	
	public class CompareToTest {
	    enum VehicleDoors { Motorbike = 0, Sportscar = 2, Sedan = 4, Hatchback = 5 };
	
	    public static void Main() {
	        VehicleDoors myVeh = VehicleDoors.Sportscar;
	        VehicleDoors yourVeh = VehicleDoors.Motorbike;
	        VehicleDoors otherVeh = VehicleDoors.Sedan;
	
	        Console.WriteLine("Does a {0} have more doors than a {1}?", myVeh, yourVeh);
	        Console.WriteLine( "{0}{1}", myVeh.CompareTo(yourVeh) > 0 ? "Yes" : "No", Environment.NewLine );
	
	        Console.WriteLine("Does a {0} have more doors than a {1}?", myVeh, otherVeh);
	        Console.WriteLine( "{0}", myVeh.CompareTo(otherVeh) > 0 ? "Yes" : "No" );
	    }
	}
snippet type_getmethod1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod1/type_getmethod1.cs

	
	using System;
	using System.Reflection;
	
	class Program
	{
	
	    public void MethodA() { }
	
	
	    static void Main(string[] args)
	    {
	
	        MethodInfo mInfo = typeof(Program).GetMethod("MethodA");
	        Console.WriteLine("Found method: {0}", mInfo);
	
	    }
	}
	
	

snippet microsoft_visualstudio_data_core_dataproviderexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Visualstudio_Data_Core_DataProviderException/DataProviderException.cs

	using System;
	using System.Windows.Forms;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	
	public class DdexExample
	{
	    public static IVsDataConnectionProperties CreateConnectionProperties(
	        IVsDataProvider provider)
	    {
	        IVsDataConnectionProperties connProperties = null;
	        try
	        {
	            connProperties = provider.CreateObject<IVsDataConnectionProperties>();
	        }
	        catch (DataProviderException e)
	        {
	            MessageBox.Show(e.Message);
	        }
	        return connProperties;
	    }
	}

snippet formatting_numeric_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/formatting_numeric_custom/literal1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      double n = 9.3;
	      Console.WriteLine($@"{n:##.0\%}");
	      Console.WriteLine($@"{n:\'##\'}");
	      Console.WriteLine($@"{n:\\##\\}");
	      Console.WriteLine();
	      Console.WriteLine($"{n:##.0'%'}");
	      Console.WriteLine($@"{n:'\'##'\'}");
	   }
	}

snippet unmanaged_debugging_mrv

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/unmanaged_debugging_mrv/mrv1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      String s = "0001";
	      ConvertNumericString(s);
	   }
	
	   private static int ConvertNumericString(string s)
	   {
	      int number;
	      if (s.Trim().Length == 8)
	         Int32.TryParse(s, System.Globalization.NumberStyles.HexNumber,
	                        null, out number);
	      else
	         Int32.TryParse(s, out number);
	
	      return number;
	   }   
	}

snippet x509certificate_getcerthash_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetCertHash_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        byte[] results = cert.GetCertHash();
	      
	    }
	
	}
snippet microsoft_visualstudio_data_core_ivsdataprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProvider/IVsDataProvider4.cs

	using System;
	using System.Data;
	using System.Data.Common;
	using Microsoft.VisualStudio.Data.Core;
	
	public class DDEX_IVsDataProviderExample4
	{
	    public static DbConnection CreateAdoDotNetConnection(
	        IVsDataProvider provider)
	    {
	        string invariantName = provider.GetProperty("InvariantName") as string;
	        if (invariantName != null)
	        {
	            DbProviderFactory factory = DbProviderFactories.GetFactory(
	                invariantName);
	            if (factory != null)
	            {
	                return factory.CreateConnection();
	            }
	        }
	        return null;
	    }
	}
snippet conceptual_isolatedstorage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_isolatedstorage/source.cs

	using System;
	using System.IO;
	using System.IO.IsolatedStorage;
	
	public class CreatingFilesDirectories
	{
	    public static void Main()
	    {
	        using (IsolatedStorageFile isoStore = IsolatedStorageFile.GetStore(IsolatedStorageScope.User | IsolatedStorageScope.Domain | IsolatedStorageScope.Assembly, null, null))
	        {
	            isoStore.CreateDirectory("TopLevelDirectory");
	            isoStore.CreateDirectory("TopLevelDirectory/SecondLevel");
	            isoStore.CreateDirectory("AnotherTopLevelDirectory/InsideDirectory");
	            Console.WriteLine("Created directories.");
	
	            isoStore.CreateFile("InTheRoot.txt");
	            Console.WriteLine("Created a new file in the root.");
	
	            isoStore.CreateFile("AnotherTopLevelDirectory/InsideDirectory/HereIAm.txt");
	            Console.WriteLine("Created a new file in the InsideDirectory.");
	        }
	    }
	}
snippet codenamespaceexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeNamespaceExample/codenamespaceexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeMemberEventExample
	    {
	        public CodeMemberEventExample()
	        {
	            CodeCompileUnit compileUnit = new CodeCompileUnit();
	            CodeNamespace namespace1 = new CodeNamespace("TestNamespace");
	            compileUnit.Namespaces.Add( namespace1 );
	
	
	
	        }
	    }
	}
snippet string_breakingchanges

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_breakingchanges/example1.cs

	using System;
	
	enum StringComparisonResult
	{
	    precedes = -1,
	    equals = 0,
	    follows = 1,
	};
	
	public class Example
	{
	   public static void Main()
	   {
	      string str1 = new string( new char[] {'\u0219', '\u021B', 'a' });
	      string str2 = "a";
	
	      Console.WriteLine("{0} {1} {2} in the sort order.", 
	                        str1, 
	                        (StringComparisonResult) String.Compare(str1, str2, StringComparison.CurrentCulture),  
	                        str2);       
	   }
	}

snippet assemblyname_version

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyName_Version/Example.cs

	using System;
	using System.Reflection;
	
	[assembly:AssemblyVersion("1.1.0.0")]
	
	class Example
	{
	    static void Main()
	    {
	        Console.WriteLine("The version of the currently executing assembly is: {0}",
	            typeof(Example).Assembly.GetName().Version);
	
	        Console.WriteLine("The version of mscorlib.dll is: {0}",
	            typeof(String).Assembly.GetName().Version);
	    }
	}
	
	/* This example produces output similar to the following:
	
	The version of the currently executing assembly is: 1.1.0.0
	The version of mscorlib.dll is: 2.0.0.0
	 */

snippet cryptography_keynumber

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_KeyNumber/sample.cs

	using System;
	using System.IO;
	using System.Text;
	using System.Security.Cryptography;
	
	namespace RC2CryptoServiceProvider_Examples
	{
	    class MyMainClass
	    {
	        public static void Main()
	        {
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyNumber = (int) KeyNumber.Exchange;
	
	            RSACryptoServiceProvider RSACSP = new RSACryptoServiceProvider(cspParams);
	        }
	    }
	} 
snippet conceptual_types_viewinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_types_viewinfo/source2.cs

	using System;
	using System.IO;
	using System.Reflection;
	
	class Mymemberinfo
	{
	    public static void Main()
	    {
	        Console.WriteLine ("\nReflection.MemberInfo");
	        Type MyType = Type.GetType("System.IO.File");
	        MemberInfo[] Mymemberinfoarray = MyType.GetMembers();
	        Console.WriteLine("\nThere are {0} members in {1}.",
	            Mymemberinfoarray.Length, MyType.FullName);
	        Console.WriteLine("{0}.", MyType.FullName);
	        if (MyType.IsPublic)
	        {
	            Console.WriteLine("{0} is public.", MyType.FullName);
	        }
	    }
	}

snippet conceptual_calendars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_calendars/noncurrentcalendar1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      JulianCalendar julian = new JulianCalendar();
	      DateTime date1 = new DateTime(1905, 1, 9, julian);
	      
	      Console.WriteLine("Date ({0}): {1:d}", 
	                        CultureInfo.CurrentCulture.Calendar,
	                        date1);
	      Console.WriteLine("Date in Julian calendar: {0:d2}/{1:d2}/{2:d4}",
	                        julian.GetMonth(date1),
	                        julian.GetDayOfMonth(date1),
	                        julian.GetYear(date1));
	   }
	}

snippet dir_getfiles2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dir_GetFiles2/dir_getfiles2.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string[] dirs = Directory.GetFiles(@"c:\", "c*");
	            Console.WriteLine("The number of files starting with c is {0}.", dirs.Length);
	            foreach (string dir in dirs) 
	            {
	                Console.WriteLine(dir);
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}
snippet dir_getdirs2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dir_GetDirs2/dir_getdirs2.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string[] dirs = Directory.GetDirectories(@"c:\", "p*");
	            Console.WriteLine("The number of directories starting with p is {0}.", dirs.Length);
	            foreach (string dir in dirs) 
	            {
	                Console.WriteLine(dir);
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}
snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/split1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "1. Eggs 2. Bread 3. Milk 4. Coffee 5. Tea";
	      string pattern = @"\b\d{1,2}\.\s";
	      foreach (string item in Regex.Split(input, pattern))
	      {
	         if (! String.IsNullOrEmpty(item))
	            Console.WriteLine(item);
	      }      
	   }
	}

snippet improvedinteropsnippets

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ImprovedInteropSnippets/codefile4.cs

	
	using System;
	using System.Runtime.InteropServices;
	
	namespace B
	{
		class ClassB	
		{
			public static bool IsHiddenInterface( Type InterfaceType )
			{
				object[] InterfaceAttributes = InterfaceType.GetCustomAttributes( typeof( TypeLibTypeAttribute ), false );
				if( InterfaceAttributes.Length > 0 )
				{
					TypeLibTypeAttribute tlt = ( TypeLibTypeAttribute ) InterfaceAttributes[0];
					TypeLibTypeFlags  flags = tlt.Value;
					return ( flags & TypeLibTypeFlags.FHidden ) != 0; 
				}
				return false;
			}
		}
	}
snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/getunicodecategory1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      char[] chars = { 'a', 'X', '8', ',', ' ', '\u0009', '!' };
	      
	      foreach (char ch in chars)
	         Console.WriteLine("'{0}': {1}", Regex.Escape(ch.ToString()), 
	                           Char.GetUnicodeCategory(ch));
	   }
	}

snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/match3.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = "abc";
	      string input = "abc123abc456abc789";
	      Match match = Regex.Match(input, pattern);
	      while (match.Success)
	      {
	         Console.WriteLine("{0} found at position {1}.", 
	                           match.Value, match.Index);
	         match = match.NextMatch();                  
	      }                     
	   }
	}

snippet conceptual_disposable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_disposable/using4.cs

	using System;
	using System.IO;
	
	public class Example
	{
	   public static void Main()
	   {
	      Char[] buffer1 = new Char[50], buffer2 = new Char[50];
	      
	      using (StreamReader version1 = new StreamReader("file1.txt"),
	                          version2 = new StreamReader("file2.txt")) {
	         int charsRead1, charsRead2 = 0;
	         while (version1.Peek() != -1 && version2.Peek() != -1) {
	            charsRead1 = version1.Read(buffer1, 0, buffer1.Length);
	            charsRead2 = version2.Read(buffer2, 0, buffer2.Length);
	         }
	      }
	   }
	}

snippet directoryinforoot

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/directoryinforoot/directoryinforoot.cs

	using System;
	using System.IO;
	
	public class MoveToTest 
	{
	    public static void Main() 
	    {
	
	        DirectoryInfo di = new DirectoryInfo("TempDir");
	
	        if (di.Exists == false)
	            di.Create();
	
	        DirectoryInfo dis = di.CreateSubdirectory("SubDir");
	        Console.WriteLine("The root path of '{0}' is '{1}'", dis.Name, dis.Root);
	
	        di.Delete(true);
	    }
	}
snippet fieldinfo_ispinvokeimpl

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/fieldinfo_ispinvokeimpl.cs

	using System;
	using System.Reflection;
	
	public class Fieldinfo_IsPinvoke
	{
	    public string myField = "A public field";
	   
	    public static void Main()
	    {
	        Fieldinfo_IsPinvoke myObject = new Fieldinfo_IsPinvoke();
	      
	        Type myType1 = typeof(Fieldinfo_IsPinvoke);
	        FieldInfo myFieldInfo = myType1.GetField("myField",
	            BindingFlags.Public|BindingFlags.Instance);
	
	        Console.Write("\n Name of class: {0}", myType1.FullName);
	        Console.Write("\n Value of field: {0}", myFieldInfo.GetValue(myObject));
	        Console.Write("\n IsPinvokeImpl: {0}", 
	            myFieldInfo.IsPinvokeImpl );
	    }
	}
snippet environment_expandenvironmentvariables

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/environment_ExpandEnvironmentVariables/expandenvironmentvariables.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    String str;
	    String nl = Environment.NewLine;
	
	    Console.WriteLine();
	    String query = "My system drive is %SystemDrive% and my system root is %SystemRoot%";
	    str = Environment.ExpandEnvironmentVariables(query);
	    Console.WriteLine("ExpandEnvironmentVariables: {0}  {1}", nl, str);
	    }
	}
	/*
	This example produces the following results:
	
	ExpandEnvironmentVariables:
	  My system drive is C: and my system root is C:\WINNT
	*/
snippet eventarg

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventArg/eventarg.cs

	using System;
	using System.Reflection;
	
	public delegate void MyDelegate(int i);
	public class MainClass 
	{
	    public event MyDelegate ev;
	
	    public static void Main() 
	    {
	        Type delegateType = typeof(MainClass).GetEvent("ev").EventHandlerType;
	        MethodInfo invoke = delegateType.GetMethod("Invoke");
	        ParameterInfo[] pars = invoke.GetParameters();
	        foreach (ParameterInfo p in pars) 
	        {
	            Console.WriteLine(p.ParameterType);
	        }
	    }
	}
snippet conceptual_regex_language_substitutions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_substitutions/entirematch1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"^(\w+\s?)+$";
	      string[] titles = { "A Tale of Two Cities", 
	                          "The Hound of the Baskervilles", 
	                          "The Protestant Ethic and the Spirit of Capitalism", 
	                          "The Origin of Species" };
	      string replacement = "\"$&\"";
	      foreach (string title in titles)
	         Console.WriteLine(Regex.Replace(title, pattern, replacement));
	   }
	}

snippet string_contains

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_contains/cont.cs

	using System;
	
	class Example
	{
	    public static void Main() 
	    {
	        string s1 = "The quick brown fox jumps over the lazy dog";
	        string s2 = "fox";
	        bool b = s1.Contains(s2);
	        Console.WriteLine("'{0}' is in the string '{1}': {2}",
	                        s2, s1, b);
	        if (b) {
	            int index = s1.IndexOf(s2);
	            if (index >= 0)
	                Console.WriteLine("'{0} begins at character position {1}",
	                              s2, index + 1);                              
	        }
	    }
	}

snippet fileinfoname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/fileinfoname/fileinfoname.cs

	using System;
	using System.IO;
	
	public class NameTest 
	{
	    public static void Main() 
	    {
	        DirectoryInfo di = new DirectoryInfo(Environment.CurrentDirectory);
	        FileInfo[] fi = di.GetFiles();
	        Console.WriteLine("The following files exist in the current directory:");
	        foreach (FileInfo fiTemp in fi)
	            Console.WriteLine(fiTemp.Name);
	    }
	}
snippet conceptual_localizability

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_localizability/ismetric1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] cultureNames = { "en-US", "en-GB", "fr-FR", 
	                                "ne-NP", "es-BO", "ig-NG" };
	      foreach (var cultureName in cultureNames) {
	         RegionInfo region = new RegionInfo(cultureName);
	         Console.WriteLine("{0} {1} the metric system.", region.EnglishName,
	                           region.IsMetric ? "uses" : "does not use");
	      }                                       
	   }
	}

snippet stringremove

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringremove/stringremove.cs

	using System;
	
	public class RemoveTest {
	    public static void Main() {
	
	        string name = "Michelle Violet Banks";
	 
	        Console.WriteLine("The entire name is '{0}'", name);
	
	        int foundS1 = name.IndexOf(" ");
	        int foundS2 = name.IndexOf(" ", foundS1 + 1);
	
	        if (foundS1 != foundS2 && foundS1 >= 0) {
	
	            name = name.Remove(foundS1 + 1, foundS2 - foundS1);
	
	            Console.WriteLine("After removing the middle name, we are left with '{0}'", name);
	        }
	    }
	}
snippet type_getmethod2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod2/type_getmethod2.cs

	
	using System;
	using System.Reflection;
	
	class Program
	{
	
	    public void MethodA() { }
	
	
	    static void Main(string[] args)
	    {
	
	        MethodInfo mInfo = typeof(Program).GetMethod("MethodA",
	            BindingFlags.Public | BindingFlags.Instance);
	        Console.WriteLine("Found method: {0}", mInfo);
	
	    }
	}
	
	

snippet runtime_interopservices_marshal_getitypeinfofortype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_GetITypeInfoForType/example.cs

	using System;
	using System.Runtime.InteropServices;
	
	class Program
	{
	
	    static void Run()
	    {
	        Console.WriteLine("Calling Marshal.GetITypeInfoForType...");
	
	        IntPtr pointer = Marshal.GetITypeInfoForType(typeof(object));
	
	        Console.WriteLine("Calling Marshal.Release...");
	
	        Marshal.Release(pointer);
	    }
	
	    static void Main(string[] args)
	    {
	        Run();
	    }
	}
snippet conceptual_asyncinterop

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_AsyncInterop/EAP1.cs

	using System;
	using System.Threading.Tasks;
	using System.Net;
	
	public class Example
	{
	    public static Task<string> DownloadStringAsync(Uri url)
	    {
	        var tcs = new TaskCompletionSource<string>();
	        var wc = new WebClient();
	        wc.DownloadStringCompleted += (s,e) =>
	            {
	                if (e.Error != null) 
	                   tcs.TrySetException(e.Error);
	                else if (e.Cancelled) 
	                   tcs.TrySetCanceled();
	                else 
	                   tcs.TrySetResult(e.Result);
	            };
	        wc.DownloadStringAsync(url);
	        return tcs.Task;
	   }
	}

snippet io_filestream_ctor2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_FileStream_ctor2/example2.cs

	using System;
	using System.Text;
	using System.Threading.Tasks;
	using System.IO;
	
	namespace ConsoleApplication
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            WriteToFile();
	        }
	
	        static async void WriteToFile()
	        {
	            byte[] bytesToWrite = Encoding.Unicode.GetBytes("example text to write");
	            using (FileStream createdFile = File.Create("c:/Temp/testfile.txt", 4096, FileOptions.Asynchronous))
	            {
	                await createdFile.WriteAsync(bytesToWrite, 0, bytesToWrite.Length);
	            }
	        }
	    }
	}
snippet string_remove

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_remove/r.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string s = "abc---def"; 
	    Console.WriteLine("Index: 012345678");
	    Console.WriteLine("1)     {0}", s);
	    Console.WriteLine("2)     {0}", s.Remove(3)); 
	    Console.WriteLine("3)     {0}", s.Remove(3, 3));
	    }
	}
	/*
	This example produces the following results:
	
	Index: 012345678
	1)     abc---def
	2)     abc
	3)     abcdef
	
	*/
snippet valuetype_equals_example

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ValueType_Equals_Example/source.cs

	using System;
	
	namespace Snippets
	{
		public struct Complex 
		{
			public double m_Re;
			public double m_Im;
	
			public override bool Equals( object ob ){
				if( ob is Complex ) {
					Complex c = (Complex) ob;
					return m_Re==c.m_Re && m_Im==c.m_Im;
				}
				else {
					return false;
				}
			}
	
			public override int GetHashCode(){
				return m_Re.GetHashCode() ^ m_Im.GetHashCode();
			}
		}
	} 
snippet microsoft_visualstudio_data_core_ivsdatasourcespecializer

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSourceSpecializer/IVsDataSourceSpecializer3.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Framework;
	
	public class MySourceSpecializer3 : DataSourceSpecializer
	{
	    private static readonly Guid s_sqlServerDataSource =
	        new Guid("067EA0D9-BA62-43f7-9106-34930C60C528");
	    private static readonly Guid s_sqlServerFileDataSource =
	        new Guid("485C80D5-BC85-46db-9E6D-4238A0AD7B6B");
	
	    public override Guid DeriveSource(string connectionString)
	    {
	        if (connectionString == null)
	        {
	            throw new ArgumentNullException("connectionString");
	        }
	        if (connectionString.Contains("AttachDBFilename"))
	        {
	            return s_sqlServerFileDataSource;
	        }
	        return s_sqlServerDataSource;
	    }
	}
snippet type_isclass

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsClass/type_isclass.cs

	using System;
	using System.Reflection;
	
	public  class MyDemoClass
	{
	}
	
	public class MyTypeClass
	{
	    public static void Main(string[] args)
	    {
	        try
	        {
	            Type  myType = typeof(MyDemoClass);
	            Console.WriteLine("\nIs the specified type a class? {0}.", myType.IsClass); 
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("\nAn exception occurred: {0}." ,e.Message);
	        }
	    }
	}

snippet cocontravariancedelegatesgenrelaxed

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cocontravariancedelegatesgenrelaxed/example.cs

	using System;
	
	public class Type1 {}
	public class Type2 : Type1 {}
	public class Type3 : Type2 {}
	
	public class Program
	{
	    public static Type3 MyMethod(Type1 t)
	    {
	        return t as Type3 ?? new Type3();
	    }
	
	    static void Main() 
	    {
	        Func<Type2, Type2> f1 = MyMethod;
	
	        Func<Type3, Type1> f2 = f1;
	        Type1 t1 = f2(new Type3());
	    }
	}
	

snippet conceptual_basicio_textfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_basicio_textfiles/source3.cs

	using System;
	using System.IO;
	
	class Test
	{
	    public static void Main()
	    {
	        try
	            using (StreamReader sr = new StreamReader("TestFile.txt"))
	            {
	                String line = sr.ReadToEnd();
	                Console.WriteLine(line);
	            }
	        }
	        catch (IOException e)
	        {
	            Console.WriteLine("The file could not be read:");
	            Console.WriteLine(e.Message);
	        }
	    }
	}

snippet adapplicationbase

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADApplicationBase/source2.cs

	using System;
	using System.Reflection;
	
	class AppDomain4
	{
	    public static void Main()
	    {
	        AppDomainSetup domaininfo = new AppDomainSetup();
	        domaininfo.ApplicationBase = "f:\\work\\development\\latest";
	
	        AppDomain domain = AppDomain.CreateDomain("MyDomain", null, domaininfo);
	
	        Console.WriteLine("Host domain: " + AppDomain.CurrentDomain.FriendlyName);
	        Console.WriteLine("child domain: " + domain.FriendlyName);
	        Console.WriteLine("Application base is: " + domain.SetupInformation.ApplicationBase);
	
	        AppDomain.Unload(domain);
	    }
	}

snippet assembly_fullname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Assembly_FullName/Example.cs

	using System;
	using System.Reflection;
	
	class Example
	{
	    static void Main()
	    {
	        Console.WriteLine("The FullName property (also called the display name) of...");
	        Console.WriteLine("...the currently executing assembly:");
	        Console.WriteLine(typeof(Example).Assembly.FullName);
	
	        Console.WriteLine("...the assembly that contains the Int32 type:");
	        Console.WriteLine(typeof(int).Assembly.FullName);
	    }
	}
	
	/* This example produces output similar to the following:
	
	The FullName property (also called the display name) of...
	...the currently executing assembly:
	ExampleAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
	...the assembly that contains the Int32 type:
	mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
	 */
snippet codecastexpressionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeCastExpressionExample/codecastexpressionexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeCastExpressionExample
	    {
	        public CodeCastExpressionExample()
	        {
	            CodeCastExpression castExpression = new CodeCastExpression(
	                "System.Int64",
	                new CodePrimitiveExpression(1000) );    
	
	
	        }
	    }
	}
snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/righttoleft2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] inputs = { "1 May 1917", "June 16, 2003" };
	      string pattern = @"(?<=\d{1,2}\s)\w+,?\s\d{4}";
	      
	      foreach (string input in inputs)
	      {
	         Match match = Regex.Match(input, pattern, RegexOptions.RightToLeft);
	         if (match.Success)
	            Console.WriteLine("The date occurs in {0}.", match.Value);
	         else
	            Console.WriteLine("{0} does not match.", input);
	      }
	   }
	}

snippet x509chaintest

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/x509chaintest/remarks.cs

	
	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	
	class TestApplicationPolicy
	{
	    static void Main()
	    {
	        X509Chain ch = new X509Chain();
	        ch.ChainPolicy.ApplicationPolicy.Add(new Oid("1.2.1.1"));
	        Console.WriteLine ("Chain Information");
	        ch.ChainPolicy.RevocationMode = X509RevocationMode.Online;
	        Console.WriteLine ("Chain revocation flag: {0}", ch.ChainPolicy.RevocationFlag);
	        Console.WriteLine ("Chain revocation mode: {0}", ch.ChainPolicy.RevocationMode);
	        Console.WriteLine ("Chain verification flag: {0}", ch.ChainPolicy.VerificationFlags);
	        Console.WriteLine ("Chain verification time: {0}", ch.ChainPolicy.VerificationTime);
	        Console.WriteLine ("Chain status length: {0}", ch.ChainStatus.Length);
	        Console.WriteLine ("Chain application policy count: {0}", ch.ChainPolicy.ApplicationPolicy.Count);
	        Console.WriteLine ("Chain certificate policy count: {0} {1}", ch.ChainPolicy.CertificatePolicy.Count, Environment.NewLine);
	    }
	}

snippet conceptual_isolatedstorage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_isolatedstorage/source7.cs

	using System;
	using System.IO;
	using System.IO.IsolatedStorage;
	
	public class CheckingSpace
	{
	    public static void Main()
	    {
	        IsolatedStorageFile isoStore =  IsolatedStorageFile.GetStore(IsolatedStorageScope.User |
	            IsolatedStorageScope.Assembly, null, null);
	
	        new IsolatedStorageFileStream("InTheRoot.txt", FileMode.Create, isoStore);
	        new IsolatedStorageFileStream("Another.txt", FileMode.Create, isoStore);
	        new IsolatedStorageFileStream("AThird.txt", FileMode.Create, isoStore);
	        new IsolatedStorageFileStream("AFourth.txt", FileMode.Create, isoStore);
	        new IsolatedStorageFileStream("AFifth.txt", FileMode.Create, isoStore);
	
	        Console.WriteLine(isoStore.AvailableFreeSpace + " bytes of space remain in this isolated store.");
	}

snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/comparison3.cs

	using System;
	
	public class Class1
	{
	   public static void Main()
	   {
	      string separated = "\u0061\u030a";
	      string combined = "\u00e5";
	            
	      Console.WriteLine("Equal sort weight of {0} and {1} using InvariantCulture: {2}",
	                        separated, combined, 
	                        String.Compare(separated, combined, 
	                                       StringComparison.InvariantCulture) == 0);
	      
	      Console.WriteLine("Equal sort weight of {0} and {1} using Ordinal: {2}",
	                        separated, combined,
	                        String.Compare(separated, combined, 
	                                       StringComparison.Ordinal) == 0);
	   }
	}

snippet conceptual_timespan_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_custom/customformatexample1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      TimeSpan duration = new TimeSpan(1, 12, 23, 62);
	
	      string output = null;
	      output = "Time of Travel: " + duration.ToString("%d") + " days";
	      Console.WriteLine(output);
	      output = "Time of Travel: " + duration.ToString(@"dd\.hh\:mm\:ss"); 
	      Console.WriteLine(output);
	
	      Console.WriteLine("Time of Travel: {0:%d} day(s)", duration);
	      Console.WriteLine("Time of Travel: {0:dd\\.hh\\:mm\\:ss} days", duration);
	   }
	}

snippet string_intern

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_intern/string_intern.cs

	using System;
	using System.Text;
	
	class Sample {
	    public static void Main() {
	    String s1 = "MyTest";
	    String s2 = new StringBuilder().Append("My").Append("Test").ToString(); 
	    String s3 = String.Intern(s2); 
	    Console.WriteLine("s1 == '{0}'", s1);
	    Console.WriteLine("s2 == '{0}'", s2);
	    Console.WriteLine("s3 == '{0}'", s3);
	    Console.WriteLine("Is s2 the same reference as s1?: {0}", (Object)s2==(Object)s1); 
	    Console.WriteLine("Is s3 the same reference as s1?: {0}", (Object)s3==(Object)s1);
	    }
	}
	/*
	This example produces the following results:
	s1 == 'MyTest'
	s2 == 'MyTest'
	s3 == 'MyTest'
	Is s2 the same reference as s1?: False
	Is s3 the same reference as s1?: True
	*/
snippet classinterfacetype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ClassInterfaceType/ClassInterfaceType.cs

	using System;
	using System.Runtime.InteropServices;
	
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	public class AClassUsableViaCOM
	{
	    public AClassUsableViaCOM() { }
	
	    public Int32 Add(Int32 x, Int32 y) { return x + y; }
	}
	
	[ClassInterface(ClassInterfaceType.None)]
	public class AnotherClassUsableViaCOM : IComparable
	{
	    public AnotherClassUsableViaCOM() { }
	
	    Int32 IComparable.CompareTo(Object o) { return 0; }
	}
	

snippet fileinfoappendtext

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/fileinfoappendtext/fileinfoappendtext.cs

	using System;
	using System.IO;
	
	public class AppendTextTest 
	{
	    public static void Main() 
	    {
	        FileInfo fi = new FileInfo("temp.txt");
	        StreamWriter sw = fi.AppendText();
	        sw.WriteLine("Add as many lines as you like...");
	        sw.WriteLine("Add another line to the output...");
	        sw.Flush();
	        sw.Close();
	        StreamReader sr = new StreamReader(fi.OpenRead());
	        while (sr.Peek() != -1)
	            Console.WriteLine( sr.ReadLine() );
	    }
	}
snippet portableclasslibrarymvvm

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/portableclasslibrarymvvm/customer.cs

	using System;
	
	namespace SimpleMVVM.Model
	{  
	    public class Customer
	    {
	        public int CustomerID
	        {
	            get; 
	            set;   
	        }
	
	        public string FullName
	        {
	            get;
	            set;
	        }
	
	        public string Phone
	        {
	            get; 
	            set;
	        }
	    }
	}
snippet codetrycatchfinallyexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeTryCatchFinallyExample/source2.cs

	using System;
	
	class ArgumentOutOfRangeExample
	{
	    public static void Main()
	    {
	        int[] array1 = {0, 0};
	        int[] array2 = {0, 0};
	
	        try
	        {
	            Array.Copy(array1, array2, -1);
	        }
	        catch (ArgumentOutOfRangeException e)
	        {
	            Console.WriteLine("Error: {0}", e);
	            throw;
	        }
	        finally
	        {
	            Console.WriteLine("This statement is always executed.");
	        }
	    }
	}

snippet microsoft_visualstudio_data_core_ivsdatasupportimportresolver

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSupportImportResolver/IVsDataSupportImportResolver.cs

	using System;
	using System.IO;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	
	internal class MyObjectSupport
	      IVsDataSupportImportResolver
	{
	    public Stream OpenSupportStream()
	    {
	        return GetType().Assembly.GetManifestResourceStream(
	            "MyObjectSupport.xml");
	    }
	
	    public Stream ImportSupportStream(string name)
	    {
	        if (String.Equals(name, "MyObjectDefines"))
	        {
	            return GetType().Assembly.GetManifestResourceStream(
	                "MyObjectDefines.xml");
	        }
	        return null;
	    }
	}
snippet assemblybuilder_defineunmanagedresource

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource/EmittedTest2.cs

	/*
	   Note : Calls  EmitClass class from 'MyEmitTestAssembly.dll' using reflection emit.
	*/
	
	using System;
	
	public class MyAssemblyResourceApplication 
	{
	   public static void Main() 
	   {
	      try
	      {
	         CallEmitMethod();
	      }
	      catch(TypeLoadException)
	      {
	         Console.WriteLine("Unable to load EmitClass type " +
	            "from MyEmitTestAssembly.dll!");
	      }
	   }
	
	   private static void CallEmitMethod()
	   {
	      EmitClass myEmit = new EmitClass();
	      Console.WriteLine(myEmit.Display());
	   }
	} 
snippet io_ports_getportnames

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_Ports_GetPortNames/example.cs

	using System;
	using System.IO.Ports;
	
	namespace SerialPortExample
	{
	    class SerialPortExample
	    {
	        public static void Main()
	        {
	            string[] ports = SerialPort.GetPortNames();
	
	            Console.WriteLine("The following serial ports were found:");
	
	            foreach(string port in ports)
	            {
	                Console.WriteLine(port);
	            }
	
	            Console.ReadLine();
	        }
	    }
	}
	
snippet microsoft_visualstudio_data_core_ivsdataproviderobjectfactory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProviderObjectFactory/IVsDataProviderObjectFactory2.cs

	using System;
	using System.Reflection;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Framework;
	
	public class MyProviderObjectFactory2 : DataProviderObjectFactory
	{
	    public override object CreateObject(Type objType)
	    {
	        return null;
	    }
	
	    public override Assembly GetAssembly(string assemblyString)
	    {
	        if (assemblyString == null)
	        {
	            throw new ArgumentNullException("assemblyString");
	        }
	        if (assemblyString.Length == 0)
	        {
	            return GetType().Assembly;
	        }
	        return base.GetAssembly(assemblyString);
	    }
	}
snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/keyword2.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      @case c = new @case("John");
	      Console.WriteLine(c.ClientName);
	   }
	}
	
	public class @case
	{
	   private Guid _id;
	   private string name;
	
	   public @case(string name)
	   {
	      _id = Guid.NewGuid();
	      this.name = name;
	   }
	
	   public String ClientName
	   { get { return name; } }
	} 
snippet catchexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CatchException/catchexception3.cs

	using System;
	using System.IO;
	
	public class ProcessFile
	{
	    public static void Main()
	    {
	        try
	        {
	            StreamReader sr = File.OpenText("data.txt");
	            Console.WriteLine("The first line of this file is {0}", sr.ReadLine());
	        }
	        catch (FileNotFoundException e)
	        {
	            Console.WriteLine("[Data File Missing] {0}", e);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("An error occurred: '{0}'", e);
	        }
	    }
	}

snippet runtime_compilerservices_runtimehelpers_getobjectvalue

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_CompilerServices_RuntimeHelpers_GetObjectValue/example.cs

	using System;
	using System.Runtime.CompilerServices;
	
	struct Point2I
	{
	    public int x;
	    public int y;
	}
	
	class Program
	{
	
	    static void Main(string[] args)
	    {
	        Point2I pnt;
	        pnt.x = 0;
	        pnt.y = 0;
	
	        object objPntr = RuntimeHelpers.GetObjectValue(pnt);
	
	    }
	}
snippet conceptual_regularexpressions_backtracking

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_backtracking/backtracking3.cs

	using System;
	using System.Diagnostics;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = "^(a+)+$";
	      string[] inputs = { "aaaaaa", "aaaaa!" };
	      Regex rgx = new Regex(pattern);
	      Stopwatch sw;
	      
	      foreach (string input in inputs) {
	         sw = Stopwatch.StartNew();   
	         Match match = rgx.Match(input);
	         sw.Stop();
	         if (match.Success)
	            Console.WriteLine("Matched {0} in {1}", match.Value, sw.Elapsed);
	         else
	            Console.WriteLine("No match found in {0}", sw.Elapsed);
	      }
	   }
	}

snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/nondigit1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"^\D\d{1,5}\D*$"; 
	      string[] inputs = { "A1039C", "AA0001", "C18A", "Y938518" }; 
	      
	      foreach (string input in inputs)
	      {
	         if (Regex.IsMatch(input, pattern))
	            Console.WriteLine(input + ": matched");
	         else
	            Console.WriteLine(input + ": match failed");
	      }
	   }
	}

snippet conceptual_regularexpressions_design

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_design/lookbehind1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] inputs = { "jack.sprat", "dog#", "dog#1", "me.myself", 
	                          "me.myself!" };
	      string pattern = @"^[A-Z0-9]([-!#$%&'.*+/=?^`{}|~\w])*(?<=[A-Z0-9])$";
	      foreach (string input in inputs) {
	         if (Regex.IsMatch(input, pattern, RegexOptions.IgnoreCase))
	            Console.WriteLine("{0}: Valid", input);
	         else
	            Console.WriteLine("{0}: Invalid", input);
	      }
	   }
	}

snippet codemethodinvokeexpression

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeMethodInvokeExpression/codemethodinvokeexpressionexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeMethodInvokeExpressionExample
	    {
	        public CodeMethodInvokeExpressionExample()
	        {
	            CodeMethodInvokeExpression methodInvoke = new CodeMethodInvokeExpression(
	                new CodeThisReferenceExpression(),
	                "Dispose",
	                new CodeExpression[] { new CodePrimitiveExpression(true) } );
	
	
	        }
	    }
	}
snippet conceptual_resources_retrieving

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_retrieving/example.cs

	using System;
	
	[Serializable] public struct PersonTable
	{
	   public readonly int nColumns;
	   public readonly string column1; 
	   public readonly string column2;
	   public readonly string column3; 
	   public readonly int width1;
	   public readonly int width2;
	   public readonly int width3;
	   
	   public PersonTable(string column1, string column2, string column3,
	                  int width1, int width2, int width3)
	   {
	      this.column1 = column1;
	      this.column2 = column2;
	      this.column3 = column3;
	      this.width1 = width1;
	      this.width2 = width2;
	      this.width3 = width3;
	      this.nColumns = typeof(PersonTable).GetFields().Length / 2; 
	   }
	}

snippet formatting_composite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_Composite/index1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	   string primes;
	   primes = String.Format("Prime numbers less than 10: {0}, {1}, {2}, {3}",
	                          2, 3, 5, 7 );
	   Console.WriteLine(primes);
	   Console.WriteLine();
	
	   string multiple = String.Format("0x{0:X} {0:E} {0:N}",
	                                   Int64.MaxValue);
	   Console.WriteLine(multiple);
	   Console.WriteLine();
	   }
	}

snippet parsing_numbers

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/parsing_numbers/styles1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      string value = "1,304";
	      int number;
	      IFormatProvider provider = CultureInfo.CreateSpecificCulture("en-US");
	      if (Int32.TryParse(value, out number))
	         Console.WriteLine("{0} --> {1}", value, number);
	      else
	         Console.WriteLine("Unable to convert '{0}'", value);
	            
	      if (Int32.TryParse(value, NumberStyles.Integer | NumberStyles.AllowThousands, 
	                        provider, out number))
	         Console.WriteLine("{0} --> {1}", value, number);
	      else
	         Console.WriteLine("Unable to convert '{0}'", value);
	   }
	}
snippet uint64_equals

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/UInt64_Equals/uint64_equals.cs

	using System;
	
	class Example
	{
	     public static void Main()
	     {
	         UInt64 value1 = 50;
	         UInt64 value2 = 50;
	
	        Console.WriteLine("value1:   Type: {0}   Value: {1}",
	                          value1.GetType().Name, value1);
	        Console.WriteLine("value2:   Type: {0}   Value: {1}",
	                        value2.GetType().Name, value2);
	
	        Console.WriteLine("value1 and value2 are equal: {0}",
	                          value1.Equals(value2));
	     }
	}

snippet conceptual_stringbuilder

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_StringBuilder/example2.cs

	using System;
	using System.IO;
	using System.Text;
	
	public class CharsToStr
	{
	    public static void Main()
	    {
	        StringBuilder sb = new StringBuilder("Start with a string and add from ");
	        char[] b = { 'c', 'h', 'a', 'r', '.', ' ', 'B', 'u', 't', ' ', 'n', 'o', 't', ' ', 'a', 'l', 'l' };
	
	        using (StringWriter sw = new StringWriter(sb))
	        {
	            sw.Write(b, 0, 5);
	            Console.WriteLine(sb);
	        }
	    }
	}
	
	

snippet conceptual_timespan_standard

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_standard/standardc1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      TimeSpan interval1, interval2;
	      interval1 = new TimeSpan(7, 45, 16);
	      interval2 = new TimeSpan(18, 12, 38);
	      
	      Console.WriteLine("{0:c} - {1:c} = {2:c}", interval1, 
	                        interval2, interval1 - interval2);
	      Console.WriteLine("{0:c} + {1:c} = {2:c}", interval1, 
	                        interval2, interval1 + interval2);
	      
	      interval1 = new TimeSpan(0, 0, 1, 14, 365);
	      interval2 = TimeSpan.FromTicks(2143756);  
	      Console.WriteLine("{0:c} + {1:c} = {2:c}", interval1, 
	                        interval2, interval1 + interval2);
	   }
	}
snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/case1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\bthe\w*\b";
	      string input = "The man then told them about that event.";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("Found {0} at index {1}.", match.Value, match.Index);
	
	      Console.WriteLine();
	      foreach (Match match in Regex.Matches(input, pattern, 
	                                            RegexOptions.IgnoreCase))
	         Console.WriteLine("Found {0} at index {1}.", match.Value, match.Index);
	   }
	}

snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/composite2.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime startDate = new DateTime(2015, 8, 28, 6, 0, 0);
	      decimal[] temps = { 73.452m, 68.98m, 72.6m, 69.24563m,
	                         74.1m, 72.156m, 72.228m };
	      Console.WriteLine("{0,-20} {1,11}\n", "Date", "Temperature");
	      for (int ctr = 0; ctr < temps.Length; ctr++)
	         Console.WriteLine("{0,-20:g} {1,11:N1}", startDate.AddDays(ctr), temps[ctr]);
	
	   }
	}

snippet string_compare3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_compare3/comp3.cs

	using System;
	
	class Sample {
	    public static void Main() {
	    String str1 = "machine";
	    String str2 = "device";
	    String str;
	    int result;
	
	    Console.WriteLine();
	    Console.WriteLine("str1 = '{0}', str2 = '{1}'", str1, str2);
	    result = String.Compare(str1, 2, str2, 0, 2);
	    str = ((result < 0) ? "less than" : ((result > 0) ? "greater than" : "equal to"));
	    Console.Write("Substring '{0}' in '{1}' is ", str1.Substring(2, 2), str1);
	    Console.Write("{0} ", str);
	    Console.WriteLine("substring '{0}' in '{1}'.", str2.Substring(0, 2), str2);
	    }
	}
	/*
	This example produces the following results:
	
	str1 = 'machine', str2 = 'device'
	Substring 'ch' in 'machine' is less than substring 'de' in 'device'.
	*/
snippet stringjoin

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringjoin/stringjoin.cs

	using System;
	
	public class JoinTest {
	    public static void Main() {
	
	        Console.WriteLine(MakeLine(0, 5, ", "));
	        Console.WriteLine(MakeLine(1, 6, "  "));
	        Console.WriteLine(MakeLine(9, 9, ": "));
	        Console.WriteLine(MakeLine(4, 7, "< "));
	    }
	
	    private static string MakeLine(int initVal, int multVal, string sep) {
	
	        string [] sArr = new string [10];
	
	        for (int i = initVal; i < initVal + 10; i++)
	            sArr[i - initVal] = String.Format("{0,-3}", i * multVal);
	
	        return String.Join(sep, sArr);
	    }
	}
snippet assemblydelaysignattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyDelaySignAttribute/source2.cs

	using System;
	using System.Reflection;
	
	[assembly:AssemblyVersionAttribute("4.3.2.1")]
	[assembly:AssemblyCultureAttribute("de")]
	
	[assembly:AssemblyKeyFileAttribute("myKey.snk")]
	[assembly:AssemblyDelaySignAttribute(true)]
	
	namespace DummySpace
	{
	    class DummyClass
	    {
	        public static void Main()
	        {
	            Console.WriteLine("DummySpace.DummyClass.Main()");
	        }
	    }
	}

snippet microsoft_visualstudio_data_core_ivsdatadefaultobject

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataDefaultObject/IVsDataDefaultObject.cs

	using System;
	using System.Runtime.InteropServices;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services;
	
	[DataDefaultObject("C58E1B8D-9723-40c8-8B11-9DDAF0B393BA")]
	public interface IVsDataConnectionUIConnector
	{
	    void Connect(IVsDataConnection connection);
	}
	
	[Guid("C58E1B8D-9723-40c8-8B11-9DDAF0B393BA")]
	internal class DefaultConnectionUIConnector
	    : IVsDataConnectionUIConnector,
	      IVsDataDefaultObject
	{
	    public void Connect(IVsDataConnection connection)
	    {
	        if (connection == null)
	        {
	            throw new ArgumentNullException("connection");
	        }
	        connection.Open();
	    }
	}

snippet microsoft_visualstudio_data_core_ivsdatasource

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSource/IVsDataSource.cs

	using System;
	using System.Diagnostics;
	using Microsoft.VisualStudio.Data.Core;
	
	public class DDEX_IVsDataSourceExample1
	{
	    public static void OutputDataSource(
	        IServiceProvider serviceProvider,
	        Guid dataSourceGuid)
	    {
	        IVsDataSourceManager sourceManager =
	            serviceProvider.GetService(typeof(IVsDataSourceManager))
	                as IVsDataSourceManager;
	        IVsDataSource source = sourceManager.Sources[dataSourceGuid];
	        Trace.WriteLine(source.DisplayName);
	        Trace.WriteLine(source.Description);
	        IVsDataProviderManager providerManager =
	            serviceProvider.GetService(typeof(IVsDataProviderManager))
	                as IVsDataProviderManager;
	        foreach (Guid providerGuid in source.GetProviders())
	        {
	            IVsDataProvider provider = providerManager.Providers[providerGuid];
	            Trace.WriteLine(provider.Name);
	        }
	    }
	}
snippet x509certificate_getname_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetName_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string results = cert.GetName();
	       
	        Console.WriteLine(results);
	  
	    }
	
	}
snippet x509certificate_gethashcode_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetHashCode_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        int results = cert.GetHashCode();
	       
	        Console.WriteLine(results);
	  
	    }
	
	}
snippet x509certificate_getformat_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetFormat_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string results = cert.GetFormat();
	       
	        Console.WriteLine(results);
	  
	    }
	
	}
snippet x509certificate_getissuername_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetIssuerName_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string results = cert.GetIssuerName();
	       
	        Console.WriteLine(results);
	  
	    }
	
	}
snippet x509certificate_getkeyalgorithm_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetKeyAlgorithm_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string results = cert.GetKeyAlgorithm();
	       
	        Console.WriteLine(results);
	  
	    }
	
	}
snippet x509certificate_getcerthashstring_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetCertHashString_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string results = cert.GetCertHashString();
	       
	        Console.WriteLine(results);
	  
	    }
	
	}
snippet x509certificate_geteffectivedatestring_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetEffectiveDateString_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string results = cert.GetEffectiveDateString();
	       
	        Console.WriteLine(results);
	  
	    }
	
	}
snippet x509certificate_getexpirationdatestring_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetExpirationDateString_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string results = cert.GetExpirationDateString();
	       
	        Console.WriteLine(results);
	  
	    }
	
	}
snippet x509certificate_getkeyalgorithmparametersstring

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetKeyAlgorithmParametersString/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string results = cert.GetKeyAlgorithmParametersString();
	       
	        Console.WriteLine(results);
	  
	    }
	
	}
snippet assemblybuilder_defineunmanagedresource2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource2/EmittedTest3.cs

	/*
	   Supporting file for AssemblyBuilder_DefineUnmanagedResource2.cs
	   Note : Calls  EmitClass class from 'MyEmitTestAssembly.dll' using reflection emit.
	*/
	
	using System;
	
	public class MyAssemblyResourceApplication 
	{
	   public static void Main() 
	   {
	      try
	      {
	         CallEmitMethod();
	      }
	      catch(TypeLoadException)
	      {
	         Console.WriteLine("Unable to load EmitClass type " +
	            "from MyEmitTestAssembly.dll!");
	      }
	   }
	
	   private static void CallEmitMethod()
	   {
	      EmitClass myEmit = new EmitClass();
	      Console.WriteLine(myEmit.Display());
	   }
	} 
snippet conceptual_basicio_textfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_basicio_textfiles/source4.cs

	using System;
	using System.IO;
	
	public class TextFromFile
	{
	    private const string FILE_NAME = "MyFile.txt";
	
	    public static void Main()
	    {
	        if (!File.Exists(FILE_NAME))
	        {
	            Console.WriteLine("{0} does not exist.", FILE_NAME);
	            return;
	        }
	        using (StreamReader sr = File.OpenText(FILE_NAME))
	        {
	            String input;
	            while ((input = sr.ReadLine()) != null)
	            {
	                Console.WriteLine(input);
	            }
	            Console.WriteLine ("The end of the stream has been reached.");
	        }
	    }
	}

snippet typelibvar

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeLibVar/codefile6.cs

	
	using System;
	using System.Reflection;
	using System.Runtime.InteropServices;
	
	namespace D
	{
		class ClassD
		{
			public static bool IsHiddenField( FieldInfo fi )
			{
				object[] FieldAttributes = fi.GetCustomAttributes( typeof( TypeLibVarAttribute ), true);
			
				if( FieldAttributes.Length > 0 )
				{
					TypeLibVarAttribute tlv = ( TypeLibVarAttribute )FieldAttributes[0];
					TypeLibVarFlags  flags = tlv.Value;
					return ( flags & TypeLibVarFlags.FHidden ) != 0; 
				}
				return false;
			}
		}
	}

snippet improvedinteropsnippets

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ImprovedInteropSnippets/codefile5.cs

	
	using System;
	using System.Reflection;
	using System.Runtime.InteropServices;
	
	namespace C
	{
		class ClassC	
		{
			public static bool IsHiddenMethod( MethodInfo mi )
			{
				object[] MethodAttributes = mi.GetCustomAttributes( typeof( TypeLibFuncAttribute ), true);
			
				if( MethodAttributes.Length > 0 )
				{
					TypeLibFuncAttribute tlf = ( TypeLibFuncAttribute )MethodAttributes[0];
					TypeLibFuncFlags  flags = tlf.Value;
					return ( flags & TypeLibFuncFlags.FHidden ) != 0; 
				}
				return false;
			}
		}
	}

snippet conceptual_isolatedstorage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_isolatedstorage/source6.cs

	using System;
	using System.IO.IsolatedStorage;
	
	public class ObtainingAStore
	{
	    public static void Main()
	    {
	
	        IsolatedStorageFile isoStore = IsolatedStorageFile.GetStore(IsolatedStorageScope.User |
	            IsolatedStorageScope.Assembly, null, null);
	    }
	}
	
	public class ObtainingAStoreWithDomain
	{
	    public static void Dummy()
	    {
	        IsolatedStorageFile isoStore = IsolatedStorageFile.GetStore(IsolatedStorageScope.User |
	            IsolatedStorageScope.Assembly | IsolatedStorageScope.Domain, null, null);
	    }
	}

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/equals1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("tr-TR");
	      string uri = @"file:\\c:\users\username\Documents\bio.txt";
	      if (! AccessesFileSystem(uri))
	         Console.WriteLine("Access is allowed.");
	      else
	         Console.WriteLine("Access is not allowed.");
	   }
	   
	   private static bool AccessesFileSystem(string uri)
	   {
	      return uri.StartsWith("FILE", true, CultureInfo.CurrentCulture);
	   }
	}

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/equals2.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("tr-TR");
	      string uri = @"file:\\c:\users\username\Documents\bio.txt";
	      if (! AccessesFileSystem(uri))
	         Console.WriteLine("Access is allowed.");
	      else
	         Console.WriteLine("Access is not allowed.");
	   }
	   
	   private static bool AccessesFileSystem(string uri)
	   {
	      return uri.StartsWith("FILE", StringComparison.OrdinalIgnoreCase);
	   }
	}

snippet codevariabledeclarationstatementexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeVariableDeclarationStatementExample/codevariabledeclarationstatementexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeVariableDeclarationStatementExample
	    {
	        public CodeVariableDeclarationStatementExample()
	        {
	            CodeVariableDeclarationStatement variableDeclaration = new CodeVariableDeclarationStatement(
	                typeof(string),
	                "TestString",
	                new CodePrimitiveExpression("Testing") );
	
	
	    
	        }
	    }
	}
snippet string_tochararray1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_ToCharArray1/tocharry1.cs

	using System;
	
	class Sample {
	    public static void Main() {
	    string str = "012wxyz789";
	    char[] arr;
	
	    arr = str.ToCharArray(3, 4);
	    Console.Write("The letters in '{0}' are: '", str);
	    Console.Write(arr);
	    Console.WriteLine("'");
	    Console.WriteLine("Each letter in '{0}' is:", str);
	    foreach (char c in arr)
	        Console.WriteLine(c);
	    }
	}
	/*
	This example produces the following results:
	The letters in '012wxyz789' are: 'wxyz'
	Each letter in '012wxyz789' is:
	w
	x
	y
	z
	*/
snippet conceptual_regularexpressions_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_bestpractices/backtrack4.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"^[0-9A-Z][-.\w]*(?<=[0-9A-Z])\$$";
	      string[] partNos = { "A1C$", "A4", "A4$", "A1603D$", "A1603D#" };
	      
	      foreach (var input in partNos) {
	         Match match = Regex.Match(input, pattern);
	         if (match.Success)
	            Console.WriteLine(match.Value);
	         else
	            Console.WriteLine("Match not found.");
	      }      
	   }
	}

snippet string_tostring

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_tostring/string.tostring.cs

	using System;
	
	class stringToString {
	    public static void Main() {
	    String str1 = "123";
	    String str2 = "abc";
	
	    Console.WriteLine("Original str1: {0}", str1);
	    Console.WriteLine("Original str2: {0}", str2);
	    Console.WriteLine("str1 same as str2?: {0}", Object.ReferenceEquals(str1, str2));
	
	    str2 = str1.ToString();
	    Console.WriteLine();
	    Console.WriteLine("New str2:      {0}", str2);
	    Console.WriteLine("str1 same as str2?: {0}", Object.ReferenceEquals(str1, str2));
	    }
	}
	/*
	This code produces the following output:
	Original str1: 123
	Original str2: abc
	str1 same as str2?: False
	
	New str2:      123
	str1 same as str2?: True
	*/
snippet processthreadidealprocessor

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProcessThreadIdealProcessor/program.cs

	using System;
	using System.Diagnostics;
	
	namespace ProcessThreadIdealProcessor
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            Process[] notepads = Process.GetProcessesByName("notepad");
	            if (notepads.Length == 0)
	                Process.Start("notepad");
	            ProcessThreadCollection threads;
	            notepads = Process.GetProcessesByName("Notepad");
	            threads = notepads[0].Threads;
	            threads[0].IdealProcessor = 0;
	            threads[0].ProcessorAffinity = (IntPtr)1;
	        }
	    }
	}

snippet runtime_interopservices_marshal_readbyte___writebyte

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_ReadByte___WriteByte/example.cs

	using System;
	using System.Runtime.InteropServices;
	
	 class Example
	 {
	     static void Main(string[] args)
	     {
	          IntPtr hGlobal = Marshal.AllocHGlobal(1);
	
	          byte b = 1;
	          Console.WriteLine("Byte written to unmanaged memory: " + b);
	
	          Marshal.WriteByte(hGlobal, b);
	
	          byte c = Marshal.ReadByte(hGlobal);
	          Console.WriteLine("Byte read from unmanaged memory: " + c);
	
	          Marshal.FreeHGlobal(hGlobal);
	          Console.WriteLine("Unmanaged memory was disposed.");
	     }
	}
snippet microsoft_win32_registrykey2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Win32_RegistryKey2/source2.cs

	using System;
	using Microsoft.Win32;
	
	class RegKeyDel
	{
	    static void Main()
	    {
	        RegistryKey test9999 =
	            Registry.CurrentUser.CreateSubKey("Test9999");
	        RegistryKey testName = test9999.CreateSubKey("TestName");
	        RegistryKey testSettings = test9999.CreateSubKey("TestSettings");
	
	        testSettings.SetValue("Language", "French");
	        testSettings.SetValue("Level", "Intermediate");
	        testSettings.SetValue("ID", 123);
	
	        test9999.DeleteSubKey("TestName");
	        Registry.CurrentUser.DeleteSubKeyTree("Test9999");
	    }
	}
snippet generic_idictionary

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_IDictionary/source2.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Dictionary<int, string> exDictionary = new Dictionary<int, string>();
	
	        exDictionary.Add(0, "notepad.exe");
	        exDictionary.Add(1, "paint.exe");
	        exDictionary.Add(2, "paint.exe");
	        exDictionary.Add(3, "wordpad.exe");
	        IDictionary<int, string> myDictionary = exDictionary;
	        foreach (KeyValuePair<int, string> kvp in myDictionary)
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, kvp.Value);
	        }
	    }
	}
	

snippet type_isinterface

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsInterface/type_isinterface.cs

	using System;
	interface myIFace
	{
	}
	class MyIsInterface 
	{
	    public static void Main(string []args)
	    {
	        try
	        {
	            bool myBool1 = typeof(myIFace).IsInterface;    
	            Console.WriteLine("Is the specified type an interface? {0}.", myBool1);
	            bool myBool2 = typeof(MyIsInterface).IsInterface;    
	            Console.WriteLine("Is the specified type an interface? {0}.", myBool2);         
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("\nAn exception occurred: {0}.", e.Message);
	        }
	    }
	}
snippet conceptual_stringbuilder

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_StringBuilder/tostringexample1.cs

	using System;
	using System.Text;
	
	public class Example
	{
	   public static void Main()
	   {
	      StringBuilder sb = new StringBuilder();
	      bool flag = true;
	      string[] spellings = { "recieve", "receeve", "receive" };
	      sb.AppendFormat("Which of the following spellings is {0}:", flag);
	      sb.AppendLine();
	      for (int ctr = 0; ctr <= spellings.GetUpperBound(0); ctr++) {
	         sb.AppendFormat("   {0}. {1}", ctr, spellings[ctr]);
	         sb.AppendLine();
	      }
	      sb.AppendLine();
	      Console.WriteLine(sb.ToString());
	   }
	}
	          
snippet directoryinfoparent

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/directoryinfoparent/directoryinfoparent.cs

	using System;
	using System.IO;
	
	public class MoveToTest 
	{
	    public static void Main() 
	    {
	
	        DirectoryInfo di = new DirectoryInfo("TempDir");
	
	        if (di.Exists == false)
	            di.Create();
	
	        DirectoryInfo dis = di.CreateSubdirectory("SubDir");
	
	        DirectoryInfo parentDir = dis.Parent;
	        Console.WriteLine("The parent directory of '{0}' is '{1}'", dis.Name, parentDir.Name);
	
	        di.Delete(true);
	    }
	}
snippet conceptual_basicio_textfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_basicio_textfiles/write.cs

	using System;
	using System.IO;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	    
	        string[] lines = { "First line", "Second line", "Third line" };
	
	        string docPath =
	          Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
	
	        using (StreamWriter outputFile = new StreamWriter(Path.Combine(docPath, "WriteLines.txt")))
	        {
	            foreach (string line in lines)
	                outputFile.WriteLine(line);
	        }
	    }
	}

snippet processonestream

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProcessOneStream/stdstr.cs

	using System;
	using System.Diagnostics;
	
	public class Snippet
	{
	    static void Main() 
	    {
	        using (Process compiler = new Process())
	        {
	            compiler.StartInfo.FileName = "csc.exe";
	            compiler.StartInfo.Arguments = "/r:System.dll /out:sample.exe stdstr.cs";
	            compiler.StartInfo.UseShellExecute = false;
	            compiler.StartInfo.RedirectStandardOutput = true;
	            compiler.Start();
	
	            Console.WriteLine(compiler.StandardOutput.ReadToEnd());
	
	            compiler.WaitForExit();
	        }
	    }
	}

snippet conceptual_calendars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_calendars/instantiatewithera1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      int year = 2;
	      int month = 1;
	      int day = 1;
	      Calendar cal = new JapaneseCalendar();
	
	      Console.WriteLine("\nDate instantiated without an era:");
	      DateTime date1 = new DateTime(year, month, day, 0, 0, 0, 0, cal);
	      Console.WriteLine("{0}/{1}/{2} in Japanese Calendar -> {3:d} in Gregorian", 
	                        cal.GetMonth(date1), cal.GetDayOfMonth(date1),
	                        cal.GetYear(date1), date1);
	      
	      Console.WriteLine("\nDates instantiated with eras:");
	      foreach (int era in cal.Eras) {
	         DateTime date2 = cal.ToDateTime(year, month, day, 0, 0, 0, 0, era);
	         Console.WriteLine("{0}/{1}/{2} era {3} in Japanese Calendar -> {4:d} in Gregorian", 
	                           cal.GetMonth(date2), cal.GetDayOfMonth(date2),
	                           cal.GetYear(date2), cal.GetEra(date2), date2);
	      }                        
	   }
	}

snippet stringreplace

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringreplace/stringreplace.cs

	using System;
	
	public class ReplaceTest {
	    public static void Main() {
	
	        string errString = "This docment uses 3 other docments to docment the docmentation";
	
	        Console.WriteLine("The original string is:{0}'{1}'{0}", Environment.NewLine, errString);
	
	
	        string correctString = errString.Replace("docment", "document");
	
	        Console.WriteLine("After correcting the string, the result is:{0}'{1}'",
	                Environment.NewLine, correctString);
	
	    }
	}

snippet conceptual_timespan_standard

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_standard/standardlong1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      TimeSpan interval1, interval2;
	      interval1 = new TimeSpan(7, 45, 16);
	      interval2 = new TimeSpan(18, 12, 38);
	      
	      Console.WriteLine("{0:G} - {1:G} = {2:G}", interval1, 
	                        interval2, interval1 - interval2);
	      Console.WriteLine(String.Format(new CultureInfo("fr-FR"), 
	                        "{0:G} + {1:G} = {2:G}", interval1, 
	                        interval2, interval1 + interval2));
	      
	      interval1 = new TimeSpan(0, 0, 1, 14, 36);
	      interval2 = TimeSpan.FromTicks(2143756);      
	      Console.WriteLine("{0:G} + {1:G} = {2:G}", interval1, 
	                        interval2, interval1 + interval2);
	   }
	}
snippet conceptual_timespan_standard

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_standard/standardshort1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      TimeSpan interval1, interval2;
	      interval1 = new TimeSpan(7, 45, 16);
	      interval2 = new TimeSpan(18, 12, 38);
	      
	      Console.WriteLine("{0:g} - {1:g} = {2:g}", interval1, 
	                        interval2, interval1 - interval2);
	      Console.WriteLine(String.Format(new CultureInfo("fr-FR"), 
	                        "{0:g} + {1:g} = {2:g}", interval1, 
	                        interval2, interval1 + interval2));
	      
	      interval1 = new TimeSpan(0, 0, 1, 14, 36);
	      interval2 = TimeSpan.FromTicks(2143756);      
	      Console.WriteLine("{0:g} + {1:g} = {2:g}", interval1, 
	                        interval2, interval1 + interval2);
	   }
	}
snippet console_title

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_title/mytitle.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Console.WriteLine("The current console title is: \"{0}\"",
	                      Console.Title);
	    Console.WriteLine("  (Press any key to change the console title.)");
	    Console.ReadKey(true);
	    Console.Title = "The title has changed!";
	    Console.WriteLine("Note that the new console title is \"{0}\"\n" +
	                      "  (Press any key to quit.)", Console.Title);
	    Console.ReadKey(true);
	    }
	}
	/*
	This example produces the following results:
	
	>myTitle
	The current console title is: "Command Prompt - myTitle"
	  (Press any key to change the console title.)
	Note that the new console title is "The title has changed!"
	  (Press any key to quit.)
	
	*/
snippet interop_callingconvention

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Interop_CallingConvention/callingconv.cs

	using System;
	using System.Runtime.InteropServices;
	
	internal static class NativeMethods
	{
	
	
	    [DllImport("msvcrt.dll", CharSet = CharSet.Unicode, CallingConvention = CallingConvention.Cdecl)]
	    internal static extern int printf(String format, int i, double d);
	
	    [DllImport("msvcrt.dll", CharSet = CharSet.Unicode, CallingConvention = CallingConvention.Cdecl)]
	    internal static extern int printf(String format, int i, String s);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        NativeMethods.printf("\nPrint params: %i %f", 99, 99.99);
	        NativeMethods.printf("\nPrint params: %i %s", 99, "abcd");
	    }
	}

snippet type_isansiclass

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsAnsiClass/type_isansiclass.cs

	using System;
	using System.Reflection;
	public class MyClass
	{
	    protected string myField = "A sample protected field." ;
	}
	public class MyType_IsAnsiClass
	{
	    public static void Main()
	    {
	        try
	        {
	            MyClass myObject = new MyClass();
	            Type myType = typeof(MyClass);
	            FieldInfo myFieldInfo = myType.GetField("myField", BindingFlags.NonPublic|BindingFlags.Instance);
	            Console.WriteLine( "\nChecking for the AnsiClass attribute for a field.\n"); 
	            Console.WriteLine("Name of Class: {0} \nValue of Field: {1} \nIsAnsiClass = {2}", myType.FullName, myFieldInfo.GetValue(myObject), myType.IsAnsiClass);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception: {0}",e.Message);
	        }
	    }
	}
snippet openfilewindowsstore/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/openfilewindowsstore/properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("App1")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("")]
	[assembly: AssemblyProduct("App1")]
	[assembly: AssemblyCopyright("Copyright ©  2014")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]
	[assembly: ComVisible(false)] 
snippet conceptual_resources_portablemetro

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetro/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("ConsumerCS")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("ConsumerCS")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2012")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]
	[assembly: ComVisible(false)] 
snippet conceptual_resources_portablemetroloc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetroloc/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("LocConsumerCS")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("LocConsumerCS")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2012")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]
	[assembly: ComVisible(false)] 
snippet string_compareordinal

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_compareordinal/comp0.cs

	using System;
	
	class Sample {
	    public static void Main() {
	    String str1 = "ABCD";
	    String str2 = "abcd";
	    String str;
	    int result;
	
	    Console.WriteLine();
	    Console.WriteLine("Compare the numeric values of the corresponding Char objects in each string.");
	    Console.WriteLine("str1 = '{0}', str2 = '{1}'", str1, str2);
	    result = String.CompareOrdinal(str1, str2);
	    str = ((result < 0) ? "less than" : ((result > 0) ? "greater than" : "equal to"));
	    Console.Write("String '{0}' is ", str1);
	    Console.Write("{0} ", str);
	    Console.WriteLine("String '{0}'.", str2);
	    }
	}
	/*
	This example produces the following results:
	
	Compare the numeric values of the corresponding Char objects in each string.
	str1 = 'ABCD', str2 = 'abcd'
	String 'ABCD' is less than String 'abcd'.
	*/
snippet conceptual_basicio_textfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_basicio_textfiles/file.cs

	using System;
	using System.IO;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	        string text = "First line" + Environment.NewLine;
	
	        string docPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
	
	        File.WriteAllText(Path.Combine(docPath, "WriteFile.txt"), text);
	
	        string[] lines = { "New line 1", "New line 2" };
	
	        File.AppendAllLines(Path.Combine(docPath, "WriteFile.txt"), lines);
	    }
	}

snippet microsoft_visualstudio_data_core_datadefaultobjectattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_DataDefaultObjectAttribute/DataDefaultObjectAttrib.cs

	using System;
	using System.Runtime.InteropServices;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services;
	
	[DataDefaultObject("C58E1B8D-9723-40c8-8B11-9DDAF0B393BA")]
	public interface IVsDataConnectionUIConnector
	{
	    void Connect(IVsDataConnection connection);
	}
	
	[Guid("C58E1B8D-9723-40c8-8B11-9DDAF0B393BA")]
	internal class DefaultConnectionUIConnector
	    : IVsDataConnectionUIConnector,
	      IVsDataDefaultObject
	{
	    public void Connect(IVsDataConnection connection)
	    {
	        if (connection == null)
	        {
	            throw new ArgumentNullException("connection");
	        }
	        connection.Open();
	    }
	}
snippet conceptual_string_basicops

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_string_basicops/padding.cs

	using System;
	
	class Example
	{
	    public static void Main()
	    {
	        PadLeft();
	        PadRight();
	    }
	
	    public static void PadLeft()
	    {
	        string MyString = "Hello World!";
	        Console.WriteLine(MyString.PadLeft(20, '-'));
	    }
	
	    public static void PadRight()
	    {
	        string MyString = "Hello World!";
	        Console.WriteLine(MyString.PadRight(20, '-'));
	    }
	}

snippet projectn

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn/type_makegenerictype1.cs

	using System;
	
	namespace App1
	{
	   public class AppClass<T>
	   {
	      
	      public AppClass()
	      {
	      }
	   }
	}
	
	
	public class Example
	{
	   public static void Main()
	   {
	      var t = Type.GetType("App1.AppClass`1", true);
	      Type[] typeArgs = {typeof(int)};
	      Type t2 = t.MakeGenericType(typeArgs);
	      Activator.CreateInstance(t2);
	      Console.WriteLine(t2.GetType().Name);
	   }
	} 
snippet x509certificate_getpublickeystring_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetPublicKeyString_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string results = cert.GetPublicKeyString();
	       
	        Console.WriteLine(results);
	
	  
	    }
	
	}
snippet listupdates

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/listupdates/program.cs

	using System;
	using Microsoft.Win32;
	
	public class GetUpdateHistory
	{
	    public static void Main()
	    {
	        using (RegistryKey baseKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(@"SOFTWARE\Microsoft\Updates"))
	        {
	            foreach (string baseKeyName in baseKey.GetSubKeyNames())
	            {
	                if (baseKeyName.Contains(".NET Framework"))
	                {
	                    using (RegistryKey updateKey = baseKey.OpenSubKey(baseKeyName))
	                    {
	                        Console.WriteLine(baseKeyName);
	                        foreach (string kbKeyName in updateKey.GetSubKeyNames())
	                        {
	                            using (RegistryKey kbKey = updateKey.OpenSubKey(kbKeyName))
	                            {
	                                Console.WriteLine("  " + kbKeyName);
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }
	} 
snippet conceptual_disposable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_disposable/using3.cs

	using System;
	using System.IO;
	
	public class Example
	{
	   public static void Main()
	   {
	      Char[] buffer = new Char[50];
	      {
	         StreamReader s = new StreamReader("File1.txt"); 
	         try {
	            int charsRead = 0;
	            while (s.Peek() != -1) {
	               charsRead = s.Read(buffer, 0, buffer.Length);
	            }
	         }
	         finally {
	            if (s != null)
	               ((IDisposable)s).Dispose();     
	         }       
	      }
	   }
	}

snippet thread_sleep

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/thread_sleep/example.cs

	using System;
	using System.Threading;
	
	class Example
	{
	    static void Main()
	    {
	        for (int i = 0; i < 5; i++)
	        {
	            Console.WriteLine("Sleep for 2 seconds.");
	            Thread.Sleep(2000);
	        }
	
	        Console.WriteLine("Main thread exits.");
	    }
	}
	
	/* This example produces the following output:
	
	Sleep for 2 seconds.
	Sleep for 2 seconds.
	Sleep for 2 seconds.
	Sleep for 2 seconds.
	Sleep for 2 seconds.
	Main thread exits.
	 */

snippet conceptual_disposable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_disposable/using2.cs

	using System;
	using System.IO;
	
	public class Example
	{
	   public static void Main()
	   {
	      Char[] buffer = new Char[50];
	      StreamReader s = null;
	      try {
	         s = new StreamReader("File1.txt"); 
	         int charsRead = 0;
	         while (s.Peek() != -1) {
	            charsRead = s.Read(buffer, 0, buffer.Length);
	         }
	      }
	      finally {
	         if (s != null)
	            s.Dispose();
	      }
	   }
	}

snippet conceptual_types_viewinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_types_viewinfo/source1.cs

	using System;
	using System.Reflection;
	
	class ListMembers
	{
	    public static void Main()
	    {
	        Type t = typeof(System.String);
	        Console.WriteLine("Listing all the public constructors of the {0} type", t);
	        ConstructorInfo[] ci = t.GetConstructors(BindingFlags.Public | BindingFlags.Instance);
	        PrintMembers(ci);
	    }
	
	    public static void PrintMembers(MemberInfo[] ms)
	    {
	        foreach (MemberInfo m in ms)
	        {
	            Console.WriteLine("{0}{1}", "     ", m);
	        }
	        Console.WriteLine();
	    }
	}

snippet conceptual_string_parse

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_string_parse/parse.cs

	using System;
	
	class StringsParseMethod
	{
	    public static void Main()
	    {
	        string MyString1 = "A";
	        char MyChar = Char.Parse(MyString1);
	
	        string MyString2 = "True";
	        bool MyBool = bool.Parse(MyString2);
	
	        string MyString3 = "Thursday";
	        DayOfWeek MyDays = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), MyString3);
	        Console.WriteLine(MyDays);
	    }
	}

snippet registryvalueoptions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegistryValueOptions/source.cs

	using System;
	using Microsoft.Win32;
	using Microsoft.VisualBasic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Registry.CurrentUser.DeleteSubKey("RegistryValueOptionsExample", false);
	        RegistryKey rk = 
	            Registry.CurrentUser.CreateSubKey("RegistryValueOptionsExample");
	
	        rk.SetValue("ExpandValue", "The path is %PATH%", RegistryValueKind.ExpandString);
	
	        Console.WriteLine("Unexpanded: \"{0}\"", 
	            rk.GetValue("ExpandValue", "No Value", 
	            RegistryValueOptions.DoNotExpandEnvironmentNames));
	        Console.WriteLine("Expanded: \"{0}\"", rk.GetValue("ExpandValue"));
	
	

snippet conceptual_types_members_fields

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_types_members_fields/example.cs

	using System;
	
	public class Constants
	{
	   public const double Pi = 3.1416;
	   public readonly DateTime BirthDate;
	   
	   public Constants(DateTime birthDate)
	   {
	      this.BirthDate = birthDate;
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      Constants con = new Constants(new DateTime(1974, 8, 18));
	      Console.Write(Constants.Pi + "\n");
	      Console.Write(con.BirthDate.ToString("d") + "\n");
	   }
	}

snippet directoryinfocreatesub

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/directoryinfocreatesub/directoryinfocreatesub.cs

	using System;
	using System.IO;
	
	public class CreateSubTest 
	{
	    public static void Main() 
	    {
	        DirectoryInfo di = new DirectoryInfo("TempDir");
	
	        if (di.Exists == false)
	            di.Create();
	
	        DirectoryInfo dis = di.CreateSubdirectory("SubDir");
	
	
	        dis.Delete(true);
	
	        di.Delete(true);
	    }
	}
snippet datetime_daysinmonth

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_DaysInMonth/class1.cs

	using System;
	
	class Example
	{
		static void Main()
		{
			const int July = 7;
			const int Feb = 2;
	
			int daysInJuly = System.DateTime.DaysInMonth(2001, July);
	        Console.WriteLine(daysInJuly);
	        
			int daysInFeb = System.DateTime.DaysInMonth(1998, Feb);
	        Console.WriteLine(daysInFeb);
	        
			int daysInFebLeap = System.DateTime.DaysInMonth(1996, Feb);
			Console.WriteLine(daysInFebLeap);
		}
	}
	

snippet generic_dictionary

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_Dictionary/source2.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Dictionary<string, string> myDictionary =
	            new Dictionary<string, string>();
	
	        myDictionary.Add("txt", "notepad.exe");
	        myDictionary.Add("bmp", "paint.exe");
	        myDictionary.Add("dib", "paint.exe");
	        myDictionary.Add("rtf", "wordpad.exe");
	
	        foreach( KeyValuePair<string, string> kvp in myDictionary )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, kvp.Value);
	        }
	    }
	}
	

snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/capture1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "Miami,78;Chicago,62;New York,67;San Francisco,59;Seattle,58;"; 
	      string pattern = @"((\w+(\s\w+)*),(\d+);)+";
	      Match match = Regex.Match(input, pattern);
	      if (match.Success)
	      {
	         Console.WriteLine("Current temperatures:");
	         for (int ctr = 0; ctr < match.Groups[2].Captures.Count; ctr++)
	            Console.WriteLine("{0,-20} {1,3}", match.Groups[2].Captures[ctr].Value, 
	                              match.Groups[4].Captures[ctr].Value);
	      }
	   }
	}

snippet appdomain_setup

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/source3.cs

	using System;
	using System.Reflection;
	
	class AppDomain5
	{
	    public static void Main()
	    {
	        AppDomainSetup domaininfo = new AppDomainSetup();
	        domaininfo.ApplicationBase = "f:\\work\\development\\latest";
	        domaininfo.ConfigurationFile = "f:\\work\\development\\latest\\appdomain5.exe.config";
	
	        AppDomain domain = AppDomain.CreateDomain("MyDomain", null, domaininfo);
	
	        Console.WriteLine("Host domain: " + AppDomain.CurrentDomain.FriendlyName);
	        Console.WriteLine("Child domain: " + domain.FriendlyName);
	        Console.WriteLine();
	        Console.WriteLine("Application base is: " + domain.SetupInformation.ApplicationBase);
	        Console.WriteLine("Configuration file is: " + domain.SetupInformation.ConfigurationFile);
	
	        AppDomain.Unload(domain);
	    }
	}

snippet codemembermethodexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeMemberMethodExample/codemembermethodexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeMemberMethodExample
	    {
	        public CodeMemberMethodExample()
	        {
	            CodeMemberMethod method1 = new CodeMemberMethod();            
	            method1.Name = "ReturnString";
	            method1.ReturnType = new CodeTypeReference("System.String");
	            method1.Parameters.Add( new CodeParameterDeclarationExpression("System.String", "text") );
	            method1.Statements.Add( new CodeMethodReturnStatement( new CodeArgumentReferenceExpression("text") ) );            
	            
	
	        }
	    }
	}
snippet conceptual_strings_cultureinsensitivecomparison

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_cultureinsensitivecomparison/cultureinsensitive1.cs

	using System;
	
	public class CompareSample
	{
	    public static void Main()
	    {
	        string string1 = "file";
	        string string2 = "FILE";
	        int compareResult = 0;
	        
	        compareResult = String.Compare(string1, string2, 
	                                       StringComparison.Ordinal);
	        Console.WriteLine("{0} comparison of '{1}' and '{2}': {3}", 
	                          StringComparison.Ordinal, string1, string2, 
	                          compareResult); 
	
	        compareResult = String.Compare(string1, string2, 
	                                       StringComparison.OrdinalIgnoreCase);
	        Console.WriteLine("{0} comparison of '{1}' and '{2}': {3}", 
	                          StringComparison.OrdinalIgnoreCase, string1, string2, 
	                          compareResult); 
	    }
	}

snippet assemblyname_constructor_2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyName_Constructor_2/source.cs

	using System;
	using System.Reflection;
	
	public class AssemblyNameDemo
	{
	   public static void Main()
	   {
	      AssemblyName myAssemblyName = 
	         new AssemblyName("Example, Version=1.0.0.2001, Culture=en-US, PublicKeyToken=null");
	      Console.WriteLine("Name: {0}", myAssemblyName.Name);
	      Console.WriteLine("Version: {0}", myAssemblyName.Version);
	      Console.WriteLine("CultureInfo: {0}", myAssemblyName.CultureInfo);
	      Console.WriteLine("FullName: {0}", myAssemblyName.FullName);
	   }
	}
	/* This code example produces output similar to the following:
	
	Name: Example
	Version: 1.0.0.2001
	CultureInfo: en-US
	FullName: Example, Version=1.0.0.2001, Culture=en-US, PublicKeyToken=null
	 */

snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/negativelookbehind1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] dates = { "Monday February 1, 2010", 
	                         "Wednesday February 3, 2010", 
	                         "Saturday February 6, 2010", 
	                         "Sunday February 7, 2010", 
	                         "Monday, February 8, 2010" };
	      string pattern = @"(?<!(Saturday|Sunday) )\b\w+ \d{1,2}, \d{4}\b";
	      
	      foreach (string dateValue in dates)
	      {
	         Match match = Regex.Match(dateValue, pattern);
	         if (match.Success)
	            Console.WriteLine(match.Value);
	      }      
	   }
	}

snippet formatting_dateandtime_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Custom/LiteralsEx2.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      String format = "dd MMM yyyy hh:mm tt p\\s\\t";
	      var dat = new DateTime(2016, 8, 18, 16, 50, 0);
	      Console.WriteLine(dat.ToString(format));
	      
	      String value = "25 Dec 2016 12:00 pm pst";
	      DateTime newDate;
	      if (DateTime.TryParseExact(value, format, null, 
	                                 DateTimeStyles.None, out newDate)) 
	         Console.WriteLine(newDate);
	      else
	         Console.WriteLine("Unable to parse '{0}'", value);
	   }
	}
	

snippet formatting_dateandtime_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Custom/LiteralsEx3.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      String format = "dd MMM yyyy hh:mm tt \"pst\"";
	      var dat = new DateTime(2016, 8, 18, 16, 50, 0);
	      Console.WriteLine(dat.ToString(format));
	      
	      String value = "25 Dec 2016 12:00 pm pst";
	      DateTime newDate;
	      if (DateTime.TryParseExact(value, format, null, 
	                                 DateTimeStyles.None, out newDate)) 
	         Console.WriteLine(newDate);
	      else
	         Console.WriteLine("Unable to parse '{0}'", value);
	   }
	}
	

snippet adgetassemblies

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADGetAssemblies/adgetassemblies.cs

	using System;
	using System.Reflection;
	using System.Security.Policy;
	
	class ADGetAssemblies 
	{
	
		public static void Main() 
		{
			AppDomain currentDomain = AppDomain.CurrentDomain;
			Evidence asEvidence = currentDomain.Evidence;
	
			currentDomain.Load("CustomLibrary",asEvidence);
	
			Assembly[] assems = currentDomain.GetAssemblies();
		
			Console.WriteLine("List of assemblies loaded in current appdomain:");
				foreach (Assembly assem in assems)
					Console.WriteLine(assem.ToString());
		}
	   
	}
snippet type_gettypefromprogid2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID2/type_gettypefromprogid2.cs

	using System;
	class MainApp 
	{
	    public static void Main()
	    {
	        try
	        {
	            string myString1 ="DIRECT.ddPalette.3"; 
	            string myString2 ="WrongProgID"; 
	            Type myType1 =Type.GetTypeFromProgID(myString1,true);
	            Console.WriteLine("GUID for ProgID DirControl.DirList.1 is {0}.", myType1.GUID);
	            Type myType2 =Type.GetTypeFromProgID(myString2,true);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("An exception occurred.");
	            Console.WriteLine("Source: {0}", e.Source);
	            Console.WriteLine("Message: {0}", e.Message);
	        }
	    }
	}

snippet codethrowexceptionstatement

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeThrowExceptionStatement/codethrowexceptionstatementexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeThrowExceptionStatementExample
	    {
	        public CodeThrowExceptionStatementExample()
	        {
	            CodeThrowExceptionStatement throwException = new CodeThrowExceptionStatement( 
	                new CodeObjectCreateExpression(
	                new CodeTypeReference(typeof(System.Exception)),
	                new CodeExpression[] {} ) );
	
	
	        }
	    }
	}
snippet stringconcat1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringconcat1/stringconcat1.cs

	using System;
	
	public class ConcatTest {
	    public static void Main() {
	        Test1 t1 = new Test1();
	        Test2 t2 = new Test2();
	        int i = 16;
	        string s = "Demonstration";
	
	        object [] o = { t1, i, t2, s };
	
	        Console.WriteLine(string.Concat(o));
	    }
	}
	
	class Test1 {
	}
	
	class Test2 {
	}

snippet environment_failfast

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/environment_FailFast/ff.cs

	using System;
	
	class Example
	{
	    public static void Main() 
	    {
	       string causeOfFailure = "A catastrophic failure has occurred.";
	
	       try 
	       {
	           Environment.FailFast(causeOfFailure);
	       }
	       finally 
	       {
	           Console.WriteLine("This finally block will not be executed.");
	       }
	   }
	}
	/*
	The example produces no output because the application is terminated.
	However, an entry is made in the Windows Application event log, and
	the log entry contains the text from the causeOfFailure variable.
	*/

snippet string_comp4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_comp4/string.comp4.cs

	using System;
	using System.Globalization;
	
	class Sample {
	    public static void Main() {
	    String str1 = "change";
	    String str2 = "dollar";
	    String relation = null;
	
	    relation = symbol( String.Compare(str1, str2, false, new CultureInfo("en-US")) );
	    Console.WriteLine("For en-US: {0} {1} {2}", str1, relation, str2);
	
	    relation = symbol( String.Compare(str1, str2, false, new CultureInfo("cs-CZ")) );
	    Console.WriteLine("For cs-CZ: {0} {1} {2}", str1, relation, str2);
	    }
	
	    private static String symbol(int r) {
	    String s = "=";
	    if      (r < 0) s = "<";
	    else if (r > 0) s = ">";
	    return s;
	    }
	}
	/*
	This example produces the following results.
	For en-US: change < dollar
	For cs-CZ: change > dollar
	*/
snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/case2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(?i:t)he\w*\b";
	      string input = "The man then told them about that event.";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("Found {0} at index {1}.", match.Value, match.Index);
	
	      Console.WriteLine();
	      pattern = @"(?i)\bthe\w*\b";
	      foreach (Match match in Regex.Matches(input, pattern, 
	                                            RegexOptions.IgnoreCase))
	         Console.WriteLine("Found {0} at index {1}.", match.Value, match.Index);
	   }
	}

snippet codecommentexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeCommentExample/codecommentexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeCommentExample
	    {
	        public CodeCommentExample()
	        {
	            CodeComment comment = new CodeComment(
	                "This comment was generated from a System.CodeDom.CodeComment",
	                false );
	
	            CodeCommentStatement commentStatement = new CodeCommentStatement( comment );
	
	            
	        }
	    }
	}
snippet stringcompareordinal

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StringCompareOrdinal/stringcompareordinal.cs

	using System;
	using System.Globalization;
	
	class Test 
	{
		public static void Main(String[] args) 
		{
		String strLow = "abc";
		String strCap = "ABC";
		String result = "equal to ";
		int x = 0;
		int pos = 1;
	
		x = String.CompareOrdinal(strLow, pos, strCap, pos, 1);
		if (x < 0) result = "less than";
		if (x > 0) result = "greater than";
		Console.WriteLine("CompareOrdinal(\"{0}\"[{2}], \"{1}\"[{2}]):", strLow, strCap, pos);
		Console.WriteLine("   '{0}' is {1} '{2}'", strLow[pos], result, strCap[pos]);
	
		x = String.Compare(strLow, pos, strCap, pos, 1, false, new CultureInfo("en-US"));
		if (x < 0) result = "less than";
		else if (x > 0) result = "greater than";
		Console.WriteLine("Compare(\"{0}\"[{2}], \"{1}\"[{2}]):", strLow, strCap, pos);
		Console.WriteLine("   '{0}' is {1} '{2}'", strLow[pos], result, strCap[pos]);
		}
	}
snippet fileinfomain

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/fileinfomain/fileinfomain.cs

	using System;
	using System.IO;
	
	public class FileInfoMainTest 
	{
	    public static void Main() 
	    {
	        FileInfo fi = new FileInfo("temp.txt");
	        StreamWriter sw = fi.AppendText();
	        sw.WriteLine("This is a new entry to add to the file");
	        sw.WriteLine("This is yet another line to add...");
	        sw.Flush();
	        sw.Close();
	        StreamReader sr = new StreamReader( fi.OpenRead() );
	        while (sr.Peek() != -1)
	            Console.WriteLine( sr.ReadLine() );
	    }
	}
snippet cocontravarianceinclrgenerici

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cocontravarianceinclrgenerici/example.cs

	using System;
	using System.Collections.Generic;
	
	class Base
	{
	    public static void PrintBases(IEnumerable<Base> bases)
	    {
	        foreach(Base b in bases)
	        {
	            Console.WriteLine(b);
	        }
	    }
	}
	
	class Derived : Base
	{
	    public static void Main()
	    {
	        List<Derived> dlist = new List<Derived>();
	
	        Derived.PrintBases(dlist);
	        IEnumerable<Base> bIEnum = dlist;
	    }
	}
	
	
	

snippet conceptual_isolatedstorage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_isolatedstorage/source11.cs

	using System;
	using System.IO.IsolatedStorage;
	
	class UserAssembly_IsoStorage
	{
	    public static void Main()
	    {
	        SnippetA();
	        SnippetB();
	    }
	
	    public static void SnippetA()
	    {
	        IsolatedStorageFile isoFile =
	            IsolatedStorageFile.GetStore(IsolatedStorageScope.User |
	            IsolatedStorageScope.Assembly, null, null);
	    }
	
	    public static void SnippetB()
	    {
	        IsolatedStorageFile isoFile = IsolatedStorageFile.GetUserStoreForAssembly();
	    }
	}

snippet ecma_system_object_referenceequals

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ECMA_System_Object_ReferenceEquals/referenceequals.cs

	using System;
	
	class MyClass {
	
	   static void Main() {
	      object o = null;
	      object p = null;
	      object q = new Object();
	
	      Console.WriteLine(Object.ReferenceEquals(o, p));
	      p = q;
	      Console.WriteLine(Object.ReferenceEquals(p, q));
	      Console.WriteLine(Object.ReferenceEquals(o, p));
	   }
	}
	
	
	/*
	
	This code produces the following output.
	
	True
	True
	False
	
	*/
	

snippet conceptual_disposable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_disposable/dispose1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}
	
	public class Disposable : IDisposable
	{
	   public void Dispose()
	   {
	      Dispose(true);
	      GC.SuppressFinalize(this);
	   }
	
	   protected virtual void Dispose(bool disposing)
	   {}
	}
	

snippet datetime_tofiletime

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_ToFileTime/class1.cs

	using System;
	
	namespace ToFileTime
	{
		class Class1
		{
			static void Main(string[] args)
			{
				System.Console.WriteLine("Enter the file path:");
				string filePath = System.Console.ReadLine();
	
				if (System.IO.File.Exists(filePath)) {
					System.DateTime fileCreationDateTime = 
						System.IO.File.GetCreationTime(filePath);
	
					long fileCreationFileTime = fileCreationDateTime.ToFileTime();
	
					System.Console.WriteLine("{0} in file time is {1}.",
											 fileCreationDateTime,
											 fileCreationFileTime);
				} 
				else {
					System.Console.WriteLine("{0} is an invalid file", filePath);
				}
			}
		}
	}

snippet datetime_equals

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_Equals/class1.cs

	using System;
	
	namespace Equals
	{
		class Class1
		{
			static void Main(string[] args)
			{
				System.DateTime today1 = 
						new System.DateTime(System.DateTime.Today.Ticks);
				System.DateTime today2 = 
						new System.DateTime(System.DateTime.Today.Ticks);
				System.DateTime tomorrow = 
						new System.DateTime(
									System.DateTime.Today.AddDays(1).Ticks);
	
				bool todayEqualsToday = System.DateTime.Equals(today1, today2);
	
				bool todayEqualsTomorrow = System.DateTime.Equals(today1, tomorrow);
	
				System.Console.WriteLine(todayEqualsToday);
				System.Console.WriteLine(todayEqualsTomorrow);
			}
		}
	}

snippet x509certificate_getrawcertdatastring_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetRawCertDataString_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string results = cert.GetRawCertDataString();
	       
	        Console.WriteLine(results);
	
	
	  
	    }
	
	}
snippet x509certificate_getserialnumberstring_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetSerialNumberString_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string results = cert.GetSerialNumberString();
	       
	        Console.WriteLine(results);
	
	
	  
	    }
	
	}
snippet runtime_interopservices_marshal_getiunknownforobject_release

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_GetIUnknownForObject_release/example.cs

	using System;
	using System.Runtime.InteropServices;
	
	class Program
	{
	
	    static void Run()
	    {
	
	        int obj = 1;
	
	        Console.WriteLine("Calling Marshal.GetIUnknownForObject...");
	
	        IntPtr pointer = Marshal.GetIUnknownForObject(obj);
	
	        Console.WriteLine("Calling Marshal.Release...");
	
	        Marshal.Release(pointer);
	    }
	
	    static void Main(string[] args)
	    {
	        Run();
	    }
	}
snippet runtime_interopservices_marshal_getiunknownforobjectincontext_release

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_GetIUnknownForObjectInContext_release/example.cs

	using System;
	using System.Runtime.InteropServices;
	
	class Program
	{
	
	    static void Run()
	    {
	
	        int obj = 1;
	
	        Console.WriteLine("Calling Marshal.GetIUnknownForObjectInContext...");
	
	        IntPtr pointer = Marshal.GetIUnknownForObjectInContext(obj);
	
	        Console.WriteLine("Calling Marshal.Release...");
	
	        Marshal.Release(pointer);
	    }
	
	    static void Main(string[] args)
	    {
	        Run();
	    }
	}
snippet perfcounter_ccd

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PerfCounter_ccd/ccd.cs

	using System;
	using System.Diagnostics;
	
	public class Snippet
	{
	    public static void Main()
	    {
	
	        if (!PerformanceCounterCategory.Exists("Orders"))
	        {
	            CounterCreationData milk = new CounterCreationData();
	            milk.CounterName = "milk";
	            milk.CounterType = PerformanceCounterType.NumberOfItems32;
	
	            CounterCreationData milkPerSecond = new CounterCreationData();
	            milkPerSecond.CounterName = "milk orders/second";
	            milkPerSecond.CounterType = PerformanceCounterType.RateOfCountsPerSecond32;
	
	            CounterCreationDataCollection ccds = new CounterCreationDataCollection();
	            ccds.Add(milkPerSecond);
	            ccds.Add(milk);
	
	            PerformanceCounterCategory.Create("Orders", "Number of processed orders",
	                PerformanceCounterCategoryType.SingleInstance, ccds);
	
	        }
	    }
	} 
snippet throwunobservedtaskexceptions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/throwunobservedtaskexceptions/program.cs

	using System;
	using System.Threading;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	
	
	public class Example
	{
	    static void Main()
	    {
	        Task.Run(() => { throw new InvalidOperationException("test"); });
	        while (true)
	        {
	            Thread.Sleep(100);
	            GC.Collect();
	            GC.WaitForPendingFinalizers();
	        }
	    }
	}
snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/box2.cs

	using System;
	
	[assembly:CLSCompliant(true)]
	
	public unsafe class TestClass
	{
	   private int* val;
	   
	   public TestClass(int number)
	   {
	      val = (int*) number;
	   }
	
	   public int* Value {
	      get { return val; }        
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	   }
	}

snippet microsoft_visualstudio_data_core_ivsdatasourcespecializer

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSourceSpecializer/IVsDataSourceSpecializer4.cs

	using System;
	using System.Reflection;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Framework;
	
	public class MySourceSpecializer4 : DataSourceSpecializer
	{
	    private static readonly Guid s_dataSource1 =
	        new Guid("EB5246D3-277C-4277-910F-111CB9EAD253");
	    private static readonly Guid s_dataSource2 =
	        new Guid("1EC8B196-7155-4d5a-BBDC-0CC47D631E52");
	
	    public override Assembly GetAssembly(Guid source, string assemblyString)
	    {
	        if (source == s_dataSource1)
	        {
	            return Assembly.Load("AssemblyForDataSource1");
	        }
	        else if (source == s_dataSource2)
	        {
	            return Assembly.Load("AssemblyForDataSource2");
	        }
	        else
	        {
	            return base.GetAssembly(source, assemblyString);
	        }
	    }
	}
snippet modifyingexprtrees

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ModifyingExprTrees/AndAlsoModifier.cs

	using System;
	using System.Linq.Expressions;
	
	namespace ModifyingExprTrees
	{
	    public class AndAlsoModifier : ExpressionVisitor
	    {
	        public Expression Modify(Expression expression)
	        {
	            return Visit(expression);
	        }
	
	        protected override Expression VisitBinary(BinaryExpression b)
	        {
	            if (b.NodeType == ExpressionType.AndAlso)
	            {
	                Expression left = this.Visit(b.Left);
	                Expression right = this.Visit(b.Right);
	
	                return Expression.MakeBinary(ExpressionType.OrElse, left, right, b.IsLiftedToNull, b.Method);
	            }
	
	            return base.VisitBinary(b);
	        }
	    }
	}

snippet conceptual_regularexpressions_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_bestpractices/backtrack2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "This this word Sentence name Capital";
	      string pattern = @"\b\p{Lu}\w*\b";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(match.Value);
	
	      Console.WriteLine();
	      
	      pattern = @"\b\p{Lu}(?>\w*)\b";   
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(match.Value);
	   }
	}

snippet conceptual_attributes_usage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_attributes_usage/source1.cs

	using System;
	using System.Reflection;
	[assembly:AssemblyTitle("My Assembly")]
	
	public class Example
	{
	    [Obsolete("Will be removed in next version.")]
	    public static int Add(int a, int b)
	    {
	        return (a + b);
	    }
	}
	
	class Test
	{
	    public static void Main()
	    {
	        int i = Example.Add(2, 2);
	    }
	}

snippet dirinfo_getdirs2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DirInfo_GetDirs2/dirinfo_getdirs2.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            DirectoryInfo di = new DirectoryInfo(@"c:\");
	
	            DirectoryInfo[] dirs = di.GetDirectories("*p*");
	            Console.WriteLine("The number of directories containing the letter p is {0}.", dirs.Length);
	
	            foreach (DirectoryInfo diNext in dirs) 
	            {
	                Console.WriteLine("The number of files in {0} is {1}", diNext, 
	                    diNext.GetFiles().Length);
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet interop_inoutparameters

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Interop_InOutParameters/inout.cs

	using System.Runtime.InteropServices;
	using System;
	
	
	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
	public class OpenFileName
	{
	    public int structSize = 0;
	    public string filter = null;
	    public string file = null;
	}
	
	public class LibWrap
	{
	    [DllImport("Comdlg32.dll", CharSet = CharSet.Unicode)]
	    public static extern bool GetOpenFileName([In, Out] OpenFileName ofn);
	}
	
	public class MainMethod
	{
	    static void Main()
	    { }
	
	}

snippet adgetdata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADGetData/adgetdata.cs

	using System;
	using System.Reflection;
	
	class ADGetData 
	{
	    public static void Main() 
	    {
	        AppDomain currentDomain = AppDomain.CurrentDomain;
	
	        currentDomain.SetData("ADVALUE", "Example value");
	
	        Console.WriteLine("ADVALUE is: " + currentDomain.GetData("ADVALUE"));
	
	        Console.WriteLine("System value for loader optimization: {0}",
	            currentDomain.GetData("LOADER_OPTIMIZATION"));
	    }
	}
	
	/* This code example produces the following output:
	
	ADVALUE is: Example value
	System value for loader optimization: NotSpecified
	 */
	
snippet conceptual_asyncinterop

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_AsyncInterop/Wait1.cs

	using System;
	using System.Threading;
	using System.Threading.Tasks;
	
	public static class Example
	{
	    public static Task WaitOneAsync(this WaitHandle waitHandle)
	    {
	        if (waitHandle == null) 
	            throw new ArgumentNullException("waitHandle");
	    
	        var tcs = new TaskCompletionSource<bool>();
	        var rwh = ThreadPool.RegisterWaitForSingleObject(waitHandle, 
	            delegate { tcs.TrySetResult(true); }, null, -1, true);
	        var t = tcs.Task;
	        t.ContinueWith( (antecedent) => rwh.Unregister(null));
	        return t;
	    }
	   
	   public static void MethodA()
	   {
	     var task = Task.Run( () => { Thread.Sleep(1000); } );
	     WaitHandle wh = ((IAsyncResult)task).AsyncWaitHandle;
	   }
	}

snippet typeloadexception_constructor2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeLoadException_Constructor2/typeloadexception_constructor2.cs

	using System;
	
	public class Example
	{
	   public static void Main() 
	   {
	      try {
	         TypeLoadExceptionDemoClass.GenerateException();
	      }  
	      catch (TypeLoadException e) {
	         Console.WriteLine("TypeLoadException:\n   {0}", e.Message);
	      }
	   }
	}
	
	class TypeLoadExceptionDemoClass
	{ 
	   public static bool GenerateException() 
	   {
	      throw new TypeLoadException("This is a custom TypeLoadException error message.");
	   }
	}

snippet adtostring

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADToString/adtostring.cs

	using System;
	using System.Reflection;
	using System.Security.Policy;
	class ADSetup
	{
		public static void Main()
		{
			AppDomainSetup domaininfo = new AppDomainSetup();
			
			Evidence adevidence = AppDomain.CurrentDomain.Evidence;
	
			AppDomain domain = AppDomain.CreateDomain("MyDomain", adevidence, domaininfo);
	
			Console.WriteLine("Host domain: " + AppDomain.CurrentDomain.FriendlyName);
			Console.WriteLine("child domain: " + domain.FriendlyName);
			Console.WriteLine("child domain name using ToString:" + domain.ToString());
			Console.WriteLine();
			
			AppDomain.Unload(domain);
		
		}
		
	}

snippet conceptual_types_viewinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_types_viewinfo/source6.cs

	using System;
	using System.Reflection;
	
	class Asminfo1
	{
	    public static void Main()
	    {
	        Console.WriteLine ("\nReflection.MemberInfo");
	
	        Type MyType = Type.GetType("System.IO.BinaryReader");
	        MemberInfo[] Mymemberinfoarray = MyType.GetMembers(BindingFlags.Public |
	            BindingFlags.NonPublic | BindingFlags.Static |
	            BindingFlags.Instance | BindingFlags.DeclaredOnly);
	
	        Console.Write("\nThere are {0} documentable members in ", Mymemberinfoarray.Length);
	        Console.Write("{0}.", MyType.FullName);
	
	        foreach (MemberInfo Mymemberinfo in Mymemberinfoarray)
	        {
	            Console.Write("\n" + Mymemberinfo.Name);
	        }
	    }
	}

snippet type_isserializable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsSerializable/type_isserializable.cs

	using System;
	namespace SystemType
	{
	    public class MyClass
	    {
	        [Serializable] public class MyTestClass 
	        {
	        }
	        public static void Main(string []args)
	        {
	            try
	            {
	                bool myBool = false;
	                MyTestClass myTestClassInstance = new MyTestClass();
	                Type myType = myTestClassInstance.GetType();
	                myBool = myType.IsSerializable;
	                Console.WriteLine("\nIs {0} serializable? {1}.", myType.FullName, myBool.ToString());
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine("\nAn exception occurred: {0}", e.Message);
	            }
	        }
	    }
	}
snippet type_gettypefromprogid3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID3/type_gettypefromprogid3.cs

	using System;
	class MainApp 
	{
	    public static void Main()
	    {
	        try
	        {
	            string theProgramID ="DirControl.DirList.1"; 
	            string theServer="localhost";
	            Type myType =Type.GetTypeFromProgID(theProgramID,theServer);
	            if(myType==null)
	            {
	                throw new Exception("Invalid ProgID or Server.");
	            }
	            Console.WriteLine("GUID for ProgID DirControl.DirList.1 is {0}.", myType.GUID);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("An exception occurred.");
	            Console.WriteLine("Source: {0}" , e.Source);
	            Console.WriteLine("Message: {0}" , e.Message);
	        }		
	    }
	}

snippet conceptual_stringreader

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_stringreader/source.cs

	using System;
	using System.IO;
	
	public class CharsFromStr
	{
	    public static void Main()
	    {
	        string str = "Some number of characters";
	        char[] b = new char[str.Length];
	
	        using (StringReader sr = new StringReader(str))
	        {
	            sr.Read(b, 0, 13);
	            Console.WriteLine(b);
	
	            sr.Read(b, 5, str.Length - 13);
	            Console.WriteLine(b);
	        }
	    }
	}

snippet conceptual_regex_language_substitutions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_substitutions/after1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "aa1bb2cc3dd4ee5";
	      string pattern = @"\d+";
	      string substitution = "$'";
	      Console.WriteLine("Matches:");
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("   {0} at position {1}", match.Value, match.Index);
	      Console.WriteLine("Input string:  {0}", input);
	      Console.WriteLine("Output string: " + 
	                        Regex.Replace(input, pattern, substitution));
	   }
	}

snippet formatting_dateandtime_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Custom/LiteralsEx1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      String[] formats = { "dd MMM yyyy hh:mm tt PST", 
	                           "dd MMM yyyy hh:mm tt PDT" };
	      var dat = new DateTime(2016, 8, 18, 16, 50, 0);
	      Console.WriteLine(dat.ToString(formats[1]));
	      
	      String value = "25 Dec 2016 12:00 pm PST";
	      DateTime newDate;
	      if (DateTime.TryParseExact(value, formats, null, 
	                                 DateTimeStyles.None, out newDate)) 
	         Console.WriteLine(newDate);
	      else
	         Console.WriteLine("Unable to parse '{0}'", value);
	   }
	}
	

snippet fieldinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldInfo/fieldinfo.cs

	using System;
	using System.Reflection;
	
	public class FieldInfoClass
	{
	    public int myField1 = 0;
	    protected string myField2 = null;
	    public static void Main()
	    {
	        FieldInfo[] myFieldInfo;
	        Type myType = typeof(FieldInfoClass);
	        myFieldInfo = myType.GetFields(BindingFlags.NonPublic | BindingFlags.Instance
	            | BindingFlags.Public);
	        Console.WriteLine("\nThe fields of " + 
	            "FieldInfoClass are \n");
	        for(int i = 0; i < myFieldInfo.Length; i++)
	        {
	            Console.WriteLine("\nName            : {0}", myFieldInfo[i].Name);
	            Console.WriteLine("Declaring Type  : {0}", myFieldInfo[i].DeclaringType);
	            Console.WriteLine("IsPublic        : {0}", myFieldInfo[i].IsPublic);
	            Console.WriteLine("MemberType      : {0}", myFieldInfo[i].MemberType);
	            Console.WriteLine("FieldType       : {0}", myFieldInfo[i].FieldType);
	            Console.WriteLine("IsFamily        : {0}", myFieldInfo[i].IsFamily);
	        }
	    }
	}

snippet ecma_system_object_gettype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ECMA_System_Object_GetType/gettype.cs

	using System;
	
	public class MyBaseClass {
	}
	
	public class MyDerivedClass: MyBaseClass {
	}
	
	public class Test 
	{
	   public static void Main() 
	   {
	      MyBaseClass myBase = new MyBaseClass();
	      MyDerivedClass myDerived = new MyDerivedClass();
	      object o = myDerived;
	      MyBaseClass b = myDerived;
	
	      Console.WriteLine("mybase: Type is {0}", myBase.GetType());
	      Console.WriteLine("myDerived: Type is {0}", myDerived.GetType());
	      Console.WriteLine("object o = myDerived: Type is {0}", o.GetType());
	      Console.WriteLine("MyBaseClass b = myDerived: Type is {0}", b.GetType());
	   }
	}

snippet improvedinteropsnippets

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ImprovedInteropSnippets/codefile3.cs

	using System;
	using System.Reflection;
	using System.Runtime.InteropServices;
	
	namespace A
	{
		class ClassA
		{
			public static bool IsCOMAssembly( Assembly a )
			{
				object[] AsmAttributes = a.GetCustomAttributes( typeof( ImportedFromTypeLibAttribute ), true );
				if( AsmAttributes.Length > 0 )
				{
					ImportedFromTypeLibAttribute imptlb = ( ImportedFromTypeLibAttribute )AsmAttributes[0];
					string strImportedFrom  = imptlb.Value;
					    
					Console.WriteLine( "Assembly " + a.FullName + " is imported from " + strImportedFrom );
				
					return true;
				}  
				Console.WriteLine( "Assembly " + a.FullName + " is not imported from COM" );
				return false;
			}
		}
	}
snippet regularexpressions_language_alternation

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_alternation/alternation1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern1 = @"\bgr[ae]y\b";
	      string pattern2 = @"\bgr(a|e)y\b";
	      
	      string input = "The gray wolf blended in among the grey rocks.";
	      foreach (Match match in Regex.Matches(input, pattern1))
	         Console.WriteLine("'{0}' found at position {1}", 
	                           match.Value, match.Index);
	      Console.WriteLine();
	      foreach (Match match in Regex.Matches(input, pattern2))
	         Console.WriteLine("'{0}' found at position {1}", 
	                           match.Value, match.Index);
	   }
	}

snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/lookahead1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b\w+(?=\sis\b)";
	      string[] inputs = { "The dog is a Malamute.", 
	                          "The island has beautiful birds.", 
	                          "The pitch missed home plate.", 
	                          "Sunday is a weekend day." };
	
	      foreach (string input in inputs)
	      {
	         Match match = Regex.Match(input, pattern);
	         if (match.Success)
	            Console.WriteLine("'{0}' precedes 'is'.", match.Value);
	         else
	            Console.WriteLine("'{0}' does not match the pattern.", input); 
	      }
	   }
	}

snippet formatting_dateandtime_standard

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Standard/o1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	       DateTime dat = new DateTime(2009, 6, 15, 13, 45, 30, 
	                                   DateTimeKind.Unspecified);
	       Console.WriteLine("{0} ({1}) --> {0:O}", dat, dat.Kind); 
	   
	       DateTime uDat = new DateTime(2009, 6, 15, 13, 45, 30, 
	                                    DateTimeKind.Utc);
	       Console.WriteLine("{0} ({1}) --> {0:O}", uDat, uDat.Kind);
	       
	       DateTime lDat = new DateTime(2009, 6, 15, 13, 45, 30, 
	                                    DateTimeKind.Local);
	       Console.WriteLine("{0} ({1}) --> {0:O}\n", lDat, lDat.Kind);
	       
	       DateTimeOffset dto = new DateTimeOffset(lDat);
	       Console.WriteLine("{0} --> {0:O}", dto);
	   }
	}

snippet formatting_numeric_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/formatting_numeric_custom/escape1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      int value = 123;
	      Console.WriteLine(value.ToString("\\#\\#\\# ##0 dollars and \\0\\0 cents \\#\\#\\#"));
	      Console.WriteLine(String.Format("{0:\\#\\#\\# ##0 dollars and \\0\\0 cents \\#\\#\\#}",
	                                      value));
	      
	      Console.WriteLine(value.ToString(@"\#\#\# ##0 dollars and \0\0 cents \#\#\#"));
	      Console.WriteLine(String.Format(@"{0:\#\#\# ##0 dollars and \0\0 cents \#\#\#}",
	                                      value));
	
	      Console.WriteLine(value.ToString("\\\\\\\\\\\\ ##0 dollars and \\0\\0 cents \\\\\\\\\\\\"));
	      Console.WriteLine(String.Format("{0:\\\\\\\\\\\\ ##0 dollars and \\0\\0 cents \\\\\\\\\\\\}",
	                                      value));
	      
	      Console.WriteLine(value.ToString(@"\\\\\\ ##0 dollars and \0\0 cents \\\\\\"));
	      Console.WriteLine(String.Format(@"{0:\\\\\\ ##0 dollars and \0\0 cents \\\\\\}",
	                                      value));
	   }
	}

snippet conceptual_isolatedstorage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_isolatedstorage/source10.cs

	using System;
	using System.IO.IsolatedStorage;
	
	class UserDomainAssembly_IsoStorage
	{
	    public static void Main()
	    {
	        SnippetA();
	        SnippetB();
	    }
	
	    public static void SnippetA()
	    {
	        IsolatedStorageFile isoFile =
	            IsolatedStorageFile.GetStore(IsolatedStorageScope.User |
	                IsolatedStorageScope.Domain |
	                IsolatedStorageScope.Assembly, null, null);
	    }
	
	    public static void SnippetB()
	    {
	        IsolatedStorageFile isoFile = IsolatedStorageFile.GetUserStoreForDomain();
	    }
	}

snippet conceptual_resources_retrieving

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_retrieving/ctor1.cs

	using System;
	using System.Resources;
	
	public class Example
	{
	   public static void Main()
	   {
	      CallCtor1();
	      CallCtor2();
	   }
	
	   static void CallCtor1()
	   {
	      ResourceManager rm = new ResourceManager("MyCompany.StringResources", 
	                                               typeof(Example).Assembly);
	   }
	
	   static void CallCtor2()
	   {
	      ResourceManager rm = new ResourceManager(typeof(MyCompany.StringResources));
	   }
	}
	
	namespace MyCompany
	{
	   class StringResources {}
	} 
snippet conceptual_assembly_multifile

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_assembly_multifile/client.cs

	using System;
	using myStringer;
	
	class MainClientApp
	{
	    public static void Main()
	    {
	        Stringer myStringInstance = new Stringer();
	        Console.WriteLine("Client code executes");
	        myStringInstance.StringerMethod();
	    }
	}
	
	#if false
	csc /addmodule:Stringer.netmodule /t:module Client.cs
	
	csc /t:module Stringer.cs
	csc Client.cs /addmodule:Stringer.netmodule
	
	csc /out:Client.exe Client.cs /out:Stringer.netmodule Stringer.cs
	#endif

snippet conceptual_asyncinterop

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_AsyncInterop/APM1.cs

	using System;
	using System.Threading.Tasks;
	
	public static class Example
	{
	    public static IAsyncResult AsApm<T>(this Task<T> task, 
	                                        AsyncCallback callback, 
	                                        object state)
	    {
	        if (task == null) 
	            throw new ArgumentNullException("task");
	        
	        var tcs = new TaskCompletionSource<T>(state);
	        task.ContinueWith(t => 
	                          {
	                             if (t.IsFaulted) 
	                                tcs.TrySetException(t.Exception.InnerExceptions);
	                             else if (t.IsCanceled)    
	                                tcs.TrySetCanceled();
	                             else 
	                                tcs.TrySetResult(t.Result);
	    
	                             if (callback != null) 
	                                callback(tcs.Task);
	                          }, TaskScheduler.Default);
	        return tcs.Task;
	    }
	}

snippet catchexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CatchException/catchexception.cs

	using System;
	
	class ExceptionTestClass 
	{
	   public static void Main() 
	   {
	      int x = 0;
	      try 
	      {
	         int y = 100 / x;
	      }
	      catch (ArithmeticException e) 
	      {
	         Console.WriteLine($"ArithmeticException Handler: {e}");
	      }
	      catch (Exception e) 
	      {
	         Console.WriteLine($"Generic Exception Handler: {e}");
	      }
	   }	
	}
	/*
	This code example produces the following results:
	
	ArithmeticException Handler: System.DivideByZeroException: Attempted to divide by zero.
	   at ExceptionTestClass.Main()
	
	*/

snippet x509certificate_getpublickey_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetPublicKey_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        byte[] results = cert.GetPublicKey();
	       
	        foreach(byte b in results)
	        {
	            Console.Write(b);
	        }
	  
	    }
	
	}
snippet x509certificate_getkeyalgorithmparameters_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetKeyAlgorithmParameters_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        byte[] results = cert.GetKeyAlgorithmParameters();
	       
	        foreach(byte b in results)
	        {
	            Console.Write(b);
	        }
	  
	    }
	
	}
snippet type_defaultbinder

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_DefaultBinder/type_defaultbinder.cs

	using System;
	using System.Reflection;
	
	public class MyDefaultBinderSample
	{
	    public static void Main()
	    {
	        try
	        {
	            Binder defaultBinder = Type.DefaultBinder;
	            MyClass myClass = new MyClass();
	            myClass.GetType().InvokeMember("HelloWorld", BindingFlags.InvokeMethod,
	                defaultBinder, myClass, new object [] {});
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception :" + e.Message);
	        }
	    }	
	
	    class MyClass
	    {
	        public void HelloWorld()
	        {
	            Console.WriteLine("Hello World");
	        }	
	    }
	}
snippet type_getarrayrank

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetArrayRank/type_getarrayrank.cs

	using System;
	
	class MyArrayRankSample
	{
	    public static void Main()
	    {
	        try
	        {
	            int[,,] myArray = new int[,,] {{{12,2,35},{300,78,33}},{{92,42,135},{30,7,3}}};
	            Type myType = myArray.GetType();
	
	            Console.WriteLine("Contents of myArray: {{{12,2,35},{300,78,33}},{{92,42,135},{30,7,3}}}");
	            Console.WriteLine("myArray has {0} dimensions.", myType.GetArrayRank());
	        }
	        catch(NotSupportedException e)
	        {
	            Console.WriteLine("NotSupportedException raised.");
	            Console.WriteLine("Source: " + e.Source);
	            Console.WriteLine("Message: " + e.Message);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception raised.");
	            Console.WriteLine("Source: " + e.Source);
	            Console.WriteLine("Message: " + e.Message);
	        }      
	    }
	}

snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/overrides1.cs

	using System;
	
	public class Temperature
	{
	   private decimal temp;
	   
	   public Temperature(decimal temperature)
	   {
	      this.temp = temperature;   
	   }
	
	   public override string ToString()
	   {
	      return this.temp.ToString("N1") + "°C";
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      Temperature currentTemperature = new Temperature(23.6m);
	      Console.WriteLine("The current temperature is " +
	                        currentTemperature.ToString());
	   }
	}

snippet modifyingexprtrees

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ModifyingExprTrees/ModifyExpressionTree.cs

	using System;
	using System.Linq.Expressions;
	
	namespace ModifyingExprTrees
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            Expression<Func<string, bool>> expr = name => name.Length > 10 && name.StartsWith("G");
	            Console.WriteLine(expr);
	
	            AndAlsoModifier treeModifier = new AndAlsoModifier();
	            Expression modifiedExpr = treeModifier.Modify((Expression) expr);
	
	            Console.WriteLine(modifiedExpr);
	
	            /*  This code produces the following output:
	                
	                name => ((name.Length > 10) && name.StartsWith("G"))
	                name => ((name.Length > 10) || name.StartsWith("G"))
	            */
	
	
	            Console.ReadLine();
	        }
	    }
	}

snippet catchexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CatchException/catchexception2.cs

	using System;
	using System.IO;
	
	public class ProcessFile
	{
	    public static void Main()
	    {
	        try
	        {
	            using (StreamReader sr = File.OpenText("data.txt"))
	            {
	                Console.WriteLine($"The first line of this file is {sr.ReadLine()}");
	            }
	        }
	        catch (FileNotFoundException e)
	        {
	            Console.WriteLine($"The file was not found: '{e}'");
	        }
	        catch (DirectoryNotFoundException e)
	        {
	            Console.WriteLine($"The directory was not found: '{e}'");
	        }
	        catch (IOException e)
	        {
	            Console.WriteLine($"The file could not be opened: '{e}'");
	        }
	    }
	}

snippet cryptowalkthru/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CryptoWalkThru/Properties/Settings.Designer.cs

	
	namespace CryptoWalkThru.Properties
	{
	
	
	    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
	    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "8.0.0.0")]
	    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
	    {
	
	        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
	
	        public static Settings Default
	        {
	            get
	            {
	                return defaultInstance;
	            }
	        }
	    }
	}

snippet thread_sleep_timespan

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/thread_sleep_timespan/example.cs

	using System;
	using System.Threading;
	
	class Example
	{
	    static void Main()
	    {
	        TimeSpan interval = new TimeSpan(0, 0, 2);
	
	        for (int i = 0; i < 5; i++)
	        {
	            Console.WriteLine("Sleep for 2 seconds.");
	            Thread.Sleep(interval);
	        }
	
	        Console.WriteLine("Main thread exits.");
	    }
	}
	
	/* This example produces the following output:
	
	Sleep for 2 seconds.
	Sleep for 2 seconds.
	Sleep for 2 seconds.
	Sleep for 2 seconds.
	Sleep for 2 seconds.
	Main thread exits.
	 */

snippet fstream_canwrite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FStream_CanWrite/fstream_canwrite.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        File.SetAttributes(path, File.GetAttributes(path) | FileAttributes.ReadOnly);
	
	        using (FileStream fs = new FileStream (path, FileMode.OpenOrCreate, FileAccess.Read)) 
	        {
	            if (fs.CanWrite) 
	            {
	                Console.WriteLine("The stream for file {0} is writable.", path);
	            } 
	            else 
	            {
	                Console.WriteLine("The stream for file {0} is not writable.", path);
	            }
	        }
	    }
	}

snippet projectn

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn/makegenericmethod1.cs

	using System;
	using System.Reflection;
	
	public class Example
	{
	   public static void Main()
	   {
	      Type ct = typeof(Class1);
	      MethodInfo mi = ct.GetMethod("GetMethod");
	      Type[] typeArgs = {typeof(int)};
	      object[] parameters = { 12 };
	      var method = mi.MakeGenericMethod(typeArgs);
	      Class1 c = new Class1();
	      method.Invoke(c, parameters);
	   }
	}
	
	public class Class1
	{
	   public void GetMethod<T>(T t)
	   {
	      if (t == null) {
	         Console.WriteLine("t is null!");
	         return;
	      }   
	      Console.WriteLine(t.GetType().Name);
	      Console.WriteLine("The value is {0}", t);
	   }
	} 
snippet dirinfo_delete1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DirInfo_Delete1/dirinfo_delete1.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        DirectoryInfo di1 = new DirectoryInfo(@"c:\MyDir");
	
	        try 
	        {
	            di1.Create();
	            di1.CreateSubdirectory("temp");
	
	            Console.WriteLine("I am about to attempt to delete {0}", di1.Name);
	            di1.Delete();
	            Console.WriteLine("The Delete operation was successful, which was unexpected.");
	        } 
	        catch (Exception) 
	        {
	            Console.WriteLine("The Delete operation failed as expected.");
	        } 
	        finally {}
	    }
	}

snippet conceptual_regularexpressions_backtracking

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_backtracking/backtracking6.cs

	using System;
	using System.Diagnostics;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "aaaaaaaaaaaaaaaaaaaaaa.";
	      bool result;
	      Stopwatch sw;
	      
	      string pattern = @"^(([A-Z]\w*)+\.)*[A-Z]\w*$";
	      sw = Stopwatch.StartNew();
	      result = Regex.IsMatch(input, pattern, RegexOptions.IgnoreCase);
	      sw.Stop();
	      Console.WriteLine("{0} in {1}", result, sw.Elapsed);
	
	      string aheadPattern = @"^((?=[A-Z])\w+\.)*[A-Z]\w*$";
	      sw = Stopwatch.StartNew();
	      result = Regex.IsMatch(input, aheadPattern, RegexOptions.IgnoreCase);
	      sw.Stop();
	      Console.WriteLine("{0} in {1}", result, sw.Elapsed);
	   }
	}

snippet sys_glob_nfi_nativedigits

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_NFI_nativeDigits/nd.cs

	
	using System;
	using System.Globalization;
	using System.Threading;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    CultureInfo currentCI = Thread.CurrentThread.CurrentCulture;
	    NumberFormatInfo nfi = currentCI.NumberFormat;
	    string[] nativeDigitList = nfi.NativeDigits;
	
	    Console.WriteLine("The native digits for the {0} culture are:", currentCI.Name);
	    foreach (string s in nativeDigitList)
	        {
	        Console.Write("\"{0}\" ", s);
	        }
	    Console.WriteLine();
	    }
	}
	/*
	This code example produces the following results:
	
	The native digits for the en-US culture are:
	"0" "1" "2" "3" "4" "5" "6" "7" "8" "9"
	
	*/
snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/accessibility3.cs

	using System;
	using System.Text;
	
	public class StringWrapper
	{
	   string internalString;
	   StringBuilder internalSB = null;
	   bool useSB = false;
	   
	   public StringWrapper(StringOperationType type)
	   {   
	      if (type == StringOperationType.Normal) {
	         useSB = false;
	      }   
	      else {
	         useSB = true;
	         internalSB = new StringBuilder();
	      }    
	   }
	   
	}
	
	internal enum StringOperationType { Normal, Dynamic }

snippet string_isnullorempty

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_isNullOrEmpty/inoe.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string s1 = "abcd";
	    string s2 = "";
	    string s3 = null;
	
	    Console.WriteLine("String s1 {0}.", Test(s1));
	    Console.WriteLine("String s2 {0}.", Test(s2));
	    Console.WriteLine("String s3 {0}.", Test(s3));
	
	    String Test(string s)
	    {
	    if (String.IsNullOrEmpty(s)) 
	        return "is null or empty";
	    else
	        return String.Format("(\"{0}\") is neither null nor empty", s);
	    }
	
	    }
	}

snippet formatting_composite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_Composite/alignment1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] names = { "Adam", "Bridgette", "Carla", "Daniel",
	                         "Ebenezer", "Francine", "George" };
	      decimal[] hours = { 40, 6.667m, 40.39m, 82, 40.333m, 80,
	                                 16.75m };
	
	      Console.WriteLine("{0,-20} {1,5}\n", "Name", "Hours");
	      for (int ctr = 0; ctr < names.Length; ctr++)
	         Console.WriteLine("{0,-20} {1,5:N1}", names[ctr], hours[ctr]);
	
	   }
	}
	

snippet conceptual_regularexpressions_backtracking

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_backtracking/backtracking5.cs

	using System;
	using System.Diagnostics;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      Stopwatch sw;
	      string input = "test@contoso.com";
	      bool result;
	      
	      string pattern = @"^[0-9A-Z]([-.\w]*[0-9A-Z])?@";
	      sw = Stopwatch.StartNew();
	      result = Regex.IsMatch(input, pattern, RegexOptions.IgnoreCase);
	      sw.Stop();
	      Console.WriteLine("Match: {0} in {1}", result, sw.Elapsed);
	      
	      string behindPattern = @"^[0-9A-Z][-.\w]*(?<=[0-9A-Z])@";
	      sw = Stopwatch.StartNew();
	      result = Regex.IsMatch(input, behindPattern, RegexOptions.IgnoreCase);
	      sw.Stop();
	      Console.WriteLine("Match with Lookbehind: {0} in {1}", result, sw.Elapsed);
	   }
	}

snippet conceptual_timespan_standard

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_standard/parseexample1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      string value = "1.03:14:56.1667";
	      TimeSpan interval;
	      try {
	         interval = TimeSpan.ParseExact(value, "c", null);
	         Console.WriteLine("Converted '{0}' to {1}", value, interval);
	      }   
	      catch (FormatException) {
	         Console.WriteLine("{0}: Bad Format", value);
	      }   
	      catch (OverflowException) {
	         Console.WriteLine("{0}: Out of Range", value);
	      }
	      
	      if (TimeSpan.TryParseExact(value, "c", null, out interval))
	         Console.WriteLine("Converted '{0}' to {1}", value, interval);
	      else
	         Console.WriteLine("Unable to convert {0} to a time interval.", 
	                           value);
	   }
	}
snippet codetypedeclarationexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationExample/codetypedeclarationexample.cs

	using System;
	using System.CodeDom;
	using System.Reflection;
	
	namespace CodeDomSamples
	{
	    public class CodeTypeDeclarationExample
	    {
	        public CodeTypeDeclarationExample()
	        {
	            CodeTypeDeclaration newType = new CodeTypeDeclaration(
	                "TestType");
	            newType.Attributes = MemberAttributes.Private;
	            newType.BaseTypes.Add( "BaseType" );            
	            
	
	        }
	    }
	}
snippet directoryinfodelete

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/directoryinfodelete/directoryinfodelete.cs

	using System;
	using System.IO;
	
	public class DeleteTest 
	{
	    public static void Main() 
	    {
	
	        DirectoryInfo di = new DirectoryInfo("TempDir");
	
	        if (di.Exists == false)
	            di.Create();
	
	        DirectoryInfo dis = di.CreateSubdirectory("SubDir");
	
	
	        dis.Delete(true);
	
	        di.Delete(true);
	    }
	}
snippet conceptual_regex_language_substitutions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_substitutions/before1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "aa1bb2cc3dd4ee5";
	      string pattern = @"\d+";
	      string substitution = "$`";
	      Console.WriteLine("Matches:");
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("   {0} at position {1}", match.Value, match.Index);
	
	      Console.WriteLine("Input string:  {0}", input);
	      Console.WriteLine("Output string: " + 
	                        Regex.Replace(input, pattern, substitution));
	   }
	}

snippet type_gettypefromhandle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromHandle/type_gettypefromhandle.cs

	
	/*
	   The following example demonstrates the 'GetTypeFromHandle(RuntimeTypeHandle)' method
	   of the 'Type' Class.
		It defines an empty class 'Myclass1' and obtains an object of 'Myclass1'. Then the runtime handle of 
		the object is obtained and passed as an argument to 'GetTypeFromHandle(RuntimeTypeHandle)'method. That 
		returns the type referenced by the specified type handle.
	*/
	
	
	
	using System;
	using System.Reflection;
	
	public class MyClass1
	{
	}
	public class MyClass2
	{
	   public static void Main()
	   {
	        MyClass1 myClass1 = new MyClass1();
	        Type myClass1Type = Type.GetTypeFromHandle(Type.GetTypeHandle(myClass1));
	        Console.WriteLine("The Names of the Attributes :"+myClass1Type.Attributes);
	   }
	}
	

snippet formatting_dateandtime_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Custom/custandparsing1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] dateValues = { "30-12-2011", "12-30-2011", 
	                              "30-12-11", "12-30-11" };
	      string pattern = "MM-dd-yy";
	      DateTime parsedDate;
	      
	      foreach (var dateValue in dateValues) {
	         if (DateTime.TryParseExact(dateValue, pattern, null, 
	                                   DateTimeStyles.None, out parsedDate))
	            Console.WriteLine("Converted '{0}' to {1:d}.", 
	                              dateValue, parsedDate);
	         else
	            Console.WriteLine("Unable to convert '{0}' to a date and time.", 
	                              dateValue);
	      }
	   }
	}
	

snippet type_gettypefromprogid4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID4/type_gettypefromprogid4.cs

	
	using System;
	class MainApp 
	{
	    public static void Main()
	    {
	        try
	        {
	            string theServer="localhost";
	            string myString1 ="DirControl.DirList.1"; 
	            string myString2 ="WrongProgID"; 
	            Type myType1 =Type.GetTypeFromProgID(myString1,theServer,true);
	            Console.WriteLine("GUID for ProgID DirControl.DirList.1 is {0}.", myType1.GUID);
	            Type myType2 =Type.GetTypeFromProgID(myString2, theServer, true);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("An exception occurred. The ProgID is wrong.");
	            Console.WriteLine("Source: {0}" , e.Source);
	            Console.WriteLine("Message: {0}" , e.Message);
	        }
	    }
	}

snippet sys_glob_regioninfo_rgn5props

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_regioninfo_rgn5props/rgn5props.cs

	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	
	    Console.Clear();
	    Console.WriteLine("Region English Name: . . . {0}", ri.EnglishName);
	    Console.WriteLine("Native Name: . . . . . . . {0}", ri.NativeName);
	    Console.WriteLine("Currency English Name: . . {0}", ri.CurrencyEnglishName);
	    Console.WriteLine("Currency Native Name:. . . {0}", ri.CurrencyNativeName);
	    Console.WriteLine("Geographical ID: . . . . . {0}", ri.GeoId);
	    }
	}
	/*
	This code example produces the following results:
	
	Region English Name: . . . Sweden
	Native Name: . . . . . . . Sverige
	Currency English Name: . . Swedish Krona
	Currency Native Name:. . . Svensk krona
	Geographical ID: . . . . . 221
	
	*/
snippet appdomain_createinstance_ignorecase

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/ignorecase.cs

	using System;
	using System.Reflection;
	
	class Test {
	
	   static void Main() {
	   }
	   
	   static void InstantiateINT32(bool ignoreCase) {
	      try {
	         AppDomain currentDomain = AppDomain.CurrentDomain;
	         object instance = currentDomain.CreateInstanceAndUnwrap(
	            "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
	            "SYSTEM.INT32",
	            ignoreCase,
	            BindingFlags.Default,
	            null,
	            null,
	            null,
	            null,
	            null
	         );
	         Console.WriteLine(instance.GetType());
	      } catch (TypeLoadException e) {
	         Console.WriteLine(e.Message);
	      }
	   }
	}
snippet onexitsample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/onexitsample/program.cs

	using System;
	using System.Diagnostics;
	
	class MyProcess : Process
	{
	    public void Stop()
	    {
	        this.CloseMainWindow();
	        this.Close();
	        OnExited();
	    } 
	}
	class StartNotePad
	{
	
	    public static void Main(string[] args)
	    {
	        MyProcess p = new MyProcess();
	        p.StartInfo.FileName = "notepad.exe";
	        p.EnableRaisingEvents = true;
	        p.Exited += new EventHandler(myProcess_HasExited);
	        p.Start();
	        p.WaitForInputIdle();
	        p.Stop();
	    }
	    private static void myProcess_HasExited(object sender, System.EventArgs e)
	    {
	        Console.WriteLine("Process has exited.");
	    }
	}
snippet conceptual_isolatedstorage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_isolatedstorage/source2.cs

	using System;
	using System.IO;
	using System.IO.IsolatedStorage;
	using System.Collections;
	
	public class EnumeratingStores
	{
	    public static void Main()
	    {
	        using (IsolatedStorageFile isoStore = IsolatedStorageFile.GetStore(IsolatedStorageScope.User | IsolatedStorageScope.Assembly, null, null))
	        {
	            isoStore.CreateFile("TestFileA.Txt");
	            isoStore.CreateFile("TestFileB.Txt");
	            isoStore.CreateFile("TestFileC.Txt");
	            isoStore.CreateFile("TestFileD.Txt");
	        }
	        
	        IEnumerator allFiles = IsolatedStorageFile.GetEnumerator(IsolatedStorageScope.User);
	        long totalsize = 0;
	
	        while (allFiles.MoveNext())
	        {
	            IsolatedStorageFile storeFile = (IsolatedStorageFile)allFiles.Current;
	            totalsize += (long)storeFile.UsedSize;
	        }
	       
	        Console.WriteLine("The total size = " + totalsize);
	    }
	}

snippet x509certificate_getrawcertdata_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetRawCertData_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        byte[] results = cert.GetRawCertData();
	       
	        foreach(byte b in results)
	        {
	            Console.Write(b);
	        }
	
	  
	    }
	
	}
snippet conceptual_asyncinterop

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_AsyncInterop/Wrap2.cs

	using System;
	using System.IO;
	using System.Threading.Tasks;
	
	public static class Wrapper
	{
	    public static Task<int> ReadAsync(this Stream stream, 
	                                      byte [] buffer, int offset, 
	                                      int count)
	    {
	       if (stream == null) 
	           throw new ArgumentNullException("stream");
	
	       var tcs = new TaskCompletionSource<int>();
	       stream.BeginRead(buffer, offset, count, iar =>
	                        {
	                           try { 
	                              tcs.TrySetResult(stream.EndRead(iar)); 
	                           }
	                           catch(OperationCanceledException) { 
	                              tcs.TrySetCanceled(); 
	                           }
	                           catch(Exception exc) { 
	                              tcs.TrySetException(exc); 
	                           }
	                        }, null);
	       return tcs.Task;
	   }
	}

snippet x509certificate_equals_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_Equals_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	        string OtherCertificate =  "OtherCertificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        X509Certificate certTwo = X509Certificate.CreateFromCertFile(OtherCertificate);
	
	        bool result = cert.Equals(certTwo);
	       
	        Console.WriteLine(result);
	  
	    }
	
	}
snippet codebinaryoperatorexpression

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeBinaryOperatorExpression/codebinaryoperatorexpressionexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeBinaryOperatorExpressionExample
	    {
	        public CodeBinaryOperatorExpressionExample()
	        {
	            CodeBinaryOperatorExpression addMethod = new CodeBinaryOperatorExpression(
	                
	                new CodePrimitiveExpression(1),
	                
	                CodeBinaryOperatorType.Add,
	                
	                new CodePrimitiveExpression(2) );    
	
	
	
	        }
	    }
	}
snippet conceptual_resources_retrieving

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_retrieving/getstream.cs

	using System;
	using System.Drawing;
	using System.IO;
	using System.Resources;
	using System.Windows.Forms;
	
	public class Example
	{
	   public static void Main()
	   {
	      ResourceManager rm = new ResourceManager("AppResources", typeof(Example).Assembly);
	      Bitmap screen = (Bitmap) Image.FromStream(rm.GetStream("SplashScreen"));
	      
	      Form frm = new Form();
	      frm.Size = new Size(300, 300);
	
	      PictureBox pic = new PictureBox();
	      pic.Bounds = frm.RestoreBounds;
	      pic.BorderStyle = BorderStyle.Fixed3D; 
	      pic.Image = screen;
	      pic.SizeMode = PictureBoxSizeMode.StretchImage;
	
	      frm.Controls.Add(pic);
	      pic.Anchor = AnchorStyles.Top | AnchorStyles.Bottom |
	                   AnchorStyles.Left | AnchorStyles.Right;
	
	      frm.ShowDialog();
	   }
	}

snippet directorynotfoundexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DirectoryNotFoundException/program.cs

	using System;
	using System.IO;
	
	class Program
	{
	
	    static void Main(string[] args)
	    {
	        try
	        {
	
	            string dir = @"c:\78fe9lk";
	
	            Directory.SetCurrentDirectory(dir);
	        }
	        catch (DirectoryNotFoundException dirEx)
	        {
	            Console.WriteLine("Directory not found: " + dirEx.Message);
	        }
	    }
	}
	
	
	
	

snippet conceptual_calendars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_calendars/instantiatehcdate1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      HebrewCalendar hc = new HebrewCalendar();
	
	      DateTime date1 = new DateTime(5771, 6, 1, hc);
	      DateTime date2 = hc.ToDateTime(5771, 6, 1, 0, 0, 0, 0);
	      
	      Console.WriteLine("{0:d} (Gregorian) = {1:d2}/{2:d2}/{3:d4} ({4}): {5}",
	                        date1, 
	                        hc.GetMonth(date2),
	                        hc.GetDayOfMonth(date2),
	                        hc.GetYear(date2), 
	                        GetCalendarName(hc),
	                        date1.Equals(date2));
	   }
	   
	   private static string GetCalendarName(Calendar cal)
	   {
	      return cal.ToString().Replace("System.Globalization.", ""). 
	                            Replace("Calendar", "");
	   }
	}

snippet conceptual_disposable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_disposable/using5.cs

	using System;
	using System.Globalization;
	using System.IO;
	
	public class Example
	{
	   public static void Main()
	   {
	      StreamReader sr = null;
	      try {
	         sr = new StreamReader("file1.txt");
	         String contents = sr.ReadToEnd();
	         Console.WriteLine("The file has {0} text elements.", 
	                           new StringInfo(contents).LengthInTextElements);    
	      }      
	      catch (FileNotFoundException) {
	         Console.WriteLine("The file cannot be found.");
	      }   
	      catch (IOException) {
	         Console.WriteLine("An I/O error has occurred.");
	      }
	      catch (OutOfMemoryException) {
	         Console.WriteLine("There is insufficient memory to read the file.");   
	      }
	      finally {
	         if (sr != null) sr.Dispose();     
	      }
	   }
	}

snippet dirinfo_ctor

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DirInfo_Ctor/dirinfo_ctor.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        DirectoryInfo di1 = new DirectoryInfo(@"c:\MyDir");
	        DirectoryInfo di2 = new DirectoryInfo(@"c:\MyDir\temp");
	
	        try 
	        {
	            di1.Create();
	            di2.Create();
	
	            Console.WriteLine("I am about to attempt to delete {0}.", di1.Name);
	            di1.Delete();
	            Console.WriteLine("The Delete operation was successful, which was unexpected.");
	        } 
	        catch (Exception) 
	        {
	            Console.WriteLine("The Delete operation failed as expected.");
	        } 
	        finally {}
	    }
	}

snippet codetypeconstructorexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeTypeConstructorExample/codetypeconstructorexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeTypeConstructorExample
	    {
	        public CodeTypeConstructorExample()
	        {
	            CodeTypeDeclaration type1 = new CodeTypeDeclaration("Type1");
	            CodeTypeConstructor constructor2 = new CodeTypeConstructor();
	            type1.Members.Add( constructor2 );
	
	
	        }
	    }
	}
snippet type_tostring

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/type_tostring.cs

	using System;
	
	namespace MyNamespace
	{
	    class MyClass
	    {
	    }
	}
	
	public class Example
	{
	    public static void Main()
	    {
	         Type myType = typeof(MyNamespace.MyClass);
	         Console.WriteLine("Displaying information about {0}:", myType); 
	         Console.WriteLine("   Namespace: {0}.", myType.Namespace);
	         Console.WriteLine("   Module: {0}.", myType.Module);
	         Console.WriteLine("   Fully qualified name: {0}.", myType.ToString());
	    }
	}
	

snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/digit1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"^(\(?\d{3}\)?[\s-])?\d{3}-\d{4}$";
	      string[] inputs = { "111 111-1111", "222-2222", "222 333-444", 
	                          "(212) 111-1111", "111-AB1-1111", 
	                          "212-111-1111", "01 999-9999" };
	      
	      foreach (string input in inputs)
	      {
	         if (Regex.IsMatch(input, pattern)) 
	            Console.WriteLine(input + ": matched");
	         else
	            Console.WriteLine(input + ": match failed");
	      }
	   }
	}

snippet regularexpressions_quantifiers_greedy

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Quantifiers_Greedy/Greedy.cs

	using System;
	using System.Text.RegularExpressions;
	
	[assembly: CLSCompliant(true)]
	public class Class1
	{
	   public static void Main()
	   {
	      string greedyPattern = @"\b.*([0-9]{4})\b";
	      string input1 = "1112223333 3992991999";
	      foreach (Match match in Regex.Matches(input1, greedyPattern))
	         Console.WriteLine("Account ending in ******{0}.", match.Groups[1].Value);
	
	      Console.WriteLine();
	
	      string lazyPattern = @"\b.*?([0-9]{4})\b";
	      string input2 = "1112223333 3992991999";
	      foreach (Match match in Regex.Matches(input2, lazyPattern))
	         Console.WriteLine("Account ending in ******{0}.", match.Groups[1].Value);
	
	   }
	}

snippet readtextfile

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ReadTextFile/readtextfile.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            using (StreamReader sr = new StreamReader("TestFile.txt")) 
	            {
	                string line;
	                while ((line = sr.ReadLine()) != null) 
	                {
	                    Console.WriteLine(line);
	                }
	            }
	        }
	        catch (Exception e) 
	        {
	            Console.WriteLine("The file could not be read:");
	            Console.WriteLine(e.Message);
	        }
	    }
	}
snippet datetime_subtraction

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_Subtraction/class1.cs

	using System;
	
	namespace Subtract
	{
		class Class1
		{
			static void Main(string[] args)
			{
				System.DateTime date1 = new System.DateTime(1996, 6, 3, 22, 15, 0);
				System.DateTime date2 = new System.DateTime(1996, 12, 6, 13, 2, 0);
				System.DateTime date3 = new System.DateTime(1996, 10, 12, 8, 42, 0);
	
				System.TimeSpan diff1 = date2.Subtract(date1);
	
				System.DateTime date4 = date3.Subtract(diff1);
	
				System.TimeSpan diff2 = date2 - date3;
	
				System.DateTime date5 = date1 - diff2;
	            System.Console.WriteLine(diff1);
				System.Console.WriteLine(date4);
				System.Console.WriteLine(diff2);
				System.Console.WriteLine(date4);		
			}
		}
	}

snippet type_gettype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/type_gettype.cs

	using System;
	
	class Example
	{
	     public static void Main()
	     {
	         try {
	             Type myType1 = Type.GetType("System.Int32");
	             Console.WriteLine("The full name is {0}.\n", myType1.FullName);
	         }
	         catch (TypeLoadException e)
	         {
	            Console.WriteLine("{0}: Unable to load type System.Int32", e.GetType().Name);
	         }
	
	         try {
	             Type myType2 = Type.GetType("NoneSuch", true);
	             Console.WriteLine("The full name is {0}.", myType2.FullName);
	         }
	         catch(TypeLoadException e) {
	            Console.WriteLine("{0}: Unable to load type NoneSuch", e.GetType().Name);
	         }
	     }
	}

snippet fieldinfo_getfieldfromhandle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/fieldinfo_getfieldfromhandle.cs

	using System;
	using System.Reflection;
	
	public class FieldInfo_GetFieldFromHandle
	{
	    public string x;
	    public char y;
	    public float a;
	    public int b;
	
	    public static void Main()
	    {
	        Type myType = typeof(FieldInfo_GetFieldFromHandle);
	        FieldInfo [] myFieldInfoArray = myType.GetFields();
	        Console.WriteLine("\nThe field information of the declared" +
	            " fields x, y, a, and b is:\n");
	        RuntimeFieldHandle myRuntimeFieldHandle;
	        for(int i = 0; i < myFieldInfoArray.Length; i++)
	        {
	            myRuntimeFieldHandle = myFieldInfoArray[i].FieldHandle;
	            FieldInfo myFieldInfo = FieldInfo.GetFieldFromHandle(myRuntimeFieldHandle);
	            Console.WriteLine("{0}", myFieldInfo);
	        }
	    }
	}

snippet assemblyname_getassemblyname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyName_GetAssemblyName/assemblyname_getassemblyname.cs

	
	/*
	   This example demonstrates the 'GetAssemblyName(string)' and 'ToString()'
	   methods of the 'AssemblyName' class. Get the path of 'System.dll' from 
	   the path of 'mscorlib.dll'. Get the assembly information from 'System.dll'
	   and display the information to the console. 
	 */
	
	
	using System;
	using System.Reflection;
	
	public class AssemblyName_GetAssemblyName
	{
	   public static void Main()
	   {
	      AssemblyName myAssemblyName = AssemblyName.GetAssemblyName("MyAssembly.exe");
	      Console.WriteLine("\nDisplaying assembly information:\n");
	      Console.WriteLine(myAssemblyName.ToString());
	   }
	}
	

snippet codeargumentreferenceexpressionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeArgumentReferenceExpressionExample/codeargumentreferenceexpressionexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeArgumentReferenceExpressionExample
	    {
	        public CodeArgumentReferenceExpressionExample()
	    {
	            CodeMemberMethod cmm = new CodeMemberMethod();
	            cmm.Parameters.Add( new CodeParameterDeclarationExpression("String", "text") );
	            cmm.Name = "WriteString";
	            cmm.ReturnType = new CodeTypeReference("System.Void");        
	                    
	            CodeMethodInvokeExpression cmie = new CodeMethodInvokeExpression( new CodeTypeReferenceExpression("Console"), "WriteLine", new CodeArgumentReferenceExpression("text") );
	
	            cmm.Statements.Add( cmie );
	 
	    }
	    }    
	}
snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/wordchar1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"(\w)\1";
	      string[] words = { "trellis", "seer", "latter", "summer", 
	                         "hoarse", "lesser", "aardvark", "stunned" };
	      foreach (string word in words)
	      {
	         Match match = Regex.Match(word, pattern);
	         if (match.Success)
	            Console.WriteLine("'{0}' found in '{1}' at position {2}.", 
	                              match.Value, word, match.Index);
	         else
	            Console.WriteLine("No double characters in '{0}'.", word);
	      }                                                  
	   }
	}

snippet enummain

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/enummain/EnumMain.cs

	using System;
	
	public class EnumTest {
	    enum Days { Saturday, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday };
	    enum BoilingPoints { Celsius = 100, Fahrenheit = 212 };
	    [FlagsAttribute]
	    enum Colors { Red = 1, Green = 2, Blue = 4, Yellow = 8 };
	
	    public static void Main() {
	
	        Type weekdays = typeof(Days);
	        Type boiling = typeof(BoilingPoints);
	
	        Console.WriteLine("The days of the week, and their corresponding values in the Days Enum are:");
	
	        foreach ( string s in Enum.GetNames(weekdays) )
	            Console.WriteLine( "{0,-11}= {1}", s, Enum.Format( weekdays, Enum.Parse(weekdays, s), "d"));
	
	        Console.WriteLine();
	        Console.WriteLine("Enums can also be created which have values that represent some meaningful amount.");
	        Console.WriteLine("The BoilingPoints Enum defines the following items, and corresponding values:");
	
	        foreach ( string s in Enum.GetNames(boiling) )
	            Console.WriteLine( "{0,-11}= {1}", s, Enum.Format(boiling, Enum.Parse(boiling, s), "d"));
	
	        Colors myColors = Colors.Red | Colors.Blue | Colors.Yellow;
	        Console.WriteLine();
	        Console.WriteLine("myColors holds a combination of colors. Namely: {0}", myColors);
	    }
	}

snippet threadstex

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ThreadStEx/threadstex.cs

	using System;
	using System.Threading;
	
	public class ThreadWork 
	{
	   public static void DoWork()
	   {
	      Console.WriteLine("Working thread..."); 
	   }
	}
	
	class ThreadStateTest
	{
	   public static void Main()
	   {
	      ThreadStart myThreadDelegate = new ThreadStart(ThreadWork.DoWork);
	      Thread myThread = new Thread(myThreadDelegate);
	      myThread.Start();
	      Thread.Sleep(0);
	      Console.WriteLine("In main. Attempting to restart myThread.");
	      try 
	      {
	         myThread.Start();
	      }
	      catch (ThreadStateException e)
	      {
	         Console.WriteLine("Caught: {0}", e.Message);
	      }
	   }
	}

snippet x509certificate_getserialnumber_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_GetSerialNumber_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        byte[] results = cert.GetSerialNumber();
	       
	        foreach(byte b in results)
	        {
	            Console.Write(b);
	        }
	
	
	  
	    }
	
	}
snippet asynchronous_file_io_async

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/example4.cs

	using System;
	using System.Text;
	using System.Threading.Tasks;
	using System.Windows;
	using System.Windows.Controls;
	using System.IO;
	
	namespace WpfApplication1
	{
	    public partial class MainWindow : Window
	    {
	        public MainWindow()
	        {
	            InitializeComponent();
	        }
	
	        private async void Button_Click(object sender, RoutedEventArgs e)
	        {
	            string filename = @"c:\Temp\userinputlog.txt";
	            byte[] result;
	
	            using (FileStream SourceStream = File.Open(filename, FileMode.Open))
	            {
	                result = new byte[SourceStream.Length];
	                await SourceStream.ReadAsync(result, 0, (int)SourceStream.Length);
	            }
	
	            UserInput.Text = System.Text.Encoding.ASCII.GetString(result);
	        }
	    }
	}
snippet file_class_example

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_Class_Example/file_class_example.cs

	using System;
	using System.IO;
	
	class Test
	{
	    public static void Main()
	    {
	        string path = @"c:\temp\MyTest.txt";
	        if (!File.Exists(path))
	        {
	            using (StreamWriter sw = File.CreateText(path))
	            {
	                sw.WriteLine("Hello");
	                sw.WriteLine("And");
	                sw.WriteLine("Welcome");
	            }
	        }
	
	        using (StreamReader sr = File.OpenText(path))
	        {
	            string s;
	            while ((s = sr.ReadLine()) != null)
	            {
	                Console.WriteLine(s);
	            }
	        }
	    }
	}

snippet appdomain_docallback

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/docallback_static.cs

	using System;
	
	public class PingPong
	{
	    static string greetings = "PONG!";
	
	    public static void Main()
	    {
	        AppDomain otherDomain = AppDomain.CreateDomain("otherDomain");
	
	        greetings = "PING!";
	        MyCallBack();
	        otherDomain.DoCallBack(new CrossAppDomainDelegate(MyCallBack));
	
	    }
	
	    static public void MyCallBack()
	    {
	        string name = AppDomain.CurrentDomain.FriendlyName;
	
	        if (name == AppDomain.CurrentDomain.SetupInformation.ApplicationName)
	        {
	            name = "defaultDomain";
	        }
	        Console.WriteLine(greetings + " from " + name);
	    }
	}

snippet customattributedata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/source2.cs

	using System;
	
	public class ExampleAttribute : Attribute
	{
	    private string stringVal;
	
	    public ExampleAttribute()
	    {
	        stringVal = "This is the default string.";
	    }
	
	    public string StringValue
	    {
	        get { return stringVal; }
	        set { stringVal = value; }
	    }
	}
	
	[Example(StringValue="This is a string.")]
	class Class1
	{
	    public static void Main()
	    {
	        System.Reflection.MemberInfo info = typeof(Class1);
	        foreach (object attrib in info.GetCustomAttributes(true))
	        {
	            Console.WriteLine(attrib);
	        }
	    }
	}

snippet file_createtext

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_CreateText/file_createtext.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	        if (!File.Exists(path)) 
	        {
	            using (StreamWriter sw = File.CreateText(path)) 
	            {
	                sw.WriteLine("Hello");
	                sw.WriteLine("And");
	                sw.WriteLine("Welcome");
	            }	
	        }
	
	        using (StreamReader sr = File.OpenText(path)) 
	        {
	            string s = "";
	            while ((s = sr.ReadLine()) != null) 
	            {
	                Console.WriteLine(s);
	            }
	        }
	    }
	}

snippet cryptography_x509certificates_x509certificate

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_X509Certificates_X509Certificate/example.cs

	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate = "Certificate.cer";
	
	        X509Certificate cert = new X509Certificate(Certificate);
	
	        string resultsTrue = cert.ToString(true);
	
	        Console.WriteLine(resultsTrue);
	
	        string resultsFalse = cert.ToString(false);
	
	        Console.WriteLine(resultsFalse);
	
	    }
	
	}
snippet executingexprtrees

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ExecutingExprTrees/ExecutingET.cs

	using System;
	using System.Linq.Expressions;
	
	namespace ExecutingExprTrees
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            BinaryExpression be = Expression.Power(Expression.Constant(2D), Expression.Constant(3D));
	
	            Expression<Func<double>> le = Expression.Lambda<Func<double>>(be);
	
	            Func<double> compiledExpression = le.Compile();
	
	            double result = compiledExpression();
	
	            Console.WriteLine(result);
	
	
	        }
	    }
	}

snippet datetime_compareto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_CompareTo/class1.cs

	using System;
	
	namespace CompareTo
	{
	    class Class1
	    {
	        static void Main(string[] args)
		{
	            System.DateTime theDay = new System.DateTime(System.DateTime.Today.Year, 7, 28);
	            int compareValue;
	
	            try 
	            {
	                compareValue = theDay.CompareTo(DateTime.Today);
	            } 
	            catch (ArgumentException) 
	            {
	               Console.WriteLine("Value is not a DateTime");
	               return;
	            }
	
	            if (compareValue < 0) 
	               System.Console.WriteLine("{0:d} is in the past.", theDay);
	            else if (compareValue == 0) 
	               System.Console.WriteLine("{0:d} is today!", theDay);
	               System.Console.WriteLine("{0:d} has not come yet.", theDay);
	        }
	    }
	}

snippet microsoft_visualstudio_data_core_ivsdatahostservice

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataHostService/IVsDataHostService3.cs

	using System;
	using System.Threading;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Shell.Interop;
	
	public class DdexHostSvcExample3
	{
	    public static void UpdateUI(IVsDataHostService hostService)
	    {
	        if (hostService.UIThread == Thread.CurrentThread)
	        {
	            ActuallyUpdateUI(hostService);
	        }
	        else
	        {
	            hostService.InvokeOnUIThread(
	                new UpdateUIDelegate(ActuallyUpdateUI),
	                hostService);
	        }
	    }
	
	    private delegate void UpdateUIDelegate(IVsDataHostService hostService);
	
	    private static void ActuallyUpdateUI(IVsDataHostService hostService)
	    {
	        IVsUIShell uiShell = hostService.GetService<IVsUIShell>();
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdatahostservice

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataHostService/IVsDataHostService7.cs

	using System;
	using System.Threading;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Shell.Interop;
	
	public class DdexHostSvcExample7
	{
	    public static void UpdateUI(IVsDataHostService hostService)
	    {
	        if (hostService.UIThread == Thread.CurrentThread)
	        {
	            ActuallyUpdateUI(hostService);
	        }
	        else
	        {
	            hostService.InvokeOnUIThread(
	                new UpdateUIDelegate(ActuallyUpdateUI),
	                hostService);
	        }
	    }
	
	    private delegate void UpdateUIDelegate(IVsDataHostService hostService);
	
	    private static void ActuallyUpdateUI(IVsDataHostService hostService)
	    {
	        IVsUIShell uiShell = hostService.GetService<IVsUIShell>();
	    }
	}
snippet addinp1addincalcv1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInCalcV1/AddInCalcV1.cs

	using System.Collections.Generic;
	using System.AddIn;
	using CalcAddInViews;
	
	namespace CalcAddIns
	{
	    [AddIn("Calculator AddIn",Version="1.0.0.0")]
	    public class AddInCalcV1 : ICalculator
	    {
	        public double Add(double a, double b)
	        {
	            return a + b;
	        }
	
	        public double Subtract(double a, double b)
	        {
	            return a - b;
	        }
	
	        public double Multiply(double a, double b)
	        {
	            return a * b;
	        }
	
	        public double Divide(double a, double b)
	        {
	            return a / b;
	        }
	    }
	}
snippet type_isexplicitlayout

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsExplicitLayout/type_isexplicitlayout.cs

	using System;
	using System.Reflection;
	using System.ComponentModel;
	using System.Runtime.InteropServices;
	
	
	[StructLayout(LayoutKind.Explicit, Size=16, CharSet=CharSet.Ansi)]
	public class MySystemTime
	{
	   [FieldOffset(0)]public ushort wYear;
	   [FieldOffset(2)]public ushort wMonth;
	   [FieldOffset(4)]public ushort wDayOfWeek;
	   [FieldOffset(6)]public ushort wDay;
	   [FieldOffset(8)]public ushort wHour;
	   [FieldOffset(10)]public ushort wMinute;
	   [FieldOffset(12)]public ushort wSecond;
	   [FieldOffset(14)]public ushort wMilliseconds;
	}
	
	public class Program
	{
	    public static void Main(string[] args)
	    {
	        Type  t = typeof(MySystemTime);
	        Console.WriteLine("\nIsExplicitLayout for MySystemTime is {0}.",
	            t.IsExplicitLayout);
	    }
	}
snippet generic_sortedlist

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedList/remarks.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        SortedList<int, string> mySortedList =
	            new SortedList<int, string>();
	
	        mySortedList.Add(0, "notepad.exe");
	        mySortedList.Add(1, "paint.exe");
	        mySortedList.Add(2, "paint.exe");
	        mySortedList.Add(3, "wordpad.exe");
	
	        string v = mySortedList.Values[3];
	
	        Console.WriteLine("Value at index 3: {0}", v);
	
	        foreach( KeyValuePair<int, string> kvp in mySortedList )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, kvp.Value);
	        }
	    }
	} 
snippet enumgetnames

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/enumgetnames/EnumGetNames.cs

	using System;
	
	public class GetNamesTest {
	    enum Colors { Red, Green, Blue, Yellow };
	    enum Styles { Plaid, Striped, Tartan, Corduroy };
	
	    public static void Main() {
	
	        Console.WriteLine("The members of the Colors enum are:");
	        foreach(string s in Enum.GetNames(typeof(Colors)))
	            Console.WriteLine(s);
	
	        Console.WriteLine();
	
	        Console.WriteLine("The members of the Styles enum are:");
	        foreach(string s in Enum.GetNames(typeof(Styles)))
	            Console.WriteLine(s);
	    }
	}
snippet conceptual_resources_portablemetro

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetro/booleantovisibilityconverter.cs

	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.CompilerServices;
	using Windows.Foundation;
	using Windows.Foundation.Collections;
	using Windows.Graphics.Display;
	using Windows.UI.ViewManagement;
	using Windows.UI.Xaml;
	using Windows.UI.Xaml.Controls;
	using Windows.UI.Xaml.Data;
	
	namespace ConsumerCS.Common
	{
	    public sealed class BooleanToVisibilityConverter : IValueConverter
	    {
	        public object Convert(object value, Type targetType, object parameter, string language)
	        {
	            return (value is bool && (bool)value) ? Visibility.Visible : Visibility.Collapsed;
	        }
	
	        public object ConvertBack(object value, Type targetType, object parameter, string language)
	        {
	            return value is Visibility && (Visibility)value == Visibility.Visible;
	        }
	    }
	}

snippet conceptual_resources_portablemetroloc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetroloc/booleantovisibilityconverter.cs

	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.CompilerServices;
	using Windows.Foundation;
	using Windows.Foundation.Collections;
	using Windows.Graphics.Display;
	using Windows.UI.ViewManagement;
	using Windows.UI.Xaml;
	using Windows.UI.Xaml.Controls;
	using Windows.UI.Xaml.Data;
	
	namespace LocConsumerCS.Common
	{
	    public sealed class BooleanToVisibilityConverter : IValueConverter
	    {
	        public object Convert(object value, Type targetType, object parameter, string language)
	        {
	            return (value is bool && (bool)value) ? Visibility.Visible : Visibility.Collapsed;
	        }
	
	        public object ConvertBack(object value, Type targetType, object parameter, string language)
	        {
	            return value is Visibility && (Visibility)value == Visibility.Visible;
	        }
	    }
	}

snippet conceptual_calendars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_calendars/currentcalendar1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      CultureInfo zhTW = CultureInfo.CreateSpecificCulture("zh-TW");
	      Thread.CurrentThread.CurrentCulture = zhTW;
	      DateTime date1 = new DateTime(2011, 1, 16);
	      
	      Console.WriteLine("Current calendar: {0}", 
	                        zhTW.DateTimeFormat.Calendar);
	      Console.WriteLine(date1.ToString("d"));
	      
	      zhTW.DateTimeFormat.Calendar = new TaiwanCalendar();      
	      Console.WriteLine("Current calendar: {0}", 
	                        zhTW.DateTimeFormat.Calendar);
	      Console.WriteLine(date1.ToString("d"));
	   }
	}
snippet numbergroupseparator

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSeparator/numbergroupseparator.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Int64 myInt = 123456789;
	      Console.WriteLine( myInt.ToString( "N", nfi ) );
	
	      nfi.NumberGroupSeparator = " ";
	      Console.WriteLine( myInt.ToString( "N", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	123,456,789.00
	123 456 789.00
	*/
	   

snippet currencygroupseparator

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSeparator/currencygroupseparator.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Int64 myInt = 123456789;
	      Console.WriteLine( myInt.ToString( "C", nfi ) );
	
	      nfi.CurrencyGroupSeparator = " ";
	      Console.WriteLine( myInt.ToString( "C", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	$123,456,789.00
	$123 456 789.00
	*/
	   

snippet type_islayoutsequential

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsLayoutSequential/type_islayoutsequential.cs

	using System;
	using System.Reflection;
	using System.ComponentModel;
	using System.Runtime.InteropServices;
	class MyTypeSequential1
	{
	}
	[StructLayoutAttribute(LayoutKind.Sequential)]
	class MyTypeSequential2
	{
	    public static void Main(string []args)
	    {
	        try
	        {
	            MyTypeSequential1 myObj1 = new MyTypeSequential1();
	            Type myTypeObj1 = myObj1.GetType();
	            Console.WriteLine("\nThe object myObj1 has IsLayoutSequential: {0}.", myObj1.GetType().IsLayoutSequential);
	            MyTypeSequential2 myObj2 = new MyTypeSequential2();
	            Type myTypeObj2 = myObj2.GetType();
	            Console.WriteLine("\nThe object myObj2 has IsLayoutSequential: {0}.", myObj2.GetType().IsLayoutSequential);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("\nAn exception occurred: {0}", e.Message);
	        }
	    }
	}

snippet percentdecimalseparator

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalSeparator/percentdecimalseparator.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Double myInt = 0.1234;
	      Console.WriteLine( myInt.ToString( "P", nfi ) );
	
	      nfi.PercentDecimalSeparator = " ";
	      Console.WriteLine( myInt.ToString( "P", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	12.34 %
	12 34 %
	*/
	   

snippet percentgroupseparator

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSeparator/percentgroupseparator.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Double myInt = 1234.5678;
	      Console.WriteLine( myInt.ToString( "P", nfi ) );
	
	      nfi.PercentGroupSeparator = " ";
	      Console.WriteLine( myInt.ToString( "P", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	123,456.78 %
	123 456.78 %
	*/
	   

snippet percentdecimaldigits

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalDigits/percentdecimaldigits.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Double myInt = 0.1234;
	      Console.WriteLine( myInt.ToString( "P", nfi ) );
	
	      nfi.PercentDecimalDigits = 4;
	      Console.WriteLine( myInt.ToString( "P", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	12.34 %
	12.3400 %
	*/
	   

snippet enumgetvalues

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/enumgetvalues/EnumGetValues.cs

	using System;
	
	public class GetValuesTest {
	    enum Colors { Red, Green, Blue, Yellow };
	    enum Styles { Plaid = 0, Striped = 23, Tartan = 65, Corduroy = 78 };
	
	    public static void Main() {
	
	        Console.WriteLine("The values of the Colors Enum are:");
	        foreach(int i in Enum.GetValues(typeof(Colors)))
	            Console.WriteLine(i);
	
	        Console.WriteLine();
	
	        Console.WriteLine("The values of the Styles Enum are:");
	        foreach(int i in Enum.GetValues(typeof(Styles)))
	            Console.WriteLine(i);
	    }
	}

snippet regularexpressions_language_miscellaneous

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_miscellaneous/miscellaneous2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b((?# case-sensitive comparison)D\w+)\s(?ixn)((?#case-insensitive comparison)d\w+)\b";
	      Regex rgx = new Regex(pattern);
	      string input = "double dare double Double a Drooling dog The Dreaded Deep";
	
	      Console.WriteLine("Pattern: " + pattern.ToString());
	      foreach (Match match in rgx.Matches(input))
	      {
	         Console.WriteLine(match.Value);
	         if (match.Groups.Count > 1)
	         {
	            for (int ctr = 1; ctr <match.Groups.Count; ctr++) 
	               Console.WriteLine("   Group {0}: {1}", ctr, match.Groups[ctr].Value);
	         }
	      }
	   }
	}

snippet conceptual_regularexpressions_design

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_design/rtl1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string greedyPattern = @".+(\d+)\.";
	      string input = "This sentence ends with the number 107325.";
	      Match match;
	      
	      match = Regex.Match(input, greedyPattern);
	      if (match.Success)
	         Console.WriteLine("Number at end of sentence (left-to-right): {0}", 
	                           match.Groups[1].Value);
	      else
	         Console.WriteLine("{0} finds no match.", greedyPattern);
	      
	      match = Regex.Match(input, greedyPattern, RegexOptions.RightToLeft);
	      if (match.Success)
	         Console.WriteLine("Number at end of sentence (right-to-left): {0}", 
	                           match.Groups[1].Value);
	      else
	         Console.WriteLine("{0} finds no match.", greedyPattern);
	   }
	}

snippet runtime_interopservices_marshal_stringtohglobalansi

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_StringToHGlobalAnsi/stringtohglobalansi.cs

	using System;
	using System.Runtime.InteropServices;
	
	class MainFunction
	{
	    static void Main()
	    {
	    Console.WriteLine("\nStringToGlobalAnsi\n");
	
	    String  managedString = "I am a managed String";
	    Console.WriteLine("1) managedString = " + managedString );
	
	    IntPtr stringPointer = (IntPtr)Marshal.StringToHGlobalAnsi(managedString);
	    Console.WriteLine("2) stringPointer = {0}", stringPointer );
	
	    String RetrievedString = Marshal.PtrToStringAnsi( stringPointer);
	    Console.WriteLine("3) Retrieved from unmanaged memory = " + RetrievedString );
	
	    Marshal.FreeHGlobal(stringPointer);
	
	    Console.WriteLine("4) stringPointer = " + stringPointer );
	
	    String RetrievedString2 = Marshal.PtrToStringAnsi( stringPointer);
	    Console.WriteLine("5) RetrievedString2 = " + RetrievedString2 );
	    }
	}
snippet directoryinforoot

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/directoryinforoot/directoryinforoot2.cs

	using System;
	using System.IO;
	
	namespace ConsoleApplication1
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            DirectoryInfo di1 = new DirectoryInfo(@"\\tempshare\tempdir");
	            DirectoryInfo di2 = new DirectoryInfo("tempdir");
	            DirectoryInfo di3 = new DirectoryInfo(@"x:\tempdir");
	            DirectoryInfo di4 = new DirectoryInfo(@"c:\");
	            
	            Console.WriteLine("The root path of '{0}' is '{1}'", di1.FullName, di1.Root);
	            Console.WriteLine("The root path of '{0}' is '{1}'", di2.FullName, di2.Root);
	            Console.WriteLine("The root path of '{0}' is '{1}'", di3.FullName, di3.Root);
	            Console.WriteLine("The root path of '{0}' is '{1}'", di4.FullName, di4.Root);
	        }
	    }
	}
	/* 
	This code produces output similar to the following:
	
	The root path of '\\tempshare\tempdir' is '\\tempshare\tempdir'
	The root path of 'c:\Projects\ConsoleApplication1\ConsoleApplication1\bin\Debug\tempdir' is 'c:\'
	The root path of 'x:\tempdir' is 'x:\'
	The root path of 'c:\' is 'c:\'
	Press any key to continue . . .
	
	*/
	
snippet safehandle/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/Properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("SafeHandle")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("SafeHandle")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("a8d6f272-4a05-4cdb-8a7e-28a1946f2086")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet cryptowalkthru/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CryptoWalkThru/Properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("CryptoWalkThru")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("CryptoWalkThru")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("886b19e3-abde-48ea-b090-e669e723a1b8")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addincollectionpipelinehost/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHost/Properties/AssemblyInfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("ListAdaptersHost")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("ListAdaptersHost")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2007")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("ecc03f74-4909-4854-84a4-937496b85cd8")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addinp1host/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1Host/Properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("ExtensibleCalculator")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("ExtensibleCalculator")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("1e2c40ac-e86f-4d0d-82b5-452183db51f6")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet numberstyles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/NumberStyles/NumberStyles.cs

	using System;
	using System.Text;
	using System.Globalization;
	
	public sealed class App 
	{
	    static void Main() 
	    {
	        String num = "A";
	        int val = int.Parse(num, NumberStyles.HexNumber);
	        Console.WriteLine("{0} in hex = {1} in decimal.", num, val);
	
	        num = "    -45   ";
	        val = int.Parse(num, NumberStyles.AllowLeadingSign | 
	            NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite);
	        Console.WriteLine("'{0}' parsed to an int is '{1}'.", num, val);
	
	        num = "    (37)   ";
	        val = int.Parse(num, NumberStyles.AllowParentheses | NumberStyles.AllowLeadingSign |                         NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite);
	        Console.WriteLine("'{0}' parsed to an int is '{1}'.", num, val);
	    }
	}
	
snippet conceptual_isolatedstorage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_isolatedstorage/source9.cs

	using System;
	using System.IO.IsolatedStorage;
	
	class RoamingIsoStorage
	{
	    public static void Main()
	    {
	        SnippetA();
	        SnippetB();
	    }
	
	    public static void SnippetA()
	    {
	        IsolatedStorageFile isoFile =
	            IsolatedStorageFile.GetStore(IsolatedStorageScope.User |
	                IsolatedStorageScope.Assembly |
	                IsolatedStorageScope.Roaming, null, null);
	    }
	
	    public static void SnippetB()
	    {
	        IsolatedStorageFile isoFile =
	            IsolatedStorageFile.GetStore(IsolatedStorageScope.User |
	                IsolatedStorageScope.Assembly | IsolatedStorageScope.Domain |
	                IsolatedStorageScope.Roaming, null, null);
	    }
	}

snippet conceptual_resources_metrostyle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_metrostyle/app.xaml.cs

	using System;
	using System.Collections.Generic;
	using System.IO;
	using System.Linq;
	using Windows.ApplicationModel.Activation;
	using Windows.Foundation;
	using Windows.Foundation.Collections;
	using Windows.UI.Xaml;
	using Windows.UI.Xaml.Controls;
	using Windows.UI.Xaml.Controls.Primitives;
	using Windows.UI.Xaml.Data;
	using Windows.UI.Xaml.Input;
	using Windows.UI.Xaml.Media;
	using Windows.UI.Xaml.Navigation;
	
	namespace ResourceCS1
	{ 
	    sealed partial class App : Application
	    {
	        public App()
	        {
	            InitializeComponent();
	        }
	
	        protected override void OnLaunched(LaunchActivatedEventArgs args)
	        {
	            var rootFrame = new Frame();
	            rootFrame.Navigate(typeof(BlankPage));
	            Window.Current.Content = rootFrame;
	            Window.Current.Activate();
	        }
	    }
	}

snippet dg_exceptiondesign

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/dg_exceptionDesign/example2.cs

	using System;
	
	public class EmployeeListNotFoundException : Exception
	{
	    public EmployeeListNotFoundException()
	    {
	    }
	
	    public EmployeeListNotFoundException(string message)
	        : base(message)
	    {
	    }
	
	    public EmployeeListNotFoundException(string message, Exception inner)
	        : base(message, inner)
	    {
	    }
	}
	
	public class TestExample
	{
	    public static void Main()
	    {
	        EmployeeListNotFoundException e1, e2, e3;
	        Exception ex = new Exception();
	
	        e1 = new EmployeeListNotFoundException();
	        e2 = new EmployeeListNotFoundException("Hi!");
	        e3 = new EmployeeListNotFoundException("Hi!", ex);
	    }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/paramarray1.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class Group
	{
	   private string[] members;
	   
	   public Group(params string[] memberList)
	   {
	      members = memberList;
	   }
	   
	   public override string ToString() 
	   {
	      return String.Join(", ", members);
	   }
	}
	
	
	
	public class Example
	{
	   public static void Main()
	   {
	      Group gp = new Group("Matthew", "Mark", "Luke", "John");
	      Console.WriteLine(gp.ToString());    
	   }
	}

snippet adapplicationbase

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADApplicationBase/adapplicationbase.cs

	using System;
	
	class ADSetupInformation
	{
	    static void Main()
	    {
	        AppDomain root = AppDomain.CurrentDomain;
	
	        AppDomainSetup setup = new AppDomainSetup();
	        setup.ApplicationBase = 
	            root.SetupInformation.ApplicationBase + @"MyAppSubfolder\";
	
	        AppDomain domain = AppDomain.CreateDomain("MyDomain", null, setup);
	
	        Console.WriteLine("Application base of {0}:\r\n\t{1}", 
	            root.FriendlyName, root.SetupInformation.ApplicationBase);
	        Console.WriteLine("Application base of {0}:\r\n\t{1}", 
	            domain.FriendlyName, domain.SetupInformation.ApplicationBase);
	
	        AppDomain.Unload(domain);
	    }
	}
	
	/* This example produces output similar to the following:
	
	Application base of MyApp.exe:
	        C:\Program Files\MyApp\
	Application base of MyDomain:
	        C:\Program Files\MyApp\MyAppSubfolder\
	 */
	

snippet type_structlayoutattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_StructLayoutAttribute/source.cs

	using System;
	using System.Runtime.InteropServices;
	
	public class Example
	{
	    public static void Main()
	    {
	        DisplayLayoutAttribute(typeof(Example).StructLayoutAttribute);
	        DisplayLayoutAttribute(typeof(Test1).StructLayoutAttribute);
	        DisplayLayoutAttribute(typeof(Test2).StructLayoutAttribute);
	    }
	
	    private static void DisplayLayoutAttribute(StructLayoutAttribute sla)
	    {
	        Console.WriteLine("\r\nCharSet: "+sla.CharSet.ToString()+"\r\n   Pack: "+sla.Pack.ToString()+"\r\n   Size: "+sla.Size.ToString()+"\r\n  Value: "+sla.Value.ToString());
	    }
	    public struct Test1
	    {
	        public byte B1;
	        public short S;
	        public byte B2;
	    }
	    [StructLayout(LayoutKind.Explicit, Pack=1)] public struct Test2
	    {
	        [FieldOffset(0)] public byte B1;
	        [FieldOffset(1)] public short S;
	        [FieldOffset(3)] public byte B2;
	    }
	}
	
	

snippet asynchronous_file_io_async

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/example3.cs

	using System;
	using System.Text;
	using System.Threading.Tasks;
	using System.Windows;
	using System.Windows.Controls;
	using System.IO;
	
	namespace WpfApplication1
	{
	    public partial class MainWindow : Window
	    {
	        public MainWindow()
	        {
	            InitializeComponent();
	        }
	
	        private async void Button_Click(object sender, RoutedEventArgs e)
	        {
	            UnicodeEncoding uniencoding = new UnicodeEncoding();
	            string filename = @"c:\Users\exampleuser\Documents\userinputlog.txt";
	           
	            byte[] result = uniencoding.GetBytes(UserInput.Text);
	            
	            using (FileStream SourceStream = File.Open(filename, FileMode.OpenOrCreate))
	            {
	                SourceStream.Seek(0, SeekOrigin.End);
	                await SourceStream.WriteAsync(result, 0, result.Length);
	            }
	        }
	    }
	}

snippet fstream_canseek

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FStream_CanSeek/fstream_canseek.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        if (File.Exists(path)) 
	        {
	            File.Delete(path);
	        }
	
	        using (FileStream fs = File.Create(path)) 
	        {
	            if (fs.CanSeek) 
	            {
	                Console.WriteLine("The stream connected to {0} is seekable.", path);
	            } 
	            else 
	            {
	                Console.WriteLine("The stream connected to {0} is not seekable.", path);
	            }
	        }
	    }
	}

snippet asynchronous_file_io_async

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/example.cs

	using System;
	using System.Threading.Tasks;
	using System.Windows;
	using System.IO;
	
	namespace WpfApplication
	{
	    public partial class MainWindow : Window
	    {
	        public MainWindow()
	        {
	            InitializeComponent();
	        }
	
	        private async void Button_Click(object sender, RoutedEventArgs e)
	        {
	            string StartDirectory = @"c:\Users\exampleuser\start";
	            string EndDirectory = @"c:\Users\exampleuser\end";
	
	            foreach (string filename in Directory.EnumerateFiles(StartDirectory))
	            {
	                using (FileStream SourceStream = File.Open(filename, FileMode.Open))
	                {
	                    using (FileStream DestinationStream = File.Create(EndDirectory + filename.Substring(filename.LastIndexOf('\\'))))
	                    {
	                        await SourceStream.CopyToAsync(DestinationStream);
	                    }
	                }
	            }
	        }
	    }
	}
snippet conceptual_calendars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_calendars/formatstrings3.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime date1 = new DateTime(2011, 8, 28);
	      Calendar cal = new JapaneseLunisolarCalendar();
	      
	      Console.WriteLine("{0} {1:d4}/{2:d2}/{3:d2}", 
	                        cal.GetEra(date1),
	                        cal.GetYear(date1),
	                        cal.GetMonth(date1),
	                        cal.GetDayOfMonth(date1)); 
	                        
	      CultureInfo culture = CultureInfo.CreateSpecificCulture("ja-JP");
	      DateTimeFormatInfo dtfi = culture.DateTimeFormat;
	      dtfi.Calendar = new JapaneseCalendar();
	      
	      Console.WriteLine("{0} {1:d4}/{2:d2}/{3:d2}", 
	                        dtfi.GetAbbreviatedEraName(cal.GetEra(date1)),
	                        cal.GetYear(date1),
	                        cal.GetMonth(date1),
	                        cal.GetDayOfMonth(date1)); 
	   }
	}

snippet x509certificate_tostring_method

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/X509Certificate_ToString_Method/example.cs

	
	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate =  "Certificate.cer";
	
	        X509Certificate cert = X509Certificate.CreateFromCertFile(Certificate);
	
	        string resultsTrue = cert.ToString(true);
	       
	        Console.WriteLine(resultsTrue);
	
	        string resultsFalse = cert.ToString(false);
	       
	        Console.WriteLine(resultsFalse);
	  
	    }
	
	}
snippet appdomain_docallback

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/docallback_byval.cs

	using System;
	
	[Serializable]
	public class PingPong
	{
	    private string greetings = "PING!";
	
	    public static void Main()
	    {
	        AppDomain otherDomain = AppDomain.CreateDomain("otherDomain");
	
	        PingPong pp = new PingPong();
	        pp.MyCallBack();
	        pp.greetings = "PONG!";
	        otherDomain.DoCallBack(new CrossAppDomainDelegate(pp.MyCallBack));
	
	    }
	
	    public void MyCallBack()
	    {
	        string name = AppDomain.CurrentDomain.FriendlyName;
	
	        if (name == AppDomain.CurrentDomain.SetupInformation.ApplicationName)
	        {
	            name = "defaultDomain";
	        }
	        Console.WriteLine(greetings + " from " + name);
	    }
	}
snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/buffers.cs

	using System;
	using System.Text;
	using System.Runtime.InteropServices;
	
	public class LibWrap
	{
	    [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]
	    public static extern int GetSystemDirectory(
	        StringBuilder sysDirBuffer, int size);
	
	    [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]
	    public static extern IntPtr GetCommandLine();
	}
	
	public class App
	{
	    public static void Main()
	    {
	        StringBuilder sysDirBuffer = new StringBuilder(256);
	        LibWrap.GetSystemDirectory(sysDirBuffer, sysDirBuffer.Capacity);
	        IntPtr cmdLineStr = LibWrap.GetCommandLine();
	        string commandLine = Marshal.PtrToStringAuto(cmdLineStr);
	    }
	}

snippet howtogeneric

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/source2.cs

	using System;
	using System.Collections.Generic;
	
	class AdvantageGenerics
	{
	    public static void Main()
	    {
	        string[] myArray =
	            {"First String", "test string",  "Last String"};
	
	        LinkedList<string> llist = new LinkedList<string>();
	
	        foreach (string item in myArray)
	        {
	            llist.AddLast(item);
	        }
	        LinkedListNode<string> found = llist.Find("test string");
	        if (found != null)
	        {
	            Console.WriteLine("Item found: {0}", found.Value);
	        }
	        int index0 = Array.BinarySearch(myArray, "test string");
	        int index1 = Array.BinarySearch<string>(myArray, "test string");
	        
	        Console.WriteLine("Indexes for binary searches: {0}, {1}", index0, index1);
	    }
	}

snippet microsoft_visualstudio_data_core_ivsdatahostservice

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataHostService/IVsDataHostService2.cs

	using System;
	using System.Threading;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Shell.Interop;
	
	public class DdexHostSvcExample2
	{
	    public static void UpdateUI(IVsDataHostService hostService)
	    {
	        if (Thread.CurrentThread == hostService.UIThread)
	        {
	            ActuallyUpdateUI(hostService);
	        }
	        else
	        {
	            hostService.BeginInvokeOnUIThread(
	                new UpdateUIDelegate(ActuallyUpdateUI),
	                hostService);
	        }
	    }
	
	    private delegate void UpdateUIDelegate(IVsDataHostService hostService);
	
	    private static void ActuallyUpdateUI(IVsDataHostService hostService)
	    {
	        IVsUIShell uiShell = hostService.GetService<IVsUIShell>();
	    }
	}

snippet threadstart

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ThreadStart/threadstart.cs

	using System;
	using System.Threading;
	
	public class ThreadWork 
	{
	   public static void DoWork()
	   {
	      for(int i = 0; i<3;i++) {
	         Console.WriteLine("Working thread...");
	         Thread.Sleep(100);
	      }
	   }
	}
	class ThreadTest
	{
	   public static void Main()
	   {
	      Thread thread1 = new Thread(ThreadWork.DoWork);
	      thread1.Start();
	      for (int i = 0; i<3; i++) {
	         Console.WriteLine("In main.");
	         Thread.Sleep(100);
	      }
	   }
	}
snippet exception_throwing

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Exception_Throwing/throw.cs

	using System;
	using System.IO;
	
	public class ProcessFile
	{
	   public static void Main()
	      {
	      FileStream fs = null;
	      try   
	      {
	         fs = new FileStream(@"C:\temp\data.txt", FileMode.Open);
	         StreamReader sr = new StreamReader(fs);
	         string line;
	         
	         line = sr.ReadLine();
	         Console.WriteLine(line);
	      }
	      catch(FileNotFoundException e)
	      {
	         Console.WriteLine("[Data File Missing] {0}", e);
	         throw new FileNotFoundException(@"[data.txt not in c:\temp directory]",e);
	      }
	      finally
	      {
	         if (fs != null) 
	            fs.Close();
	      }
	   }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/array2.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class Numbers
	{
	   public static UInt32[] GetTenPrimes()
	   {
	      uint[] arr = { 1u, 2u, 3u, 5u, 7u, 11u, 13u, 17u, 19u };
	      return arr;
	   }
	   
	   public static Object[] GetFivePrimes()
	   {
	      Object[] arr = { 1, 2, 3, 5u, 7u };
	      return arr;
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}
	

snippet codebasereferenceexpressionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeBaseReferenceExpressionExample/codebasereferenceexpressionexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeBaseReferenceExpressionExample
	    {
	        public CodeBaseReferenceExpressionExample()
	        {
	            CodeMethodInvokeExpression methodInvokeExpression =                 
	                
	                new CodeMethodInvokeExpression(
	                
	                new CodeBaseReferenceExpression(),
	                
	                "Dispose", new CodeExpression[] {});            
	
	
	
	        }        
	    }
	}
snippet appdomain_docallback

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/docallback_byref.cs

	using System;
	
	public class PingPong : MarshalByRefObject
	{
	    private string greetings = "PING!";
	
	    public static void Main()
	    {
	        AppDomain otherDomain = AppDomain.CreateDomain("otherDomain");
	
	        PingPong pp = new PingPong();
	        pp.MyCallBack();
	        pp.greetings = "PONG!";
	        otherDomain.DoCallBack(new CrossAppDomainDelegate(pp.MyCallBack));
	
	    }
	
	    public void MyCallBack()
	    {
	        string name = AppDomain.CurrentDomain.FriendlyName;
	        if (name == AppDomain.CurrentDomain.SetupInformation.ApplicationName)
	        {
	            name = "defaultDomain";
	        }
	        Console.WriteLine(greetings + " from " + name);
	    }
	}
snippet dir_getlastaccess

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dir_GetLastAccess/dir_getlastaccess.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string path = @"c:\MyDir";
	            if (!Directory.Exists(path)) 
	            {
	                Directory.CreateDirectory(path);
	            }
	            Directory.SetLastAccessTime(path, new DateTime(1985,5,4));
	
	            DateTime dt = Directory.GetLastAccessTime(path);
	            Console.WriteLine("The last access time for this directory was {0}", dt);
				
	            Directory.SetLastAccessTime(path, DateTime.Now);
	            dt = Directory.GetLastAccessTime(path);
	            Console.WriteLine("The last access time for this directory was {0}", dt);
	        } 
	
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}
snippet dir_setlastaccess

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dir_SetLastAccess/dir_setlastaccess.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string path = @"c:\MyDir";
	            if (!Directory.Exists(path)) 
	            {
	                Directory.CreateDirectory(path);
	            }
	            Directory.SetLastAccessTime(path, new DateTime(1985,5,4));
	
	            DateTime dt = Directory.GetLastAccessTime(path);
	            Console.WriteLine("The last access time for this directory was {0}", dt);
				
	            Directory.SetLastAccessTime(path, DateTime.Now);
	            dt = Directory.GetLastAccessTime(path);
	            Console.WriteLine("The last access time for this directory was {0}", dt);
	        } 
	
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}
snippet numberdecimaldigits

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalDigits/numberdecimaldigits.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Int64 myInt = -1234;
	      Console.WriteLine( myInt.ToString( "N", nfi ) );
	
	      nfi.NumberDecimalDigits = 4;
	      Console.WriteLine( myInt.ToString( "N", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	-1,234.00
	-1,234.0000
	*/
	   

snippet numberdecimalseparator

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalSeparator/numberdecimalseparator.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Int64 myInt = 123456789;
	      Console.WriteLine( myInt.ToString( "N", nfi ) );
	
	      nfi.NumberDecimalSeparator = " ";
	      Console.WriteLine( myInt.ToString( "N", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	123,456,789.00
	123,456,789 00
	*/
	   

snippet currencydecimaldigits

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalDigits/currencydecimaldigits.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Int64 myInt = -1234;
	      Console.WriteLine( myInt.ToString( "C", nfi ) );
	
	      nfi.CurrencyDecimalDigits = 4;
	      Console.WriteLine( myInt.ToString( "C", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	($1,234.00)
	($1,234.0000)
	*/
	   

snippet currencydecimalseparator

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalSeparator/currencydecimalseparator.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Int64 myInt = 123456789;
	      Console.WriteLine( myInt.ToString( "C", nfi ) );
	
	      nfi.CurrencyDecimalSeparator = " ";
	      Console.WriteLine( myInt.ToString( "C", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	$123,456,789.00
	$123,456,789 00
	*/
	   

snippet file_open1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_Open1/file_open1.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = Path.GetTempFileName();
	        using (FileStream fs = File.Open(path, FileMode.Open, FileAccess.Write, FileShare.None)) 
	        {
	            Byte[] info = new UTF8Encoding(true).GetBytes("This is some text in the file.");
	            fs.Write(info, 0, info.Length);
	        }
	        
	
	        using (FileStream fs = File.Open(path, FileMode.Open)) 
	        {
	            byte[] b = new byte[1024];
	            UTF8Encoding temp = new UTF8Encoding(true);
	
	            while (fs.Read(b,0,b.Length) > 0) 
	            {
	                Console.WriteLine(temp.GetString(b));
	            }
	        }
	    }
	}

snippet conceptual_timespan_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_custom/customparseexample1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      string value = null;
	      TimeSpan interval;
	
	      value = "6";
	      if (TimeSpan.TryParseExact(value, "%d", null, out interval))
	         Console.WriteLine("{0} --> {1}", value, interval.ToString("c"));
	      else
	         Console.WriteLine("Unable to parse '{0}'", value);
	      
	      value = "16:32.05";
	      if (TimeSpan.TryParseExact(value, @"mm\:ss\.ff", null, out interval))
	         Console.WriteLine("{0} --> {1}", value, interval.ToString("c"));
	      else
	         Console.WriteLine("Unable to parse '{0}'", value);
	
	      value= "12.035";
	      if (TimeSpan.TryParseExact(value, "ss\\.fff", null, out interval))
	         Console.WriteLine("{0} --> {1}", value, interval.ToString("c"));
	      else
	         Console.WriteLine("Unable to parse '{0}'", value);
	   }
	}

snippet cryptography_x509certificates_x500distinguishedname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_X509Certificates_X500DistinguishedName/x500.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Permissions;
	using System.IO;
	using System.Security.Cryptography.X509Certificates;
	
	class X500Sample
	{
		static void Main()
		{
			try
			{
				X509Store store = new X509Store("MY", StoreLocation.CurrentUser);
				store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);
				X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;
				X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid, DateTime.Now, false);
				X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, "Test Certificate Select", "Select a certificate from the following list to get information on that certificate", X509SelectionFlag.MultiSelection);
				Console.WriteLine("Number of certificates: {0}{1}", scollection.Count, Environment.NewLine);
				foreach (X509Certificate2 x509 in scollection)
				{
					X500DistinguishedName dname = new X500DistinguishedName(x509.SubjectName);
					Console.WriteLine("X500DistinguishedName: {0}{1}", dname.Name, Environment.NewLine);
					x509.Reset();
				}
				store.Close();
			}
			catch (CryptographicException)
			{
				Console.WriteLine("Information could not be written out for this certificate.");
			}
	
		}
	}
snippet regularexpressions_language_escapes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_escapes/escape1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string delimited = @"\G(.+)[\t\u007c](.+)\r?\n";
	      string input = "Mumbai, India|13,922,125\t\n" + 
	                            "Shanghai, China\t13,831,900\n" + 
	                            "Karachi, Pakistan|12,991,000\n" + 
	                            "Delhi, India\t12,259,230\n" + 
	                            "Istanbul, Turkey|11,372,613\n";
	      Console.WriteLine("Population of the World's Largest Cities, 2009");
	      Console.WriteLine();
	      Console.WriteLine("{0,-20} {1,10}", "City", "Population");
	      Console.WriteLine();
	      foreach (Match match in Regex.Matches(input, delimited))
	         Console.WriteLine("{0,-20} {1,10}", match.Groups[1].Value, 
	                                            match.Groups[2].Value);
	   }
	}

snippet process_start_instance

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Process_Start_instance/processstart.cs

	using System;
	using System.Diagnostics;
	using System.ComponentModel;
	
	namespace MyProcessSample
	{
	    class MyProcess
	    {
	        public static void Main()
	        {
	            try
	            {
	                using (Process myProcess = new Process())
	                {
	                    myProcess.StartInfo.UseShellExecute = false;
	                    myProcess.StartInfo.FileName = "C:\\HelloWorld.exe";
	                    myProcess.StartInfo.CreateNoWindow = true;
	                    myProcess.Start();
	                }
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine(e.Message);
	            }
	        }
	    }
	}

snippet conceptual_regularexpressions_design

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_design/lazy1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string greedyPattern = @".+(\d+)\.";
	      string lazyPattern = @".+?(\d+)\.";
	      string input = "This sentence ends with the number 107325.";
	      Match match;
	      
	      match = Regex.Match(input, greedyPattern);
	      if (match.Success)
	         Console.WriteLine("Number at end of sentence (greedy): {0}", 
	                           match.Groups[1].Value);
	      else
	         Console.WriteLine("{0} finds no match.", greedyPattern);
	             
	      match = Regex.Match(input, lazyPattern);
	      if (match.Success)
	         Console.WriteLine("Number at end of sentence (lazy): {0}", 
	                           match.Groups[1].Value);
	      else
	         Console.WriteLine("{0} finds no match.", lazyPattern);
	   }
	}

snippet cipherreference2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CipherReference2/example.cs

	using System;
	using System.Security.Cryptography.Xml;
	using System.Xml;
	using System.IO;
	
	namespace CipherReference2
	{
		class CipherReference2
		{
			[STAThread]
			static void Main(string[] args)
			{
	
				Transform base64 = new XmlDsigBase64Transform();
	
				TransformChain tc = new TransformChain();
	
				tc.Add(base64);
	
				CipherReference reference = new CipherReference(uri, tc);
				Console.WriteLine("Cipher Reference data: {0}", reference.GetXml().OuterXml);
			}
		}
	}
snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/ecmascript1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] values = { "целый мир", "the whole world" };
	      string pattern = @"\b(\w+\s*)+";
	      foreach (var value in values)
	      {
	         Console.Write("Canonical matching: ");
	         if (Regex.IsMatch(value, pattern))
	            Console.WriteLine("'{0}' matches the pattern.", value);
	         else
	            Console.WriteLine("{0} does not match the pattern.", value);
	         
	         Console.Write("ECMAScript matching: ");
	         if (Regex.IsMatch(value, pattern, RegexOptions.ECMAScript))
	            Console.WriteLine("'{0}' matches the pattern.", value);
	         else
	            Console.WriteLine("{0} does not match the pattern.", value);
	         Console.WriteLine();
	      }
	   }
	}

snippet string_concat5

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_concat5/string.concat5.cs

	using System;
	
	class stringConcat5 {
	    public static void Main() {
	    int i = -123;
	    Object o = i;
	    Object[] objs = new Object[] {-123, -456, -789};
	
	    Console.WriteLine("Concatenate 1, 2, and 3 objects:");
	    Console.WriteLine("1) {0}", String.Concat(o));
	    Console.WriteLine("2) {0}", String.Concat(o, o));
	    Console.WriteLine("3) {0}", String.Concat(o, o, o));
	
	    Console.WriteLine("\nConcatenate 4 objects and a variable length parameter list:");
	    Console.WriteLine("4) {0}", String.Concat(o, o, o, o));
	    Console.WriteLine("5) {0}", String.Concat(o, o, o, o, o));
	
	    Console.WriteLine("\nConcatenate a 3-element object array:");
	    Console.WriteLine("6) {0}", String.Concat(objs));
	    }
	}
snippet stringcopyto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringcopyto/stringcopyto.cs

	using System;
	
	public class CopyToTest {
	    public static void Main() {
	
	        string strSource = "changed";
	    char [] destination = { 'T', 'h', 'e', ' ', 'i', 'n', 'i', 't', 'i', 'a', 'l', ' ',
	                'a', 'r', 'r', 'a', 'y' };
	
	        Console.WriteLine( destination );
	
	        strSource.CopyTo ( 0, destination, 4, strSource.Length );
	
	        Console.WriteLine( destination );
	
	        strSource = "A different string";
	
	        strSource.CopyTo ( 2, destination, 3, 9 );
	
	        Console.WriteLine( destination );
	    }
	}

snippet codeconditionstatementexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeConditionStatementExample/codeconditionstatementexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeConditionStatementExample
	    {
	        public CodeConditionStatementExample()
	        {
	            CodeConditionStatement conditionalStatement = new CodeConditionStatement(
	                new CodeVariableReferenceExpression("boolean"),
	                new CodeStatement[] { new CodeCommentStatement("If condition is true, execute these statements.") },
	                new CodeStatement[] { new CodeCommentStatement("Else block. If condition is false, execute these statements.") } );
	
	
	    
	        }
	    }
	}
snippet conceptual_regex_language_substitutions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_substitutions/dollarsign1.cs

	using System;
	using System.Globalization;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] values= { "16.35", "19.72", "1234", "0.99"};
	      bool precedes = NumberFormatInfo.CurrentInfo.CurrencyPositivePattern % 2 == 0;
	      string cSeparator = NumberFormatInfo.CurrentInfo.CurrencyDecimalSeparator;
	      string symbol = NumberFormatInfo.CurrentInfo.CurrencySymbol;
	      if (symbol == "$") symbol = "$$";
	      
	      string pattern = @"\b(\d+)(" + cSeparator + @"(\d+))?"; 
	      string replacement = "$1$2";
	      replacement = precedes ? symbol + " " + replacement : replacement + " " + symbol;
	      foreach (string value in values)
	         Console.WriteLine("{0} --> {1}", value, Regex.Replace(value, pattern, replacement));
	   }
	}

snippet addincollectionpipelinehostsideadapter

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/BookInfoHostAdapter.cs

	using System;
	namespace LibraryContractsHostAdapters
	{
	public class BookInfoHostAdapter
	{
	
	    internal static LibraryContractsHAV.BookInfo ContractToViewAdapter(Library.IBookInfoContract contract)
	    {
	        if (!System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain(contract) &&
	            (contract.GetType().Equals(typeof(BookInfoViewToContractHostAdapter))))
	        {
	            return ((BookInfoViewToContractHostAdapter)(contract)).GetSourceView();
	
	        }
	        else {
	            return new BookInfoContractToViewHostAdapter(contract);
	        }
	    }
	
	    internal static Library.IBookInfoContract ViewToContractAdapter(LibraryContractsHAV.BookInfo view)
	    {
	        if (!System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain(view) &&
	            (view.GetType().Equals(typeof(BookInfoContractToViewHostAdapter))))
	        {
	            return ((BookInfoContractToViewHostAdapter)(view)).GetSourceContract();
	        }
	        else {
	            return new BookInfoViewToContractHostAdapter(view);
	        }
	    }
	}
	}

snippet microsoft_visualstudio_data_core_ivsdataclientobject

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Visualstudio_Data_Core_IVsDataClientObject/IVsDataClientObject.cs

	using System;
	using System.Diagnostics;
	using System.Runtime.InteropServices;
	using Microsoft.VisualStudio.Data.Core;
	
	[DataClientObject("1520C77F-09AF-40b4-B1FE-53C30A177C59")]
	public interface IVsDataSupportEntity
	{
	    void DoSomething();
	}
	
	[Guid("1520C77F-09AF-40b4-B1FE-53C30A177C59")]
	internal class ClientSupportEntity : IVsDataSupportEntity,
	    IVsDataClientObject<IVsDataSupportEntity>
	{
	    private IVsDataSupportEntity _providerObj;
	
	    public void Initialize(IVsDataSupportEntity providerObj)
	    {
	        if (providerObj == null)
	        {
	            throw new ArgumentNullException("providerObj");
	        }
	        _providerObj = providerObj;
	    }
	
	    public void DoSomething()
	    {
	        Trace.WriteLine("DoSomething started.");
	        _providerObj.DoSomething();
	        Trace.WriteLine("DoSomething finished.");
	    }
	}
snippet type_getinterfaces1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterfaces1/type_getinterfaces1.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    static void Main()
	    {
	        Console.WriteLine("\r\nInterfaces implemented by Dictionary<int, string>:\r\n");
	        
	        foreach (Type tinterface in typeof(Dictionary<int, string>).GetInterfaces())
	        {
	            Console.WriteLine(tinterface.ToString());
	        }
	
	    }
	}
	
	/* This example produces output similar to the following:
	
	Interfaces implemented by Dictionary<int, string>:
	
	System.Collections.Generic.IDictionary`2[System.Int32,System.String]
	System.Collections.Generic.ICollection`1[System.Collections.Generic.KeyValuePair`2[System.Int32,System.String]]
	System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[System.Int32,System.String]]
	System.Collection.IEnumerable
	System.Collection.IDictionary
	System.Collection.ICollection
	System.Runtime.Serialization.ISerializable
	System.Runtime.Serialization.IDeserializationCallback
	 */
	
	        
snippet cryptography_x509certificates_x509certificate_import

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_X509Certificates_X509Certificate_Import/sample.cs

	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	class X509
	{
	
	    static void Main()
	    {
	
	        string Certificate = "Certificate.cer";
	
	        X509Certificate cert = new X509Certificate();
	
	        cert.Import(Certificate);
	
	        string resultsTrue = cert.ToString(true);
	
	        Console.WriteLine(resultsTrue);
	
	        string resultsFalse = cert.ToString(false);
	
	        Console.WriteLine(resultsFalse);
	
	    }
	
	}
snippet xmldsig_verification

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG_Verification/source.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	using System.IO;
	using System.Xml;
	
	public class Verify {
	
	    public static void Main(String[] args) 
	    {
	
	        Console.WriteLine("Verifying " + args[0] + "...");
	
	        SignedXml signedXml = new SignedXml();
	
	        XmlDocument xmlDocument = new XmlDocument();
	        xmlDocument.PreserveWhitespace = true;
	        xmlDocument.Load(new XmlTextReader(args[0]));
	
	        XmlNodeList nodeList = xmlDocument.GetElementsByTagName("Signature");
	        signedXml.LoadXml((XmlElement)nodeList[0]);
	
	        if (signedXml.CheckSignature()) {
	            Console.WriteLine("Signature check OK");
	        } else {
	            Console.WriteLine("Signature check FAILED");
	        }
	
	    }
	}

snippet eventlog_exists_1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventLog_Exists_1/eventlog_exists_1.cs

	
	/*
	   The following sample demonstrates the 'Exists(String)'method of 
	   'EventLog' class. It checks for the existence of a log and displays 
	   the result accordingly.
	*/
	
	using System;
	using System.Diagnostics;              
	class EventLog_Exists_1
	{
	   public static void Main()
	   {
	      try
	      {
	         string myLog = "myNewLog";
	         if (EventLog.Exists(myLog))
	         {
	            Console.WriteLine("Log '"+myLog+"' exists.");
	         }
	         else
	         {
	            Console.WriteLine("Log '"+myLog+"' does not exist.");
	         }
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("Exception:"+ e.Message);
	      }
	   }
	}

snippet conceptual_basicio_textfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_basicio_textfiles/source6.cs

	using System;
	using System.IO;
	using System.Windows;
	
	namespace WpfApp2
	{
	    public partial class MainWindow : Window
	    {
	        public MainWindow()
	        {
	            InitializeComponent();
	        }
	        private async void ReadFileButton_Click(object sender, RoutedEventArgs e)
	        {
	            try
	            {
	                using (StreamReader sr = new StreamReader("TestFile.txt"))
	                {
	                    string line = await sr.ReadToEndAsync();
	                    ResultBlock.Text = line;
	                }
	            }
	            catch (FileNotFoundException ex)
	            {
	                ResultBlock.Text = ex.Message;
	            }
	        }
	    }
	}

snippet etwtracesmall

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/etwtracesmall/program.cs

	using System.Diagnostics.Tracing;
	using System.Collections.Generic;
	
	namespace Demo1
	{
	    class MyCompanyEventSource : EventSource
	    {
	        public static MyCompanyEventSource Log = new MyCompanyEventSource();
	
	        public void Startup() { WriteEvent(1); }
	        public void OpenFileStart(string fileName) { WriteEvent(2, fileName); }
	        public void OpenFileStop() { WriteEvent(3); }
	    }
	
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            string name = MyCompanyEventSource.GetName(typeof(MyCompanyEventSource));
	            IEnumerable<EventSource> eventSources = MyCompanyEventSource.GetSources();
	            MyCompanyEventSource.Log.Startup();
	            MyCompanyEventSource.Log.OpenFileStart("SomeFile");
	            MyCompanyEventSource.Log.OpenFileStop();
	        }
	    }
	}

snippet sys_glob_calendartype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_calendartype/caltype.cs

	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    GregorianCalendar grCal = new GregorianCalendar();
	    HijriCalendar     hiCal = new HijriCalendar();
	    JapaneseLunisolarCalendar 
	                      jaCal = new JapaneseLunisolarCalendar();
	    Display(grCal);
	    Display(hiCal);
	    Display(jaCal);
	    }
	
	    static void Display(Calendar c)
	    {
	    string name = c.ToString().PadRight(50, '.');
	    Console.WriteLine("{0} {1}", name, c.AlgorithmType);
	    }
	}
	/*
	This code example produces the following results:
	
	System.Globalization.GregorianCalendar............ SolarCalendar
	System.Globalization.HijriCalendar................ LunarCalendar
	System.Globalization.JapaneseLunisolarCalendar.... LunisolarCalendar
	
	*/
snippet portableclasslibrarymvvm

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/portableclasslibrarymvvm/customerrepository.cs

	using System;
	using System.Collections.Generic;
	using System.Linq;
	
	namespace SimpleMVVM.Model
	{
	    public class CustomerRepository
	    {
	        private List<Customer> _customers;
	
	        public CustomerRepository()
	        {
	            _customers = new List<Customer>
	            {
	                new Customer(){ CustomerID = 1, FullName="Dana Birkby", Phone="394-555-0181"},
	                new Customer(){ CustomerID = 2, FullName="Adriana Giorgi", Phone="117-555-0119"},
	                new Customer(){ CustomerID = 3, FullName="Wei Yu", Phone="798-555-0118"}
	            };
	        }
	
	        public List<Customer> GetCustomers()
	        {
	            return _customers;
	        }
	
	        public void UpdateCustomer(Customer SelectedCustomer)
	        {
	            Customer customerToChange = _customers.Single(c => c.CustomerID == SelectedCustomer.CustomerID);
	            customerToChange = SelectedCustomer;
	        }
	    }
	}

snippet regularexpressions_examples_changedateformats

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Examples_ChangeDateFormats/Example_ChangeDateFormats1.cs

	using System;
	using System.Globalization;
	using System.Text.RegularExpressions;
	
	public class Class1
	{
	   public static void Main()
	   {
	      string dateString = DateTime.Today.ToString("d", 
	                                        DateTimeFormatInfo.InvariantInfo);
	      string resultString = MDYToDMY(dateString);
	      Console.WriteLine("Converted {0} to {1}.", dateString, resultString);
	   }
	
	   static string MDYToDMY(string input) 
	   {
	      try {
	         return Regex.Replace(input, 
	               "\\b(?<month>\\d{1,2})/(?<day>\\d{1,2})/(?<year>\\d{2,4})\\b",
	               "${day}-${month}-${year}", RegexOptions.None,
	               TimeSpan.FromMilliseconds(150));
	      }         
	      catch (RegexMatchTimeoutException) {
	         return input;
	      }
	   }
	
	}

snippet conceptual_regularexpressions_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_bestpractices/compile2.cs

	using System;
	using System.IO;
	using System.Text.RegularExpressions;
	using Utilities.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      SentencePattern pattern = new SentencePattern();
	      StreamReader inFile = new StreamReader(@".\Dreiser_TheFinancier.txt");
	      string input = inFile.ReadToEnd();
	      inFile.Close();
	      
	      MatchCollection matches = pattern.Matches(input);
	      Console.WriteLine("Found {0:N0} sentences.", matches.Count);      
	   }
	}
	
	namespace Utilities.RegularExpressions 
	{
	   public class SentencePattern
	   {
	      public MatchCollection Matches(string input)
	      {
	         return null;
	      }
	   }
	}

snippet appdomain_assemblyload

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_AssemblyLoad/assemblyload.cs

	using System;
	using System.Reflection;
	
	class Test {
	
	   public static void Main() {
	      AppDomain currentDomain = AppDomain.CurrentDomain;
	      currentDomain.AssemblyLoad += new AssemblyLoadEventHandler(MyAssemblyLoadEventHandler);
	      
	      PrintLoadedAssemblies(currentDomain);
	
	      currentDomain.CreateInstance("System.Windows.Forms, Version, Culture, PublicKeyToken", "System.Windows.Forms.TextBox");
	      
	      PrintLoadedAssemblies(currentDomain);
	   }
	   
	   static void PrintLoadedAssemblies(AppDomain domain) {
	      Console.WriteLine("LOADED ASSEMBLIES:");
	      foreach (Assembly a in domain.GetAssemblies()) {
	         Console.WriteLine(a.FullName);
	      }
	      Console.WriteLine();
	   }
	   
	   static void MyAssemblyLoadEventHandler(object sender, AssemblyLoadEventArgs args) {
	      Console.WriteLine("ASSEMBLY LOADED: " + args.LoadedAssembly.FullName);
	      Console.WriteLine();
	   }
	}
snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/culturespecific3.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] cultureNames = { "en-US", "fr-FR", "es-MX", "de-DE" };
	      Decimal value = 1043.17m;
	      
	      foreach (var cultureName in cultureNames) {
	         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(cultureName);
	         Console.WriteLine("The current culture is {0}", 
	                           Thread.CurrentThread.CurrentCulture.Name);
	         Console.WriteLine(value.ToString("C2"));
	         Console.WriteLine();
	      }   
	   }
	}

snippet fieldinfo_isnotserialized

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsNotSerialized/fieldinfo_isnotserialized.cs

	using System;
	using System.Reflection;
	using System.Runtime.Serialization;
	
	public class MyClass 
	{
	    public short myShort;
	
	    [NonSerialized()]
	    public int myInt;
	}
	public class Type_IsNotSerializable
	{
	    public static void Main()
	    {  
	        Type myType = typeof(MyClass);
	 
	        FieldInfo[] myFields = myType.GetFields(BindingFlags.Public |
	            BindingFlags.NonPublic |
	            BindingFlags.Instance |
	            BindingFlags.Static);
	        Console.WriteLine("\nDisplaying whether or not the field is serializable.\n");
	      
	        for(int i = 0; i < myFields.Length; i++)
	            if(myFields[i].IsNotSerialized)
	                Console.WriteLine("The {0} field is not serializable.", myFields[i]);
	            else
	                Console.WriteLine("The {0} field is not serializable.", myFields[i]);
	    }
	}
snippet codenamespaceimportexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeNamespaceImportExample/codenamespaceimportexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeNamespaceImportExample
	    {
	        public CodeNamespaceImportExample()
	        {
	            CodeCompileUnit compileUnit = new CodeCompileUnit();
	
	            CodeNamespace testNamespace = new CodeNamespace("TestNamespace");
	            compileUnit.Namespaces.Add(testNamespace);
	
	            CodeNamespaceImport import1 = new CodeNamespaceImport("System");
	            testNamespace.Imports.Add(import1);
	            
	            
	
	        }
	    }
	}
snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/type1.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class InvoiceItem
	{
	   private uint invId = 0;
	   private uint itemId = 0;
	   private Nullable<uint> qty;
	
	   public InvoiceItem(uint sku, Nullable<uint> quantity)
	   {
	      itemId = sku;
	      qty = quantity;
	   }
	
	   public Nullable<uint> Quantity
	   {
	      get { return qty; }
	      set { qty = value; }
	   }
	
	   public uint InvoiceId
	   {
	      get { return invId; }
	      set { invId = value; }
	   }
	}

snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/culturespecific1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] cultureNames = { "en-US", "fr-FR", "es-MX", "de-DE" };
	      DateTime dateToFormat = new DateTime(2012, 5, 28, 11, 30, 0);
	      
	      foreach (var cultureName in cultureNames) {
	         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(cultureName);
	         Console.WriteLine("The current culture is {0}", 
	                           Thread.CurrentThread.CurrentCulture.Name);
	         Console.WriteLine(dateToFormat.ToString("F"));
	         Console.WriteLine();
	      }   
	   }
	}

snippet stringsubstring

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringsubstring/stringsubstring.cs

	using System;
	
	public class SubStringTest {
	    public static void Main() {
	        string [] info = { "Name: Felica Walker", "Title: Mz.", 
	                           "Age: 47", "Location: Paris", "Gender: F"};
	        int found = 0;
	
	        Console.WriteLine("The initial values in the array are:");
	        foreach (string s in info)
	            Console.WriteLine(s);
	
	        Console.WriteLine("\nWe want to retrieve only the key information. That is:");        
	        foreach (string s in info) {
	            found = s.IndexOf(": ");
	            Console.WriteLine("   {0}", s.Substring(found + 2));
	        }
	    }
	}

snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/matchcollection1.cs

	using System;
	using System.Collections.Generic;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	       MatchCollection matches;
	       List<string> results = new List<string>();
	       List<int> matchposition = new List<int>();
	   
	       Regex r = new Regex("abc");
	       matches = r.Matches("123abc4abcd");
	       foreach (Match match in matches)
	       {
	           results.Add(match.Value);
	           matchposition.Add(match.Index);
	       }
	       for (int ctr = 0; ctr < results.Count; ctr++)
	         Console.WriteLine("'{0}' found at position {1}.", 
	                           results[ctr], matchposition[ctr]);  
	   }
	}

snippet conceptual_strings_comparing

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_comparing/compare1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class CompareStringSample
	{
	   public static void Main()
	   {
	      string str1 = "Apple";
	      string str2 = "Æble"; 
	
	      Thread.CurrentThread.CurrentCulture = new CultureInfo("da-DK");
	      int result1 = String.Compare(str1, str2);
	      Console.WriteLine("\nWhen the CurrentCulture is \"da-DK\",\nthe " + 
	                        "result of comparing {0} with {1} is: {2}", str1, str2, 
	                        result1);
	
	      Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
	      int result2 = String.Compare(str1, str2);
	      Console.WriteLine("\nWhen the CurrentCulture is \"en-US\",\nthe " + 
	                        "result of comparing {0} with {1} is: {2}", str1, str2, 
	                        result2);
	   }
	}
snippet addincollectionpipelineaddinsideadapter/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/Properties/AssemblyInfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("Template")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("Template")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("87156a8e-cd27-4db3-89e8-7e8c794b8a68")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addincollectionpipelinehostsideadapter/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/Properties/AssemblyInfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("Template")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("Template")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("87156a8e-cd27-4db3-89e8-7e8c794b8a68")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addinp1addinsideadapters/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInSideAdapters/Properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("Template")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("Template")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("87156a8e-cd27-4db3-89e8-7e8c794b8a68")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addinp1addinviews/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInViews/Properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("Template")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("Template")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("87156a8e-cd27-4db3-89e8-7e8c794b8a68")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addinp1hostsideadapters/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1HostSideAdapters/Properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("Template")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("Template")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("87156a8e-cd27-4db3-89e8-7e8c794b8a68")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addinp1hva/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1HVA/Properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("Template")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("Template")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("87156a8e-cd27-4db3-89e8-7e8c794b8a68")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addinp2hostsideadapters/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP2HostSideAdapters/Properties/AssemblyInfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("Template")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("Template")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("87156a8e-cd27-4db3-89e8-7e8c794b8a68")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addinp2addincalcv2/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP2AddInCalcV2/Properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("SampleV2AddIn")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("SampleV2AddIn")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("26770f04-6258-406b-b12d-a01d5dbe66fb")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addinp1contract/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1Contract/Properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("CalculatorContracts")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("CalculatorContracts")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("4e36de57-4f2d-474e-98aa-f149f382e508")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addinp1addincalcv1/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInCalcV1/Properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("SampleCalculatorAddIn")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("SampleCalculatorAddIn")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2006")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("4b3919b8-f6c0-4f1b-b669-fab3460f1337")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet addincollectionpipelineaddinsideadapter

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/BookInfoAddInAdapter.cs

	using System;
	
	namespace LibraryContractsAddInAdapters 
	{
	    public class BookInfoAddInAdapter
	    {
	        internal static LibraryContractsBase.BookInfo ContractToViewAdapter(Library.IBookInfoContract contract)
	        {
	            if (!System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain(contract) &&
	                (contract.GetType().Equals(typeof(BookInfoViewToContractAddInAdapter))))
	            {
	                return ((BookInfoViewToContractAddInAdapter)(contract)).GetSourceView();
	            }
	            else 
	            {
	                return new BookInfoContractToViewAddInAdapter(contract);
	            }
	        }
	
	        internal static Library.IBookInfoContract ViewToContractAdapter(LibraryContractsBase.BookInfo view)
	        {
	            if (!System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain(view) &&
	                (view.GetType().Equals(typeof(BookInfoContractToViewAddInAdapter))))
	            {
	                return ((BookInfoContractToViewAddInAdapter)(view)).GetSourceContract();
	            }
	            else 
	            {
	                return new BookInfoViewToContractAddInAdapter(view);
	            }
	        }
	    }
	}

snippet unmanaged_debugging_mrv

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/unmanaged_debugging_mrv/mrv2.cs

	using System;
	
	public class Example
	{
	   private static Random rnd;
	   
	   public static void Main()
	   {
	      rnd = new Random();
	      Example ex = new Example();
	      double value = MathLib.GetComputedValue(ex.GetInt(), ex.GetDouble());
	      Console.WriteLine(value);
	   }
	
	   private int GetInt()
	   {
	      return rnd.Next(11, 100);
	   }
	
	   private double GetDouble()
	   {
	      return rnd.NextDouble();
	   }
	}
	
	
	public class MathLib
	{
	   public static double GetComputedValue(int val1, double val2)
	   {
	      return val1 * val2;
	   }
	}

snippet strings_changingcase

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Strings_ChangingCase/Example.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	public class Example
	{
	   public static void Main()
	   {
	      ConvertToUpperCase();
	      Console.WriteLine();
	      ConvertToLowerCase();
	   }
	
	   private static void ConvertToUpperCase()
	   {
	      string properString = "Hello World!";
	      Console.WriteLine(properString.ToUpper());
	   }
	
	   private static void ConvertToLowerCase()
	   {
	      string properString = "Hello World!";
	      Console.WriteLine(properString.ToLower());
	   }
	}
	
	
	

snippet appdomain_createcominstancefrom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_CreateComInstanceFrom/createcominstancefrom.cs

	using System;
	using System.Reflection;
	using System.Runtime.InteropServices;
	
	[ComVisible(true)]
	class MyComVisibleType {
	   public MyComVisibleType() {
	      Console.WriteLine("MyComVisibleType instantiated!");
	   }
	}
	
	[ComVisible(false)]
	class MyComNonVisibleType {
	   public MyComNonVisibleType() {
	      Console.WriteLine("MyComNonVisibleType instantiated!");
	   }
	}
	
	class Test {
	   public static void Main() {
	   }
	   
	   static void CreateComInstance(string typeName) {
	      try {
	         AppDomain currentDomain = AppDomain.CurrentDomain;
	         string assemblyName = currentDomain.FriendlyName;
	         currentDomain.CreateComInstanceFrom(assemblyName, typeName);
	      } catch (Exception e) {
	         Console.WriteLine(e.Message);
	      }
	   }
	}
snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/indirect2.cs

	using System;
	using System.Collections;
	using System.IO;
	
	public class Test
	{
	   const int initialTableCapacity = 100;
	   Hashtable h;
	   
	   public void PopulateFileTable(string directory)
	   {
	      h = new Hashtable(initialTableCapacity, 
	                        StringComparer.OrdinalIgnoreCase);
	            
	      foreach (string file in Directory.GetFiles(directory))
	            h.Add(file, File.GetCreationTime(file));
	   }
	   
	   public void PrintCreationTime(string targetFile)
	   {
	      Object dt = h[targetFile];
	      if (dt != null)
	      {
	         Console.WriteLine("File {0} was created at time {1}.",
	            targetFile, 
	            (DateTime) dt);
	      }
	      else
	      {
	         Console.WriteLine("File {0} does not exist.", targetFile);
	      }
	   }
	}

snippet finfo_copyto2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_CopyTo2/program.cs

	using System;
	using System.IO;
	
	class Test
	{
	
	    public static void Main()
	    {
	        string path = @"c:\SoureFile.txt";
	        string path2 = @"c:\NewFile.txt";
	        FileInfo fi1 = new FileInfo(path);
	        FileInfo fi2 = new FileInfo(path2);
	
	        try
	        {
	            using (FileStream fs = fi1.Create()) { }
	
	            if (File.Exists(path2))
	            {
	                fi2.Delete();
	            }
	
	            fi1.CopyTo(path2);
	            Console.WriteLine("{0} was copied to {1}.", path, path2);
	        }
	        catch (IOException ioex)
	        {
	            Console.WriteLine(ioex.Message);
	        }
	    }
	}
snippet file_getlastaccess

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_GetLastAccess/file_getlastaccess.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string path = @"c:\Temp\MyTest.txt";
	
	            if (!File.Exists(path)) 
	            {
	                File.Create(path);
	            }
	            File.SetLastAccessTime(path, new DateTime(1985,5,4));
	
	            DateTime dt = File.GetLastAccessTime(path);
	            Console.WriteLine("The last access time for this file was {0}.", dt);
				
	            File.SetLastAccessTime(path, DateTime.Now);
	            dt = File.GetLastAccessTime(path);
	            Console.WriteLine("The last access time for this file was {0}.", dt);
	        } 
	
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/settings1.cs

	using System;
	
	public class Class1
	{
	   public static void Main()
	   {
	
	   }
	
	   private static void SetRegistryKey()
	   {
	      Microsoft.Win32.RegistryKey lm = Microsoft.Win32.Registry.LocalMachine;
	      Microsoft.Win32.RegistryKey nf = lm.CreateSubKey(@"Software\Microsoft\.NETFramework");
	      nf.SetValue("String_LegacyCompareMode", 1, 
	                  Microsoft.Win32.RegistryValueKind.DWord);
	   }
	   
	   private static bool IsStringLegacyCompareMode()
	   {
	      Microsoft.Win32.RegistryKey lm = Microsoft.Win32.Registry.LocalMachine;
	      Microsoft.Win32.RegistryKey nf = lm.OpenSubKey(@"Software\Microsoft\.NETFramework");
	      if (nf == null) return false;
	         
	      return (bool) nf.GetValue("String_LegacyCompareMode", 0);
	   }
	
	}

snippet dir_createdir

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dir_CreateDir/dir_createdir.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\MyDir";
	
	        try 
	        {
	            if (Directory.Exists(path)) 
	            {
	                Console.WriteLine("That path exists already.");
	                return;
	            }
	
	            DirectoryInfo di = Directory.CreateDirectory(path);
	            Console.WriteLine("The directory was created successfully at {0}.", Directory.GetCreationTime(path));
	
	            di.Delete();
	            Console.WriteLine("The directory was deleted successfully.");
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        } 
	        finally {}
	    }
	}
snippet type_getevents2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/type_getevents2/type_getevents2.cs

	using System;
	using System.Reflection;
	using System.Security;
	
	class EventsSample
	{
	    public static void Main()
	    { 
	        try
	        {
	            BindingFlags myBindingFlags = BindingFlags.Instance | BindingFlags.Public;  
	            Type myTypeEvent = typeof(System.Windows.Forms.Button);
	            EventInfo[] myEventsBindingFlags = myTypeEvent.GetEvents(myBindingFlags);
	            Console.WriteLine("\nThe events on the Button class with the specified BindingFlags are:");
	            for (int index = 0; index < myEventsBindingFlags.Length; index++)
	            {
	                Console.WriteLine(myEventsBindingFlags[index].ToString());
	            }
	        }
	        catch(SecurityException e)
	        {
	            Console.WriteLine("SecurityException:" + e.Message);
	        }
	        catch(ArgumentNullException e)
	        {
	            Console.WriteLine("ArgumentNullException: " + e.Message);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception: " + e.Message);
	        }
	    }
	}
snippet gettypeonsteroids

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/source.cs

	using System;
	using System.Reflection;
	
	class Example
	{   static void Main()
	    {
	        string test = "System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]";
	        Type t = Type.GetType(test,
	                              (aName) => aName.Name == "MyAssembly" ? 
	                                  Assembly.LoadFrom(@".\MyPath\v5.0\MyAssembly.dll") : null,
	                              (assem, name, ignore) => assem == null ? 
	                                  Type.GetType(name, false, ignore) : 
	                                      assem.GetType(name, false, ignore)
	                             ); 
	        Console.WriteLine(t);
	
	        test = "System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]";
	        Type t2 = Type.GetType(test,
	                               (aName) => aName.Name == "MyAssembly" ? 
	                                   Assembly.LoadFrom(@".\MyPath\v5.0\MyAssembly.dll") : 
	                                   Assembly.Load(aName),
	                               (assem, name, ignore) => assem == null ? 
	                                   Type.GetType(name, false, ignore) : 
	                                       assem.GetType(name, false, ignore), true
	                              ); 
	        Console.WriteLine(t2);
	    }
	}
	
	
	

snippet file_openwrite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_OpenWrite/file_openwrite.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        using (FileStream fs = File.OpenWrite(path)) 
	        {
	            Byte[] info = 
	                new UTF8Encoding(true).GetBytes("This is to test the OpenWrite method.");
	
	            fs.Write(info, 0, info.Length);
	        }
	
	        using (FileStream fs = File.OpenRead(path)) 
	        {
	            byte[] b = new byte[1024];
	            UTF8Encoding temp = new UTF8Encoding(true);
	
	            while (fs.Read(b,0,b.Length) > 0) 
	            {
	                Console.WriteLine(temp.GetString(b));
	            }
	        }
	    }
	}

snippet type_getevents1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/type_getevents1/type_getevents1.cs

	using System;
	using System.Reflection;
	using System.Security;
	
	class EventsSample
	{
	    public static void Main()
	    { 
	        try
	        {
	            BindingFlags myBindingFlags = BindingFlags.Instance | BindingFlags.Public;  
	            Type myTypeEvent = typeof(System.Windows.Forms.Button);
	            EventInfo[] myEventsBindingFlags = myTypeEvent.GetEvents(myBindingFlags);
	            Console.WriteLine("\nThe events on the Button class with the specified BindingFlags are : ");
	            for (int index = 0; index < myEventsBindingFlags.Length; index++)
	            {
	                Console.WriteLine(myEventsBindingFlags[index].ToString());
	            }
	        }
	        catch(SecurityException e)
	        {
	            Console.WriteLine("SecurityException :" + e.Message);
	        }
	        catch(ArgumentNullException e)
	        {
	            Console.WriteLine("ArgumentNullException : " + e.Message);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception : " + e.Message);
	        }
	    }
	}
snippet fieldinfo_isspecialname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/fieldinfo_isspecialname.cs

	using System;
	using System.Reflection;
	using System.ComponentModel.Design;
	
	
	class FieldInfo_IsSpecialName
	{
	    public static void Main()
	    {     
	        try
	        {
	            Type myType = typeof(ViewTechnology);
	         
	            FieldInfo[] myField = myType.GetFields();
	
	            Console.WriteLine("\nDisplaying fields that have SpecialName attributes:\n");
	            for(int i = 0; i < myField.Length; i++)
	            {
	                if(myField[i].IsSpecialName)
	                {
	                    Console.WriteLine("The field {0} has a SpecialName attribute.",
	                        myField[i].Name);
	                }
	            }
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception : {0} " , e.Message);
	        }
	    }
	}
snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/dates1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   static DateTime[] dates = { new DateTime(2012, 10, 11, 7, 06, 0),
	                        new DateTime(2012, 10, 11, 18, 19, 0) };
	
	   public static void Main()
	   {
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("hr-HR");
	      ShowDayInfo();
	      Console.WriteLine();
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-GB");
	      ShowDayInfo(); 
	   }
	
	   private static void ShowDayInfo()
	   {
	      Console.WriteLine("Date: {0:D}", dates[0]);
	      Console.WriteLine("   Sunrise: {0:T}", dates[0]);
	      Console.WriteLine("   Sunset:  {0:T}", dates[1]);
	   }
	}

snippet dir_setlastwrite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dir_SetLastWrite/dir_setlastwrite.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string path = @"c:\MyDir";
	            if (!Directory.Exists(path)) 
	            {
	                Directory.CreateDirectory(path);
	            } 
	            else 
	            {
	                Directory.SetLastWriteTime(path, new DateTime(1985,4,3));
	            }
	
	            DateTime dt = Directory.GetLastWriteTime(path);
	            Console.WriteLine("The last write time for this directory was {0}", dt);
				
	            Directory.SetLastWriteTime(path, DateTime.Now);
	            dt = Directory.GetLastWriteTime(path);
	            Console.WriteLine("The last write time for this directory was {0}", dt);
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}
snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/type2.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class InvoiceItem
	{
	   private uint invId = 0;
	   private uint itemId = 0;
	   private Nullable<int> qty;
	
	   public InvoiceItem(int sku, Nullable<int> quantity)
	   {
	      if (sku <= 0)
	         throw new ArgumentOutOfRangeException("The item number is zero or negative.");
	      itemId = (uint) sku;
	      
	      qty = quantity;
	   }
	
	   public Nullable<int> Quantity
	   {
	      get { return qty; }
	      set { qty = value; }
	   }
	
	   public int InvoiceId
	   {
	      get { return (int) invId; }
	      set { 
	         if (value <= 0)
	            throw new ArgumentOutOfRangeException("The invoice number is zero or negative.");
	         invId = (uint) value; }
	   }
	}

snippet conceptual_parallel_for

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_parallel_for/for1.cs

	using System;
	using System.IO;
	using System.Threading;
	using System.Threading.Tasks;
	
	public class Example
	{
	   public static void Main()
	   {
	      long totalSize = 0;
	
	      String[] args = Environment.GetCommandLineArgs();
	      if (args.Length == 1) {
	         Console.WriteLine("There are no command line arguments.");
	         return;
	      }
	      if (! Directory.Exists(args[1])) {
	         Console.WriteLine("The directory does not exist.");
	         return;
	      }
	
	      String[] files = Directory.GetFiles(args[1]);
	      Parallel.For(0, files.Length,
	                   index => { FileInfo fi = new FileInfo(files[index]);
	                              long size = fi.Length;
	                              Interlocked.Add(ref totalSize, size);
	                   } );
	      Console.WriteLine("Directory '{0}':", args[1]);
	      Console.WriteLine("{0:N0} files, {1:N0} bytes", files.Length, totalSize);
	   }
	}

snippet formatting_dateandtime_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Custom/parseexact2digityear1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      string fmt = "dd-MMM-yy";
	      string value = "24-Jan-49";
	      
	      Calendar cal = (Calendar) CultureInfo.CurrentCulture.Calendar.Clone();
	      Console.WriteLine("Two Digit Year Range: {0} - {1}", 
	                        cal.TwoDigitYearMax - 99, cal.TwoDigitYearMax);
	      
	      Console.WriteLine("{0:d}", DateTime.ParseExact(value, fmt, null));
	      Console.WriteLine();
	      
	      cal.TwoDigitYearMax = 2099;
	      CultureInfo culture = (CultureInfo) CultureInfo.CurrentCulture.Clone();
	      culture.DateTimeFormat.Calendar = cal;
	      Thread.CurrentThread.CurrentCulture = culture;
	
	      Console.WriteLine("Two Digit Year Range: {0} - {1}", 
	                        cal.TwoDigitYearMax - 99, cal.TwoDigitYearMax);
	      Console.WriteLine("{0:d}", DateTime.ParseExact(value, fmt, null));
	   }
	}

snippet type_findmembers

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_FindMembers/type_findmembers.cs

	using System;
	using System.Reflection;
	
	class MyFindMembersClass
	{
	    public static void Main()
	    {
	        Object objTest = new Object();
	        Type objType = objTest.GetType ();
	        MemberInfo[] arrayMemberInfo;
	        try
	        {
	            arrayMemberInfo = objType.FindMembers(MemberTypes.Method,
	                BindingFlags.Public | BindingFlags.Static| BindingFlags.Instance,
	                new MemberFilter(DelegateToSearchCriteria),
	                "ReferenceEquals");
	
	            for(int index=0;index < arrayMemberInfo.Length ;index++)
	                Console.WriteLine ("Result of FindMembers -\t"+ arrayMemberInfo[index].ToString() +"\n");                 
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine ("Exception : " + e.ToString() );            
	        }           
	    }
	    public static bool DelegateToSearchCriteria(MemberInfo objMemberInfo, Object objSearch)
	    {
	        if(objMemberInfo.Name.ToString() == objSearch.ToString())
	            return true;
	        else 
	            return false;
	    }
	}
snippet fileinfodirectory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/fileinfodirectory/fileinfodirectory.cs

	using System;
	using System.IO;
	
	public class DirectoryTest 
	{
	    public static void Main() 
	    {
	
	        FileInfo fi = new FileInfo("temp.txt");
	
	        DirectoryInfo di = fi.Directory;
	
	        FileSystemInfo[] fsi = di.GetFileSystemInfos();
	
	        Console.WriteLine("The directory '{0}' contains the following files and directories:", di.FullName);
	
	        foreach (FileSystemInfo info in fsi)
	            Console.WriteLine(info.Name);
	    }
	}
	
snippet extostring

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ExToString/extostring.cs

	using System;
	
	public class TestClass
	{}
	
	public class Example 
	{
	   public static void Main()
	   {
	      var test = new TestClass();
	      Object[] objectsToCompare = { test, test.ToString(), 123,
	                                    123.ToString(), "some text",
	                                    "Some Text" };
	      string s = "some text";
	      foreach (var objectToCompare in objectsToCompare) {
	         try {
	            int i = s.CompareTo(objectToCompare);
	            Console.WriteLine("Comparing '{0}' with '{1}': {2}",
	                              s, objectToCompare, i);
	         }
	         catch (ArgumentException) {
	            Console.WriteLine("Bad argument: {0} (type {1})",
	                              objectToCompare,
	                              objectToCompare.GetType().Name);
	         }
	      }
	   }
	}
snippet conceptual_isolatedstorage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_isolatedstorage/source3.cs

	using System;
	using System.IO.IsolatedStorage;
	
	public class DeletingStores
	{
	    public static void Main()
	    {
	
	        IsolatedStorageFile isoStore1 =  IsolatedStorageFile.GetStore(IsolatedStorageScope.User |
	            IsolatedStorageScope.Domain | IsolatedStorageScope.Assembly, null, null);
	        Console.WriteLine("A store isolated by user, assembly, and domain has been obtained.");
	
	
	        IsolatedStorageFile isoStore2 = IsolatedStorageFile.GetStore(IsolatedStorageScope.User |
	            IsolatedStorageScope.Assembly, null, null);
	        Console.WriteLine("A store isolated by user and assembly has been obtained.");
	
	
	        isoStore1.Remove();
	        Console.WriteLine("The user, domain, and assembly isolated store has been deleted.");
	
	
	        IsolatedStorageFile.Remove(IsolatedStorageScope.User);
	        Console.WriteLine("All isolated stores for this user have been deleted.");
	
	}

snippet console_readkey2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_readkey2/rkbool.cs

	using System;
	
	class Example 
	{
	   public static void Main() 
	   {
	      ConsoleKeyInfo cki;
	      Console.TreatControlCAsInput = true;
	
	      Console.WriteLine("Press any combination of CTL, ALT, and SHIFT, and a console key.");
	      Console.WriteLine("Press the Escape (Esc) key to quit: \n");
	      do {
	         cki = Console.ReadKey(true);
	         Console.Write("You pressed ");
	         if ((cki.Modifiers & ConsoleModifiers.Alt) != 0) Console.Write("ALT+");
	         if ((cki.Modifiers & ConsoleModifiers.Shift) != 0) Console.Write("SHIFT+");
	         if ((cki.Modifiers & ConsoleModifiers.Control) != 0) Console.Write("CTL+");
	         Console.WriteLine("{0} (character '{1}')", cki.Key, cki.KeyChar);
	      } while (cki.Key != ConsoleKey.Escape);
	   }
	}

snippet addinp3host/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/Properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("addinP3Host")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("MSIT")]
	[assembly: AssemblyProduct("addinP3Host")]
	[assembly: AssemblyCopyright("Copyright © MSIT 2007")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("f2c81aad-86b9-43ca-84d2-2c1fa41908ce")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet streamreadwrite/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/streamreadwrite/properties/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	
	[assembly: AssemblyTitle("StreamReadWrite")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("StreamReadWrite")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("0c4f20aa-5f52-410a-9c31-f657aa2f575f")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]

snippet microsoft_visualstudio_data_core_ivsdatasiteableobject

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSiteableObject/IVsDataSiteableObject.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Framework;
	
	internal class MyConnectionProperties : DataConnectionProperties,
	    IVsDataSiteableObject<IVsDataProvider>,
	    IVsDataSiteableObject<IServiceProvider>
	{
	    private IVsDataProvider _provider;
	    private IServiceProvider _serviceProvider;
	
	    IVsDataProvider IVsDataSiteableObject<IVsDataProvider>.Site
	    {
	        get
	        {
	            return _provider;
	        }
	        set
	        {
	            _provider = value;
	        }
	    }
	
	    IServiceProvider IVsDataSiteableObject<IServiceProvider>.Site
	    {
	        get
	        {
	            return _serviceProvider;
	        }
	        set
	        {
	            _serviceProvider = value;
	        }
	    }
	}
snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/comwrappers.cs

	using System;
	using System.Runtime.InteropServices;
	
	public class Snippets
	{
	    public static void Main()
	    {
	    }
	
	    void M1([MarshalAs(UnmanagedType.LPWStr)] string msg)
	    {
	    }
	
	    [return: MarshalAs(UnmanagedType.LPWStr)]
	    public string GetMessage()
	    {
	        string msg = new string(new char[128]);
	        return msg;
	    }
	}
	
	class MsgText
	{
	    [MarshalAs(UnmanagedType.LPWStr)]
	    public string msg = "";
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/array1.cs

	using System;
	using System.Linq;
	
	[assembly: CLSCompliant(true)]
	
	public class Numbers
	{
	   public static Array GetTenPrimes()
	   {
	      Array arr = Array.CreateInstance(typeof(Int32), new int[] {10}, new int[] {1});
	      arr.SetValue(1, 1);
	      arr.SetValue(2, 2);
	      arr.SetValue(3, 3);
	      arr.SetValue(5, 4);
	      arr.SetValue(7, 5);
	      arr.SetValue(11, 6);
	      arr.SetValue(13, 7);
	      arr.SetValue(17, 8);
	      arr.SetValue(19, 9);
	      arr.SetValue(23, 10);
	
	      return arr; 
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      foreach(var number in Numbers.GetTenPrimes())
	         Console.WriteLine(number);
	
	   }
	}

snippet conceptual_regex_language_assertions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_assertions/contiguous1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "capybara,squirrel,chipmunk,porcupine,gopher," + 
	                     "beaver,groundhog,hamster,guinea pig,gerbil," + 
	                     "chinchilla,prairie dog,mouse,rat";
	      string pattern = @"\G(\w+\s?\w*),?";
	      Match match = Regex.Match(input, pattern);
	      while (match.Success) 
	      {
	         Console.WriteLine(match.Groups[1].Value);
	         match = match.NextMatch();
	      } 
	   }
	}

snippet dir_getcurdir

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dir_GetCurDir/dir_getcurdir.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string path = Directory.GetCurrentDirectory();
	            string target = @"c:\temp";
	            Console.WriteLine("The current directory is {0}", path);
	            if (!Directory.Exists(target)) 
	            {
	                Directory.CreateDirectory(target);
	            }
	
	            Environment.CurrentDirectory = (target);
	            if (path.Equals(Directory.GetCurrentDirectory())) 
	            {
	                Console.WriteLine("You are in the temp directory.");
	            } 
	            else 
	            {
	                Console.WriteLine("You are not in the temp directory.");
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}
snippet conceptual_resources_satellites

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_satellites/example.cs

	
	using System.Reflection;
	using System.Resources;
	
	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] cultureNames = { "en-GB", "en-US", "fr-FR", "ru-RU" };
	      Random rnd = new Random();
	      string cultureName = cultureNames[rnd.Next(0, cultureNames.Length)]; 
	      Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(cultureName);
	      Console.WriteLine("The current UI culture is {0}", 
	                        Thread.CurrentThread.CurrentUICulture.Name);
	      StringLibrary strLib = new StringLibrary();
	      string greeting = strLib.GetGreeting();
	      Console.WriteLine(greeting);
	   }
	}
	
	public class StringLibrary
	{
	   public string GetGreeting()
	   {
	      ResourceManager rm = new ResourceManager("Strings", 
	                                    Assembly.GetAssembly(typeof(StringLibrary)));
	      string greeting = rm.GetString("Greeting");
	      return greeting;
	   }
	}

snippet type_filterattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_FilterAttribute/type_filterattribute.cs

	using System;
	using System.Reflection;
	using System.Security;
	
	public class MyFilterAttributeSample
	{
	    public static void Main()
	    {
	        try
	        {
	            MemberFilter myFilter = Type.FilterAttribute;
	            Type myType = typeof(System.String);
	            MemberInfo[] myMemberInfoArray = myType.FindMembers(MemberTypes.Constructor
	                |MemberTypes.Method, BindingFlags.Public | BindingFlags.Static |
	                BindingFlags.Instance, myFilter, MethodAttributes.SpecialName);
	            foreach (MemberInfo myMemberinfo in myMemberInfoArray) 
	            { 
	                Console.Write ("\n" + myMemberinfo.Name);
	                Console.Write (" is a " + myMemberinfo.MemberType.ToString()); 
	            }
	        }
	        catch(ArgumentNullException e)
	        {
	            Console.Write("ArgumentNullException : " + e.Message); 
	        }   
	        catch(SecurityException e)
	        {
	            Console.Write("SecurityException : " + e.Message); 
	        }   
	        catch(Exception e)
	        {
	            Console.Write("Exception :" + e.Message); 
	        } 
	    }	
	}
snippet file_opentext

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_OpenText/file_opentext.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        if (!File.Exists(path)) 
	        {
	            using (FileStream fs = File.Create(path)) 
	            {
	                Byte[] info = 
	                    new UTF8Encoding(true).GetBytes("This is some text in the file.");
	
	                fs.Write(info, 0, info.Length);
	            }
	        }
	
	        using (StreamReader sr = File.OpenText(path)) 
	        {
	            string s = "";
	            while ((s = sr.ReadLine()) != null) 
	            {
	                Console.WriteLine(s);
	            }
	        }
	    }
	}

snippet threadabex

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/threadabex.cs

	using System;
	using System.Threading;
	using System.Security.Permissions;
	
	public class ThreadWork {
	    public static void DoWork() {
	        try {
	            for(int i=0; i<100; i++) {
	                Console.WriteLine("Thread - working."); 
	                Thread.Sleep(100);
	            }
	        }
	        catch(ThreadAbortException e) {
	            Console.WriteLine("Thread - caught ThreadAbortException - resetting.");
	            Console.WriteLine("Exception message: {0}", e.Message);
	            Thread.ResetAbort();
	        }
	        Console.WriteLine("Thread - still alive and working."); 
	        Thread.Sleep(1000);
	        Console.WriteLine("Thread - finished working.");
	    }
	}
	
	class ThreadAbortTest {
	    public static void Main() {
	        ThreadStart myThreadDelegate = new ThreadStart(ThreadWork.DoWork);
	        Thread myThread = new Thread(myThreadDelegate);
	        myThread.Start();
	        Thread.Sleep(100);
	        Console.WriteLine("Main - aborting my thread.");
	        myThread.Abort();
	        myThread.Join();
	        Console.WriteLine("Main ending."); 
	    }
	}
snippet type_filternameignorecase

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/type_filternameignorecase.cs

	using System;
	using System.Reflection;
	using System.Security;
	public class MyFilterNameIgnoreCaseSample
	{
	    public static void Main()
	    {
	        try
	        {		
	            MemberFilter myFilter = Type.FilterNameIgnoreCase;
	            Type myType = typeof(System.String);
	            MemberInfo[] myMemberinfo1 = myType.FindMembers(MemberTypes.Constructor
	                |MemberTypes.Method, BindingFlags.Public | BindingFlags.Static |
	                BindingFlags.Instance, myFilter, "C*");
	            foreach (MemberInfo myMemberinfo2 in myMemberinfo1) 
	            { 
	                Console.Write("\n" + myMemberinfo2.Name);
	                MemberTypes Mymembertypes = myMemberinfo2.MemberType; 
	                Console.WriteLine(" is a " + Mymembertypes.ToString()); 
	            }
	        }
	        catch(ArgumentNullException e)
	        {
	            Console.Write("ArgumentNullException : " + e.Message); 
	        }   
	        catch(SecurityException e)
	        {
	            Console.Write("SecurityException : " + e.Message); 
	        }   
	        catch(Exception e)
	        {
	            Console.Write("Exception : " + e.Message); 
	        }
	    }
	}
snippet file_setlastaccess

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_SetLastAccess/file_setlastaccess.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string path = @"c:\Temp\MyTest.txt";
	
	            if (!File.Exists(path)) 
	            {
	                File.Create(path);
	            }
	            File.SetLastAccessTime(path, new DateTime(1985,5,4));
	
	            DateTime dt = File.GetLastAccessTime(path);
	            Console.WriteLine("The last access time for this file was {0}.", dt);
				
	            File.SetLastAccessTime(path, DateTime.Now);
	            dt = File.GetLastAccessTime(path);
	            Console.WriteLine("The last access time for this file was {0}.", dt);
	
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet conceptual_regularexpressions_backtracking

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_backtracking/backtracking4.cs

	using System;
	using System.Diagnostics;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "b51:4:1DB:9EE1:5:27d60:f44:D4:cd:E:5:0A5:4a:D24:41Ad:";
	      bool matched;
	      Stopwatch sw;
	      
	      Console.WriteLine("With backtracking:");
	      string backPattern = "^(([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(::)$";
	      sw = Stopwatch.StartNew();
	      matched = Regex.IsMatch(input, backPattern);
	      sw.Stop();
	      Console.WriteLine("Match: {0} in {1}", Regex.IsMatch(input, backPattern), sw.Elapsed);
	      Console.WriteLine();
	      
	      Console.WriteLine("Without backtracking:");
	      string noBackPattern = "^((?>[0-9a-fA-F]{1,4}:)*(?>[0-9a-fA-F]{1,4}))*(::)$";
	      sw = Stopwatch.StartNew();
	      matched = Regex.IsMatch(input, noBackPattern);
	      sw.Stop();
	      Console.WriteLine("Match: {0} in {1}", Regex.IsMatch(input, noBackPattern), sw.Elapsed);
	   }
	}

snippet conceptual_regularexpressions_design

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_design/nonbacktracking1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] inputs = { "aaaaa", "aaaaab" };
	      string nonbacktrackingPattern = @"((?>a+))\w";
	      Match match;
	
	      foreach (string input in inputs) {
	         Console.WriteLine("Input: {0}", input);
	         match = Regex.Match(input, nonbacktrackingPattern);
	         Console.WriteLine("   Pattern: {0}", nonbacktrackingPattern);
	         if (match.Success) { 
	            Console.WriteLine("      Match: {0}", match.Value);
	            Console.WriteLine("      Group 1: {0}", match.Groups[1].Value);
	         }
	         else {
	            Console.WriteLine("      Match failed.");
	         }   
	      }
	      Console.WriteLine();            
	   }
	}

snippet regex_replace_instance

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Regex_Replace_Instance/sample.cs

	using System;
	using System.Text.RegularExpressions;
	
	class RegExSample
	{
	    static string CapText(Match m)
	    {
	        string x = m.ToString();
	        if (char.IsLower(x[0]))
	        {
	            return char.ToUpper(x[0]) + x.Substring(1, x.Length - 1);
	        }
	        return x;
	    }
	
	    static void Main()
	    {
	        string text = "four score and seven years ago";
	
	        Console.WriteLine($"text=[{text}]");
	
	        Regex rx = new Regex(@"\w+");
	
	        string result = rx.Replace(text, new MatchEvaluator(RegExSample.CapText));
	
	        Console.WriteLine($"result=[{result}]");
	    }
	}

snippet dir_getlastwrite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dir_GetLastWrite/dir_getlastwrite.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string path = @"c:\MyDir";
	            if (!Directory.Exists(path)) 
	            {
	                Directory.CreateDirectory(path);
	            } 
	            else 
	            {
	                Directory.SetLastWriteTime(path, new DateTime(1985,4,3));
	            }
	
	            DateTime dt = Directory.GetLastWriteTime(path);
	            Console.WriteLine("The last write time for this directory was {0}", dt);
				
	            Directory.SetLastWriteTime(path, DateTime.Now);
	            dt = Directory.GetLastWriteTime(path);
	            Console.WriteLine("The last write time for this directory was {0}", dt);
	        } 
	
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}
snippet conceptual_types_viewinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_types_viewinfo/source5.cs

	using System;
	using System.Reflection;
	
	class OtherSnippets
	{
	    public static void Main()
	    {
	         SnippetA();
	         SnippetB();
	    }
	
	    public static void SnippetA()
	    {
	        Assembly a = typeof(object).Module.Assembly;
	    }
	
	    public static void SnippetB()
	    {
	        Assembly a = Assembly.LoadFrom("MyExe.exe");
	        Type[] types2 = a.GetTypes();
	        foreach (Type t in types2)
	        {
	            Console.WriteLine(t.FullName);
	        }
	    }
	}

snippet dir_getcreation

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dir_GetCreation/dir_getcreation.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            DateTime dt = Directory.GetCreationTime(Environment.CurrentDirectory);
	
	            if (DateTime.Now.Subtract(dt).TotalDays > 364) 
	            {
	                Console.WriteLine("This directory is over a year old.");
	            } 
	            else if (DateTime.Now.Subtract(dt).TotalDays > 30) 
	            {
	                Console.WriteLine("This directory is over a month old.");
	            } 
	            else if (DateTime.Now.Subtract(dt).TotalDays <= 1) 
	            {
	                Console.WriteLine("This directory is less than a day old.");
	            } 
	            else 
	            {
	                Console.WriteLine("This directory was created on {0}", dt);
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}
snippet conceptual_regularexpressions_design

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_design/nonbacktracking2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] inputs = { "aaaaa", "aaaaab" };
	      string backtrackingPattern = @"(a+)\w";
	      Match match;
	
	      foreach (string input in inputs) {
	         Console.WriteLine("Input: {0}", input);
	         match = Regex.Match(input, backtrackingPattern);
	         Console.WriteLine("   Pattern: {0}", backtrackingPattern);
	         if (match.Success) { 
	            Console.WriteLine("      Match: {0}", match.Value);
	            Console.WriteLine("      Group 1: {0}", match.Groups[1].Value);
	         }
	         else {
	            Console.WriteLine("      Match failed.");
	         }   
	      }
	      Console.WriteLine();            
	   }
	}

snippet appdomain_unhandledexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/unhandledexception.cs

	using System;
	using System.Security.Permissions;
	
	public class Example 
	{
	   [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.ControlAppDomain)]
	   public static void Main()
	   {
	      AppDomain currentDomain = AppDomain.CurrentDomain;
	      currentDomain.UnhandledException += new UnhandledExceptionEventHandler(MyHandler);
	      
	      try {
	         throw new Exception("1");
	      } catch (Exception e) {
	         Console.WriteLine("Catch clause caught : {0} \n", e.Message);
	      }
	
	      throw new Exception("2");
	   }
	   
	   static void MyHandler(object sender, UnhandledExceptionEventArgs args) 
	   {
	      Exception e = (Exception) args.ExceptionObject;
	      Console.WriteLine("MyHandler caught : " + e.Message);
	      Console.WriteLine("Runtime terminating: {0}", args.IsTerminating);
	   }
	}

snippet codememberfieldexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeMemberFieldExample/codememberfieldexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeMemberFieldExample
	    {
	        public CodeMemberFieldExample()
	        {
	            CodeTypeDeclaration type1 = new CodeTypeDeclaration("FieldTest");
	
	            CodeMemberField field1 = new CodeMemberField("System.String", "TestStringField");
	            type1.Members.Add( field1 );
	
	            CodeConstructor constructor1 = new CodeConstructor();
	            constructor1.Attributes = MemberAttributes.Public;            
	            type1.Members.Add( constructor1 );
	            
	
	        }
	    }
	}
snippet datetime_operators

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_Operators/class1.cs

	using System;
	
	namespace OpOverloads
	{
		class Class1
		{
			static void Main(string[] args)
			{
				System.DateTime dTime = new System.DateTime(1980, 8, 5);
	
				System.TimeSpan tSpan 
					= new System.TimeSpan(17, 4, 2, 1); 
	
				System.DateTime result = dTime + tSpan;
	
				System.Console.WriteLine(result);
	
				System.DateTime april19 = new DateTime(2001, 4, 19);
				System.DateTime otherDate = new DateTime(1991, 6, 5);
	
				bool areEqual = april19 == otherDate;
					
				otherDate = new DateTime(2001, 4, 19);
				areEqual = april19 == otherDate;
			}
		}
	}

snippet enumparse

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/enumparse/EnumParse.cs

	using System;
	
	public class ParseTest
	{
	    [FlagsAttribute]
	    enum Colors { Red = 1, Green = 2, Blue = 4, Yellow = 8 };
	
	    public static void Main()
	    {
	        Console.WriteLine("The entries of the Colors enumeration are:");
	        foreach (string colorName in Enum.GetNames(typeof(Colors)))
	        {
	            Console.WriteLine("{0} = {1:D}", colorName, 
	                                         Enum.Parse(typeof(Colors), colorName));
	        }
	        Console.WriteLine();
	
	        Colors orange = (Colors) Enum.Parse(typeof(Colors), "Red, Yellow");
	        Console.WriteLine("The orange value {0:D} has the combined entries of {0}", 
	                           orange);
	    }
	}
	
	/*
	This code example produces the following results:
	
	The entries of the Colors Enum are:
	Red = 1
	Green = 2
	Blue = 4
	Yellow = 8
	
	The orange value 9 has the combined entries of Red, Yellow
	
	*/

snippet generatingahash

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/generatingahash/program.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	using System.Text;
	
	class Class1
	{
	    static void Main(string[] args)
	    {
	        byte[] hashValue;
	
	        string messageString = "This is the original message!";
	
	        UnicodeEncoding ue = new UnicodeEncoding();
	
	        byte[] messageBytes = ue.GetBytes(messageString);
	
	        SHA1Managed shHash = new SHA1Managed();
	
	        hashValue = shHash.ComputeHash(messageBytes);
	
	        foreach (byte b in hashValue)
	        {
	            Console.Write("{0} ", b);
	        }
	    }
	}
	

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/unmanagedptr1.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class ArrayHelper
	{
	   unsafe public static Array CreateInstance(Type type, int* ptr, int items)
	   {
	      Array arr = Array.CreateInstance(type, items);
	      int* addr = ptr;
	      for (int ctr = 0; ctr < items; ctr++) {
	          int value = *addr;
	          arr.SetValue(value, ctr);
	          addr++;
	      }
	      return arr;
	   }
	}   
	
	public class Example
	{
	   public static void Main()
	   {
	      int[] numbers = {3, 6, 9, 12 };
	      int[] numbers2;
	      unsafe {
	         fixed(int* ptr = numbers) {
	            numbers2 = (int[]) ArrayHelper.CreateInstance(typeof(int), ptr, numbers.Length);
	         }   
	      }
	      foreach (var number2 in numbers2)
	         Console.WriteLine(number2);
	   }
	} 
snippet sys_txt_rgxcompinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_txt_rgxCompInfo/genFishRegex.cs

	
	namespace MyApp
	{
	    using System;
	    using System.Reflection;
	    using System.Text.RegularExpressions;
	    class GenFishRegEx
	    {
	        public static void Main()
	        {
	        string pat = @"(\w+)\s+(fish)";
	
	        RegexCompilationInfo rci = new RegexCompilationInfo(
	                    pat, RegexOptions.IgnoreCase, 
	                    "FishRegex", "MyApp", true);
	
	        AssemblyName an = new AssemblyName();
	        an.Name = "FishRegex";
	        RegexCompilationInfo[] rciList = { rci };
	
	        Regex.CompileToAssembly(rciList, an);
	        }
	    }
	}

snippet microsoft_visualstudio_data_core_dataclientobjectattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Visualstudio_Data_Core_DataClientObjectAttribute/DataClientObjectAttrib.cs

	using System;
	using System.Diagnostics;
	using System.Runtime.InteropServices;
	using Microsoft.VisualStudio.Data.Core;
	
	namespace DataClientObjectAttrib
	{
	    [DataClientObject("1520C77F-09AF-40b4-B1FE-53C30A177C59")]
	    public interface IVsDataSupportEntity
	    {
	        void DoSomething();
	    }
	
	    [Guid("1520C77F-09AF-40b4-B1FE-53C30A177C59")]
	    internal class ClientSupportEntity : IVsDataSupportEntity,
	        IVsDataClientObject<IVsDataSupportEntity>
	    {
	        private IVsDataSupportEntity _providerObj;
	
	        public void Initialize(IVsDataSupportEntity providerObj)
	        {
	            if (providerObj == null)
	            {
	                throw new ArgumentNullException("providerObj");
	            }
	            _providerObj = providerObj;
	        }
	
	        public void DoSomething()
	        {
	            Trace.WriteLine("DoSomething started.");
	            _providerObj.DoSomething();
	            Trace.WriteLine("DoSomething finished.");
	        }
	    }
	}
snippet assembly_getexportedtypes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Assembly_GetExportedTypes/source.cs

	using System;
	using System.Reflection;
	
	public class Example
	{
	    public static void Main()
	    {
	        foreach (Type t in typeof(Example).Assembly.GetExportedTypes())
	        {
	            Console.WriteLine(t);
	        }
	    }
	}
	
	public class PublicClass
	{
	    public class PublicNestedClass {}
	
	    protected class ProtectedNestedClass {}
	 
	    internal class FriendNestedClass {}
	
	    private class PrivateNestedClass {}
	}
	
	internal class FriendClass
	{
	    public class PublicNestedClass {}
	
	    protected class ProtectedNestedClass {}
	
	    internal class FriendNestedClass {}
	
	    private class PrivateNestedClass {}
	}

snippet addinp2hostsideadapters

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP2HostSideAdapters/Calc2ContractToViewHostSideAdapter.cs

	using System.AddIn.Pipeline;
	using CalcHVAs;
	using CalculatorContracts;
	
	namespace CalcHostSideAdapters {
	    
	    
	[HostAdapter]
	public class CalculatorContractToViewHostAdapter : Calculator {
	
	    private CalculatorContracts.ICalc2Contract _contract;
	
	    private System.AddIn.Pipeline.ContractHandle _handle;
	
	    public CalculatorContractToViewHostAdapter(ICalc2Contract contract) {
	        _contract = contract;
	        _handle = new System.AddIn.Pipeline.ContractHandle(contract);
	    }
	
	
	    public override string Operations
	    {
	        get 
	        { 
	            return _contract.GetAvailableOperations(); 
	        }
	    }
	
	    public override double Operate(string operation, double a, double b)
	    {
	        return _contract.Operate(operation, a, b);
	    }
	 }
	}
snippet cryptography_x509certificates_x509certificate_import_export

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_X509Certificates_X509Certificate_Import_Export/sample.cs

	using System;
	using System.Security.Cryptography.X509Certificates;
	
	
	public class X509
	{
	
	    public static void Main()
	    {
	
	        string Certificate = "test.pfx";
	
	        X509Certificate cert = new X509Certificate(Certificate);
	
	
	        byte[] certData = cert.Export(X509ContentType.Cert);
	
	        X509Certificate newCert = new X509Certificate(certData);
	
	        string resultsTrue = newCert.ToString(true);
	
	        Console.WriteLine(resultsTrue);
	
	        string resultsFalse = newCert.ToString(false);
	
	        Console.WriteLine(resultsFalse);
	
	    }
	
	}
snippet type_getnestedtypes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedTypes/type_getnestedtypes.cs

	
	using System;
	using System.Reflection;
	public class MyClass 
	{
	    public class NestClass 
	    {
	        public static int myPublicInt=0;
	    }
	    public struct NestStruct
	    {
	        public static int myPublicInt=0;
	    }
	}
	
	public class MyMainClass 
	{
	    public static void Main() 
	    {
	        try
	        {
	            Type myType=typeof(MyClass);
	            Type[] nestType=myType.GetNestedTypes();
	            Console.WriteLine("The number of nested types is {0}.", nestType.Length);
	            foreach(Type t in nestType)
	                Console.WriteLine("Nested type is {0}.", t.ToString());
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Error"+e.Message);  
	        }         
	    }
	}

snippet dirinfo_class_example

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DirInfo_Class_Example/dirinfo_class_example.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        DirectoryInfo di = new DirectoryInfo(@"c:\MyDir");
	        try 
	        {
	            if (di.Exists) 
	            {
	                Console.WriteLine("That path exists already.");
	                return;
	            }
	
	            di.Create();
	            Console.WriteLine("The directory was created successfully.");
	
	            di.Delete();
	            Console.WriteLine("The directory was deleted successfully.");
	
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        } 
	        finally {}
	    }
	}

snippet assemblyinstaller_checkifinstallable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller_CheckIfInstallable/assemblyinstaller_checkifinstallable.cs

	
	/* The following example demonstrates the 'CheckIfInstallable' method
	   of the 'AssemblyInstaller' class.
	   The 'CheckIfInstallable' method is applied to an existent and 
	   nonexistent assembly and the results of the call are displayed 
	   onto the console.
	*/
	using System;
	using System.Configuration.Install;
	
	
	
	class MyCheckIfInstallableClass:Installer
	{
	   static void Main()
	   {
	
	
	      try
	      {
	         AssemblyInstaller.CheckIfInstallable( "MyAssembly_CheckIfInstallable.exe" );
	
	         Console.WriteLine( "The assembly 'MyAssembly_CheckIfInstallable' is installable" );
	
	         AssemblyInstaller.CheckIfInstallable( "NonExistant" );
	      }
	      catch( Exception )
	      {
	      }
	
	
	   }
	}
snippet file_openread

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_OpenRead/file_openread.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        if (!File.Exists(path)) 
	        {
	            using (FileStream fs = File.Create(path)) 
	            {
	                Byte[] info = new UTF8Encoding(true).GetBytes("This is some text in the file.");
	
	                fs.Write(info, 0, info.Length);
	            }
	        }
	
	        using (FileStream fs = File.OpenRead(path)) 
	        {
	            byte[] b = new byte[1024];
	            UTF8Encoding temp = new UTF8Encoding(true);
	
	            while (fs.Read(b,0,b.Length) > 0) 
	            {
	                Console.WriteLine(temp.GetString(b));
	            }
	        }
	    }
	}

snippet adunload

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADUnload/adunload.cs

	using System;
	using System.Reflection;
	using System.Security.Policy;
	class ADUnload
	{
		public static void Main()
		{
	
			Evidence adevidence = AppDomain.CurrentDomain.Evidence;
	
	 		AppDomain domain = AppDomain.CreateDomain("MyDomain", adevidence);
	
	            	Console.WriteLine("Host domain: " + AppDomain.CurrentDomain.FriendlyName);
	            	Console.WriteLine("child domain: " + domain.FriendlyName);
			AppDomain.Unload(domain);
	
			try
			{
			Console.WriteLine();
	            	Console.WriteLine("child domain: " + domain.FriendlyName);
			}
	
			catch (AppDomainUnloadedException e)
			{
			Console.WriteLine("The appdomain MyDomain does not exist.");
			}
			
		}
		
	}
	

snippet file_create2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_Create2/file_create2.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        if (File.Exists(path)) 
	        {
	            File.Delete(path);
	        }
	
	        using (FileStream fs = File.Create(path, 1024)) 
	        {
	            Byte[] info = new UTF8Encoding(true).GetBytes("This is some text in the file.");
	            fs.Write(info, 0, info.Length);
	        }
	
	        using (StreamReader sr = File.OpenText(path)) 
	        {
	            string s = "";
	            while ((s = sr.ReadLine()) != null) 
	            {
	                Console.WriteLine(s);
	            }
	        }
	    }
	}

snippet directoryinfo_usage_example

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DirectoryInfo_Usage_Example/copydirectory.cs

	using System;
	using System.IO;
	
	namespace DirectoryInfoCS2
	{
	    class Class1
	    {
	        static public void CopyDirectory(string SourceDirectory, string TargetDirectory)
	        {
	            DirectoryInfo	source = new DirectoryInfo(SourceDirectory);
	            DirectoryInfo	target = new DirectoryInfo(TargetDirectory);
				
	            if(!source.Exists)
	                return;
	            if(!target.Exists)
	                target.Create();
				
	            FileInfo[] sourceFiles = source.GetFiles();	
	            for(int i = 0; i < sourceFiles.Length; ++i)
	                File.Copy(sourceFiles[i].FullName, target.FullName + "\\" + sourceFiles[i].Name,true);
				
	            DirectoryInfo[] sourceDirectories = source.GetDirectories();	
	            for(int j = 0; j < sourceDirectories.Length; ++j)
	                CopyDirectory(sourceDirectories[j].FullName,target.FullName +"\\" + sourceDirectories[j].Name);
	        }
	        
	        static void Main(string[] args)
	        {
	            CopyDirectory("D:\\Tools","D:\\NewTools");
	        }
	    }
	}
snippet file_setlastwrite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_SetLastWrite/file_setlastwrite.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string path = @"c:\Temp\MyTest.txt";
	            if (!File.Exists(path)) 
	            {
	                File.Create(path);
	            } 
	            else 
	            {
	                File.SetLastWriteTime(path, new DateTime(1985,4,3));
	            }
	
	            DateTime dt = File.GetLastWriteTime(path);
	            Console.WriteLine("The last write time for this file was {0}.", dt);
				
	            File.SetLastWriteTime(path, DateTime.Now);
	            dt = File.GetLastWriteTime(path);
	            Console.WriteLine("The last write time for this file was {0}.", dt);
	
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet platformid_class

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/platformID_class/pid.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string msg1 = "This is a Windows operating system.";
	    string msg2 = "This is a Unix operating system.";
	    string msg3 = "ERROR: This platform identifier is invalid.";
	
	
	    OperatingSystem os = Environment.OSVersion;
	    PlatformID     pid = os.Platform;
	    switch (pid) 
	        {
	        case PlatformID.Win32NT:
	        case PlatformID.Win32S:
	        case PlatformID.Win32Windows:
	        case PlatformID.WinCE:
	            Console.WriteLine(msg1);
	            break;
	        case PlatformID.Unix:
	            Console.WriteLine(msg2);
	            break;
	        default:
	            Console.WriteLine(msg3);
	            break;
	        }
	    }
	}
	/*
	This example produces the following results:
	
	This is a Windows operating system.
	*/
snippet createinstanceandunwrap2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CreateInstanceAndUnwrap2/source.cs

	using System;
	using System.Reflection;
	 
	public class Worker : MarshalByRefObject
	{
	    public void PrintDomain() 
	    { 
	        Console.WriteLine("Object is executing in AppDomain \"{0}\"",
	            AppDomain.CurrentDomain.FriendlyName); 
	    }
	}
	 
	class Example
	{
	    public static void Main()
	    {
	        Worker localWorker = new Worker();
	        localWorker.PrintDomain();
	 
	        AppDomain ad = AppDomain.CreateDomain("New domain");
	        Worker remoteWorker = (Worker) ad.CreateInstanceAndUnwrap(
	            typeof(Worker).Assembly.FullName,
	            "Worker");
	        remoteWorker.PrintDomain();
	    }
	}
	
	/* This code produces output similar to the following:
	
	Object is executing in AppDomain "source.exe"
	Object is executing in AppDomain "New domain"
	 */

snippet dictionary

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dictionary/remarks.cs

	using System;
	using System.Collections;
	
	public class SimpleDictionary : DictionaryBase
	{
	}
	
	public class DictionaySamples
	{
	    public static void Main()
	    {
	        IDictionary myDictionary = new SimpleDictionary();
	
	        myDictionary.Add("Jeff", 40);
	        myDictionary.Add("Kristin", 34);
	        myDictionary.Add("Aidan", 1);
	        foreach (DictionaryEntry de in myDictionary)
	        {
	            Console.WriteLine("{0} is {1} years old.", de.Key, de.Value);
	        }
	
	        myDictionary.Remove("Jeff");
	
	        myDictionary.Remove("Max");
	
	        foreach (DictionaryEntry de in myDictionary)
	        {
	        }
	    }
	}

snippet process_mainwindowtitle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Process_MainWindowTitle/process_mainwindowtitle.cs

	
	/* The following program demonstrates the property 'MainWindowTitle' of class 'Process'.
	   It creates a new process notepad on local computer and displays its caption to console.
	*/
	using System;
	using System.Diagnostics;
	
	class MainWindowTitleClass
	{
	    public static void Main()
	    {
	        try
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo();
	                myProcessStartInfo.FileName = "notepad";
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	                myProcess.WaitForInputIdle();
	                Console.Write("Main window Title : " + myProcess.MainWindowTitle);
	
	                myProcess.CloseMainWindow();
	            }
	        }
	        catch (Exception e)
	        {
	            Console.Write($" Message : {e.Message}");
	        }
	    }
	}

snippet numbergroupsizes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSizes/numbergroupsizes.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Int64 myInt = 123456789012345;
	      Console.WriteLine( myInt.ToString( "N", nfi ) );
	
	      int[] mySizes1 = {2,3,4};
	      int[] mySizes2 = {2,3,0};
	      nfi.NumberGroupSizes = mySizes1;
	      Console.WriteLine( myInt.ToString( "N", nfi ) );
	      nfi.NumberGroupSizes = mySizes2;
	      Console.WriteLine( myInt.ToString( "N", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	123,456,789,012,345.00
	12,3456,7890,123,45.00
	1234567890,123,45.00
	*/
	   

snippet currencygroupsizes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSizes/currencygroupsizes.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Int64 myInt = 123456789012345;
	      Console.WriteLine( myInt.ToString( "C", nfi ) );
	
	      int[] mySizes1 = {2,3,4};
	      int[] mySizes2 = {2,3,0};
	      nfi.CurrencyGroupSizes = mySizes1;
	      Console.WriteLine( myInt.ToString( "C", nfi ) );
	      nfi.CurrencyGroupSizes = mySizes2;
	      Console.WriteLine( myInt.ToString( "C", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	$123,456,789,012,345.00
	$12,3456,7890,123,45.00
	$1234567890,123,45.00
	*/
	   

snippet percentgroupsizes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSizes/percentgroupsizes.cs

	
	using System;
	using System.Globalization;
	
	class NumberFormatInfoSample {
	
	   public static void Main() {
	
	      NumberFormatInfo nfi = new CultureInfo( "en-US", false ).NumberFormat;
	
	      Double myInt = 123456789012345.6789;
	      Console.WriteLine( myInt.ToString( "P", nfi ) );
	
	      int[] mySizes1 = {2,3,4};
	      int[] mySizes2 = {2,3,0};
	      nfi.PercentGroupSizes = mySizes1;
	      Console.WriteLine( myInt.ToString( "P", nfi ) );
	      nfi.PercentGroupSizes = mySizes2;
	      Console.WriteLine( myInt.ToString( "P", nfi ) );
	
	   }
	}
	
	
	/* 
	This code produces the following output.
	
	12,345,678,901,234,600.00 %
	1234,5678,9012,346,00.00 %
	123456789012,346,00.00 %
	*/
	   

snippet conceptual_resources_currentculture

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_currentculture/example.cs

	using System;
	using System.Globalization;
	using System.Resources;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] cultures = {"en-CA", "en-US", "fr-FR", "ru-RU" };
	      Random rnd = new Random();
	      int cultureNdx = rnd.Next(0, cultures.Length);
	      CultureInfo originalCulture = Thread.CurrentThread.CurrentCulture;
	      ResourceManager rm = new ResourceManager("Greetings", typeof(Example).Assembly);
	      try {
	         CultureInfo newCulture = new CultureInfo(cultures[cultureNdx]);
	         Thread.CurrentThread.CurrentCulture = newCulture;
	         Thread.CurrentThread.CurrentUICulture = newCulture;
	         string greeting = String.Format("The current culture is {0}.\n{1}",
	                                         Thread.CurrentThread.CurrentUICulture.Name,
	                                         rm.GetString("HelloString"));
	         Console.WriteLine(greeting);
	      }
	      catch (CultureNotFoundException e) {
	         Console.WriteLine("Unable to instantiate culture {0}", e.InvalidCultureName);
	      }
	      finally {
	         Thread.CurrentThread.CurrentCulture = originalCulture;
	         Thread.CurrentThread.CurrentUICulture = originalCulture;
	      }
	   }
	}

snippet getcustomattributes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/ca1.cs

	using System;
	using System.Reflection;
	
	[assembly: AssemblyTitle("CustAttrs1CS")]
	[assembly: AssemblyDescription("GetCustomAttributes() Demo")]
	[assembly: AssemblyCompany("Microsoft")]
	
	class Example {
	    static void Main() {
	        Assembly assy = typeof(Example).Assembly;
	
	        foreach(Attribute attr in Attribute.GetCustomAttributes(assy)) {
	            if (attr.GetType() == typeof(AssemblyTitleAttribute))
	                Console.WriteLine("Assembly title is \"{0}\".",
	                    ((AssemblyTitleAttribute)attr).Title);
	
	            else if (attr.GetType() == 
	                typeof(AssemblyDescriptionAttribute))
	                Console.WriteLine("Assembly description is \"{0}\".",
	                    ((AssemblyDescriptionAttribute)attr).Description);
	
	            else if (attr.GetType() == typeof(AssemblyCompanyAttribute))
	                Console.WriteLine("Assembly company is {0}.",
	                    ((AssemblyCompanyAttribute)attr).Company);
	        }
	   }
	}

snippet argumentexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ArgumentException/argumentexception2.cs

	using System;
	
	public class Example 
	{
	    static void Main() 
	    {
	        int[] values = { 10, 7 };
	        foreach (var value in values) {
	            try {
	               Console.WriteLine("{0} divided by 2 is {1}", value, DivideByTwo(value));
	            }
	            catch (ArgumentException e) {
	               Console.WriteLine("{0}: {1}", e.GetType().Name, e.Message);
	            }
	            Console.WriteLine();
	        }
	    }
	
	    static int DivideByTwo(int num) 
	    {
	        if ((num & 1) == 1)
	            throw new ArgumentException(String.Format("{0} is not an even number", num), 
	                                      "num");
	
	        return num / 2;
	    }
	}
	

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/generics4.cs

	using System;
	
	[assembly:CLSCompliant(true)]
	
	public class C1<T> 
	{
	   protected class N { }
	
	}
	
	public class C2 : C1<long> 
	{
	
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}
	

snippet parameterinfo_attributes1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_Attributes1/parameterinfo_attributes1.cs

	
	/*
	   The following example displays the attributes associated with the
	   parameters of the method called 'MyMethod' of class 'ParameterInfo_Example'.
	 */
	
	
	using System;
	using System.Reflection;
	public class MyClass1
	{
	   public int MyMethod( int i, out short j, ref long k)
	   {
	      j = 2;
	      return 0;
	   }  
	}
	
	public class ParameterInfo_Attributes
	{   
	   public static void Main()
	   {
	      Type myType = typeof(MyClass1);
	      MethodBase myMethodBase = myType.GetMethod("MyMethod");
	      ParameterInfo[] myParameters = myMethodBase.GetParameters();
	      Console.WriteLine("\nThe method {0} has the {1} parameters :", 
	                          "ParameterInfo_Example.MyMethod", myParameters.Length);
	      for(int i = 0; i < myParameters.Length; i++)
	         Console.WriteLine("\tThe {0} parameter has the attribute : {1}", 
	                                             i + 1, myParameters[i].Attributes);
	   }
	}
snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/sort1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] values = { "able", "ångström", "apple", "Æble", 
	                          "Windows", "Visual Studio" };
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
	      Array.Sort(values);
	      string[] enValues = (String[]) values.Clone();
	
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("sv-SE");
	      Array.Sort(values);
	      string[] svValues = (String[]) values.Clone();
	
	      Console.WriteLine("{0,-8} {1,-15} {2,-15}\n", "Position", "en-US", "sv-SE");
	      for (int ctr = 0; ctr <= values.GetUpperBound(0); ctr++)
	         Console.WriteLine("{0,-8} {1,-15} {2,-15}", ctr, enValues[ctr], svValues[ctr]);      
	   }
	}

snippet regularexpressions_quantifiers_emptymatch

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_quantifiers_emptymatch/emptymatch1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = "(a?)*";
	      string input = "aaabbb";
	      Match match = Regex.Match(input, pattern);
	      Console.WriteLine("Match: '{0}' at index {1}", 
	                        match.Value, match.Index);
	      if (match.Groups.Count > 1) {
	         GroupCollection groups = match.Groups;
	         for (int grpCtr = 1; grpCtr <= groups.Count - 1; grpCtr++) {
	            Console.WriteLine("   Group {0}: '{1}' at index {2}", 
	                              grpCtr, 
	                              groups[grpCtr].Value,
	                              groups[grpCtr].Index);
	            int captureCtr = 0;
	            foreach (Capture capture in groups[grpCtr].Captures) {
	               captureCtr++;
	               Console.WriteLine("      Capture {0}: '{1}' at index {2}", 
	                                 captureCtr, capture.Value, capture.Index);
	            }
	         } 
	      }   
	   }
	}

snippet testisinstanceoftype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TestIsInstanceOfType/testisinstanceoftype.cs

	using System;
	
	public interface IExample {}
	
	public class BaseClass : IExample {}
	
	public class DerivedClass : BaseClass {}
	
	public class Example
	{
	    public static void Main()
	    {
	        var interfaceType = typeof(IExample);
	        var base1 = new BaseClass();
	        var base1Type = base1.GetType();
	        var derived1 = new DerivedClass();
	        var derived1Type = derived1.GetType();
	        int[] arr = new int[11];
	
	        Console.WriteLine("Is int[] an instance of the Array class? {0}.",
	                           typeof(Array).IsInstanceOfType(arr));
	        Console.WriteLine("Is base1 an instance of BaseClass? {0}.",
	                          base1Type.IsInstanceOfType(base1));
	        Console.WriteLine("Is derived1 an instance of BaseClass? {0}.",
	                          base1Type.IsInstanceOfType(derived1));
	        Console.WriteLine("Is base1 an instance of IExample? {0}.",
	                          interfaceType.IsInstanceOfType(base1));
	        Console.WriteLine("Is derived1 an instance of IExample? {0}.",
	                          interfaceType.IsInstanceOfType(derived1));
	    }
	}
snippet appdomain_reflectiononlygetassemblies

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ReflectionOnlyGetAssemblies/reflectiononly.cs

	using System;
	using System.Reflection;
	using System.Timers;
	
	public class Example
	{
	    public static void Main()
	    {
	        string displayName = typeof(Timer).Assembly.FullName;
	
	        Assembly.ReflectionOnlyLoad(displayName);
	
	        Console.WriteLine("------------- Execution Context --------------");
	        foreach (Assembly a in AppDomain.CurrentDomain.GetAssemblies())
	        {
	            Console.WriteLine("\t{0}", a.GetName());
	        }
	        Console.WriteLine("------------- Reflection-only Context --------------");
	        foreach (Assembly a in AppDomain.CurrentDomain.ReflectionOnlyGetAssemblies())
	        {
	            Console.WriteLine("\t{0}", a.GetName());
	        }
	    }
	}
snippet codememberfieldpublicconstexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeMemberFieldPublicConstExample/class1.cs

	using System;
	using System.CodeDom;
	
	namespace CodeMemberField_PublicConst_Example
	{
		public class Class1
		{        
	        private static CodeCompileUnit GetCompileUnit()
	        {			
	            CodeCompileUnit cu = new CodeCompileUnit();
	
	            CodeNamespace nsp = new CodeNamespace("TestNamespace");
	            cu.Namespaces.Add( nsp );
	
	            CodeTypeDeclaration testType = new CodeTypeDeclaration("testType");
	            nsp.Types.Add( testType );
	
	            
	
	            CodeMemberField constPublicField = new CodeMemberField(typeof(int), "testConstPublicField");
	            
	            constPublicField.Attributes = (constPublicField.Attributes & ~MemberAttributes.AccessMask & ~MemberAttributes.ScopeMask) | MemberAttributes.Public | MemberAttributes.Const;
	
	            testType.Members.Add( constPublicField );            
	            return cu;
	        }
	        
		}
	}

snippet console_readkey1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_readkey1/rk.cs

	using System;
	
	class Example 
	{
	   public static void Main() 
	   {
	      ConsoleKeyInfo cki;
	      Console.TreatControlCAsInput = true;
	
	      Console.WriteLine("Press any combination of CTL, ALT, and SHIFT, and a console key.");
	      Console.WriteLine("Press the Escape (Esc) key to quit: \n");
	      do 
	      {
	         cki = Console.ReadKey();
	         Console.Write(" --- You pressed ");
	         if((cki.Modifiers & ConsoleModifiers.Alt) != 0) Console.Write("ALT+");
	         if((cki.Modifiers & ConsoleModifiers.Shift) != 0) Console.Write("SHIFT+");
	         if((cki.Modifiers & ConsoleModifiers.Control) != 0) Console.Write("CTL+");
	         Console.WriteLine(cki.Key.ToString());
	       } while (cki.Key != ConsoleKey.Escape);
	    }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/attribute1.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	[AttributeUsageAttribute(AttributeTargets.Class | AttributeTargets.Struct)] 
	public class NumericAttribute
	{
	   private bool _isNumeric;
	   
	   public NumericAttribute(bool isNumeric)
	   {
	      _isNumeric = isNumeric;
	   }
	   
	   public bool IsNumeric 
	   {
	      get { return _isNumeric; }
	   }
	}
	
	[Numeric(true)] public struct UDouble
	{
	   double Value;
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}

snippet dirinfo_create

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DirInfo_Create/dirinfo_create.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        DirectoryInfo di = new DirectoryInfo(@"c:\MyDir");
	
	        try 
	        {
	            if (di.Exists) 
	            {
	                Console.WriteLine("That path exists already.");
	                return;
	            }
	
	            di.Create();
	            Console.WriteLine("The directory was created successfully.");
	
	            di.Delete();
	            Console.WriteLine("The directory was deleted successfully.");
	
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        } 
	        finally {}
	    }
	}

snippet conceptual_encoding

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_encoding/bestfit1a.cs

	using System;
	using System.Text;
	
	public class Example
	{
	   public static void Main()
	   {
	      Encoding cp1252r = Encoding.GetEncoding(1252, 
	                                  new EncoderReplacementFallback("*"),
	                                  new DecoderReplacementFallback("*"));
	      
	      string str1 = "\u24C8 \u2075 \u221E";
	      Console.WriteLine(str1);
	      foreach (var ch in str1)
	         Console.Write("{0} ", Convert.ToUInt16(ch).ToString("X4"));
	
	      Console.WriteLine();
	
	      byte[] bytes = cp1252r.GetBytes(str1);
	      string str2 = cp1252r.GetString(bytes);
	      Console.WriteLine("Round-trip: {0}", str1.Equals(str2));
	      if (! str1.Equals(str2)) {
	         Console.WriteLine(str2);
	         foreach (var ch in str2)
	            Console.Write("{0} ", Convert.ToUInt16(ch).ToString("X4"));
	
	         Console.WriteLine();
	      } 
	   }
	}

snippet file_getlastwrite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_GetLastWrite/file_getlastwrite.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        try 
	        {
	            string path = @"c:\Temp\MyTest.txt";
	            if (!File.Exists(path)) 
	            {
	                File.Create(path);
	            } 
	            else 
	            {
	                File.SetLastWriteTime(path, new DateTime(1985,4,3));
	            }
	
	            DateTime dt = File.GetLastWriteTime(path);
	            Console.WriteLine("The last write time for this file was {0}.", dt);
				
	            File.SetLastWriteTime(path, DateTime.Now);
	            dt = File.GetLastWriteTime(path);
	            Console.WriteLine("The last write time for this file was {0}.", dt);
	
	        } 
	
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet conceptual_crosslanguage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_crosslanguage/numberutil.cs

	using System;
	
	public static class NumericLib 
	{
	   public static bool IsEven(this IConvertible number)
	   {
	      if (number is Byte ||
	          number is SByte ||
	          number is Int16 ||
	          number is UInt16 || 
	          number is Int32 || 
	          number is UInt32 ||
	          number is Int64)
	         return Convert.ToInt64(number) % 2 == 0;
	      else if (number is UInt64)
	         return ((ulong) number) % 2 == 0;
	      else
	         throw new NotSupportedException("IsEven called for a non-integer value.");
	   }
	   
	   public static bool NearZero(double number)
	   {
	      return Math.Abs(number) < .00001; 
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      Console.WriteLine(3.IsEven());
	      int value = 3;
	      Console.WriteLine(value.IsEven());
	      ulong uvalue = 3;
	      Console.WriteLine(uvalue.IsEven());
	      Console.WriteLine(NumericLib.NearZero(-.000001));
	   }
	} 
snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/multiline2.cs

	using System;
	using System.Collections.Generic;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      SortedList<int, string> scores = new SortedList<int, string>(new DescendingComparer<int>());
	      
	      string input = "Joe 164\n" +  
	                     "Sam 208\n" +  
	                     "Allison 211\n" +  
	                     "Gwen 171\n"; 
	      string pattern = @"(?m)^(\w+)\s(\d+)\r*$";
	
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.Multiline))
	         scores.Add(Convert.ToInt32(match.Groups[2].Value), match.Groups[1].Value);
	
	      foreach (KeyValuePair<int, string> score in scores)
	         Console.WriteLine("{0}: {1}", score.Value, score.Key);
	   }
	}
	
	public class DescendingComparer<T> : IComparer<T>
	{
	   public int Compare(T x, T y) 
	   {
	      return Comparer<T>.Default.Compare(x, y) * -1;       
	   }
	}

snippet conceptual_basicio_textfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_basicio_textfiles/source5.cs

	using System;
	using System.Text;
	using System.Windows;
	using System.IO;
	
	namespace WpfApplication
	{
	    public partial class MainWindow : Window
	    {
	        public MainWindow()
	        {
	            InitializeComponent();
	        }
	
	        private async void AppendButton_Click(object sender, RoutedEventArgs e)
	        {
	            string mydocpath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
	
	            StringBuilder sb = new StringBuilder();
	
	            sb.AppendLine("New User Input");
	            sb.AppendLine("= = = = = =");
	            sb.Append(UserInputTextBox.Text);
	            sb.AppendLine();
	            sb.AppendLine();
	
	            using (StreamWriter outfile = new StreamWriter(Path.Combine(mydocpath,"UserInputFile.txt"), true))
	            {
	                await outfile.WriteAsync(sb.ToString());
	            }
	        }
	    }
	}

snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/duplicate1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      String pattern = @"\D+(?<digit>\d+)\D+(?<digit>\d+)?";
	      String[] inputs = { "abc123def456", "abc123def" };
	      foreach (var input in inputs) {
	         Match m = Regex.Match(input, pattern);
	         if (m.Success) {
	            Console.WriteLine("Match: {0}", m.Value);
	            for (int grpCtr = 1; grpCtr < m.Groups.Count; grpCtr++) {
	               Group grp = m.Groups[grpCtr];
	               Console.WriteLine("Group {0}: {1}", grpCtr, grp.Value);
	               for (int capCtr = 0; capCtr < grp.Captures.Count; capCtr++)
	                  Console.WriteLine("   Capture {0}: {1}", capCtr,
	                                    grp.Captures[capCtr].Value);
	            }
	         }
	         else {
	            Console.WriteLine("The match failed.");
	         }
	         Console.WriteLine();
	      }
	   }
	}

snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/objectmodel1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"(\b(\w+)\W+)+";
	      string input = "This is a short sentence.";
	      Match match = Regex.Match(input, pattern);
	      Console.WriteLine("Match: '{0}'", match.Value);
	      for (int ctr = 1; ctr < match.Groups.Count; ctr++)
	      {
	         Console.WriteLine("   Group {0}: '{1}'", ctr, match.Groups[ctr].Value);
	         int capCtr = 0;
	         foreach (Capture capture in match.Groups[ctr].Captures)
	         {
	            Console.WriteLine("      Capture {0}: '{1}'", capCtr, capture.Value);
	            capCtr++;
	         }
	      }
	   }
	}

snippet string_lastindexofany1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_LastIndexOfAny1/lastixany1.cs

	using System;
	
	class Sample {
	    public static void Main() {
	
	    string br1 = "0----+----1----+----2----+----3----+----4----+----5----+----6----+-";
	    string br2 = "0123456789012345678901234567890123456789012345678901234567890123456";
	    string str = "Now is the time for all good men to come to the aid of their party.";
	    int start;
	    int at;
	    string target = "is";
	    char[] anyOf = target.ToCharArray();
	
	    start = str.Length-1;
	    Console.WriteLine("The last character occurrence  from position {0} to 0.", start);
	    Console.WriteLine("{1}{0}{2}{0}{3}{0}", Environment.NewLine, br1, br2, str);
	    Console.Write("A character in '{0}' occurs at position: ", target);
	
	    at = str.LastIndexOfAny(anyOf);
	    if (at > -1) 
	        Console.Write(at);
	    else
	        Console.Write("(not found)");
	    Console.Write("{0}{0}{0}", Environment.NewLine);
	    }
	}
	/*
	This example produces the following results:
	The last character occurrence  from position 66 to 0.
	0----+----1----+----2----+----3----+----4----+----5----+----6----+-
	0123456789012345678901234567890123456789012345678901234567890123456
	Now is the time for all good men to come to the aid of their party.
	
	A character in 'is' occurs at position: 58
	
	
	*/
snippet obsoleteattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ObsoleteAttribute/obsoleteattributeex1.cs

	using System;
	using System.Reflection;
	
	public class Example
	{
	   [ObsoleteAttribute("This property is obsolete. Use NewProperty instead.", false)] 
	   public static string OldProperty
	   { get { return "The old property value."; } }
	   
	   public static string NewProperty
	   { get { return "The new property value."; } }
	
	   [ObsoleteAttribute("This method is obsolete. Call CallNewMethod instead.", true)] 
	   public static string CallOldMethod()
	   {
	      return "You have called CallOldMethod.";
	   }
	      
	   public static string CallNewMethod() 
	   {   
	      return "You have called CallNewMethod.";
	   }   
	
	   public static void Main()
	   {                 
	      Console.WriteLine(OldProperty);
	      Console.WriteLine();
	      Console.WriteLine(CallOldMethod());
	   } 
	}

snippet string_lastindexofany2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_LastIndexOfAny2/lastixany2.cs

	using System;
	
	class Sample {
	    public static void Main() {
	
	    string br1 = "0----+----1----+----2----+----3----+----4----+----5----+----6----+-";
	    string br2 = "0123456789012345678901234567890123456789012345678901234567890123456";
	    string str = "Now is the time for all good men to come to the aid of their party.";
	    int start;
	    int at;
	    string target = "is";
	    char[] anyOf = target.ToCharArray();
	
	    start = (str.Length-1)/2;
	    Console.WriteLine("The last character occurrence  from position {0} to 0.", start);
	    Console.WriteLine("{1}{0}{2}{0}{3}{0}", Environment.NewLine, br1, br2, str);
	    Console.Write("A character in '{0}' occurs at position: ", target);
	
	    at = str.LastIndexOfAny(anyOf, start);
	    if (at > -1) 
	        Console.Write(at);
	    else
	        Console.Write("(not found)");
	    Console.Write("{0}{0}{0}", Environment.NewLine);
	    }
	}
	/*
	This example produces the following results:
	The last character occurrence  from position 33 to 0.
	0----+----1----+----2----+----3----+----4----+----5----+----6----+-
	0123456789012345678901234567890123456789012345678901234567890123456
	Now is the time for all good men to come to the aid of their party.
	
	A character in 'is' occurs at position: 12
	
	
	*/
snippet conceptual_regex_language_assertions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_assertions/startofstring2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      int startPos = 0, endPos = 70;
	      string input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957\n" +
	                     "Chicago Cubs, National League, 1903-present\n" + 
	                     "Detroit Tigers, American League, 1901-present\n" + 
	                     "New York Giants, National League, 1885-1957\n" +  
	                     "Washington Senators, American League, 1901-1960\n";   
	
	      string pattern = @"\A((\w+(\s?)){2,}),\s(\w+\s\w+),(\s\d{4}(-(\d{4}|present))?,?)+";
	      Match match;
	
	      if (input.Substring(startPos, endPos).Contains(",")) {
	         match = Regex.Match(input, pattern, RegexOptions.Multiline);
	         while (match.Success) {
	            Console.Write("The {0} played in the {1} in", 
	                              match.Groups[1].Value, match.Groups[4].Value);
	            foreach (Capture capture in match.Groups[5].Captures)
	               Console.Write(capture.Value);
	   
	            Console.WriteLine(".");
	            startPos = match.Index + match.Length;
	            endPos = startPos + 70 <= input.Length ? 70 : input.Length - startPos;
	            if (! input.Substring(startPos, endPos).Contains(",")) break;
	            match = match.NextMatch();
	         }
	         Console.WriteLine();
	      }
	   }
	}

snippet string_lastindexofany3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_LastIndexOfAny3/lastixany3.cs

	using System;
	
	class Sample {
	    public static void Main() {
	
	    string br1 = "0----+----1----+----2----+----3----+----4----+----5----+----6----+-";
	    string br2 = "0123456789012345678901234567890123456789012345678901234567890123456";
	    string str = "Now is the time for all good men to come to the aid of their party.";
	    int start;
	    int at;
	    int count;
	    string target = "aid";
	    char[] anyOf = target.ToCharArray();
	
	    start = ((str.Length-1)*2)/3;
	    count = (str.Length-1)/3;
	    Console.WriteLine("The last character occurrence from position {0} for {1} characters.", start, count);
	    Console.WriteLine("{1}{0}{2}{0}{3}{0}", Environment.NewLine, br1, br2, str);
	    Console.Write("A character in '{0}' occurs at position: ", target);
	
	    at = str.LastIndexOfAny(anyOf, start, count);
	    if (at > -1) 
	        Console.Write(at);
	    else
	        Console.Write("(not found)");
	    Console.Write("{0}{0}{0}", Environment.NewLine);
	    }
	}
	/*
	This example produces the following results:
	The last character occurrence from position 44 for 22 characters.
	0----+----1----+----2----+----3----+----4----+----5----+----6----+-
	0123456789012345678901234567890123456789012345678901234567890123456
	Now is the time for all good men to come to the aid of their party.
	
	A character in 'aid' occurs at position: 27
	*/
snippet conceptual_regularexpressions_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_bestpractices/group2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "This is one sentence. This is another.";
	      string pattern = @"\b(?:\w+[;,]?\s?)+[.?!]";
	      
	      foreach (Match match in Regex.Matches(input, pattern)) {
	         Console.WriteLine("Match: '{0}' at index {1}.", 
	                           match.Value, match.Index);
	         int grpCtr = 0;
	         foreach (Group grp in match.Groups) {
	            Console.WriteLine("   Group {0}: '{1}' at index {2}.",
	                              grpCtr, grp.Value, grp.Index);
	            int capCtr = 0;
	            foreach (Capture cap in grp.Captures) {
	               Console.WriteLine("      Capture {0}: '{1}' at {2}.",
	                                 capCtr, cap.Value, cap.Index);
	               capCtr++;
	            }
	            grpCtr++;
	         }          
	         Console.WriteLine();        
	      }
	   }
	}

snippet string_toupper1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_toupper1/toupper.cs

	using System;
	using System.Globalization;
	
	class Example 
	{
	    public static void Main() 
	    {
	       string str1 = "indigo";
	       string str2, str3;
	   
	       str2 = str1.ToUpper(new CultureInfo("en-US", false));
	   
	       str3 = str1.ToUpper(new CultureInfo("tr-TR", false));
	   
	       ShowCodePoints("str1", str1);
	       ShowCodePoints("str2", str2);
	       ShowCodePoints("str3", str3);
	       Console.WriteLine("str2 is {0} to str3.", 
	            String.CompareOrdinal(str2, str3) == 0 ? "equal" : "not equal");
	    }
	
	    public static void ShowCodePoints(string varName, string s)
	    {
	       Console.Write("{0} = {1}: ", varName, s);
	       foreach (ushort u in s)
	         Console.Write("{0:x4} ", u);
	       Console.WriteLine();
	    }
	}

snippet codeiterationstatementexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeIterationStatementExample/codeiterationstatementexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeIterationStatementExample
	    {
	        public CodeIterationStatementExample()
	        {
	            CodeVariableDeclarationStatement testInt = new CodeVariableDeclarationStatement(typeof(int), "testInt", new CodePrimitiveExpression(0) );
	
	            CodeIterationStatement forLoop = new CodeIterationStatement(
	                new CodeAssignStatement( new CodeVariableReferenceExpression("testInt"), new CodePrimitiveExpression(1) ),
	                new CodeBinaryOperatorExpression( new CodeVariableReferenceExpression("testInt"), 
	                    CodeBinaryOperatorType.LessThan, new CodePrimitiveExpression(10) ),
	                new CodeAssignStatement( new CodeVariableReferenceExpression("testInt"), new CodeBinaryOperatorExpression( 
	                    new CodeVariableReferenceExpression("testInt"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1) )),
	                new CodeStatement[] { new CodeExpressionStatement( new CodeMethodInvokeExpression( new CodeMethodReferenceExpression( 
	                    new CodeTypeReferenceExpression("Console"), "WriteLine" ), new CodeMethodInvokeExpression( 
	                    new CodeVariableReferenceExpression("testInt"), "ToString" ) ) ) } );
	
	
	        }
	    }
	}
snippet strmreader_readtoend

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StrmReader_ReadToEnd/strmreader_readtoend.cs

	using System;
	using System.IO;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        try 
	        {
	            if (File.Exists(path)) 
	            {
	                File.Delete(path);
	            }
	
	            using (StreamWriter sw = new StreamWriter(path)) 
	            {
	                sw.WriteLine("This");
	                sw.WriteLine("is some text");
	                sw.WriteLine("to test");
	                sw.WriteLine("Reading");
	            }
	
	            using (StreamReader sr = new StreamReader(path)) 
	            {
	                Console.WriteLine(sr.ReadToEnd());
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet conceptual_stringreader

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_stringreader/source2.cs

	using System;
	using System.Text;
	using System.Windows;
	using System.IO;
	
	namespace WpfApplication
	{
	    public partial class MainWindow : Window
	    {
	        public MainWindow()
	        {
	            InitializeComponent();
	        }
	
	        private async void ReadButton_Click(object sender, RoutedEventArgs e)
	        {
	            char[] charsRead = new char[UserInput.Text.Length];
	            using (StringReader reader = new StringReader(UserInput.Text))
	            {
	                await reader.ReadAsync(charsRead, 0, UserInput.Text.Length);
	            }
	
	            StringBuilder reformattedText = new StringBuilder();
	            using (StringWriter writer = new StringWriter(reformattedText))
	            {
	                foreach (char c in charsRead)
	                {
	                    if (char.IsLetter(c) || char.IsWhiteSpace(c))
	                    {
	                        await writer.WriteLineAsync(char.ToLower(c));
	                    }
	                }
	            }
	            Result.Text = reformattedText.ToString();
	        }
	    }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/attribute2.cs

	using System;
	
	[assembly:CLSCompliantAttribute(true)]
	
	public enum DescriptorType { type, member };
	
	public class Descriptor
	{
	   public DescriptorType Type;
	   public String Description; 
	}
	
	[AttributeUsage(AttributeTargets.All)]
	public class DescriptionAttribute : Attribute
	{
	   private Descriptor desc;
	   
	   public DescriptionAttribute(Descriptor d)
	   {
	      desc = d; 
	   }
	   
	   public Descriptor Descriptor
	   { get { return desc; } } 
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}

snippet streamreadwrite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/streamreadwrite/program.cs

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using System.IO;
	
	namespace StreamReadWrite
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            DirectoryInfo[] cDirs = new DirectoryInfo(@"c:\").GetDirectories();
	
	            using (StreamWriter sw = new StreamWriter("CDriveDirs.txt"))
	            {
	                foreach (DirectoryInfo dir in cDirs)
	                {
	                    sw.WriteLine(dir.Name);
	
	                }
	            }
	
	            string line = "";
	            using (StreamReader sr = new StreamReader("CDriveDirs.txt"))
	            {
	                while ((line = sr.ReadLine()) != null)
	                {
	                    Console.WriteLine(line);
	                }
	            }
	        }
	    }
	}

snippet regularexpressions_examples_email

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Examples_Email/Example.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class RegexUtilities
	{
	   public static bool IsValidEmail(string strIn)
	   {
	       return Regex.IsMatch(strIn, 
	                    @"^([0-9a-zA-Z]([-\.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$"); 
	   }
	}
	
	public class Application
	{
	   public static void Main()
	   {
	      string[] emailAddresses = { "david.jones@proseware.com", "d.j@server1.proseware.com", 
	                                  "jones@ms1.proseware.com", "j.@server1.proseware.com", 
	                                  "j@proseware.com9" };
	      foreach (string emailAddress in emailAddresses)
	      {
	         if (RegexUtilities.IsValidEmail(emailAddress))
	            Console.WriteLine("Valid: {0}", emailAddress);
	         else
	            Console.WriteLine("Invalid: {0}", emailAddress);
	      }                                            
	   }
	}

snippet type_typehandle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_TypeHandle/type_typehandle.cs

	using System;
	using System.Reflection;
	class MyClass
	{
	    public int myField = 10;
	}
	
	class Type_TypeHandle
	{
	    public static void Main()
	    {
	        try
	        {
	            MyClass myClass = new MyClass();
	
	            Type myClassType = myClass.GetType();
	
	            RuntimeTypeHandle myClassHandle = myClassType.TypeHandle;
	         
	            DisplayTypeHandle(myClassHandle);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception: {0}", e.Message );
	        }
	    }
	
	    public static void DisplayTypeHandle(RuntimeTypeHandle myTypeHandle)
	    {
	        Type myType = Type.GetTypeFromHandle(myTypeHandle);      
	        Console.WriteLine("\nDisplaying the type from the handle:\n");
	        Console.WriteLine("The type is {0}.", myType.ToString());
	    }
	}
snippet type_getproperty2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty2/type_getproperty2.cs

	
	using System;
	using System.Reflection;
	class MyClass
	{
	    private int myProperty;
	    public int MyProperty
	    {
	        get
	        {
	            return myProperty;
	        }
	        set
	        {
	            myProperty=value;
	        }
	    }
	}
	public class MyTypeClass
	{
	    public static void Main(string[] args)
	    {
	        try
	        {
	            Type myType=typeof(MyClass);       
	            PropertyInfo myPropInfo = myType.GetProperty("MyProperty", BindingFlags.Public | BindingFlags.Instance);
	            Console.WriteLine("{0} is a property of MyClass.", myPropInfo.Name);
	        }
	        catch(NullReferenceException e)
	        {
	            Console.WriteLine("MyProperty does not exist in MyClass." +e.Message);
	        }
	    }
	}
snippet conceptual_resources_locating

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_locating/program.cs

	using System;
	using System.Globalization;
	using System.Reflection;
	using System.Resources;
	using System.Threading;
	using System.Windows.Forms;
	
	class Example
	{
	   static void Main()
	   {
	      string[] cultures = {"en-CA", "en-US", "fr-FR", "ru-RU"};
	      Random rnd = new Random();
	      int cultureNdx = rnd.Next(0, cultures.Length);
	      CultureInfo originalCulture = Thread.CurrentThread.CurrentCulture;
	
	      try {
	         CultureInfo newCulture = new CultureInfo(cultures[cultureNdx]);
	         Thread.CurrentThread.CurrentCulture = newCulture;
	         Thread.CurrentThread.CurrentUICulture = newCulture;
	         ResourceManager rm = new ResourceManager("Example.Greetings", 
	                                                  typeof(Example).Assembly); 
	         string greeting = String.Format("The current culture is {0}.\n{1}",
	                                         Thread.CurrentThread.CurrentUICulture.Name,
	                                         rm.GetString("HelloString"));
	
	         MessageBox.Show(greeting);
	      }
	      catch (CultureNotFoundException e) {
	         Console.WriteLine("Unable to instantiate culture {0}", e.InvalidCultureName);
	      }
	      finally {
	         Thread.CurrentThread.CurrentCulture = originalCulture;
	         Thread.CurrentThread.CurrentUICulture = originalCulture;
	      }
	   }
	}

snippet sys_glob_carib_unregister

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_carib_unregister/unregister.cs

	
	/*
	   Notes:
	   This example deletes the custom culture x-en-US-sample.nlp 
	   file, but not the %winnt%\Globalization directory that contains the file.
	*/
	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    try 
	        {
	        Console.Clear();
	        Console.WriteLine("Unregister the \"x-en-US-sample\" " +
	                          "custom culture if it already exists...");
	        CultureAndRegionInfoBuilder.Unregister("x-en-US-sample");
	        Console.WriteLine("The custom culture was unregistered successfully.");
	        }
	    catch (Exception e)
	        {
	        Console.WriteLine("Error while unregistering...");
	        Console.WriteLine(e);
	        }
	    }
	}
	/*
	This code example produces the following results:
	
	Unregister the "x-en-US-sample" custom culture if it already exists...
	The custom culture was unregistered successfully.
	
	*/
snippet type_getconstructor

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor/type_getconstructor.cs

	
	using System;
	using System.Reflection;
	using System.Security;
	
	public class MyClass1
	{
	    public MyClass1(){}
	    public MyClass1(int i){}
	
	    public static void Main()
	    {
	        try
	        {
	            Type myType = typeof(MyClass1);
	            Type[] types = new Type[1];
	            types[0] = typeof(int);
	            ConstructorInfo constructorInfoObj = myType.GetConstructor(types);
	            if (constructorInfoObj != null)
	            {
	                Console.WriteLine("The constructor of MyClass1 that takes an " + 
	                    "integer as a parameter is: "); 
	                Console.WriteLine(constructorInfoObj.ToString());
	            }
	            else
	            {
	                Console.WriteLine("The constructor of MyClass1 that takes an integer " +
	                    "as a parameter is not available."); 
	            }
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception caught.");
	            Console.WriteLine("Source: " + e.Source);
	            Console.WriteLine("Message: " + e.Message);
	        }
	    }
	}
snippet io_file_replace

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_File_Replace/sample.cs

	using System;
	using System.IO;
	
	namespace FileSystemExample
	{
	    class FileExample
	    {
	        public static void Main()
	        {
	            try
	            {
	                string OriginalFile = "test.xml";
	                string FileToReplace = "test2.xml";
	                string BackUpOfFileToReplace = "test2.xml.bac";
	
	                Console.WriteLine("Move the contents of " + OriginalFile + " into " + FileToReplace + ", delete " + OriginalFile +
	                                   ", and create a backup of " + FileToReplace + ".");
	
	                ReplaceFile(OriginalFile, FileToReplace, BackUpOfFileToReplace);
	
	                Console.WriteLine("Done");
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine(e);
	            }
	
	            Console.ReadLine();
	        }
	
	        public static void ReplaceFile(string FileToMoveAndDelete, string FileToReplace, string BackupOfFileToReplace)
	        {
	            File.Replace(FileToMoveAndDelete, FileToReplace, BackupOfFileToReplace, false);
	
	        }
	    }
	}
snippet conceptual_resources_retrieving

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_retrieving/example1.cs

	using System;
	using System.Resources;
	
	public class CreateResource
	{
	   public static void Main()
	   {
	      PersonTable table = new PersonTable("Name", "Employee Number", 
	                                          "Age", 30, 18, 5);
	      ResXResourceWriter rr = new ResXResourceWriter(@".\UIResources.resx");
	      rr.AddResource("TableName", "Employees of Acme Corporation");
	      rr.AddResource("Employees", table);
	      rr.Generate();
	      rr.Close();
	   }
	}
	
	[Serializable] public struct PersonTable
	{
	   public readonly int nColumns;
	   public readonly string column1; 
	   public readonly string column2;
	   public readonly string column3; 
	   public readonly int width1;
	   public readonly int width2;
	   public readonly int width3;
	   
	   public PersonTable(string column1, string column2, string column3,
	                  int width1, int width2, int width3)
	   {
	      this.column1 = column1;
	      this.column2 = column2;
	      this.column3 = column3;
	      this.width1 = width1;
	      this.width2 = width2;
	      this.width3 = width3;
	      this.nColumns = typeof(PersonTable).GetFields().Length / 2; 
	   }
	} 
snippet conceptual_calendars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_calendars/formatstrings1.cs

	using System;
	using System.Globalization;
	using System.IO;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      StreamWriter sw = new StreamWriter(@".\eras.txt");
	      DateTime dt = new DateTime(2012, 5, 1);
	      
	      CultureInfo culture = CultureInfo.CreateSpecificCulture("ja-JP");
	      DateTimeFormatInfo dtfi = culture.DateTimeFormat;
	      dtfi.Calendar = new JapaneseCalendar();
	      Thread.CurrentThread.CurrentCulture = culture;
	      
	      sw.WriteLine("\n{0,-43} {1}", "Full Date and Time Pattern:", dtfi.FullDateTimePattern);
	      sw.WriteLine(dt.ToString("F"));
	      sw.WriteLine();
	      
	      sw.WriteLine("\n{0,-43} {1}", "Long Date Pattern:", dtfi.LongDatePattern);
	      sw.WriteLine(dt.ToString("D"));
	      
	      sw.WriteLine("\n{0,-43} {1}", "Short Date Pattern:", dtfi.ShortDatePattern);
	      sw.WriteLine(dt.ToString("d"));
	      sw.Close();
	    }
	}

snippet adsetup

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADSetup/adsetup.cs

	using System;
	using System.IO;
	using System.Reflection;
	using System.Security.Policy;  
	
	class ADSetup
	{
	    public static void Main()
	    {
	        var domaininfo = new AppDomainSetup();
	        domaininfo.ConfigurationFile = System.Environment.CurrentDirectory + 
	                                       Path.DirectorySeparatorChar +
	                                       "ADSetup.exe.config";
	        domaininfo.ApplicationBase = System.Environment.CurrentDirectory;
	
	        Evidence adEvidence = AppDomain.CurrentDomain.Evidence;
	
	        AppDomain domain = AppDomain.CreateDomain("Domain2", adEvidence, domaininfo);
	
	        Console.WriteLine("Host domain: " + AppDomain.CurrentDomain.FriendlyName);
	        Console.WriteLine("Child domain: " + domain.FriendlyName);
	        Console.WriteLine();
	        Console.WriteLine("Configuration file: " + domain.SetupInformation.ConfigurationFile);
	        Console.WriteLine("Application Base Directory: " + domain.BaseDirectory);
	
	        AppDomain.Unload(domain);
	    }
	}

snippet conceptual_regularexpressions_design

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_design/conditional1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "<PRIVATE> This is not for public consumption." + Environment.NewLine + 
	                     "But this is for public consumption." + Environment.NewLine + 
	                     "<PRIVATE> Again, this is confidential.\n";  
	      string pattern = @"^(?<Pvt>\<PRIVATE\>\s)?(?(Pvt)((\w+\p{P}?\s)+)|((\w+\p{P}?\s)+))\r?$";
	      string publicDocument = null, privateDocument = null;
	      
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.Multiline))
	      {
	         if (match.Groups[1].Success) {
	            privateDocument += match.Groups[1].Value + "\n";
	         }
	         else {
	            publicDocument += match.Groups[3].Value + "\n";   
	            privateDocument += match.Groups[3].Value + "\n";
	         }  
	      }
	
	      Console.WriteLine("Private Document:");
	      Console.WriteLine(privateDocument);
	      Console.WriteLine("Public Document:");
	      Console.WriteLine(publicDocument);
	   }
	}

snippet string_indexofany2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_indexofany2/ixany2.cs

	using System;
	
	class Sample {
	    public static void Main() 
	    {
	    string br1 = "0----+----1----+----2----+----3----+----4----+----5----+----6----+-";
	    string br2 = "0123456789012345678901234567890123456789012345678901234567890123456";
	    string str = "Now is the time for all good men to come to the aid of their party.";
	    int start;
	    int at;
	    string target = "is";
	    char[] anyOf = target.ToCharArray();
	
	    start = str.Length/2;
	    Console.WriteLine();
	    Console.WriteLine("The first character occurrence from position {0} to {1}.", 
	                           start, str.Length-1);
	    Console.WriteLine("{1}{0}{2}{0}{3}{0}", Environment.NewLine, br1, br2, str);
	    Console.Write("A character in '{0}' occurs at position: ", target);
	
	    at = str.IndexOfAny(anyOf, start);
	    if (at > -1) 
	        Console.Write(at);
	    else
	        Console.Write("(not found)");
	    Console.WriteLine();
	    }
	}
	/*
	
	The first character occurrence from position 33 to 66.
	0----+----1----+----2----+----3----+----4----+----5----+----6----+-
	0123456789012345678901234567890123456789012345678901234567890123456
	Now is the time for all good men to come to the aid of their party.
	
	A character in 'is' occurs at position: 49
	
	*/
snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/embeddednulls2.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      string str1 = "Aa";
	      string str2 = "A" + new String('\u0000', 3) + "a";
	      Console.WriteLine("Comparing '{0}' ({1}) and '{2}' ({3}):", 
	                        str1, ShowBytes(str1), str2, ShowBytes(str2));
	      Console.WriteLine("   With String.Compare:");
	      Console.WriteLine("      Ordinal: {0}", 
	                        String.Compare(str1, str2, StringComparison.Ordinal));
	
	      Console.WriteLine("   With String.Equals:");
	      Console.WriteLine("      Ordinal: {0}", 
	                        String.Equals(str1, str2, StringComparison.Ordinal));
	   }
	   
	   private static string ShowBytes(string str)
	   {
	      string hexString = String.Empty;
	      for (int ctr = 0; ctr < str.Length; ctr++)
	      {
	         string result = String.Empty;
	         result = Convert.ToInt32(str[ctr]).ToString("X4");
	         result = " " + result.Substring(0,2) + " " + result.Substring(2, 2);
	         hexString += result;
	      }
	      return hexString.Trim();
	   }
	}

snippet conceptual_regex_language_assertions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_assertions/endofstring3.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] inputs = { "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957", 
	                          "Chicago Cubs, National League, 1903-present" + Environment.NewLine,
	                          "Detroit Tigers, American League, 1901-present\\r",
	                          "New York Giants, National League, 1885-1957",
	                          "Washington Senators, American League, 1901-1960" + Environment.NewLine };  
	      string pattern = @"^((\w+(\s?)){2,}),\s(\w+\s\w+),(\s\d{4}(-(\d{4}|present))?,?)+\r?\z";
	
	      foreach (string input in inputs)
	      {
	         if (input.Length > 70 || ! input.Contains(",")) continue;
	         
	         Console.WriteLine(Regex.Escape(input));
	         Match match = Regex.Match(input, pattern);
	         if (match.Success)
	            Console.WriteLine("   Match succeeded.");
	         else
	            Console.WriteLine("   Match failed.");
	      }   
	   }
	}

snippet conceptual_regex_language_assertions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_assertions/endofstring2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] inputs = { "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957",  
	                          "Chicago Cubs, National League, 1903-present" + Environment.NewLine, 
	                          "Detroit Tigers, American League, 1901-present" + Regex.Unescape(@"\n"), 
	                          "New York Giants, National League, 1885-1957", 
	                          "Washington Senators, American League, 1901-1960" + Environment.NewLine}; 
	      string pattern = @"^((\w+(\s?)){2,}),\s(\w+\s\w+),(\s\d{4}(-(\d{4}|present))?,?)+\r?\Z";
	
	      foreach (string input in inputs)
	      {
	         if (input.Length > 70 || ! input.Contains(",")) continue;
	         
	         Console.WriteLine(Regex.Escape(input));
	         Match match = Regex.Match(input, pattern);
	         if (match.Success)
	            Console.WriteLine("   Match succeeded.");
	         else
	            Console.WriteLine("   Match failed.");
	      }   
	   }
	}

snippet argumentexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ArgumentException/argumentexception.cs

	using System;
	
	public sealed class App 
	{
	    static void Main() 
	    {
	        Console.WriteLine("10 divided by 2 is {0}", DivideByTwo(10));
	        try 
	        {
	             Console.WriteLine("7 divided by 2 is {0}", DivideByTwo(7));
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("7 is not divided by 2 integrally.");
	        }
	    }
	
	    static int DivideByTwo(int num) 
	    {
	        if ((num & 1) == 1)
	            throw new ArgumentException("Number must be even", "num");
	
	        return num / 2;
	    }
	}
	
	
snippet string_lastindexof1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_lastindexof1/lastixof1.cs

	using System;
	
	class Sample {
	    public static void Main() {
	
	    string br1 = "0----+----1----+----2----+----3----+----4----+----5----+----6----+-";
	    string br2 = "0123456789012345678901234567890123456789012345678901234567890123456";
	    string str = "Now is the time for all good men to come to the aid of their party.";
	    int start;
	    int at;
	
	    start = str.Length-1;
	    Console.WriteLine("All occurrences of 't' from position {0} to 0.", start);
	    Console.WriteLine("{1}{0}{2}{0}{3}{0}", Environment.NewLine, br1, br2, str);
	    Console.Write("The letter 't' occurs at position(s): ");
	
	    at = 0;
	    while((start > -1) && (at > -1))
	        {
	        at = str.LastIndexOf('t', start);
	        if (at > -1) 
	            {
	            Console.Write("{0} ", at);
	            start = at - 1;
	            }
	        }
	    Console.Write("{0}{0}{0}", Environment.NewLine);
	    }
	}
	/*
	This example produces the following results:
	All occurrences of 't' from position 66 to 0.
	0----+----1----+----2----+----3----+----4----+----5----+----6----+-
	0123456789012345678901234567890123456789012345678901234567890123456
	Now is the time for all good men to come to the aid of their party.
	
	The letter 't' occurs at position(s): 64 55 44 41 33 11 7
	*/
snippet type_iscontextful

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/type_iscontextful.cs

	using System;
	using System.Runtime.Remoting.Contexts;
	
	public class ContextBoundClass: ContextBoundObject
	{
	    public string Value = "The Value property.";
	}
	
	public class Example
	{
	    public static void Main()
	    {
	         Console.WriteLine("The IsContextful property for the {0} type is {1}.",
	                           typeof(Example).Name, typeof(Example).IsContextful);
	         Console.WriteLine("The IsContextful property for the {0} type is {1}.",
	                           typeof(ContextBoundClass).Name, typeof(ContextBoundClass).IsContextful);
	
	         Console.WriteLine("The IsMarshalByRef property of {0} is {1}.",
	                           typeof(Example).Name, typeof(Example).IsMarshalByRef);
	         Console.WriteLine("The IsMarshalByRef property of {0} is {1}.",
	                           typeof(ContextBoundClass).Name, typeof(ContextBoundClass).IsMarshalByRef);
	         
	         Console.WriteLine("{0} is a primitive data type: {1}.",
	                           typeof(int).Name, typeof(int).IsPrimitive);
	         Console.WriteLine("{0} is a primitive data type: {1}.",
	                           typeof(string).Name, typeof(string).IsPrimitive);
	    }
	}

snippet conceptual_resources_locating

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_locating/assemblyinfo.cs

	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Runtime.InteropServices;
	using System.Resources;
	
	[assembly: AssemblyTitle("LocatingCS1")]
	[assembly: AssemblyDescription("")]
	[assembly: AssemblyConfiguration("")]
	[assembly: AssemblyCompany("Microsoft")]
	[assembly: AssemblyProduct("LocatingCS1")]
	[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
	[assembly: AssemblyTrademark("")]
	[assembly: AssemblyCulture("")]
	
	[assembly: ComVisible(false)]
	
	[assembly: Guid("dd7f3fbd-0ee8-4537-be79-89717ee6fda6")]
	
	[assembly: AssemblyVersion("1.0.0.0")]
	[assembly: AssemblyFileVersion("1.0.0.0")]
	[assembly: NeutralResourcesLanguageAttribute("en")]

snippet string_compare4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_compare4/comp4.cs

	using System;
	
	class Sample {
	    public static void Main() {
	    String str1 = "MACHINE";
	    String str2 = "machine";
	    String str;
	    int result;
	
	    Console.WriteLine();
	    Console.WriteLine("str1 = '{0}', str2 = '{1}'", str1, str2);
	    Console.WriteLine("Ignore case:");
	    result = String.Compare(str1, 2, str2, 2, 2, true);
	    str = ((result < 0) ? "less than" : ((result > 0) ? "greater than" : "equal to"));
	    Console.Write("Substring '{0}' in '{1}' is ", str1.Substring(2, 2), str1);
	    Console.Write("{0} ", str);
	    Console.WriteLine("substring '{0}' in '{1}'.", str2.Substring(2, 2), str2);
	
	    Console.WriteLine();
	    Console.WriteLine("Honor case:");
	    result = String.Compare(str1, 2, str2, 2, 2, false);
	    str = ((result < 0) ? "less than" : ((result > 0) ? "greater than" : "equal to"));
	    Console.Write("Substring '{0}' in '{1}' is ", str1.Substring(2, 2), str1);
	    Console.Write("{0} ", str);
	    Console.WriteLine("substring '{0}' in '{1}'.", str2.Substring(2, 2), str2);
	    }
	}
	/*
	This example produces the following results:
	
	str1 = 'MACHINE', str2 = 'machine'
	Ignore case:
	Substring 'CH' in 'MACHINE' is equal to substring 'ch' in 'machine'.
	
	Honor case:
	Substring 'CH' in 'MACHINE' is greater than substring 'ch' in 'machine'.
	*/
snippet codegeneratoroptionsexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeGeneratorOptionsExample/class1.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	
	namespace CodeGeneratorOptionsExample
	{
		class Class1
		{
			[STAThread]
			static void Main(string[] args)
			{
	            CodeGeneratorOptions genOptions = new CodeGeneratorOptions();
	
	            genOptions.BlankLinesBetweenMembers = true;
	
	            genOptions.BracingStyle = "C";
	
	            genOptions.ElseOnClosing = false;
	
	            genOptions.IndentString = "    ";
	
	            genOptions["CustomGeneratorOptionStringExampleID"] = "BuildFlags: /A /B /C /D /E";            
	            Console.WriteLine(genOptions.ToString());
			}
		}
	}

snippet strmreader_readline

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StrmReader_ReadLine/strmreader_readline.cs

	using System;
	using System.IO;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	        try 
	        {
	            if (File.Exists(path)) 
	            {
	                File.Delete(path);
	            }
	
	            using (StreamWriter sw = new StreamWriter(path)) 
	            {
	                sw.WriteLine("This");
	                sw.WriteLine("is some text");
	                sw.WriteLine("to test");
	                sw.WriteLine("Reading");
	            }
	
	            using (StreamReader sr = new StreamReader(path)) 
	            {
	                while (sr.Peek() >= 0) 
	                {
	                    Console.WriteLine(sr.ReadLine());
	                }
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet strmreader_ctor1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StrmReader_Ctor1/strmreader_ctor1.cs

	using System;
	using System.IO;
	
	class Test
	{
	    public static void Main()
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        try
	        {
	            if (File.Exists(path))
	            {
	                File.Delete(path);
	            }
	
	            using (StreamWriter sw = new StreamWriter(path))
	            {
	                sw.WriteLine("This");
	                sw.WriteLine("is some text");
	                sw.WriteLine("to test");
	                sw.WriteLine("reading");
	            }
	
	            using (StreamReader sr = new StreamReader(new FileStream(path, FileMode.Open)))
	            {
	                while (sr.Peek() >= 0)
	                {
	                    Console.WriteLine(sr.ReadLine());
	                }
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet microsoft_visualstudio_data_core_ivsdataproviderdynamicsupport

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProviderDynamicSupport/IVsDataProviderDynamicSupport3.cs

	using System;
	using System.ComponentModel.Design;
	using Microsoft.Win32;
	using Microsoft.VisualStudio.Data.Core;
	
	public class MyProviderDynamicSupport3 : IVsDataProviderDynamicSupport
	{
	    public bool IsProviderSupported
	    {
	        get
	        {
	            return true;
	        }
	    }
	
	    public bool IsSourceSupported(Guid source)
	    {
	        RegistryKey key = Registry.LocalMachine.OpenSubKey(
	            @"SOFTWARE\Company\MyDatabaseSource");
	        if (key == null)
	        {
	            return false;
	        }
	        key.Close();
	        return true;
	    }
	
	    public bool IsOperationSupported(
	        Guid source, CommandID command, object context)
	    {
	        return true;
	    }
	
	    public string GetUnsupportedReason(
	        Guid source, CommandID command, object context)
	    {
	        return null;
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdataproviderdynamicsupport

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProviderDynamicSupport/IVsDataProviderDynamicSupport.cs

	using System;
	using System.ComponentModel.Design;
	using Microsoft.Win32;
	using Microsoft.VisualStudio.Data.Core;
	
	internal class MyProviderDynamicSupport : IVsDataProviderDynamicSupport
	{
	    public bool IsProviderSupported
	    {
	        get
	        {
	            RegistryKey key = Registry.LocalMachine.OpenSubKey(
	                @"SOFTWARE\Company\AdoDotNetProvider");
	            if (key == null)
	            {
	                return false;
	            }
	            key.Close();
	            return true;
	        }
	    }
	
	    public bool IsSourceSupported(Guid source)
	    {
	        return true;
	    }
	
	    public bool IsOperationSupported(
	        Guid source, CommandID command, object context)
	    {
	        return true;
	    }
	
	    public string GetUnsupportedReason(
	        Guid source, CommandID command, object context)
	    {
	        return null;
	    }
	}
snippet type_getevent

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetEvent/type_getevent.cs

	using System;
	using System.Reflection;
	using System.Security;
	
	class MyEventExample
	{
	    public static void Main()
	    {  
	        try
	        {
	
	            Type myType = typeof(System.Windows.Forms.Button);
	            EventInfo myEvent = myType.GetEvent("Click");
	            if(myEvent != null)
	            {
	                Console.WriteLine("Looking for the Click event in the Button class.");
	                Console.WriteLine(myEvent.ToString());
	            }
	            else
	                Console.WriteLine("The Click event is not available in the Button class.");
	        }
	        catch(SecurityException e)
	        {
	            Console.WriteLine("An exception occurred.");
	            Console.WriteLine("Message :"+e.Message);
	        }
	        catch(ArgumentNullException e)
	        {
	            Console.WriteLine("An exception occurred.");
	            Console.WriteLine("Message :"+e.Message);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("The following exception was raised : {0}",e.Message);
	        }
	    }
	}
	       

snippet conceptual_isolatedstorage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_isolatedstorage/source5.cs

	using System;
	using System.IO;
	using System.IO.IsolatedStorage;
	
	
	namespace ConsoleApplication1
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            IsolatedStorageFile isoStore = IsolatedStorageFile.GetStore(IsolatedStorageScope.User | IsolatedStorageScope.Assembly, null, null);
	
	            if (isoStore.FileExists("TestStore.txt"))
	            {
	                Console.WriteLine("The file already exists!");
	                using (IsolatedStorageFileStream isoStream = new IsolatedStorageFileStream("TestStore.txt", FileMode.Open, isoStore))
	                {
	                    using (StreamReader reader = new StreamReader(isoStream))
	                    {
	                        Console.WriteLine("Reading contents:");
	                        Console.WriteLine(reader.ReadToEnd());
	                    }
	                }
	            }
	            else
	            {
	                using (IsolatedStorageFileStream isoStream = new IsolatedStorageFileStream("TestStore.txt", FileMode.CreateNew, isoStore))
	                {
	                    using (StreamWriter writer = new StreamWriter(isoStream))
	                    {
	                        writer.WriteLine("Hello Isolated Storage");
	                        Console.WriteLine("You have written to the file.");
	                    }
	                }
	            }   
	        }
	    }
	}
snippet microsoft_visualstudio_data_core_ivsdatasourcespecializer

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSourceSpecializer/IVsDataSourceSpecializer2.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	using Microsoft.VisualStudio.Data.Framework;
	
	public class MySourceSpecializer2 : DataSourceSpecializer
	{
	    private static readonly Guid s_dataSource1 =
	        new Guid("F24C1C71-D9AE-47ec-80C6-91B864201D72");
	    private static readonly Guid s_dataSource2 =
	        new Guid("194DD1D2-19A8-4493-A70B-F83C141D29E5");
	
	    public override object CreateObject(Guid source, Type objType)
	    {
	        if (source == s_dataSource1)
	        {
	            if (objType == typeof(IVsDataConnectionUIControl))
	            {
	                return new MyConnectionUIControl1();
	            }
	        }
	        if (source == s_dataSource2)
	        {
	            if (objType == typeof(IVsDataConnectionUIControl))
	            {
	                return new MyConnectionUIControl2();
	            }
	        }
	        return null;
	    }
	}
	
	internal class MyConnectionUIControl1 : DataConnectionUIControl
	{
	}
	
	internal class MyConnectionUIControl2 : DataConnectionUIControl
	{
	}
snippet asynchronous_file_io_async

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/example2.cs

	using System;
	using System.Threading.Tasks;
	using System.Windows;
	using System.IO;
	
	namespace WpfApplication1
	{
	    public partial class MainWindow2 : Window
	    {
	        public MainWindow2()
	        {
	            InitializeComponent();
	        }
	
	        private async void Button_Click(object sender, RoutedEventArgs e)
	        {
	            string UserDirectory = @"c:\Users\exampleuser\";
	
	            using (StreamReader SourceReader = File.OpenText(UserDirectory + "BigFile.txt"))
	            {
	                using (StreamWriter DestinationWriter = File.CreateText(UserDirectory + "CopiedFile.txt"))
	                {
	                    await CopyFilesAsync(SourceReader, DestinationWriter);
	                }
	            }
	        }
	
	        public async Task CopyFilesAsync(StreamReader Source, StreamWriter Destination) 
	        { 
	            char[] buffer = new char[0x1000]; 
	            int numRead; 
	            while ((numRead = await Source.ReadAsync(buffer, 0, buffer.Length)) != 0) 
	            {
	                await Destination.WriteAsync(buffer, 0, numRead);
	            } 
	        } 
	    }
	}

snippet adclearprivatepath

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADClearPrivatePath/adclearprivatepath.cs

	using System;
	using System.Reflection;
	using System.Security.Policy;
	
	class ADAppendPrivatePath
	{
		public static void Main()
		{
			Evidence adevidence = AppDomain.CurrentDomain.Evidence;
	
			AppDomain domain = AppDomain.CreateDomain("MyDomain", adevidence);
	
			Console.WriteLine("Relative search path is: " + domain.RelativeSearchPath);
	
			String Newpath = "www.code.microsoft.com";
			domain.AppendPrivatePath(Newpath);
	
			Console.WriteLine("Relative search path is: " + domain.RelativeSearchPath);
	
			domain.ClearPrivatePath();
	
			Console.WriteLine("Relative search path is now: " + domain.RelativeSearchPath);
	
	 
			AppDomain.Unload(domain);	
		}
	}
	
	
	
	

snippet cocontravariancedelegates

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cocontravariancedelegates/example.cs

	using System;
	
	public class Base {}
	public class Derived : Base {}
	
	public class Program
	{
	    public static Derived MyMethod(Base b)
	    {
	        return b as Derived ?? new Derived();
	    }
	
	    static void Main() 
	    {
	        Func<Base, Derived> f1 = MyMethod;
	
	        Func<Base, Base> f2 = f1;
	        Base b2 = f2(new Base());
	
	        Func<Derived, Derived> f3 = f1;
	        Derived d3 = f3(new Derived());
	
	        Func<Derived, Base> f4 = f1;
	        Base b4 = f4(new Derived());
	    }
	}
	

snippet file_getattributes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_GetAttributes/file_getattributes.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        if (!File.Exists(path)) 
	        {
	            File.Create(path);
	        }
	
	        FileAttributes attributes = File.GetAttributes(path);
	
	        if ((attributes & FileAttributes.Hidden) == FileAttributes.Hidden)
	        {
	            attributes = RemoveAttribute(attributes, FileAttributes.Hidden);
	            File.SetAttributes(path, attributes);
	            Console.WriteLine("The {0} file is no longer hidden.", path);
	        } 
	        else 
	        {
	            File.SetAttributes(path, File.GetAttributes(path) | FileAttributes.Hidden);
	            Console.WriteLine("The {0} file is now hidden.", path);
	        }
	    }
	
	    private static FileAttributes RemoveAttribute(FileAttributes attributes, FileAttributes attributesToRemove)
	    {
	        return attributes & ~attributesToRemove;
	    }
	}

snippet progidattribute_value

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProgIdAttribute_Value/progidattribute_value.cs

	/*
	   System.Runtime.InteropServices.ProgIdAttribute.Value
	   
	   The program shows MyClass as a COM class with prog id 'InteropSample.MyClass'.
	   It get all attributes of MyClass by calling GetAttributes method of TypeDescriptor
	   then prints the 'Value' property of 'ProgIdAttribute' class.
	*/
	using System;
	using System.ComponentModel;
	using System.Runtime.InteropServices;
	
	namespace InteropSample
	{   
	   [ClassInterface(ClassInterfaceType.AutoDispatch)]
	   [ProgId("InteropSample.MyClass")]
	   public class MyClass
	   {
	       public MyClass() {}
	   }
	
	   class TestApplication
	   {      
	      public static void Main()
	      {
	         try
	         {
	            AttributeCollection attributes;
	            attributes = TypeDescriptor.GetAttributes(typeof(MyClass));
	            ProgIdAttribute progIdAttributeObj = (ProgIdAttribute)attributes[typeof(ProgIdAttribute)];
	            Console.WriteLine("ProgIdAttribute's value is set to : " + progIdAttributeObj.Value);
	         }         
	         catch(Exception e)
	         {
	            Console.WriteLine("Exception : " + e.Message);
	         }
	      }
	   }
	}

snippet installer_uninstall

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_Uninstall/installer_uninstall.cs

	/*
	   System.Configuration.Install.Installer.Uninstall
	
	   The following example demonstrates the Uninstall method 
	   of the class 'installer'. The method Uninstall is overridden
	   in the derived class of 'installer'.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.Collections;
	
	namespace MyAssembly
	{
	   [RunInstaller(true)]
	   public class MyInstallerSample : Installer
	   {
	      public override void Uninstall( IDictionary mySavedState )
	      {  
	         if (mySavedState == null)
	         {
	            Console.WriteLine("Uninstallation Error !");
	         }
	         else
	         {
	            base.Uninstall( mySavedState );
	            Console.WriteLine( "The Uninstall method of 'MyInstallerSample' has been called" );
	         }
	      }
	
	      static void Main()
	      {
	         Console.WriteLine("Use 'installutil.exe -u' to run the assembly"
	            + " Installer_Uninstall.exe");
	      }
	   }
	}

snippet type_getevent1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/type_getevent1.cs

	using System;
	using System.Reflection;
	using System.Security;
	
	class MyEventExample
	{
	    public static void Main()
	    {  
	        try
	        {
	
	            BindingFlags myBindingFlags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic;
	            Type myTypeBindingFlags = typeof(System.Windows.Forms.Button);
	            EventInfo myEventBindingFlags = myTypeBindingFlags.GetEvent("Click", myBindingFlags);
	            if(myEventBindingFlags != null)
	            {
	                Console.WriteLine("Looking for the Click event in the Button class with the specified BindingFlags.");
	                Console.WriteLine(myEventBindingFlags.ToString());
	            }
	            else
	                Console.WriteLine("The Click event is not available with the Button class.");
	        }
	        catch(SecurityException e)
	        {
	            Console.WriteLine("An exception occurred.");
	            Console.WriteLine("Message :"+e.Message);
	        }
	        catch(ArgumentNullException e)
	        {
	            Console.WriteLine("An exception occurred.");
	            Console.WriteLine("Message :"+e.Message);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("The following exception was raised : {0}",e.Message);
	        }
	    }
	}

snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/nonwhitespace1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(\S+)\s?";
	      string input = "This is the first sentence of the first paragraph. " + 
	                            "This is the second sentence.\n" + 
	                            "This is the only sentence of the second paragraph.";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine(match.Groups[1]);
	   }
	}

snippet registrykey_opensubkey

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegistryKey_OpenSubKey/opensubkey.cs

	using System;
	using Microsoft.Win32;
	using Microsoft.VisualBasic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Registry.CurrentUser.DeleteSubKey("RegistryOpenSubKeyExample", false);
	        RegistryKey rk = Registry.CurrentUser.CreateSubKey("RegistryOpenSubKeyExample");
	        rk.Close();
	
	        RegistryKey rkCurrentUser = Registry.CurrentUser;
	
	        RegistryKey rkTest = rkCurrentUser.OpenSubKey("RegistryOpenSubKeyExample");
	        Console.WriteLine("Test key: {0}", rkTest);
	        rkTest.Close();
	        rkCurrentUser.Close();
	
	        rkTest = Registry.CurrentUser.OpenSubKey("RegistryOpenSubKeyExample");
	        Console.WriteLine("Test key: {0}", rkTest);
	        rkTest.Close();
	
	        rkTest = Registry.CurrentUser.OpenSubKey("RegistryOpenSubKeyExample", true);
	        rkTest.SetValue("TestName", "TestValue");
	        Console.WriteLine("Test value for TestName: {0}", rkTest.GetValue("TestName"));
	        rkTest.Close();
	
	
	

snippet generic_dictionary_ctor_int32

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_Dictionary_ctor_Int32/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Dictionary<string, string> openWith = 
	                               new Dictionary<string, string>(4);
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	        
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	               kvp.Key, kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Key = txt, Value = notepad.exe
	Key = bmp, Value = paint.exe
	Key = dib, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	 */
	
	
	

snippet generic_sortedlist_ctor_int32

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedList_ctor_Int32/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        SortedList<string, string> openWith = 
	                               new SortedList<string, string>(4);
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	        
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	               kvp.Key, kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Key = bmp, Value = paint.exe
	Key = dib, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	Key = txt, Value = notepad.exe
	 */
	
	
	

snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/systime.cs

	using System;
	using System.Runtime.InteropServices;
	
	[StructLayout(LayoutKind.Sequential)]
	public class SystemTime
	{
	    public ushort year;
	    public ushort month;
	    public ushort weekday;
	    public ushort day;
	    public ushort hour;
	    public ushort minute;
	    public ushort second;
	    public ushort millisecond;
	}
	
	public class LibWrap
	{
	    [DllImport("Kernel32.dll")]
	    public static extern void GetSystemTime([In, Out] SystemTime st);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        Console.WriteLine("C# SysTime Sample using Platform Invoke");
	        SystemTime st = new SystemTime();
	        LibWrap.GetSystemTime(st);
	        Console.Write("The Date is: ");
	        Console.Write("{0} {1} {2}", st.month, st.day, st.year);
	    }
	}
	

snippet parsing_numbers

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/parsing_numbers/unicode1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      string value;
	      value = "\u0031\u0032\u0033\u0034\u0035";
	      ParseDigits(value);
	
	      value = "\uFF11\uFF12\uFF13\uFF14\uFF15";
	      ParseDigits(value);
	      
	      value = "\u0661\u0662\u0663\u0664\u0665";
	      ParseDigits(value);
	      
	      value = "\u09e7\u09e8\u09e9\u09ea\u09eb";
	      ParseDigits(value);
	   }
	
	   static void ParseDigits(string value)
	   {
	      try {
	         int number = Int32.Parse(value);
	         Console.WriteLine("'{0}' --> {1}", value, number);
	      }   
	      catch (FormatException) {
	         Console.WriteLine("Unable to parse '{0}'.", value);      
	      }     
	   }
	}
snippet uint32_equals

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/UInt32_Equals/uint32_equals.cs

	
	/* 
	   The following program demonstrates the 'Equals(Object)' method
	   of struct 'UInt32'. This compares an instance of 'UInt32' with the
	   passed in object and returns true if they are equal.
	*/
	
	using System;
	class MyUInt32_Equals 
	{
	     public static void Main()
	     {
	         try
	         {
	            UInt32 myVariable1 = 20;
	            UInt32 myVariable2 = 20;
	
	            Console.WriteLine("\nType of 'myVariable1' is '{0}' and"+
	                 " value is :{1}",myVariable1.GetType(), myVariable1); 
	            Console.WriteLine("Type of 'myVariable2' is '{0}' and"+
	                 " value is :{1}",myVariable2.GetType(), myVariable2);
	
	            if( myVariable1.Equals( myVariable2 ) )
	               Console.WriteLine( "\nStructures 'myVariable1' and "+
	                     "'myVariable2' are equal");
	            else
	               Console.WriteLine( "\nStructures 'myVariable1' and "+
	                     "'myVariable2' are not equal");
	         }
	         catch(Exception e)
	         {
	            Console.WriteLine("Exception :{0}", e.Message);
	         }
	     }
	}
	

snippet uri_ishexdigit

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Uri_IsHexDigit/uri_ishexdigit.cs

	/* 
	   System.Uri.IsHexDigit
	   
		The following program reads a string from console and determines whether the
		specified character is valid hexadecimal digit.
	*/
	
	using System;
	class MyIsHexDigitSample
	{
		public static void Main()
		{
			try
			{
				Console.Write("Type a string : ");
				string myString = Console.ReadLine();
				for (int i = 0; i < myString.Length; i ++)
	               if(Uri.IsHexDigit(myString[i]))
	                  Console.WriteLine("{0} is a hexadecimal digit.", myString[i]); 
	               else
	                  Console.WriteLine("{0} is not a hexadecimal digit.", myString[i]); 
			}
			catch(Exception e)
			{
				Console.WriteLine(e.Message);
			}
		} 
	}
	/*
	
	*/ 
snippet string_indexofany3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_indexofany3/ixany3.cs

	using System;
	
	class Sample {
	    public static void Main() 
	    {
	    string br1 = "0----+----1----+----2----+----3----+----4----+----5----+----6----+-";
	    string br2 = "0123456789012345678901234567890123456789012345678901234567890123456";
	    string str = "Now is the time for all good men to come to the aid of their party.";
	    int start;
	    int at;
	    int count;
	    string target = "aid";
	    char[] anyOf = target.ToCharArray();
	
	    start = (str.Length-1)/3;
	    count = (str.Length-1)/4;
	    Console.WriteLine();
	    Console.WriteLine("The first character occurrence from position {0} for {1} characters.", start, count);
	    Console.WriteLine("{1}{0}{2}{0}{3}{0}", Environment.NewLine, br1, br2, str);
	    Console.Write("A character in '{0}' occurs at position: ", target);
	
	    at = str.IndexOfAny(anyOf, start, count);
	    if (at > -1) 
	        Console.Write(at);
	    else
	        Console.Write("(not found)");
	    Console.WriteLine();
	    }
	}
	/*
	
	The first character occurrence from position 22 for 16 characters.
	0----+----1----+----2----+----3----+----4----+----5----+----6----+-
	0123456789012345678901234567890123456789012345678901234567890123456
	Now is the time for all good men to come to the aid of their party.
	
	A character in 'aid' occurs at position: 27
	
	*/
snippet string_indexof1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_indexof1/ixof1.cs

	using System;
	
	class Sample {
	    public static void Main() {
	
	    string br1 = "0----+----1----+----2----+----3----+----4----+----5----+----6----+-";
	    string br2 = "0123456789012345678901234567890123456789012345678901234567890123456";
	    string str = "Now is the time for all good men to come to the aid of their party.";
	    int start;
	    int at;
	
	    Console.WriteLine();
	    Console.WriteLine("All occurrences of 't' from position 0 to {0}.", str.Length-1);
	    Console.WriteLine("{1}{0}{2}{0}{3}{0}", Environment.NewLine, br1, br2, str);
	    Console.Write("The letter 't' occurs at position(s): ");
	
	    at = 0;
	    start = 0; 
	    while((start < str.Length) && (at > -1))
	        {
	        at = str.IndexOf('t', start);
	        if (at == -1) break;
	        Console.Write("{0} ", at);
	        start = at+1;
	        }
	    Console.WriteLine();
	    }
	}
	/*
	This example produces the following results:
	
	All occurrences of 't' from position 0 to 66.
	0----+----1----+----2----+----3----+----4----+----5----+----6----+-
	0123456789012345678901234567890123456789012345678901234567890123456
	Now is the time for all good men to come to the aid of their party.
	
	The letter 't' occurs at position(s): 7 11 33 41 44 55 64
	
	*/
snippet string_compare5

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_compare5/comp5.cs

	using System;
	using System.Globalization;
	
	class Sample {
	    public static void Main() {
	    String str1 = "MACHINE";
	    String str2 = "machine";
	    String str;
	    int result;
	
	    Console.WriteLine();
	    Console.WriteLine("str1 = '{0}', str2 = '{1}'", str1, str2);
	    Console.WriteLine("Ignore case, Turkish culture:");
	    result = String.Compare(str1, 4, str2, 4, 2, true, new CultureInfo("tr-TR"));
	    str = ((result < 0) ? "less than" : ((result > 0) ? "greater than" : "equal to"));
	    Console.Write("Substring '{0}' in '{1}' is ", str1.Substring(4, 2), str1);
	    Console.Write("{0} ", str);
	    Console.WriteLine("substring '{0}' in '{1}'.", str2.Substring(4, 2), str2);
	
	    Console.WriteLine();
	    Console.WriteLine("Ignore case, invariant culture:");
	    result = String.Compare(str1, 4, str2, 4, 2, true, CultureInfo.InvariantCulture);
	    str = ((result < 0) ? "less than" : ((result > 0) ? "greater than" : "equal to"));
	    Console.Write("Substring '{0}' in '{1}' is ", str1.Substring(4, 2), str1);
	    Console.Write("{0} ", str);
	    Console.WriteLine("substring '{0}' in '{1}'.", str2.Substring(4, 2), str2);
	    }
	}
	/*
	This example produces the following results:
	
	str1 = 'MACHINE', str2 = 'machine'
	Ignore case, Turkish culture:
	Substring 'IN' in 'MACHINE' is less than substring 'in' in 'machine'.
	
	Ignore case, invariant culture:
	Substring 'IN' in 'MACHINE' is equal to substring 'in' in 'machine'.
	*/
snippet datetime_ctor_int64

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/datetime_ctor_Int64/ticks.cs

	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string format = "{0}) The {1} date and time is {2:MM/dd/yyyy hh:mm:ss tt}";
	
	    DateTime dt1 = new DateTime(DateTime.MaxValue.Ticks);
	
	    DateTime dt2 = new DateTime(DateTime.MinValue.Ticks);
	
	    long ticks = new DateTime(1979, 07, 28, 22, 35, 5, 
		new CultureInfo("en-US", false).Calendar).Ticks;
	    DateTime dt3 = new DateTime(ticks);
	
	    Console.WriteLine(format, 1, "maximum", dt1);
	    Console.WriteLine(format, 2, "minimum", dt2);
	    Console.WriteLine(format, 3, "custom ", dt3);
	    Console.WriteLine("\nThe custom date and time is created from {0:N0} ticks.", ticks);
	    }
	}
	/*
	This example produces the following results:
	
	1) The maximum date and time is 12/31/9999 11:59:59 PM
	2) The minimum date and time is 01/01/0001 12:00:00 AM
	3) The custom  date and time is 07/28/1979 10:35:05 PM
	
	The custom date and time is created from 624,376,461,050,000,000 ticks.
	
	*/
snippet enumequals

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/enumequals/EnumEquals.cs

	using System;
	
	public class EqualsTest {
	    enum Colors { Red, Green, Blue, Yellow };
	    enum Mammals { Cat, Dog, Horse, Dolphin };
	
	    public static void Main() {
	        Mammals myPet = Mammals.Cat;
	        Colors myColor = Colors.Red;
	        Mammals yourPet = Mammals.Dog;
	        Colors yourColor = Colors.Red;
	
	        Console.WriteLine("My favorite animal is a {0}", myPet);
	        Console.WriteLine("Your favorite animal is a {0}", yourPet);
	        Console.WriteLine("Do we like the same animal? {0}", myPet.Equals(yourPet) ? "Yes" : "No");
	
	        Console.WriteLine();
	        Console.WriteLine("My favorite color is {0}", myColor);
	        Console.WriteLine("Your favorite color is {0}", yourColor);
	        Console.WriteLine("Do we like the same color? {0}", myColor.Equals(yourColor) ? "Yes" : "No");
	
	        Console.WriteLine();
	        Console.WriteLine("The value of my color ({0}) is {1}", myColor, Enum.Format(typeof(Colors), myColor, "d"));
	        Console.WriteLine("The value of my pet (a {0}) is {1}", myPet, Enum.Format(typeof(Mammals), myPet, "d"));
	        Console.WriteLine("Even though they have the same value, are they equal? {0}", 
	                    myColor.Equals(myPet) ? "Yes" : "No");
	    }
	}
snippet strmreader_read1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StrmReader_Read1/strmreader_read1.cs

	using System;
	using System.IO;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        try 
	        {
	            if (File.Exists(path)) 
	            {
	                File.Delete(path);
	            }
	
	            using (StreamWriter sw = new StreamWriter(path)) 
	            {
	                sw.WriteLine("This");
	                sw.WriteLine("is some text");
	                sw.WriteLine("to test");
	                sw.WriteLine("Reading");
	            }
	
	            using (StreamReader sr = new StreamReader(path)) 
	            {
	                while (sr.Peek() >= 0) 
	                {
	                    Console.Write((char)sr.Read());
	                }
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet strmreader_ctor2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StrmReader_Ctor2/strmreader_ctor2.cs

	using System;
	using System.IO;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        try 
	        {
	            if (File.Exists(path)) 
	            {
	                File.Delete(path);
	            }
	
	            using (StreamWriter sw = new StreamWriter(path)) 
	            {
	                sw.WriteLine("This");
	                sw.WriteLine("is some text");
	                sw.WriteLine("to test");
	                sw.WriteLine("Reading");
	            }
	
	            using (StreamReader sr = new StreamReader(path)) 
	            {
	                while (sr.Peek() >= 0) 
	                {
	                    Console.WriteLine(sr.ReadLine());
	                }
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet assemblyresolverecursive

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/assemblyresolverecursive/example.cs

	using System;
	using System.Reflection;
	
	class BadExample
	{
	    static void Main()
	    {
	        AppDomain ad = AppDomain.CreateDomain("Test");
	        ad.AssemblyResolve += MyHandler;
	
	        try
	        {
	            object obj = ad.CreateInstanceAndUnwrap(
	                "MyAssembly, version=1.2.3.4, culture=neutral, publicKeyToken=null",
	                "MyType");
	        } 
	        catch (Exception ex)
	        {
	            Console.WriteLine(ex.Message);
	        }
	    }
	
	    static Assembly MyHandler(object source, ResolveEventArgs e) 
	    {
	        Console.WriteLine("Resolving {0}", e.Name);
	        return Assembly.Load(e.Name);
	    }
	} 
	
	/* This example produces output similar to the following:
	
	Resolving MyAssembly, Version=1.2.3.4, Culture=neutral, PublicKeyToken=null
	Resolving MyAssembly, Version=1.2.3.4, Culture=neutral, PublicKeyToken=null
	...
	Resolving MyAssembly, Version=1.2.3.4, Culture=neutral, PublicKeyToken=null
	Resolving MyAssembly, Version=1.2.3.4, Culture=neutral, PublicKeyToken=null
	
	Process is terminated due to StackOverflowException.
	 */

snippet finfo_createtext

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_CreateText/finfo_createtext.cs

	using System;
	using System.IO;
	
	class Test 
	{
	
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	        FileInfo fi = new FileInfo(path);
	
	        if (!fi.Exists) 
	        {
	            using (StreamWriter sw = fi.CreateText()) 
	            {
	                sw.WriteLine("Hello");
	                sw.WriteLine("And");
	                sw.WriteLine("Welcome");
	            }
	        }
	
	        using (StreamReader sr = fi.OpenText()) 
	        {
	            string s = "";
	            while ((s = sr.ReadLine()) != null) 
	            {
	                Console.WriteLine(s);
	            }
	        }
	    }
	}

snippet formatting_numeric_standard

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_Numeric_Standard/standardusage1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      ShowToString();
	      ShowComposite();
	      ShowCompositeWithAlignment();
	   }
	
	   private static void ShowToString()
	   {
	      decimal value = 123.456m;
	      Console.WriteLine(value.ToString("C2"));
	   }
	
	   private static void ShowComposite()
	   {
	      decimal value = 123.456m;
	      Console.WriteLine("Your account balance is {0:C2}.", value);
	   }
	
	   private static void ShowCompositeWithAlignment()
	   {
	      decimal[] amounts = { 16305.32m, 18794.16m };
	      Console.WriteLine("   Beginning Balance           Ending Balance");
	      Console.WriteLine("   {0,-28:C2}{1,14:C2}", amounts[0], amounts[1]);
	   }
	}

snippet argumentoutofrangeexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ArgumentOutOfRangeException/program.cs

	using System;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	        try
	        {
	            Guest guest1 = new Guest("Ben", "Miller", 17);
	            Console.WriteLine(guest1.GuestInfo());
	        }
	        catch (ArgumentOutOfRangeException outOfRange)
	        {
	
	            Console.WriteLine("Error: {0}", outOfRange.Message);
	        }
	    }
	}
	
	class Guest
	{
	    private string FirstName;
	    private string LastName;
	    private int Age;
	
	    public Guest(string fName, string lName, int age)
	    {
	        FirstName = fName;
	        LastName = lName;
	        if (age < 21)
	            throw new ArgumentOutOfRangeException("age","All guests must be 21-years-old or older.");
	        else
	            Age = age;
	    }
	
	    public string GuestInfo()
	    {
	        string gInfo = FirstName + " " + LastName + ", " + Age.ToString();
	        return(gInfo);
	    }
	}
snippet type_gethashcode_getfields

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetHashCode_GetFields/type_gethashcode_getfields.cs

	using System;
	using System.Security;
	using System.Reflection;
	
	class FieldsSample
	{
	    public static void Main()						  
	    {
	        Type myType = typeof(System.Net.IPAddress);
	        FieldInfo [] myFields = myType.GetFields(BindingFlags.Static | BindingFlags.NonPublic);
	        Console.WriteLine ("\nThe IPAddress class has the following nonpublic fields: ");
	        foreach (FieldInfo myField in myFields) 
	        {
	            Console.WriteLine(myField.ToString());
	        }
	        Type myType1 = typeof(System.Net.IPAddress);
	        FieldInfo [] myFields1 = myType1.GetFields();
	        Console.WriteLine ("\nThe IPAddress class has the following public fields: ");
	        foreach (FieldInfo myField in myFields1) 
	        {
	            Console.WriteLine(myField.ToString());
	        }
	        try
	        {
	            Console.WriteLine("The HashCode of the System.Windows.Forms.Button type is: {0}",
	                typeof(System.Windows.Forms.Button).GetHashCode());
	        }		
	        catch(SecurityException e)
	        {
	            Console.WriteLine("An exception occurred.");
	            Console.WriteLine("Message: "+e.Message);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("An exception occurred.");
	            Console.WriteLine("Message: "+e.Message);
	
	        }		
	    }
	}	

snippet microsoft_visualstudio_data_core_ivsdatasource

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSource/IVsDataSource2.cs

	using System;
	using System.Data;
	using System.Data.Common;
	using Microsoft.VisualStudio.Data.Core;
	
	public class DDEX_IVsDataSourceExample2
	{
	    public static string GetSourceDisplayName(
	        IServiceProvider serviceProvider,
	        IVsDataSource dataSource)
	    {
	        string displayName = null;
	        string resourceId = null;
	        Guid provider = dataSource.DefaultProvider;
	        if (provider != Guid.Empty)
	        {
	            resourceId = dataSource.GetProperty(provider, "DisplayName") as string;
	        }
	        if (resourceId == null)
	        {
	            foreach (Guid providerId in dataSource.GetProviders())
	            {
	                resourceId = dataSource.GetProperty(
	                    providerId, "DisplayName") as string;
	                if (resourceId != null)
	                {
	                    provider = providerId;
	                    break;
	                }
	            }
	        }
	        if (provider != Guid.Empty && resourceId != null)
	        {
	            IVsDataProviderManager providerManager = serviceProvider.GetService(
	                typeof(IVsDataProviderManager)) as IVsDataProviderManager;
	            IVsDataProvider dataProvider = providerManager.Providers[provider];
	            displayName = dataProvider.GetString(resourceId);
	        }
	        return displayName;
	    }
	}
snippet file_appendtext

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_AppendText/file_appendtext.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	        if (!File.Exists(path)) 
	        {
	            using (StreamWriter sw = File.CreateText(path)) 
	            {
	                sw.WriteLine("Hello");
	                sw.WriteLine("And");
	                sw.WriteLine("Welcome");
	            }	
	        }
	
	        using (StreamWriter sw = File.AppendText(path)) 
	        {
	            sw.WriteLine("This");
	            sw.WriteLine("is Extra");
	            sw.WriteLine("Text");
	        }	
	
	        using (StreamReader sr = File.OpenText(path)) 
	        {
	            string s = "";
	            while ((s = sr.ReadLine()) != null) 
	            {
	                Console.WriteLine(s);
	            }
	        }
	    }
	}

snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/gchandle.cs

	using System;
	using System.IO;
	using System.Runtime.InteropServices;
	
	public delegate bool CallBack(int handle, IntPtr param);
	
	public class LibWrap
	{
	    [DllImport("user32.dll")]
	    public static extern bool EnumWindows(CallBack cb, IntPtr param);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        TextWriter tw = System.Console.Out;
	        GCHandle gch = GCHandle.Alloc(tw);
	        CallBack cewp = new CallBack(CaptureEnumWindowsProc);
	
	        LibWrap.EnumWindows(cewp, (IntPtr)gch);
	        gch.Free();
	    }
	
	    private static bool CaptureEnumWindowsProc(int handle, IntPtr param)
	    {
	        GCHandle gch = (GCHandle)param;
	        TextWriter tw = (TextWriter)gch.Target;
	        tw.WriteLine(handle);
	        return true;
	    }
	}

snippet finfo_delete

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_Delete/finfo_delete.cs

	using System;
	using System.IO;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\MyTest.txt";
	        FileInfo fi1 = new FileInfo(path);
	
	        try 
	        {
	            using (StreamWriter sw = fi1.CreateText()) {}
	            string path2 = path + "temp";
	            FileInfo fi2 = new FileInfo(path2);
	
	            fi2.Delete();
	
	            fi1.CopyTo(path2);
	            Console.WriteLine("{0} was copied to {1}.", path, path2);
	
	            fi2.Delete();
	            Console.WriteLine("{0} was successfully deleted.", path2);
	
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet sandboxingapis

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/SandboxingAPIs/program.cs

	using System;
	using System.Collections;
	using System.Diagnostics;
	using System.Security;
	using System.Security.Permissions;
	using System.Security.Policy;
	using System.Reflection;
	using System.IO;
	
	namespace SimpleSandboxing
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            Evidence e = new Evidence();
	            e.AddHostEvidence(new Zone(SecurityZone.Intranet));
	            PermissionSet pset = SecurityManager.GetStandardSandbox(e);
	
	            AppDomainSetup ads = new AppDomainSetup();
	            ads.ApplicationBase = "C:\\Sandbox";
	            Directory.CreateDirectory("C:\\Sandbox");
	            File.Copy("..\\..\\..\\HelloWorld\\bin\\debug\\HelloWorld.exe", "C:\\sandbox\\HelloWorld.exe", true);
	
	            AppDomain sandbox = AppDomain.CreateDomain(
	               "Sandboxed Domain",
	               e,
	               ads,
	               pset,
	               null);
	            sandbox.ExecuteAssemblyByName("HelloWorld");
	        }
	    }
	}
	

snippet uint16_equals

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/UInt16_Equals/uint16_equals.cs

	
	/* 
	   The following program demonstrates the 'Equals(Object)' method
	   of struct 'UInt16'. This compares an instance of 'UInt16' with the
	   passed in object and returns true if they are equal.
	*/
	
	using System;
	class MyUInt16_Equals 
	{
	     public static void Main()
	     {
	         try
	         {
	            UInt16 myVariable1 = 10;
	            UInt16 myVariable2 = 10;
	
	            Console.WriteLine("\nType of 'myVariable1' is '{0}' and"+
	                 " value is :{1}",myVariable1.GetType(), myVariable1); 
	            Console.WriteLine("Type of 'myVariable2' is '{0}' and"+
	                 " value is :{1}",myVariable2.GetType(), myVariable2);
	         
	            if( myVariable1.Equals( myVariable2 ) )
	               Console.WriteLine( "\nStructures 'myVariable1' and "+
	                     "'myVariable2' are equal");
	            else
	               Console.WriteLine( "\nStructures 'myVariable1' and "+
	                     "'myVariable2' are not equal");
	            
	         }
	         catch(Exception e)
	         {
	            Console.WriteLine("Exception :{0}", e.Message);
	         }
	     }
	}
	

snippet int16_equals

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Int16_Equals/int16_equals.cs

	
	/* 
	   The following program demonstrates the 'Equals(Object)' method
	   of struct 'Int16'. This compares an instance of 'Int16' with the
	   passed in object and returns true if they are equal.
	*/
	
	using System;
	class MyInt16_Equals 
	{
	     public static void Main()
	     {
	         try
	         {
	            Int16 myVariable1 = 20;
	            Int16 myVariable2 = 20;
	
	            Console.WriteLine("\nType of 'myVariable1' is '{0}' and"+
	                 " value is :{1}",myVariable1.GetType(), myVariable1); 
	            Console.WriteLine("Type of 'myVariable2' is '{0}' and"+
	                 " value is :{1}",myVariable2.GetType(), myVariable2);
	
	            if( myVariable1.Equals( myVariable2 ) )
	               Console.WriteLine( "\nStructures 'myVariable1' and "+
	                     "'myVariable2' are equal");
	            else
	               Console.WriteLine( "\nStructures 'myVariable1' and "+
	                     "'myVariable2' are not equal");
	            
	         }
	         catch(Exception e)
	         {
	            Console.WriteLine("Exception :{0}", e.Message);
	         }
	     }
	}
	

snippet int32_equals

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Int32_Equals/int32_equals.cs

	
	/* 
	   The following program demonstrates the 'Equals(Object)' method
	   of struct 'Int32'. This compares an instance of 'Int32' with the
	   passed in object and returns true if they are equal.
	*/
	
	using System;
	class MyInt32_Equals 
	{
	     public static void Main()
	     {
	         try
	         {
	            Int32 myVariable1 = 60;
	            Int32 myVariable2 = 60;
	
	            Console.WriteLine("\nType of 'myVariable1' is '{0}' and"+
	                 " value is :{1}",myVariable1.GetType(), myVariable1); 
	            Console.WriteLine("Type of 'myVariable2' is '{0}' and"+
	                 " value is :{1}",myVariable2.GetType(), myVariable2);
	
	            if( myVariable1.Equals( myVariable2 ) )
	               Console.WriteLine( "\nStructures 'myVariable1' and "+
	                     "'myVariable2' are equal");
	            else
	               Console.WriteLine( "\nStructures 'myVariable1' and "+
	                     "'myVariable2' are not equal");
	            
	         }
	         catch(Exception e)
	         {
	            Console.WriteLine("Exception :{0}", e.Message);
	         }
	     }
	}
	

snippet int64_equals

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Int64_Equals/int64_equals.cs

	
	/* 
	   The following program demonstrates the 'Equals(Object)' method
	   of struct 'Int64'. This compares an instance of 'Int64' with the
	   passed in object and returns true if they are equal.
	*/
	
	using System;
	class MyInt64_Equals
	{
	     public static void Main()
	     {
	         try
	         {
	            Int64 myVariable1 = 80;
	            Int64 myVariable2 = 80;
	
	            Console.WriteLine("\nType of 'myVariable1' is '{0}' and"+
	                 " value is :{1}",myVariable1.GetType(), myVariable1); 
	            Console.WriteLine("Type of 'myVariable2' is '{0}' and"+
	                 " value is :{1}",myVariable2.GetType(), myVariable2);
	         
	            if( myVariable1.Equals( myVariable2 ) )
	               Console.WriteLine( "\nStructures 'myVariable1' and "+
	                     "'myVariable2' are equal");
	            else
	               Console.WriteLine( "\nStructures 'myVariable1' and "+
	                     "'myVariable2' are not equal");
	            
	         }
	         catch(Exception e)
	         {
	            Console.WriteLine("Exception :{0}", e.Message);
	         }
	     }
	}
	

snippet console_beep

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_beep/beep.cs

	using System;
	
	class Sample 
	{
	    public static void Main(String[] args) 
	    {
	    int x = 0;
	    if ((args.Length == 1) &&
	        (Int32.TryParse(args[0], out x) == true) &&
	        ((x >= 1) && (x <= 9)))
	        {
	        for (int i = 1; i <= x; i++)
	            {
	            Console.WriteLine("Beep number {0}.", i);
	            Console.Beep();
	            }
	        }
	    else
	        Console.WriteLine("Usage: Enter the number of times (between 1 and 9) to beep.");
	    }
	}
	/*
	This example produces the following results:
	
	>beep
	Usage: Enter the number of times (between 1 and 9) to beep
	
	>beep 9
	Beep number 1.
	Beep number 2.
	Beep number 3.
	Beep number 4.
	Beep number 5.
	Beep number 6.
	Beep number 7.
	Beep number 8.
	Beep number 9.
	
	*/
snippet conceptual_timespan_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_custom/fspecifiers1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      TimeSpan ts = new TimeSpan(1003498765432);
	      string fmt;
	      Console.WriteLine(ts.ToString("c"));
	      Console.WriteLine();
	       
	      for (int ctr = 1; ctr <= 7; ctr++) {
	         fmt = new String('f', ctr);
	         if (fmt.Length == 1) fmt = "%" + fmt;
	         Console.WriteLine("{0,10}: {1:" + fmt + "}", fmt, ts);
	      } 
	      Console.WriteLine();
	      
	      for (int ctr = 1; ctr <= 7; ctr++) {
	         fmt = new String('f', ctr);
	         Console.WriteLine("{0,10}: {1:s\\." + fmt + "}", "s\\." + fmt, ts);
	      }
	   }
	}

snippet runtimeenvironment

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RuntimeEnvironment/RuntimeEnvironment.cs

	using System;
	using System.Reflection;
	using System.Runtime.InteropServices;
	
	public sealed class App 
	{
	    static void Main() 
	    {       
	        Assembly assem = typeof(App).Assembly;
	        Console.WriteLine("Did the {0} assembly load from the GAC? {1}",
	           assem, RuntimeEnvironment.FromGlobalAccessCache(assem));
	        
	        Console.WriteLine("Runtime directory: {0}", RuntimeEnvironment.GetRuntimeDirectory());
	
	        Console.WriteLine("System version: {0}", RuntimeEnvironment.GetSystemVersion());
	
	        Console.WriteLine("System configuration file: {0}", RuntimeEnvironment.SystemConfigurationFile);
	    }
	}
	
snippet directoryinfomoveto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/directoryinfomoveto/directoryinfomoveto.cs

	using System;
	using System.IO;
	
	public class MoveToTest 
	{
	    public static void Main() 
	    {
	
	        DirectoryInfo di = new DirectoryInfo("TempDir");
	
	        if (di.Exists == false)
	            di.Create();
	
	        DirectoryInfo dis = di.CreateSubdirectory("SubDir");
	
	        if (Directory.Exists("NewTempDir") == false)
	            di.MoveTo("NewTempDir");
	
	        try 
	        {
	            dis.Delete(true);
	        } 
	        catch (Exception) 
	        {
	        }
	
	
	    }
	}
snippet string_lastindexof7

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_LastIndexOf7/lastixof7.cs

	using System;
	
	class Sample {
	    public static void Main() {
	
	    string br1 = "0----+----1----+----2----+----3----+----4----+----5----+----6----+-";
	    string br2 = "0123456789012345678901234567890123456789012345678901234567890123456";
	    string str = "Now is the time for all good men to come to the aid of their party.";
	    int start;
	    int at;
	
	    start = str.Length-1;
	    Console.WriteLine("All occurrences of 'he' from position {0} to 0.", start);
	    Console.WriteLine("{1}{0}{2}{0}{3}{0}", Environment.NewLine, br1, br2, str);
	    Console.Write("The string 'he' occurs at position(s): ");
	
	    at = 0;
	    while((start > -1) && (at > -1))
	        {
	        at = str.LastIndexOf("he", start);
	        if (at > -1) 
	            {
	            Console.Write("{0} ", at);
	            start = at - 1;
	            }
	        }
	    Console.Write("{0}{0}{0}", Environment.NewLine);
	    }
	}
	/*
	This example produces the following results:
	All occurrences of 'he' from position 66 to 0.
	0----+----1----+----2----+----3----+----4----+----5----+----6----+-
	0123456789012345678901234567890123456789012345678901234567890123456
	Now is the time for all good men to come to the aid of their party.
	
	The string 'he' occurs at position(s): 56 45 8
	
	
	*/
snippet fileinfoopen

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/fileinfoopen/fileinfoopen.cs

	using System;
	using System.IO;
	
	public class OpenTest 
	{
	    public static void Main() 
	    {
	        FileInfo fi = new FileInfo("temp.txt");
	
	        FileStream fs = fi.Open( FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.None );
	
	        FileInfo nextfi = new FileInfo("temp.txt");        
	
	        try 
	        {
	            nextfi.Open( FileMode.OpenOrCreate, FileAccess.Read );
	
	            Console.WriteLine("The file was not locked, and was opened by a second process.");
	        } 
	        catch (IOException) 
	        {
	            Console.WriteLine("The file could not be opened because it was locked by another process.");
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine(e.ToString());
	        }
	
	        fs.Close();
	    }
	}
	
snippet console_keyavailable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_keyavailable/ka.cs

	using System;
	using System.Threading;
	
	class Sample 
	{
	    public static void Main() 
	    {
	       ConsoleKeyInfo cki;
	
	       do {
	           Console.WriteLine("\nPress a key to display; press the 'x' key to quit.");
	
	   
	           while (Console.KeyAvailable == false)
	           
	           cki = Console.ReadKey(true);
	           Console.WriteLine("You pressed the '{0}' key.", cki.Key);
	        } while(cki.Key != ConsoleKey.X);
	    }
	}
	/*
	This example produces results similar to the following:
	
	Press a key to display; press the 'x' key to quit.
	You pressed the 'H' key.
	
	Press a key to display; press the 'x' key to quit.
	You pressed the 'E' key.
	
	Press a key to display; press the 'x' key to quit.
	You pressed the 'PageUp' key.
	
	Press a key to display; press the 'x' key to quit.
	You pressed the 'DownArrow' key.
	
	Press a key to display; press the 'x' key to quit.
	You pressed the 'X' key.
	*/
snippet console_cursorsize

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_cursorsize/csize.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string m0 = "This example increments the cursor size from 1% to 100%:\n";
	    string m1 = "Cursor size = {0}%. (Press any key to continue...)";
	    int[] sizes = {1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
	    int saveCursorSize;
	    saveCursorSize = Console.CursorSize;
	    Console.WriteLine(m0);
	    foreach (int size in sizes)
	        {
	        Console.CursorSize = size;
	        Console.WriteLine(m1, size);
	        Console.ReadKey();
	        }
	    Console.CursorSize = saveCursorSize;
	    }
	}
	/*
	This example produces the following results:
	
	This example increments the cursor size from 1% to 100%:
	
	Cursor size = 1%. (Press any key to continue...)
	Cursor size = 10%. (Press any key to continue...)
	Cursor size = 20%. (Press any key to continue...)
	Cursor size = 30%. (Press any key to continue...)
	Cursor size = 40%. (Press any key to continue...)
	Cursor size = 50%. (Press any key to continue...)
	Cursor size = 60%. (Press any key to continue...)
	Cursor size = 70%. (Press any key to continue...)
	Cursor size = 80%. (Press any key to continue...)
	Cursor size = 90%. (Press any key to continue...)
	Cursor size = 100%. (Press any key to continue...)
	
	*/
snippet filelength

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FileLength/filelength.cs

	using System;
	using System.IO;
	
	public class FileLength
	{
	    public static void Main()
	    {
	        DirectoryInfo di = new DirectoryInfo("c:\\");
	        FileInfo[] fiArr = di.GetFiles();
	        Console.WriteLine("The directory {0} contains the following files:", di.Name);
	        foreach (FileInfo f in fiArr)
	            Console.WriteLine("The size of {0} is {1} bytes.", f.Name, f.Length);
	    }
	}
	

snippet strmreader_peek

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StrmReader_Peek/strmreader_peek.cs

	using System;
	using System.IO;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        try 
	        {
	            if (File.Exists(path)) 
	            {
	                File.Delete(path);
	            }
	
	            using (StreamWriter sw = new StreamWriter(path)) 
	            {
	                sw.WriteLine("This");
	                sw.WriteLine("is some text");
	                sw.WriteLine("to test");
	                sw.WriteLine("Reading");
	            }
	
	            using (StreamReader sr = new StreamReader(path)) 
	            {
	
	                while (sr.Peek() > -1) 
	                {
	                    Console.WriteLine(sr.ReadLine());
	                }
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet csprovider_provideroptions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/csprovider_provideroptions/program.cs

	using System;
	using System.CodeDom.Compiler;
	using Microsoft.CSharp;
	using Microsoft.VisualBasic;
	using System.Collections.Generic;
	
	namespace ProviderOptions
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            DisplayCSharpCompilerInfo();
	            Console.WriteLine("Press Enter key to exit.");
	            Console.ReadLine();
	        }
	        static void DisplayCSharpCompilerInfo()
	        {
	            Dictionary<string, string> provOptions =
	            new Dictionary<string, string>();
	
	            provOptions.Add("CompilerVersion", "v3.5");
	            CSharpCodeProvider csProvider = new CSharpCodeProvider(provOptions);
	
	            Console.WriteLine("CSharp provider is {0}",
	                csProvider.ToString());
	            Console.WriteLine("  Provider hash code:     {0}",
	                csProvider.GetHashCode().ToString());
	            Console.WriteLine("  Default file extension: {0}",
	                csProvider.FileExtension);
	
	            Console.WriteLine();
	        }
	
	
	    }
	}
	

snippet ecdsacng

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ecdsacng/program.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	using System.Text;
	
	
	class Alice
	{
	    public static void Main(string[] args)
	    {
	        Bob bob = new Bob();
	        using (ECDsaCng dsa = new ECDsaCng())
	        {
	            dsa.HashAlgorithm = CngAlgorithm.Sha256;
	             bob.key = dsa.Key.Export(CngKeyBlobFormat.EccPublicBlob);
	
	             byte[] data = new byte[] { 21, 5, 8, 12, 207 };
	
	             byte[] signature = dsa.SignData(data);
	
	             bob.Receive(data, signature);
	            }
	    }
	
	
	}
	public class Bob 
	{
	    public byte[] key;
	
	    public void Receive(byte[] data, byte[] signature)
	    {
	        using (ECDsaCng ecsdKey = new ECDsaCng(CngKey.Import(key, CngKeyBlobFormat.EccPublicBlob)))
	        {
	            if (ecsdKey.VerifyData(data, signature))
	                Console.WriteLine("Data is good");
	            else
	                Console.WriteLine("Data is bad");
	        }
	    }
	}
snippet runtime_interopservices_marshal_copy_int

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_Copy_int/sample.cs

	using System;
	using System.Runtime.InteropServices;
	
	class Example
	{
	
	    static void Main()
	    {
	        int[] managedArray = { 1, 2, 3, 4 };
	
	        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;
	
	        IntPtr pnt = Marshal.AllocHGlobal(size);
	
	        try
	        {
	            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);
	
	
	            int[] managedArray2 = new int[managedArray.Length];
	
	            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);
	
	            Console.WriteLine("The array was copied to unmanaged memory and back.");
	
	        }
	        finally
	        {
	            Marshal.FreeHGlobal(pnt);
	        }
	        
	
	
	    }
	
	}
snippet runtime_interopservices_marshal_copy_byte

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_Copy_byte/sample.cs

	using System;
	using System.Runtime.InteropServices;
	
	class Example
	{
	
	    static void Main()
	    {
	        byte[] managedArray = { 1, 2, 3, 4 };
	
	        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;
	
	        IntPtr pnt = Marshal.AllocHGlobal(size);
	
	        try
	        {
	            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);
	
	
	            byte[] managedArray2 = new byte[managedArray.Length];
	
	            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);
	
	            Console.WriteLine("The array was copied to unmanaged memory and back.");
	
	        }
	        finally
	        {
	            Marshal.FreeHGlobal(pnt);
	        }
	        
	
	
	    }
	
	}
snippet runtime_interopservices_marshal_copy_int16

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_Copy_int16/sample.cs

	using System;
	using System.Runtime.InteropServices;
	
	class Example
	{
	
	    static void Main()
	    {
	        short[] managedArray = { 1, 2, 3, 4 };
	
	        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;
	
	        IntPtr pnt = Marshal.AllocHGlobal(size);
	
	        try
	        {
	            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);
	
	
	            short[] managedArray2 = new short[managedArray.Length];
	
	            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);
	
	            Console.WriteLine("The array was copied to unmanaged memory and back.");
	
	        }
	        finally
	        {
	            Marshal.FreeHGlobal(pnt);
	        }
	        
	
	
	    }
	
	}
snippet runtime_interopservices_marshal_copy_int64

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_Copy_int64/sample.cs

	using System;
	using System.Runtime.InteropServices;
	
	class Example
	{
	
	    static void Main()
	    {
	        Int64[] managedArray = { 1, 2, 3, 4 };
	
	        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;
	
	        IntPtr pnt = Marshal.AllocHGlobal(size);
	
	        try
	        {
	            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);
	
	
	            Int64[] managedArray2 = new Int64[managedArray.Length];
	
	            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);
	
	            Console.WriteLine("The array was copied to unmanaged memory and back.");
	
	        }
	        finally
	        {
	            Marshal.FreeHGlobal(pnt);
	        }
	        
	
	
	    }
	
	}
snippet runtime_interopservices_marshal_copy_double

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_Copy_double/sample.cs

	using System;
	using System.Runtime.InteropServices;
	
	class Example
	{
	
	    static void Main()
	    {
	        double[] managedArray = { 0.1, 0.2, 0.3, 0.4 };
	
	        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;
	
	        IntPtr pnt = Marshal.AllocHGlobal(size);
	
	        try
	        {
	            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);
	
	
	            double[] managedArray2 = new double[managedArray.Length];
	
	            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);
	
	            Console.WriteLine("The array was copied to unmanaged memory and back.");
	
	        }
	        finally
	        {
	            Marshal.FreeHGlobal(pnt);
	        }
	        
	
	
	    }
	
	}
snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/nonbacktracking1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] inputs = { "cccd.", "aaad", "aaaa" };
	      string back = @"(\w)\1+.\b";
	      string noback = @"(?>(\w)\1+).\b";
	      
	      foreach (string input in inputs)
	      {
	         Match match1 = Regex.Match(input, back);
	         Match match2 = Regex.Match(input, noback);
	         Console.WriteLine("{0}: ", input);
	
	         Console.Write("   Backtracking : ");
	         if (match1.Success)
	            Console.WriteLine(match1.Value);
	         else
	            Console.WriteLine("No match");
	         
	         Console.Write("   Nonbacktracking: ");
	         if (match2.Success)
	            Console.WriteLine(match2.Value);
	         else
	            Console.WriteLine("No match");
	      }
	   }
	}

snippet conceptual_resources_retrieving

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_retrieving/example3.cs

	using System;
	using System.Globalization;
	using System.Resources;
	using System.Threading;
	
	[assembly: NeutralResourcesLanguage("en-US")]
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] cultureNames = { "en-US", "en-CA", "ru-RU", "fr-FR" };
	      ResourceManager rm = ResourceManager.CreateFileBasedResourceManager("Strings", "Resources", null);
	      
	      foreach (var cultureName in cultureNames) {
	         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(cultureName);
	         string greeting = rm.GetString("Greeting", CultureInfo.CurrentCulture);
	         Console.WriteLine("\n{0}!", greeting);
	         Console.Write(rm.GetString("Prompt", CultureInfo.CurrentCulture));
	         string name = Console.ReadLine();
	         if (! String.IsNullOrEmpty(name))
	            Console.WriteLine("{0}, {1}!", greeting, name);
	      }
	      Console.WriteLine();
	   }
	}
snippet regularexpressions_language_backreferences

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_backreferences/backreference5.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(\p{Lu}{2})(\d{2})?(\p{Lu}{2})\b";
	      string[] inputs = { "AA22ZZ", "AABB" };
	      foreach (string input in inputs)
	      {
	         Match match = Regex.Match(input, pattern);
	         if (match.Success)
	         {
	            Console.WriteLine("Match in {0}: {1}", input, match.Value);
	            if (match.Groups.Count > 1)
	            {
	               for (int ctr = 1; ctr <= match.Groups.Count - 1; ctr++)
	               {
	                  if (match.Groups[ctr].Success)
	                     Console.WriteLine("Group {0}: {1}", 
	                                       ctr, match.Groups[ctr].Value);
	                  else
	                     Console.WriteLine("Group {0}: <no match>", ctr);
	               }
	            }
	         }
	         Console.WriteLine();
	      }      
	   }
	}

snippet runtime_interopservices_marshal_gethrforlastwin32error

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_GetHRForLastWin32Error/example.cs

	using System;
	using System.Runtime.InteropServices;
	
	internal class Win32
	{
	    [DllImportAttribute("user32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
	    public static extern int MessageBox(IntPtr hwnd, String text, String caption, uint type);
	
	}
	
	class Program
	{
	
	    static void Run()
	    {
	
	
	        Console.WriteLine("Calling Win32 MessageBox with error...");
	
	        Win32.MessageBox(new IntPtr(123132), "Press OK...", "Press OK Dialog", 0);
	
	
	        int HRESULT = Marshal.GetHRForLastWin32Error();
	
	        Console.WriteLine("The last Win32 Error was: " + HRESULT);
	    }
	
	    static void Main(string[] args)
	    {
	        Run();
	    }
	}
snippet getcustomattributes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/ca2.cs

	using System;
	using System.Reflection;
	using System.ComponentModel;
	
	[module:Description("A sample description")]
	
	[module:CLSCompliant(false)]
	
	namespace CustAttrs2CS {
	    class DemoClass {
	        static void Main(string[] args) {
	            Type clsType = typeof(DemoClass);
	            Module module = clsType.Module;
	
	            foreach(Attribute attr in Attribute.GetCustomAttributes(module)) {
	                if (attr.GetType() == typeof(DescriptionAttribute))
	                    Console.WriteLine("Module {0} has the description " +
	                        "\"{1}\".", module.Name, 
	                        ((DescriptionAttribute)attr).Description);
	                else if (attr.GetType() == typeof(CLSCompliantAttribute))
	                    Console.WriteLine("Module {0} {1} CLSCompliant.",
	                        module.Name,
	                        ((CLSCompliantAttribute)attr).IsCompliant ? 
	                            "is" : "is not");
	            }
	        }
	    }
	}
	
	/*
	 * Output:
	 * Module CustAttrs2CS.exe is not CLSCompliant.
	 * Module CustAttrs2CS.exe has the description "A sample description".
	 */

snippet path_class

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Path_Class/path_class.cs

	using System;
	using System.IO;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path1 = @"c:\temp\MyTest.txt";
	        string path2 = @"c:\temp\MyTest";
	        string path3 = @"temp";
	
	        if (Path.HasExtension(path1)) 
	        {
	            Console.WriteLine("{0} has an extension.", path1);
	        }
	
	        if (!Path.HasExtension(path2)) 
	        {
	            Console.WriteLine("{0} has no extension.", path2);
	        }
	
	        if (!Path.IsPathRooted(path3)) 
	        {
	            Console.WriteLine("The string {0} contains no root information.", path3);
	        }
	
	        Console.WriteLine("The full path of {0} is {1}.", path3, Path.GetFullPath(path3));
	        Console.WriteLine("{0} is the location for temporary files.", Path.GetTempPath());
	        Console.WriteLine("{0} is a file available for use.", Path.GetTempFileName());
	
	        /* This code produces output similar to the following:
	         * c:\temp\MyTest.txt has an extension.
	         * c:\temp\MyTest has no extension.
	         * The string temp contains no root information.
	         * The full path of temp is D:\Documents and Settings\cliffc\My Documents\Visual Studio 2005\Projects\ConsoleApplication2\ConsoleApplication2\bin\Debug\temp.
	         * D:\Documents and Settings\cliffc\Local Settings\Temp\8\ is the location for temporary files.
	         * D:\Documents and Settings\cliffc\Local Settings\Temp\8\tmp3D.tmp is a file available for use.
	         */
	    }
	}

snippet stringinsert

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringinsert/stringinsert.cs

	using System;
	
	public class Example {
	    public static void Main() 
	    {
	        string animal1 = "fox";
	        string animal2 = "dog";
	
	        string strTarget = String.Format("The {0} jumps over the {1}.", 
	                                         animal1, animal2);
	
	        Console.WriteLine("The original string is:{0}{1}{0}", 
	                          Environment.NewLine, strTarget);
	
	        Console.Write("Enter an adjective (or group of adjectives) " +
	                      "to describe the {0}: ==> ", animal1);
	        string adj1 = Console.ReadLine();
	
	        Console.Write("Enter an adjective (or group of adjectives) " + 
	                      "to describe the {0}: ==> ", animal2);    
	        string adj2 = Console.ReadLine();
	
	        adj1 = adj1.Trim() + " ";
	        adj2 = adj2.Trim() + " ";
	
	        strTarget = strTarget.Insert(strTarget.IndexOf(animal1), adj1);
	        strTarget = strTarget.Insert(strTarget.IndexOf(animal2), adj2);
	
	        Console.WriteLine("{0}The final string is:{0}{1}", 
	                          Environment.NewLine, strTarget);
	    }
	}

snippet stringcompareto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StringCompareTo/stringcompareto.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      string strFirst = "Goodbye";
	      string strSecond = "Hello";
	      string strThird = "a small string";
	      string strFourth = "goodbye";
	
	      Console.WriteLine(CompareStrings(strFirst, strFirst));
	
	      Console.WriteLine(CompareStrings(strFirst, strSecond));
	      Console.WriteLine(CompareStrings(strFirst, strThird));
	
	      Console.WriteLine(CompareStrings(strFirst, strFourth));
	      Console.WriteLine(CompareStrings(strFourth, strFirst));
	   }
	
	   private static string CompareStrings( string str1, string str2 )
	   {
	      int cmpVal = str1.CompareTo(str2);
	
	         return "The strings occur in the same position in the sort order.";
	      else if (cmpVal < 0)
	         return "The first string precedes the second in the sort order.";
	      else
	         return "The first string follows the second in the sort order.";
	    }
	}

snippet formatting_dateandtime_standard

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Standard/Roundtrip1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime originalDate, newDate;
	      string dateString;
	      originalDate = DateTime.SpecifyKind(new DateTime(2008, 4, 10, 6, 30, 0), DateTimeKind.Local);
	      dateString = originalDate.ToString("o");
	      newDate = DateTime.Parse(dateString, null, DateTimeStyles.RoundtripKind);
	      Console.WriteLine("Round-tripped {0} {1} to {2} {3}.", originalDate, originalDate.Kind, 
	                        newDate, newDate.Kind);
	      originalDate = DateTime.SpecifyKind(new DateTime(2008, 4, 12, 9, 30, 0), DateTimeKind.Utc);                  
	      dateString = originalDate.ToString("o");
	      newDate = DateTime.Parse(dateString, null, DateTimeStyles.RoundtripKind);
	      Console.WriteLine("Round-tripped {0} {1} to {2} {3}.", originalDate, originalDate.Kind, 
	                        newDate, newDate.Kind);
	      originalDate = DateTime.SpecifyKind(new DateTime(2008, 4, 13, 12, 30, 0), DateTimeKind.Unspecified);                  
	      dateString = originalDate.ToString("o");
	      newDate = DateTime.Parse(dateString, null, DateTimeStyles.RoundtripKind);
	      Console.WriteLine("Round-tripped {0} {1} to {2} {3}.", originalDate, originalDate.Kind, 
	                        newDate, newDate.Kind);
	
	      DateTimeOffset originalDTO = new DateTimeOffset(2008, 4, 12, 9, 30, 0, new TimeSpan(-8, 0, 0));
	      dateString = originalDTO.ToString("o");
	      DateTimeOffset newDTO = DateTimeOffset.Parse(dateString, null, DateTimeStyles.RoundtripKind);
	      Console.WriteLine("Round-tripped {0} to {1}.", originalDTO, newDTO);
	   }
	}

snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/explicitargs1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      CompareWithDefaults();
	      CompareExplicit();
	   }
	   
	   private static void CompareWithDefaults()
	   {
	      string protocol = GetProtocol(url);       
	      if (String.Equals(protocol, "http")) {
	      }
	      else {
	         throw new InvalidOperationException();
	      }
	   }
	
	   private static void CompareExplicit()
	   {
	      string protocol = GetProtocol(url);       
	      if (String.Equals(protocol, "http", StringComparison.OrdinalIgnoreCase)) {
	      }
	      else {
	         throw new InvalidOperationException();
	      }
	   }
	
	   private static string GetProtocol(Uri url)
	   {
	      return url.Scheme;
	   }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/exceptions2.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class ErrorClass : Exception
	{ 
	   string msg;
	   
	   public ErrorClass(string errorMessage)
	   {
	      msg = errorMessage;
	   }
	   
	   public override string Message
	   {
	      get { return msg; }
	   }
	}
	
	public static class StringUtilities
	{
	   public static string[] SplitString(this string value, int index)
	   {
	      if (index < 0 | index > value.Length) {
	         ErrorClass badIndex = new ErrorClass("The index is not within the string.");
	         throw badIndex;
	      }
	      string[] retVal = { value.Substring(0, index - 1), 
	                          value.Substring(index) };
	      return retVal;
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}

snippet process_asyncstreams

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/datareceivedevent.cs

	using System;
	using System.IO;
	using System.Diagnostics;
	using System.Text;
	
	class StandardAsyncOutputExample
	{
	    private static int lineCount = 0;
	    private static StringBuilder output = new StringBuilder();
	
	    public static void Main()
	    {
	        Process process = new Process();
	        process.StartInfo.FileName = "ipconfig.exe";
	        process.StartInfo.UseShellExecute = false;
	        process.StartInfo.RedirectStandardOutput = true;
	        process.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
	        {
	            if (!String.IsNullOrEmpty(e.Data))
	            {
	                lineCount++;
	                output.Append("\n[" + lineCount + "]: " + e.Data);
	            }
	        });
	
	        process.Start();
	
	        process.BeginOutputReadLine();
	        process.WaitForExit();
	
	        Console.WriteLine(output);
	
	        process.WaitForExit();
	        process.Close();
	
	        Console.WriteLine("\n\nPress any key to exit.");
	        Console.ReadLine();
	    }
	}
snippet certselect

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CertSelect/certselect.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Permissions;
	using System.IO;
	using System.Security.Cryptography.X509Certificates;
	
	class CertSelect
	{
	    static void Main()
	    {
	        X509Store store = new X509Store("MY",StoreLocation.CurrentUser);
	        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);
	
	        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;
	        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);
	        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, "Test Certificate Select","Select a certificate from the following list to get information on that certificate",X509SelectionFlag.MultiSelection);
	        Console.WriteLine("Number of certificates: {0}{1}",scollection.Count,Environment.NewLine);
	
	        foreach (X509Certificate2 x509 in scollection)
	        {
	            try
	            {
	                byte[] rawdata = x509.RawData;
	                Console.WriteLine("Content Type: {0}{1}",X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);
	                Console.WriteLine("Friendly Name: {0}{1}",x509.FriendlyName,Environment.NewLine);
	                Console.WriteLine("Certificate Verified?: {0}{1}",x509.Verify(),Environment.NewLine);
	                Console.WriteLine("Simple Name: {0}{1}",x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);
	                Console.WriteLine("Signature Algorithm: {0}{1}",x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);
	                Console.WriteLine("Private Key: {0}{1}",x509.PrivateKey.ToXmlString(false),Environment.NewLine);
	                Console.WriteLine("Public Key: {0}{1}",x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);
	                Console.WriteLine("Certificate Archived?: {0}{1}",x509.Archived,Environment.NewLine);
	                Console.WriteLine("Length of Raw Data: {0}{1}",x509.RawData.Length,Environment.NewLine);
	                X509Certificate2UI.DisplayCertificate(x509);
	                x509.Reset();
	            }
	            catch (CryptographicException)
	            {
	                Console.WriteLine("Information could not be written out for this certificate.");
	            }
	        }
	        store.Close();
	    }
	}
snippet strongnamekeypairx

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StrongNameKeyPairX/strongnamekeypairx.cs

	using System;
	using System.IO;
	using System.Reflection;
	
	class snkX
	{
	
	    public static void Main()
	    {
	        FileStream fs = File.Open("C:\\Company.keys", FileMode.Open);
	
	        StrongNameKeyPair k = new StrongNameKeyPair(fs);
	
	        Console.WriteLine(BitConverter.ToString(k.PublicKey));
	
	        fs.Close();
	    }
	}
	

snippet codeparameterdeclarationexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeParameterDeclarationExample/codeparameterdeclarationexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{    
	    public class CodeParameterDeclarationExample
	    {
	        public CodeParameterDeclarationExample()
	        {
	            CodeTypeDeclaration type1 = new CodeTypeDeclaration("Type1");
	
	            CodeConstructor constructor1 = new CodeConstructor();
	            constructor1.Attributes = MemberAttributes.Public;            
	            type1.Members.Add( constructor1 );    
	
	            CodeMemberMethod method1 = new CodeMemberMethod();
	            method1.Name = "TestMethod";
	
	            CodeParameterDeclarationExpression param1 = new CodeParameterDeclarationExpression("System.String", "stringParam");
	            param1.Direction = FieldDirection.Ref;
	            method1.Parameters.Add(param1);
	
	            CodeParameterDeclarationExpression param2 = new CodeParameterDeclarationExpression("System.Int32", "intParam");
	            param2.Direction = FieldDirection.Out;
	            method1.Parameters.Add(param2);
	
	
	
	            type1.Members.Add(method1);
	        }
	    }
	}
snippet fieldinfo_getvalue

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetValue/fieldinfo_getvalue.cs

	using System;
	using System.Reflection;
	
	public class FieldsClass
	{
	    public string fieldA;
	    public string fieldB;
	     
	    public FieldsClass()
	    {
	        fieldA = "A public field";
	        fieldB = "Another public field";
	    }
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        FieldsClass fieldsInst = new FieldsClass();
	        Type fieldsType = typeof(FieldsClass);
	
	        FieldInfo[] fields = fieldsType.GetFields(BindingFlags.Public 
	            | BindingFlags.Instance);
	        Console.WriteLine("Displaying the values of the fields of {0}:",
	            fieldsType);
	        for(int i = 0; i < fields.Length; i++)
	        {
	            Console.WriteLine("   {0}:\t'{1}'",
	                fields[i].Name, fields[i].GetValue(fieldsInst));
	        }
	    }
	}
	
	

snippet regularexpressions_language_miscellaneous

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_miscellaneous/miscellaneous1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern; 
	      string input = "double dare double Double a Drooling dog The Dreaded Deep";
	      
	      pattern = @"\b(D\w+)\s(d\w+)\b";
	      foreach (Match match in Regex.Matches(input, pattern))
	      {
	         Console.WriteLine(match.Value);
	         if (match.Groups.Count > 1)
	            for (int ctr = 1; ctr < match.Groups.Count; ctr++) 
	               Console.WriteLine("   Group {0}: {1}", ctr, match.Groups[ctr].Value);
	      }
	      Console.WriteLine();
	      
	      pattern = @"\b(D\w+)(?ixn) \s (d\w+) \b";
	      foreach (Match match in Regex.Matches(input, pattern))
	      {
	         Console.WriteLine(match.Value);
	         if (match.Groups.Count > 1)
	            for (int ctr = 1; ctr < match.Groups.Count; ctr++) 
	               Console.WriteLine("   Group {0}: '{1}'", ctr, match.Groups[ctr].Value);
	      }
	   }
	}

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/codepages1.cs

	using System;
	using System.IO;
	using System.Text;
	
	public class Example
	{
	   public static void Main()
	   {
	      char[] greekChars = { 'Α', 'Β', 'Γ', 'Δ', 'Ε', 'Ζ', 'Η', 'Θ', 
	                            'Ι', 'Κ', 'Λ', 'Μ', 'Ν', 'Ξ', 'Ο', 'Π', 
	                            'Ρ', 'Σ', 'Τ', 'Υ', 'Φ', 'Χ', 'Ψ', 'Ω' };
	      
	      Encoding cp737 = Encoding.GetEncoding(737);
	      int nBytes = cp737.GetByteCount(greekChars);
	      byte[] bytes737 = new byte[nBytes];
	      bytes737 = cp737.GetBytes(greekChars);
	      FileStream fs = new FileStream(@".\\CodePageBytes.dat", FileMode.Create);
	      fs.Write(bytes737, 0, bytes737.Length);                                        
	      fs.Close();
	      
	      fs = new FileStream(@".\\CodePageBytes.dat", FileMode.Open);
	      byte[] bytes1 = new byte[fs.Length];
	      fs.Read(bytes1, 0, (int)fs.Length);
	      fs.Close();
	      
	      string data = cp737.GetString(bytes1);
	      Console.WriteLine(data); 
	      Console.WriteLine();
	      
	      Encoding cp1252 = Encoding.GetEncoding(1252);
	      data = cp1252.GetString(bytes1);
	      Console.WriteLine(data);
	   }
	}

snippet methodbuilder_makegenericmethod

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MethodBuilder_MakeGenericMethod/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	class Example
	{
	    public static void Main()
	    {
	        AssemblyName aName = new AssemblyName("MyDynamic");
	        AssemblyBuilder ab = 
	            AppDomain.CurrentDomain.DefineDynamicAssembly(
	                aName, 
	                AssemblyBuilderAccess.Run);
	        ModuleBuilder mb = ab.DefineDynamicModule(aName.Name);
	        TypeBuilder tb = mb.DefineType("Test");
	
	        MethodBuilder meb = tb.DefineMethod("M", 
	            MethodAttributes.Public | MethodAttributes.Static);
	        GenericTypeParameterBuilder[] typeParams = 
	            meb.DefineGenericParameters(new string[] { "T" });
	
	        meb.SetParameters(typeParams);
	        meb.SetReturnType(typeParams[0]);
	
	        MethodInfo mi = meb.MakeGenericMethod(typeof(string));
	    }
	}
snippet addinp1addinsideadapters

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInSideAdapters/Calc1ViewToContractAddInSideAdapter.cs

	using System.AddIn.Pipeline;
	using CalcAddInViews;
	using CalculatorContracts;
	
	namespace CalcAddInSideAdapters 
	{
	    [AddInAdapter()]
	    public class CalculatorViewToContractAddInSideAdapter :
	    	ContractBase, ICalc1Contract 
	    {
	        private ICalculator _view;
	
	        public CalculatorViewToContractAddInSideAdapter(ICalculator view) 
	        {
	            _view = view;
	        }
	
	        public virtual double Add(double a, double b) 
	        {
	            return _view.Add(a, b);
	        }
	
	        public virtual double Subtract(double a, double b) 
	        {
	            return _view.Subtract(a, b);
	        }
	
	        public virtual double Multiply(double a, double b) 
	        {
	            return _view.Multiply(a, b);
	        }
	
	        public virtual double Divide(double a, double b) 
	        {
	            return _view.Divide(a, b);
	        }
	    }
	}

snippet addinp1hostsideadapters

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1HostSideAdapters/Calc1ContractToViewHostSideAdapter.cs

	using System.AddIn.Pipeline;
	using CalcHVAs;
	using CalculatorContracts;
	
	namespace CalcHostSideAdapters 
	{
	    [HostAdapterAttribute()]
	    public class CalculatorContractToViewHostSideAdapter : ICalculator 
	    {
	        private ICalc1Contract _contract;
	        private System.AddIn.Pipeline.ContractHandle _handle;
	
	        public CalculatorContractToViewHostSideAdapter(ICalc1Contract contract) 
	        {
	            _contract = contract;
	            _handle = new ContractHandle(contract);
	        }
	
	        public double Add(double a, double b) 
	        {
	            return _contract.Add(a, b);
	        }
	
	        public double Subtract(double a, double b) 
	        {
	            return _contract.Subtract(a, b);
	        }
	
	        public double Multiply(double a, double b) 
	        {
	            return _contract.Multiply(a, b);
	        }
	
	        public double Divide(double a, double b) 
	        {
	            return _contract.Divide(a, b);
	        }
	    }
	}

snippet datetime_fromfiletime

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_FromFileTime/class1.cs

	using System;
	using System.IO;
	
	namespace FromFileTime
	{
		class Class1
		{
			static void Main(string[] args)
			{			
				System.Console.WriteLine("Enter a file's path");
				string filePath = System.Console.ReadLine();
				System.IO.FileInfo fInfo;
				try {
					fInfo = new System.IO.FileInfo(filePath);
				}
				catch {
					System.Console.WriteLine("Error opening {0}", filePath);
					return;
				}
				long fileTime = System.Convert.ToInt64(fInfo.CreationTime.ToFileTime());
				Class1 theApp = new Class1();
				System.TimeSpan fileAge = theApp.FileAge(fileTime);
				System.Console.WriteLine("{0}", fileAge);
			}
	
			public System.TimeSpan FileAge(long fileCreationTime) {
	
				System.DateTime now = System.DateTime.Now;
				try {
					System.DateTime fCreationTime = 
						System.DateTime.FromFileTime(fileCreationTime);
					System.TimeSpan fileAge = now.Subtract(fCreationTime);
					return fileAge;				
				} 
				catch (ArgumentOutOfRangeException) {
					throw;
				}
			}
		}
	}

snippet lcidconversionattributesample2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/LCIDConversionAttributeSample2/lcidattrsample.cs

	
	namespace LCIDConversion
	{ 
		using System;
		using System.Runtime.InteropServices;
		using System.Reflection;
	
		class LCIDAttrSample
		{
			private const int LCID_INSTALLED = 1;
			private const int LCID_SUPPORTED = 2;
	
			[DllImport("KERNEL32.DLL", EntryPoint="IsValidLocale", SetLastError = true, CharSet = CharSet.Auto)]
			public static extern bool IsValidLocale(
													);
	
			public void CheckCurrentLCID()
			{
				MethodInfo mthIfo = this.GetType().GetMethod("IsValidLocale");
				Attribute attr = Attribute.GetCustomAttribute(mthIfo,typeof(LCIDConversionAttribute));
	
				if( attr != null)
				{
					LCIDConversionAttribute lcidAttr = (LCIDConversionAttribute)attr;
					Console.WriteLine("Position of the LCID argument in the unmanaged signature: " + lcidAttr.Value.ToString());
				}
	
				bool res = IsValidLocale(LCID_INSTALLED);
				Console.WriteLine("Result LCID_INSTALLED " + res.ToString());
				res = IsValidLocale(LCID_SUPPORTED);
				Console.WriteLine("Result LCID_SUPPORTED " + res.ToString());
			}
	
			static void Main(string[] args)
			{
				LCIDAttrSample smpl = new LCIDAttrSample();
				smpl.CheckCurrentLCID();
			}
		}
	
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/naming3.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class Converter
	{
	   public double Conversion(int number)
	   {
	      return (double) number;
	   }
	
	   public float Conversion(int number)
	   {
	      return (float) number;
	   }
	   
	   public double Conversion(long number)
	   {
	      return (double) number;
	   }
	   
	   public bool Conversion
	   {
	      get { return true; }
	   }     
	}  
	
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}  
	                                                          
snippet file_move

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_Move/file_move.cs

	using System;
	using System.IO;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	        string path2 = @"c:\temp2\MyTest.txt";
	        try 
	        {
	            if (!File.Exists(path)) 
	            {
	                using (FileStream fs = File.Create(path)) {}
	            }
	
	            if (File.Exists(path2))	
	            File.Delete(path2);
	
	            File.Move(path, path2);
	            Console.WriteLine("{0} was moved to {1}.", path, path2);
	
	            if (File.Exists(path)) 
	            {
	                Console.WriteLine("The original file still exists, which is unexpected.");
	            } 
	            else 
	            {
	                Console.WriteLine("The original file no longer exists, which is expected.");
	            }			
	
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet finfo_create

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_Create/finfo_create.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\MyTest.txt";
	        FileInfo fi = new FileInfo(path);
	
	        if (fi.Exists) 
	        {
	            fi.Delete();
	        }
	
	        using (FileStream fs = fi.Create()) 
	        {
	            Byte[] info = 
	                new UTF8Encoding(true).GetBytes("This is some text in the file.");
	
	            fs.Write(info, 0, info.Length);
	        }
	
	        using (StreamReader sr = fi.OpenText()) 
	        {
	            string s = "";
	            while ((s = sr.ReadLine()) != null) 
	            {
	                Console.WriteLine(s);
	            }
	        }
	    }
	}

snippet finfo_opentext

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_OpenText/file_opentext.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\MyTest.txt";
	
	        FileInfo fi = new FileInfo(path);
	
	        if (!fi.Exists)
	        {
	            using (FileStream fs = fi.Create())
	            {
	                Byte[] info = 
	                    new UTF8Encoding(true).GetBytes("This is some text in the file.");
	
	                fs.Write(info, 0, info.Length);
	                fs.Close();
	            }
	        }
	
	        using (StreamReader sr = fi.OpenText())
	        {
	            string s = "";
	            while ((s = sr.ReadLine()) != null) 
	            {
	                Console.WriteLine(s);
	            }
	        }
	    }
	}

snippet stringlowerupper

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringlowerupper/stringtolower.cs

	using System;
	
	public class ToLowerTest {
	    public static void Main() {
	
	        string [] info = {"Name", "Title", "Age", "Location", "Gender"};
	
	        Console.WriteLine("The initial values in the array are:");
	        foreach (string s in info)
	            Console.WriteLine(s);
	
	        Console.WriteLine("{0}The lowercase of these values is:", Environment.NewLine);        
	
	        foreach (string s in info)
	            Console.WriteLine(s.ToLower());
	
	        Console.WriteLine("{0}The uppercase of these values is:", Environment.NewLine);        
	
	        foreach (string s in info)
	            Console.WriteLine(s.ToUpper());
	    }
	}

snippet stringindexof4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringindexof4/stringindexof4.cs

	using System;
	
	public class IndexOfTest {
	    public static void Main() {
	
	        string strSource = "This is the string which we will perform the search on";
	
	        Console.WriteLine("The search string is:{0}\"{1}\"{0}", Environment.NewLine, strSource);
	
	        string strTarget = "";
	        int found = 0;
	        int totFinds = 0;
	
	        do {
	            Console.Write("Please enter a search value to look for in the above string (hit Enter to exit) ==> ");
	
	            strTarget = Console.ReadLine();
	
	            if (strTarget != "") {
	
	                for (int i = 0; i < strSource.Length; i++) {
	
	                    found = strSource.IndexOf(strTarget, i);
	
	                    if (found >= 0) {
	                        totFinds++;
	                        i = found;
	                    }
	                    else
	                        break;
	                }
	            }
	            else
	                return;
	
	            Console.WriteLine("{0}The search parameter '{1}' was found {2} times.{0}",
	                    Environment.NewLine, strTarget, totFinds);
	
	            totFinds = 0;
	
	        } while ( true );
	    }
	}

snippet asyncdelegateexamples

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/polling.cs

	using System;
	using System.Threading;
	
	namespace Examples.AdvancedProgramming.AsynchronousOperations
	{
	    public class AsyncMain 
	    {
	        static void Main() {
	            int threadId;
	
	            AsyncDemo ad = new AsyncDemo();
	
	            AsyncMethodCaller caller = new AsyncMethodCaller(ad.TestMethod);
	       
	            IAsyncResult result = caller.BeginInvoke(3000, 
	                out threadId, null, null);
	
	            while(result.IsCompleted == false) {
	                Thread.Sleep(250);
	                Console.Write(".");
	            }
	
	            string returnValue = caller.EndInvoke(out threadId, result);
	
	            Console.WriteLine("\nThe call executed on thread {0}, with return value \"{1}\".",
	                threadId, returnValue);
	        }
	    }
	}
	
	/* This example produces output similar to the following:
	
	Test method begins.
	.............
	The call executed on thread 3, with return value "My call time was 3000.".
	 */
	

snippet stringsplit2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/StringSplit10.cs

	using System;
	
	public class Example
	{
	   public static void Main() 
	   {
	      string delimStr = " ,.:";
	      char [] delimiter = delimStr.ToCharArray();
	      string words = "one two,three:four.";
	      string [] split = null;
	
	      Console.WriteLine("The delimiters are -{0}-", delimStr);
	      for (int x = 1; x <= 5; x++) {
	         split = words.Split(delimiter, x);
	         Console.WriteLine("\ncount = {0,2} ..............", x);
	         foreach (var s in split) {
	             Console.WriteLine("-{0}-", s);
	         }
	      }
	   }
	}

snippet stringsplit2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/stringsplit2.cs

	using System;
	
	public class Example
	{
	   public static void Main() 
	   {
	      string delimStr = " ,.:";
	      char [] delimiter = delimStr.ToCharArray();
	      string words = "one two,three:four.";
	      string [] split = null;
	
	      Console.WriteLine("The delimiters are -{0}-", delimStr);
	      for (int x = 1; x <= 5; x++) {
	         split = words.Split(delimiter, x);
	         Console.WriteLine("\ncount = {0,2} ..............", x);
	         foreach (var s in split) {
	             Console.WriteLine("-{0}-", s);
	         }
	      }
	   }
	}

snippet asyncdelegateexamples

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/EndInvoke.cs

	using System;
	using System.Threading;
	
	namespace Examples.AdvancedProgramming.AsynchronousOperations
	{
	    public class AsyncMain 
	    {
	        public static void Main() 
	        {
	            int threadId;
	
	            AsyncDemo ad = new AsyncDemo();
	
	            AsyncMethodCaller caller = new AsyncMethodCaller(ad.TestMethod);
	       
	            IAsyncResult result = caller.BeginInvoke(3000, 
	                out threadId, null, null);
	
	            Thread.Sleep(0);
	            Console.WriteLine("Main thread {0} does some work.",
	                Thread.CurrentThread.ManagedThreadId);
	
	            string returnValue = caller.EndInvoke(out threadId, result);
	
	            Console.WriteLine("The call executed on thread {0}, with return value \"{1}\".",
	                threadId, returnValue);
	        }
	    }
	}
	
	/* This example produces output similar to the following:
	
	Main thread 1 does some work.
	Test method begins.
	The call executed on thread 3, with return value "My call time was 3000.".
	 */
	

snippet admultidomain

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADMultiDomain/admultidomain.cs

	using System;
	using System.Reflection;
	using System.Security.Policy;
	
	class ADMultiDomain
	{
	   [LoaderOptimizationAttribute( LoaderOptimization.MultiDomainHost)]
	   public static void Main()
	   {
	      AppDomainSetup domaininfo = new AppDomainSetup();
	      domaininfo.ApplicationBase = System.Environment.CurrentDirectory;
	      domaininfo.ApplicationName = "MyMultiDomain Application";
	
	      Evidence adevidence = AppDomain.CurrentDomain.Evidence;
	
	      AppDomain newDomain = AppDomain.CreateDomain("MyMultiDomain", adevidence, domaininfo);
	
	      Worker w = (Worker) newDomain.CreateInstanceAndUnwrap( 
	         typeof(Worker).Assembly.GetName().Name,
	         "Worker"
	      );
	      w.TestLoad();
	
	      AppDomain.Unload(newDomain);
	   }
	}
	
	class Worker : MarshalByRefObject
	{
	   internal void TestLoad()
	   {
	      Assembly.Load("Text assembly name, Culture, PublicKeyToken, Version");
	      foreach (Assembly assem in AppDomain.CurrentDomain.GetAssemblies())
	         Console.WriteLine(assem.FullName);
	   }
	}
snippet adsetappdomainpolicy

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADSetAppDomainPolicy/adsetappdomainpolicy.cs

	using System;
	using System.Threading;
	using System.Security;
	using System.Security.Policy;
	using System.Security.Permissions;
	
	namespace AppDomainSnippets
	{
		class ADSetAppDomainPolicy
		{
			static void Main(string[] args)
			{
				AppDomain domain = System.AppDomain.CreateDomain("MyDomain");
				
				PolicyLevel polLevel = PolicyLevel.CreateAppDomainLevel();
				PermissionSet permSet = new PermissionSet(PermissionState.None);
				permSet.AddPermission
					(new SecurityPermission(SecurityPermissionFlag.Execution));
				polLevel.RootCodeGroup.PolicyStatement = new PolicyStatement(permSet);
				domain.SetAppDomainPolicy(polLevel);
				
				try
				{
					domain.ExecuteAssembly("Assemblies\\MyWindowsExe.exe");
				}
				catch(PolicyException e)
				{
					Console.WriteLine("PolicyException: {0}", e.Message);
				}
	
				AppDomain.Unload(domain);
			}
		}
	}
snippet guid

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Guid/Guids.cs

	using System;
	using System.Runtime.InteropServices;
	
	[Guid("F9168C5E-CEB2-4faa-B6BF-329BF39FA1E4")]
	interface IMyInterface
	{
	    void MyMethod();
	}
	
	[Guid("936DA01F-9ABD-4d9d-80C7-02AF85C822A8")]
	public class MyTestClass : IMyInterface
	{
	    public void MyMethod() {}
	
	    public static void Main( string []args )
	    {
	        GuidAttribute IMyInterfaceAttribute = (GuidAttribute) Attribute.GetCustomAttribute(typeof(IMyInterface), typeof(GuidAttribute));
	        
	        System.Console.WriteLine("IMyInterface Attribute: " + IMyInterfaceAttribute.Value );    
	
	        Guid myGuid1 = new Guid(IMyInterfaceAttribute.Value );
	        Guid myGuid2 = new Guid(myGuid1.ToByteArray());
	
	        if (myGuid1.Equals(myGuid2))
	            System.Console.WriteLine("myGuid1 equals myGuid2");
	        else
	            System.Console.WriteLine("myGuid1 does not equal myGuid2" );
	
	        if ( myGuid1 == myGuid2 )
	            System.Console.WriteLine( "myGuid1 == myGuid2" );
	        else
	            System.Console.WriteLine( "myGuid1 != myGuid2" );
	    }
	}

snippet conceptual_resources_retrieving

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_retrieving/getstring.cs

	using System;
	using System.Globalization;
	using System.Resources;
	using System.Threading;
	
	[assembly: NeutralResourcesLanguageAttribute("en-US")]
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] cultureNames = { "en-US", "fr-FR", "ru-RU", "es-ES" };
	      Random rnd = new Random();
	      ResourceManager rm = new ResourceManager("Strings", 
	                               typeof(Example).Assembly);
	
	      for (int ctr = 0; ctr <= cultureNames.Length; ctr++) {
	         string cultureName = cultureNames[rnd.Next(0, cultureNames.Length)];
	         CultureInfo culture = CultureInfo.CreateSpecificCulture(cultureName);
	         Thread.CurrentThread.CurrentCulture = culture;
	         Thread.CurrentThread.CurrentUICulture = culture;
	         
	         Console.WriteLine("Current culture: {0}", culture.NativeName);
	         string timeString = rm.GetString("TimeHeader");
	         Console.WriteLine("{0} {1:T}\n", timeString, DateTime.Now);   
	      }   
	   }
	}

snippet string_lastindexof8

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_LastIndexOf8/lastixof8.cs

	using System;
	
	class Sample {
	    public static void Main() {
	
	    string br1 = "0----+----1----+----2----+----3----+----4----+----5----+----6----+-";
	    string br2 = "0123456789012345678901234567890123456789012345678901234567890123456";
	    string str = "Now is the time for all good men to come to the aid of their party.";
	    int start;
	    int at;
	    int count;
	    int end;
	
	    start = str.Length-1;
	    end = start/2 - 1;
	    Console.WriteLine("All occurrences of 'he' from position {0} to {1}.", start, end);
	    Console.WriteLine("{1}{0}{2}{0}{3}{0}", Environment.NewLine, br1, br2, str);
	    Console.Write("The string 'he' occurs at position(s): ");
	
	    count = 0;
	    at = 0;
	    while((start > -1) && (at > -1))
	        {
	        at = str.LastIndexOf("he", start, count);
	        if (at > -1) 
	            {
	            Console.Write("{0} ", at);
	            start = at - 1;
	            }
	        }
	    Console.Write("{0}{0}{0}", Environment.NewLine);
	    }
	}
	/*
	This example produces the following results:
	All occurrences of 'he' from position 66 to 32.
	0----+----1----+----2----+----3----+----4----+----5----+----6----+-
	0123456789012345678901234567890123456789012345678901234567890123456
	Now is the time for all good men to come to the aid of their party.
	
	The string 'he' occurs at position(s): 56 45
	*/
snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/explicit3.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "This is the first sentence. Is it the beginning " + 
	                     "of a literary masterpiece? I think not. Instead, " + 
	                     "it is a nonsensical paragraph.";
	      string pattern = @"\b\(?(?n:(?>\w+),?\s?)+[\.!?]\)?";
	
	      foreach (Match match in Regex.Matches(input, pattern))
	      {
	         Console.WriteLine("The match: {0}", match.Value);
	         int groupCtr = 0;
	         foreach (Group group in match.Groups)
	         {
	            Console.WriteLine("   Group {0}: {1}", groupCtr, group.Value);
	            groupCtr++;
	            int captureCtr = 0;
	            foreach (Capture capture in group.Captures)
	            {
	               Console.WriteLine("      Capture {0}: {1}", captureCtr, capture.Value);
	               captureCtr++;
	            }
	         }
	      }
	   }
	}

snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/explicit2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "This is the first sentence. Is it the beginning " + 
	                     "of a literary masterpiece? I think not. Instead, " + 
	                     "it is a nonsensical paragraph.";
	      string pattern = @"(?n)\b\(?((?>\w+),?\s?)+[\.!?]\)?";
	
	      foreach (Match match in Regex.Matches(input, pattern))
	      {
	         Console.WriteLine("The match: {0}", match.Value);
	         int groupCtr = 0;
	         foreach (Group group in match.Groups)
	         {
	            Console.WriteLine("   Group {0}: {1}", groupCtr, group.Value);
	            groupCtr++;
	            int captureCtr = 0;
	            foreach (Capture capture in group.Captures)
	            {
	               Console.WriteLine("      Capture {0}: {1}", captureCtr, capture.Value);
	               captureCtr++;
	            }
	         }
	      }
	   }
	}

snippet numberformatinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/NumberFormatInfo/NumberFormatInfo.cs

	using System;
	using System.Globalization;
	using System.Text;
	
	public sealed class App 
	{
	    static void Main() 
	    {
	        StringBuilder sb = new StringBuilder();
	
	        foreach (CultureInfo ci in CultureInfo.GetCultures(CultureTypes.SpecificCultures)) 
	        {
	            if (ci.TwoLetterISOLanguageName != "en") continue;
	             
	            NumberFormatInfo nfi = ci.NumberFormat;
	            sb.AppendFormat("The currency symbol for '{0}' is '{1}'",
	                ci.DisplayName, nfi.CurrencySymbol);
	            sb.AppendLine();
	        }
	        Console.WriteLine(sb.ToString());
	    }
	}
	
snippet portableclasslibrarymvvm

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/portableclasslibrarymvvm/relaycommand.cs

	using System;
	using System.Windows.Input;
	
	namespace SimpleMVVM.ViewModel
	{
	    public class RelayCommand : ICommand
	    {
	        private readonly Action _handler;
	        private bool _isEnabled;
	
	        public RelayCommand(Action handler)
	        {
	            _handler = handler;
	        }
	
	        public bool IsEnabled
	        {
	            get { return _isEnabled; }
	            set
	            {
	                if (value != _isEnabled)
	                {
	                    _isEnabled = value;
	                    if (CanExecuteChanged != null)
	                    {
	                        CanExecuteChanged(this, EventArgs.Empty);
	                    }
	                }
	            }
	        }
	
	        public bool CanExecute(object parameter)
	        {
	            return IsEnabled;
	        }
	
	        public event EventHandler CanExecuteChanged;
	
	        public void Execute(object parameter)
	        {
	            _handler();
	        }
	    }
	}
snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/callback.cs

	using System;
	using System.Runtime.InteropServices;
	
	public delegate bool FPtr(int value);
	public delegate bool FPtr2(string value);
	
	public class LibWrap
	{
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern void TestCallBack(FPtr cb, int value);
	
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern void TestCallBack2(FPtr2 cb2, string value);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        FPtr cb = new FPtr(App.DoSomething);
	        LibWrap.TestCallBack(cb, 99);
	        FPtr2 cb2 = new FPtr2(App.DoSomething2);
	        LibWrap.TestCallBack2(cb2, "abc");
	    }
	
	    public static bool DoSomething(int value)
	    {
	        Console.WriteLine($"\nCallback called with param: {value}");
	        return true;
	    }
	
	    public static bool DoSomething2(string value)
	    {
	        Console.WriteLine($"\nCallback called with param: {value}");
	        return true;
	    }
	}

snippet io_fileinfo_exists

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_FileInfo_Exists/sample.cs

	using System;
	using System.IO;
	
	
	class Program
	{
	    static void Main(string[] args)
	    {
	        
	
	
	    }
	
	    public byte[] OpenDataFile(string FileName)
	    {
	        if (FileName == null || FileName.Length == 0)
	        {
	            throw new ArgumentNullException("FileName");
	        }
	
	        FileInfo fInfo = new FileInfo(FileName);
	        
	        if (!fInfo.Exists)
	        {
	            throw new FileNotFoundException("The file was not found.", FileName);
	        }
	
	        FileStream fStream = new FileStream(FileName, FileMode.Open);
	
	        byte [] buffer = new byte[fStream.Length];
	
	        fStream.Read(buffer, 0, (int)fStream.Length);
	
	        return buffer;
	
	    }
	} 
snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/exceptions1.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class ErrorClass
	{ 
	   string msg;
	   
	   public ErrorClass(string errorMessage)
	   {
	      msg = errorMessage;
	   }
	   
	   public string Message
	   {
	      get { return msg; }
	   }
	}
	
	public static class StringUtilities
	{
	   public static string[] SplitString(this string value, int index)
	   {
	      if (index < 0 | index > value.Length) {
	         ErrorClass badIndex = new ErrorClass("The index is not within the string.");
	         throw badIndex;
	      }
	      string[] retVal = { value.Substring(0, index - 1), 
	                          value.Substring(index) };
	      return retVal;
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}

snippet conceptual_monitors

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_monitors/badbox1.cs

	using System;
	using System.Collections.Generic;
	using System.Threading;
	using System.Threading.Tasks;
	
	public class Example
	{
	   public static void Main()
	   {
	
	      int nTasks = 0;
	      object o = nTasks;
	      List<Task> tasks = new List<Task>();
	      
	      try {
	         for (int ctr = 0; ctr < 10; ctr++)
	                                        Thread.Sleep(250);
	                                        Monitor.Enter(o);
	                                        try {
	                                           nTasks++;
	                                        }
	                                        finally {
	                                           Monitor.Exit(o);
	                                        }
	                                      } ));
	         Task.WaitAll(tasks.ToArray());
	         Console.WriteLine("{0} tasks started and executed.", nTasks);
	      }
	      catch (AggregateException e) {
	         String msg = String.Empty;
	         foreach (var ie in e.InnerExceptions) {
	            Console.WriteLine("{0}", ie.GetType().Name);
	            if (! msg.Contains(ie.Message))
	               msg += ie.Message + Environment.NewLine;
	         }
	         Console.WriteLine("\nException Message(s):");
	         Console.WriteLine(msg);
	      }
	   }
	}

snippet conceptual_encoding

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_encoding/replacementascii.cs

	using System;
	using System.Text;
	
	public class Example
	{
	   public static void Main()
	   {
	      Encoding enc = Encoding.ASCII;
	      
	      string str1 = "\u24C8 \u2075 \u221E";
	      Console.WriteLine(str1);
	      foreach (var ch in str1)
	         Console.Write("{0} ", Convert.ToUInt16(ch).ToString("X4"));
	
	      Console.WriteLine("\n");
	
	      byte[] bytes = enc.GetBytes(str1);
	      Console.Write("Encoded bytes: ");
	      foreach (var byt in bytes)
	         Console.Write("{0:X2} ", byt);
	      Console.WriteLine("\n");
	
	      string str2 = enc.GetString(bytes);
	      Console.WriteLine("Round-trip: {0}", str1.Equals(str2));
	      if (! str1.Equals(str2)) {
	         Console.WriteLine(str2);
	         foreach (var ch in str2)
	            Console.Write("{0} ", Convert.ToUInt16(ch).ToString("X4"));
	
	         Console.WriteLine();
	      } 
	   }
	}

snippet type_getproperty5

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty5/type_getproperty2.cs

	using System;
	using System.Reflection;
	public class MyPropertyClass
	{
	    private int [,] myPropertyArray = new int[10,10]; 
	    public int this [int i,int j]
	    {
	        get 
	        {
	            return myPropertyArray[i,j];
	        }
	        set 
	        {
	            myPropertyArray[i,j] = value;
	        }
	    }
	}
	public class MyTypeClass
	{
	    public static void Main()
	    {
	        try
	        {
	            Type myType=typeof(MyPropertyClass);
	            Type[] myTypeArray = new Type[2];
	            myTypeArray.SetValue(typeof(int),0);
	            myTypeArray.SetValue(typeof(int),1);
	            PropertyInfo myPropertyInfo = myType.GetProperty("Item",
	                typeof(int),myTypeArray,null);
	            Console.WriteLine(myType.FullName + "." + myPropertyInfo.Name + 
	                " has a property type of " + myPropertyInfo.PropertyType);
	         }
	        catch(Exception ex)
	        {
	            Console.WriteLine("An exception occurred " + ex.Message);
	        }
	    }
	}
	

snippet generic_sortedlist_ctor_idic

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedList_ctor_IDic/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Dictionary<string, string> openWith = 
	                                  new Dictionary<string, string>();
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	        
	        SortedList<string, string> copy = 
	                  new SortedList<string, string>(openWith);
	
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in copy )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	               kvp.Key, kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Key = bmp, Value = paint.exe
	Key = dib, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	Key = txt, Value = notepad.exe
	 */
	
	
	

snippet generic_sorteddictionary_ctor_idic

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedDictionary_ctor_IDic/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Dictionary<string, string> openWith = 
	                                  new Dictionary<string, string>();
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	        
	        SortedDictionary<string, string> copy = 
	                  new SortedDictionary<string, string>(openWith);
	
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in copy )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	               kvp.Key, kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Key = bmp, Value = paint.exe
	Key = dib, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	Key = txt, Value = notepad.exe
	 */
	
	
	

snippet isdefined

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IsDefined/id3.cs

	using System;
	using System.Reflection;
	using System.Runtime.InteropServices;
	
	namespace IsDef3CS 
	{
	    [Guid("BF235B41-52D1-46cc-9C55-046793DB363F")]
	    public class TestClass 
	    {
	    }
	
	    public class DemoClass 
	    {
	        static void Main(string[] args) 
	        {
	            Type clsType = typeof(TestClass);
	            bool isDef = Attribute.IsDefined(clsType, typeof(GuidAttribute));
	            Console.WriteLine("The Guid attribute {0} defined for class {1}.",
	                isDef ? "is" : "is not", clsType.Name);
	            if (isDef) 
	            {
	                GuidAttribute guidAttr = 
	                    (GuidAttribute)Attribute.GetCustomAttribute(clsType, 
	                        typeof(GuidAttribute));
	                if (guidAttr != null)
	                    Console.WriteLine("GUID: {" + guidAttr.Value + "}.");
	                else
	                    Console.WriteLine("The Guid attribute could " + 
	                        "not be retrieved.");
	            }
	        }
	    }
	}
	
	/*
	 * Output:
	 * The Guid attribute is defined for class TestClass.
	 * GUID: {BF235B41-52D1-46cc-9C55-046793DB363F}.
	 */

snippet generic_dictionary_ctor_idic

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_Dictionary_ctor_IDic/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        SortedDictionary<string, string> openWith = 
	            new SortedDictionary<string, string>();
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	        
	        Dictionary<string, string> copy = 
	            new Dictionary<string, string>(openWith);
	
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in copy )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	               kvp.Key, kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Key = bmp, Value = paint.exe
	Key = dib, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	Key = txt, Value = notepad.exe
	 */
	
	
	

snippet getcustomattributes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/ca3.cs

	using System;
	using System.Runtime.InteropServices;
	
	namespace CustAttrs3CS {
	    [Guid("BF235B41-52D1-46CC-9C55-046793DB363F")]
	    [ProgId("CustAttrs3CS.ClassWithGuidAndProgId")]
	    public class ClassWithGuidAndProgId {
	    }
	
	    class DemoClass {
	        static void Main(string[] args) {
	            Type clsType = typeof(ClassWithGuidAndProgId);
	
	            foreach(Attribute attr in Attribute.GetCustomAttributes(clsType)) {
	                if (attr.GetType() == typeof(GuidAttribute)) {
	                    Console.WriteLine("Class {0} has a GUID.", clsType.Name);
	                    Console.WriteLine("GUID: {" + 
	                        ((GuidAttribute)attr).Value + "}.");
	                }
	
	                else if (attr.GetType() == typeof(ProgIdAttribute)) {
	                    Console.WriteLine("Class {0} has a ProgId.", clsType.Name);
	                    Console.WriteLine("ProgId: \"{0}\".",
	                        ((ProgIdAttribute)attr).Value);
	                }
	            }
	        }
	    }
	}
	
	/* 
	 * Output:
	 * Class ClassWithGuidAndProgId has a GUID.
	 * GUID: {BF235B41-52D1-46CC-9C55-046793DB363F}.
	 * Class ClassWithGuidAndProgId has a ProgId.
	 * ProgId: "CustAttrs3CS.ClassWithGuidAndProgId".
	 */

snippet installer_install

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_Install/installer_install.cs

	/*
	   System.Configuration.Install.Installer.Install
	   System.Configuration.Install.Installer.Commit
	
	   The following example demonstrates the 'Install' and 'Commit' methods 
	   of the 'Installer' class.
	   A class is derived from the 'Installer' base class and the Install
	   and Commit methods are overridden.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.Collections;
	
	namespace MyAssembly
	{
	[RunInstaller(true)]
	   public class MyInstallerSample : Installer
	   {
	
	      public override void Install( IDictionary mySavedState )
	      {
	         base.Install( mySavedState );
	         Console.WriteLine( "The Install method of 'MyInstallerSample' has been called" );
	      }
	      public override void Commit( IDictionary mySavedState )
	      {
	         base.Commit( mySavedState );
	         Console.WriteLine( "The Commit method of 'MyInstallerSample'"
	                           + "has been called" );
	      }
	      static void Main()
	      {
	         Console.WriteLine("Use installutil.exe to run the assembly"
	                              + " Installer_Install.exe");
	      }
	   }
	}

snippet stringbuilder_copyto2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringbuilder_copyto2/ct2.cs

	
	
	using System;
	using System.Text;
	
	class Sample 
	{
	    protected static char[] dest = new char[6];
	    public static void Main() 
	    {
	    StringBuilder src = new StringBuilder("abcdefghijklmnopqrstuvwxyz!");
	    dest[1] = ')';
	    dest[2] = ' ';
	
	
	    Console.WriteLine("\nPiece) Data:");
	    for(int ix = 0; ix < 9; ix++)
	        {
	        dest[0] = ix.ToString()[0];
	        src.CopyTo(ix * 3, dest, 3, 3);
	        Console.Write("    ");
	        Console.WriteLine(dest);
	        }
	    }
	}
	/*
	This example produces the following results:
	
	Piece) Data:
	    0) abc
	    1) def
	    2) ghi
	    3) jkl
	    4) mno
	    5) pqr
	    6) stu
	    7) vwx
	    8) yz!
	*/
snippet codemethodreferenceexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeMethodReferenceExample/codemethodreferenceexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeMethodReferenceExample
	    {
	        public CodeMethodReferenceExample()
	        {
	            CodeTypeDeclaration type1 = new CodeTypeDeclaration("Type1");            
	            
	            CodeMemberMethod method1 = new CodeMemberMethod();
	            method1.Name = "TestMethod";
	            type1.Members.Add(method1);
	            
	            CodeConstructor constructor1 = new CodeConstructor();
	            constructor1.Attributes = MemberAttributes.Public;            
	            type1.Members.Add( constructor1 );
	            
	            CodeMethodReferenceExpression methodRef1 = new CodeMethodReferenceExpression( new CodeThisReferenceExpression(), "TestMethod" );
	            CodeMethodInvokeExpression invoke1 = new CodeMethodInvokeExpression( methodRef1, new CodeParameterDeclarationExpression[] {} );                                    
	            constructor1.Statements.Add( invoke1 );
	        }
	
	        public void InvokeExample()
	        {
	            CodeMethodReferenceExpression methodRef1 = new CodeMethodReferenceExpression( new CodeThisReferenceExpression(), "TestMethod" );
	            CodeMethodInvokeExpression invoke1 = new CodeMethodInvokeExpression( methodRef1, new CodeParameterDeclarationExpression[] {} );                                    
	
	
	            
	        }
	    }
	}
snippet datetime_compareto_2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_CompareTo_2/CompareTo_CS1_24564.cs

	using System;
	
	public class DateTimeComparison
	{
	   private enum DateComparisonResult
	   {
	      Earlier = -1,
	      Later = 1,
	      TheSame = 0
	   };
	
	   public static void Main()
	   {
	      DateTime thisDate = DateTime.Today;
	
	
	      DateTime thisDateNextYear, thisDateLastYear;
	
	      thisDateNextYear = thisDate.AddYears(1);
	      thisDateLastYear = thisDate.AddYears(-1);   
	
	      DateComparisonResult comparison;
	      comparison = (DateComparisonResult) thisDate.CompareTo(thisDateLastYear);
	      Console.WriteLine("CompareTo method returns {0}: {1:d} is {2} than {3:d}", 
	                        (int) comparison, thisDate, comparison.ToString().ToLower(), 
	                        thisDateLastYear);
	      
	      comparison = (DateComparisonResult) thisDate.CompareTo(thisDateNextYear);
	      Console.WriteLine("CompareTo method returns {0}: {1:d} is {2} than {3:d}", 
	                        (int) comparison, thisDate, comparison.ToString().ToLower(), 
	                        thisDateNextYear);
	   }
	}

snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/embeddednulls1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      string str1 = "Aa";
	      string str2 = "A" + new String('\u0000', 3) + "a";
	      Console.WriteLine("Comparing '{0}' ({1}) and '{2}' ({3}):", 
	                        str1, ShowBytes(str1), str2, ShowBytes(str2));
	      Console.WriteLine("   With String.Compare:");
	      Console.WriteLine("      Current Culture: {0}", 
	                        String.Compare(str1, str2, StringComparison.CurrentCulture));
	      Console.WriteLine("      Invariant Culture: {0}", 
	                        String.Compare(str1, str2, StringComparison.InvariantCulture));
	
	      Console.WriteLine("   With String.Equals:");
	      Console.WriteLine("      Current Culture: {0}", 
	                        String.Equals(str1, str2, StringComparison.CurrentCulture));
	      Console.WriteLine("      Invariant Culture: {0}", 
	                        String.Equals(str1, str2, StringComparison.InvariantCulture));
	   }
	   
	   private static string ShowBytes(string str)
	   {
	      string hexString = String.Empty;
	      for (int ctr = 0; ctr < str.Length; ctr++)
	      {
	         string result = String.Empty;
	         result = Convert.ToInt32(str[ctr]).ToString("X4");
	         result = " " + result.Substring(0,2) + " " + result.Substring(2, 2);
	         hexString += result;
	      }
	      return hexString.Trim();
	   }
	}

snippet string_isinterned

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_isinterned/isin.cs

	using System;
	using System.Text;
	using System.Runtime.CompilerServices;
	
	[assembly: CompilationRelaxations(CompilationRelaxations.NoStringInterning)]
	class Sample
	{
	    public static void Main()
	    {
	        String str1 = "abcd";
	
	        String str2 = new StringBuilder().Append("wx").Append("yz").ToString();
	        Console.WriteLine();
	        Test(1, str1);
	        Test(2, str2);
	    }
	
	    public static void Test(int sequence, String str)
	    {
	        Console.Write("{0}) The string, '", sequence);
	        String strInterned = String.IsInterned(str);
	        if (strInterned == null)
	            Console.WriteLine("{0}', is not interned.", str);
	        else
	            Console.WriteLine("{0}', is interned.", strInterned);
	    }
	}
	
	
	
	
	
snippet conceptual_regularexpressions_objectmodel

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_objectmodel/capturecollection1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = "((a(b))c)+";
	      string input = "abcabcabc";
	      
	      Match match = Regex.Match(input, pattern);
	      if (match.Success)
	      {
	         Console.WriteLine("Match: '{0}' at position {1}",  
	                           match.Value, match.Index);
	         GroupCollection groups = match.Groups;
	         for (int ctr = 0; ctr < groups.Count; ctr++) {
	            Console.WriteLine("   Group {0}: '{1}' at position {2}", 
	                              ctr, groups[ctr].Value, groups[ctr].Index);
	            CaptureCollection captures = groups[ctr].Captures;
	            for (int ctr2 = 0; ctr2 < captures.Count; ctr2++) {
	               Console.WriteLine("      Capture {0}: '{1}' at position {2}", 
	                                 ctr2, captures[ctr2].Value, captures[ctr2].Index);
	            }                     
	         }
	      }
	   }
	}

snippet conceptual_events_other

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_events_other/example2.cs

	using System;
	
	public class MouseEventArgs : EventArgs
	{
	}
	
	public class EventNameEventArgs : EventArgs
	{
	}
	
	class EventingSnippets
	{
	    public event EventNameEventHandler EventName;
	
	    public delegate void EventNameEventHandler(object sender, EventNameEventArgs e);
	
	    void EventHandler(object sender, EventNameEventArgs e) {}
	
	    void Mouse_Moved(object sender, MouseEventArgs e){}
	
	    void OnSomeSignal(EventNameEventArgs e)
	    {
	        EventNameEventHandler handler = EventName;
	        if (handler != null)
	        {
	            handler(this, e);
	        }
	    }
	
	    public static void Main()
	    {
	
	        Console.WriteLine("EventingSnippets Main()");
	    }
	}

snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/api1.cs

	using System;
	
	public class FileName : IComparable
	{
	   string fname;
	   StringComparer comparer; 
	   
	   public FileName(string name, StringComparer comparer)
	   {
	      if (String.IsNullOrEmpty(name))
	         throw new ArgumentNullException("name");
	
	      this.fname = name;
	      
	      if (comparer != null)
	         this.comparer = comparer;
	      else
	         this.comparer = StringComparer.OrdinalIgnoreCase;
	   }
	
	   public string Name
	   {
	      get { return fname; }
	   }
	   
	   public int CompareTo(object obj)
	   {
	      if (obj == null) return 1;
	
	      if (! (obj is FileName))
	         return comparer.Compare(this.fname, obj.ToString());
	      else
	         return comparer.Compare(this.fname, ((FileName) obj).Name);
	   }
	}
	
	public class Class1
	{
	   public static void Main()
	   {
	      FileName file1 = new FileName("autoexec.bat", null);
	      FileName file2 = new FileName("AutoExec.BAT", null);
	      Console.WriteLine(file1.CompareTo(file2));
	   }
	}

snippet stringbuilder_remove

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringbuilder_remove/remove.cs

	using System;
	using System.Text;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string rule1 = "0----+----1----+----2----+----3----+----4---";
	    string rule2 = "01234567890123456789012345678901234567890123";
	    string str =   "The quick brown fox jumps over the lazy dog.";
	    StringBuilder sb = new StringBuilder(str);
	
	    Console.WriteLine();
	    Console.WriteLine("StringBuilder.Remove method");
	    Console.WriteLine();
	    Console.WriteLine("Original value:");
	    Console.WriteLine(rule1);
	    Console.WriteLine(rule2);
	    Console.WriteLine("{0}", sb.ToString());
	    Console.WriteLine();
	
	
	    Console.WriteLine("New value:");
	    Console.WriteLine(rule1);
	    Console.WriteLine(rule2);
	    Console.WriteLine("{0}", sb.ToString());
	    }
	}
	/*
	This example produces the following results:
	
	StringBuilder.Remove method
	
	Original value:
	0----+----1----+----2----+----3----+----4---
	01234567890123456789012345678901234567890123
	The quick brown fox jumps over the lazy dog.
	
	New value:
	0----+----1----+----2----+----3----+----4---
	01234567890123456789012345678901234567890123
	The quick fox jumps over the lazy dog.
	
	*/
snippet addincollectionpipelineaddinsideadapter

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/LibraryManagerAddInAdapter.cs

	using System.IO;
	using System;
	namespace LibraryContractsAddInAdapters {
	    
	    
	public class LibraryManagerAddInAdapter
	{
	
	    internal static LibraryContractsBase.LibraryManager ContractToViewAdapter(Library.ILibraryManagerContract contract) 
	    {
	        StreamWriter sw = new StreamWriter(@"c:\meow\adaptercalls.txt", true);
	        sw.WriteLine("Called LibraryManagerAddInAdapter.ContractToViewAdapter");
	        sw.Close();
	        if (contract.GetType().Equals(typeof(LibraryManagerViewToContractAddInAdapter)))
	        {
	            return ((LibraryManagerViewToContractAddInAdapter)(contract)).GetSourceView();
	        }
	        else {
	            return new LibraryManagerContractToViewAddInAdapter(contract);
	        }
	    }
	
	    internal static Library.ILibraryManagerContract ViewToContractAdapter(LibraryContractsBase.LibraryManager view) 
	    {
	        StreamWriter sw = new StreamWriter(@"c:\meow\adaptercalls.txt", true);
	        sw.WriteLine("Called LibraryManagerAddInAdapter.ViewToContractAdapter");
	        sw.Close();
	        if (view.GetType().Equals(typeof(LibraryManagerContractToViewAddInAdapter)))
	        {
	            return ((LibraryManagerContractToViewAddInAdapter)(view)).GetSourceContract();
	        }
	        else {
	            return new LibraryManagerViewToContractAddInAdapter(view);
	        }
	    }
	}
	}
	

snippet type_getproperty3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty3/type_getproperty3.cs

	
	using System;
	using System.Reflection;
	class MyClass1
	{         
	    private int [,] myArray = {{1,2},{3,4}}; 
	    public int this [int i,int j]   
	    {
	        get 
	        {
	            return myArray[i,j];
	        }
	        set 
	        {
	            myArray[i,j] = value;
	        }
	    }
	}
	public class MyTypeClass
	{
	    public static void Main(string[] args)
	    {
	        try
	        { 
	            Type myType=typeof(MyClass1);       
	            Type[] myTypeArr = new Type[2];
	            myTypeArr.SetValue(typeof(int),0);            
	            myTypeArr.SetValue(typeof(int),1);
	            PropertyInfo myPropInfo = myType.GetProperty("Item", myTypeArr);
	            Console.WriteLine("The {0} property exists in MyClass1.", myPropInfo.ToString());
	        }           
	        catch(NullReferenceException e)
	        {
	            Console.WriteLine("An exception occurred.");
	            Console.WriteLine("Source : {0}" , e.Source);
	            Console.WriteLine("Message : {0}" , e.Message);
	        }
	    }
	}
	

snippet memorymappedfiles_memorymappedfile_openexisting

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/memorymappedfiles_memorymappedfile_openexisting/program.cs

	using System;
	using System.IO.MemoryMappedFiles;
	using System.Runtime.InteropServices;
	
	
	class Program
	{
	    static void Main(string[] args)
	    {
	        using (var mmf = MemoryMappedFile.OpenExisting("ImgA"))
	        {
	            using (var accessor = mmf.CreateViewAccessor(4000000, 2000000))
	            {
	                int colorSize = Marshal.SizeOf(typeof(MyColor));
	                MyColor color;
	
	                for (long i = 0; i < 1500000; i += colorSize)
	                {
	                    accessor.Read(i, out color);
	                    color.Brighten(20);
	                    accessor.Write(i, ref color);
	                }
	            }
	        }
	    }
	}
	
	public struct MyColor
	{
	    public short Red;
	    public short Green;
	    public short Blue;
	    public short Alpha;
	
	    public void Brighten(short value)
	    {
	        Red = (short)Math.Min(short.MaxValue, (int)Red + value);
	        Green = (short)Math.Min(short.MaxValue, (int)Green + value);
	        Blue = (short)Math.Min(short.MaxValue, (int)Blue + value);
	        Alpha = (short)Math.Min(short.MaxValue, (int)Alpha + value);
	    }
	}

snippet conceptual_resources_metrostyle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_metrostyle/blankpage.xaml.cs

	using System;
	using System.Globalization;
	using Windows.ApplicationModel.Resources;
	using Windows.ApplicationModel.Resources.Core;
	using Windows.UI.Xaml.Controls;
	
	public class Example
	{
	    public static void Run(Windows.UI.Xaml.Controls.TextBlock outputBlock)
	    {
	        outputBlock.Text += String.Format("\nThe current culture is {0}.\n", CultureInfo.CurrentCulture.Name);
	        ResourceLoader rl = new ResourceLoader();
	
	        string greeting = rl.GetString("Greeting");
	        outputBlock.Text += String.Format("{0}\n", String.IsNullOrEmpty(greeting) ? "Здравствуйте" :  greeting);
	
	        
	        ResourceContext ctx = new Windows.ApplicationModel.Resources.Core.ResourceContext();
	        ctx.Languages =  new string[] { "fr-FR" } ;
	
	        ResourceMap rmap = ResourceManager.Current.MainResourceMap.GetSubtree("Resources");
	        string newGreeting = rmap.GetValue("Greeting", ctx).ValueAsString();
	
	        outputBlock.Text += String.Format("\n\nCulture of Current Context: {0}\n", ctx.Languages[0]);
	        outputBlock.Text += String.Format("{0}\n", String.IsNullOrEmpty(newGreeting) ? greeting : newGreeting);
	        
	    }
	}
	
	namespace ResourceCS1
	{
	    public sealed partial class BlankPage : Page
	    {
	        public BlankPage()
	        {
	            
	            InitializeComponent();
	            Example.Run(outputBlock);
	        }
	    }
	}

snippet threadabex

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/source2.cs

	using System;
	using System.Threading;
	using System.Security.Permissions;
	
	public class ThreadWork
	{
	    public static void DoWork()
	    {
	        try
	        {
	            Thread.Sleep(2000);
	        }
	        catch (ThreadAbortException ex)
	        {
	            if (ex.ExceptionState != null)
	            {
	                Console.WriteLine("Exception State: {0}", ex.ExceptionState);
	            }
	        }
	        finally
	        {
	        }
	    }
	}
	
	class ThreadAbortTest
	{
	    public static void Main()
	    {
	        ThreadStart myThreadDelegate = new ThreadStart(ThreadWork.DoWork);
	        Thread myThread = new Thread(myThreadDelegate);
	        myThread.Start();
	        Thread.Sleep(1000);
	        myThread.Abort("You are finished!");
	        myThread.Join();
	    }
	}

snippet isdefined

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IsDefined/id5.cs

	using System;
	using System.Reflection;
	
	namespace IsDef5CS 
	{
	    public class TestClass 
	    {
	        public void Method1(params String[] args)
	        {}
	    }
	
	    public class DemoClass 
	    {
	        static void Main(string[] args) 
	        {
	            Type clsType = typeof(TestClass);
	            MethodInfo mInfo = clsType.GetMethod("Method1");
	            ParameterInfo[] pInfo = mInfo.GetParameters();
	            if (pInfo != null) 
	            {
	                bool isDef = Attribute.IsDefined(pInfo[0], 
	                                                 typeof(ParamArrayAttribute));
	                Console.WriteLine("The ParamArray attribute {0} defined for " +
	                                  "parameter {1} of method {2}.",
	                                  isDef ? "is" : "is not",
	                                  pInfo[0].Name, 
	                                  mInfo.Name);
	            }
	            else
	                Console.WriteLine("The parameters information could " +
	                            "not be retrieved for method {0}.", mInfo.Name);
	        }
	    }
	}
	
	/*
	 * Output:
	 * The ParamArray attribute is defined for parameter args of method Method1.
	 */

snippet conceptual_encoding

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_encoding/bestfit1.cs

	using System;
	using System.Text;
	
	public class Example
	{
	   public static void Main()
	   {
	      Encoding cp1252 = Encoding.GetEncoding(1252);
	      
	      string str = "\u24c8 \u2075 \u221e";
	      Console.WriteLine("Original string: " + str);
	      Console.Write("Code points in string: ");
	      foreach (var ch in str)
	         Console.Write("{0} ", Convert.ToUInt16(ch).ToString("X4"));
	
	      Console.WriteLine("\n");   
	      
	      Byte[] bytes = cp1252.GetBytes(str);
	      Console.Write("Encoded bytes: ");
	      foreach (byte byt in bytes)
	         Console.Write("{0:X2} ", byt);
	      Console.WriteLine("\n");
	            
	      string str2 = cp1252.GetString(bytes);
	      Console.WriteLine("String round-tripped: {0}", str.Equals(str2));
	      if (! str.Equals(str2)) {
	         Console.WriteLine(str2);
	         foreach (var ch in str2)
	            Console.Write("{0} ", Convert.ToUInt16(ch).ToString("X4"));
	      }
	   }
	}

snippet conceptual_regex_language_characterclasses

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_characterclasses/nonwordchar1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(\w+)(\W){1,2}";
	      string input = "The old, grey mare slowly walked across the narrow, green pasture.";
	      foreach (Match match in Regex.Matches(input, pattern))
	      {
	         Console.WriteLine(match.Value);
	         Console.Write("   Non-word character(s):");
	         CaptureCollection captures = match.Groups[2].Captures;
	         for (int ctr = 0; ctr < captures.Count; ctr++)
	             Console.Write(@"'{0}' (\u{1}){2}", captures[ctr].Value, 
	                           Convert.ToUInt16(captures[ctr].Value[0]).ToString("X4"), 
	                           ctr < captures.Count - 1 ? ", " : "");
	         Console.WriteLine();
	      }   
	   }
	}

snippet string_indexof8

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_indexof8/ixof8.cs

	using System;
	
	class Sample {
	    public static void Main() {
	
	    string br1 = "0----+----1----+----2----+----3----+----4----+----5----+----6----+-";
	    string br2 = "0123456789012345678901234567890123456789012345678901234567890123456";
	    string str = "Now is the time for all good men to come to the aid of their party.";
	    int start;
	    int at;
	    int end;
	    int count;
	
	    end = str.Length;
	    start = end/2;
	    Console.WriteLine();
	    Console.WriteLine("All occurrences of 'he' from position {0} to {1}.", start, end-1);
	    Console.WriteLine("{1}{0}{2}{0}{3}{0}", Environment.NewLine, br1, br2, str);
	    Console.Write("The string 'he' occurs at position(s): ");
	
	    count = 0;
	    at = 0;
	    while((start <= end) && (at > -1))
	        {
	        count = end - start;
	        at = str.IndexOf("he", start, count);
	        if (at == -1) break;
	        Console.Write("{0} ", at);
	        start = at+1;
	        }
	    Console.WriteLine();
	    }
	}
	/*
	This example produces the following results:
	
	All occurrences of 'he' from position 33 to 66.
	0----+----1----+----2----+----3----+----4----+----5----+----6----+-
	0123456789012345678901234567890123456789012345678901234567890123456
	Now is the time for all good men to come to the aid of their party.
	
	The string 'he' occurs at position(s): 45 56
	
	*/
snippet cryptography_smartcardcsp

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_SmartCardCSP/example.cs

	using System;
	using System.Security.Cryptography;
	
	namespace SmartCardSign
	{
	    class SCSign
	    {
	        static void Main(string[] args)
	        {
	
	
	            CspParameters csp = new CspParameters(1, "Schlumberger Cryptographic Service Provider");
	            csp.Flags = CspProviderFlags.UseDefaultKeyContainer;
	
	            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(csp);
	
	            byte[] data = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7 };
	
	            Console.WriteLine("Data			: " + BitConverter.ToString(data));
	
	            byte[] sig = rsa.SignData(data, "SHA1");
	
	            Console.WriteLine("Signature	: " + BitConverter.ToString(sig));
	
	            bool verified = rsa.VerifyData(data, "SHA1", sig);
	
	            Console.WriteLine("Verified		: " + verified);
	
	        }
	    }
	}
	

snippet string_lastindexof2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_lastindexof2/lastixof2.cs

	using System;
	
	class Sample {
	    public static void Main() {
	
	    string br1 = "0----+----1----+----2----+----3----+----4----+----5----+----6----+-";
	    string br2 = "0123456789012345678901234567890123456789012345678901234567890123456";
	    string str = "Now is the time for all good men to come to the aid of their party.";
	    int start;
	    int at;
	    int count;
	    int end;
	
	    start = str.Length-1;
	    end = start/2 - 1;
	    Console.WriteLine("All occurrences of 't' from position {0} to {1}.", start, end);
	    Console.WriteLine("{1}{0}{2}{0}{3}{0}", Environment.NewLine, br1, br2, str);
	    Console.Write("The letter 't' occurs at position(s): ");
	
	    count = 0;
	    at = 0;
	    while((start > -1) && (at > -1))
	        {
	        at = str.LastIndexOf('t', start, count);
	        if (at > -1) 
	            {
	            Console.Write("{0} ", at);
	            start = at - 1;
	            }
	        }
	    Console.Write("{0}{0}{0}", Environment.NewLine);
	    }
	}
	/*
	This example produces the following results:
	All occurrences of 't' from position 66 to 32.
	0----+----1----+----2----+----3----+----4----+----5----+----6----+-
	0123456789012345678901234567890123456789012345678901234567890123456
	Now is the time for all good men to come to the aid of their party.
	
	The letter 't' occurs at position(s): 64 55 44 41 33
	
	
	*/
snippet codegotostatementexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeGotoStatementExample/codegotostatementexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	
	    public class CodeGotoStatementExample
	    {
	        public CodeGotoStatementExample()
	        {
	            CodeTypeDeclaration type1 = new CodeTypeDeclaration("Type1");            
	            CodeEntryPointMethod entry1 = new CodeEntryPointMethod();                        
	            type1.Members.Add( entry1 );
	            CodeGotoStatement goto1 = new CodeGotoStatement("JumpToLabel");
	            entry1.Statements.Add( goto1 );
	            CodeMethodInvokeExpression method1 = new CodeMethodInvokeExpression(
	                new CodeTypeReferenceExpression("System.Console"), "WriteLine", new CodePrimitiveExpression("Test Output."));
	            entry1.Statements.Add( method1 );
	            CodeMethodInvokeExpression method2 = new CodeMethodInvokeExpression(
	                new CodeTypeReferenceExpression("System.Console"), "WriteLine", new CodePrimitiveExpression("Output from labeled statement."));
	            CodeLabeledStatement label1 = new CodeLabeledStatement("JumpToLabel", new CodeExpressionStatement(method2) );
	            entry1.Statements.Add( label1 );
	
	
	        }
	    }
	}
snippet codeentrypointmethod

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeEntryPointMethod/codeentrypointmethodexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeEntryPointMethodExample
	    {
	        public static CodeCompileUnit BuildHelloWorldGraph()
	        {            
	            CodeCompileUnit CompileUnit = new CodeCompileUnit();
	
	            CodeNamespace Samples = new CodeNamespace("Samples");
	            CompileUnit.Namespaces.Add( Samples );
	
	            Samples.Imports.Add( new CodeNamespaceImport("System") );            
	
	            CodeTypeDeclaration Class1 = new CodeTypeDeclaration("Class1");
	            Samples.Types.Add(Class1);            
	
	            CodeEntryPointMethod Start = new CodeEntryPointMethod();
	            CodeMethodInvokeExpression cs1 = new CodeMethodInvokeExpression( 
	                new CodeTypeReferenceExpression("System.Console"), "WriteLine", 
	                new CodePrimitiveExpression("Hello World!") );
	            Start.Statements.Add(new CodeExpressionStatement(cs1));        
	
	            Class1.Members.Add( Start );
	
	            return CompileUnit;
	        }    
	    }
	}
snippet compareinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CompareInfo.cs

	using System;
	using System.Text;
	using System.Globalization;
	
	public sealed class App
	{
	    static void Main(string[] args)
	    {
	        String[] sign = new String[] { "<", "=", ">" };
	
	        String s1 = "Coté", s2 = "coté", s3 = "côte";
	
	        CompareInfo ci = new CultureInfo("fr-FR").CompareInfo;
	        Console.WriteLine("The LCID for {0} is {1}.", ci.Name, ci.LCID);
	      
	        Console.WriteLine("fr-FR Compare: {0} {2} {1}",
	            s1, s2, sign[ci.Compare(s1, s2, CompareOptions.IgnoreCase) + 1]);
	
	        Console.WriteLine("fr-FR Compare: {0} {2} {1}",
	            s2, s3, sign[ci.Compare(s2, s3, CompareOptions.None) + 1]);
	
	        ci = new CultureInfo("ja-JP").CompareInfo;
	        Console.WriteLine("The LCID for {0} is {1}.", ci.Name, ci.LCID);
	
	        Console.WriteLine("ja-JP Compare: {0} {2} {1}",
	            s2, s3, sign[ci.Compare(s2, s3) + 1]);
	    }
	}
	
	

snippet fileinfocopyto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/fileinfocopyto/fileinfocopyto.cs

	using System;
	using System.IO;
	
	public class CopyToTest 
	{
	    public static void Main() 
	    {
	        FileInfo fi = new FileInfo("temp.txt");
	        StreamWriter sw = fi.AppendText();
	        sw.WriteLine("Add as many lines as you like...");
	        sw.WriteLine("Add another line to the output...");
	        sw.Flush();
	        sw.Close();
	        StreamReader sr = new StreamReader( fi.OpenRead() );
	        Console.WriteLine("This is the information in the first file:");
	        while (sr.Peek() != -1)
	            Console.WriteLine( sr.ReadLine() );
	        FileInfo newfi = fi.CopyTo("newTemp.txt", true);
	        sr = new StreamReader( newfi.OpenRead() );
	        Console.WriteLine("{0}This is the information in the second file:", Environment.NewLine);
	        while (sr.Peek() != -1)
	            Console.WriteLine( sr.ReadLine() );
	    }
	}
	
	
snippet conceptual_generics_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_generics_overview/source2.cs

	using System;
	
	public class MyEventArgs : EventArgs
	{
	    private string msg;
	    
	    public MyEventArgs(string messageArg)
	    {
	        msg = messageArg;
	    }
	    
	    public string Message
	    {
	        get {return msg;}
	    }
	}
	
	class Dummy
	{
	    public event EventHandler<MyEventArgs> MyEvent;
	
	    public static void Main()
	    {
	        Dummy dummo = new Dummy();
	
	        dummo.DoEvent();
	    }
	
	    public void DoEvent()
	    {
	        MyEventArgs eArgs = new MyEventArgs("My Event Message");
	
	        MyEvent += MyEventHandler;
	        MyEvent(this, eArgs);
	    }
	
	    private void MyEventHandler(object sender, MyEventArgs eArgs)
	    {
	        Console.WriteLine(eArgs.Message);
	    }
	}

snippet addincollectionpipelinehostsideadapter

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/BookInfoViewToContractHostAdapter.cs

	using System.AddIn.Pipeline;
	namespace LibraryContractsHostAdapters
	{
	public class BookInfoViewToContractHostAdapter : ContractBase, Library.IBookInfoContract
	{
	    private LibraryContractsHAV.BookInfo _view;
	
	    public BookInfoViewToContractHostAdapter(LibraryContractsHAV.BookInfo view)
	    {
	        _view = view;
	    }
	
	    public virtual string ID()
	    {
	        return _view.ID();
	    }
	    public virtual string Author()
	    {
	        return _view.Author();
	    }
	    public virtual string Title()
	    {
	        return _view.Title();
	    }
	    public virtual string Genre()
	    {
	        return _view.Genre();
	    }
	    public virtual string Price()
	    {
	        return _view.Price();
	    }
	    public virtual string Publish_Date()
	    {
	        return _view.Publish_Date();
	    }
	    public virtual string Description()
	    {
	        return _view.Description();
	    }
	    internal LibraryContractsHAV.BookInfo GetSourceView()
	    {
	        return _view;
	    }
	}
	}
snippet addincollectionpipelineaddinsideadapter

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/BookInfoViewToContractAddInAdapter.cs

	using System;
	
	namespace LibraryContractsAddInAdapters 
	{
	public class BookInfoViewToContractAddInAdapter : System.AddIn.Pipeline.ContractBase, Library.IBookInfoContract 
	{
	    private LibraryContractsBase.BookInfo _view;
	    public BookInfoViewToContractAddInAdapter(LibraryContractsBase.BookInfo view) 
	    {
	        _view = view;
	    }
	    public virtual string ID()
	    {
	        return _view.ID();
	    }
	    public virtual string Author()
	    {
	        return _view.Author();
	    }
	    public virtual string Title()
	    {
	        return _view.Title();
	    }
	    public virtual string Genre()
	    {
	        return _view.Genre();
	    }
	    public virtual string Price()
	    {
	        return _view.Price();
	    }
	    public virtual string Publish_Date()
	    {
	        return _view.Publish_Date();
	    }
	    public virtual string Description()
	    {
	        return _view.Description();
	    }
	
	    internal LibraryContractsBase.BookInfo GetSourceView() {
	        return _view;
	    }
	}
	}

snippet conditionalattributesample1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ConditionalAttributeSample1/cas.cs

	#define CONDITION1
	#define CONDITION2
	using System;
	using System.Diagnostics;
	
	class Test
	{
	    static void Main()
	    {               
	        Console.WriteLine("Calling Method1");
	        Method1(3);
	        Console.WriteLine("Calling Method2");
	        Method2();
	        
	        Console.WriteLine("Using the Debug class");
	        Debug.Listeners.Add(new ConsoleTraceListener());
	        Debug.WriteLine("DEBUG is defined");
	    }
	    
	    [Conditional("CONDITION1")]
	    public static void Method1(int x)
	    {
	        Console.WriteLine("CONDITION1 is defined");
	    }
	    
	    [Conditional("CONDITION1"), Conditional("CONDITION2")]  
	    public static void Method2()
	    {
	        Console.WriteLine("CONDITION1 or CONDITION2 is defined");
	    }
	}
	
	/*
	When compiled as shown, the application (named ConsoleApp) 
	produces the following output.
	
	Calling Method1
	CONDITION1 is defined
	Calling Method2
	CONDITION1 or CONDITION2 is defined
	Using the Debug class
	DEBUG is defined
	*/

snippet addincollectionpipelineaddinsideadapter

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/LibraryManagerViewToContractAddInAdapter.cs

	using System.IO;
	using System.AddIn.Pipeline;
	using System.AddIn.Contract;
	using System.Collections.Generic;
	namespace LibraryContractsAddInAdapters
	{
	[AddInAdapter]
	public class LibraryManagerViewToContractAddInAdapter :
	System.AddIn.Pipeline.ContractBase, Library.ILibraryManagerContract
	{
	    private LibraryContractsBase.LibraryManager _view;
	    public LibraryManagerViewToContractAddInAdapter(LibraryContractsBase.LibraryManager view)
	    {
	        _view = view;
	    }
	    public virtual void ProcessBooks(IListContract<Library.IBookInfoContract> books)
	    {
	        _view.ProcessBooks(CollectionAdapters.ToIList<Library.IBookInfoContract,
	            LibraryContractsBase.BookInfo>(books,
	            LibraryContractsAddInAdapters.BookInfoAddInAdapter.ContractToViewAdapter,
	            LibraryContractsAddInAdapters.BookInfoAddInAdapter.ViewToContractAdapter));
	    }
	    public virtual Library.IBookInfoContract GetBestSeller()
	    {
	        return BookInfoAddInAdapter.ViewToContractAdapter(_view.GetBestSeller());
	    }
	
	    public virtual string Data(string txt)
	    {
	        string rtxt = _view.Data(txt);
	        return rtxt;
	    }
	
	    internal LibraryContractsBase.LibraryManager GetSourceView()
	    {
	        return _view;
	    }
	}
	}
snippet type_getproperty1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty1/type_getproperty1.cs

	
	using System;
	using System.Reflection;
	
	class MyClass
	{
	    private int myProperty;
	    public int MyProperty
	    {
	        get
	        {
	            return myProperty;
	        }
	        set
	        {
	            myProperty=value;
	        }
	    }
	}
	public class MyTypeClass
	{
	    public static void Main(string[] args)
	    {
	        try
	        {
	            Type myType=typeof(MyClass);       
	            PropertyInfo myPropInfo = myType.GetProperty("MyProperty");
	            Console.WriteLine("The {0} property exists in MyClass.", myPropInfo.Name);
	        }
	        catch(NullReferenceException e)
	        {
	            Console.WriteLine("The property does not exist in MyClass." + e.Message);
	        }
	    }
	}
	
	
				
				
	
	

snippet strmreader_read2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StrmReader_Read2/strmreader_read2.cs

	using System;
	using System.IO;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        try 
	        {
	            if (File.Exists(path)) 
	            {
	                File.Delete(path);
	            }
	
	            using (StreamWriter sw = new StreamWriter(path)) 
	            {
	                sw.WriteLine("This");
	                sw.WriteLine("is some text");
	                sw.WriteLine("to test");
	                sw.WriteLine("Reading");
	            }
	
	            using (StreamReader sr = new StreamReader(path)) 
	            {
	                char[] c = null;
	
	                while (sr.Peek() >= 0) 
	                {
	                    c = new char[5];
	                    sr.Read(c, 0, c.Length);
	                    Console.WriteLine(c);
	                }
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet strmreader_currentencoding

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StrmReader_CurrentEncoding/strmreader_currentencoding.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        try 
	        {
	            if (File.Exists(path)) 
	            {
	                File.Delete(path);
	            }
	
	            using (StreamWriter sw = new StreamWriter(path, false, new UnicodeEncoding())) 
	            {
	                sw.WriteLine("This");
	                sw.WriteLine("is some text");
	                sw.WriteLine("to test");
	                sw.WriteLine("Reading");
	            }
	
	            using (StreamReader sr = new StreamReader(path, true)) 
	            {
	                while (sr.Peek() >= 0) 
	                {
	                    Console.Write((char)sr.Read());
	                }
	
	                Console.WriteLine("The encoding used was {0}.", sr.CurrentEncoding);
	                Console.WriteLine();
	            }
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet safehandle_safefilehandle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/SafeHandle_SafeFileHandle/program.cs

	using System;
	using System.Runtime.InteropServices;
	using System.IO;
	using Microsoft.Win32.SafeHandles;
	
	namespace CriticalFinalizer
	{
	    class Program
	    {
	        const int STD_INPUT_HANDLE   = -10;
	        const int STD_OUTPUT_HANDLE = -11;
	        const int STD_ERROR_HANDLE  =  -12;
	        [DllImport("Kernel32.dll", CharSet = System.Runtime.InteropServices.CharSet.Auto)]
	        public static extern IntPtr GetStdHandle(int type);
	
	        static void Main(string[] args)
	        {
	            FileStream fsIn = null;
	            FileStream fsOut = null;
	            try
	            {
	                SafeFileHandle sfhIn = new SafeFileHandle(GetStdHandle(STD_INPUT_HANDLE), false);
	                fsIn = new FileStream(sfhIn, FileAccess.Read);
	                byte[] input = new byte[] {0};
	                fsIn.Read(input,0,1);
	                SafeFileHandle sfhOut = new SafeFileHandle(GetStdHandle(STD_OUTPUT_HANDLE), false);
	                fsOut = new FileStream(sfhOut, FileAccess.Write);
	                fsOut.Write(input,0,1);
	                SafeFileHandle sf = fsOut.SafeFileHandle;
	            }
	            finally
	            {
	                if (fsIn != null)
	                {
	                    fsIn.Close();
	                    fsIn = null;
	                }
	                if (fsOut != null)
	                {
	                    fsOut.Close();
	                    fsOut = null;
	                }
	            }
	        }
	        
	    }
	}
snippet stringbuilder_appendformat

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringbuilder_appendformat/appfmt.cs

	using System;
	using System.Text;
	using System.Globalization;
	
	class Sample 
	{
	    static StringBuilder sb = new StringBuilder();
	
	    public static void Main() 
	    {
	    int    var1   = 111;
	    float  var2   = 2.22F;
	    string var3   = "abcd";
	    object[] var4 = {3, 4.4, 'X'};
	
	    Console.WriteLine();
	    Console.WriteLine("StringBuilder.AppendFormat method:");
	    sb.AppendFormat("1) {0}", var1);
	    Show(sb);
	    sb.AppendFormat("2) {0}, {1}", var1, var2);
	    Show(sb);
	    sb.AppendFormat("3) {0}, {1}, {2}", var1, var2, var3);
	    Show(sb);
	    sb.AppendFormat("4) {0}, {1}, {2}", var4);
	    Show(sb);
	    CultureInfo ci = new CultureInfo("es-ES", true);
	    sb.AppendFormat(ci, "5) {0}", var2);
	    Show(sb);
	    }
	
	    public static void Show(StringBuilder sbs)
	    {
	    Console.WriteLine(sbs.ToString());
	    sb.Length = 0;
	    }
	}
	/*
	This example produces the following results:
	
	StringBuilder.AppendFormat method:
	1) 111
	2) 111, 2.22
	3) 111, 2.22, abcd
	4) 3, 4.4, X
	5) 2,22
	*/
snippet regularexpressions_examples_href

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Examples_HREF/example.cs

	using System;
	using System.Text.RegularExpressions;
	
	[assembly: CLSCompliant(true)]
	public class Class1
	{
	   public static void Main()
	   {
	      string inputString = "My favorite web sites include:</P>" +
	                           "MSDN Home Page</A></P>" +
	                           "Microsoft Corporation Home Page</A></P>" +
	                           ".NET Base Class Library blog</A></P>";
	      DumpHRefs(inputString);                     
	
	   }
	   
	   private static void DumpHRefs(string inputString) 
	   {
	      Match m;
	      string HRefPattern = "href\\s*=\\s*(?:[\"'](?<1>[^\"']*)[\"']|(?<1>\\S+))";
	      
	      try {
	         m = Regex.Match(inputString, HRefPattern, 
	                         RegexOptions.IgnoreCase | RegexOptions.Compiled, 
	                         TimeSpan.FromSeconds(1));
	         while (m.Success)
	         {
	            Console.WriteLine("Found href " + m.Groups[1] + " at " 
	               + m.Groups[1].Index);
	            m = m.NextMatch();
	         }   
	      }
	      catch (RegexMatchTimeoutException) {
	         Console.WriteLine("The matching operation timed out.");
	      }
	   }
	}

snippet stringbuilder_appendline

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringbuilder_appendline/al.cs

	
	using System;
	using System.Text;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    StringBuilder sb = new StringBuilder();
	    string        line = "A line of text.";
	    int           number = 123;
	
	    sb.AppendLine("The first line of text.");
	    sb.AppendLine(line);
	
	    sb.AppendLine();
	    sb.AppendLine("");
	    sb.AppendLine((string)null);
	
	    sb.Append(number).AppendLine().AppendLine();
	
	    sb.AppendLine(line);
	    sb.AppendLine("The last line of text.");
	
	    Console.WriteLine(sb.ToString());
	    }
	}
	/*
	This example produces the following results:
	
	The first line of text.
	A line of text.
	
	
	
	123
	
	A line of text.
	The last line of text.
	*/
snippet installer_committing

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_Committing/installer_committing.cs

	
	/* The following program demonstrates the 'Committing' event of the 
	   'Installer' class.  When the 'Commit' is about to complete, 
	   'Committing' event is fired and a message is displayed.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstallerClass: Installer
	{
	   public MyInstallerClass() :base()
	   {
	      this.Committing += new InstallEventHandler(MyInstaller_Committing);
	   }
	   private void MyInstaller_Committing(object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("Committing Event occurred.");
	   }
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);     
	   }
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	   public static void Main()
	   {
	      Console.WriteLine("Usage : installutil.exe Installer_Committing.exe ");            
	   }
	}

snippet assemblyinstaller

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller/assemblyinstaller.cs

	
	/*  The following example demonstrates the 'AssemblyInstaller' class.
	      An object of the AssemblyInstaller class is created by invoking the constructor.
	      The properties of this object are set and the install and commit methods are
	      called to install the 'MyAssembly.exe' assembly.
	*/
	
	using System;
	using System.Configuration.Install;
	using System.Collections;
	using System.Collections.Specialized;
	
	class AssemblyInstaller_Example
	{
	   static void Main()
	   {
	      IDictionary mySavedState = new Hashtable();
	
	      Console.WriteLine( "" );
	
	      try
	      {
	         string[] commandLineOptions = new string[ 1 ] {"/LogFile=example.log"};
	
	         AssemblyInstaller myAssemblyInstaller = new 
	                     AssemblyInstaller( "MyAssembly.exe" , commandLineOptions );
	
	         myAssemblyInstaller.UseNewContext = true;
	
	         myAssemblyInstaller.Install( mySavedState );
	
	         myAssemblyInstaller.Commit( mySavedState );
	      }
	      catch (ArgumentException)
	      {
	      }
	      catch (Exception e)
	      {
	         Console.WriteLine( e.Message );
	      }
	   }
	}
snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/msgbox.cs

	using System;
	using System.Runtime.InteropServices;
	
	public class LibWrap
	{
	    [DllImport("User32.dll", EntryPoint = "MessageBox",
	        CharSet = CharSet.Auto)]
	    public static extern int MsgBox(
	        IntPtr hWnd, string lpText, string lpCaption, uint uType);
	
	    [DllImport("User32.dll", EntryPoint = "MessageBoxW",
	        CharSet = CharSet.Ansi)]
	    public static extern int MsgBox2(
	        IntPtr hWnd, string lpText, string lpCaption, uint uType);
	
	    [DllImport("User32.dll", EntryPoint = "MessageBox",
	        CharSet = CharSet.Ansi, ExactSpelling = true)]
	    public static extern int MsgBox3(
	        IntPtr hWnd, string lpText, string lpCaption, uint uType);
	}
	
	public class MsgBoxSample
	{
	    public static void Main()
	    {
	        LibWrap.MsgBox(0, "Correct text", "MsgBox Sample", 0);
	        LibWrap.MsgBox2(0, "Incorrect text", "MsgBox Sample", 0);
	
	        try
	        {
	            LibWrap.MsgBox3(0, "No such function", "MsgBox Sample", 0);
	        }
	        catch (EntryPointNotFoundException)
	        {
	            Console.WriteLine("EntryPointNotFoundException thrown as expected!");
	        }
	    }
	}

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/dates4.cs

	using System;
	using System.IO;
	using System.Runtime.Serialization.Formatters.Binary;
	
	public class Example
	{
	   public static void Main()
	   {
	      BinaryFormatter formatter = new BinaryFormatter();
	       
	      DateTime dateOriginal = new DateTime(2013, 3, 30, 18, 0, 0);
	      dateOriginal = DateTime.SpecifyKind(dateOriginal, DateTimeKind.Local);
	
	      if (! File.Exists("DateInfo.dat")) {
	         StreamWriter sw = new StreamWriter("DateInfo.dat");
	         sw.Write("{0:G}|{0:s}|{0:o}", dateOriginal); 
	         sw.Close();
	         Console.WriteLine("Serialized dates to DateInfo.dat");
	      } 
	      if (! File.Exists("DateInfo.bin")) {
	         FileStream fsIn = new FileStream("DateInfo.bin", FileMode.Create);
	         formatter.Serialize(fsIn, dateOriginal);
	         fsIn.Close();
	         Console.WriteLine("Serialized date to DateInfo.bin");
	      }
	      Console.WriteLine();
	              
	      StreamReader sr = new StreamReader("DateInfo.dat");
	      string datesToSplit = sr.ReadToEnd();
	      string[] dateStrings = datesToSplit.Split('|');
	      foreach (var dateStr in dateStrings) {
	         DateTime newDate = DateTime.Parse(dateStr);
	         Console.WriteLine("'{0}' --> {1} {2}",
	                           dateStr, newDate, newDate.Kind);
	      }
	      Console.WriteLine();
	      
	      FileStream fsOut = new FileStream("DateInfo.bin", FileMode.Open);
	      DateTime restoredDate = (DateTime) formatter.Deserialize(fsOut);
	      Console.WriteLine("{0} {1}", restoredDate, restoredDate.Kind);
	   }
	}

snippet performancecounterinstaller

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterInstaller/performancecounterinstaller.cs

	/*
	The following example demonstrates 'PerformanceCounterInstaller' class.
	A class is inherited from 'Installer' having 'RunInstallerAttribute' set to true.
	A new instance of 'PerformanceCounterInstaller' is created and its 'CategoryName'
	is set. Then this instance is added to 'InstallerCollection'.
	Note: 
	1)To run this example use the following command:
	   InstallUtil.exe PerformanceCounterInstaller.exe
	2)To uninstall the perfomance counter use the following command:
	   InstallUtil.exe /u PerformanceCounterInstaller.exe
	*/
	using System;
	using System.Configuration.Install;
	using System.Diagnostics;
	using System.ComponentModel;
	
	[RunInstaller(true)]
	public class MyPerformanceCounterInstaller : Installer
	{
	    public MyPerformanceCounterInstaller()
	    {
	        try
	        {
	            PerformanceCounterInstaller myPerformanceCounterInstaller =
	               new PerformanceCounterInstaller();
	            myPerformanceCounterInstaller.CategoryName =
	               "MyPerformanceCounter";
	            CounterCreationData myCounterCreation = new CounterCreationData();
	            myCounterCreation.CounterName = "MyCounter";
	            myCounterCreation.CounterHelp = "Counter Help";
	            myPerformanceCounterInstaller.Counters.Add(myCounterCreation);
	            Installers.Add(myPerformanceCounterInstaller);
	        }
	        catch (Exception e)
	        {
	            this.Context.LogMessage("Error occurred :" + e.Message);
	        }
	    }
	    public static void Main()
	    {
	    }
	}

snippet eventloginstaller

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventLogInstaller/eventloginstaller.cs

	
	
	using System;
	using System.Configuration.Install;
	using System.Diagnostics;
	using System.ComponentModel;
	
	[RunInstaller(true)]
	public class MyEventLogInstaller: Installer
	{
	    private EventLogInstaller myEventLogInstaller;
	
	    public MyEventLogInstaller() 
	    {
	        myEventLogInstaller = new EventLogInstaller();
	
	        myEventLogInstaller.Source = "NewLogSource";
	
	        myEventLogInstaller.Log = "MyNewLog";
	
	        Installers.Add(myEventLogInstaller);   
	    }
	
	    public static void Main()
	    {
	        MyEventLogInstaller myInstaller = new MyEventLogInstaller();
	    }
	}

snippet datetime_toshortlongstring

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_ToShortLongString/sls.cs

	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	        Console.WriteLine("Initialize the DateTime object to May 16, 2001 3:02:15 AM.\n");
	        DateTime dateAndTime = new System.DateTime(2001, 5, 16, 3, 2, 15);
	
	        Console.WriteLine($"Current culture: \"{CultureInfo.CurrentCulture.Name}\"\n");
	        var dtfi = CultureInfo.CurrentCulture.DateTimeFormat;
	
	        Console.WriteLine($"Long date pattern: \"{dtfi.LongDatePattern}\"");
	        Console.WriteLine($"Long date string:  \"{dateAndTime.ToLongDateString()}\"\n");
	
	        Console.WriteLine($"Long time pattern: \"{dtfi.LongTimePattern}\"");
	        Console.WriteLine($"Long time string:  \"{dateAndTime.ToLongTimeString()}\"\n");
	
	        Console.WriteLine($"Short date pattern: \"{dtfi.ShortDatePattern}\"");
	        Console.WriteLine($"Short date string:  \"{dateAndTime.ToShortDateString()}\"\n");
	
	        Console.WriteLine($"Short time pattern: \"{dtfi.ShortTimePattern}\"");
	        Console.WriteLine($"Short time string:  \"{dateAndTime.ToShortTimeString()}\"\n");
	    }
	}

snippet eventlog_writeentry_4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_4/eventlog_writeentry_4.cs

	
	/*
	 The following sample demonstrates the
	 'WriteEntry(String,String,EventLogEntryType,Int32)' method of
	 'EventLog' class. It writes an entry to a custom event log, "MyNewLog".
	 It creates the source "MySource" if the source does not already exist.
	*/
	
	using System;
	using System.Diagnostics;
	class EventLog_WriteEntry_4
	{
	   public static void Main()
	   {
	      try
	      {
	         if(!EventLog.SourceExists("MySource"))
	         {
	            EventLog.CreateEventSource("MySource", "myNewLog");
	            Console.WriteLine("Creating EventSource");
	            Console.WriteLine("Exiting, execute the application a second time to use the source.");
	            return;
	         }
	
	         string myMessage = "This is my event.";
	         EventLogEntryType myEventLogEntryType = EventLogEntryType.Warning;
	         int myApplicationEventId = 100;
	
	         Console.WriteLine("Writing to EventLog.. ");
	         EventLog.WriteEntry("MySource",myMessage,
	            myEventLogEntryType, myApplicationEventId);
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("Exception:{0}",e.Message);
	      }
	   }
	} 
snippet conceptual_regularexpressions_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_bestpractices/group1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "This is one sentence. This is another.";
	      string pattern = @"\b(\w+[;,]?\s?)+[.?!]";
	      
	      foreach (Match match in Regex.Matches(input, pattern)) {
	         Console.WriteLine("Match: '{0}' at index {1}.", 
	                           match.Value, match.Index);
	         int grpCtr = 0;
	         foreach (Group grp in match.Groups) {
	            Console.WriteLine("   Group {0}: '{1}' at index {2}.",
	                              grpCtr, grp.Value, grp.Index);
	            int capCtr = 0;
	            foreach (Capture cap in grp.Captures) {
	               Console.WriteLine("      Capture {0}: '{1}' at {2}.",
	                                 capCtr, cap.Value, cap.Index);
	               capCtr++;
	            }
	            grpCtr++;
	         }          
	         Console.WriteLine();        
	      }
	   }
	}

snippet fileinfocopyto1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FileInfoCopyTo1/fileinfocopyto1.cs

	using System;
	using System.IO;
	
	public class CopyToTest 
	{
	    public static void Main() 
	    {
	        try
	        {
	            FileInfo fi = new FileInfo("temp.txt");
	            StreamWriter sw = fi.AppendText();
	            sw.WriteLine("Add as many lines as you like...");
	            sw.WriteLine("Add another line to the output...");
	            sw.Flush();
	            sw.Close();
	            StreamReader sr = new StreamReader(fi.OpenRead());
	            Console.WriteLine("This is the information in the first file:");
	            while (sr.Peek() != -1)
	                Console.WriteLine(sr.ReadLine());
	            FileInfo newfi = fi.CopyTo("newTemp.txt");
	            sr = new StreamReader(newfi.OpenRead());
	            Console.WriteLine("{0}This is the information in the second file:", Environment.NewLine);
	            while (sr.Peek() != -1)
	                Console.WriteLine(sr.ReadLine());
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	    }
	}
	
snippet addincollectionpipelinehostsideadapter

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/LibraryManagerContractToViewHostAdapter.cs

	using System.Collections.Generic;
	using System.AddIn.Pipeline;
	namespace LibraryContractsHostAdapters
	{
	[HostAdapterAttribute()]
	public class LibraryManagerContractToViewHostAdapter : LibraryContractsHAV.LibraryManager
	{
	
	    private Library.ILibraryManagerContract _contract;
	    private System.AddIn.Pipeline.ContractHandle _handle;
	
	    public LibraryManagerContractToViewHostAdapter(Library.ILibraryManagerContract contract)
	    {
	        _contract = contract;
	        _handle = new System.AddIn.Pipeline.ContractHandle(contract);
	    }
	
	    public override void ProcessBooks(IList<LibraryContractsHAV.BookInfo> books) {
	        _contract.ProcessBooks(CollectionAdapters.ToIListContract<LibraryContractsHAV.BookInfo,
	            Library.IBookInfoContract>(books,
	            LibraryContractsHostAdapters.BookInfoHostAdapter.ViewToContractAdapter,
	            LibraryContractsHostAdapters.BookInfoHostAdapter.ContractToViewAdapter));
	    }
	
	    public override LibraryContractsHAV.BookInfo GetBestSeller()
	    {
	        return BookInfoHostAdapter.ContractToViewAdapter(_contract.GetBestSeller());
	    }
	
	    internal Library.ILibraryManagerContract GetSourceContract()
	    {
	        return _contract;
	    }
	    public override string Data(string txt)
	    {
	        string rtxt = _contract.Data(txt);
	        return rtxt;
	    }
	}
	}

snippet type_getdefaultmembers

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/type_getdefaultmembers.cs

	
	using System;
	using System.Reflection;
	using System.IO;
	
	[DefaultMemberAttribute("Age")]   
	public class MyClass
	{
	    public void Name(String s) {}
	    public int Age
	    {
	        get
	        {
	            return 20;
	        }
	    }
	    public static void Main()
	    {
	        try
	        {
	            Type  myType = typeof(MyClass);
	            MemberInfo[] memberInfoArray = myType.GetDefaultMembers();
	            if (memberInfoArray.Length > 0)
	            {
	                foreach(MemberInfo memberInfoObj in memberInfoArray)
	                {
	                    Console.WriteLine("The default member name is: " + memberInfoObj.ToString());
	                }
	            }
	            else
	            {
	                Console.WriteLine("No default members are available."); 
	            }
	        }
	        catch(InvalidOperationException e)
	        {
	            Console.WriteLine("InvalidOperationException: " + e.Message);
	        }
	        catch(IOException e)
	        {
	            Console.WriteLine("IOException: " + e.Message);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception: " + e.Message);
	        }
	    }
	}
snippet codereferenceexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeReferenceExample/codereferenceexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeReferenceExample
	    {
	        public CodeReferenceExample()
	        {                        
	        }
	
	        public void CodeFieldReferenceExample()
	        {
	            CodeFieldReferenceExpression fieldRef1 = 
	                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "TestField");
	
	            
	        }
	
	        public void CodePropertyReferenceExample()
	        {
	            CodePropertyReferenceExpression propertyRef1 = 
	                new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "TestProperty");
	            
	
	        }
	
	        public void CodeVariableReferenceExample()
	        {
	            CodeVariableReferenceExpression variableRef1 =
	                new CodeVariableReferenceExpression("TestVariable");
	            
	
	        }
	    }
	}
snippet eventsoverview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/eventsoverview/programtruncated.cs

	using System;
	
	namespace ConsoleApplication1
	{
	    class Program
	    {
	        static void Main()
	        {
	            var c = new Counter();
	            c.ThresholdReached += c_ThresholdReached;
	
	        }
	
	        static void c_ThresholdReached(object sender, EventArgs e)
	        {
	            Console.WriteLine("The threshold was reached.");
	        }
	    }
	
	    class Counter
	    {
	        public event EventHandler ThresholdReached;
	
	        protected virtual void OnThresholdReached(EventArgs e)
	        {
	            EventHandler handler = ThresholdReached;
	            handler?.Invoke(this, e);
	        }
	
	    }
	
	    public class ThresholdReachedEventArgs : EventArgs
	    {
	        public int Threshold { get; set; }
	        public DateTime TimeReached { get; set; }
	    }
	
	    public delegate void ThresholdReachedEventHandler(object sender, ThresholdReachedEventArgs e);
	}

snippet catchexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CatchException/catchexception1.cs

	using System;
	
	public class Employee
	{
	    public int Emlevel
	    {
	        get
	        {
	            return(emlevel);
	        }
	        set
	        {
	            emlevel = value;
	        }
	    }
	
	    private int emlevel = 0;
	}
	
	public class Ex13
	{
	    public static void PromoteEmployee(Object emp)
	    {
	        var e = (Employee) emp;
	        e.Emlevel = e.Emlevel + 1;
	    }
	
	    public static void Main()
	    {
	        try
	        {
	            Object o = new Employee();
	            DateTime newYears = new DateTime(2001, 1, 1);
	            PromoteEmployee(o);
	            PromoteEmployee(newYears);
	        }
	        catch (InvalidCastException e)
	        {
	            Console.WriteLine("Error passing data to PromoteEmployee method. " + e.Message);
	        }
	    }
	}

snippet io_directoryinfo_copydir

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_DirectoryInfo_CopyDir/copydir.cs

	using System;
	using System.IO;
	
	class CopyDir
	{
	    public static void CopyAll(DirectoryInfo source, DirectoryInfo target)
	    {
	        if (source.FullName.ToLower() == target.FullName.ToLower())
	        {
	            return;
	        }
	
	        if (Directory.Exists(target.FullName) == false)
	        {
	            Directory.CreateDirectory(target.FullName);
	        }
	
	        foreach (FileInfo fi in source.GetFiles())
	        {
	            Console.WriteLine(@"Copying {0}\{1}", target.FullName, fi.Name);
	            fi.CopyTo(Path.Combine(target.ToString(), fi.Name), true);
	        }
	
	        foreach (DirectoryInfo diSourceSubDir in source.GetDirectories())
	        {
	            DirectoryInfo nextTargetSubDir =
	                target.CreateSubdirectory(diSourceSubDir.Name);
	            CopyAll(diSourceSubDir, nextTargetSubDir);
	        }
	    }
	
	    public static void Main()
	    {
	        string sourceDirectory = @"c:\sourceDirectory";
	        string targetDirectory = @"c:\targetDirectory";
	
	        DirectoryInfo diSource = new DirectoryInfo(sourceDirectory);
	        DirectoryInfo diTarget = new DirectoryInfo(targetDirectory);
	
	        CopyAll(diSource, diTarget);
	    }
	
	}

snippet installer_committed1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_Committed1/installer_committed.cs

	
	/* The following program demonstrates the 'Committed' event of the
	   'Installer' class.  When the 'Commit' is complete, 'Committed' event
	   is fired and a message is displayed.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstallerClass: Installer
	{
	   public MyInstallerClass() :base()
	   {
	      this.Committed += new InstallEventHandler(MyInstaller_Committed);
	   }
	
	   private void MyInstaller_Committed(object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("Committed Event occurred.");
	   }
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	   }
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	   public static void Main()
	   {
	      Console.WriteLine("Usage : installutil.exe Installer_Committed.exe ");
	   }
	}

snippet type_getmethods2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethods2/type_getmethods2.cs

	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public class MyTypeClass
	{
	    public void MyMethods()
	    {
	    }
	    public int MyMethods1() 
	    {
	        return 3;
	    }
	    protected String MyMethods2()
	    {
	        return "hello";
	    }
	}
	public class TypeMain
	{
	    public static void Main() 
	    {
	        Type myType =(typeof(MyTypeClass));
	        MethodInfo[] myArrayMethodInfo = myType.GetMethods(BindingFlags.Public|BindingFlags.Instance|BindingFlags.DeclaredOnly);
	        Console.WriteLine("\nThe number of public methods is {0}.", myArrayMethodInfo.Length);
	        DisplayMethodInfo(myArrayMethodInfo);
	        MethodInfo[] myArrayMethodInfo1 = myType.GetMethods(BindingFlags.NonPublic|BindingFlags.Instance|BindingFlags.DeclaredOnly);
	        Console.WriteLine("\nThe number of protected methods is {0}.", myArrayMethodInfo1.Length);
	        DisplayMethodInfo(myArrayMethodInfo1);		
	    }
	    public static void DisplayMethodInfo(MethodInfo[] myArrayMethodInfo)
	    {
	        for(int i=0;i<myArrayMethodInfo.Length;i++)
	        {
	            MethodInfo myMethodInfo = (MethodInfo)myArrayMethodInfo[i];
	            Console.WriteLine("\nThe name of the method is {0}.", myMethodInfo.Name);
	        }
	    }
	}
	

snippet innerex

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InnerEx/innerex.cs

	using System;
	
	public class AppException : Exception
	{
	   public AppException(String message) : base (message)
	   {}
	
	   public AppException(String message, Exception inner) : base(message,inner) {}
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      Example ex = new Example();
	
	      try {
	         ex.CatchInner();
	      }
	      catch(AppException e) {
	         Console.WriteLine ("In catch block of Main method.");
	         Console.WriteLine("Caught: {0}", e.Message);
	         if (e.InnerException != null)
	            Console.WriteLine("Inner exception: {0}", e.InnerException);
	      }
	   }
	
	   public void ThrowInner ()
	   {
	      throw new AppException("Exception in ThrowInner method.");
	   }
	
	   public void CatchInner() 
	   {
	      try {
	         this.ThrowInner();
	      }
	      catch (AppException e) {
	         throw new AppException("Error in CatchInner caused by calling the ThrowInner method.", e);
	      }
	   }
	}

snippet type_getconstructor3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/type_getconstructor3.cs

	using System;
	using System.Reflection;
	using System.Security;
	
	public class MyClass1
	{
	    public MyClass1(int i){}
	    public static void Main()
	    {
	        try
	        {
	            Type  myType = typeof(MyClass1);
	            Type[] types = new Type[1];
	            types[0] = typeof(int);
	            ConstructorInfo constructorInfoObj = myType.GetConstructor(
	                BindingFlags.Instance | BindingFlags.Public, null,
	                CallingConventions.HasThis, types, null);
	            if(constructorInfoObj != null)
	            {
	                Console.WriteLine("The constructor of MyClass1 that is a public " +
	                    "instance method and takes an integer as a parameter is: ");
	                Console.WriteLine(constructorInfoObj.ToString());
	            }
	            else
	            {
	                Console.WriteLine("The constructor of MyClass1 that is a public instance " +
	                    "method and takes an integer as a parameter is not available.");
	            }
	        }
	        catch(ArgumentNullException e)
	        {
	            Console.WriteLine("ArgumentNullException: " + e.Message);
	        }
	        catch(ArgumentException e)
	        {
	            Console.WriteLine("ArgumentException: " + e.Message);
	        }
	        catch(SecurityException e)
	        {
	            Console.WriteLine("SecurityException: " + e.Message);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception: " + e.Message);
	        }
	    }
	}
snippet generic_dictionary_ctor_idicieqc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_Dictionary_ctor_IDicIEqC/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        SortedDictionary<string, string> openWith = 
	                new SortedDictionary<string, string>(
	                    StringComparer.CurrentCultureIgnoreCase);
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("Bmp", "paint.exe");
	        openWith.Add("DIB", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	        
	        Dictionary<string, string> copy = 
	                new Dictionary<string, string>(openWith, 
	                    StringComparer.CurrentCultureIgnoreCase);
	
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in copy )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	               kvp.Key, kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Key = Bmp, Value = paint.exe
	Key = DIB, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	Key = txt, Value = notepad.exe
	 */
	
	
	

snippet conceptual_types_viewinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_types_viewinfo/source3.cs

	using System;
	using System.Reflection;
	
	class MyMethodInfo
	{
	    public static int Main()
	    {
	        Console.WriteLine("Reflection.MethodInfo");
	        Type MyType = Type.GetType("System.Reflection.FieldInfo");
	        MethodInfo Mymethodinfo = MyType.GetMethod("GetValue");
	        Console.WriteLine(MyType.FullName + "." + Mymethodinfo.Name);
	        MemberTypes Mymembertypes = Mymethodinfo.MemberType;
	        if (MemberTypes.Constructor == Mymembertypes)
	        {
	            Console.WriteLine("MemberType is of type All");
	        }
	        else if (MemberTypes.Custom == Mymembertypes)
	        {
	            Console.WriteLine("MemberType is of type Custom");
	        }
	        else if (MemberTypes.Event == Mymembertypes)
	        {
	            Console.WriteLine("MemberType is of type Event");
	        }
	        else if (MemberTypes.Field == Mymembertypes)
	        {
	            Console.WriteLine("MemberType is of type Field");
	        }
	        else if (MemberTypes.Method == Mymembertypes)
	        {
	            Console.WriteLine("MemberType is of type Method");
	        }
	        else if (MemberTypes.Property == Mymembertypes)
	        {
	            Console.WriteLine("MemberType is of type Property");
	        }
	        else if (MemberTypes.TypeInfo == Mymembertypes)
	        {
	            Console.WriteLine("MemberType is of type TypeInfo");
	        }
	        return 0;
	    }
	}

snippet threadstart

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ThreadStart/source2.cs

	using System;
	using System.Threading;
	
	public class ThreadWithState
	{
	    private string boilerplate;
	    private int value;
	
	    public ThreadWithState(string text, int number)
	    {
	        boilerplate = text;
	        value = number;
	    }
	
	    public void ThreadProc()
	    {
	        Console.WriteLine(boilerplate, value);
	    }
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        ThreadWithState tws = new ThreadWithState(
	            "This report displays the number {0}.", 42);
	
	        Thread t = new Thread(new ThreadStart(tws.ThreadProc));
	        t.Start();
	        Console.WriteLine("Main thread does some work, then waits.");
	        t.Join();
	        Console.WriteLine(
	            "Independent task has completed; main thread ends.");
	    }
	}

snippet cryptgraphy_xml_encrypteddata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cryptgraphy_Xml_EncryptedData/encrypteddata.cs

	using System;
	using System.Security.Cryptography.Xml;
	using System.Xml;
	using System.IO;
	
	namespace EncryptedDataSample
	{
		class Sample1
		{
			[STAThread]
			static void Main(string[] args)
			{
				CipherData cd = new CipherData();
				cd.CipherValue = new byte[8];
				EncryptedData ed = new EncryptedData();
				ed.Id = "ED";
				ed.CipherData = cd;
	
				KeyInfo ki = new KeyInfo();
				ed.KeyInfo = ki;
	
				XmlDocument doc = new XmlDocument();
				XmlElement encryptionPropertyElement = (XmlElement)doc.CreateElement("EncryptionProperty", EncryptedXml.XmlEncNamespaceUrl);
				EncryptionProperty ep = new EncryptionProperty(encryptionPropertyElement);
				ed.AddProperty(ep);
	
				string path = @"c:\test\MyTest.xml";
				File.WriteAllText(path,ed.GetXml().OuterXml);
	
			}
		}
	}
snippet cryptography_xml_encrypteddata2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cryptography_Xml_EncryptedData2/encrypteddata.cs

	using System;
	using System.Security.Cryptography.Xml;
	using System.Xml;
	using System.IO;
	
	namespace EncryptedDataSample
	{
		class Sample1
		{
			[STAThread]
			static void Main(string[] args)
			{
				Byte[] sampledata = new byte[8];
				CipherData cd = new CipherData(sampledata);
				EncryptedData ed = new EncryptedData();
	
				ed.Id = "ED";
				ed.CipherData = cd;
				KeyInfo ki = new KeyInfo();
				ed.KeyInfo = ki;
				XmlDocument doc = new XmlDocument();
				XmlElement encryptionPropertyElement = (XmlElement)doc.CreateElement("EncryptionProperty", EncryptedXml.XmlEncNamespaceUrl);
				EncryptionProperty ep = new EncryptionProperty(encryptionPropertyElement);
				ed.AddProperty(ep);
	
				string path = @"c:\test\MyTest.xml";
				File.WriteAllText(path,ed.GetXml().OuterXml);
	
			}
		}
	}
snippet typeloadexception_typename

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeLoadException_TypeName/typeloadexception_typename.cs

	
	/* This program demonstrates the 'TypeName' and 'Message' properties
	   of the 'TypeLoadException' class. It attempts to load a 
	   non-existent type from the mscorlib assembly which throws an 
	   exception. This exception is caught and the TypeName and Message 
	   values are displayed.
	*/
	
	using System;
	using System.Reflection;
	
	public class TypeLoadException_TypeName
	{
	   public static void Main() 
	   {
	      Assembly mscorlib = typeof(string).Assembly;
	
	      try 
	      {
	         Console.WriteLine("Attempting to load a type that does not exist in mscorlib.");
	         Type myType = mscorlib.GetType("System.NonExistentType", true);
	      }  
	      catch (TypeLoadException ex) 
	      {
	         Console.WriteLine("TypeLoadException was caught. Type = '{0}'.", 
	             ex.TypeName);
	         Console.WriteLine("Error Message = '{0}'", ex.Message);
	      }  
	   }
	}
	/*
	 This code example produces output similar to the following:
	
	Attempting to load a type that does not exist in mscorlib.
	TypeLoadException was caught. Type = 'System.NonExistentType'
	Error Message = 'Could not load type System.NonExistentType from assembly mscorl
	ib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089.'
	 */

snippet conceptual_strings_comparing

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_comparing/sortkey1.cs

	using System;
	using System.Threading;
	using System.Globalization;
	
	public class SortKeySample 
	{
	   public static void Main(String[] args) 
	   {
	      String str1 = "Apple";
	      String str2 = "Æble";
	
	      CultureInfo dk = new CultureInfo("da-DK");
	      Thread.CurrentThread.CurrentCulture = dk;
	
	      SortKey sc1 = dk.CompareInfo.GetSortKey(str1);
	      SortKey sc2 = dk.CompareInfo.GetSortKey(str2);
	
	      int result1 = SortKey.Compare(sc1, sc2);
	      Console.WriteLine("When the CurrentCulture is \"da-DK\",");
	      Console.WriteLine("the result of comparing {0} with {1} is: {2}\n", 
	                        str1, str2, result1);
	
	      CultureInfo enus = new CultureInfo("en-US");
	      Thread.CurrentThread.CurrentCulture = enus ;
	
	      SortKey sc3 = enus.CompareInfo.GetSortKey(str1);
	      SortKey sc4 = enus.CompareInfo.GetSortKey(str2);
	
	      int result2 = SortKey.Compare(sc3, sc4);
	      Console.WriteLine("When the CurrentCulture is \"en-US\",");
	      Console.WriteLine("the result of comparing {0} with {1} is: {2}", 
	                        str1, str2, result2);
	   }
	}
snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/nestedgenerics2.cs

	using System;
	
	[assembly:CLSCompliant(true)]
	
	public class Outer<T>
	{
	   T value;
	   
	   public Outer(T value)
	   {
	      this.value = value;
	   }
	   
	   public class Inner1A : Outer<T>
	   {
	      public Inner1A(T value) : base(value)
	      {  }
	   }
	   
	   public class Inner1B<U> : Outer<T>
	   {
	      U value2;
	      
	      public Inner1B(T value1, U value2) : base(value1)
	      {
	         this.value2 = value2;
	      }
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      var inst1 = new Outer<String>("This");
	      Console.WriteLine(inst1);
	      
	      var inst2 = new Outer<String>.Inner1A("Another");
	      Console.WriteLine(inst2);
	      
	      var inst3 = new Outer<String>.Inner1B<int>("That", 2);
	      Console.WriteLine(inst3);
	   }
	}

snippet codedomexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/source2.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	
	public class UsingTheCodeDOM
	{
	    public static void Main()
	    {
	        CodeCompileUnit compileUnit = new CodeCompileUnit();
	
	        CodeNamespace samples = new CodeNamespace("Samples");
	
	        samples.Imports.Add(new CodeNamespaceImport("System"));
	
	        compileUnit.Namespaces.Add( samples );
	
	        CodeTypeDeclaration class1 = new CodeTypeDeclaration("Class1");
	
	        samples.Types.Add(class1);
	
	        CodeEntryPointMethod start = new CodeEntryPointMethod();
	        CodeMethodInvokeExpression cs1 = new CodeMethodInvokeExpression(
	            new CodeTypeReferenceExpression("System.Console"),
	            "WriteLine", new CodePrimitiveExpression("Hello World!"));
	        start.Statements.Add(cs1);
	
	        class1.Members.Add( start );
	
	        CodeDomProvider codeProvider = CodeDomProvider.CreateProvider("CSharp");
	        codeProvider.GenerateCodeFromCompileUnit(compileUnit, Console.Out, new CodeGeneratorOptions());
	    }
	}

snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/void.cs

	using System;
	using System.Runtime.InteropServices;
	
	public class LibWrap
	{
	    public enum DataType
	    {
	        DT_I2 = 1,
	        DT_I4,
	        DT_R4,
	        DT_R8,
	        DT_STR
	    }
	
	    [DllImport("..\\LIB\\PInvokeLib.dll")]
	    public static extern void SetData(DataType t,
	        [MarshalAs(UnmanagedType.AsAny)] object o);
	
	    [DllImport("..\\LIB\\PInvokeLib.dll", EntryPoint = "SetData")]
	    public static extern void SetData2(DataType t, ref double i);
	
	    [DllImport("..\\LIB\\PInvokeLib.dll", EntryPoint = "SetData")]
	    public static extern void SetData2(DataType t, string s);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        Console.WriteLine("Calling SetData using AsAny... \n");
	        LibWrap.SetData(LibWrap.DataType.DT_I2, (short)12);
	        LibWrap.SetData(LibWrap.DataType.DT_I4, (long)12);
	        LibWrap.SetData(LibWrap.DataType.DT_R4, (float)12);
	        LibWrap.SetData(LibWrap.DataType.DT_R8, (double)12);
	        LibWrap.SetData(LibWrap.DataType.DT_STR, "abcd");
	
	        Console.WriteLine("\nCalling SetData using overloading... \n");
	        double d = 12;
	        LibWrap.SetData2(LibWrap.DataType.DT_R8, ref d);
	        LibWrap.SetData2(LibWrap.DataType.DT_STR, "abcd");
	    }
	}

snippet regularexpressions_examples_email

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Examples_Email/example2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class RegexUtilities
	{
	   public static bool IsValidEmail(string strIn)
	   {
	       return Regex.IsMatch(strIn, 
	              @"^(?("")(""[^""]+?""@)|(([0-9a-zA-Z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-zA-Z])@))" + 
	              @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,6}))$"); 
	   }
	}
	
	public class Application
	{
	   public static void Main()
	   {
	      string[] emailAddresses = { "david.jones@proseware.com", "d.j@server1.proseware.com", 
	                                  "jones@ms1.proseware.com", "j.@server1.proseware.com", 
	                                  "j@proseware.com9", "js#internal@proseware.com", 
	                                  "j_9@[129.126.118.1]", "j..s@proseware.com", 
	                                  "js*@proseware.com", "js@proseware..com", 
	                                  "js@proseware.com9", "j.s@server1.proseware.com" };
	      foreach (string emailAddress in emailAddresses)
	      {
	         if (RegexUtilities.IsValidEmail(emailAddress))
	            Console.WriteLine("Valid: {0}", emailAddress);
	         else
	            Console.WriteLine("Invalid: {0}", emailAddress);
	      }                                            
	   }
	}

snippet enum_tostring

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/enum_tostring/tostr.cs

	using System;
	
	class Sample 
	{
	    enum Colors {Red, Green, Blue, Yellow = 12};
	
	    public static void Main() 
	    {
	    Colors myColor = Colors.Yellow;
	
	    Console.WriteLine("Colors.Red = {0}", Colors.Red.ToString("d"));
	    Console.WriteLine("Colors.Green = {0}", Colors.Green.ToString("d"));
	    Console.WriteLine("Colors.Blue = {0}", Colors.Blue.ToString("d"));
	    Console.WriteLine("Colors.Yellow = {0}", Colors.Yellow.ToString("d"));
	
	    Console.WriteLine("{0}myColor = Colors.Yellow{0}", Environment.NewLine);
	
	    Console.WriteLine("myColor.ToString(\"g\") = {0}", myColor.ToString("g"));
	    Console.WriteLine("myColor.ToString(\"G\") = {0}", myColor.ToString("G"));
	
	    Console.WriteLine("myColor.ToString(\"x\") = {0}", myColor.ToString("x"));
	    Console.WriteLine("myColor.ToString(\"X\") = {0}", myColor.ToString("X"));
	
	    Console.WriteLine("myColor.ToString(\"d\") = {0}", myColor.ToString("d"));
	    Console.WriteLine("myColor.ToString(\"D\") = {0}", myColor.ToString("D"));    
	
	    Console.WriteLine("myColor.ToString(\"f\") = {0}", myColor.ToString("f"));
	    Console.WriteLine("myColor.ToString(\"F\") = {0}", myColor.ToString("F"));
	    }
	}
	/*
	This example produces the following results:
	Colors.Red = 0
	Colors.Green = 1
	Colors.Blue = 2
	Colors.Yellow = 12
	
	myColor = Colors.Yellow
	
	myColor.ToString("g") = Yellow
	myColor.ToString("G") = Yellow
	myColor.ToString("x") = 0000000C
	myColor.ToString("X") = 0000000C
	myColor.ToString("d") = 12
	myColor.ToString("D") = 12
	myColor.ToString("f") = Yellow
	myColor.ToString("F") = Yellow
	*/
snippet appdomain_definedynamicassembly

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/definedynamicassembly.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	class Test {
	   public static void Main() {
	      AppDomain currentDomain = AppDomain.CurrentDomain;
	
	      
	      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);
	      
	   }
	
	   static void InstantiateMyDynamicType(AppDomain domain) {
	      try {
	         domain.CreateInstance("Assembly text name, Version, Culture, PublicKeyToken", "MyDynamicType");
	      } catch (Exception e) {
	         Console.WriteLine(e.Message);
	      }
	   }   
	
	   static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args) {
	      return DefineDynamicAssembly((AppDomain) sender);
	   }
	   
	   static Assembly DefineDynamicAssembly(AppDomain domain) {
	   
	      AssemblyName assemblyName = new AssemblyName();
	      assemblyName.Name = "MyDynamicAssembly";
	
	      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);
	      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule("MyDynamicModule");
	      TypeBuilder typeBuilder = moduleBuilder.DefineType("MyDynamicType", TypeAttributes.Public);
	      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);
	      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();
	      
	      ilGenerator.EmitWriteLine("MyDynamicType instantiated!");
	      ilGenerator.Emit(OpCodes.Ret);
	
	      typeBuilder.CreateType();
	
	      return assemblyBuilder;
	   }
	}

snippet file_open2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_Open2/file_open2.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string filePath = @"c:\temp\MyTest.txt";
	
	        if (File.Exists(filePath)) 
	        {
	            File.Delete(filePath);
	        }
	        
	        using (FileStream fs = File.Create(filePath)) 
	        {
	            Byte[] info = new UTF8Encoding(true).GetBytes("This is some text in the file.");
	            fs.Write(info, 0, info.Length);
	        }
	
	        using (FileStream fs = File.Open(filePath, FileMode.Open, FileAccess.Read)) 
	        {
	            byte[] b = new byte[1024];
	            UTF8Encoding temp = new UTF8Encoding(true);
	
	            while (fs.Read(b,0,b.Length) > 0) 
	            {
	                Console.WriteLine(temp.GetString(b));
	            }
	
	            try 
	            {
	                fs.Write(b,0,b.Length);
	            } 
	            catch (Exception e) 
	            {
	                Console.WriteLine("Writing was disallowed, as expected: {0}", e.ToString());
	            }
	        }
	    }
	}

snippet activatorx

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/ActivatorX.cs

	using System;
	using System.Reflection;
	using System.Text;
	
	public class SomeType
	{
	    public void DoSomething(int x)
	    {
	        Console.WriteLine("100 / {0} = {1}", x, 100 / x);
	    }
	}
	
	public class Example
	{
	    static void Main()
	    {
	        Object o = Activator.CreateInstance(typeof(StringBuilder));
	
	        StringBuilder sb = (StringBuilder) o;
	        sb.Append("Hello, there.");
	        Console.WriteLine(sb);
	
	        System.Runtime.Remoting.ObjectHandle oh = 
	            Activator.CreateInstanceFrom(Assembly.GetEntryAssembly().CodeBase, 
	                                         typeof(SomeType).FullName);
	
	        SomeType st = (SomeType) oh.Unwrap();
	
	        st.DoSomething(5);
	    }
	}
	
	/* This code produces the following output:
	 
	Hello, there.
	100 / 5 = 20
	 */
snippet type_getconstructor2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor2/type_getconstructor2.cs

	using System;
	using System.Reflection;
	using System.Security;
	
	
	public class MyClass1
	{
	    public MyClass1(int i){}
	    public static void Main()
	    {
	        try
	        {
	            Type myType = typeof(MyClass1);
	            Type[] types = new Type[1];
	            types[0] = typeof(int);
	            ConstructorInfo constructorInfoObj = myType.GetConstructor(
	                BindingFlags.Instance | BindingFlags.Public, null, types, null);
	            if (constructorInfoObj != null )
	            {
	                Console.WriteLine("The constructor of MyClass1 that is public " +
	                    "and takes an integer as a parameter is:");
	                Console.WriteLine(constructorInfoObj.ToString());
	            }
	            else
	            {
	                Console.WriteLine("The constructor of the MyClass1 that is public " +
	                    "and takes an integer as a parameter is not available.");
	            }
	        }
	        catch(ArgumentNullException e)
	        {
	            Console.WriteLine("ArgumentNullException: " + e.Message);
	        }
	        catch(ArgumentException e)
	        {
	            Console.WriteLine("ArgumentException: " + e.Message);
	        }
	        catch(SecurityException e)
	        {
	            Console.WriteLine("SecurityException: " + e.Message);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception: " + e.Message);
	        }
	    }
	}

snippet microsoft_visualstudio_data_core_ivsdataproviderobjectfactory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProviderObjectFactory/IVsDataProviderObjectFactory.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Framework;
	using Microsoft.VisualStudio.Data.Services;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	
	internal class MyProviderObjectFactory : DataProviderObjectFactory
	{
	    public override object CreateObject(Type objType)
	    {
	        if (objType == null)
	        {
	            throw new ArgumentNullException("objType");
	        }
	        if (objType == typeof(IVsDataConnectionProperties))
	        {
	            return new MyConnectionProperties();
	        }
	        if (objType == typeof(IVsDataConnectionSupport))
	        {
	            return new MyConnectionSupport();
	        }
	        return null;
	    }
	}
	
	internal class MyConnectionProperties : DataConnectionProperties
	{
	}
	
	internal class MyConnectionSupport : IVsDataConnectionSupport
	{
	
	    public void Initialize(object providerObj) {}
	    public bool Open(bool doPromptCheck) {return true;}
	    public void Close() {}
	    public string ConnectionString { get {return "";} set {} }
	    public int ConnectionTimeout { get {return 0;} set {} }
	    public DataConnectionState State { get {return DataConnectionState.Closed;} }
	    public object ProviderObject { get {return null;} }
	
	    public Object GetService(Type serviceType) {return null;}
	
	    public void Dispose() {}
	
	}
snippet installer_installers

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_Installers/installer_installers.cs

	/*
	   System.Configuration.Install.Installer.Installers
	   System.Configuration.Install.Installer.Parent
	
	   The following example demonstrates the properties 'Installers' and
	   'Parent'. The Installers property shows the InstallerCollection 
	   associated with an Installer and the Parent property gets the
	   installer containing the collection that this installer belongs to.
	*/
	
	using System;
	using System.Collections;
	using System.ServiceProcess;
	using System.Diagnostics;
	using System.Configuration.Install;
	
	public class Installer_Installers
	{
	   public static void Main()
	   {
	      AssemblyInstaller myAssemblyInstaller = new AssemblyInstaller();
	      ServiceInstaller myServiceInstaller = new ServiceInstaller();
	      EventLogInstaller myEventLogInstaller = new EventLogInstaller();
	      
	      InstallerCollection myInstallerCollection = myAssemblyInstaller.Installers;
	      
	      myInstallerCollection.Add(myServiceInstaller);
	      myInstallerCollection.Add(myEventLogInstaller);
	
	      Installer[] myInstaller = new Installer[2];
	      myInstallerCollection.CopyTo(myInstaller,0);
	      Console.WriteLine("Installers in the InstallerCollection : ");
	      for (int iIndex=0; iIndex < myInstaller.Length; iIndex++)
	         Console.WriteLine(myInstaller[iIndex].ToString());
	      Console.WriteLine("");
	      AssemblyInstaller myAssemblyInstaller1 = new AssemblyInstaller();
	      InstallerCollection myInstallerCollection1 = myAssemblyInstaller1.Installers;
	      myInstallerCollection1.Add(myAssemblyInstaller);
	
	      Installer myInstaller1 = myAssemblyInstaller.Parent;
	      Console.WriteLine("Parent of myAssembly : {0}", myInstaller1.ToString());
	   }
	}

snippet generic_sortedlist_ctor_idicicomp

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedList_ctor_IDicIComp/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Dictionary<string, string> openWith = 
	            new Dictionary<string, string>
	                (StringComparer.CurrentCultureIgnoreCase);
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("Bmp", "paint.exe");
	        openWith.Add("DIB", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	        
	        SortedList<string, string> copy = 
	            new SortedList<string, string>(openWith, 
	                StringComparer.CurrentCultureIgnoreCase);
	
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in copy )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, 
	                kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Key = Bmp, Value = paint.exe
	Key = DIB, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	Key = txt, Value = notepad.exe
	 */
	
	
	

snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/findfile.cs

	using System;
	using System.Runtime.InteropServices;
	
	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
	public class FindData
	{
	    public int fileAttributes = 0;
	    public int creationTime_lowDateTime = 0;
	    public int creationTime_highDateTime = 0;
	    public int lastAccessTime_lowDateTime = 0;
	    public int lastAccessTime_highDateTime = 0;
	    public int lastWriteTime_lowDateTime = 0;
	    public int lastWriteTime_highDateTime = 0;
	    public int nFileSizeHigh = 0;
	    public int nFileSizeLow = 0;
	    public int dwReserved0 = 0;
	    public int dwReserved1 = 0;
	    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
	    public string fileName = null;
	    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 14)]
	    public string alternateFileName = null;
	}
	
	public class LibWrap
	{
	    [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]
	    public static extern IntPtr FindFirstFile(
	        string fileName, [In, Out] FindData findFileData);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        FindData fd = new FindData();
	        IntPtr handle = LibWrap.FindFirstFile("C:\\*.*", fd);
	        Console.WriteLine($"The first file: {fd.fileName}");
	    }
	}

snippet math_atanx

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/math_atanx/atan.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    double x = 1.0;
	    double y = 2.0;
	    double angle;
	    double radians;
	    double result;
	
	    angle = 30;
	    radians = angle * (Math.PI/180);
	    result = Math.Tan(radians);
	    Console.WriteLine("The tangent of 30 degrees is {0}.", result);
	
	    radians = Math.Atan(result);
	    angle = radians * (180/Math.PI);
	    Console.WriteLine("The previous tangent is equivalent to {0} degrees.", angle);
	
	    String line1 = "{0}The arctangent of the angle formed by the x-axis and ";
	    String line2 = "a vector to point ({0},{1}) is {2}, ";
	    String line3 = "which is equivalent to {0} degrees.";
	
	    radians = Math.Atan2(y, x);
	    angle = radians * (180/Math.PI);
	
	    Console.WriteLine(line1, Environment.NewLine);
	    Console.WriteLine(line2, x, y, radians);
	    Console.WriteLine(line3, angle);
	    }
	}
	/*
	This example produces the following results:
	
	The tangent of 30 degrees is 0.577350269189626.
	The previous tangent is equivalent to 30 degrees.
	
	The arctangent of the angle formed by the x-axis and
	a vector to point (1,2) is 1.10714871779409,
	which is equivalent to 63.434948822922 degrees.
	*/
snippet isolatedstoragepermissionattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IsolatedStoragePermissionAttribute/IsolatedStoragePermissionAttribute.cs

	using System;
	using System.Security.Permissions;
	using System.IO.IsolatedStorage;
	using System.IO;
	
	[IsolatedStorageFilePermission(SecurityAction.PermitOnly, UsageAllowed = IsolatedStorageContainment.AssemblyIsolationByUser)]
	public sealed class App
	{
	    static void Main()
	    {
	        WriteIsolatedStorage();
	
	    }
	    private static void WriteIsolatedStorage()
	    {
	        using (Stream s = new IsolatedStorageFileStream("AssemblyData", FileMode.Create, IsolatedStorageFile.GetUserStoreForAssembly()))
	        {
	
	            using (StreamWriter sw = new StreamWriter(s))
	            {
	                sw.Write("This is some test data.");
	            }
	        }
	
	        using (Stream s = new IsolatedStorageFileStream("AssemblyData", FileMode.Open, IsolatedStorageFile.GetUserStoreForAssembly()))
	        {
	            using (StreamReader sr = new StreamReader(s))
	            {
	                Console.WriteLine(sr.ReadLine());
	            }
	        }
	    }
	}
	
snippet componentinstaller_copyfromcomponent

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ComponentInstaller_CopyFromComponent/componentinstaller_copyfromcomponent.cs

	
	/* The following example demonstrates the 'CopyFromComponent' and
	   the 'IsEquivalentInstaller' methods of the 'ComponentInstaller' class.
	   It defines a class MyInstallClass, which creates the event log and copies
	   the properties of the event log component to the 'EventLogInstaller' object.
	   It also checks whether 'ServiceInstaller' object can handle the same kind of 
	   installation as 'EventLogInstaller' object. 
	*/
	
	using System;
	using System.Diagnostics;
	using System.ServiceProcess;
	
	   public class ComponentInstaller_Example
	   {
	      static void Main()
	      {
	         EventLogInstaller myEventLogInstaller = new EventLogInstaller();
	         EventLog.CreateEventSource("MyEventSource","MyEventLog", ".");
	         EventLog myEventLog = new EventLog("MyEventLog", ".", "MyEventSource");
	         myEventLogInstaller.CopyFromComponent(myEventLog);
	         Console.WriteLine("The properties of the event log component : ");
	         Console.WriteLine(myEventLogInstaller.Log);
	         Console.WriteLine(myEventLogInstaller.Source);
	         ServiceInstaller myServiceInstaller = new  ServiceInstaller();
	         if(myEventLogInstaller.IsEquivalentInstaller(myServiceInstaller))
	         {
	            Console.WriteLine("'ServiceInstaller' can handle the same kind" 
	                              +" of installation as EventLogInstaller");
	         }
	         else
	         {
	             Console.WriteLine("'ServiceInstaller' can't handle the same" 
	                          +" kind of installation as 'EventLogInstaller'");
	         }
	          EventLog.Delete("MyEventLog",".");
	      }
	   }

snippet addincollectionpipelineaddinsideadapter

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/BookInfoContractToViewAddInAdapter.cs

	using System;
	using System.AddIn.Pipeline;
	namespace LibraryContractsAddInAdapters 
	{
	    
	public class BookInfoContractToViewAddInAdapter : LibraryContractsBase.BookInfo 
	{
	    private Library.IBookInfoContract _contract;
	    private System.AddIn.Pipeline.ContractHandle _handle;
	    public BookInfoContractToViewAddInAdapter(Library.IBookInfoContract contract) 
	    {
	        _contract = contract;
	        _handle = new ContractHandle(contract);
	    }
	
	    public override string ID()
	    {
	        return _contract.ID();
	    }
	    public override string Author()
	    {
	        return _contract.Author();
	    }
	    public override string Title()
	    {
	        return _contract.Title();
	    }
	    public override string Genre()
	    {
	        return _contract.Genre();
	    }
	    public override string Price()
	    {
	        return _contract.Price();
	    }
	    public override string Publish_Date()
	    {
	        return _contract.Publish_Date();
	    }
	    public override string Description()
	    {
	        return _contract.Description();
	    }
	
	    internal Library.IBookInfoContract GetSourceContract() {
	        return _contract;
	    }
	}
	}

snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/comparison1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] values= { "able", "ångström", "apple", "Æble", 
	                         "Windows", "Visual Studio" };
	      Array.Sort(values);
	      DisplayArray(values);
	
	      string originalCulture = CultureInfo.CurrentCulture.Name;
	      Thread.CurrentThread.CurrentCulture = new CultureInfo("sv-SE");
	      Array.Sort(values);
	      DisplayArray(values);
	
	      Thread.CurrentThread.CurrentCulture = new CultureInfo(originalCulture);
	    }
	    
	    private static void DisplayArray(string[] values)
	    {
	      Console.WriteLine("Sorting using the {0} culture:",  
	                        CultureInfo.CurrentCulture.Name);
	      foreach (string value in values)
	         Console.WriteLine("   {0}", value);
	
	      Console.WriteLine();
	    }
	}

snippet finfo_openwrite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_OpenWrite/file_openwrite.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\Temp\MyTest.txt";
	        FileInfo fi = new FileInfo(path);
	
	        using (FileStream fs = fi.OpenWrite()) 
	        {
	            Byte[] info = 
	                new UTF8Encoding(true).GetBytes("This is to test the OpenWrite method.");
	
	            fs.Write(info, 0, info.Length);
	        }
	
	        using (FileStream fs = fi.OpenRead()) 
	        {
	            byte[] b = new byte[1024];
	            UTF8Encoding temp = new UTF8Encoding(true);
	
	            while (fs.Read(b,0,b.Length) > 0) 
	            {
	                Console.WriteLine(temp.GetString(b));
	            }
	        }
	    }
	}

snippet whatsnew_casting

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/whatsnew_casting/program.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	 
	namespace Casting
	{
	   class Program
	   {
	      static void Main(string[] args)
	      {
	         EncryptWithCasting();
	         EncryptWithoutCasting();
	
	         Console.ReadLine();
	
	      }
	
	      private static void EncryptWithCasting()
	      {
	         byte[] data = { 1, 2, 4, 8, 16, 32, 64, 128 };
	         X509Certificate2 cert = new X509Certificate2();
	         try {
	            RSACryptoServiceProvider rsa = (RSACryptoServiceProvider)cert.PrivateKey;
	            byte[] oaepEncrypted = rsa.Encrypt(data, true);
	            byte[] pkcs1Encrypted = rsa.Encrypt(data, false);
	
	         }
	         catch (Exception e)
	         {
	            Console.WriteLine("{0}: {1}", e.GetType().Name, e.Message);
	         }
	      }
	
	      private static void EncryptWithoutCasting()
	      {
	         byte[] data = { 1, 2, 4, 8, 16, 32, 64, 128 };
	         X509Certificate2 cert = new X509Certificate2(); 
	
	         RSA rsa = cert.GetRSAPrivateKey();
	         if (rsa == null)
	            throw new InvalidOperationException("An RSA certificate was expected");
	
	         byte[] oaepEncrypted = rsa.Encrypt(data, RSAEncryptionPadding.OaepSHA1);
	         byte[] pkcs1Encrypted = rsa.Encrypt(data, RSAEncryptionPadding.Pkcs1);
	      }
	   }
	}

snippet file_create1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_Create1/file_create1.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test
	{
	    public static void Main()
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        try
	        {
	
	            if (File.Exists(path))
	            {
	                File.Delete(path);
	            }
	
	            using (FileStream fs = File.Create(path))
	            {
	                Byte[] info = new UTF8Encoding(true).GetBytes("This is some text in the file.");
	                fs.Write(info, 0, info.Length);
	            }
	
	            using (StreamReader sr = File.OpenText(path))
	            {
	                string s = "";
	                while ((s = sr.ReadLine()) != null)
	                {
	                    Console.WriteLine(s);
	                }
	            }
	        }
	
	        catch (Exception ex)
	        {
	            Console.WriteLine(ex.ToString());
	        }
	    }
	}

snippet isdefined

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IsDefined/id2.cs

	using System;
	using System.Diagnostics;
	
	[module:Debuggable(true, false)]
	namespace IsDef2CS
	{
	    public class DemoClass
	    {
	        static void Main(string[] args)
	        {
	            Type clsType = typeof(DemoClass);
	            bool isDef = Attribute.IsDefined(clsType.Module, 
	                typeof(DebuggableAttribute));
	            Console.WriteLine("The Debuggable attribute {0} " +
	                "defined for Module {1}.",
	                isDef ? "is" : "is not",
	                clsType.Module.Name);
	            if (isDef)
	            {
	                DebuggableAttribute dbgAttr = (DebuggableAttribute)
	                    Attribute.GetCustomAttribute(clsType.Module, 
	                    typeof(DebuggableAttribute));
	                if (dbgAttr != null)
	                {
	                    Console.WriteLine("JITTrackingEnabled is {0}.",
	                        dbgAttr.IsJITTrackingEnabled);
	                    Console.WriteLine("JITOptimizerDisabled is {0}.",
	                        dbgAttr.IsJITOptimizerDisabled);
	                }
	                else
	                    Console.WriteLine("The Debuggable attribute " +
	                        "could not be retrieved.");
	            }
	        }
	    }
	}
	
	/*
	 * Output:
	 * The Debuggable attribute is defined for Module IsDef2CS.exe.
	 * JITTrackingEnabled is True.
	 * JITOptimizerDisabled is False.
	 */

snippet asyncdelegateexamples

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/waithandle.cs

	using System;
	using System.Threading;
	
	namespace Examples.AdvancedProgramming.AsynchronousOperations
	{
	    public class AsyncMain 
	    {
	        static void Main() 
	        {
	            int threadId;
	
	            AsyncDemo ad = new AsyncDemo();
	
	            AsyncMethodCaller caller = new AsyncMethodCaller(ad.TestMethod);
	       
	            IAsyncResult result = caller.BeginInvoke(3000, 
	                out threadId, null, null);
	
	            Thread.Sleep(0);
	            Console.WriteLine("Main thread {0} does some work.",
	                Thread.CurrentThread.ManagedThreadId);
	
	            result.AsyncWaitHandle.WaitOne();
	
	            string returnValue = caller.EndInvoke(out threadId, result);
	
	            result.AsyncWaitHandle.Close();
	
	            Console.WriteLine("The call executed on thread {0}, with return value \"{1}\".",
	                threadId, returnValue);
	        }
	    }
	}
	
	/* This example produces output similar to the following:
	
	Main thread 1 does some work.
	Test method begins.
	The call executed on thread 3, with return value "My call time was 3000.".
	 */
	

snippet fieldinfo_setvalue

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_SetValue/fieldinfo_setvalue.cs

	using System;
	using System.Reflection;
	using System.Globalization;
	
	public class Example
	{
	    private string myString;
	    public Example()
	    {
	        myString = "Old value";
	    }
	
	    public string StringProperty
	    {
	        get
	        {
	            return myString;
	        }
	    }
	}
	
	public class FieldInfo_SetValue
	{
	    public static void Main()
	    {
	        Example myObject = new Example();
	        Type myType = typeof(Example);
	        FieldInfo myFieldInfo = myType.GetField("myString", 
	            BindingFlags.NonPublic | BindingFlags.Instance); 
	
	        Console.WriteLine( "\nThe field value of myString is \"{0}\".", 
	        myFieldInfo.GetValue(myObject)); 
	        Console.WriteLine( "Applying SetValue(Object, Object)."); 
	   
	        myFieldInfo.SetValue(myObject, "New value"); 
	        Console.WriteLine( "The field value of mystring is \"{0}\".", 
	            myFieldInfo.GetValue(myObject));
	    }
	}
	
	/* This code example produces the following output:
	
	The field value of myString is "Old value".
	Applying SetValue(Object, Object).
	The field value of mystring is "New value".
	 */
snippet codemembereventsample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeMemberEventSample/codemembereventexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeMemberEventExample
	    {
	        public CodeMemberEventExample()
	        {
	            CodeTypeDeclaration type1 = new CodeTypeDeclaration("EventTest");
	
	            CodeMemberEvent event1 = new CodeMemberEvent();
	            event1.Name = "TestEvent";
	            event1.Type = new CodeTypeReference("System.EventHandler");
	
	
	
	            type1.Members.Add( event1 );
	
	            CodeConstructor constructor1 = new CodeConstructor();
	            constructor1.Attributes = MemberAttributes.Public;
	            type1.Members.Add( constructor1 );    
	
	
	
	        }
	    }
	}
snippet isdefined

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IsDefined/id1.cs

	using System;
	using System.Reflection;
	
	[assembly: AssemblyDescription("A sample description")]
	namespace IsDef1CS
	{
	    public class DemoClass
	    {
	        static void Main(string[] args)
	        {
	            Type clsType = typeof(DemoClass);
	            Assembly assy = clsType.Assembly;
	            String assyName = assy.GetName().Name;
	            bool isdef = Attribute.IsDefined(assy, 
	                typeof(AssemblyDescriptionAttribute));
	            if (isdef)
	            {
	                Console.WriteLine("The AssemblyDescription attribute " +
	                    "is defined for assembly {0}.", assyName);
	                AssemblyDescriptionAttribute adAttr = 
	                    (AssemblyDescriptionAttribute)Attribute.GetCustomAttribute(
	                    assy, typeof(AssemblyDescriptionAttribute));
	                if (adAttr != null)
	                    Console.WriteLine("The description is \"{0}\".", 
	                        adAttr.Description);
	                else
	                    Console.WriteLine("The description could not " +
	                        "be retrieved.");            
	            }
	            else
	                Console.WriteLine("The AssemblyDescription attribute is not " +
	                    "defined for assembly {0}.", assyName);
	        }
	    }
	}
	
	/*
	 * Output:
	 * The AssemblyDescription attribute is defined for assembly IsDef1CS.
	 * The description is "A sample description".
	 */

snippet installer_rollback

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_Rollback/installer_rollback.cs

	/*
	   System.Configuration.Install.Installer.Rollback
	
	   The following example demonstrates the Rollback method
	   of the class 'installer'. The Rollback method is overridden
	   in a derived class of 'installer'.An exception is generated to
	   force an installation rollback.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.Collections;
	
	namespace MyAssembly
	{
	   [RunInstaller(true)]
	   public class MyInstallerSample : Installer
	   {
	      public override void Install( IDictionary mySavedState )
	      {
	         base.Install( mySavedState );
	         Console.WriteLine( "" );
	         Console.WriteLine( "The Install method of 'MyInstallerSample'" +
	                           " has been called" );
	         Console.WriteLine( "" );
	         
	         Exception myException = new Exception();
	         Console.WriteLine("Exception thrown during Installation");
	         throw myException;
	         
	      }
	      public override void Rollback( IDictionary mySavedState )
	      {
	         base.Rollback( mySavedState );
	         Console.WriteLine( "The Rollback method of 'MyInstallerSample'" +
	                           " has been called" );
	      }
	      static void Main()
	      {
	         Console.WriteLine("Use installutil.exe to run the assembly"
	            + " Installer_Rollback.exe");
	      }
	   }
	}

snippet arraytypemismatch_constructor1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ArrayTypeMisMatch_Constructor1/arraytypemismatch_constructor1.cs

	/*
	 * The following example demonstrates the 'ArrayTypeMismatchException()' constructor of class
	 * ArrayTypeMismatchException class.It creates a function which takes two arrays as arguments.
	 * It checks whether the two arrays are of same type or not. If two arrays are not of same type
	 * then a new  'ArrayTypeMismatchException' object is created and thrown. That exception is caught
	 * in the calling method.
	 */
	
	using System;
	
	public class ArrayTypeMisMatchConst
	{
	   public void CopyArray(Array myArray,Array myArray1)
	   {
	      string typeArray1 = myArray.GetType().ToString();
	      string typeArray2 = myArray1.GetType().ToString();
	      if(typeArray1==typeArray2)
	      {
	         myArray.SetValue("Name: "+myArray1.GetValue(0),0);
	         myArray.SetValue("Name: "+myArray1.GetValue(1),1);
	      }
	      else
	      {
	         throw new ArrayTypeMismatchException();
	      }
	   }
	   static void Main()
	   {
	      try
	      {
	         string[] myStringArray = new string[2];
	         myStringArray.SetValue("Jones",0);
	         myStringArray.SetValue("John",1);
	
	         int[] myIntArray = new int[2];
	         ArrayTypeMisMatchConst myArrayType = new ArrayTypeMisMatchConst();
	         myArrayType.CopyArray(myStringArray,myIntArray);
	      }
	      catch(ArrayTypeMismatchException e)
	      {
	         Console.WriteLine("The Exception is :"+e);
	      }
	   }
	}
	

snippet isdefined

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IsDefined/id4.cs

	using System;
	using System.Reflection;
	
	namespace IsDef4CS 
	{
	    public class TestClass 
	    {
	        [Obsolete("This method is obsolete. Use Method2 instead.")]
	        public void Method1()
	        {}
	        public void Method2()
	        {}
	    }
	
	    public class DemoClass 
	    {
	        static void Main(string[] args) 
	        {
	            Type clsType = typeof(TestClass);
	            MethodInfo mInfo = clsType.GetMethod("Method1");
	            bool isDef = Attribute.IsDefined(mInfo, typeof(ObsoleteAttribute));
	            Console.WriteLine("The Obsolete Attribute {0} defined for {1} of class {2}.",
	                isDef ? "is" : "is not", mInfo.Name, clsType.Name);
	            if (isDef) 
	            {
	                ObsoleteAttribute obsAttr = 
	                                 (ObsoleteAttribute)Attribute.GetCustomAttribute( 
	                                                    mInfo, typeof(ObsoleteAttribute));
	                if (obsAttr != null)
	                    Console.WriteLine("The message is: \"{0}\".",
	                        obsAttr.Message);
	                else
	                    Console.WriteLine("The message could not be retrieved.");
	            }
	        }
	    }
	}
	
	/*
	 * Output:
	 * The Obsolete Attribute is defined for Method1 of class TestClass.
	 * The message is: "This method is obsolete. Use Method2 instead.".
	 */

snippet arraytypemismatch_constructor3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ArrayTypeMisMatch_Constructor3/arraytypemismatch_constructor3.cs

	
	/*
	   The following example demonstrates the 'ArrayTypeMismatchException(string,innerException)'
	   constructor of class ArrayTypeMismatchException class.It creates a 
	   function which takes two arrays as arguments. It copies elements of 
	   one array to another array. If two arrays are of not same type then
	   an exception has been thrown. In the 'Catch' block a new 'WebException'
	   object is created and thrown to the caller. That exception is caught 
	   in the calling method and the error message is displayed to the console.
	 */
	
	using System;
	
	public class ArrayTypeMisMatchConst
	{
	   public void CopyArray(Array myArray,Array myArray1)
	   {
	      try
	      {
	         myArray.SetValue(myArray1.GetValue(0),0);
	         myArray.SetValue(myArray1.GetValue(1),1);
	      }
	      catch(Exception e)
	      {
	         throw new ArrayTypeMismatchException("The Source and destination arrays are of not same type.", e);
	      }
	   
	   }
	   static void Main()
	   {
	         try
	         {
	            string[] myStringArray = new string[2];
	            myStringArray.SetValue("Jones",0);
	            myStringArray.SetValue("John",1);
	            int[] myIntArray = new int[2];
	            ArrayTypeMisMatchConst myArrayType = new ArrayTypeMisMatchConst();
	            myArrayType.CopyArray(myStringArray,myIntArray);
	         }
	         catch(ArrayTypeMismatchException e)
	         {
	            Console.WriteLine("The Exception Message is : "+e.Message);
	            Console.WriteLine("The Inner exception is :"+e.InnerException);
	         }
	      }
	}

snippet processmodule_modulename

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ModuleName/processmodule_modulename.cs

	
	/* The following program demonstrates the use of 'ModuleName' property of 
	   'ProcessModule' class. It creates a notepad, gets the 'MainModule' and 
	   all other modules of the process 'notepad.exe', displays 'ModuleName'
	   for all the modules and the main module.
	*/
	using System;
	using System.Diagnostics;
	
	class MyProcessModuleClass
	{
	    public static void Main()
	    {
	        try
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo("notepad.exe");
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	                System.Threading.Thread.Sleep(1000);
	                ProcessModule myProcessModule;
	                ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;
	                Console.WriteLine("Module names of the modules associated "
	                    + "with 'notepad' are:");
	                for (int i = 0; i < myProcessModuleCollection.Count; i++)
	                {
	                    myProcessModule = myProcessModuleCollection[i];
	                    Console.WriteLine(myProcessModule.ModuleName);
	                }
	                myProcessModule = myProcess.MainModule;
	                Console.WriteLine("The process's main moduleName is: " + myProcessModule.ModuleName);
	                myProcess.CloseMainWindow();
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine($"Exception : {e.Message}");
	        }
	    }
	}

snippet process_getprocesses_noexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Process_GetProcesses_noexception/processstaticget.cs

	using System;
	using System.Diagnostics;
	using System.ComponentModel;
	
	namespace MyProcessSample
	{
	    class MyProcess
	    {
	        void BindToRunningProcesses()
	        {
	            Process currentProcess = Process.GetCurrentProcess();
	
	            Process[] localAll = Process.GetProcesses();
	
	            Process[] localByName = Process.GetProcessesByName("notepad");
	
	            Process localById = Process.GetProcessById(1234);
	
	
	
	            Process[] remoteAll = Process.GetProcesses("myComputer");
	
	            Process[] remoteByName = Process.GetProcessesByName("notepad", "myComputer");
	
	            Process[] ipByName = Process.GetProcessesByName("notepad", "169.0.0.0");
	
	            Process remoteById = Process.GetProcessById(2345, "myComputer");
	        }
	
	        static void Main()
	        {
	            MyProcess myProcess = new MyProcess();
	            myProcess.BindToRunningProcesses();
	        }
	    }
	}

snippet filesysteminfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FileSystemInfo/program.cs

	using System;
	using System.IO;
	
	
	namespace ConsoleApplication2
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            foreach (string entry in Directory.GetDirectories(@"C:\"))
	            {
	                DisplayFileSystemInfoAttributes(new DirectoryInfo(entry));
	            }
	            foreach (string entry in Directory.GetFiles(@"C:\"))
	            {
	                DisplayFileSystemInfoAttributes(new FileInfo(entry));
	            }
	        }
	        static void DisplayFileSystemInfoAttributes(FileSystemInfo fsi)
	        {
	            string entryType = "File";
	
	            if ((fsi.Attributes & FileAttributes.Directory) == FileAttributes.Directory )
	            {
	                entryType = "Directory";
	            }
	            Console.WriteLine("{0} entry {1} was created on {2:D}", entryType, fsi.FullName, fsi.CreationTime);
	        }
	    }
	}
	
	 
snippet io_file_encrypt_decrypt

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_File_Encrypt_Decrypt/sample.cs

	using System;
	using System.IO;
	using System.Security.AccessControl;
	
	namespace FileSystemExample
	{
	    class FileExample
	    {
	        public static void Main()
	        {
	            try
	            {
	                string FileName = "test.xml";
	
	                Console.WriteLine("Encrypt " + FileName);
	
	                AddEncryption(FileName);
	
	                Console.WriteLine("Decrypt " + FileName);
	
	                RemoveEncryption(FileName);
	
	                Console.WriteLine("Done");
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine(e);
	            }
	
	            Console.ReadLine();
	        }
	
	
	        public static void AddEncryption(string FileName)
	        {
	
	            File.Encrypt(FileName);
	
	        }
	
	        public static void RemoveEncryption(string FileName)
	        {
	            File.Decrypt(FileName);
	        }
	    }
	}
snippet list`1_convertall

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/source.cs

	using System;
	using System.Drawing;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        List<PointF> lpf = new List<PointF>();
	
	        lpf.Add(new PointF(27.8F, 32.62F));
	        lpf.Add(new PointF(99.3F, 147.273F));
	        lpf.Add(new PointF(7.5F, 1412.2F));
	
	        Console.WriteLine();
	        foreach( PointF p in lpf )
	        {
	            Console.WriteLine(p);
	        }
	
	        List<Point> lp = lpf.ConvertAll( 
	            new Converter<PointF, Point>(PointFToPoint));
	
	        Console.WriteLine();
	        foreach( Point p in lp )
	        {
	            Console.WriteLine(p);
	        }
	    }
	
	    public static Point PointFToPoint(PointF pf)
	    {
	        return new Point(((int) pf.X), ((int) pf.Y));
	    }
	}
	
	/* This code example produces the following output:
	
	{X=27.8, Y=32.62}
	{X=99.3, Y=147.273}
	{X=7.5, Y=1412.2}
	
	{X=27,Y=32}
	{X=99,Y=147}
	{X=7,Y=1412}
	 */
	
	

snippet projectn

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn/serialize1.cs

	using System;
	using System.Runtime.Serialization;
	using System.Runtime.Serialization.Json;
	using System.Xml.Serialization;
	
	public class Example
	{
	   public static void Main()
	   {
	      XmlSerializer xmlSer = new XmlSerializer(typeof(T));
	      DataContractSerializer dataSer = new DataContractSerializer(typeof(T));
	      DataContractJsonSerializer jsonSer = new DataContractJsonSerializer(typeof(T));
	      
	      Type t = typeof(DataSet);
	      XmlSerializer ser = new XmlSerializer(t);
	   }
	
	   public void UsesReflection()
	   {
	      XmlSerializer xSerializer = new XmlSerializer(typeof(Teacher), 
	                                  new Type[] { typeof(Student), 
	                                               typeof(Course), 
	                                               typeof(Location) });
	   }
	}
	
	
	public class T
	{}
	
	public class DataSet
	{}
	
	public class Teacher
	{}
	
	public class Student
	{}
	
	public class Course
	{}
	
	public class Location
	{}
	

snippet addincollectionpipelinehostsideadapter

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/BookInfoContractToViewHostAdapter.cs

	using System.AddIn.Pipeline;
	namespace LibraryContractsHostAdapters
	{
	    public class BookInfoContractToViewHostAdapter : LibraryContractsHAV.BookInfo
	    {
	        private Library.IBookInfoContract _contract;
	
	        private ContractHandle _handle;
	
	        public BookInfoContractToViewHostAdapter(Library.IBookInfoContract contract)
	        {
	            _contract = contract;
	            _handle = new ContractHandle(contract);
	        }
	
	        public override string ID()
	        {
	            return _contract.ID();
	        }
	        public override string Author()
	        {
	            return _contract.Author();
	        }
	        public override string Title()
	        {
	            return _contract.Title();
	        }
	        public override string Genre()
	        {
	            return _contract.Genre();
	        }
	        public override string Price()
	        {
	            return _contract.Price();
	        }
	        public override string Publish_Date()
	        {
	            return _contract.Publish_Date();
	        }
	        public override string Description()
	        {
	            return _contract.Description();
	        }
	
	
	        internal Library.IBookInfoContract GetSourceContract() {
	            return _contract;
	        }
	    }
	}
snippet projectn_etw

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn_etw/etw1.cs

	
	using System;
	using System.Diagnostics.Tracing;
	
	[EventSource(Name="MyCompany-MyApp")]
	public sealed class AppEventSource : EventSource
	{
	   public static AppEventSource Log = new AppEventSource ();
	
	  [Event(1)]
	  public void AppInitialized() { WriteEvent(1, ""); }
	  
	  [Event(2)]
	  public void MainPageInitialized() { WriteEvent(2, ""); }
	}
	
	public sealed partial class App
	{
	    public App()
	    {
	        this.InitializeComponent();
	        this.Suspending += OnSuspending;
	        AppEventSource.Log.AppInitialized();
	    }
	} 
	
	public sealed partial class MainPage : Page
	{
	    public MainPage()
	    {
	        this.InitializeComponent();
	        AppEventSource.Log.MainPageInitialized();
	
	    }
	}
	
	
	
	public class Page 
	{
	   public void InitializeComponent() {}       
	       
	}
	
	public sealed partial class App 
	{
	   public void InitializeComponent() {}       
	 
	} 
snippet installercollection_add

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Add/MyAssembly1.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet installercollection_add

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Add/MyAssembly2.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet installercollection_addrange1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_AddRange1/MyAssembly1.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet installercollection_addrange1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_AddRange1/MyAssembly2.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet installercollection_copyto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_CopyTo/MyAssembly1.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet installercollection_copyto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_CopyTo/MyAssembly2.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet installercollection_insert

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Insert/MyAssembly1.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet installercollection_insert

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Insert/MyAssembly2.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet installercollection_item

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Item/MyAssembly1.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet installercollection_item

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Item/MyAssembly2.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet installercollection_remove

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Remove/MyAssembly1.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet installercollection_remove

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Remove/MyAssembly2.cs

	/*
	   This program is supposed to be used with the IntallerCollection_***.cs
	   examples. Provide the exe of this program as input to the 
	   InstallerCollection_***.exe programs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/eii1.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public interface IFahrenheit
	{
	   decimal GetTemperature();
	}
	
	public interface ICelsius
	{
	   decimal GetTemperature();
	}
	
	public class Temperature : ICelsius, IFahrenheit
	{
	   private decimal _value;
	   
	   public Temperature(decimal value)
	   {
	      _value = value;
	   } 
	   
	   decimal IFahrenheit.GetTemperature()
	   {
	      return _value * 9 / 5 + 32;
	   }
	
	   decimal ICelsius.GetTemperature()
	   {
	      return _value;
	   } 
	}
	public class Example
	{
	   public static void Main()
	   {
	      Temperature temp = new Temperature(100.0m);
	      ICelsius cTemp = temp;
	      IFahrenheit fTemp = temp;
	      Console.WriteLine("Temperature in Celsius: {0} degrees", 
	                        cTemp.GetTemperature());
	      Console.WriteLine("Temperature in Fahrenheit: {0} degrees", 
	                        fTemp.GetTemperature());
	   }
	}

snippet array_convertall

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/source.cs

	using System;
	using System.Drawing;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        PointF[] apf = {
	            new PointF(27.8F, 32.62F),
	            new PointF(99.3F, 147.273F),
	            new PointF(7.5F, 1412.2F) };
	
	        Console.WriteLine();
	        foreach( PointF p in apf )
	            Console.WriteLine(p);
	
	        Point[] ap = Array.ConvertAll(apf, 
	            new Converter<PointF, Point>(PointFToPoint));
	
	        Console.WriteLine();
	        foreach( Point p in ap )
	        {
	            Console.WriteLine(p);
	        }
	    }
	
	    public static Point PointFToPoint(PointF pf)
	    {
	        return new Point(((int) pf.X), ((int) pf.Y));
	    }
	}
	
	/* This code example produces the following output:
	
	{X=27.8, Y=32.62}
	{X=99.3, Y=147.273}
	{X=7.5, Y=1412.2}
	
	{X=27,Y=32}
	{X=99,Y=147}
	{X=7,Y=1412}
	 */
	
	

snippet fstream_class

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FStream_Class/fstream_class.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test
	{
	
	    public static void Main()
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        if (File.Exists(path))
	        {
	            File.Delete(path);
	        }
	
	        using (FileStream fs = File.Create(path))
	        {
	            AddText(fs, "This is some text");
	            AddText(fs, "This is some more text,");
	            AddText(fs, "\r\nand this is on a new line");
	            AddText(fs, "\r\n\r\nThe following is a subset of characters:\r\n");
	
	            for (int i=1;i < 120;i++)
	            {
	                AddText(fs, Convert.ToChar(i).ToString());
	
	            }
	        }
	
	        using (FileStream fs = File.OpenRead(path))
	        {
	            byte[] b = new byte[1024];
	            UTF8Encoding temp = new UTF8Encoding(true);
	            while (fs.Read(b,0,b.Length) > 0)
	            {
	                Console.WriteLine(temp.GetString(b));
	            }
	        }
	    }
	
	    private static void AddText(FileStream fs, string value)
	    {
	        byte[] info = new UTF8Encoding(true).GetBytes(value);
	        fs.Write(info, 0, info.Length);
	    }
	}

snippet cryptography_rc2cryptoserviceprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RC2CryptoServiceProvider/example.cs

	using System;
	using System.IO;
	using System.Text;
	using System.Security.Cryptography;
	
	namespace RC2CryptoServiceProvider_Examples
	{
	    class MyMainClass
	    {
	        public static void Main()
	        {
	            byte[] originalBytes = ASCIIEncoding.ASCII.GetBytes("Here is some data.");
	
	            RC2CryptoServiceProvider rc2CSP = new RC2CryptoServiceProvider();
	
	            rc2CSP.UseSalt = true;
	
	            rc2CSP.GenerateKey();
	            rc2CSP.GenerateIV();
	
	            MemoryStream msEncrypt = new MemoryStream();
	            CryptoStream csEncrypt = new CryptoStream(msEncrypt, rc2CSP.CreateEncryptor(rc2CSP.Key, rc2CSP.IV), CryptoStreamMode.Write);
	
	            csEncrypt.Write(originalBytes, 0, originalBytes.Length);
	            csEncrypt.FlushFinalBlock();
	
	            byte[] encryptedBytes = msEncrypt.ToArray();            
	
	            MemoryStream msDecrypt = new MemoryStream(encryptedBytes);
	            CryptoStream csDecrypt = new CryptoStream(msDecrypt, rc2CSP.CreateDecryptor(rc2CSP.Key, rc2CSP.IV), CryptoStreamMode.Read);
	
	            byte[] unencryptedBytes = new byte[originalBytes.Length];
	
	            csDecrypt.Read(unencryptedBytes, 0, unencryptedBytes.Length);
	
	            string plaintext = ASCIIEncoding.ASCII.GetString(unencryptedBytes);
	
	            Console.WriteLine("Unencrypted text: {0}", plaintext);
	
	            Console.ReadLine();
	        }
	    }
	}
snippet adprincipal

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADPrincipal/adprincipal.cs

	using System;
	using System.Security.Principal;
	using System.Threading;
	
	class ADPrincipal
	{
		static void Main(string[] args)
		{
			Thread t = new Thread(new ThreadStart(PrintPrincipalInformation));
			t.Start();
			t.Join();
	
			AppDomain currentDomain = AppDomain.CurrentDomain;
			currentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);
				
			t = new Thread(new ThreadStart(PrintPrincipalInformation));
			t.Start();
			t.Join();
	
			IIdentity identity = new GenericIdentity("NewUser");
			IPrincipal principal = new GenericPrincipal(identity, null);
			currentDomain.SetThreadPrincipal(principal);
				
			t = new Thread(new ThreadStart(PrintPrincipalInformation));
			t.Start();
			t.Join();
			
			Console.ReadLine();
		}
	
		static void PrintPrincipalInformation()
		{
			IPrincipal curPrincipal = Thread.CurrentPrincipal;
			if(curPrincipal != null)
			{
				Console.WriteLine("Type: " + curPrincipal.GetType().Name);
				Console.WriteLine("Name: " + curPrincipal.Identity.Name);
				Console.WriteLine("Authenticated: " +
					curPrincipal.Identity.IsAuthenticated);
				Console.WriteLine();
			}
		}
	}

snippet fsread

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FSRead/fsread.cs

	using System;
	using System.IO;
	
	class Test
	{
	
	public static void Main()
	{
	    string pathSource = @"c:\tests\source.txt";
	    string pathNew = @"c:\tests\newfile.txt";
	
	    try
	    {
	
	        using (FileStream fsSource = new FileStream(pathSource,
	            FileMode.Open, FileAccess.Read))
	        {
	
	            byte[] bytes = new byte[fsSource.Length];
	            int numBytesToRead = (int)fsSource.Length;
	            int numBytesRead = 0;
	            while (numBytesToRead > 0)
	            {
	                int n = fsSource.Read(bytes, numBytesRead, numBytesToRead);
	
	                if (n == 0)
	                    break;
	
	                numBytesRead += n;
	                numBytesToRead -= n;
	            }
	             numBytesToRead = bytes.Length;
	
	            using (FileStream fsNew = new FileStream(pathNew,
	                FileMode.Create, FileAccess.Write))
	            {
	                fsNew.Write(bytes, 0, numBytesToRead);
	            }
	        }
	    }
	    catch (FileNotFoundException ioEx)
	    {
	        Console.WriteLine(ioEx.Message);
	    }
	}
	}
snippet file_open3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/File_Open3/file_open3.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	
	        if (!File.Exists(path)) 
	        {
	            using (FileStream fs = File.Create(path)) 
	            {
	                Byte[] info = new UTF8Encoding(true).GetBytes("This is some text in the file.");
	
	                fs.Write(info, 0, info.Length);
	            }
	        }
	
	        using (FileStream fs = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.None)) 
	        {
	            byte[] b = new byte[1024];
	            UTF8Encoding temp = new UTF8Encoding(true);
	
	            while (fs.Read(b,0,b.Length) > 0) 
	            {
	                Console.WriteLine(temp.GetString(b));
	            }
	
	            try 
	            {
	                using (FileStream fs2 = File.Open(path, FileMode.Open)) 
	                {
	                }
	            } 
	            catch (Exception e) 
	            {
	                Console.Write("Opening the file twice is disallowed.");
	                Console.WriteLine(", as expected: {0}", e.ToString());
	            }
	        }
	    }
	}

snippet cryptography_rsacsp_decrypt

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RSACSP_Decrypt/example.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	class RSACSPSample
	{
	    static void Main()
	    {
	        try
	        {
	            ASCIIEncoding ByteConverter = new ASCIIEncoding();
	
	            string dataString = "Data to Encrypt";
	
	            byte[] dataToEncrypt = ByteConverter.GetBytes(dataString);
	            byte[] encryptedData;
	            byte[] decryptedData;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            Console.WriteLine("Original Data: {0}", dataString);
	
	            encryptedData = RSAalg.Encrypt(dataToEncrypt, false);
	
	            Console.WriteLine("Encrypted Data: {0}", ByteConverter.GetString(encryptedData));
	
	            decryptedData = RSAalg.Decrypt(encryptedData, false);
	
	            Console.WriteLine("Decrypted plaintext: {0}", ByteConverter.GetString(decryptedData));
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	        }
	    }
	}
snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/sortkey1.cs

	using System;
	using System.Collections.Generic;
	using System.Globalization;
	using System.Threading;
	
	public class SortKeyComparer : IComparer<String>
	{
	   public int Compare(string str1, string str2)
	   {
	      SortKey sk1, sk2;
	      sk1 = CultureInfo.CurrentCulture.CompareInfo.GetSortKey(str1);         
	      sk2 = CultureInfo.CurrentCulture.CompareInfo.GetSortKey(str2); 
	      return SortKey.Compare(sk1, sk2);        
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] values = { "able", "ångström", "apple", "Æble", 
	                          "Windows", "Visual Studio" };
	      SortKeyComparer comparer = new SortKeyComparer();
	            
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
	      Array.Sort(values, comparer);
	      string[] enValues = (String[]) values.Clone();
	
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("sv-SE");
	      Array.Sort(values, comparer);
	      string[] svValues = (String[]) values.Clone();
	
	      Console.WriteLine("{0,-8} {1,-15} {2,-15}\n", "Position", "en-US", "sv-SE");
	      for (int ctr = 0; ctr <= values.GetUpperBound(0); ctr++)
	         Console.WriteLine("{0,-8} {1,-15} {2,-15}", ctr, enValues[ctr], svValues[ctr]);      
	   }
	}

snippet modulebuilder_defineenum

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_DefineEnum/modulebuilder_defineenum.cs

	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	class Example
	{
	    public static void Main()
	    {
	        AppDomain currentDomain = AppDomain.CurrentDomain;
	      
	        AssemblyName aName = new AssemblyName("TempAssembly");
	        AssemblyBuilder ab = currentDomain.DefineDynamicAssembly(
	            aName, AssemblyBuilderAccess.RunAndSave);
	      
	        ModuleBuilder mb = ab.DefineDynamicModule(aName.Name, aName.Name + ".dll");
	      
	        EnumBuilder eb = mb.DefineEnum("Elevation", TypeAttributes.Public, typeof(int));
	      
	        eb.DefineLiteral("Low", 0);
	        eb.DefineLiteral("High", 1);
	
	        Type finished = eb.CreateType();
	        ab.Save(aName.Name + ".dll");
	
	        foreach( object o in Enum.GetValues(finished) )
	        {
	            Console.WriteLine("{0}.{1} = {2}", finished, o, ((int) o));
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Elevation.Low = 0
	Elevation.High = 1 
	 */
	
	

snippet arraytypemismatch_constructor2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ArrayTypeMisMatch_Constructor2/arraytypemismatch_constructor2.cs

	
	/*
	   The following example demonstrates the 'ArrayTypeMismatchException(string)' 
	   constructor of class ArrayTypeMismatchException class.A function has been 
	   created which takes two arrays as arguments. It checks whether the two arrays
	   are of same type or not. If two arrays are of not same type then a new 
	   'ArrayTypeMismatchException' object is created and thrown. That exception is 
	   caught in the calling method.
	 */
	
	using System;
	
	public class ArrayTypeMisMatchConst
	{
	   public void CopyArray(Array myArray,Array myArray1)
	   {
	      string typeArray1 = myArray.GetType().ToString();
	      string typeArray2 = myArray1.GetType().ToString();
	      if(typeArray1==typeArray2)
	      {
	         myArray.SetValue("Name: "+myArray1.GetValue(0),0);
	         myArray.SetValue("Name: "+myArray1.GetValue(1),1);
	      }
	      else
	      {
	         throw new ArrayTypeMismatchException("The Source and destination arrays are not of same type.");
	      }
	   }
	
	   static void Main()
	   {
	      try
	      {
	         string[] myStringArray = new string[2];
	         myStringArray.SetValue("Jones",0);
	         myStringArray.SetValue("John",1);
	         int[] myIntArray = new int[2];
	         ArrayTypeMisMatchConst myArrayType = new ArrayTypeMisMatchConst();
	         myArrayType.CopyArray(myStringArray,myIntArray);
	      }
	      catch(ArrayTypeMismatchException e)
	      {
	         Console.WriteLine("The Exception Message is : " + e.Message);
	      }
	   }
	}

snippet processmodule_entrypoint

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_EntryPoint/processmodule_entrypoint.cs

	
	/* The following program demonstrates the use of 'EntryPointAddress' property of 
	   'ProcessModule' class. It creates a notepad, gets the 'MainModule' and 
	   all other modules of the process 'notepad.exe', displays 'EntryPointAddress'
	   for all the modules and the main module.
	*/
	using System;
	using System.Diagnostics;
	
	class MyProcessModuleClass
	{
	    public static void Main()
	    {
	        try
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo("notepad.exe");
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	                System.Threading.Thread.Sleep(1000);
	                ProcessModule myProcessModule;
	                ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;
	                Console.WriteLine("Entry point addresses of the modules "
	                    + "associated with 'notepad' are:");
	                for (int i = 0; i < myProcessModuleCollection.Count; i++)
	                {
	                    myProcessModule = myProcessModuleCollection[i];
	                    Console.WriteLine(myProcessModule.ModuleName + " : "
	                        + myProcessModule.EntryPointAddress);
	                }
	                myProcessModule = myProcess.MainModule;
	                Console.WriteLine("The process's main module's EntryPointAddress is: "
	                    + myProcessModule.EntryPointAddress);
	                myProcess.CloseMainWindow();
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine($"Exception : {e.Message}");
	        }
	    }
	}

snippet compilerresultsexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CompilerResultsExample/class1.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.Collections;
	
	namespace CompilerResults
	{
		class Class1
		{        
	        Class1()
	        {
	        }
	
	        public static void DisplayCompilerResults(System.CodeDom.Compiler.CompilerResults cr)
	        {
	            if( cr.Errors.Count > 0 )
	            {
	                for( int i=0; i<cr.Output.Count; i++ )                
	                    Console.WriteLine( cr.Output[i] );
	                for( int i=0; i<cr.Errors.Count; i++ )                
	                    Console.WriteLine( i.ToString() + ": " + cr.Errors[i].ToString() );
	                
	            }
	            else
	            {
	                Console.WriteLine( "Compiler returned with result code: " + cr.NativeCompilerReturnValue.ToString() );
	                Console.WriteLine( "Generated assembly name: " + cr.CompiledAssembly.FullName );
	                if( cr.PathToAssembly == null )
	                    Console.WriteLine( "The assembly has been generated in memory." );
	                else
	                    Console.WriteLine( "Path to assembly: " + cr.PathToAssembly );
	                
	                if( !cr.TempFiles.KeepFiles )                
	                    Console.WriteLine( "Temporary build files were deleted." );
	                else
	                {
	                    Console.WriteLine( "Temporary build files were not deleted." );
	                    IEnumerator enu = cr.TempFiles.GetEnumerator();                                        
	                    for( int i=0; enu.MoveNext(); i++ )                                          
	                        Console.WriteLine( "TempFile " + i.ToString() + ": " + (string)enu.Current );                  
	                }
	            }
	        }
		}
	}

snippet processmodule_tostring

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ToString/processmodule_tostring.cs

	
	/* The following program demonstrates the use of 'ToString' property of 
	   'ProcessModule' class. It creates a notepad, gets the 'MainModule' and 
	   all other modules of the process 'notepad.exe', displays 'ToString'
	   for all the modules and the main module.
	*/
	using System;
	using System.Diagnostics;
	
	class MyProcessModuleClass
	{
	    public static void Main()
	    {
	        try
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo("notepad.exe");
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	                System.Threading.Thread.Sleep(1000);
	                ProcessModule myProcessModule;
	                ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;
	                Console.WriteLine("ToString properties of the modules associated "
	                    + "with 'notepad' are:");
	                for (int i = 0; i < myProcessModuleCollection.Count; i++)
	                {
	                    myProcessModule = myProcessModuleCollection[i];
	                    Console.WriteLine(myProcessModuleCollection[i].ModuleName + " : "
	                        + myProcessModule.ToString());
	                }
	                myProcessModule = myProcess.MainModule;
	                Console.WriteLine("The process's main module is : " + myProcessModule.ToString());
	                myProcess.CloseMainWindow();
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine($"Exception : {e.Message}");
	        }
	    }
	}

snippet collections_arraylist_getenumerator

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/collections_arraylist_getenumerator/program.cs

	using System;
	using System.Collections;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	        ArrayList colors = new ArrayList();
	        colors.Add("red");
	        colors.Add("blue");
	        colors.Add("green");
	        colors.Add("yellow");
	        colors.Add("beige");
	        colors.Add("brown");
	        colors.Add("magenta");
	        colors.Add("purple");
	
	        IEnumerator e = colors.GetEnumerator();
	        while (e.MoveNext())
	        {
	            Object obj = e.Current;
	            Console.WriteLine(obj);
	        }
	
	        Console.WriteLine();
	
	        IEnumerator e2 = colors.GetEnumerator(2, 4);
	        while (e2.MoveNext())
	        {
	            Object obj = e2.Current;
	            Console.WriteLine(obj);
	        }
	    }
	}
	
	/* This code example produces
	   the following ouput:
	    red
	    blue
	    green
	    yellow
	    beige
	    brown
	    magenta
	    purple
	
	    green
	    yellow
	    beige
	    brown
	 */
snippet type_getfield

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/type_getfield.cs

	
	using System;
	using System.Reflection;
	
	public class MyFieldClassA
	{
	    public string Field = "A Field";
	}
	
	public class MyFieldClassB
	{
	    private string field = "B Field";
	    public string Field 
	    {
	        get
	        {
	            return field;
	        }
	        set
	        {
	            if (field!=value)
	            {
	                field=value;
	            }
	        }
	    }
	}
	
	public class MyFieldInfoClass
	{
	    public static void Main()
	    {
	        MyFieldClassB myFieldObjectB = new MyFieldClassB();
	        MyFieldClassA myFieldObjectA = new MyFieldClassA();
	
	        Type myTypeA = typeof(MyFieldClassA);
	        FieldInfo myFieldInfo = myTypeA.GetField("Field");
	
	        Type myTypeB = typeof(MyFieldClassB);
	        FieldInfo myFieldInfo1 = myTypeB.GetField("field", 
	            BindingFlags.NonPublic | BindingFlags.Instance);
	
	        Console.WriteLine("The value of the public field is: '{0}'", 
	            myFieldInfo.GetValue(myFieldObjectA));
	        Console.WriteLine("The value of the private field is: '{0}'", 
	            myFieldInfo1.GetValue(myFieldObjectB));
	    }
	}
	

snippet conceptual_observerdesign_howto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_observerdesign_howto/observer.cs

	using System;
	
	public class TemperatureReporter : IObserver<Temperature>
	{
	   private IDisposable unsubscriber;
	   private bool first = true;
	   private Temperature last;
	
	   public virtual void Subscribe(IObservable<Temperature> provider)
	   {
	      unsubscriber = provider.Subscribe(this);
	   }
	
	   public virtual void Unsubscribe()
	   {
	      unsubscriber.Dispose();
	   }
	
	   public virtual void OnCompleted() 
	   {
	      Console.WriteLine("Additional temperature data will not be transmitted.");
	   }
	
	   public virtual void OnError(Exception error)
	   {
	   }
	
	   public virtual void OnNext(Temperature value)
	   {
	      Console.WriteLine("The temperature is {0}°C at {1:g}", value.Degrees, value.Date);
	      if (first)
	      {
	         last = value;
	         first = false;
	      }
	      else
	      {
	         Console.WriteLine("   Change: {0}° in {1:g}", value.Degrees - last.Degrees,
	                                                       value.Date.ToUniversalTime() - last.Date.ToUniversalTime());
	      }
	   }
	}

snippet type_getproperty_types

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty_Types/type_getproperty_types.cs

	
	using System;
	using System.Reflection;
	
	class MyClass1
	{
	    String myMessage="Hello World.";
	    public string MyProperty1
	    {
	        get
	        {			
	            return myMessage;
	        }
	        set
	        {
	            myMessage =value;
	        }			
	    }
	}
	class TestClass
	{
	    static void Main()
	    {
	        try
	        {	
	            Type myType = typeof(MyClass1);
	            PropertyInfo myStringProperties1 = myType.GetProperty("MyProperty1",
	                typeof(string));
	            Console.WriteLine("The name of the first property of MyClass1 is {0}.", myStringProperties1.Name);
	            Console.WriteLine("The type of the first property of MyClass1 is {0}.", myStringProperties1.PropertyType);
	        }
	        catch(ArgumentNullException e)
	        {
	            Console.WriteLine("ArgumentNullException :"+e.Message);
	
	        }
	        catch(AmbiguousMatchException e)
	        {
	            Console.WriteLine("AmbiguousMatchException :"+e.Message);
	        }
	        catch(NullReferenceException e)
	        {
	            Console.WriteLine("Source : {0}" , e.Source);
	            Console.WriteLine("Message : {0}" , e.Message);
	        }
	    }
	}

snippet runtime_interopservices_marshal_ptrtostructure_sizeof

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_PtrToStructure_SizeOf/sample.cs

	using System;
	using System.Runtime.InteropServices;
	
	public struct Point
	{
	    public int x;
	    public int y;
	}
	
	class Example
	{
	
	    static void Main()
	    {
	
	        Point p;
	        p.x = 1;
	        p.y = 1;
	
	        Console.WriteLine("The value of first point is " + p.x + " and " + p.y + ".");
	
	        IntPtr pnt = Marshal.AllocHGlobal(Marshal.SizeOf(p));
	
	        try
	        {
	
	            Marshal.StructureToPtr(p, pnt, false);
	
	            Point anotherP;
	
	            anotherP = (Point)Marshal.PtrToStructure(pnt, typeof(Point));
	
	            Console.WriteLine("The value of new point is " + anotherP.x + " and " + anotherP.y + ".");
	
	        }
	        finally
	        {
	            Marshal.FreeHGlobal(pnt);
	        }
	        
	
	
	    }
	
	}
snippet fieldinfo_isprivate

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPrivate/fieldinfo_isprivate.cs

	using System;
	using System.Reflection;
	
	class MyClass
	{
	    private string myField;
	    public string[] myArray = new string[] {"New York", "New Jersey"};
	    MyClass()
	    {
	        myField = "Microsoft";
	    }
	    string GetField
	    {
	        get
	        {
	            return myField;
	        }
	    }
	}
	
	class FieldInfo_IsPrivate
	{
	    public static void Main()
	    {
	        try
	        {
	            Type myType = typeof(MyClass);
	
	            FieldInfo[] myFields = myType.GetFields(BindingFlags.NonPublic
	                |BindingFlags.Public
	                |BindingFlags.Instance);
	      
	            Console.WriteLine("\nDisplaying whether the fields of {0} are private or not:\n", myType);
	            for(int i = 0; i < myFields.Length; i++)
	            {
	                if(myFields[i].IsPrivate)
	                    Console.WriteLine("{0} is a private field.", myFields[i].Name);
	                else
	                    Console.WriteLine("{0} is not a private field.", myFields[i].Name);
	            }
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception : {0} " , e.Message);
	        }
	    }
	}
	

snippet conceptual_basicio_textfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_basicio_textfiles/source2.cs

	using System;
	using System.IO;
	
	class DirAppend
	{
	    public static void Main()
	    {
	        using (StreamWriter w = File.AppendText("log.txt"))
	        {
	            Log("Test1", w);
	            Log("Test2", w);
	        }
	        
	        using (StreamReader r = File.OpenText("log.txt"))
	        {
	            DumpLog(r);
	        }
	    }
	
	    public static void Log(string logMessage, TextWriter w)
	    {
	        w.Write("\r\nLog Entry : ");
	        w.WriteLine($"{DateTime.Now.ToLongTimeString()} {DateTime.Now.ToLongDateString()}");
	        w.WriteLine("  :");
	        w.WriteLine($"  :{logMessage}");
	        w.WriteLine ("-------------------------------");
	    }
	
	    public static void DumpLog(StreamReader r)
	    {
	        string line;
	        while ((line = r.ReadLine()) != null)
	        {
	            Console.WriteLine(line);
	        }
	    }
	}
	
	
	

snippet addinp2addincalcv2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP2AddInCalcV2/addincalcv2.cs

	using System;
	using System.Collections.Generic;
	using System.Text;
	using System.AddIn;
	using System.AddIn.Pipeline;
	using CalcAddInViews;
	namespace CalcAddIns
	{
	
	    [AddIn("Calculator Add-in",Version="2.0.0.0")]
	    [QualificationData("Isolation", "NewAppDomain")]
	    public class SampleV2AddIn : Calculator2
	    {
	        public override string Operations
	        {
	            get
	            {
	                return "+, -, *, /, **";
	            }
	        }
	
	        public override double Operate(string operation, double a, double b)
	        {
	            switch (operation)
	            {
	                case "+":
	                    return a + b;
	                case "-":
	                    return a - b;
	                case "*":
	                    return a * b;
	                case "/":
	                    return a / b;
	                case "**":
	                    return Math.Pow(a, b);
	                default:
	                    throw new InvalidOperationException("This add-in does not support: " + operation);
	            }
	        }
	
	    }
	}
snippet runtime_interopservices_marshal_copy_char

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_Copy_char/sample.cs

	using System;
	using System.Runtime.InteropServices;
	
	class Example
	{
	
	    static void Main()
	    {
	        char[] managedArray = new char[1000];
	        managedArray[0] = 'a';
	        managedArray[1] = 'b';
	        managedArray[2] = 'c';
	        managedArray[3] = 'd';
	        managedArray[999] = 'Z';
	
	
	
	        IntPtr pnt = Marshal.AllocHGlobal(size);
	
	        try
	        {
	            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);
	
	
	            char[] managedArray2 = new char[managedArray.Length];
	
	            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);
	            Console.WriteLine("Here is the roundtripped array: {0} {1} {2} {3} {4}",
	                               managedArray2[0], managedArray2[1], managedArray2[2], managedArray2[3],
	                               managedArray2[999]);
	
	            Console.WriteLine("The array was copied to unmanaged memory and back.");
	
	        }
	        finally
	        {
	            Marshal.FreeHGlobal(pnt);
	        }
	
	
	
	    }
	
	}
snippet conceptual_cancellation_callback

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_cancellation_callback/howtoexample1.cs

	using System;
	using System.Net;
	using System.Threading;
	using System.Threading.Tasks;
	
	class CancelWithCallback
	{
	   static void Main()
	   {
	      var cts = new CancellationTokenSource();
	      var token = cts.Token;
	      
	      Task t = Task.Run( () => {
	                    WebClient wc = new WebClient();
	
	                    wc.DownloadStringCompleted += (obj, e) => {
	                               if (!e.Cancelled) {
	                                  Console.WriteLine("The download has completed:\n");
	                                  Console.WriteLine(e.Result + "\n\nPress any key.");
	                               }
	                               else {
	                                  Console.WriteLine("The download was canceled.");
	                               }
	                    };
	
	                    if (!token.IsCancellationRequested) {
	                       using (CancellationTokenRegistration ctr = token.Register(() => wc.CancelAsync()))
	                       {
	                          Console.WriteLine("Starting request\n");
	                       }
	                    }
	               }, token);
	
	      Console.WriteLine("Press 'c' to cancel.\n");
	      char ch = Console.ReadKey().KeyChar;
	      Console.WriteLine();
	      if (ch == 'c')
	         cts.Cancel();
	
	      Console.WriteLine("Press any key to exit.");
	      Console.ReadKey();
	      cts.Dispose();
	   }
	}

snippet regex_match,_nextmatch,_groups,_captures

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regex_match,_nextmatch,_groups,_captures/snippet8.cs

	using System;
	using System.Text.RegularExpressions;
	
	class Example 
	{
	   static void Main() 
	   {
	      string text = "One car red car blue car";
	      string pat = @"(\w+)\s+(car)";
	
	      Regex r = new Regex(pat, RegexOptions.IgnoreCase);
	      
	      Match m = r.Match(text);
	      int matchCount = 0;
	      while (m.Success) 
	      {
	         Console.WriteLine("Match"+ (++matchCount));
	         for (int i = 1; i <= 2; i++) 
	         {
	            Group g = m.Groups[i];
	            Console.WriteLine("Group"+i+"='" + g + "'");
	            CaptureCollection cc = g.Captures;
	            for (int j = 0; j < cc.Count; j++) 
	            {
	               Capture c = cc[j];
	               System.Console.WriteLine("Capture"+j+"='" + c + "', Position="+c.Index);
	            }
	         }
	         m = m.NextMatch();
	      }
	   }
	}
	

snippet datetime_tolocaltime_touniversaltime

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_ToLocalTime_ToUniversalTime/class1.cs

	using System;
	
	class Example
	{
		static void Main()
		{
			DateTime localDateTime, univDateTime;
			
			Console.WriteLine("Enter a date and time.");
			string strDateTime = Console.ReadLine();
	
			try {
				localDateTime = DateTime.Parse(strDateTime);
	    		univDateTime = localDateTime.ToUniversalTime();
	    
	    		Console.WriteLine("{0} local time is {1} universal time.",
	   								localDateTime,
	    								univDateTime); 
			}
			catch (FormatException) {
				Console.WriteLine("Invalid format.");
				return;
			}
	
			Console.WriteLine("Enter a date and time in universal time.");
			strDateTime = Console.ReadLine();
	
			try {
				univDateTime = DateTime.Parse(strDateTime);
	    		localDateTime = univDateTime.ToLocalTime();
	    
	    		Console.WriteLine("{0} universal time is {1} local time.",
	    								 univDateTime,
	    								 localDateTime); 
			}
			catch (FormatException) {
				Console.WriteLine("Invalid format.");
				return;
			}
	
		}
	}
	

snippet regex_words

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Regex_Words/words.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Test
	{
	
	    public static void Main ()
	    {
	
	        Regex rx = new Regex(@"\b(?<word>\w+)\s+(\k<word>)\b",
	          RegexOptions.Compiled | RegexOptions.IgnoreCase);
	
	        string text = "The the quick brown fox  fox jumps over the lazy dog dog.";
	        
	        MatchCollection matches = rx.Matches(text);
	
	        Console.WriteLine("{0} matches found in:\n   {1}", 
	                          matches.Count, 
	                          text);
	
	        foreach (Match match in matches)
	        {
	            GroupCollection groups = match.Groups;
	            Console.WriteLine("'{0}' repeated at positions {1} and {2}",  
	                              groups["word"].Value, 
	                              groups[0].Index, 
	                              groups[1].Index);
	        }
	        
	    }
		
	}

snippet timeoutexception_class

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TimeoutException_class/to.cs

	
	using System;
	using System.IO.Ports;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string input;
	    try 
	        {
	        SerialPort sp = new SerialPort("COM1", 
	                        4800, Parity.Odd, 8, StopBits.One); 
	        sp.ReadTimeout = 2000;
	        sp.Open();
	
	        input = sp.ReadLine();
	
	        sp.Close();
	
	        Console.WriteLine(input);
	        }
	
	    catch (TimeoutException e)
	        {
	        Console.WriteLine(e);
	        }
	    }
	}
	/*
	This example produces the following results:
	
	(Data received at the serial port is echoed to the console if the 
	read operation completes successfully before the specified timeout period 
	expires. Otherwise, a timeout exception like the following is thrown.)
	
	System.TimeoutException: The operation has timed-out.
	   at System.IO.Ports.SerialStream.ReadByte(Int32 timeout)
	   at System.IO.Ports.SerialPort.ReadOneChar(Int32 timeout)
	   at System.IO.Ports.SerialPort.ReadTo(String value)
	   at System.IO.Ports.SerialPort.ReadLine()
	   at Sample.Main()
	*/
snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/currency1.cs

	using System;
	using System.Globalization;
	using System.IO;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
	      Decimal value = 16039.47m;
	      Console.WriteLine("Current Culture: {0}", CultureInfo.CurrentCulture.DisplayName);
	      Console.WriteLine("Currency Value: {0:C2}", value); 
	     
	      StreamWriter sw = new StreamWriter("currency.dat");
	      sw.Write(value.ToString("C2"));
	      sw.Close();
	      
	      StreamReader sr = new StreamReader("currency.dat");
	      string currencyData = sr.ReadToEnd();
	      sr.Close();
	      
	      Decimal restoredValue;
	      if (Decimal.TryParse(currencyData, out restoredValue))
	         Console.WriteLine(restoredValue.ToString("C2"));
	      else
	         Console.WriteLine("ERROR: Unable to parse '{0}'", currencyData);
	      Console.WriteLine();
	                                             
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-GB");
	      Console.WriteLine("Current Culture: {0}", 
	                        Thread.CurrentThread.CurrentCulture.DisplayName); 
	      if (Decimal.TryParse(currencyData, NumberStyles.Currency, null, out restoredValue))
	         Console.WriteLine(restoredValue.ToString("C2"));
	      else
	         Console.WriteLine("ERROR: Unable to parse '{0}'", currencyData);
	      Console.WriteLine();
	   }
	}

snippet cocontravarianceinclrgenerici2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cocontravarianceinclrgenerici2/example.cs

	using System;
	using System.Collections.Generic;
	
	abstract class Shape
	{
	    public virtual double Area { get { return 0; }}
	}
	
	class Circle : Shape
	{
	    private double r;
	    public Circle(double radius) { r = radius; }
	    public double Radius { get { return r; }}
	    public override double Area { get { return Math.PI * r * r; }}
	}
	
	class ShapeAreaComparer : System.Collections.Generic.IComparer<Shape>
	{
	    int IComparer<Shape>.Compare(Shape a, Shape b) 
	    { 
	        if (a == null) return b == null ? 0 : -1;
	        return b == null ? 1 : a.Area.CompareTo(b.Area);
	    }
	}
	
	class Program
	{
	    static void Main()
	    {
	        SortedSet<Circle> circlesByArea = 
	            new SortedSet<Circle>(new ShapeAreaComparer()) 
	                { new Circle(7.2), new Circle(100), null, new Circle(.01) };
	
	        foreach (Circle c in circlesByArea)
	        {
	            Console.WriteLine(c == null ? "null" : "Circle with area " + c.Area);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	null
	Circle with area 0.000314159265358979
	Circle with area 162.860163162095
	Circle with area 31415.9265358979
	 */

snippet processmodule_fileversioninfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_FileVersionInfo/processmodule_fileversioninfo.cs

	
	/* The following program demonstrates the use of 'FileVersionInfo' property of 
	   'ProcessModule' class. It creates a notepad, gets the 'MainModule' and 
	   all other modules of the process 'notepad.exe', displays 'FileVersionInfo'
	   for all the modules and the main module.
	*/
	using System;
	using System.Diagnostics;
	
	class MyProcessModuleClass
	{
	    public static void Main()
	    {
	        try
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo("notepad.exe");
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	                System.Threading.Thread.Sleep(1000);
	                ProcessModule myProcessModule;
	                ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;
	                Console.WriteLine("'FileversionInfo' of the modules associated "
	                    + "with 'notepad' are:");
	                for (int i = 0; i < myProcessModuleCollection.Count; i++)
	                {
	                    myProcessModule = myProcessModuleCollection[i];
	                    Console.WriteLine(myProcessModule.ModuleName + " : "
	                        + myProcessModule.FileVersionInfo);
	                }
	                myProcessModule = myProcess.MainModule;
	                Console.WriteLine("The process's main module's FileVersionInfo is: "
	                    + myProcessModule.FileVersionInfo);
	                myProcess.CloseMainWindow();
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine($"Exception : {e.Message}");
	        }
	    }
	}

snippet processmodule_filename

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_FileName/processmodule_filename.cs

	
	/* The following program demonstrates the use of 'FileName' property of 
	   'ProcessModule' class. It creates a notepad, gets the 'MainModule' and 
	   all other modules of the process 'notepad.exe', displays 'FileName'
	   for all the modules and the main module.
	*/
	using System;
	using System.Diagnostics;
	
	class MyProcessModuleClass
	{
	    public static void Main()
	    {
	        try
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo("notepad.exe");
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	                System.Threading.Thread.Sleep(1000);
	                ProcessModule myProcessModule;
	                ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;
	                Console.WriteLine("File names of the modules associated "
	                    + "with 'notepad' are:");
	                for (int i = 0; i < myProcessModuleCollection.Count; i++)
	                {
	                    myProcessModule = myProcessModuleCollection[i];
	                    Console.WriteLine(myProcessModule.ModuleName + " : "
	                        + myProcessModule.FileName);
	                }
	                myProcessModule = myProcess.MainModule;
	                Console.WriteLine("The process's main module's FileName is: "
	                    + myProcessModule.FileName);
	                myProcess.CloseMainWindow();
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine($"Exception : {e.Message}");
	        }
	    }
	}

snippet processmodule_baseaddress

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_BaseAddress/processmodule_baseaddress.cs

	
	/* The following program demonstrates the use of 'BaseAddress' property of 
	   'ProcessModule' class. It creates a notepad, gets the 'MainModule' and 
	   all other modules of the process 'notepad.exe', displays 'BaseAddress'
	   for all the modules and the main module.
	*/
	using System;
	using System.Diagnostics;
	
	class MyProcessModuleClass
	{
	    public static void Main()
	    {
	        try
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo("notepad.exe");
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	                System.Threading.Thread.Sleep(1000);
	                ProcessModule myProcessModule;
	                ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;
	                Console.WriteLine("Base addresses of the modules associated "
	                    + "with 'notepad' are:");
	                for (int i = 0; i < myProcessModuleCollection.Count; i++)
	                {
	                    myProcessModule = myProcessModuleCollection[i];
	                    Console.WriteLine(myProcessModule.ModuleName + " : "
	                        + myProcessModule.BaseAddress);
	                }
	                myProcessModule = myProcess.MainModule;
	                Console.WriteLine("The process's main module's base address is: "
	                    + myProcessModule.BaseAddress);
	                myProcess.CloseMainWindow();
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine($"Exception : {e.Message}");
	        }
	    }
	}

snippet processmodule_modulememorysize

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ModuleMemorySize/processmodule_modulememorysize.cs

	
	/* The following program demonstrates the use of 'ModuleMemorySize' property of 
	   'ProcessModule' class. It creates a notepad, gets the 'MainModule' and 
	   all other modules of the process 'notepad.exe', displays 'ModuleMemorySize'
	   for all the modules and the main module.
	*/
	using System;
	using System.Diagnostics;
	
	class MyProcessModuleClass
	{
	    public static void Main()
	    {
	        try
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo("notepad.exe");
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	                System.Threading.Thread.Sleep(1000);
	                ProcessModule myProcessModule;
	                ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;
	                Console.WriteLine("Module memory sizes of the modules associated "
	                    + "with 'notepad' are:");
	                for (int i = 0; i < myProcessModuleCollection.Count; i++)
	                {
	                    myProcessModule = myProcessModuleCollection[i];
	                    Console.WriteLine(myProcessModule.ModuleName + " : "
	                        + myProcessModule.ModuleMemorySize);
	                }
	                myProcessModule = myProcess.MainModule;
	                Console.WriteLine("The process's main module's ModuleMemorySize is: "
	                    + myProcessModule.ModuleMemorySize);
	                myProcess.CloseMainWindow();
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine($"Exception : {e.Message}");
	        }
	    }
	}

snippet thread_getsettrysetapartmentstate

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Thread_GetSetTrySetApartmentState/source.cs

	using System;
	using System.Threading;
	
	class Example
	{
	    public static void Main()
	    {
	        Thread t = new Thread(ThreadProc);
	        Console.WriteLine("Before setting apartment state: {0}", 
	            t.GetApartmentState());
	
	        t.SetApartmentState(ApartmentState.STA);
	        Console.WriteLine("After setting apartment state: {0}", 
	            t.GetApartmentState());
	
	        bool result = t.TrySetApartmentState(ApartmentState.MTA);
	        Console.WriteLine("Try to change state: {0}", result);
	
	        t.Start();
	
	        Thread.Sleep(500);
	
	        try
	        {
	            t.TrySetApartmentState(ApartmentState.STA);
	        }
	        catch (ThreadStateException)
	        {
	            Console.WriteLine("ThreadStateException occurs " +
	                "if apartment state is set after starting thread.");
	        }
	
	        t.Join();
	    }
	
	    public static void ThreadProc()
	    {
	        Thread.Sleep(2000);
	    }
	}
	
	/* This code example produces the following output:
	
	Before setting apartment state: Unknown
	After setting apartment state: STA
	Try to change state: False
	ThreadStateException occurs if apartment state is set after starting thread.
	 */
	
	
	

snippet microsoft_visualstudio_data_core_ivsdatasourcespecializer

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSourceSpecializer/IVsDataSourceSpecializer.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Framework;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	
	internal class MySourceSpecializer : DataSourceSpecializer
	{
	    private static readonly Guid Source1Guid =
	        new Guid("A871863D-7D71-4e49-A8C5-4E959DDE7AF7");
	    private static readonly Guid Source2Guid =
	        new Guid("D79D7D55-A266-4db9-92A9-3FDBA5D6A722");
	
	    public override Guid DeriveSource(string connectionString)
	    {
	        if (connectionString.StartsWith("Source1"))
	        {
	            return Source1Guid;
	        }
	        if (connectionString.StartsWith("Source2"))
	        {
	            return Source2Guid;
	        }
	        return base.DeriveSource(connectionString);
	    }
	
	    public override object CreateObject(Guid source, Type objType)
	    {
	        if (objType == null)
	        {
	            throw new ArgumentNullException("objType");
	        }
	        if (objType == typeof(IVsDataConnectionProperties))
	        {
	            if (source == Source1Guid)
	            {
	                return new MySource1ConnectionProperties();
	            }
	            if (source == Source2Guid)
	            {
	                return new MySource2ConnectionProperties();
	            }
	        }
	        return base.CreateObject(source, objType);
	    }
	}
	
	internal class MySource1ConnectionProperties : DataConnectionProperties
	{
	}
	
	internal class MySource2ConnectionProperties : DataConnectionProperties
	{
	}
snippet finfo_class

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_Class/finfo_class.cs

	using System;
	using System.IO;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = Path.GetTempFileName();
	        FileInfo fi1 = new FileInfo(path);
	
	        using (StreamWriter sw = fi1.CreateText()) 
	        {
	            sw.WriteLine("Hello");
	            sw.WriteLine("And");
	            sw.WriteLine("Welcome");
	        }	
	
	        using (StreamReader sr = fi1.OpenText()) 
	        {
	            string s = "";
	            while ((s = sr.ReadLine()) != null) 
	            {
	                Console.WriteLine(s);
	            }
	        }
	
	        try 
	        {
	            string path2 = Path.GetTempFileName();
	            FileInfo fi2 = new FileInfo(path2);
	
	            fi2.Delete();
	
	            fi1.CopyTo(path2);
	            Console.WriteLine("{0} was copied to {1}.", path, path2);
	
	            fi2.Delete();
	            Console.WriteLine("{0} was successfully deleted.", path2);
	
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet finfo_open1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_Open1/finfo_open1.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\MyTest.txt";
	        FileInfo fi = new FileInfo(path);
	
	        if (!fi.Exists) 
	        {
	            using (FileStream fs = fi.Create()) 
	            {
	                Byte[] info = new UTF8Encoding(true).GetBytes("This is some text in the file.");
	                fs.Write(info, 0, info.Length);
	            }
	        }
	
	        using (FileStream fs = fi.Open(FileMode.Open)) 
	        {
	            byte[] b = new byte[1024];
	            UTF8Encoding temp = new UTF8Encoding(true);
	            while (fs.Read(b,0,b.Length) > 0) 
	            {
	                Console.WriteLine(temp.GetString(b));
	            }
	        }
	    }
	}

snippet process_standarderror

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Process_StandardError/source.cs

	/*
	The following example demonstrates property 'StandardError' of
	'Process' class.
	
	It starts a process(net.exe) which writes an error message on to the standard
	error when a bad network path is given.This program gets 'StandardError' of
	net.exe process and reads output from its stream reader.*/
	
	using System;
	using System.Diagnostics;
	using System.ComponentModel;
	using System.IO;
	
	namespace Process_StandardError
	{
	    class Class1
	    {
	        static void Main(string[] args)
	        {
	            if (args.Length < 1)
	            {
	                Console.WriteLine("\nThis requires a machine name as a parameter which is not on the network.");
	                Console.WriteLine("\nUsage:");
	                Console.WriteLine("Process_StandardError <\\\\machine name>");
	            }
	            else
	            {
	                GetStandardError(args);
	            }
	
	            return;
	        }
	
	        public static void GetStandardError(string[] args)
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo("net ", "use " + args[0]);
	
	                myProcessStartInfo.UseShellExecute = false;
	                myProcessStartInfo.RedirectStandardError = true;
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	
	                StreamReader myStreamReader = myProcess.StandardError;
	                Console.WriteLine(myStreamReader.ReadLine());
	            }
	        }
	    }
	}

snippet type_getmembers1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers1/type_getmembers1.cs

	
	/*
	  This program demonstrates GetMembers() method of System.Type Class.
	  Get the members (properties, methods, fields, events, and so on)
	  of the class 'MyClass' and displays the same to the console.     
	*/
	
	using System;
	using System.Reflection;
	using System.Security; 
	
	class MyClass
	{
	   public int myInt = 0;
	   public string myString = null;
	
	   public MyClass()
	   {
	   }
	   public void Myfunction()
	   {
	   }
	}
	
	class Type_GetMembers
	{
	   public static void Main()
	   {
	      try
	      {
	         MyClass myObject = new MyClass();
	         MemberInfo[] myMemberInfo; 
	
	         Type myType = myObject.GetType(); 
	        
	         myMemberInfo = myType.GetMembers();
	    
	         Console.WriteLine( "\nThe members of class '{0}' are :\n", myType); 
	         for (int i =0 ; i < myMemberInfo.Length ; i++)
	         {
	            Console.WriteLine( "'{0}' is a {1}", myMemberInfo[i].Name, myMemberInfo[i].MemberType);
	         }
	      }
	      catch(SecurityException e)
	      {
	         Console.WriteLine("Exception : " + e.Message ); 
	      }
	   }
	}
snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/array3.cs

	
	using System;
	using System.Numerics;
	
	[assembly: CLSCompliant(true)]
	
	public class Numbers
	{
	   public static byte[] GetSquares(byte[] numbers)
	   {
	      byte[] numbersOut = new byte[numbers.Length];
	      for (int ctr = 0; ctr < numbers.Length; ctr++) {
	         int square = ((int) numbers[ctr]) * ((int) numbers[ctr]); 
	         if (square <= Byte.MaxValue)
	            numbersOut[ctr] = (byte) square;
	         else
	            numbersOut[ctr] = Byte.MaxValue;
	
	      }
	      return numbersOut;
	   }
	
	   public static BigInteger[] GetSquares(BigInteger[] numbers)
	   {
	      BigInteger[] numbersOut = new BigInteger[numbers.Length];
	      for (int ctr = 0; ctr < numbers.Length; ctr++)
	         numbersOut[ctr] = numbers[ctr] * numbers[ctr]; 
	
	      return numbersOut;
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	       Byte[] bytes = Numbers.GetSquares( new Byte[] { (byte) 3, (byte) 10, 
	                                                       (byte) 13, (byte) 20 } ); 
	       foreach (var byt in bytes)
	          Console.Write("{0}  ", byt);
	
	       Console.WriteLine();
	       BigInteger[] bigs = new BigInteger[] { 1034, 1058, 100, 12399 };
	       foreach (var bigSquare in Numbers.GetSquares(bigs))
	          Console.Write("{0:N0}  ", bigSquare);
	
	       Console.WriteLine();
	   }
	}
	

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/monthname2.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("fr-FR");      
	      
	      DateTime midYear = new DateTime(2013, 7, 1);
	      Console.WriteLine("{0:d} is a {1}.", midYear, DateUtilities.GetDayName(midYear));   
	      Console.WriteLine("{0:d} is a {1}.", midYear, DateUtilities.GetDayName((int) midYear.DayOfWeek));
	      Console.WriteLine("{0:d} is in {1}.", midYear, DateUtilities.GetMonthName(midYear));   
	      Console.WriteLine("{0:d} is in {1}.", midYear, DateUtilities.GetMonthName(midYear.Month));
	   }
	} 
	
	public static class DateUtilities
	{
	   public static string GetDayName(int dayOfWeek) 
	   {
	      if (dayOfWeek < 0 | dayOfWeek > DateTimeFormatInfo.CurrentInfo.DayNames.Length)
	         return String.Empty;
	      else
	         return DateTimeFormatInfo.CurrentInfo.DayNames[dayOfWeek];
	   }
	   
	   public static string GetDayName(DateTime date)
	   { 
	      return date.ToString("dddd");
	   }
	   
	   public static string GetMonthName(int month)
	   { 
	      if (month < 1 | month > DateTimeFormatInfo.CurrentInfo.MonthNames.Length - 1)
	         return String.Empty;
	      else
	         return DateTimeFormatInfo.CurrentInfo.MonthNames[month - 1];
	   }
	   
	   public static string GetMonthName(DateTime date)
	   { 
	      return date.ToString("MMMM");   
	   }
	}

snippet codetypeofexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeTypeOfExample/codetypeofexample.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	
	namespace CodeDomSamples
	{
	    public class CodeTypeOfExample
	    {
	        public static void Main()
	        {
	            ShowTypeReference();
	            Console.WriteLine();
	            ShowTypeReferenceExpression();
	        }
	
	        public static void ShowTypeReference()
	        {
	            CodeTypeReference typeRef1 = new CodeTypeReference("System.DateTime");
	
	            CodeTypeOfExpression typeof1 = new CodeTypeOfExpression(typeRef1);
	
	            CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
	
	            provider.GenerateCodeFromExpression(typeof1, Console.Out, new CodeGeneratorOptions());
	        }
	
	        public static void ShowTypeReferenceExpression()
	        {
	            CodeTypeReferenceExpression typeRef1 = new CodeTypeReferenceExpression("System.DateTime");
	
	            CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
	
	            provider.GenerateCodeFromExpression(typeRef1, Console.Out, new CodeGeneratorOptions());
	
	
	        }
	    }
	}
snippet type_getinterface

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/type_getinterface.cs

	/*
	   System.Type.GetInterface(String)
	   System.Type.GetInterface(String, bool)
	   System.Type.GetInterfaceMap
	
	   The following program get the type of Hashtable class and searches for the interface
	   with the specified name. Then prints the method name of that interface.
	*/
	
	using System;
	using System.Reflection;
	using System.Collections;
	
	class MyInterfaceClass
	{
	    public static void Main()
	    {
	        Hashtable hashtableObj = new Hashtable();
	        Type objType = hashtableObj.GetType();
	        MethodInfo[] arrayMethodInfo;
	        MemberInfo[] arrayMemberInfo;
	        try
	        {   
	            arrayMethodInfo =objType.GetInterface("IDeserializationCallback").GetMethods();
	            Console.WriteLine ("\nMethods of 'IDeserializationCallback' Interface :");
	            foreach(MethodInfo methodInfo in arrayMethodInfo)
	                Console.WriteLine (methodInfo); 
	
	            Console.WriteLine ("\nMethods of 'IEnumerable' Interface");
	            arrayMethodInfo = objType.GetInterface("ienumerable",true).GetMethods();
	            foreach(MethodInfo methodInfo in arrayMethodInfo)
	               Console.WriteLine (methodInfo); 
	           
	            InterfaceMapping interfaceMappingOb = objType.GetInterfaceMap(typeof(IDictionary));
	            arrayMemberInfo = interfaceMappingObj.InterfaceMethods;
	            Console.WriteLine ("\nHashtable class Implements the following IDictionary Interface methods :");
	            foreach(MemberInfo memberInfo in arrayMemberInfo)
	               Console.WriteLine (memberInfo); 
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine ("Exception : " + e.ToString());            
	        }                 
	    }
	}

snippet xmldsig_signing

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG_Signing/source.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	using System.Xml;
	
	
	public class XMLdsigsample1 {
	
	static void Main(String[] args)
	{
	     XmlDocument document = new XmlDocument();
	     XmlNode  node = document.CreateNode(XmlNodeType.Element, "", "MyElement", "samples");
	     node.InnerText = "This is some text";
	     document.AppendChild(node);
	     Console.Error.WriteLine("Data to sign:\n" + document.OuterXml + "\n");
	 
	     SignedXml signedXml = new SignedXml();
	     RSA key = RSA.Create();
	     signedXml.SigningKey = key;
	 
	     DataObject dataObject = new DataObject();
	     dataObject.Data = document.ChildNodes;
	     dataObject.Id = "MyObjectId";
	
	     signedXml.AddObject(dataObject);
	 
	     Reference reference = new Reference();
	     reference.Uri = "#MyObjectId";
	 
	     signedXml.AddReference(reference);
	
	     KeyInfo keyInfo = new KeyInfo();
	     keyInfo.AddClause(new RSAKeyValue(key));
	     signedXml.KeyInfo = keyInfo;
	
	     signedXml.ComputeSignature();
	
	     XmlElement xmlSignature = signedXml.GetXml();
	     Console.WriteLine(xmlSignature.OuterXml);
	}
	
	}
snippet memorymappedfiles_memorymappedfile_createfromfile

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/memorymappedfiles_memorymappedfile_createfromfile/program.cs

	using System;
	using System.IO;
	using System.IO.MemoryMappedFiles;
	using System.Runtime.InteropServices;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	
	        using (var mmf = MemoryMappedFile.CreateFromFile(@"c:\ExtremelyLargeImage.data", FileMode.Open,"ImgA"))
	        {
	            using (var accessor = mmf.CreateViewAccessor(offset, length))
	            {
	                int colorSize = Marshal.SizeOf(typeof(MyColor));
	                MyColor color;
	
	                for (long i = 0; i < length; i += colorSize)
	                {
	                    accessor.Read(i, out color);
	                    color.Brighten(10);
	                    accessor.Write(i, ref color);
	                }
	            }
	        }
	    }
	}
	
	public struct MyColor
	{
	    public short Red;
	    public short Green;
	    public short Blue;
	    public short Alpha;
	
	    public void Brighten(short value)
	    {
	        Red = (short)Math.Min(short.MaxValue, (int)Red + value);
	        Green = (short)Math.Min(short.MaxValue, (int)Green + value);
	        Blue = (short)Math.Min(short.MaxValue, (int)Blue + value);
	        Alpha = (short)Math.Min(short.MaxValue, (int)Alpha + value);
	    }
	}

snippet definedynamicassemblywithattributes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DefineDynamicAssemblyWithAttributes/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security;
	
	class Example
	{
	    static void Main()
	    {
	        ConstructorInfo transparentCtor = 
	            typeof(SecurityTransparentAttribute).GetConstructor(
	                Type.EmptyTypes);
	        CustomAttributeBuilder transparent = new CustomAttributeBuilder(
	            transparentCtor,
	            new Object[] {} );
	      
	        AssemblyName aName = new AssemblyName("EmittedAssembly");
	        AssemblyBuilder ab = AppDomain.CurrentDomain.DefineDynamicAssembly( 
	            aName, 
	            AssemblyBuilderAccess.Run,
	            new CustomAttributeBuilder[] { transparent } );
	
	        ModuleBuilder mb = ab.DefineDynamicModule( aName.Name );
	        TypeBuilder tb = mb.DefineType( 
	            "MyDynamicType", 
	            TypeAttributes.Public );
	        tb.CreateType();
	
	        Console.WriteLine("{0}\nAssembly attributes:", ab);
	        foreach (Attribute attr in ab.GetCustomAttributes(true))
	        {
	            Console.WriteLine("\t{0}", attr);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	EmittedAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
	Assembly attributes:
	        System.Security.SecurityTransparentAttribute
	 */

snippet typeloadexception_constructor3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeLoadException_Constructor3/typeloadexception_constructor3.cs

	
	/* This program demonstrates the 'TypeLoadException(string,Exception)'
	   constructor of 'TypeLoadException' class. It attempts to call a 
	   non-existent method located in NonExistentDLL.dll, which will 
	   throw an exception. A new exception is thrown with this exception
	   as an inner exception.*/
	
	
	using System;
	using System.Runtime.InteropServices;
	
	public class TypeLoadException_Constructor3
	{
	   public static void Main() 
	   {
	      Console.WriteLine("Calling a method in a non-existent DLL which triggers a TypeLoadException.");
	      try 
	      {
	         TypeLoadExceptionDemoClass.GenerateException();
	      }  
	      catch (TypeLoadException e)
	      {
	         Console.WriteLine ("TypeLoadException: \n\tError Message = " + e.Message);
	         Console.WriteLine ("TypeLoadException: \n\tInnerException Message = " + e.InnerException.Message );
	      }  
	      catch (Exception e)
	      {
	         Console.WriteLine ("Exception: \n\tError Message = " + e.Message);
	      }
	   }
	}
	
	class TypeLoadExceptionDemoClass
	{ 
	   [DllImport("NonExistentDLL.DLL", EntryPoint="MethodNotExists")]
	   public static extern void NonExistentMethod();
	
	   public static void GenerateException() 
	   {
	      try 
	      {
	         NonExistentMethod();
	      }
	      catch (TypeLoadException e) 
	      {
	         throw new TypeLoadException("This exception was raised due to a call to an invalid method.", e);
	      }
	   }
	}

snippet installer_afterrollback

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_AfterRollback/installer_afterrollback.cs

	
	/* The following program demonstrates the 'AfterRollback' event of the
	   'Installer' class. It overrides the Install method, explicitly throws
	   arguement exception so that 'Rollback' method is called. When the
	   'RollBack' is complete, 'AfterRollback' event occurs and a message is
	   displayed when the event occurs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstallerClass: Installer
	{
	
	   public MyInstallerClass() :base()
	   {
	      this.AfterRollback += new InstallEventHandler(MyInstaller_AfterRollBack);
	   }
	   private void MyInstaller_AfterRollBack(object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("AfterRollBack Event occurred.");
	   }
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      throw new ArgumentException("Arg Exception");
	   }
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	   public static void Main()
	   {
	      Console.WriteLine("Usage : installutil.exe Installer_AfterRollback.exe ");
	   }
	}

snippet modulebuilder_defineresource1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_DefineResource1/modulebuilder_defineresource1.cs

	
	/*
	The following example demonstrates the 'DefineResource(String,String)' method
	of 'ModuleBuilder' class.
	A dynamic assembly with a module in it is created in 'CodeGenerator' class.
	Then a managed resource is defined in the module using the 'DefineResource' 
	method.
	*/
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Resources;
	
	   public class CodeGenerator
	   {
	      public CodeGenerator()
	      {
	         AppDomain currentDomain = AppDomain.CurrentDomain;
	
	         AssemblyName myAssemblyName = new AssemblyName();
	         myAssemblyName.Name = "TempAssembly";
	
	         AssemblyBuilder myAssemblyBuilder = 
	            currentDomain.DefineDynamicAssembly
	                        (myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	         ModuleBuilder myModuleBuilder = 
	            myAssemblyBuilder.DefineDynamicModule("TempModule",
	                                       "TempModule.netmodule",true);
	         IResourceWriter myResourceWriter = 
	               myModuleBuilder.DefineResource("MyResource.resource","Description");
	         myResourceWriter.AddResource("String 1", "First String");
	         myResourceWriter.AddResource("String 2", "Second String");
	         myResourceWriter.AddResource("String 3", "Third String");
	         myAssemblyBuilder.Save("MyAssembly.dll");
	
	      }
	   }
	
	   public class CallerClass
	   {
	      public static void Main()
	      {
	         CodeGenerator myGenerator = new CodeGenerator();
	         Console.WriteLine("A resource named 'MyResource.resource'"
	                +" has been created and can be viewed  in the 'MyAssembly.dll'");
	      }
	   }
snippet modulebuilder_defineresource2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_DefineResource2/modulebuilder_defineresource2.cs

	/*
	The following example demonstrates the 'DefineResource(String,String,ResourceAttributes)' 
	method of 'ModuleBuilder' class.
	A dynamic assembly with a module in it is created in 'CodeGenerator' class.
	Then a managed resource is defined in the module using the 'DefineResource' method.
	*/
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Resources;
	
	   public class CodeGenerator
	   {
	      public CodeGenerator()
	      {
	         AppDomain currentDomain = AppDomain.CurrentDomain;
	
	         AssemblyName myAssemblyName = new AssemblyName();
	         myAssemblyName.Name = "TempAssembly";
	
	         AssemblyBuilder myAssemblyBuilder = 
	            currentDomain.DefineDynamicAssembly
	                        (myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	         ModuleBuilder myModuleBuilder = 
	            myAssemblyBuilder.DefineDynamicModule("TempModule",
	                                              "TempModule.netmodule",true);
	         IResourceWriter writer = 
	               myModuleBuilder.DefineResource("MyResource.resource",
	                            "Description",ResourceAttributes.Public);
	         writer.AddResource("String 1", "First String");
	         writer.AddResource("String 2", "Second String");
	         writer.AddResource("String 3", "Third String");
	         myAssemblyBuilder.Save("MyAssembly.dll");
	
	      }
	   }
	
	   public class CallerClass
	   {
	      public static void Main()
	      {
	         CodeGenerator myGenerator = new CodeGenerator();
	         Console.WriteLine("A resource named 'MyResource.resource'"
	                +" has been created and can be viewed  in the 'MyAssembly.dll'");
	      }
	   }
snippet getcustomattributes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/ca5.cs

	using System;
	using System.Reflection;
	using System.ComponentModel;
	
	namespace CustAttrs5CS {
	    public class AClass {
	        public void ParamArrayAndDesc(
	            [Description("This argument is a ParamArray")]
	            params int[] args)
	        {}
	    }
	
	    class DemoClass {
	        static void Main(string[] args) {
	            Type clsType = typeof(AClass);
	            MethodInfo mInfo = clsType.GetMethod("ParamArrayAndDesc");
	            if (mInfo != null) {
	                ParameterInfo[] pInfo = mInfo.GetParameters();
	                if (pInfo != null) {
	                    foreach(Attribute attr in 
	                        Attribute.GetCustomAttributes(pInfo[0])) {
	                        if (attr.GetType() == typeof(ParamArrayAttribute))
	                            Console.WriteLine("Parameter {0} for method {1} " +
	                                "has the ParamArray attribute.",
	                                pInfo[0].Name, mInfo.Name);
	                        else if (attr.GetType() == 
	                            typeof(DescriptionAttribute)) {
	                            Console.WriteLine("Parameter {0} for method {1} " +
	                                "has a description attribute.",
	                                pInfo[0].Name, mInfo.Name);
	                            Console.WriteLine("The description is: \"{0}\"",
	                                ((DescriptionAttribute)attr).Description);
	                        }
	                    }
	                }
	            }
	        }
	    }
	}
	
	/*
	 * Output:
	 * Parameter args for method ParamArrayAndDesc has a description attribute.
	 * The description is: "This argument is a ParamArray"
	 * Parameter args for method ParamArrayAndDesc has the ParamArray attribute.
	 */
snippet console_setwindowsize

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_setwindowsize/sws.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    int origWidth, width;  
	    int origHeight, height;
	    string m1 = "The current window width is {0}, and the " +
	                "current window height is {1}.";
	    string m2 = "The new window width is {0}, and the new " +
	                "window height is {1}.";
	    string m4 = "  (Press any key to continue...)";
	    origWidth  = Console.WindowWidth;
	    origHeight = Console.WindowHeight;
	    Console.WriteLine(m1, Console.WindowWidth,
	                          Console.WindowHeight);
	    Console.WriteLine(m4);
	    Console.ReadKey(true); 
	    width  = origWidth/2;
	    height = origHeight/2;
	    Console.SetWindowSize(width, height);
	    Console.WriteLine(m2, Console.WindowWidth,
	                          Console.WindowHeight);
	    Console.WriteLine(m4);
	    Console.ReadKey(true); 
	    Console.SetWindowSize(origWidth, origHeight);
	    Console.WriteLine(m1, Console.WindowWidth,
	                          Console.WindowHeight);
	    }
	}
	/*
	This example produces the following results:
	
	The current window width is 85, and the current window height is 43.
	  (Press any key to continue...)
	The new window width is 42, and the new window height is 21.
	  (Press any key to continue...)
	The current window width is 85, and the current window height is 43.
	
	*/
snippet eventlog_writeentry_1_3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/eventlog_writeentry_1_3.cs

	
	/* The following example demonstrates the method 
	  'WriteEntry(String, String, EventLogEntryType, Int32, Int16)', 
	  'WriteEntry(String, String, EventLogEntryType, Int32, Int16, Byte[]) ' 
	   and 'WriteEntry(String, EventLogEntryType, Int32, Int16)' of class 
	  'EventLog'.The following example writes the information to an event log. 
	*/
	using System;
	using System.Diagnostics;
	
	class MyEventLog
	{
	    public static void Main()
	    {
	
	        int myEventID = 20;
	        short myCategory = 10;
	        Console.WriteLine("Write from first source ");
	        EventLog.WriteEntry("FirstSource", "Writing warning to event log.",
	                             EventLogEntryType.Information, myEventID, myCategory);
	
	        byte[] myByte = new byte[10];
	        for (int i = 0; i < 10; i++)
	        {
	            myByte[i] = (byte)(i % 2);
	        }
	        Console.WriteLine("Write from second source ");
	        EventLog.WriteEntry("SecondSource", "Writing warning to event log.",
	                             EventLogEntryType.Error, myEventID, myCategory, myByte);
	
	
	        EventLog myLog = new EventLog();
	        myLog.Source = "ThirdSource";
	
	        Console.WriteLine("Write from third source ");
	        myLog.WriteEntry("Writing warning to event log.",
	                          EventLogEntryType.Warning, myEventID, myCategory);
	
	    }
	} 
snippet cryptography_oid

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_Oid/cryptography.oid.cs

	using System;
	using System.Security.Cryptography;
	public class OidSample
	{
		public static void Main()
		{
			string Value1 = "1.2.840.113549.1.1.1";
			string Name1 = "3DES";
			string Value2 = "1.3.6.1.4.1.311.20.2";
			string InvalidName = "This name is not a valid name";
			string InvalidValue = "1.1.1.1.1.1.1.1";
	
			Oid o1 = new Oid(Value1);
			Oid o2 = new Oid(Name1);
	
			Oid o3 = new Oid(Value2, InvalidName);
	
			Oid o4 = new Oid(InvalidValue);
	
			Console.WriteLine("Oid1: Automatically assigned Friendly Name: {0}, {1}", o1.FriendlyName, o1.Value);
			Console.WriteLine("Oid2: Automatically assigned Value: {0}, {1}", o2.FriendlyName, o2.Value);
			Console.WriteLine("Oid3: Name and Value not compared: {0}, {1}", o3.FriendlyName, o3.Value);
			Console.WriteLine("Oid4: Invalid Value used: {0}, {1} {2}", o4.FriendlyName, o4.Value, Environment.NewLine);
	
			OidCollection oc = new OidCollection();
			oc.Add(o1);
			oc.Add(o2);
			oc.Add(o3);
			Console.WriteLine("Number of Oids in the collection: {0}", oc.Count);
			Console.WriteLine("Is synchronized: {0} {1}", oc.IsSynchronized, Environment.NewLine);
	
			OidEnumerator oe = oc.GetEnumerator();
			oe.MoveNext();
			Console.WriteLine("First Oid in collection: {0},{1}", oe.Current.FriendlyName,oe.Current.Value);
			oe.MoveNext();
			Console.WriteLine("Second Oid in collection: {0},{1}", oe.Current.FriendlyName, oe.Current.Value);
			oe.Reset();
		}
	}
snippet finfo_openread

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_OpenRead/finfo_openread.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\MyTest.txt";
	        FileInfo fi = new FileInfo(path);
	
	        if (!fi.Exists) 
	        {
	            using (FileStream fs = fi.Create()) 
	            {
	                Byte[] info = new UTF8Encoding(true).GetBytes("This is some text in the file.");
	                fs.Write(info, 0, info.Length);
	            }
	        }
	
	        using (FileStream fs = fi.OpenRead()) 
	        {
	            byte[] b = new byte[1024];
	            UTF8Encoding temp = new UTF8Encoding(true);
	
	            while (fs.Read(b,0,b.Length) > 0) 
	            {
	                Console.WriteLine(temp.GetString(b));
	            }
	        }
	    }
	}

snippet appcompat_jit64

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppCompat_JIT64/SO1.cs

	using System;
	using System.Runtime.CompilerServices;
	
	public class Example
	{
	   public static void Main()
	   {
	   }
	   [MethodImpl(MethodImplOptions.NoOptimization)]
	   void LargeMethodBody() 
	   {}
	
	   [MethodImpl(MethodImplOptions.AggressiveInlining)]
	   public int ReturnSomeValue()
	   {  return 10; }
	
	   [MethodImpl(MethodImplOptions.NoOptimization)]
	   public void MethodWithExceptionHandler(bool flag)
	   {
	      if (flag) {
	      }
	      try {
	         if (flag) { 
	         }
	      } 
	         if (flag) { 
	         }  
	      }   
	   }
	
	   [MethodImpl(MethodImplOptions.NoOptimization)]
	   public bool TestCondition(int i) 
	   {
	      return Test1(i) && Test2(i) && Test3(i);
	   }
	   public bool Test1(int i) { return true; }
	   public bool Test2(int i) { return true; }
	   public bool Test3(int i) { return true; }
	}

snippet recursive_file_finder

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Recursive_file_finder/directorylisting.cs

	using System;
	using System.IO;
	using System.Collections;
	
	public class RecursiveFileProcessor 
	{
	    public static void Main(string[] args) 
	    {
	        foreach(string path in args) 
	        {
	            if(File.Exists(path)) 
	            {
	                ProcessFile(path); 
	            }               
	            else if(Directory.Exists(path)) 
	            {
	                ProcessDirectory(path);
	            }
	            else 
	            {
	                Console.WriteLine("{0} is not a valid file or directory.", path);
	            }        
	        }        
	    }
	
	
	    public static void ProcessDirectory(string targetDirectory) 
	    {
	        string [] fileEntries = Directory.GetFiles(targetDirectory);
	        foreach(string fileName in fileEntries)
	            ProcessFile(fileName);
	
	        string [] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
	        foreach(string subdirectory in subdirectoryEntries)
	            ProcessDirectory(subdirectory);
	    }
	        
	    public static void ProcessFile(string path) 
	    {
	        Console.WriteLine("Processed file '{0}'.", path);	    
	    }
	}

snippet type_getmethod4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod4/type_getmethod4.cs

	
	using System;
	using System.Reflection;
	
	class Program
	{
	
	    public void MethodA(int i, int j) { }
	
	    public void MethodA(int[] i) { }
	
	    public unsafe void MethodA(int* i) { }
	
	    public void MethodA(ref int r) {}
	
	    public void MethodA(int i, out int o) { o = 100;}
	
	
	  static void Main(string[] args)
	  {
	    MethodInfo mInfo;
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        new Type[] { typeof(int), typeof(int) });
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        new Type[] { typeof(int[]) });
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        new Type[] { typeof(int).MakePointerType() });
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        new Type[] { typeof(int).MakeByRefType() });
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        new Type[] { typeof(int), typeof(int).MakeByRefType() });
	    Console.WriteLine("Found method: {0}", mInfo);
	
	  }
	}
	
	

snippet whatsnew_461_crypto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/whatsnew_461_crypto/Code46.cs

	namespace Net461 {
	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	
	public class Net461Code
	{
	    public static byte[] SignECDsaSha512(byte[] data, X509Certificate2 cert)
	    {
	        using (ECDsa privateKey = cert.GetECDsaPrivateKey())
	        {
	            return privateKey.SignData(data, HashAlgorithmName.SHA512);
	        }
	    }
	
	    public static byte[] SignECDsaSha512(byte[] data, ECDsa privateKey)
	    {
	        return privateKey.SignData(data, HashAlgorithmName.SHA512);
	    }
	}
	}
	
	namespace Net46 {
	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	
	public class Net46Code
	{
	    public static byte[] SignECDsaSha512(byte[] data, X509Certificate2 cert)
	    {
	        throw new Exception("That's a lot of work...");
	    }
	
	    public static byte[] SignECDsaSha512(byte[] data, ECDsa privateKey)
	    {
	        using (SHA512 hasher = SHA512.Create())
	        {
	            byte[] signature1 = privateKey.SignHash(hasher.ComputeHash(data));
	        }
	
	        ECDsaCng ecDsaCng = (ECDsaCng)privateKey;
	        ecDsaCng.HashAlgorithm = CngAlgorithm.Sha512;
	        return ecDsaCng.SignData(data);
	    }
	}   
	} 
snippet type_isarrayimpl

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsArrayImpl/type_isarrayimpl.cs

	using System;
	using System.Reflection;
	public class MyTypeDelegator : TypeDelegator
	{
	    public string myElementType = null;
	    public Type myType;
	    public MyTypeDelegator(Type myType) : base(myType)
	    {
	        this.myType = myType;
	    }
	    protected override bool IsArrayImpl()
	    {
	        if(myType.IsArray)
	        {
	            myElementType = "array";
	            return true;
	        }
	        return false;  
	    }
	}
	public class Type_IsArrayImpl
	{
	    public static void Main()
	    {
	        try
	        {
	            int myInt = 0 ; 
	            int[] myArray = new int[5];
	            MyTypeDelegator myType = new MyTypeDelegator(myArray.GetType());
	            Console.WriteLine("\nDetermine whether the variable is an array.\n");
	            if( myType.IsArray)
	                Console.WriteLine("The type of myArray is {0}.", myType.myElementType);
	            else
	                Console.WriteLine("myArray is not an array.");
	            myType = new MyTypeDelegator(myInt.GetType());
	
	            if( myType.IsArray)
	                Console.WriteLine("The type of myInt is {0}.", myType.myElementType);
	            else
	                Console.WriteLine("myInt is not an array.");
	        }
	        catch( Exception e )
	        {
	            Console.WriteLine("Exception: {0}", e.Message );
	        }
	    }
	}

snippet parsing_numbers

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/parsing_numbers/formatproviders1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] values = { "1,304.16", "$1,456.78", "1,094", "152", 
	                          "123,45 €", "1 304,16", "Ae9f" };
	      double number;
	      CultureInfo culture = null;
	      
	      foreach (string value in values) {
	         try {
	            culture = CultureInfo.CreateSpecificCulture("en-US");
	            number = Double.Parse(value, culture);
	            Console.WriteLine("{0}: {1} --> {2}", culture.Name, value, number);
	         }   
	         catch (FormatException) {
	            Console.WriteLine("{0}: Unable to parse '{1}'.", 
	                              culture.Name, value);
	            culture = CultureInfo.CreateSpecificCulture("fr-FR");
	            try {
	               number = Double.Parse(value, culture);
	               Console.WriteLine("{0}: {1} --> {2}", culture.Name, value, number);
	            }
	            catch (FormatException) {
	               Console.WriteLine("{0}: Unable to parse '{1}'.", 
	                                 culture.Name, value);
	            }
	         }
	         Console.WriteLine();
	      }   
	   }
	}

snippet runtime_interopservices_marshal_getlastwin32error

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_GetLastWin32Error/example.cs

	using System;
	using System.Runtime.InteropServices;
	
	internal class Win32
	{
	    [DllImportAttribute("user32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
	    public static extern int MessageBox(IntPtr hwnd, String text, String caption, uint type);
	
	}
	
	class Program
	{
	
	    static void Run()
	    {
	
	        Console.WriteLine("Calling Win32 MessageBox without error...");
	
	        Win32.MessageBox(new IntPtr(0), "Press OK...", "Press OK Dialog", 0);
	
	        int error = Marshal.GetLastWin32Error();
	
	        Console.WriteLine("The last Win32 Error was: " + error);
	
	
	        Console.WriteLine("Calling Win32 MessageBox with error...");
	
	        Win32.MessageBox(new IntPtr(123132), "Press OK...", "Press OK Dialog", 0);
	
	
	        error = Marshal.GetLastWin32Error();
	
	        Console.WriteLine("The last Win32 Error was: " + error);
	    }
	
	    static void Main(string[] args)
	    {
	        Run();
	    }
	}
snippet verifyingahash

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/verifyingahash/program.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	class Class1
	{
	    static void Main()
	    {
	        byte[] sentHashValue = { 59, 4, 248, 102, 77, 97, 142, 201, 210, 12, 224, 93, 25, 41, 100, 197, 213, 134, 130, 135 };
	
	        string messageString = "This is the original message!";
	
	        byte[] compareHashValue;
	
	        UnicodeEncoding ue = new UnicodeEncoding();
	
	        byte[] messageBytes = ue.GetBytes(messageString);
	
	        SHA1Managed shHash = new SHA1Managed();
	
	        compareHashValue = shHash.ComputeHash(messageBytes);
	
	        bool same = true;
	
	        for (int x = 0; x < sentHashValue.Length; x++)
	        {
	            if (sentHashValue[x] != compareHashValue[x])
	            {
	                same = false;
	            }
	        }
	        if (same)
	        {
	            Console.WriteLine("The hash codes match.");
	        }
	        else
	        {
	            Console.WriteLine("The hash codes do not match.");
	        }
	    }
	}
	

snippet entrywritteneventargs_ctor1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EntryWrittenEventArgs_ctor1/entrywritteneventargs_ctor1.cs

	
	/* 
	The following example demonstrates 'EntryWrittenEventArgs ()'
	constructor of the 'EntryWrittenEventArgs' class. It creates a custom 'EventLog'
	and writes an entry into it. Then creates an 'EntryWrittenEventArgs' object 
	using the first entry in the custom eventlog.This object is used to notify a message 
	 */
	
	using System;
	using System.Diagnostics;
	
	class MySample
	{
	    public static void Main()
	    {
	        try
	        {
	            EventLog myNewLog = new EventLog();
	            myNewLog.Log = "MyNewLog";
	            myNewLog.Source = "MySource";
	            if (!EventLog.SourceExists("MySource"))
	            {
	                EventLog.CreateEventSource("MySource", "MyNewLog");
	                Console.WriteLine("CreatingEventSource");
	                Console.WriteLine("Exiting, execute the application a second time to use the source.");
	                return;
	            }
	            myNewLog.WriteEntry("The Latest entry in the Event Log");
	            int myEntries = myNewLog.Entries.Count;
	            EventLogEntry entry = myNewLog.Entries[myEntries - 1];
	            EntryWrittenEventArgs myEntryEventArgs =
	                                 new EntryWrittenEventArgs();
	            MyOnEntry(myNewLog, myEntryEventArgs);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception Raised" + e.Message);
	        }
	    }
	    protected static void MyOnEntry(Object source, EntryWrittenEventArgs e)
	    {
	        if (e.Entry == null)
	            Console.WriteLine("A new entry is written in MyNewLog.");
	    }
	}

snippet conceptual_resources_portablemetro

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetro/bindablebase.cs

	using System;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	using Windows.UI.Xaml.Data;
	
	namespace ConsumerCS.Common
	{
	    [Windows.Foundation.Metadata.WebHostHidden]
	    public abstract class BindableBase : INotifyPropertyChanged
	    {
	        public event PropertyChangedEventHandler PropertyChanged;
	
	        protected bool SetProperty<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
	        {
	            if (object.Equals(storage, value)) return false;
	
	            storage = value;
	            this.OnPropertyChanged(propertyName);
	            return true;
	        }
	
	        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
	        {
	            var eventHandler = this.PropertyChanged;
	            if (eventHandler != null)
	            {
	                eventHandler(this, new PropertyChangedEventArgs(propertyName));
	            }
	        }
	    }
	}

snippet conceptual_resources_portablemetroloc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetroloc/bindablebase.cs

	using System;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	using Windows.UI.Xaml.Data;
	
	namespace LocConsumerCS.Common
	{
	    [Windows.Foundation.Metadata.WebHostHidden]
	    public abstract class BindableBase : INotifyPropertyChanged
	    {
	        public event PropertyChangedEventHandler PropertyChanged;
	
	        protected bool SetProperty<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
	        {
	            if (object.Equals(storage, value)) return false;
	
	            storage = value;
	            this.OnPropertyChanged(propertyName);
	            return true;
	        }
	
	        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
	        {
	            var eventHandler = this.PropertyChanged;
	            if (eventHandler != null)
	            {
	                eventHandler(this, new PropertyChangedEventArgs(propertyName));
	            }
	        }
	    }
	}

snippet math_midpointrounding

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/math_midpointrounding/mpr.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    decimal result = 0.0m;
	    decimal posValue =  3.45m;
	    decimal negValue = -3.45m;
	
	
	    result = Math.Round(posValue, 1);
	    Console.WriteLine("{0,4} = Math.Round({1,5}, 1)", result, posValue);
	    result = Math.Round(negValue, 1);
	    Console.WriteLine("{0,4} = Math.Round({1,5}, 1)", result, negValue);
	    Console.WriteLine();
	
	
	    result = Math.Round(posValue, 1, MidpointRounding.ToEven);
	    Console.WriteLine("{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)", result, posValue);
	    result = Math.Round(posValue, 1, MidpointRounding.AwayFromZero);
	    Console.WriteLine("{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)", result, posValue);
	    Console.WriteLine();
	
	
	    result = Math.Round(negValue, 1, MidpointRounding.ToEven);
	    Console.WriteLine("{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)", result, negValue);
	    result = Math.Round(negValue, 1, MidpointRounding.AwayFromZero);
	    Console.WriteLine("{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)", result, negValue);
	    Console.WriteLine();
	    /*
	    This code example produces the following results:
	
	    3.4 = Math.Round( 3.45, 1)
	    -3.4 = Math.Round(-3.45, 1)
	
	    3.4 = Math.Round( 3.45, 1, MidpointRounding.ToEven)
	    3.5 = Math.Round( 3.45, 1, MidpointRounding.AwayFromZero)
	
	    -3.4 = Math.Round(-3.45, 1, MidpointRounding.ToEven)
	    -3.5 = Math.Round(-3.45, 1, MidpointRounding.AwayFromZero)
	
	    */
	    }
	}

snippet type_haselementtype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementType/type_haselementtype.cs

	using System;
	using System.Reflection;
	
	public class Example
	{
	    unsafe public void Test(ref int x, out int y, int* z) 
	    { 
	        *z = x = y = 0; 
	    }
	
	    public static void Main()
	    {
	
	        int[] nums = {1, 1, 2, 3, 5, 8, 13};
	        Type t = nums.GetType();
	        Console.WriteLine("HasElementType is '{0}' for array types.", t.HasElementType);
	
	        t = typeof(Example[]);
	        Console.WriteLine("HasElementType is '{0}' for array types.", t.HasElementType);
	
	        t = typeof(Example).MakeArrayType();
	        Console.WriteLine("HasElementType is '{0}' for array types.", t.HasElementType);
	
	        MethodInfo mi = typeof(Example).GetMethod("Test");
	        ParameterInfo[] parms = mi.GetParameters();
	        t = parms[0].ParameterType;
	        Console.WriteLine("HasElementType is '{0}' for ref parameter types.", t.HasElementType);
	        t = parms[1].ParameterType;
	        Console.WriteLine("HasElementType is '{0}' for out parameter types.", t.HasElementType);
	        t = parms[2].ParameterType;
	        Console.WriteLine("HasElementType is '{0}' for pointer parameter types.", t.HasElementType);
	
	        t = typeof(Example).MakePointerType();
	        Console.WriteLine("HasElementType is '{0}' for pointer types.", t.HasElementType);
	        t = typeof(Example).MakeByRefType();
	        Console.WriteLine("HasElementType is '{0}' for ByRef types.", t.HasElementType);
	    }
	}
snippet list`1_indexof

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>();
	
	        dinosaurs.Add("Tyrannosaurus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("Mamenchisaurus");
	        dinosaurs.Add("Brachiosaurus");
	        dinosaurs.Add("Deinonychus");
	        dinosaurs.Add("Tyrannosaurus");
	        dinosaurs.Add("Compsognathus");
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nIndexOf(\"Tyrannosaurus\"): {0}", 
	            dinosaurs.IndexOf("Tyrannosaurus"));
	
	        Console.WriteLine("\nIndexOf(\"Tyrannosaurus\", 3): {0}", 
	            dinosaurs.IndexOf("Tyrannosaurus", 3));
	
	        Console.WriteLine("\nIndexOf(\"Tyrannosaurus\", 2, 2): {0}", 
	            dinosaurs.IndexOf("Tyrannosaurus", 2, 2));
	    }
	}
	
	/* This code example produces the following output:
	
	Tyrannosaurus
	Amargasaurus
	Mamenchisaurus
	Brachiosaurus
	Deinonychus
	Tyrannosaurus
	Compsognathus
	
	IndexOf("Tyrannosaurus"): 0
	
	IndexOf("Tyrannosaurus", 3): 5
	
	IndexOf("Tyrannosaurus", 2, 2): -1
	 */
	
	

snippet list`1_lastindexof

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>();
	
	        dinosaurs.Add("Tyrannosaurus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("Mamenchisaurus");
	        dinosaurs.Add("Brachiosaurus");
	        dinosaurs.Add("Deinonychus");
	        dinosaurs.Add("Tyrannosaurus");
	        dinosaurs.Add("Compsognathus");
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nLastIndexOf(\"Tyrannosaurus\"): {0}", 
	            dinosaurs.LastIndexOf("Tyrannosaurus"));
	
	        Console.WriteLine("\nLastIndexOf(\"Tyrannosaurus\", 3): {0}", 
	            dinosaurs.LastIndexOf("Tyrannosaurus", 3));
	
	        Console.WriteLine("\nLastIndexOf(\"Tyrannosaurus\", 4, 4): {0}", 
	            dinosaurs.LastIndexOf("Tyrannosaurus", 4, 4));
	    }
	}
	
	/* This code example produces the following output:
	
	Tyrannosaurus
	Amargasaurus
	Mamenchisaurus
	Brachiosaurus
	Deinonychus
	Tyrannosaurus
	Compsognathus
	
	LastIndexOf("Tyrannosaurus"): 5
	
	LastIndexOf("Tyrannosaurus", 3): 0
	
	LastIndexOf("Tyrannosaurus", 4, 4): -1
	 */
	
	

snippet array_indexof

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Array_IndexOf/source.cs

	using System;
	
	public class Example
	{
	    public static void Main()
	    {
	        string[] dinosaurs = { "Tyrannosaurus",
	            "Amargasaurus",
	            "Mamenchisaurus",
	            "Brachiosaurus",
	            "Deinonychus",
	            "Tyrannosaurus",
	            "Compsognathus" };
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine(
	            "\nArray.IndexOf(dinosaurs, \"Tyrannosaurus\"): {0}", 
	            Array.IndexOf(dinosaurs, "Tyrannosaurus"));
	
	        Console.WriteLine(
	            "\nArray.IndexOf(dinosaurs, \"Tyrannosaurus\", 3): {0}", 
	            Array.IndexOf(dinosaurs, "Tyrannosaurus", 3));
	
	        Console.WriteLine(
	            "\nArray.IndexOf(dinosaurs, \"Tyrannosaurus\", 2, 2): {0}", 
	            Array.IndexOf(dinosaurs, "Tyrannosaurus", 2, 2));
	    }
	}
	
	/* This code example produces the following output:
	
	Tyrannosaurus
	Amargasaurus
	Mamenchisaurus
	Brachiosaurus
	Deinonychus
	Tyrannosaurus
	Compsognathus
	
	Array.IndexOf(dinosaurs, "Tyrannosaurus"): 0
	
	Array.IndexOf(dinosaurs, "Tyrannosaurus", 3): 5
	
	Array.IndexOf(dinosaurs, "Tyrannosaurus", 2, 2): -1
	 */
	
	

snippet array_lastindexof

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Array_LastIndexOf/source.cs

	using System;
	
	public class Example
	{
	    public static void Main()
	    {
	        string[] dinosaurs = { "Tyrannosaurus",
	            "Amargasaurus",
	            "Mamenchisaurus",
	            "Brachiosaurus",
	            "Deinonychus",
	            "Tyrannosaurus",
	            "Compsognathus" };
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine(
	            "\nArray.LastIndexOf(dinosaurs, \"Tyrannosaurus\"): {0}", 
	            Array.LastIndexOf(dinosaurs, "Tyrannosaurus"));
	
	        Console.WriteLine(
	            "\nArray.LastIndexOf(dinosaurs, \"Tyrannosaurus\", 3): {0}", 
	            Array.LastIndexOf(dinosaurs, "Tyrannosaurus", 3));
	
	        Console.WriteLine(
	            "\nArray.LastIndexOf(dinosaurs, \"Tyrannosaurus\", 4, 4): {0}", 
	            Array.LastIndexOf(dinosaurs, "Tyrannosaurus", 4, 4));
	    }
	}
	
	/* This code example produces the following output:
	
	Tyrannosaurus
	Amargasaurus
	Mamenchisaurus
	Brachiosaurus
	Deinonychus
	Tyrannosaurus
	Compsognathus
	
	Array.LastIndexOf(dinosaurs, "Tyrannosaurus"): 5
	
	Array.LastIndexOf(dinosaurs, "Tyrannosaurus", 3): 0
	
	Array.LastIndexOf(dinosaurs, "Tyrannosaurus", 4, 4): -1
	 */
	
	

snippet fieldinfo_fieldhandle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_FieldHandle/fieldinfo_fieldhandle.cs

	using System;
	using System.Reflection;
	  
	public class MyClass
	{
	    public string MyField = "Microsoft";
	}
	
	public class FieldInfo_FieldHandle
	{
	    public static void Main()
	    {
	    
	        MyClass myClass =new MyClass();
	
	        Type myType = typeof(MyClass);
	
	        try
	        {
	            FieldInfo myFieldInfo = myType.GetField("MyField", BindingFlags.Public 
	                | BindingFlags.Instance);
	      
	            if(myFieldInfo!=null)
	            {
	                RuntimeFieldHandle myFieldHandle=myFieldInfo.FieldHandle;
	
	                DisplayFieldHandle(myFieldHandle);
	            }
	            else
	            {
	                Console.WriteLine("The myFieldInfo object is null.");
	            }
	        }  
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception: {0}", e.Message);
	        }
	    }
	
	    public static void DisplayFieldHandle(RuntimeFieldHandle myFieldHandle)
	    {
	        FieldInfo myField = FieldInfo.GetFieldFromHandle(myFieldHandle);      
	      
	        Console.WriteLine("\nDisplaying the field from the handle.\n");
	        Console.WriteLine("The type is {0}.", myField.ToString());
	    }
	}
	

snippet modulebuilder_definedocument

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_DefineDocument/modulebuilder_definedocument.cs

	
	/*
	The following example demonstrates the 'DefineDocument' method
	of 'ModuleBuilder' class.
	A dynamic assembly with a module in it is created in 'CodeGenerator' class.
	It gets the object representing the defined document using the method
	'DefineDocument'.
	*/
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Resources;
	using System.Diagnostics.SymbolStore;
	
	namespace ILGenServer
	{
	   public class CodeGenerator
	   {
	      ModuleBuilder myModuleBuilder ;
	      AssemblyBuilder myAssemblyBuilder ;
	
	      public CodeGenerator()
	      {
	
	         AppDomain currentDomain = AppDomain.CurrentDomain;
	         AssemblyName myAssemblyName = new AssemblyName();
	         myAssemblyName.Name = "TempAssembly";
	
	         myAssemblyBuilder =
	            currentDomain.DefineDynamicAssembly
	                        (myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	         myModuleBuilder =
	            myAssemblyBuilder.DefineDynamicModule("TempModule","Resource.mod",true);
	
	         ISymbolDocumentWriter myDocument =
	         myModuleBuilder.DefineDocument("RTAsm.il", SymDocumentType.Text,
	                  SymLanguageType.ILAssembly,SymLanguageVendor.Microsoft);
	
	         Console.WriteLine("The object representing the defined document is:"+myDocument);
	
	      }
	   }
	   public class CallerClass
	   {
	      public static void Main()
	      {
	         CodeGenerator myGenerator = new CodeGenerator();
	      }
	   }
	}
snippet generic_dictionary_ctor_ieqc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_Dictionary_ctor_IEqC/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Dictionary<string, string> openWith = 
	                      new Dictionary<string, string>( 
	                          StringComparer.CurrentCultureIgnoreCase);
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("DIB", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	
	        try
	        {
	            openWith.Add("BMP", "paint.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("\nBMP is already in the dictionary.");
	        }
	        
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, 
	                kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	BMP is already in the dictionary.
	
	Key = txt, Value = notepad.exe
	Key = bmp, Value = paint.exe
	Key = DIB, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	 */
	
	
	

snippet generic_sorteddictionary_ctor_icomp

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedDictionary_ctor_IComp/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        SortedDictionary<string, string> openWith = 
	                      new SortedDictionary<string, string>( 
	                          StringComparer.CurrentCultureIgnoreCase);
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("DIB", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	
	        try
	        {
	            openWith.Add("BMP", "paint.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("\nBMP is already in the dictionary.");
	        }
	        
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, 
	                kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	BMP is already in the dictionary.
	
	Key = bmp, Value = paint.exe
	Key = DIB, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	Key = txt, Value = notepad.exe
	 */
	
	
	

snippet generic_sortedlist_ctor_icomp

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedList_ctor_IComp/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        SortedList<string, string> openWith = 
	                      new SortedList<string, string>( 
	                          StringComparer.CurrentCultureIgnoreCase);
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("DIB", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	
	        try
	        {
	            openWith.Add("BMP", "paint.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("\nBMP is already in the sorted list.");
	        }
	        
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, 
	                kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	BMP is already in the sorted list.
	
	Key = bmp, Value = paint.exe
	Key = DIB, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	Key = txt, Value = notepad.exe
	 */
	
	
	

snippet generic_sortedlist_ctor_int32icomp

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedList_ctor_Int32IComp/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        SortedList<string, string> openWith = 
	                      new SortedList<string, string>(5, 
	                          StringComparer.CurrentCultureIgnoreCase);
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("DIB", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	
	        try
	        {
	            openWith.Add("BMP", "paint.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("\nBMP is already in the sorted list.");
	        }
	        
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, 
	                kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	BMP is already in the sorted list.
	
	Key = bmp, Value = paint.exe
	Key = DIB, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	Key = txt, Value = notepad.exe
	 */
	
	
	

snippet typebuilder_adddeclarativesecurity

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/typebuilder_adddeclarativesecurity.cs

	
	/* The following example demonstrates method AddDeclarativeSecurity
	   of 'TypeBuilder' class.
	   The program creates a dynamic assembly and a type in it that has
	   a declarative security demand for ControlEvidence.
	   Caller (main) is able to create an instance successfully with 
	   default permission, because the local machine executes with a 
	   full trust permission set. 
	*/
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security;
	using System.Security.Permissions;
	
	namespace CustomAttribute_Sample
	{
	   public class MyApplication 
	   {
	      static void Main()
	      {
	         AssemblyName myAssemblyName = new AssemblyName("EmittedAssembly");
	         AssemblyBuilder myAssemblyBuilder =
	            AppDomain.CurrentDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	         ModuleBuilder myModuleBuilder = 
	            myAssemblyBuilder.DefineDynamicModule("EmittedAssembly", "EmittedAssembly.dll");
	
	         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("MyDynamicClass",
	            TypeAttributes.Public);
	
	
	         PermissionSet myPermissionSet = new PermissionSet(PermissionState.None);
	         myPermissionSet.AddPermission(
	             new SecurityPermission(SecurityPermissionFlag.ControlEvidence));
	
	         myTypeBuilder.AddDeclarativeSecurity(SecurityAction.Demand, myPermissionSet);
	
	
	         Type myType = myTypeBuilder.CreateType();
	         myAssemblyBuilder.Save("EmittedAssembly.dll");
	      }
	   }
	}
	
	

snippet listversions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/listversions/Versions45Plus.cs

	using System;
	using Microsoft.Win32;
	
	public class GetDotNetVersion
	{
	   public static void Get45PlusFromRegistry()
	   {
	      const string subkey = @"SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\";
	   	using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey))
	      {
	   		if (ndpKey != null && ndpKey.GetValue("Release") != null) {
	   			Console.WriteLine(".NET Framework Version: " + CheckFor45PlusVersion((int) ndpKey.GetValue("Release")));
	   		}
	         else {
	            Console.WriteLine(".NET Framework Version 4.5 or later is not detected.");
	         } 
	   	}
	   }
	
	   private static string CheckFor45PlusVersion(int releaseKey)
	   {
	      if (releaseKey >= 394802)
	         return "4.6.2 or later";
	      if (releaseKey >= 394254) {
	         return "4.6.1";
	      }
	      if (releaseKey >= 393295) {
	         return "4.6";
	      }
	      if ((releaseKey >= 379893)) {
	         return "4.5.2";
	      }
	      if ((releaseKey >= 378675)) {
	         return "4.5.1";
	      }
	      if ((releaseKey >= 378389)) {
	   	   return "4.5";
	      }
	   	return "No 4.5 or later version detected";
	   }
	}   
	
	public class Example
	{
	   public static void Main()
	   {
	      GetDotNetVersion.Get45PlusFromRegistry();
	   }
	} 
snippet contract_forallexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/contract_forallexample/program.cs

	using System;
	using System.Diagnostics.Contracts;
	using System.Collections.Generic;
	namespace AssumeEx
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            args[1] = null;
	            Contract.Requires(args != null && Contract.ForAll(0, args.Length, i => args[i] != null));
	            CheckIndexes(args);
	            Stack<string> numbers = new Stack<string>();
	            numbers.Push("one");
	            numbers.Push("two");
	            numbers.Push(null);
	            numbers.Push("four");
	            numbers.Push("five");
	            Contract.Requires(numbers != null && !Contract.ForAll(numbers, (String x) => x != null));
	            CheckTypeArray(numbers);
	        }
	
	        private static bool CheckIndexes(string[] args)
	        {
	            try
	            {
	                if (args != null && !Contract.ForAll(0, args.Length, i => args[i] != null))
	                    throw new ArgumentException("The parameter array has a null element", "args");
	                return true;
	            }
	            catch (ArgumentException e)
	            {
	                Console.WriteLine(e.Message);
	                return false;
	            }
	        }
	        private static bool CheckTypeArray(IEnumerable<String> xs)
	        {
	            try
	            {
	                if (xs != null && !Contract.ForAll(xs, (String x) => x != null))
	                    throw new ArgumentException("The parameter array has a null element", "indexes");
	                return true;
	            }
	            catch (ArgumentException e)
	            {
	                Console.WriteLine(e.Message);
	                return false;
	            }
	        }
	    }
	}
snippet microsoft_win32_registrykey_openremotebasekey

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Win32_RegistryKey_OpenRemoteBaseKey/source.cs

	using System;
	using System.IO;
	using System.Security.Permissions;
	using Microsoft.Win32;
	
	
	class RemoteKey
	{
	    static void Main(string[] args)
	    {
	        RegistryKey environmentKey;
	        string remoteName;
	
	        if(args.Length == 0)
	        {
	            Console.WriteLine("Error: The name of the remote " +
	                "computer must be specified when the program is " +
	                "invoked.");
	            return;
	        }
	        else
	        {
	            remoteName = args[0];
	        }
	
	        try
	        {
	            environmentKey = RegistryKey.OpenRemoteBaseKey(
	                RegistryHive.CurrentUser, remoteName).OpenSubKey(
	                "Environment");
	        }
	        catch(IOException e)
	        {
	            Console.WriteLine("{0}: {1}", 
	                e.GetType().Name, e.Message);
	            return;
	        }
	
	        Console.WriteLine("\nThere are {0} values for {1}.", 
	            environmentKey.ValueCount.ToString(), 
	            environmentKey.Name);
	        foreach(string valueName in environmentKey.GetValueNames())
	        {
	            Console.WriteLine("{0,-20}: {1}", valueName, 
	                environmentKey.GetValue(valueName).ToString());
	        }
	
	        environmentKey.Close();
	    }
	}
snippet type_gettypehandle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeHandle/type_gettypehandle.cs

	using System;
	using System.Reflection;
	
	public class MyClass1
	{
	    private int x=0;
	    public int MyMethod()
	    {
	        return x;
	    }
	}
	
	public class MyClass2
	{
	    public static void Main()
	    {
	        MyClass1 myClass1 = new MyClass1();
	
	        RuntimeTypeHandle myRTHFromObject = Type.GetTypeHandle(myClass1);
	        RuntimeTypeHandle myRTHFromType = typeof(MyClass1).TypeHandle;
	
	        Console.WriteLine("\nmyRTHFromObject.Value:  {0}", myRTHFromObject.Value);
	        Console.WriteLine("myRTHFromObject.GetType():  {0}", myRTHFromObject.GetType());
	        Console.WriteLine("Get the type back from the handle...");
	        Console.WriteLine("Type.GetTypeFromHandle(myRTHFromObject):  {0}", 
	            Type.GetTypeFromHandle(myRTHFromObject));
	
	        Console.WriteLine("\nmyRTHFromObject.Equals(myRTHFromType):  {0}", 
	            myRTHFromObject.Equals(myRTHFromType));
	
	        Console.WriteLine("\nmyRTHFromType.Value:  {0}", myRTHFromType.Value);
	        Console.WriteLine("myRTHFromType.GetType():  {0}", myRTHFromType.GetType());
	        Console.WriteLine("Get the type back from the handle...");
	        Console.WriteLine("Type.GetTypeFromHandle(myRTHFromType):  {0}", 
	            Type.GetTypeFromHandle(myRTHFromType));
	    }
	}
	
	/* This code example produces output similar to the following:
	
	myRTHFromObject.Value:  799464
	myRTHFromObject.GetType():  System.RuntimeTypeHandle
	Get the type back from the handle...
	Type.GetTypeFromHandle(myRTHFromObject):  MyClass1
	
	myRTHFromObject.Equals(myRTHFromType):  True
	
	myRTHFromType.Value:  799464
	myRTHFromType.GetType():  System.RuntimeTypeHandle
	Get the type back from the handle...
	Type.GetTypeFromHandle(myRTHFromType):  MyClass1
	 */
	

snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/multiline1.cs

	using System;
	using System.Collections.Generic;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      SortedList<int, string> scores = new SortedList<int, string>(new DescendingComparer<int>());
	      
	      string input = "Joe 164\n" + 
	                     "Sam 208\n" + 
	                     "Allison 211\n" + 
	                     "Gwen 171\n"; 
	      string pattern = @"^(\w+)\s(\d+)$";
	      bool matched = false;
	      
	      Console.WriteLine("Without Multiline option:");
	      foreach (Match match in Regex.Matches(input, pattern))
	      {
	         scores.Add(Int32.Parse(match.Groups[2].Value), (string) match.Groups[1].Value);
	         matched = true;
	      }
	      if (! matched)
	         Console.WriteLine("   No matches.");
	      Console.WriteLine();
	
	      pattern = @"^(\w+)\s(\d+)\r*$";
	      Console.WriteLine("With multiline option:");
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.Multiline))
	         scores.Add(Int32.Parse(match.Groups[2].Value), (string) match.Groups[1].Value);
	
	      foreach (KeyValuePair<int, string> score in scores)
	         Console.WriteLine("{0}: {1}", score.Value, score.Key);
	   }
	}
	
	public class DescendingComparer<T> : IComparer<T>
	{
	   public int Compare(T x, T y)
	   {
	      return Comparer<T>.Default.Compare(x, y) * -1;       
	   }
	}

snippet conceptual_calendars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_calendars/minsupporteddatetime1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime dat = DateTime.MinValue;
	   
	      CultureInfo jaJP = CultureInfo.CreateSpecificCulture("ja-JP");
	      jaJP.DateTimeFormat.Calendar = new JapaneseCalendar();
	      Thread.CurrentThread.CurrentCulture = jaJP;
	      Console.WriteLine("Earliest supported date by {1} calendar: {0:d}", 
	                        jaJP.DateTimeFormat.Calendar.MinSupportedDateTime,
	                        GetCalendarName(jaJP));
	      Console.WriteLine(dat.ToString());     
	      Console.WriteLine();
	      
	      CultureInfo arEG = CultureInfo.CreateSpecificCulture("ar-EG");
	      arEG.DateTimeFormat.Calendar = new UmAlQuraCalendar();
	      Thread.CurrentThread.CurrentCulture = arEG;
	      Console.WriteLine("Earliest supported date by {1} calendar: {0:d}", 
	                        arEG.DateTimeFormat.Calendar.MinSupportedDateTime,
	                        GetCalendarName(arEG));
	      Console.WriteLine(dat.ToString());     
	      Console.WriteLine();
	      
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
	      Console.WriteLine(dat.ToString(jaJP));
	      Console.WriteLine(dat.ToString(arEG));
	      Console.WriteLine(dat.ToString("d"));
	   }
	   
	   private static string GetCalendarName(CultureInfo culture)
	   {
	      Calendar cal = culture.DateTimeFormat.Calendar;
	      return cal.GetType().Name.Replace("System.Globalization.", "").Replace("Calendar", "");  
	   }
	}

snippet generic_dictionary_ctor_int32ieqc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_Dictionary_ctor_Int32IEqC/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Dictionary<string, string> openWith = 
	                      new Dictionary<string, string>(5, 
	                          StringComparer.CurrentCultureIgnoreCase);
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("DIB", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	
	        try
	        {
	            openWith.Add("BMP", "paint.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("\nBMP is already in the dictionary.");
	        }
	        
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, 
	                kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	BMP is already in the dictionary.
	
	Key = txt, Value = notepad.exe
	Key = bmp, Value = paint.exe
	Key = DIB, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	 */
	
	
	

snippet conceptual_resources_retrieving

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_retrieving/example2.cs

	using System;
	using System.Resources;
	
	[assembly: NeutralResourcesLanguageAttribute("en")]
	
	public class Example
	{
	   public static void Main()
	   {
	      string fmtString = String.Empty;
	      ResourceManager rm = new ResourceManager("UIResources", typeof(Example).Assembly);       
	      string title = rm.GetString("TableName");
	      PersonTable tableInfo = (PersonTable) rm.GetObject("Employees");
	
	      if (! String.IsNullOrEmpty(title)) {
	         fmtString = "{0," + ((Console.WindowWidth + title.Length) / 2).ToString() + "}"; 
	         Console.WriteLine(fmtString, title);      
	         Console.WriteLine();
	      }
	
	      for (int ctr = 1; ctr <= tableInfo.nColumns; ctr++) {
	         string columnName = "column"  + ctr.ToString();
	         string widthName = "width" + ctr.ToString();
	         string value = tableInfo.GetType().GetField(columnName).GetValue(tableInfo).ToString();
	         int width = (int) tableInfo.GetType().GetField(widthName).GetValue(tableInfo);
	         fmtString = "{0,-" + width.ToString() + "}";
	         Console.Write(fmtString, value);
	      }      
	      Console.WriteLine();
	   }
	}
	
	
	
	[Serializable] public struct PersonTable
	{
	   public readonly int nColumns;
	   public readonly string column1; 
	   public readonly string column2;
	   public readonly string column3; 
	   public readonly int width1;
	   public readonly int width2;
	   public readonly int width3;
	   
	   public PersonTable(string column1, string column2, string column3,
	                  int width1, int width2, int width3)
	   {
	      this.column1 = column1;
	      this.column2 = column2;
	      this.column3 = column3;
	      this.width1 = width1;
	      this.width2 = width2;
	      this.width3 = width3;
	      this.nColumns = typeof(PersonTable).GetFields().Length / 2; 
	   }
	} 
snippet assemblyinstaller_helptext

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller_HelpText/assemblyinstaller_helptext.cs

	
	/* The following example demonstrates the 'UseNewContext' and the
	   'HelpText' properties of the 'AssemblyInstaller' class.
	   An object of the AssemblyInstaller class is created by invoking the constructor.
	   The 'UseNewContext' property of this object is set to true and the install
	   method is invoked on the 'MyAssembly_HelpText.exe' assembly. Due
	   to this the log messages are displayed on the console. The 'HelpText'
	   property for the object is displayed on the console.
	*/
	
	using System;
	using System.Configuration.Install;
	using System.Collections;
	using System.Collections.Specialized;
	
	class AssemblyInstaller_Example
	{
	   static void Main()
	   {
	      IDictionary mySavedState = new Hashtable();
	
	      Console.WriteLine( "" );
	
	      try
	      {
	         string[] commandLineOptions = new string[ 1 ] {"/LogFile=example.log"};
	
	         AssemblyInstaller myAssemblyInstaller = new
	                        AssemblyInstaller( "MyAssembly_HelpText.exe", commandLineOptions );
	
	         myAssemblyInstaller.UseNewContext = true;
	
	         myAssemblyInstaller.Install( mySavedState );
	
	         Console.WriteLine( "The 'HelpText' is-" );
	         Console.WriteLine( myAssemblyInstaller.HelpText );
	      }
	      catch( ArgumentException )
	      {
	      }
	      catch( Exception e )
	      {
	         Console.WriteLine( e.Message );
	      }
	
	   }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/naming1.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class Person : person
	{
	 
	}
	
	public class person
	{
	 
	}
	
	public class Size
	{
	   private double a1;
	   private double a2;
	   
	   public double Å
	   {
	       get { return a1; }
	       set { a1 = value; }
	   }         
	         
	   public double Å
	   {
	       get { return a2; }
	       set { a2 = value; }
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	   }
	}

snippet io_fileinfo_replace

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_FileInfo_Replace/sample.cs

	using System;
	using System.IO;
	
	namespace FileSystemExample
	{
	    class FileExample
	    {
	        public static void Main()
	        {
	            try
	            {
	
	                string originalFile  = "test.txt";
	                string fileToReplace = "test2.txt";
	                string backUpOfFileToReplace = "test2.txt.bak";
	
	                if (File.Exists(originalFile) && (File.Exists(fileToReplace)))
	                {
	                    Console.WriteLine("Move the contents of " + originalFile + " into " + fileToReplace + ", delete "
	                        + originalFile + ", and create a backup of " + fileToReplace + ".");
	
	                    ReplaceFile(originalFile, fileToReplace, backUpOfFileToReplace);
	
	                    Console.WriteLine("Done");
	                }
	                else
	                {
	                    Console.WriteLine("Either the file {0} or {1} doesn't " + "exist.", originalFile, fileToReplace);
	                }
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine(e.Message);
	            }
	
	            Console.ReadLine();
	        }
	
	        public static void ReplaceFile(string fileToMoveAndDelete, string fileToReplace, string backupOfFileToReplace)
	        {
	            FileInfo fInfo = new FileInfo(fileToMoveAndDelete);
	
	            fInfo.Replace(fileToReplace, backupOfFileToReplace, false);
	        }
	    }
	}
	
snippet conceptual_strings_comparing

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_comparing/sort1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class ArraySort 
	{
	   public static void Main(String[] args) 
	   {
	      string[] stringArray = { "Apple", "Æble", "Zebra"};
	
	      Console.WriteLine( "The original string array:");
	      PrintIndexAndValues(stringArray);
	
	      Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
	      Array.Sort(stringArray);
	
	      Console.WriteLine("After sorting for the culture \"en-US\":");
	      PrintIndexAndValues(stringArray); 
	
	      Thread.CurrentThread.CurrentCulture = new CultureInfo("da-DK");
	      Array.Sort(stringArray);
	
	      Console.WriteLine("After sorting for the culture \"da-DK\":");
	      PrintIndexAndValues(stringArray); 
	   }
	   public static void PrintIndexAndValues(string[] myArray)  
	   {
	      for (int i = myArray.GetLowerBound(0); i <= 
	            myArray.GetUpperBound(0); i++ )
	         Console.WriteLine("[{0}]: {1}", i, myArray[i]);
	      Console.WriteLine();      
	   }
	}
snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/example1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      ShowOptionsArgument();
	      Console.WriteLine("-----");
	      ShowInlineOptions();
	      Console.WriteLine("-----");
	      ShowGroupOptions();
	   }
	
	   private static void ShowOptionsArgument()
	   {   
	      string pattern = @"d \w+ \s";
	      string input = "Dogs are decidedly good pets.";
	      RegexOptions options = RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace;
	      
	      foreach (Match match in Regex.Matches(input, pattern, options))
	   }
	   
	   private static void ShowInlineOptions()
	   {
	      string pattern = @"(?ix) d \w+ \s";
	      string input = "Dogs are decidedly good pets.";
	      
	      foreach (Match match in Regex.Matches(input, pattern))
	   }
	   
	   private static void ShowGroupOptions()
	   {
	      string pattern = @"\b(?ix: d \w+)\s";
	      string input = "Dogs are decidedly good pets.";
	      
	      foreach (Match match in Regex.Matches(input, pattern))
	   }
	}

snippet projectn_etw

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn_etw/etw2.cs

	using System.Diagnostics.Tracing;
	
	using System;
	using Windows.ApplicationModel;
	using Windows.UI.Xaml; 
	
	public sealed partial class App
	{
	    public App()
	    {
	        this.InitializeComponent();
	        this.Suspending += OnSuspending;
	        AppEventSource.Log.AppInitialized();
	    }
	} 
	public sealed partial class MainPage : Page
	{
	    public MainPage()
	    {
	        this.InitializeComponent();
	        AppEventSource.Log.MainPageInitialized();
	    }
	}
	
	
	public class Page 
	{
	   public void InitializeComponent() {}       
	       
	}
	
	public sealed partial class App : Application 
	{
	   public void InitializeComponent() {}
	
	   public void OnSuspending(object sender, SuspendingEventArgs e) { }
	}
	
	
	[EventSource(Name="MyCompany-MyApp")]
	public sealed class AppEventSource : EventSource
	{
	   public static AppEventSource Log = new AppEventSource ();
	
	  [Event(1)]
	  public void AppInitialized() { WriteEvent(1); }
	  
	  [Event(2)]
	  public void MainPageInitialized() { WriteEvent(2); }
	}
	
	
	

snippet conceptual_monitors

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_monitors/badlock1.cs

	using System;
	using System.Collections.Generic;
	using System.Threading;
	using System.Threading.Tasks;
	
	public class Example
	{
	   public static void Main()
	   {
	
	      int nTasks = 0;
	      List<Task> tasks = new List<Task>();
	      
	      try {
	         for (int ctr = 0; ctr < 10; ctr++)
	                                        Thread.Sleep(250);
	                                        Monitor.Enter(nTasks);
	                                        try {
	                                           nTasks += 1;
	                                        }
	                                        finally {
	                                           Monitor.Exit(nTasks);
	                                        }
	                                      } ));
	         Task.WaitAll(tasks.ToArray());
	         Console.WriteLine("{0} tasks started and executed.", nTasks);
	      }
	      catch (AggregateException e) {
	         String msg = String.Empty;
	         foreach (var ie in e.InnerExceptions) {
	            Console.WriteLine("{0}", ie.GetType().Name);
	            if (! msg.Contains(ie.Message))
	               msg += ie.Message + Environment.NewLine;
	         }
	         Console.WriteLine("\nException Message(s):");
	         Console.WriteLine(msg);
	      }
	   }
	}
	

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/currency2.cs

	using System;
	using System.Globalization;
	using System.IO;
	using System.Runtime.Serialization.Formatters.Binary;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
	      Decimal value = 16039.47m;
	      Console.WriteLine("Current Culture: {0}", CultureInfo.CurrentCulture.DisplayName);
	      Console.WriteLine("Currency Value: {0:C2}", value); 
	     
	      BinaryFormatter bf = new BinaryFormatter();
	      FileStream fw = new FileStream("currency.dat", FileMode.Create);
	      CurrencyValue data = new CurrencyValue(value, CultureInfo.CurrentCulture.Name);
	      bf.Serialize(fw, data);
	      fw.Close();
	      Console.WriteLine();
	      
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-GB");
	      Console.WriteLine("Current Culture: {0}", CultureInfo.CurrentCulture.DisplayName);
	      
	      FileStream fr = new FileStream("currency.dat", FileMode.Open);
	      CurrencyValue restoredData = (CurrencyValue) bf.Deserialize(fr);
	      fr.Close();
	      
	      CultureInfo culture = CultureInfo.CreateSpecificCulture(restoredData.CultureName);
	      Console.WriteLine("Currency Value: {0}", restoredData.Amount.ToString("C2", culture));
	   }
	}
	
	[Serializable] internal struct CurrencyValue
	{
	   public CurrencyValue(Decimal amount, string name)
	   {
	      this.Amount = amount; 
	      this.CultureName = name;
	   }
	   
	   public Decimal Amount;
	   public string CultureName;      
	}

snippet assemblyinstaller_install

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller_Install/assemblyinstaller_install.cs

	
	/* The following example demonstrates the 'AssemblyInstaller()' constructor and
	   the 'Install' and 'Commit' methods of the 'AssemblyInstaller' class.
	   An object of the AssemblyInstaller class is created by invoking the constructor.
	   The properties of this object are set and the install and commit methods are
	   called to install the 'MyAssembly_Install.exe' assembly.
	*/
	using System;
	using System.Configuration.Install;
	using System.Collections;
	using System.Collections.Specialized;
	
	class MyInstallClass
	{
	   static void Main()
	   {
	      IDictionary mySavedState = new Hashtable();
	
	      Console.WriteLine( "" );
	
	      try
	      {
	         string[] myString = new string[ 1 ];
	         myString[ 0 ] = "/logFile=example.log";
	
	         AssemblyInstaller myAssemblyInstaller = new AssemblyInstaller();
	
	         myAssemblyInstaller.Path = "MyAssembly_Install.exe";
	         myAssemblyInstaller.CommandLine = myString;
	         myAssemblyInstaller.UseNewContext = true;
	
	         mySavedState.Clear();
	
	         myAssemblyInstaller.Install( mySavedState );
	
	         myAssemblyInstaller.Commit( mySavedState );
	      }
	      catch( Exception )
	      {
	      }
	
	
	   }
	}
snippet eventlogentry_source

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/eventlogentry_source.cs

	
	/*
	The following example demonstrates the properties 'EntryType' and 'Source' 
	of the class 'EventLogEntry'. 
	A new instance of 'EventLog' class is created and is associated to existing 
	System Log file of local machine. User selects the event type and the latest
	entry in the log file of that type and it's source is displayed.
	*/
	using System;
	using System.Diagnostics;
	   class MyEventlogClass
	   {
	      public static void Main()
	      {
	         String myEventType=null;
	         EventLog myEventLog = new EventLog("System", ".");
	         Console.WriteLine("1:Error");
	         Console.WriteLine("2:Information");
	         Console.WriteLine("3:Warning");
	         Console.WriteLine("Select the Event Type");
	         int myOption=Convert.ToInt32(Console.ReadLine());
	         switch(myOption)
	         {
	            case 1:  myEventType="Error";
	                     break;
	            case 2:  myEventType="Information";
	                     break;
	            case 3:  myEventType="Warning";
	                     break;
	            default: break;
	         }
	
	            EventLogEntryCollection myLogEntryCollection=myEventLog.Entries;
	            int myCount =myLogEntryCollection.Count;
	            for(int i=myCount-1;i>-1;i--)
	            {
	               EventLogEntry myLogEntry = myLogEntryCollection[i];
	               if(myLogEntry.EntryType.ToString().Equals(myEventType))
	               {
	                  Console.WriteLine(myLogEntry.Source
	                     +" was the source of last event of type "
	                     +myLogEntry.EntryType);
	                  return;
	               }
	            }
	
	         }
	   }

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/dates8.cs

	using System;
	using System.IO;
	using System.Runtime.Serialization.Formatters.Binary;
	
	public class Example
	{
	   public static void Main()
	   {
	      BinaryFormatter formatter = new BinaryFormatter();
	      
	      DateTime dateOriginal = new DateTime(2013, 3, 30, 18, 0, 0);
	      dateOriginal = DateTime.SpecifyKind(dateOriginal, DateTimeKind.Local);
	
	      if (! File.Exists("DateInfo2.dat")) {
	         StreamWriter sw = new StreamWriter("DateInfo2.dat");
	         sw.Write("{0:o}|{1:r}|{1:u}", dateOriginal, 
	                                       dateOriginal.ToUniversalTime()); 
	         sw.Close();
	         Console.WriteLine("Serialized dates to DateInfo.dat");
	      }   
	      if (! File.Exists("DateInfo2.bin")) {
	         FileStream fsIn = new FileStream("DateInfo2.bin", FileMode.Create);
	         formatter.Serialize(fsIn, dateOriginal.ToUniversalTime());
	         fsIn.Close();
	         Console.WriteLine("Serialized date to DateInfo.bin");
	      }
	      Console.WriteLine();
	      
	      StreamReader sr = new StreamReader("DateInfo2.dat");
	      string datesToSplit = sr.ReadToEnd();
	      string[] dateStrings = datesToSplit.Split('|');
	      for (int ctr = 0; ctr < dateStrings.Length; ctr++) {
	         DateTime newDate = DateTime.Parse(dateStrings[ctr]);
	         if (ctr == 1) {
	            Console.WriteLine("'{0}' --> {1} {2}", 
	                              dateStrings[ctr], newDate, newDate.Kind);
	         }
	         else {
	            DateTime newLocalDate = newDate.ToLocalTime();
	            Console.WriteLine("'{0}' --> {1} {2}", 
	                              dateStrings[ctr], newLocalDate, newLocalDate.Kind);
	         }
	      }
	      Console.WriteLine();
	      
	      FileStream fsOut = new FileStream("DateInfo2.bin", FileMode.Open);
	      DateTime restoredDate = (DateTime) formatter.Deserialize(fsOut);
	      restoredDate = restoredDate.ToLocalTime();
	      Console.WriteLine("{0} {1}", restoredDate, restoredDate.Kind);
	   }
	}

snippet type_getnestedclassesabs

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedClassesAbs/type_getnestedclassesabs.cs

	using System;
	using System.Reflection;
	
	public class MyTypeClass
	{
	    public class Myclass1
	    {
	    }
	
	    public class Myclass2 
	    {
	    }
	
	    protected class MyClass3
	    {
	    }
	
	    protected class MyClass4
	    {
	    }
	}
	
	public class TypeMain
	{
	    public static void Main() 
	    {
	        Type myType = (typeof(MyTypeClass));
	        Type[] myTypeArray = myType.GetNestedTypes(BindingFlags.Public);
	        Console.WriteLine("The number of nested public classes is {0}.", myTypeArray.Length);
	        DisplayTypeInfo(myTypeArray);
	        Console.WriteLine();
	        
	        Type[] myTypeArray1 = myType.GetNestedTypes(BindingFlags.NonPublic|BindingFlags.Instance);
	        Console.WriteLine("The number of nested protected classes is {0}.", myTypeArray1.Length);
	        DisplayTypeInfo(myTypeArray1);		
	    }
	
	    public static void DisplayTypeInfo(Type[] myArrayType)
	    {
	        foreach (var t in myArrayType)
	            Console.WriteLine("The name of the nested class is {0}.", t.FullName);
	    }
	}
snippet stringbuilder

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StringBuilder/StringBuilder.cs

	using System;
	using System.Text;
	
	public sealed class App 
	{
	    static void Main() 
	    {
	        StringBuilder sb = new StringBuilder("ABC", 50);
	
	        sb.Append(new char[] { 'D', 'E', 'F' });
	
	        sb.AppendFormat("GHI{0}{1}", 'J', 'k');
	
	        Console.WriteLine("{0} chars: {1}", sb.Length, sb.ToString());
	
	        sb.Insert(0, "Alphabet: ");
	
	        sb.Replace('k', 'K');
	
	        Console.WriteLine("{0} chars: {1}", sb.Length, sb.ToString());
	    }
	}
	
snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/dates2.cs

	using System;
	using System.IO;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
	      DateTime[] dates = { new DateTime(2013, 1, 9), 
	                           new DateTime(2013, 8, 18) };
	      StreamWriter sw = new StreamWriter("dateData.dat");
	      sw.Write("{0:d}|{1:d}", dates[0], dates[1]);
	      sw.Close();
	      
	      StreamReader sr = new StreamReader("dateData.dat");
	      string dateData = sr.ReadToEnd();
	      sr.Close();
	      string[] dateStrings = dateData.Split('|');
	      
	      Console.WriteLine("Current Culture: {0}", 
	                        Thread.CurrentThread.CurrentCulture.DisplayName); 
	      foreach (var dateStr in dateStrings) {
	         DateTime restoredDate;
	         if (DateTime.TryParse(dateStr, out restoredDate))
	            Console.WriteLine("The date is {0:D}", restoredDate);
	         else
	            Console.WriteLine("ERROR: Unable to parse {0}", dateStr);
	      }
	      Console.WriteLine();
	                                             
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-GB");
	      Console.WriteLine("Current Culture: {0}", 
	                        Thread.CurrentThread.CurrentCulture.DisplayName); 
	      foreach (var dateStr in dateStrings) {
	         DateTime restoredDate;
	         if (DateTime.TryParse(dateStr, out restoredDate))
	            Console.WriteLine("The date is {0:D}", restoredDate);
	         else
	            Console.WriteLine("ERROR: Unable to parse {0}", dateStr);
	      }                                       
	   }
	}

snippet eventsoverview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/eventsoverview/programnodata.cs

	using System;
	
	namespace ConsoleApplication1
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            Counter c = new Counter(new Random().Next(10));
	            c.ThresholdReached += c_ThresholdReached;
	
	            Console.WriteLine("press 'a' key to increase total");
	            while (Console.ReadKey(true).KeyChar == 'a')
	            {
	                Console.WriteLine("adding one");
	                c.Add(1);
	            }
	        }
	
	        static void c_ThresholdReached(object sender, EventArgs e)
	        {
	            Console.WriteLine("The threshold was reached.");
	            Environment.Exit(0); 
	        }
	    }
	
	    class Counter
	    {
	        private int threshold;
	        private int total;
	
	        public Counter(int passedThreshold)
	        {
	            threshold = passedThreshold;
	        }
	
	        public void Add(int x)
	        {
	            total += x;
	            if (total >= threshold)
	            {
	                OnThresholdReached(EventArgs.Empty);
	            }
	        }
	
	        protected virtual void OnThresholdReached(EventArgs e)
	        {
	            EventHandler handler = ThresholdReached;
	            if (handler != null)
	            {
	                handler(this, e);
	            }
	        }
	
	        public event EventHandler ThresholdReached;
	    }
	}

snippet codedomprovider_provideroptions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/codedomprovider_provideroptions/program.cs

	using System;
	using System.CodeDom.Compiler;
	using Microsoft.CSharp;
	using Microsoft.VisualBasic;
	using System.Collections.Generic;
	
	namespace ProviderOptions
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            DisplayCSharpCompilerInfo();
	            DisplayVBCompilerInfo();
	            Console.WriteLine("Press Enter key to exit.");
	            Console.ReadLine();
	        }
	        static void DisplayCSharpCompilerInfo()
	        {
	            Dictionary<string, string> provOptions =
	            new Dictionary<string, string>();
	
	            provOptions.Add("CompilerVersion", "v4");
	            CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp", provOptions);
	
	            Console.WriteLine("CSharp provider is {0}",
	                provider.ToString());
	            Console.WriteLine("  Provider hash code:     {0}",
	                provider.GetHashCode().ToString());
	            Console.WriteLine("  Default file extension: {0}",
	                provider.FileExtension);
	
	            Console.WriteLine();
	        }
	
	        static void DisplayVBCompilerInfo()
	        {
	            Dictionary<string, string> provOptions =
	            new Dictionary<string, string>();
	
	            provOptions.Add("CompilerVersion", "v3.5");
	            CodeDomProvider provider = CodeDomProvider.CreateProvider("VisualBasic", provOptions);
	
	            Console.WriteLine("Visual Basic provider is {0}",
	                provider.ToString());
	            Console.WriteLine("  Provider hash code:     {0}",
	                provider.GetHashCode().ToString());
	            Console.WriteLine("  Default file extension: {0}",
	                provider.FileExtension);
	
	            Console.WriteLine();
	        }
	    }
	}
snippet stacktracesample2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StackTraceSample2/stacktracesample2.cs

	using System;
	using System.Diagnostics;
	
	class MyConsoleApp
	{
	    [STAThread]
	    static void Main()
	    {
	        MyConsoleApp myApp = new MyConsoleApp();
	        myApp.MyPublicMethod();
	    }
	
	    public void MyPublicMethod()
	    {
	        MyInnerClass helperClass = new MyInnerClass();
	        helperClass.ThrowsException();
	    }
	
	    class MyInnerClass
	    {
	        public void ThrowsException()
	        {
	            try {
	                throw new Exception("A problem was encountered.");
	            }
	            catch (Exception) {
	
	                StackTrace st = new StackTrace(1, true);
	                StackFrame [] stFrames = st.GetFrames();
	
	                foreach(StackFrame sf in stFrames )
	                {
	                   Console.WriteLine("Method: {0}", sf.GetMethod() );
	                }
	            }
	        }
	    }
	}
	/*
	This console application produces the following output
	when compiled with optimization off.
	
	Note that the ThrowsException() method is not identified in
	this stack trace.
	
	  Method: Void MyPublicMethod()
	  Method: Void Main()
	
	*/

snippet type_isprimitiveimpl

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsPrimitiveImpl/type_isprimitiveimpl.cs

	using System;
	using System.Reflection;
	public class MyTypeDelegatorClass : TypeDelegator
	{
	    public string myElementType = null;
	    private Type myType = null ; 
	    public MyTypeDelegatorClass(Type myType) : base(myType)
	    {
	        this.myType = myType;
	    }
	    protected override bool IsPrimitiveImpl()
	    {
	        if(myType.IsPrimitive)
	        { 
	            myElementType = "primitive";
	            return true;
	        }
	        return false;
	    }
	}
	public class MyTypeDemoClass
	{
	    public static void Main()
	    {
	        try
	        {
	            Console.WriteLine ("Determine whether int is a primitive type.");
	            MyTypeDelegatorClass myType;
	            myType = new MyTypeDelegatorClass(typeof(int));
	            if( myType.IsPrimitive)
	            {
	                Console.WriteLine(typeof(int) + " is a primitive type.");
	            }
	            else
	            {
	                Console.WriteLine(typeof(int) + " is not a primitive type.");
	            }
	            Console.WriteLine ("\nDetermine whether string is a primitive type.");
	            myType = new MyTypeDelegatorClass(typeof(string));
	            if( myType.IsPrimitive)
	            {
	                Console.WriteLine(typeof(string) + " is a primitive type.");
	            }
	            else
	            {
	                Console.WriteLine(typeof(string) + " is not a primitive type.");
	            }
	        }
	        catch( Exception e )
	        {
	            Console.WriteLine("Exception: {0}", e.Message);
	        }
	    }
	}
snippet installercollection_addrange1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_AddRange1/installercollection_addrange1.cs

	
	/*
	   The following example demonstrates the 'AddRange(Installer[])'
	   method of the 'InstallerCollection' class. It Creates 'AssemblyInstaller' 
	   instances for 'MyAssembly1.exe' and for 'MyAssembly2.exe'. These 
	   instances are added to an instance of 'TransactedInstaller'. The installation 
	   process installs both 'MyAssembly1.exe' and 'MyAssembly2.exe'.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Collections;
	using System.Configuration.Install;
	using System.IO;
	
	public class InstallerCollection_AddRange1
	{
	   public static void Main()
	   {
	      try
	      {
	         ArrayList myInstallers =new ArrayList();
	         TransactedInstaller myTransactedInstaller = new TransactedInstaller();
	         AssemblyInstaller myAssemblyInstaller;
	         InstallContext myInstallContext;
	
	         myAssemblyInstaller = 
	            new AssemblyInstaller("MyAssembly1.exe", null);
	
	         myInstallers.Add(myAssemblyInstaller);
	
	         myAssemblyInstaller = 
	            new AssemblyInstaller("MyAssembly2.exe", null);
	
	         myInstallers.Add(myAssemblyInstaller);
	
	         myTransactedInstaller.Installers.AddRange((Installer[])myInstallers.ToArray(typeof(Installer)));
	
	         myInstallContext = 
	            new InstallContext("Install.log", null);
	         myTransactedInstaller.Context = myInstallContext;
	
	         myTransactedInstaller.Install(new Hashtable());
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("Exception raised : {0}", e.Message);
	      }
	   }  
	} 
snippet activatorx

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/source2.cs

	using System;
	
	class DynamicInstanceList
	{
	    private static string instanceSpec = "System.EventArgs;System.Random;" +
	        "System.Exception;System.Object;System.Version";
	
	    public static void Main()
	    {
	        string[] instances = instanceSpec.Split(';');
	        Array instlist = Array.CreateInstance(typeof(object), instances.Length);
	        object item;
	        for (int i = 0; i < instances.Length; i++)
	        {
	            Console.WriteLine("Creating instance of: {0}", instances[i]);
	            item = Activator.CreateInstance(Type.GetType(instances[i]));
	            instlist.SetValue(item, i);
	        }
	        Console.WriteLine("\nObjects and their default values:\n");
	        foreach (object o in instlist)
	        {
	            Console.WriteLine("Type:     {0}\nValue:    {1}\nHashCode: {2}\n",
	                o.GetType().FullName, o.ToString(), o.GetHashCode());
	        }
	    }
	}
	

snippet assemblybuilder_setcustomattribute2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute2/assemblybuilder_setcustomattribute2.cs

	/*
	   The following program demonstrates the 'SetCustomAttribute(ConstructorInfo, byte[])'
	   method of 'AssemblyBuilder' class. It defines a 'MyAttribute' class which is derived
	   from 'Attribute' class. It builds an assembly by setting 'MyAttribute' custom attribute
	   and defines 'HelloWorld' type. Then it gets the custom attributes of 'HelloWorld' type
	   and displays its contents to the console.
	*/
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	
	
	[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
	public class MyAttribute : Attribute
	{
	   public bool s;
	
	   public MyAttribute(bool s)
	   {
	      this.s = s;
	   }
	}
	
	class MyApplication
	{
	   public static void Main()
	   {
	      Type customAttribute = CreateCallee(Thread.GetDomain());
	      object[] attributes = customAttribute.Assembly.GetCustomAttributes(true);
	      Console.WriteLine("MyAttribute custom attribute contains : ");
	      for(int index=0; index < attributes.Length; index++)
	      {
	         if(attributes[index] is MyAttribute)
	         {
	            Console.WriteLine("s : " + ((MyAttribute)attributes[index]).s);
	            break;
	         }
	      }
	   }
	
	   private static Type CreateCallee(AppDomain domain)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedAssembly";
	      AssemblyBuilder myAssembly = domain.DefineDynamicAssembly(myAssemblyName,
	         AssemblyBuilderAccess.Run);
	      Type myType = typeof(MyAttribute);
	      ConstructorInfo infoConstructor = myType.GetConstructor(new Type[]{typeof(bool)});
	      myAssembly.SetCustomAttribute(infoConstructor, new byte[]{01,00,01});
	      ModuleBuilder myModule = myAssembly.DefineDynamicModule("EmittedModule");
	      TypeBuilder helloWorldClass = myModule.DefineType("HelloWorld", TypeAttributes.Public);
	
	      return(helloWorldClass.CreateType());
	  }
	}
snippet string_equals

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_equals/equals.cs

	using System;
	using System.Text;
	
	class Sample {
	    public static void Main() {
	    StringBuilder sb = new StringBuilder("abcd");
	    String      str1 = "abcd";
	    String      str2 = null;
	    Object	o2   = null;
	
	    Console.WriteLine();
	    Console.WriteLine(" *  The value of String str1 is '{0}'.", str1);
	    Console.WriteLine(" *  The value of StringBuilder sb is '{0}'.", sb.ToString());
	
	    Console.WriteLine();
	    Console.WriteLine("1a) String.Equals(Object). Object is a StringBuilder, not a String.");
	    Console.WriteLine("    Is str1 equal to sb?: {0}", str1.Equals(sb));
	
	    Console.WriteLine();
	    Console.WriteLine("1b) String.Equals(Object). Object is a String.");
	    str2 = sb.ToString();
	    o2   = str2;
	    Console.WriteLine(" *  The value of Object o2 is '{0}'.", o2);
	    Console.WriteLine("    Is str1 equal to o2?: {0}", str1.Equals(o2));
	
	    Console.WriteLine();
	    Console.WriteLine(" 2) String.Equals(String)");
	    Console.WriteLine(" *  The value of String str2 is '{0}'.", str2);
	    Console.WriteLine("    Is str1 equal to str2?: {0}", str1.Equals(str2));
	
	    Console.WriteLine();
	    Console.WriteLine(" 3) String.Equals(String, String)");
	    Console.WriteLine("    Is str1 equal to str2?: {0}", String.Equals(str1, str2));
	    }
	}
	/*
	This example produces the following results:
	
	 *  The value of String str1 is 'abcd'.
	 *  The value of StringBuilder sb is 'abcd'.
	
	1a) String.Equals(Object). Object is a StringBuilder, not a String.
	    Is str1 equal to sb?: False
	
	1b) String.Equals(Object). Object is a String.
	 *  The value of Object o2 is 'abcd'.
	    Is str1 equal to o2?: True
	
	 2) String.Equals(String)
	 *  The value of String str2 is 'abcd'.
	    Is str1 equal to str2?: True
	
	 3) String.Equals(String, String)
	    Is str1 equal to str2?: True
	*/
snippet delegate_createdelegate_relaxedfit

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Delegate_CreateDelegate_RelaxedFit/source.cs

	using System;
	using System.Reflection;
	
	public class Base {}
	
	public class Derived : Base
	{
	    public static Derived MyMethod(Base arg)
	    {
	        Base dummy = arg;
	        return new Derived();
	    }
	}
	
	public delegate Base Example(Derived arg);
	
	class Test
	{
	    public static void Main()
	    {
	        BindingFlags flags = BindingFlags.Public | BindingFlags.Static;
	
	        MethodInfo minfo = typeof(Derived).GetMethod("MyMethod", flags);
	
	        Example ex = 
	            (Example) Delegate.CreateDelegate(typeof(Example), minfo);
	
	        Base b = ex(new Derived());
	    }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/type3.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	[CLSCompliant(false)] 
	public class Counter
	{
	   UInt32 ctr;
	   
	   public Counter()
	   {
	      ctr = 0;
	   }
	   
	   protected Counter(UInt32 ctr)
	   {
	      this.ctr = ctr;
	   }
	   
	   public override string ToString()
	   {
	      return String.Format("{0}). ", ctr);
	   }
	
	   public UInt32 Value
	   {
	      get { return ctr; }
	   }
	   
	   public void Increment() 
	   {
	      ctr += (uint) 1;
	   }
	}
	
	public class NonZeroCounter : Counter
	{
	   public NonZeroCounter(int startIndex) : this((uint) startIndex)
	   {
	   }
	   
	   private NonZeroCounter(UInt32 startIndex) : base(startIndex)
	   {
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}

snippet conceptual_threading_resuming

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_Threading_Resuming/Sleep1.cs

	using System;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      var sleepingThread = new Thread(Example.SleepIndefinitely);
	      sleepingThread.Name = "Sleeping";
	      sleepingThread.Start();
	      Thread.Sleep(2000);
	      sleepingThread.Interrupt();
	      
	      Thread.Sleep(1000);
	      
	      sleepingThread = new Thread(Example.SleepIndefinitely);
	      sleepingThread.Name = "Sleeping2";
	      sleepingThread.Start();
	      Thread.Sleep(2000);
	      sleepingThread.Abort();
	   }
	
	   private static void SleepIndefinitely()
	   {
	      Console.WriteLine("Thread '{0}' about to sleep indefinitely.",
	                        Thread.CurrentThread.Name);
	      try {
	         Thread.Sleep(Timeout.Infinite);
	      }
	      catch (ThreadInterruptedException) {
	         Console.WriteLine("Thread '{0}' awoken.",
	                           Thread.CurrentThread.Name);
	      }
	      catch (ThreadAbortException) {
	         Console.WriteLine("Thread '{0}' aborted.",
	                           Thread.CurrentThread.Name);
	      }
	      finally 
	      {
	         Console.WriteLine("Thread '{0}' executing finally block.", 
	                           Thread.CurrentThread.Name);
	      }
	      Console.WriteLine("Thread '{0} finishing normal execution.", 
	                        Thread.CurrentThread.Name);
	      Console.WriteLine();
	   }
	}
	

snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/culture1.cs

	using System;
	using System.Globalization;
	using System.Text.RegularExpressions;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      ShowIllegalAccess();
	      Console.WriteLine("-----");
	      ShowNoAccess();
	   }
	
	   private static void ShowIllegalAccess()
	   {   
	      CultureInfo defaultCulture = Thread.CurrentThread.CurrentCulture;
	      Thread.CurrentThread.CurrentCulture = new CultureInfo("tr-TR");
	      
	      
	      Console.WriteLine("Culture-sensitive matching ({0} culture)...", 
	                        Thread.CurrentThread.CurrentCulture.Name);
	      if (Regex.IsMatch(input, pattern, RegexOptions.IgnoreCase))
	         Console.WriteLine("URLs that access files are not allowed.");      
	      else
	         Console.WriteLine("Access to {0} is allowed.", input);
	
	      Thread.CurrentThread.CurrentCulture = defaultCulture;
	   }
	
	   private static void ShowNoAccess()
	   {      
	      CultureInfo defaultCulture = Thread.CurrentThread.CurrentCulture;
	      Thread.CurrentThread.CurrentCulture = new CultureInfo("tr-TR");
	      
	      
	      Console.WriteLine("Culture-insensitive matching...");
	      if (Regex.IsMatch(input, pattern, 
	                        RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) 
	         Console.WriteLine("URLs that access files are not allowed.");
	      else
	         Console.WriteLine("Access to {0} is allowed.", input);
	
	      Thread.CurrentThread.CurrentCulture = defaultCulture;
	   }
	}

snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/composite1.cs

	using System;
	
	public class Product
	{
	   private string productName;
	   private int onHand;
	   private decimal cost;
	
	   public Product(string name)
	   {
	      this.productName = name;
	   }
	   
	   public int Quantity
	   {
	      get { return this.onHand; }
	      set { this.onHand = value; }
	   }
	   
	   public decimal Price
	   {
	      get { return this.cost; }
	      set { this.cost = value; }
	   }
	   
	   public decimal Value
	   {
	      get { return this.cost * this.onHand; }
	   }
	   
	   public string Name
	   {
	      get { return this.productName; }
	   }
	   
	   public override string ToString()
	   {
	      return this.productName;
	   }   
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      Product item1 = new Product("WidgetA");
	      item1.Quantity = 17;
	      item1.Price = 6.32m;
	      DateTime thatDate = new DateTime(2009, 5, 1); 
	      string result;
	      result = String.Format("On {0:d}, the inventory of {1} was worth {2:C2}.", 
	                             thatDate, item1, item1.Value);
	      Console.WriteLine(result);                            
	   }
	}

snippet stacktracesample3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StackTraceSample3/stacktracesample3.cs

	using System;
	using System.Diagnostics;
	
	class MyConsoleApp
	{
	    [STAThread]
	    static void Main(string[] args)
	    {
	        MyConsoleApp myApp = new MyConsoleApp();
	        myApp.MyPublicMethod();
	    }
	
	    public void MyPublicMethod()
	    {
	        MyInnerClass helperClass = new MyInnerClass();
	        helperClass.ThrowsException();
	    }
	    class MyInnerClass
	    {
	        public void ThrowsException()
	        {
	            try
	            {
	                throw new Exception("A problem was encountered.");
	            }
	            catch (Exception)
	            {
	                StackFrame fr = new StackFrame(1,true);
	                StackTrace st = new StackTrace(fr);
	                EventLog.WriteEntry(fr.GetMethod().Name,
	                                    st.ToString(),
	                                    EventLogEntryType.Warning);
	            }
	        }
	    }
	} 
snippet io_path_getinvalidfile_pathchars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_Path_GetInvalidFile_PathChars/example.cs

	using System;
	using System.IO;
	
	namespace PathExample
	{
	    class GetCharExample
	    {
	        public static void Main()
	        {
	            char[] invalidPathChars = Path.GetInvalidPathChars();
	
	            Console.WriteLine("The following characters are invalid in a path:");
	            ShowChars(invalidPathChars);
	            Console.WriteLine();
	
	            char[] invalidFileChars = Path.GetInvalidFileNameChars();
	
	            Console.WriteLine("The following characters are invalid in a filename:");
	            ShowChars(invalidFileChars);
	        }
	
	        public static void ShowChars(char[] charArray)
	        {
	            Console.WriteLine("Char\tHex Value");
	            foreach (char someChar in charArray)
	            {
	                if (Char.IsWhiteSpace(someChar))
	                {
	                    Console.WriteLine(",\t{0:X4}", (int)someChar);
	                }
	                else
	                {
	                    Console.WriteLine("{0:c},\t{1:X4}", someChar, (int)someChar);
	                }
	            }
	        }
	    }
	}
snippet ecma_system_object_equals4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ECMA_System_Object_Equals4/equals4.cs

	using System;
	
	public struct Complex
	{
	   public double re, im;
	
	   public override bool Equals(Object obj)
	   {
	      return obj is Complex && this == (Complex)obj;
	   }
	
	   public override int GetHashCode()
	   {
	      return Tuple.Create(re, im).GetHashCode();
	   }
	
	   public static bool operator ==(Complex x, Complex y)
	   {
	      return x.re == y.re && x.im == y.im;
	   }
	
	   public static bool operator !=(Complex x, Complex y)
	   {
	      return !(x == y);
	   }
	
	    public override String ToString()
	    {
	       return String.Format("({0}, {1})", re, im);
	    } 
	}
	
	class MyClass 
	{
	  public static void Main() 
	  {
	    Complex cmplx1, cmplx2;
	
	    cmplx1.re = 4.0;
	    cmplx1.im = 1.0;
	
	    cmplx2.re = 2.0;
	    cmplx2.im = 1.0;
	
	    Console.WriteLine("{0} <> {1}: {2}", cmplx1, cmplx2, cmplx1 != cmplx2);        
	    Console.WriteLine("{0} = {1}: {2}", cmplx1, cmplx2, cmplx1.Equals(cmplx2));        
	      
	    cmplx2.re = 4.0;
	      
	    Console.WriteLine("{0} = {1}: {2}", cmplx1, cmplx2, cmplx1 == cmplx2);        
	    Console.WriteLine("{0} = {1}: {2}", cmplx1, cmplx2, cmplx1.Equals(cmplx2));          
	  }
	}

snippet countercreationdatacollection_countercreationdatacollection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CounterCreationDataCollection_CounterCreationDataCollection/countercreationdatacollection_ctor_countercreationdatacollection.cs

	/*
	   The following program demonstrates 'CounterCreationDataCollection(CounterCreationDataCollection)'
	   constructor of 'CounterCreationDataCollection' class.
	   An instance of 'CounterCreationDataCollection' is created by passing another instance
	   of 'CounterCreationDataCollection'. The counters of the 'CounterCreationDataCollection'
	   are displayed to the console.
	 */
	using System;
	using System.Diagnostics;
	
	public class CounterCreationExample
	{
	
	    public static void Main()
	    {
	        try
	        {
	            string myCategoryName;
	            int numberOfCounters;
	            Console.Write("Enter the number of counters : ");
	            numberOfCounters = int.Parse(Console.ReadLine());
	            CounterCreationData[] myCounterCreationData =
	               new CounterCreationData[numberOfCounters];
	            for (int i = 0; i < numberOfCounters; i++)
	            {
	                Console.Write("Enter the counter name for {0} counter : ", i);
	                myCounterCreationData[i] = new CounterCreationData();
	                myCounterCreationData[i].CounterName = Console.ReadLine();
	            }
	            CounterCreationDataCollection myCounterCollection =
	               new CounterCreationDataCollection(myCounterCreationData);
	            Console.Write("Enter the category Name:");
	            myCategoryName = Console.ReadLine();
	            if (!PerformanceCounterCategory.Exists(myCategoryName))
	            {
	                CounterCreationDataCollection myNewCounterCollection =
	                   new CounterCreationDataCollection(myCounterCollection);
	                PerformanceCounterCategory.Create(myCategoryName, "Sample Category",
	                PerformanceCounterCategoryType.SingleInstance, myNewCounterCollection);
	
	
	                Console.WriteLine("The list of counters in 'CounterCollection' are : ");
	                for (int i = 0; i < myNewCounterCollection.Count; i++)
	                    Console.WriteLine("Counter {0} is '{1}'", i, myNewCounterCollection[i].CounterName);
	            }
	            else
	            {
	                Console.WriteLine("The category already exists");
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception: {0}.", e.Message);
	            return;
	        }
	    }
	} 
snippet openfilewindowsstore

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/openfilewindowsstore/mainpage.xaml.cs

	using System;
	using System.IO;
	using System.Runtime.InteropServices.WindowsRuntime;
	using Windows.UI.Xaml;
	using Windows.UI.Xaml.Controls;
	using Windows.Storage;
	using System.Text;
	using Windows.Storage.Pickers;
	using Windows.UI.Popups; 
	
	namespace OpenFileWindowsStore
	{
	    public sealed partial class MainPage : Page
	    {
	        public MainPage()
	        {
	            this.InitializeComponent();
	        }
	
	        FileOpenPicker picker = new FileOpenPicker();
	        private async void Button_Click(object sender, RoutedEventArgs e)
	        {
	         
	            picker.SuggestedStartLocation = PickerLocationId.DocumentsLibrary;
	            picker.ViewMode = PickerViewMode.List;
	            picker.FileTypeFilter.Add(".txt");
	
	            StorageFile result = await picker.PickSingleFileAsync();
	
	            if (result != null)
	            {
	                try
	                {
	                    await FileIO.WriteTextAsync(result, UserInputTextBox.Text);
	
	                    StatusTextBox.Text = "Status: File saved successfully";
	                }
	                catch (Exception ex)
	                {
	                    StatusTextBox.Text = "Status: error saving the file - " + ex.Message;
	                }
	            }
	            else
	                StatusTextBox.Text = "Status: User cancelled save operation";
	        }
	    }
	}
	 
	
	

snippet codepropertysetvalueexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodePropertySetValueExample/codepropertysetvalueexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodePropertySetValueExample
	    {
	        public CodePropertySetValueExample()
	        {
	            CodeTypeDeclaration type1 = new CodeTypeDeclaration("Type1");
	
	            CodeConstructor constructor1 = new CodeConstructor();
	            constructor1.Attributes = MemberAttributes.Public;
	            type1.Members.Add( constructor1 );
	
	            CodeMemberField field1 = new CodeMemberField("System.Int32", "integerField");
	            type1.Members.Add( field1 );
	
	            CodeMemberProperty property1 = new CodeMemberProperty();
	            property1.GetStatements.Add( new CodeMethodReturnStatement( new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "integerField") ) );
	            property1.SetStatements.Add( new CodeAssignStatement( new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "integerField"), 
	                                                new CodePropertySetValueReferenceExpression() ) );
	            type1.Members.Add( property1 );
	
	
	        }
	    }
	}
snippet asyncdesignpattern

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncDesignPattern/Async_EndBlock.cs

	/*
	The following example demonstrates using asynchronous methods to
	get Domain Name System information for the specified host computer.
	*/
	
	using System;
	using System.Net;
	using System.Net.Sockets;
	
	namespace Examples.AdvancedProgramming.AsynchronousOperations
	{
	    public class BlockUntilOperationCompletes
	    {
	        public static void Main(string[] args)
	        {
	            if (args.Length == 0 || args[0].Length == 0)
	            {
	                Console.WriteLine("You must specify the name of a host computer.");
	                return;
	            }
	            IAsyncResult result = Dns.BeginGetHostEntry(args[0], null, null);
	            Console.WriteLine("Processing your request for information...");
	            try 
	            {
	                IPHostEntry host = Dns.EndGetHostEntry(result);
	                string[] aliases = host.Aliases;
	                IPAddress[] addresses = host.AddressList;
	                if (aliases.Length > 0)
	                {
	                    Console.WriteLine("Aliases");
	                    for (int i = 0; i < aliases.Length; i++)
	                    {
	                        Console.WriteLine("{0}", aliases[i]);
	                    }
	                }
	                if (addresses.Length > 0)
	                {
	                    Console.WriteLine("Addresses");
	                    for (int i = 0; i < addresses.Length; i++)
	                    {
	                        Console.WriteLine("{0}",addresses[i].ToString());
	                    }
	                }
	            }
	            catch (SocketException e)
	            {
	                Console.WriteLine("An exception occurred while processing the request: {0}", e.Message);
	            }
	        }
	    }
	}
snippet math_sign

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/math_sign/sign.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string str = "{0}: {1,3} is {2} zero.";
	    string nl = Environment.NewLine;
	
	    byte     xByte1    = 0;	
	    short    xShort1   = -2;
	    int      xInt1     = -3;
	    long     xLong1    = -4;
	    float    xSingle1  = 0.0f;
	    double   xDouble1  = 6.0;
	    Decimal  xDecimal1 = -7m;
	
	    sbyte    xSbyte1   = -101;
	
	    Console.WriteLine("{0}Test the sign of the following types of values:", nl);
	    Console.WriteLine(str, "Byte   ", xByte1, Test(Math.Sign(xByte1)));
	    Console.WriteLine(str, "Int16  ", xShort1, Test(Math.Sign(xShort1)));
	    Console.WriteLine(str, "Int32  ", xInt1, Test(Math.Sign(xInt1)));
	    Console.WriteLine(str, "Int64  ", xLong1, Test(Math.Sign(xLong1)));
	    Console.WriteLine(str, "Single ", xSingle1, Test(Math.Sign(xSingle1)));
	    Console.WriteLine(str, "Double ", xDouble1, Test(Math.Sign(xDouble1)));
	    Console.WriteLine(str, "Decimal", xDecimal1, Test(Math.Sign(xDecimal1)));
	    Console.WriteLine("{0}The following type is not CLS-compliant.", nl);
	    Console.WriteLine(str, "SByte  ", xSbyte1, Test(Math.Sign(xSbyte1)));
	    }
	    public static String Test(int compare)
	    {
	    if (compare == 0) 
	       return "equal to";
	    else if (compare < 0)  
	        return "less than";
	    else 
	        return "greater than";
	    }
	}
	/*
	This example produces the following results:
	
	Test the sign of the following types of values:
	Byte   :   0 is equal to zero.
	Int16  :  -2 is less than zero.
	Int32  :  -3 is less than zero.
	Int64  :  -4 is less than zero.
	Single :   0 is equal to zero.
	Double :   6 is greater than zero.
	Decimal:  -7 is less than zero.
	
	The following type is not CLS-compliant.
	SByte  : -101 is less than zero.
	*/
snippet stringstartswith

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringstartswith/stringstartswith.cs

	using System;
	
	public class Example 
	{
	   public static void Main() {
	      string [] strSource = { "<b>This is bold text</b>", "<H1>This is large Text</H1>",
	                "<b><i><font color=green>This has multiple tags</font></i></b>",
	                "<b>This has <i>embedded</i> tags.</b>",
	                "<This line simply begins with a lesser than symbol, it should not be modified" };
	
	      Console.WriteLine("The original strings:");
	      Console.WriteLine("---------------------");
	      foreach (var s in strSource)
	         Console.WriteLine(s);
	      Console.WriteLine();
	
	      Console.WriteLine("Strings after starting tags have been stripped:");
	      Console.WriteLine("-----------------------------------------------");
	
	     foreach (var s in strSource)
	        Console.WriteLine(StripStartTags(s));
	   }
	
	   private static string StripStartTags(string item) 
	   {
	      if (item.Trim().StartsWith("<")) {
	         int lastLocation = item.IndexOf( ">" );
	         if (lastLocation >= 0) {
	            item =  item.Substring( lastLocation + 1 );
	      
	            item = StripStartTags(item);
	         }   
	      }
	
	      return item;
	   }
	}
snippet adshadowcopy

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADShadowCopy/adshadowcopy.cs

	using System;
	using System.Security.Policy;
	namespace AppDomainSnippets
	{
		class ADShadowCopy
		{
			static void Main(string[] args)
			{
	
				AppDomainSetup setup = new AppDomainSetup();
				setup.ApplicationName = "MyApplication";
	
				Evidence adevidence = AppDomain.CurrentDomain.Evidence;
				
				AppDomain domain = AppDomain.CreateDomain("MyDomain", adevidence, setup);
				
				domain.AppendPrivatePath("Assemblies");
				domain.AppendPrivatePath("MoreAssemblies");
				Console.WriteLine("RelativeSearchPath: " + domain.RelativeSearchPath);
				AppDomain.CurrentDomain.AppendPrivatePath("Assemblies");
				AppDomain.CurrentDomain.AppendPrivatePath("MoreAssemblies");
				
				domain.SetCachePath("C:\\Cache");
				domain.SetShadowCopyPath(domain.BaseDirectory + "Assemblies");
				domain.SetShadowCopyFiles();
				
				domain.Load("Assembly1 text name, Version, Culture, PublicKeyToken");
				domain.Load("Assembly2 text name, Version, Culture, PublicKeyToken");
				
				domain.ClearShadowCopyPath();
				domain.Load("Assembly3 text name, Version, Culture, PublicKeyToken");
				
				AppDomain.Unload(domain);
			}
		}
	}
snippet conceptual_generics_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_generics_overview/source.cs

	using System;
	
	namespace GenericsExample1
	{
	    public class Generic<T>
	    {
	        public T Field;
	    }
	
	    public class GenTest
	    {
	        public static void Main()
	        {
	            Generic<string> g = new Generic<string>();
	            g.Field = "A string";
	            Console.WriteLine("Generic.Field           = \"{0}\"", g.Field);
	            Console.WriteLine("Generic.Field.GetType() = {0}", g.Field.GetType().FullName);
	        }
	
	        T Generic<T>(T arg)
	        {
	            T temp = arg;
	            return temp;
	        }
	
	    }
	
	namespace GenericsExample2
	{
	    class A
	    {
	        T G<T>(T arg)
	        {
	            T temp = arg;
	            return temp;
	        }
	    }
	    class Generic<T>
	    {
	        T M(T arg)
	        {
	            T temp = arg;
	            return temp;
	        }
	    }

snippet cryptography_x509certificates_x509extensions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_X509Certificates_X509Extensions/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	
	public class CertSelect
	{
	    public static void Main()
	    {
	        try
	        {
	            X509Store store = new X509Store("MY", StoreLocation.CurrentUser);
	            store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);
	
	            X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;
	            for (int i = 0; i < collection.Count; i++)
	            {
	                foreach (X509Extension extension in collection[i].Extensions)
	                {
	                    Console.WriteLine(extension.Oid.FriendlyName + "(" + extension.Oid.Value + ")");
	   
	
	                    if (extension.Oid.FriendlyName == "Key Usage")
	                    {
	                        X509KeyUsageExtension ext = (X509KeyUsageExtension)extension;
	                        Console.WriteLine(ext.KeyUsages);
	                    }
	
	                    if (extension.Oid.FriendlyName == "Basic Constraints")
	                    {
	                        X509BasicConstraintsExtension ext = (X509BasicConstraintsExtension)extension;
	                        Console.WriteLine(ext.CertificateAuthority);
	                        Console.WriteLine(ext.HasPathLengthConstraint);
	                        Console.WriteLine(ext.PathLengthConstraint);
	                    }
	
	                    if (extension.Oid.FriendlyName == "Subject Key Identifier")
	                    {
	                        X509SubjectKeyIdentifierExtension ext = (X509SubjectKeyIdentifierExtension)extension;
	                        Console.WriteLine(ext.SubjectKeyIdentifier);
	                    }
	
	                    if (extension.Oid.FriendlyName == "Enhanced Key Usage")
	                    {
	                        X509EnhancedKeyUsageExtension ext = (X509EnhancedKeyUsageExtension)extension;
	                        OidCollection oids = ext.EnhancedKeyUsages;
	                        foreach (Oid oid in oids)
	                        {
	                            Console.WriteLine(oid.FriendlyName + "(" + oid.Value + ")");
	                        }
	                    }
	                }
	            }
	            store.Close();
	        }
	        catch (CryptographicException)
	        {
	            Console.WriteLine("Information could not be written out for this certificate.");
	        }
	    }
	}
snippet memberinfo_getcustomattributes1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MemberInfo_GetCustomAttributes1/memberinfo_getcustomattributes1.cs

	using System;
	using System.Reflection;
	
	[AttributeUsage(AttributeTargets.All)]
	public class MyAttribute : Attribute
	{
	    private string myName;
	    public MyAttribute(string name)
	    {
	        myName = name;
	    }
	    public string Name
	    {
	        get
	        {
	            return myName;
	        }
	    }
	}
	
	public class MyClass1
	{
	    [MyAttribute("This is an example attribute.")]
	    public void MyMethod(int i)
	    {
	        return;
	    }
	}
	
	public class MemberInfo_GetCustomAttributes
	{
	    public static void Main()
	    {
	        try
	        {
	            Type myType = typeof(MyClass1);
	            MemberInfo[] myMembers = myType.GetMembers();
	
	            for(int i = 0; i < myMembers.Length; i++)
	            {
	                Object[] myAttributes = myMembers[i].GetCustomAttributes(true);
	                if(myAttributes.Length > 0)
	                {
	                    Console.WriteLine("\nThe attributes for the member {0} are: \n", myMembers[i]);
	                    for(int j = 0; j < myAttributes.Length; j++)
	                        Console.WriteLine("The type of the attribute is {0}.", myAttributes[j]);
	                }
	            }
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("An exception occurred: {0}", e.Message);
	        }
	    }
	}
snippet installer

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer/installer.cs

	
	/* The following program demonstrates the use of the 'Installer'
	   class. It creates a class which inherits from 'Installer'.
	   When the 'Commit' is about to complete, 'Committing' event
	   occurs and a message is displayed when the event occurs.
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstallerClass: Installer
	{
	   public MyInstallerClass() :base()
	   {
	      this.Committed += new InstallEventHandler(MyInstaller_Committed);
	      this.Committing += new InstallEventHandler(MyInstaller_Committing);
	
	   }
	   private void MyInstaller_Committing(object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("");
	      Console.WriteLine("Committing Event occurred.");
	      Console.WriteLine("");
	   }
	   private void MyInstaller_Committed(object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("");
	      Console.WriteLine("Committed Event occurred.");
	      Console.WriteLine("");
	   }
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	   }
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	   public static void Main()
	   {
	      Console.WriteLine("Usage : installutil.exe Installer.exe ");
	   }
	}

snippet regularexpressions_language_grouping

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_language_grouping/grouping3.cs

	using System;
	using System.Text.RegularExpressions;
	
	class Example
	{
	   public static void Main() 
	   {
	      string pattern = "^[^<>]*" +
	                       "(" + 
	                       "((?'Open'<)[^<>]*)+" +
	                       "((?'Close-Open'>)[^<>]*)+" +
	                       ")*" +
	                       "(?(Open)(?!))$";
	      string input = "<abc><mno<xyz>>";
	
	      Match m = Regex.Match(input, pattern);
	      if (m.Success == true)
	      {
	         Console.WriteLine("Input: \"{0}\" \nMatch: \"{1}\"", input, m);
	         int grpCtr = 0;
	         foreach (Group grp in m.Groups)
	         {
	            Console.WriteLine("   Group {0}: {1}", grpCtr, grp.Value);
	            grpCtr++;
	            int capCtr = 0;
	            foreach (Capture cap in grp.Captures)
	            {            
	                Console.WriteLine("      Capture {0}: {1}", capCtr, cap.Value);
	                capCtr++;
	            }
	          }
	      }
	      else
	      {
	         Console.WriteLine("Match failed.");
	      }   
	    }
	}

snippet console_expandtabsex

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Console_EXPANDTABSEX/expandtabsex.cs

	using System;
	using System.IO;
	
	public class ExpandTabs
	{
	    private const int tabSize = 4;
	    private const string usageText = "Usage: EXPANDTABSEX inputfile.txt outputfile.txt";
	
	    public static void Main(string[] args)
	    {
	        StreamWriter writer = null;
	
	        if (args.Length < 2) {
	            Console.WriteLine(usageText);
	            return;
	        }
	
	        try {
	            writer = new StreamWriter(args[1]);
	            Console.SetOut(writer);
	            Console.SetIn(new StreamReader(args[0]));
	        }
	        catch(IOException e) {
	            TextWriter errorWriter = Console.Error;
	            errorWriter.WriteLine(e.Message);
	            errorWriter.WriteLine(usageText);
	            return;
	        }
	        int i;
	        while ((i = Console.Read()) != -1) {
	            char c = (char)i;
	            if (c == '\t')
	                Console.Write(("").PadRight(tabSize, ' '));
	            else
	                Console.Write(c);
	        }
	        writer.Close();
	        StreamWriter standardOutput = new StreamWriter(Console.OpenStandardOutput());
	        standardOutput.AutoFlush = true;
	        Console.SetOut(standardOutput);
	        Console.WriteLine("EXPANDTABSEX has completed the processing of {0}.", args[0]);
	        return;
	    }
	}
	

snippet tracesourceexample1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/tracesourceexample1/program.cs

	using System;
	using System.Diagnostics;
	
	class TraceTest
	{
	
	    private static TraceSource mySource = 
	            new TraceSource("TraceSourceApp");
	        static void Main(string[] args)
	        {
	            Activity1();
	
	            EventTypeFilter configFilter = 
	                (EventTypeFilter)mySource.Listeners["console"].Filter;
	
	            mySource.Listeners["console"].Filter =
	                new EventTypeFilter(SourceLevels.Warning);
	
	            mySource.Switch.Level = SourceLevels.All;
	
	            Activity2();
	
	            mySource.Listeners["console"].Filter = configFilter;
	            Activity3();
	            mySource.Close();
	            return;
	        }
	        static void Activity1()
	        {
	            mySource.TraceEvent(TraceEventType.Error, 1, 
	                "Error message.");
	            mySource.TraceEvent(TraceEventType.Warning, 2, 
	                "Warning message.");
	        }
	        static void Activity2()
	        {
	            mySource.TraceEvent(TraceEventType.Critical, 3, 
	                "Critical message.");
	            mySource.TraceEvent(TraceEventType.Warning, 2,
	                "Warning message.");
	        }
	        static void Activity3()
	        {
	            mySource.TraceEvent(TraceEventType.Error, 4, 
	                "Error message.");
	            mySource.TraceInformation("Informational message.");
	        }
	    }
snippet installercollection_insert

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Insert/installercollection_insert.cs

	
	/*
	   The following example demonstrates the 'Insert(Int32, Installer)' and
	   'AddRange(InstallerCollection)' methods of the 'InstallerCollection' 
	   class. It Creates 'AssemblyInstaller' instances for 'MyAssembly1.exe' 
	   and 'MyAssembly2.exe'. These instances of 'AssemblyInstaller' are 
	   added to an instance of 'TransactedInstaller' named 'myTransactedInstaller1'.
	   The installers in the 'myTransactedInstaller1' are copied to another
	   instance of 'TransactedInstaller' named 'myTransactedInstaller2'.The 
	   installation process installs both 'MyAssembly1.exe' and 'MyAssembly2.exe'.
	*/
	
	using System;
	using System.Reflection;
	using System.ComponentModel;
	using System.Collections;
	using System.Configuration.Install;
	using System.IO;
	
	
	public class InstallerCollection_Insert
	{
	   public static void Main()
	   {
	      TransactedInstaller myTransactedInstaller1 = new TransactedInstaller();
	      TransactedInstaller myTransactedInstaller2 = new TransactedInstaller();
	      AssemblyInstaller myAssemblyInstaller = new AssemblyInstaller();
	      InstallContext myInstallContext;
	
	      myAssemblyInstaller = 
	         new AssemblyInstaller("MyAssembly1.exe", null);
	
	      myTransactedInstaller1.Installers.Insert(0, myAssemblyInstaller);
	
	      myAssemblyInstaller = 
	         new AssemblyInstaller("MyAssembly2.exe", null);
	
	      myTransactedInstaller1.Installers.Insert(1, myAssemblyInstaller);
	
	      myTransactedInstaller2.Installers.AddRange(myTransactedInstaller1.Installers);
	
	
	      myInstallContext = 
	         new InstallContext("Install.log", null);
	      myTransactedInstaller2.Context = myInstallContext;
	
	      myTransactedInstaller2.Install(new Hashtable());  
	   }  
	} 
snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/dates3.cs

	using System;
	using System.IO;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
	      DateTime[] dates = { new DateTime(2013, 1, 9), 
	                           new DateTime(2013, 8, 18) };
	      StreamWriter sw = new StreamWriter("dateData.dat");
	      sw.Write(String.Format(CultureInfo.InvariantCulture, 
	                             "{0:d}|{1:d}", dates[0], dates[1]));
	      sw.Close();
	      
	      StreamReader sr = new StreamReader("dateData.dat");
	      string dateData = sr.ReadToEnd();
	      sr.Close();
	      string[] dateStrings = dateData.Split('|');
	      
	      Console.WriteLine("Current Culture: {0}", 
	                        Thread.CurrentThread.CurrentCulture.DisplayName); 
	      foreach (var dateStr in dateStrings) {
	         DateTime restoredDate;
	         if (DateTime.TryParse(dateStr, CultureInfo.InvariantCulture,
	                               DateTimeStyles.None, out restoredDate))
	            Console.WriteLine("The date is {0:D}", restoredDate);
	         else
	            Console.WriteLine("ERROR: Unable to parse {0}", dateStr);
	      }
	      Console.WriteLine();
	                                             
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-GB");
	      Console.WriteLine("Current Culture: {0}", 
	                        Thread.CurrentThread.CurrentCulture.DisplayName); 
	      foreach (var dateStr in dateStrings) {
	         DateTime restoredDate;
	         if (DateTime.TryParse(dateStr,  CultureInfo.InvariantCulture,
	                               DateTimeStyles.None, out restoredDate))
	            Console.WriteLine("The date is {0:D}", restoredDate);
	         else
	            Console.WriteLine("ERROR: Unable to parse {0}", dateStr);
	      }                                       
	   }
	}

snippet conceptual_regex_language_assertions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_assertions/startofstring1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      int startPos = 0, endPos = 70;
	      string input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957\n" +
	                     "Chicago Cubs, National League, 1903-present\n" + 
	                     "Detroit Tigers, American League, 1901-present\n" + 
	                     "New York Giants, National League, 1885-1957\n" +  
	                     "Washington Senators, American League, 1901-1960\n";   
	      string pattern = @"^((\w+(\s?)){2,}),\s(\w+\s\w+),(\s\d{4}(-(\d{4}|present))?,?)+";
	      Match match;
	      
	      if (input.Substring(startPos, endPos).Contains(",")) {
	         match = Regex.Match(input, pattern);
	         while (match.Success) {
	            Console.Write("The {0} played in the {1} in", 
	                              match.Groups[1].Value, match.Groups[4].Value);
	            foreach (Capture capture in match.Groups[5].Captures)
	               Console.Write(capture.Value);
	   
	            Console.WriteLine(".");
	            startPos = match.Index + match.Length;
	            endPos = startPos + 70 <= input.Length ? 70 : input.Length - startPos;
	            if (! input.Substring(startPos, endPos).Contains(",")) break;
	            match = match.NextMatch();
	         }
	         Console.WriteLine();
	      }
	         
	      if (input.Substring(startPos, endPos).Contains(",")) {
	         match = Regex.Match(input, pattern, RegexOptions.Multiline);
	         while (match.Success) {
	            Console.Write("The {0} played in the {1} in", 
	                              match.Groups[1].Value, match.Groups[4].Value);
	            foreach (Capture capture in match.Groups[5].Captures)
	               Console.Write(capture.Value);
	   
	            Console.WriteLine(".");
	            startPos = match.Index + match.Length;
	            endPos = startPos + 70 <= input.Length ? 70 : input.Length - startPos;
	            if (! input.Substring(startPos, endPos).Contains(",")) break;
	            match = match.NextMatch();
	         }
	         Console.WriteLine();
	      }
	   }
	}

snippet adproperties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/adproperties/adproperties.cs

	using System;
	using System.Security.Policy;
	namespace AppDomainSnippets
	{
		class ADProperties
		{
			static void Main(string[] args)
			{
	
				AppDomainSetup setup = new AppDomainSetup();
				setup.ApplicationName = "MyApplication";
	
				Evidence adevidence = AppDomain.CurrentDomain.Evidence;
				
				AppDomain domain = AppDomain.CreateDomain("MyDomain", adevidence, setup);
				
				domain.AppendPrivatePath("Assemblies");
				domain.AppendPrivatePath("MoreAssemblies");
				Console.WriteLine("RelativeSearchPath: " + domain.RelativeSearchPath);
				AppDomain.CurrentDomain.AppendPrivatePath("Assemblies");
				AppDomain.CurrentDomain.AppendPrivatePath("MoreAssemblies");
				
				domain.SetCachePath("C:\\Cache");
				domain.SetShadowCopyPath(domain.BaseDirectory + "Assemblies");
				domain.SetShadowCopyFiles();
				Console.WriteLine("ShadowCopyFiles turned on: " + domain.ShadowCopyFiles);
	
				domain.Load("Assembly1 text name, Version, Culture, PublicKeyToken");
				domain.Load("Assembly2 text name, Version, Culture, PublicKeyToken");
				
				domain.ClearShadowCopyPath();
				domain.Load("Assembly3 text name, Version, Culture, PublicKeyToken");
				
				AppDomain.Unload(domain);
			}
		}
	}
snippet math_min

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/math_min/min.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string str = "{0}: The lesser of {1,3} and {2,3} is {3}.";
	    string nl = Environment.NewLine;
	
	    byte     xByte1    = 1,    xByte2    = 51;	
	    short    xShort1   = -2,   xShort2   = 52;
	    int      xInt1     = -3,   xInt2     = 53;
	    long     xLong1    = -4,   xLong2    = 54;
	    float    xSingle1  = 5.0f, xSingle2  = 55.0f;
	    double   xDouble1  = 6.0,  xDouble2  = 56.0;
	    Decimal  xDecimal1 = 7m,   xDecimal2 = 57m;
	
	    sbyte    xSbyte1   = 101, xSbyte2  = 111;
	    ushort   xUshort1  = 102, xUshort2 = 112;
	    uint     xUint1    = 103, xUint2   = 113;
	    ulong    xUlong1   = 104, xUlong2  = 114;
	
	    Console.WriteLine("{0}Display the lesser of two values:{0}", nl);
	    Console.WriteLine(str, "Byte   ", xByte1, xByte2, Math.Min(xByte1, xByte2));
	    Console.WriteLine(str, "Int16  ", xShort1, xShort2, Math.Min(xShort1, xShort2));
	    Console.WriteLine(str, "Int32  ", xInt1, xInt2, Math.Min(xInt1, xInt2));
	    Console.WriteLine(str, "Int64  ", xLong1, xLong2, Math.Min(xLong1, xLong2));
	    Console.WriteLine(str, "Single ", xSingle1, xSingle2, Math.Min(xSingle1, xSingle2));
	    Console.WriteLine(str, "Double ", xDouble1, xDouble2, Math.Min(xDouble1, xDouble2));
	    Console.WriteLine(str, "Decimal", xDecimal1, xDecimal2, Math.Min(xDecimal1, xDecimal2));
	    Console.WriteLine("{0}The following types are not CLS-compliant:{0}", nl);
	    Console.WriteLine(str, "SByte  ", xSbyte1, xSbyte2, Math.Min(xSbyte1, xSbyte2));
	    Console.WriteLine(str, "UInt16 ", xUshort1, xUshort2, Math.Min(xUshort1, xUshort2));
	    Console.WriteLine(str, "UInt32 ", xUint1, xUint2, Math.Min(xUint1, xUint2));
	    Console.WriteLine(str, "UInt64 ", xUlong1, xUlong2, Math.Min(xUlong1, xUlong2));
	    }
	}
	/*
	This example produces the following results:
	
	Display the lesser of two values:
	
	Byte   : The lesser of   1 and  51 is 1.
	Int16  : The lesser of  -2 and  52 is -2.
	Int32  : The lesser of  -3 and  53 is -3.
	Int64  : The lesser of  -4 and  54 is -4.
	Single : The lesser of   5 and  55 is 5.
	Double : The lesser of   6 and  56 is 6.
	Decimal: The lesser of   7 and  57 is 7.
	
	The following types are not CLS-compliant:
	
	SByte  : The lesser of 101 and 111 is 101.
	UInt16 : The lesser of 102 and 112 is 102.
	UInt32 : The lesser of 103 and 113 is 103.
	UInt64 : The lesser of 104 and 114 is 104.
	*/
snippet math_max

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/math_max/max.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string str = "{0}: The greater of {1,3} and {2,3} is {3}.";
	    string nl = Environment.NewLine;
	
	    byte     xByte1    = 1,    xByte2    = 51;	
	    short    xShort1   = -2,   xShort2   = 52;
	    int      xInt1     = -3,   xInt2     = 53;
	    long     xLong1    = -4,   xLong2    = 54;
	    float    xSingle1  = 5.0f, xSingle2  = 55.0f;
	    double   xDouble1  = 6.0,  xDouble2  = 56.0;
	    Decimal  xDecimal1 = 7m,   xDecimal2 = 57m;
	
	    sbyte    xSbyte1   = 101, xSbyte2  = 111;
	    ushort   xUshort1  = 102, xUshort2 = 112;
	    uint     xUint1    = 103, xUint2   = 113;
	    ulong    xUlong1   = 104, xUlong2  = 114;
	
	    Console.WriteLine("{0}Display the greater of two values:{0}", nl);
	    Console.WriteLine(str, "Byte   ", xByte1, xByte2, Math.Max(xByte1, xByte2));
	    Console.WriteLine(str, "Int16  ", xShort1, xShort2, Math.Max(xShort1, xShort2));
	    Console.WriteLine(str, "Int32  ", xInt1, xInt2, Math.Max(xInt1, xInt2));
	    Console.WriteLine(str, "Int64  ", xLong1, xLong2, Math.Max(xLong1, xLong2));
	    Console.WriteLine(str, "Single ", xSingle1, xSingle2, Math.Max(xSingle1, xSingle2));
	    Console.WriteLine(str, "Double ", xDouble1, xDouble2, Math.Max(xDouble1, xDouble2));
	    Console.WriteLine(str, "Decimal", xDecimal1, xDecimal2, Math.Max(xDecimal1, xDecimal2));
	    Console.WriteLine("{0}The following types are not CLS-compliant.{0}", nl);
	    Console.WriteLine(str, "SByte  ", xSbyte1, xSbyte2, Math.Max(xSbyte1, xSbyte2));
	    Console.WriteLine(str, "UInt16 ", xUshort1, xUshort2, Math.Max(xUshort1, xUshort2));
	    Console.WriteLine(str, "UInt32 ", xUint1, xUint2, Math.Max(xUint1, xUint2));
	    Console.WriteLine(str, "UInt64 ", xUlong1, xUlong2, Math.Max(xUlong1, xUlong2));
	    }
	}
	/*
	This example produces the following results:
	
	Display the greater of two values:
	
	Byte   : The greater of   1 and  51 is 51.
	Int16  : The greater of  -2 and  52 is 52.
	Int32  : The greater of  -3 and  53 is 53.
	Int64  : The greater of  -4 and  54 is 54.
	Single : The greater of   5 and  55 is 55.
	Double : The greater of   6 and  56 is 56.
	Decimal: The greater of   7 and  57 is 57.
	
	(The following types are not CLS-compliant.)
	
	SByte  : The greater of 101 and 111 is 111.
	UInt16 : The greater of 102 and 112 is 112.
	UInt32 : The greater of 103 and 113 is 113.
	UInt64 : The greater of 104 and 114 is 114.
	*/
snippet portableclasslibrarymvvm

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/portableclasslibrarymvvm/mainpageviewmodel.cs

	using System;
	using System.Collections.Generic;
	using SimpleMVVM.Model;
	
	namespace SimpleMVVM.ViewModel
	{
	    public class CustomerViewModel : ViewModelBase
	    {
	        private List<Customer> _customers;
	        private Customer _currentCustomer;
	        private CustomerRepository _repository;
	
	        public CustomerViewModel()
	        {
	            _repository = new CustomerRepository();
	            _customers = _repository.GetCustomers();
	
	            WireCommands();
	        }
	
	        private void WireCommands()
	        {
	            UpdateCustomerCommand = new RelayCommand(UpdateCustomer);
	        }
	
	        public RelayCommand UpdateCustomerCommand
	        {
	            get;
	            private set;
	        }
	
	        public List<Customer> Customers
	        {
	            get { return _customers; }
	            set { _customers = value; }
	        }
	
	        public Customer CurrentCustomer
	        {
	            get
	            {
	                return _currentCustomer;
	            }
	
	            set
	            {
	                if (_currentCustomer != value)
	                {
	                    _currentCustomer = value;
	                    OnPropertyChanged("CurrentCustomer");
	                    UpdateCustomerCommand.IsEnabled = true;
	                }
	            }
	        }
	
	        public void UpdateCustomer()
	        {
	            _repository.UpdateCustomer(CurrentCustomer);
	        }
	    }
	}
snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/accessibility1.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class Animal
	{
	   private string _species;
	   
	   public Animal(string species)
	   {
	      _species = species;
	   }
	   
	   public virtual string Species 
	   {    
	      get { return _species; }
	   }
	   
	   public override string ToString()
	   {
	      return _species;   
	   } 
	}
	
	public class Human : Animal
	{
	   private string _name;
	   
	   public Human(string name) : base("Homo Sapiens")
	   {
	      _name = name;
	   }
	   
	   public string Name
	   {
	      get { return _name; }
	   }
	   
	   private override string Species 
	   {
	      get { return base.Species; }
	   }
	   
	   public override string ToString() 
	   {
	      return _name;
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      Human p = new Human("John");
	      Console.WriteLine(p.Species);
	      Console.WriteLine(p.ToString());
	   }
	}

snippet howtodecryptxmlelementx509

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HowToDecryptXMLElementX509/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	using System.Security.Cryptography.X509Certificates;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	        try
	        {
	            XmlDocument xmlDoc = new XmlDocument();
	
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	
	            Decrypt(xmlDoc);
	
	            xmlDoc.Save("test.xml");
	
	            Console.WriteLine("Decrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	
	    }
	
	    public static void Decrypt(XmlDocument Doc)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	
	        
	        EncryptedXml exml = new EncryptedXml(Doc);
	
	        exml.DecryptDocument();
	
	    }
	}
snippet type_findinterfaces

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_FindInterfaces/type_findinterfaces.cs

	using System;
	using System.Xml;
	using System.Reflection;
	
	public class MyFindInterfacesSample 
	{
	    public static void Main()
	    {
	        try
	        {
	            XmlDocument myXMLDoc = new XmlDocument();
	            myXMLDoc.LoadXml("<book genre='novel' ISBN='1-861001-57-5'>" +
	                "<title>Pride And Prejudice</title>" + "</book>");
	            Type myType = myXMLDoc.GetType();
	
	            TypeFilter myFilter = new TypeFilter(MyInterfaceFilter);
	            String[] myInterfaceList = new String[2] 
	                {"System.Collections.IEnumerable", 
	                "System.Collections.ICollection"};
	            for(int index=0; index < myInterfaceList.Length; index++)
	            {
	                Type[] myInterfaces = myType.FindInterfaces(myFilter, 
	                    myInterfaceList[index]);
	                if (myInterfaces.Length > 0) 
	                {
	                    Console.WriteLine("\n{0} implements the interface {1}.",
	                        myType, myInterfaceList[index]);	
	                    for(int j =0;j < myInterfaces.Length;j++)
	                        Console.WriteLine("Interfaces supported: {0}.", 
	                            myInterfaces[j].ToString());
	                }
	                else
	                    Console.WriteLine(
	                        "\n{0} does not implement the interface {1}.", 
	                        myType,myInterfaceList[index]);	
	            }
	        }
	        catch(ArgumentNullException e)
	        {
	            Console.WriteLine("ArgumentNullException: " + e.Message);
	        }
	        catch(TargetInvocationException e)
	        {
	            Console.WriteLine("TargetInvocationException: " + e.Message);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception: " + e.Message);
	        }
	    }
	      
	    public static bool MyInterfaceFilter(Type typeObj,Object criteriaObj)
	    {
	        if(typeObj.ToString() == criteriaObj.ToString())
	            return true;
	        else
	            return false;
	    }
	}
snippet countercreationdatacollection_countercreationdatacollection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CounterCreationDataCollection_CounterCreationDataCollection/countercreationdatacollection_ctor.cs

	
	/*
	   The following program demonstrates 'CounterCreationDataCollection(CounterCreationData[])'
	   constructor of 'CounterCreationDataCollection' class.
	   An instance of 'CounterCreationDataCollection' is created by passing an array of
	   'CounterCreationData' to the constructor. The counters of the 'CounterCreationDataCollection'
	   are displayed to the console.
	
	 */
	using System;
	using System.Diagnostics;
	
	public class CounterCreationExample
	{
	    public static void Main()
	    {
	        try
	        {
	            string myCategoryName;
	            int numberOfCounters;
	            Console.Write("Enter the category Name : ");
	            myCategoryName = Console.ReadLine();
	            if (!PerformanceCounterCategory.Exists(myCategoryName))
	            {
	                Console.Write("Enter the number of counters : ");
	                numberOfCounters = int.Parse(Console.ReadLine());
	                CounterCreationData[] myCounterCreationData =
	                   new CounterCreationData[numberOfCounters];
	
	                for (int i = 0; i < numberOfCounters; i++)
	                {
	                    Console.Write("Enter the counter name for {0} counter : ", i);
	                    myCounterCreationData[i] = new CounterCreationData();
	                    myCounterCreationData[i].CounterName = Console.ReadLine();
	                }
	                CounterCreationDataCollection myCounterCollection =
	                   new CounterCreationDataCollection(myCounterCreationData);
	                PerformanceCounterCategory.Create(myCategoryName,
	                   "Sample Category",
	                PerformanceCounterCategoryType.SingleInstance, myCounterCollection);
	
	                Console.WriteLine("The list of counters in 'CounterCollection' are :");
	                for (int i = 0; i < myCounterCollection.Count; i++)
	                    Console.WriteLine("Counter {0} is '{1}'", i, myCounterCollection[i].CounterName);
	            }
	            else
	            {
	                Console.WriteLine("The category already exists");
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception: {0}.", e.Message);
	            return;
	        }
	    }
	}

snippet countercreationdatacollection_countercreationdata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CounterCreationDataCollection_CounterCreationData/countercreationdatacollection_ctor_countercreationdata.cs

	
	/*
	   The following program demonstrates 'CounterCreationDataCollection(CounterCreationData[])'
	   constructor of 'CounterCreationDataCollection' class.
	   An instance of 'CounterCreationDataCollection' is created by passing an array of
	   'CounterCreationData' to the constructor. The counters of the 'CounterCreationDataCollection'
	   are displayed to the console.
	
	 */
	using System;
	using System.Diagnostics;
	
	public class CounterCreationExample
	{
	    public static void Main()
	    {
	        try
	        {
	            string myCategoryName;
	            int numberOfCounters;
	            Console.Write("Enter the category Name : ");
	            myCategoryName = Console.ReadLine();
	            if (!PerformanceCounterCategory.Exists(myCategoryName))
	            {
	                Console.Write("Enter the number of counters : ");
	                numberOfCounters = int.Parse(Console.ReadLine());
	                CounterCreationData[] myCounterCreationData =
	                   new CounterCreationData[numberOfCounters];
	
	                for (int i = 0; i < numberOfCounters; i++)
	                {
	                    Console.Write("Enter the counter name for {0} counter : ", i);
	                    myCounterCreationData[i] = new CounterCreationData();
	                    myCounterCreationData[i].CounterName = Console.ReadLine();
	                }
	                CounterCreationDataCollection myCounterCollection =
	                   new CounterCreationDataCollection(myCounterCreationData);
	                PerformanceCounterCategory.Create(myCategoryName,
	                   "Sample Category",
	                PerformanceCounterCategoryType.SingleInstance, myCounterCollection);
	
	                Console.WriteLine("The list of counters in 'CounterCollection' are :");
	                for (int i = 0; i < myCounterCollection.Count; i++)
	                    Console.WriteLine("Counter {0} is '{1}'", i, myCounterCollection[i].CounterName);
	            }
	            else
	            {
	                Console.WriteLine("The category already exists");
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception: {0}.", e.Message);
	            return;
	        }
	    }
	}

snippet countercreationdatacollection_countercreationdata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CounterCreationDataCollection_CounterCreationData/countercreationdatacollection_ctor.cs

	
	/*
	   The following program demonstrates 'CounterCreationDataCollection(CounterCreationData[])'
	   constructor of 'CounterCreationDataCollection' class.
	   An instance of 'CounterCreationDataCollection' is created by passing an array of
	   'CounterCreationData' to the constructor. The counters of the 'CounterCreationDataCollection'
	   are displayed to the console.
	
	 */
	using System;
	using System.Diagnostics;
	
	public class CounterCreationExample
	{
	    public static void Main()
	    {
	        try
	        {
	            string myCategoryName;
	            int numberOfCounters;
	            Console.Write("Enter the category Name : ");
	            myCategoryName = Console.ReadLine();
	            if (!PerformanceCounterCategory.Exists(myCategoryName))
	            {
	                Console.Write("Enter the number of counters : ");
	                numberOfCounters = int.Parse(Console.ReadLine());
	                CounterCreationData[] myCounterCreationData =
	                   new CounterCreationData[numberOfCounters];
	
	                for (int i = 0; i < numberOfCounters; i++)
	                {
	                    Console.Write("Enter the counter name for {0} counter : ", i);
	                    myCounterCreationData[i] = new CounterCreationData();
	                    myCounterCreationData[i].CounterName = Console.ReadLine();
	                }
	                CounterCreationDataCollection myCounterCollection =
	                   new CounterCreationDataCollection(myCounterCreationData);
	                PerformanceCounterCategory.Create(myCategoryName,
	                   "Sample Category",
	                PerformanceCounterCategoryType.SingleInstance, myCounterCollection);
	
	                Console.WriteLine("The list of counters in 'CounterCollection' are :");
	                for (int i = 0; i < myCounterCollection.Count; i++)
	                    Console.WriteLine("Counter {0} is '{1}'", i, myCounterCollection[i].CounterName);
	            }
	            else
	            {
	                Console.WriteLine("The category already exists");
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception: {0}.", e.Message);
	            return;
	        }
	    }
	}

snippet asyncdesignpattern

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncDesignPattern/Async_EndBlockWait.cs

	/*
	The following example demonstrates using asynchronous methods to
	get Domain Name System information for the specified host computer.
	
	*/
	
	using System;
	using System.Net;
	using System.Net.Sockets;
	using System.Threading;
	
	namespace Examples.AdvancedProgramming.AsynchronousOperations
	{
	    public class WaitUntilOperationCompletes
	    {
	        public static void Main(string[] args)
	        {
	            if (args.Length == 0 || args[0].Length == 0)
	            {
	                Console.WriteLine("You must specify the name of a host computer.");
	                return;
	            }
	            IAsyncResult result = Dns.BeginGetHostEntry(args[0], null, null);
	            Console.WriteLine("Processing request for information...");
	            result.AsyncWaitHandle.WaitOne();
	            try 
	            {
	                IPHostEntry host = Dns.EndGetHostEntry(result);
	                string[] aliases = host.Aliases;
	                IPAddress[] addresses = host.AddressList;
	                if (aliases.Length > 0)
	                {
	                    Console.WriteLine("Aliases");
	                    for (int i = 0; i < aliases.Length; i++)
	                    {
	                        Console.WriteLine("{0}", aliases[i]);
	                    }
	                }
	                if (addresses.Length > 0)
	                {
	                    Console.WriteLine("Addresses");
	                    for (int i = 0; i < addresses.Length; i++)
	                    {
	                        Console.WriteLine("{0}",addresses[i].ToString());
	                    }
	                }
	            }
	            catch (SocketException e)
	            {
	                Console.WriteLine("Exception occurred while processing the request: {0}", 
	                    e.Message);
	            }
	        }
	    }
	}
snippet propertyinfo_setvalue

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo_SetValue/example2.cs

	using System;
	using System.Reflection;
	
	class Example
	{
	    private static int _staticProperty = 41;
	    private int _instanceProperty = 42;
	
	    public static int StaticProperty
	    {
	        get { return _staticProperty; }
	        set { _staticProperty = value; }
	    }
	
	    public int InstanceProperty
	    {
	        get { return _instanceProperty; }
	        set { _instanceProperty = value; }
	    }
	
	    public static void Main()
	    {
	        Console.WriteLine("Initial value of static property: {0}",
	            Example.StaticProperty);
	
	        Type examType = typeof(Example);
	
	        PropertyInfo piShared = examType.GetProperty("StaticProperty");
	        piShared.SetValue(null, 76);
	                 
	        Console.WriteLine("New value of static property: {0}",
	                          Example.StaticProperty);
	
	        Example exam = new Example();
	
	        Console.WriteLine("\nInitial value of instance property: {0}", 
	                          exam.InstanceProperty);
	
	        PropertyInfo piInstance = examType.GetProperty("InstanceProperty");
	        piInstance.SetValue(exam, 37);
	                 
	        Console.WriteLine("New value of instance property: {0}",
	                          exam.InstanceProperty);
	    }
	}
	
	
	

snippet assemblyinstaller_uninstall

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller_Uninstall/assemblyinstaller_uninstall.cs

	
	/* The following example demonstrates the 'AssemblyInstaller( string, string[] )'
	   constructor and the 'Uninstall' method of the 'AssemblyInstaller' class.
	   An object of the AssemblyInstaller class is created by invoking the constructor
	   with the assembly to install and the commandline argument array as
	   parameters. The uninstall method is called after installing and committing
	   the assembly passed as the parameter to the constructor.
	*/
	
	using System;
	using System.Configuration.Install;
	using System.Collections;
	using System.Collections.Specialized;
	
	class MyInstallClass
	{
	   static void Main()
	   {
	      IDictionary mySavedState = new Hashtable();
	
	      Console.WriteLine( "" );
	
	      try
	      {
	         string[] myStringArray = new string[ 1 ];
	         string myString;
	
	
	         myStringArray[ 0 ] = "/logFile=example.log";
	
	         myString = "MyAssembly_Uninstall.exe";
	
	         AssemblyInstaller myAssemblyInstaller = new 
	                  AssemblyInstaller( myString , myStringArray );
	
	         mySavedState.Clear();
	         myAssemblyInstaller.Install( mySavedState );
	         myAssemblyInstaller.Commit( mySavedState );
	
	         myAssemblyInstaller.Uninstall( mySavedState );
	
	      }
	      catch( ArgumentException )
	      {
	      }
	      catch( Exception myException )
	      {
	         Console.WriteLine( myException.Message );
	      }
	   }
	}

snippet codemultiexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeMultiExample/codemultiexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	
	    public class CodeMultiExample
	    {
	        public CodeMultiExample()
	        {            
	        }
	        
	        public void CodeEventReferenceExample()
	        {
	            CodeEventReferenceExpression eventRef1 = new CodeEventReferenceExpression( new CodeThisReferenceExpression(), "TestEvent" );
	
	            
	        }
	
	        public void CodeIndexerExample()
	        {
	            System.CodeDom.CodeIndexerExpression indexerExpression = new CodeIndexerExpression( new CodeThisReferenceExpression(), new CodePrimitiveExpression(1) );
	
	            
	        }
	
	        public void CodeDirectionExample()
	        {
	            CodeDirectionExpression param1 = new CodeDirectionExpression(FieldDirection.Ref, new CodeFieldReferenceExpression( new CodeThisReferenceExpression(), "TestParameter" ));
	            CodeMethodInvokeExpression methodInvoke1 = new CodeMethodInvokeExpression(new CodeThisReferenceExpression(), "TestMethod", param1 );
	            
	            
	        }
	
	        public void CreateExpressionExample()
	        {
	            CodeObjectCreateExpression objectCreate1 = new CodeObjectCreateExpression( "System.DateTime", new CodeExpression[] {} );            
	
	
	        }
	    }
	}
snippet process_refresh

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/process_refresh/process_refresh.cs

	
	
	using System;
	using System.ComponentModel;
	using System.Diagnostics;
	using System.IO;
	using System.Threading;
	
	namespace ProcessSample
	{
	    class MyProcessClass
	    {
	        public static void Main()
	        {
	            try
	            {
	                using (Process myProcess = Process.Start("Notepad.exe"))
	                {
	                    for (int i = 0; i < 5; i++)
	                    {
	                        if (!myProcess.HasExited)
	                        {
	                            myProcess.Refresh();
	                            Console.WriteLine($"Physical Memory Usage: {myProcess.WorkingSet}");
	                            Thread.Sleep(2000);
	                        }
	                        else
	                        {
	                            break;
	                        }
	                    }
	
	                    myProcess.CloseMainWindow();
	                    myProcess.Close();
	                }
	            }
	            catch (Exception e) when (e is Win32Exception || e is FileNotFoundException)
	            {
	                Console.WriteLine("The following exception was raised: ");
	                Console.WriteLine(e.Message);
	            }
	        }
	    }
	}

snippet serviceprocess_serviceinstaller

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/simpleserviceinstaller.cs

	
	
	using System;
	using System.Diagnostics;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.ServiceProcess;
	
	[RunInstaller(true)]
	public class SimpleServiceInstaller : System.Configuration.Install.Installer
	{
	    private System.ServiceProcess.ServiceInstaller simpleServiceInstaller;
	    private System.ServiceProcess.ServiceProcessInstaller simpleServiceProcessInstaller;
	
	    public SimpleServiceInstaller()
	    {
	        simpleServiceProcessInstaller = new ServiceProcessInstaller();
	        simpleServiceInstaller = new ServiceInstaller();
	                       
	        simpleServiceProcessInstaller.Account = ServiceAccount.LocalService;
	             
	        simpleServiceInstaller.ServiceName = "SimpleService";
	
	        simpleServiceInstaller.DisplayName = "Simple Service";
	        simpleServiceInstaller.Description = "A simple service that runs on the local computer.";
	        simpleServiceInstaller.StartType = ServiceStartMode.Manual;
	
	        Installers.Add(simpleServiceInstaller);
	        Installers.Add(simpleServiceProcessInstaller);
	        
	    }
	
	    public static void InstallMain()
	    {
	        Console.WriteLine("Usage: InstallUtil.exe [<install>.exe | <install>.dll]");
	    }
	
	}
snippet pathcombine

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/pathcombine/pathcombine.cs

	using System;
	using System.IO;
	
	public class ChangeExtensionTest {
	
	    public static void Main() {
	
	        string path1 = "c:\\temp";
	        string path2 = "subdir\\file.txt";
	        string path3 = "c:\\temp.txt";
	        string path4 = "c:^*&)(_=@#'\\^&#2.*(.txt";
	        string path5 = "";
	        string path6 = null;
	
	        CombinePaths(path1, path2);
	        CombinePaths(path1, path3);
	        CombinePaths(path3, path2);
	        CombinePaths(path4, path2);
	        CombinePaths(path5, path2);
	        CombinePaths(path6, path2);
	    }
	
	    private static void CombinePaths(string p1, string p2) {
	
	        try {
	            string combination = Path.Combine(p1, p2);
	
	            Console.WriteLine("When you combine '{0}' and '{1}', the result is: {2}'{3}'",
	                        p1, p2, Environment.NewLine, combination);
	        } catch (Exception e) {
	            if (p1 == null)
	                p1 = "null";
	            if (p2 == null)
	                p2 = "null";
	            Console.WriteLine("You cannot combine '{0}' and '{1}' because: {2}{3}",
	                        p1, p2, Environment.NewLine, e.Message);
	        }
	
	        Console.WriteLine();
	    }
	}
snippet ptrtostructure

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PtrToStructure/pts.cs

	using System;
	using System.Runtime.InteropServices;
	
	namespace Testing
	{
		class Class1
		{
			[StructLayout(LayoutKind.Sequential)]
			public class  INNER
			{
				[MarshalAs(UnmanagedType.ByValTStr, SizeConst =  10)]
				public string field1 = "Test";
		 
			}	
			[StructLayout(LayoutKind.Sequential)]
			public struct OUTER
			{
				[MarshalAs(UnmanagedType.ByValTStr, SizeConst =  10)]
				public string field1;
				[MarshalAs(UnmanagedType.ByValArray, SizeConst =  100)]
				public byte[] inner;
			}
	
	
			[DllImport(@"SomeTestDLL.dll")]
			public static extern void CallTest( ref OUTER po);
	
			static void Main(string[] args)
			{
				OUTER ed = new OUTER();
				INNER[] inn=new INNER[10];
				INNER test = new INNER();
				int iStructSize = Marshal.SizeOf(test);
	
				int sz =inn.Length * iStructSize;
				ed.inner = new byte[sz];
	
				try
				{
					CallTest( ref ed);
				}
				catch(Exception e)
				{
					Console.WriteLine(e.Message);
				}
				IntPtr buffer = Marshal.AllocCoTaskMem(iStructSize*10);
				Marshal.Copy(ed.inner,0,buffer,iStructSize*10);
				
				int iCurOffset = 0;
				for(int i=0;i<10;i++)
				{
					
					inn[i] = (INNER)Marshal.PtrToStructure(new
	IntPtr(buffer.ToInt32()+iCurOffset),typeof(INNER) );
					iCurOffset += iStructSize;
				}
				Console.WriteLine(ed.field1);
				Marshal.FreeCoTaskMem(buffer);
			}
		}
	}

snippet microsoft_visualstudio_data_core_ivsdatasupportobject

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataSupportObject/IVsDataSupportObject.cs

	using System;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services.SupportEntities;
	using Microsoft.VisualStudio.Data.Services.SupportEntities.Interop;
	
	internal class MyDSRefBuilder : IDSRefBuilder,
	    IVsDataSupportObject<IDSRefBuilder>
	{
	    public void AppendToDSRef(
	        object dsRef, string typeName, object[] identifier)
	    {
	        AppendToDSRef(dsRef, typeName, identifier, null);
	    }
	
	    object IVsDataSupportObject<IDSRefBuilder>.Invoke(
	        string name, object[] args, object[] parameters)
	    {
	        if (name == null)
	        {
	            throw new ArgumentNullException("name");
	        }
	        if (name.Equals("AppendToDSRef", StringComparison.Ordinal))
	        {
	            if (args == null || args.Length != 3)
	            {
	                throw new ArgumentException();
	            }
	            AppendToDSRef(args[0], args[1] as string,
	                args[2] as object[], parameters);
	            return null;
	        }
	        throw new ArgumentException();
	    }
	
	    private void AppendToDSRef(object dsRef,
	        string typeName, object[] identifier, object[] parameters)
	    {
	        if (parameters == null || parameters.Length == 0)
	        {
	            throw new ArgumentException();
	        }
	        string dsRefType = parameters[0] as string;
	        if (dsRefType.Equals("DSREFTYPE_TABLE"))
	        {
	            AppendTableToDSRef(dsRef, identifier);
	        }
	        else if (dsRefType.Equals("DSREFTYPE_VIEW"))
	        {
	            AppendViewToDSRef(dsRef, identifier);
	        }
	    }
	
	    private void AppendTableToDSRef(object dsRef, object[] identifier)
	    {
	    }
	
	    private void AppendViewToDSRef(object dsRef, object[] identifier)
	    {
	    }
	}
snippet io_compression_deflate1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_Compression_Deflate1/deflatetest.cs

	using System;
	using System.IO;
	using System.IO.Compression;
	
	public class Program
	{
	    static string directoryPath = @"c:\temp";
	    public static void Main()
	    {
	        
	        DirectoryInfo directorySelected = new DirectoryInfo(directoryPath);
	           Compress(directorySelected);
	    	
	
	        foreach (FileInfo fileToDecompress in directorySelected.GetFiles("*.cmp"))
	        {
	            Decompress(fileToDecompress);
	        }
	    }
	
	    public static void Compress(DirectoryInfo directorySelected)
	    {
	        
	     
	        foreach (FileInfo file in directorySelected.GetFiles("*.xml"))
	        using (FileStream originalFileStream = file.OpenRead())
	        {
	            if ((File.GetAttributes(file.FullName) & FileAttributes.Hidden)
	                != FileAttributes.Hidden & file.Extension != ".cmp")
	            {
	                using (FileStream compressedFileStream = File.Create(file.FullName + ".cmp"))
	                {
	                    using (DeflateStream compressionStream = new DeflateStream(compressedFileStream, CompressionMode.Compress))
	                    {
	                        originalFileStream.CopyTo(compressionStream);
	                    }
	                }
	
	                FileInfo info = new FileInfo(directoryPath + "\\" + file.Name + ".cmp");
	                Console.WriteLine("Compressed {0} from {1} to {2} bytes.", file.Name, file.Length, info.Length);
	            }
	        }
	    }
	
	    public static void Decompress(FileInfo fileToDecompress)
	    {
	        using (FileStream originalFileStream = fileToDecompress.OpenRead())
	        {
	            string currentFileName = fileToDecompress.FullName;
	            string newFileName = currentFileName.Remove(currentFileName.Length - fileToDecompress.Extension.Length);
	
	            using (FileStream decompressedFileStream = File.Create(newFileName))
	        	{
	                using (DeflateStream decompressionStream = new DeflateStream(originalFileStream, CompressionMode.Decompress))
	        	    {
	                    decompressionStream.CopyTo(decompressedFileStream);
	                    Console.WriteLine("Decompressed: {0}", fileToDecompress.Name);
	        	    }
	        	}
	        }
	    }
	}
snippet io_filestream_ctor1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_FileStream_ctor1/example.cs

	using System;
	using System.IO;
	using System.Text;
	using System.Security.AccessControl;
	
	namespace FileSystemExample
	{
	    class FileStreamExample
	    {
	        public static void Main()
	        {
	            try
	            {
	
	                byte[] messageByte = Encoding.ASCII.GetBytes("Here is some data.");
	
	                FileStream fWrite = new FileStream("test.txt", FileMode.Create, FileAccess.ReadWrite, FileShare.None, 8, FileOptions.None);
	
	                fWrite.WriteByte((byte)messageByte.Length);
	
	                fWrite.Write(messageByte, 0, messageByte.Length);
	
	                fWrite.Close();
	
	                
	
	                FileStream fRead = new FileStream("test.txt", FileMode.Open);
	
	                int length = (int)fRead.ReadByte();
	
	                byte[] readBytes = new byte[length];
	
	                fRead.Read(readBytes, 0, readBytes.Length);
	
	                fRead.Close();
	
	                Console.WriteLine(Encoding.ASCII.GetString(readBytes));
	
	                Console.WriteLine("Done writing and reading data.");
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine(e);
	            }
	
	            Console.ReadLine();
	        }
	    }
	}
	
snippet conceptual_calendars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_calendars/calendarinfo1.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      CultureInfo th = CultureInfo.CreateSpecificCulture("th-TH");
	      DisplayCalendars(th);
	
	      CultureInfo ja = CultureInfo.CreateSpecificCulture("ja-JP");
	      DisplayCalendars(ja);
	   }
	
	   static void DisplayCalendars(CultureInfo ci)
	   {
	      Console.WriteLine("Calendars for the {0} culture:", ci.Name);
	
	      Calendar defaultCalendar = ci.Calendar;
	      Console.Write("   Default Calendar: {0}", GetCalendarName(defaultCalendar));      
	
	      if (defaultCalendar is GregorianCalendar)
	         Console.WriteLine(" ({0})", 
	                           ((GregorianCalendar) defaultCalendar).CalendarType);
	      else
	         Console.WriteLine();
	      
	      Console.WriteLine("   Optional Calendars:");      
	      foreach (var optionalCalendar in ci.OptionalCalendars) {
	         Console.Write("{0,6}{1}", "", GetCalendarName(optionalCalendar));
	         if (optionalCalendar is GregorianCalendar)
	            Console.Write(" ({0})", 
	                          ((GregorianCalendar) optionalCalendar).CalendarType);
	
	         Console.WriteLine();
	      }
	      Console.WriteLine();
	   }
	
	   static string GetCalendarName(Calendar cal)
	   {
	      return cal.ToString().Replace("System.Globalization.", "");
	   }
	}

snippet improvedinteropsnippets

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ImprovedInteropSnippets/codefile2.cs

	
	using System;
	using System.Runtime.InteropServices;
	
	namespace MyModule
	{
	
	
	
	
		[ComImport]
		[Guid("73EB4AF8-BE9C-4b49-B3A4-24F4FF657B26")]
		public interface IMyStorage  
		{
			[DispId(1)]
			[return : MarshalAs( UnmanagedType.Interface )]
			Object GetItem( [In, MarshalAs( UnmanagedType.BStr )] String bstrName );
	
			[DispId(2)]
			void GetItems( [In, MarshalAs( UnmanagedType.BStr )] String bstrLocation, 
				[Out, MarshalAs( UnmanagedType.SafeArray, 
						  SafeArraySubType = VarEnum.VT_VARIANT )] out Object[] Items );
	                
	                
			[DispId(3)]
			void GetItemDescriptions( [In] String bstrLocation, 
				[In, Out, MarshalAs( UnmanagedType.SafeArray )] ref Object[] varDescriptions );
	
			bool IsEmpty 
			{
				[DispId(4)]
				[return : MarshalAs( UnmanagedType.VariantBool )]
				get;
			}
		}
	}
snippet assemblyinstaller_rollback

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyInstaller_Rollback/assemblyinstaller_rollback.cs

	
	/* The following example demonstrates the 'Rollback' method and the
	   'Path' and 'CommandLine' properties of the 'AssemblyInstaller' class.
	   An object of the AssemblyInstaller class is created by invoking the constructor.
	   The properties of this object are set and the install method is invoked on the
	   'MyAssembly.exe' assembly. The 'Rollback' method is called to undo the
	   install process on the specified assembly.
	*/
	
	using System;
	using System.Configuration.Install;
	using System.Collections;
	using System.Collections.Specialized;
	
	class AssemblyInstaller_Example
	{
	   static void Main()
	   {
	      IDictionary mySavedState = new Hashtable();
	
	      Console.WriteLine( "" );
	
	      try
	      {
	         AssemblyInstaller myAssemblyInstaller = new AssemblyInstaller();
	
	         myAssemblyInstaller.Path = "MyAssembly_Rollback.exe";
	
	         string[] commandLineOptions = new string[ 1 ] {"/LogFile=example.log"};
	         myAssemblyInstaller.CommandLine = commandLineOptions;
	
	         myAssemblyInstaller.UseNewContext = true;
	
	         myAssemblyInstaller.Install( mySavedState );
	
	         myAssemblyInstaller.Rollback( mySavedState );
	
	      }
	      catch( ArgumentException )
	      {
	      }
	      catch( Exception e )
	      {
	         Console.WriteLine( e.Message );
	      }
	
	   }
	}

snippet installer_beforerollback

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_BeforeRollback/installer_beforerollback.cs

	
	/* The following program demonstrates the 'BeforeRollback' event of the 
	   'Installer' class. It overrides the Install method, explicitly throws
	   arguement exception so that 'Rollback' method is called. When the 
	   'RollBack' is about to complete, 'BeforeRollback' event occurs and
	   a message is displayed when the event occurs.   
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstallerClass: Installer
	{
	   public MyInstallerClass() :base()
	   {
	      this.BeforeRollback += new InstallEventHandler(MyInstaller_BeforeRollBack);
	      this.AfterRollback += new InstallEventHandler(MyInstaller_AfterRollback);
	   }
	   private void MyInstaller_BeforeRollBack(object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("");
	      Console.WriteLine("BeforeRollback Event occurred.");
	      Console.WriteLine("");        
	   }
	   private void MyInstaller_AfterRollback(object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("");
	      Console.WriteLine("AfterRollback Event occurred.");
	      Console.WriteLine("");        
	   }
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      throw new ArgumentException("Arg Exception");
	   }
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	   public static void Main()
	   {
	      Console.WriteLine("Usage : installutil.exe Installer_BeforeRollback.exe ");      
	   }
	}

snippet generic_sorteddictionary_ctor_idicicomp

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedDictionary_ctor_IDicIComp/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Dictionary<string, string> openWith = 
	            new Dictionary<string, string>
	                (StringComparer.CurrentCultureIgnoreCase);
	        
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("Bmp", "paint.exe");
	        openWith.Add("DIB", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	        
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith)
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, 
	                kvp.Value);
	        }
	
	        SortedDictionary<string, string> copy = 
	                    new SortedDictionary<string, string>(openWith, 
	                        StringComparer.CurrentCultureIgnoreCase);
	
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in copy )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, 
	                kvp.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Key = txt, Value = notepad.exe
	Key = Bmp, Value = paint.exe
	Key = DIB, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	
	Key = Bmp, Value = paint.exe
	Key = DIB, Value = paint.exe
	Key = rtf, Value = wordpad.exe
	Key = txt, Value = notepad.exe
	 */
	
	
	

snippet process_getprocessesbyname2_2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Process_GetProcessesByName2_2/process_getprocessesbyname2_2.cs

	
	/* 
	   The following program demonstrates the method 'GetProcessesByName(String, String)'
	   and property 'MachineName' of class 'Process'.
	   It reads the remote computer name from commandline and gets all the notepad 
	   processes by name on remote computer and displays its properties to console.
	*/
	using System;
	using System.Diagnostics;
	
	class GetProcessesByNameClass
	{
	    public static void Main(string[] args)
	    {
	        Console.WriteLine("Create notepad processes on remote computer");
	        Console.Write("Enter remote computer name : ");
	        string remoteMachineName = Console.ReadLine();
	
	        if (remoteMachineName == null)
	        {
	            Console.WriteLine(Environment.NewLine + "You have to enter a remote computer name.");
	            return;
	        }
	
	        try
	        {
	            Process[] myProcesses = Process.GetProcessesByName("notepad", remoteMachineName);
	
	            if (myProcesses.Length == 0)
	                Console.WriteLine("Could not find notepad processes on remote computer.");
	
	            foreach (Process myProcess in myProcesses)
	            {
	                Console.WriteLine(
	                    $"Process Name : {myProcess.ProcessName}\n" +
	                    $"Process ID   : {myProcess.Id}\n" +
	                    $"MachineName  : {myProcess.MachineName}");
	            }
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine($"The value \'{remoteMachineName}\' is an invalid remote computer name.");
	        }
	        catch (InvalidOperationException)
	        {
	            Console.WriteLine("Unable to get process information on the remote computer.");
	        }
	        catch (PlatformNotSupportedException)
	        {
	            Console.WriteLine(
	                "Finding notepad processes on remote computers " +
	                "is not supported on this operating system.");
	        }
	    }
	}

snippet marshal

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Marshal/Marshal.cs

	using System;
	using System.Text;
	using System.Runtime.InteropServices;
	
	public struct Point
	{
	    public Int32 x, y;
	}
	
	
	public sealed class App
	{
	    static void Main()
	    {
	        Console.WriteLine("SystemDefaultCharSize={0}, SystemMaxDBCSCharSize={1}",
	            Marshal.SystemDefaultCharSize, Marshal.SystemMaxDBCSCharSize);
	
	        Console.WriteLine("Number of bytes needed by a Point object: {0}", 
	            Marshal.SizeOf(typeof(Point)));
	        Point p = new Point();
	        Console.WriteLine("Number of bytes needed by a Point object: {0}",
	            Marshal.SizeOf(p));
	        
	        IntPtr hglobal = Marshal.AllocHGlobal(100);
	        Marshal.FreeHGlobal(hglobal);
	
	        Boolean f = CloseHandle(new IntPtr(-1));
	        if (!f)
	        {
	            Console.WriteLine("CloseHandle call failed with an error code of: {0}", 
	                Marshal.GetLastWin32Error());
	        }  
	    }
	
	    [DllImport("Kernel32", ExactSpelling = true, SetLastError = true)]
	    static extern Boolean CloseHandle(IntPtr h);
	    
	}
	
snippet conceptual_regex

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex/example.cs

	using System;
	using System.Collections.Generic;
	using System.Globalization;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "Office expenses on 2/13/2008:\n" + 
	                     "Paper (500 sheets)                      $3.95\n" + 
	                     "Pencils (box of 10)                     $1.00\n" + 
	                     "Pens (box of 10)                        $4.49\n" + 
	                     "Erasers                                 $2.19\n" + 
	                     "Ink jet printer                        $69.95\n\n" + 
	                     "Total Expenses                        $ 81.58\n"; 
	      
	      NumberFormatInfo nfi = CultureInfo.CurrentCulture.NumberFormat;
	      string currencySymbol = nfi.CurrencySymbol;
	      bool symbolPrecedesIfPositive = nfi.CurrencyPositivePattern % 2 == 0;
	      string groupSeparator = nfi.CurrencyGroupSeparator;
	      string decimalSeparator = nfi.CurrencyDecimalSeparator;
	
	      string pattern = Regex.Escape( symbolPrecedesIfPositive ? currencySymbol : "") + 
	                       @"\s*[-+]?" + "([0-9]{0,3}(" + groupSeparator + "[0-9]{3})*(" + 
	                       Regex.Escape(decimalSeparator) + "[0-9]+)?)" + 
	                       (! symbolPrecedesIfPositive ? currencySymbol : ""); 
	      Console.WriteLine( "The regular expression pattern is:");
	      Console.WriteLine("   " + pattern);      
	
	      MatchCollection matches = Regex.Matches(input, pattern, 
	                                              RegexOptions.IgnorePatternWhitespace);               
	      Console.WriteLine("Found {0} matches.", matches.Count); 
	
	      List<decimal> expenses = new List<Decimal>();
	                     
	      foreach (Match match in matches)
	         expenses.Add(Decimal.Parse(match.Groups[1].Value));      
	
	      decimal total = 0;
	      foreach (decimal value in expenses)
	         total += value;
	      
	      if (total / 2 == expenses[expenses.Count - 1]) 
	         Console.WriteLine("The expenses total {0:C2}.", expenses[expenses.Count - 1]);
	      else
	         Console.WriteLine("The expenses total {0:C2}.", total);
	   }  
	}

snippet structlayoutattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/structlayoutattribute.cs

	/*
	   System.Runtime.InteropServices.StructLayoutAttribute.StructLayoutAttribute(LayoutKind)
	   System.Runtime.InteropServices.StructLayoutAttribute.CharSet
	   System.Runtime.InteropServices.StructLayoutAttribute.Size
	   
	   The program shows a managed declaration of the GetSystemTime function and defines 
	   MySystemTime class with explicit layout. The GetSystemTime get the system time
	   and print to the console.
	*/
	
	using System;
	using System.Runtime.InteropServices;
	
	namespace InteropSample
	{   
	
	   [StructLayout(LayoutKind.Explicit, Size=16, CharSet=CharSet.Ansi)]
	   public class MySystemTime 
	   {
	      [FieldOffset(0)]public ushort wYear; 
	      [FieldOffset(2)]public ushort wMonth;
	      [FieldOffset(4)]public ushort wDayOfWeek; 
	      [FieldOffset(6)]public ushort wDay; 
	      [FieldOffset(8)]public ushort wHour; 
	      [FieldOffset(10)]public ushort wMinute; 
	      [FieldOffset(12)]public ushort wSecond; 
	      [FieldOffset(14)]public ushort wMilliseconds; 
	   }
	
	   internal static class NativeMethods
	   {
	      [DllImport("kernel32.dll")]
	      internal static extern void GetSystemTime([MarshalAs(UnmanagedType.LPStruct)]MySystemTime st);
	   };
	
	   class TestApplication
	   {      
	      public static void Main()
	      {
	         try
	         {
	            MySystemTime sysTime = new MySystemTime();
	            NativeMethods.GetSystemTime(sysTime);
	            Console.WriteLine("The System time is {0}/{1}/{2} {3}:{4}:{5}", sysTime.wDay,
	               sysTime.wMonth, sysTime.wYear, sysTime.wHour, sysTime.wMinute, sysTime.wSecond);            
	         }         
	         catch(TypeLoadException e)
	         {
	            Console.WriteLine("TypeLoadException : " + e.Message);
	         }
	         catch(Exception e)
	         {
	            Console.WriteLine("Exception : " + e.Message);
	         }
	      }
	   }
	}
	

snippet io_compression_gzip1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_Compression_GZip1/gziptest.cs

	using System;
	using System.IO;
	using System.IO.Compression;
	
	public class Program
	{
	    private static string directoryPath = @".\temp";
	    public static void Main()
	    {
	        DirectoryInfo directorySelected = new DirectoryInfo(directoryPath);
	        Compress(directorySelected);
	
	        foreach (FileInfo fileToDecompress in directorySelected.GetFiles("*.gz"))
	        {
	            Decompress(fileToDecompress);
	        }
	    }
	
	    public static void Compress(DirectoryInfo directorySelected)
	    {
	        foreach (FileInfo fileToCompress in directorySelected.GetFiles())
	        {
	            using (FileStream originalFileStream = fileToCompress.OpenRead())
	            {
	                if ((File.GetAttributes(fileToCompress.FullName) & 
	                   FileAttributes.Hidden) != FileAttributes.Hidden & fileToCompress.Extension != ".gz")
	                {
	                    using (FileStream compressedFileStream = File.Create(fileToCompress.FullName + ".gz"))
	                    {
	                        using (GZipStream compressionStream = new GZipStream(compressedFileStream, 
	                           CompressionMode.Compress))
	                        {
	                            originalFileStream.CopyTo(compressionStream);
	
	                        }
	                    }
	                    FileInfo info = new FileInfo(directoryPath + Path.DirectorySeparatorChar + fileToCompress.Name + ".gz");
	                    Console.WriteLine($"Compressed {fileToCompress.Name} from {fileToCompress.Length.ToString()} to {info.Length.ToString()} bytes.");
	                }
	
	            }
	        }
	    }
	
	    public static void Decompress(FileInfo fileToDecompress)
	    {
	        using (FileStream originalFileStream = fileToDecompress.OpenRead())
	        {
	            string currentFileName = fileToDecompress.FullName;
	            string newFileName = currentFileName.Remove(currentFileName.Length - fileToDecompress.Extension.Length);
	
	            using (FileStream decompressedFileStream = File.Create(newFileName))
	            {
	                using (GZipStream decompressionStream = new GZipStream(originalFileStream, CompressionMode.Decompress))
	                {
	                    decompressionStream.CopyTo(decompressedFileStream);
	                    Console.WriteLine($"Decompressed: {fileToDecompress.Name}");
	                }
	            }
	        }
	    }
	}

snippet cryptography_hashalgorithm_transformfinalblock

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_HashAlgorithm_TransformFinalBlock/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	class MainClass
	{
		public static void Main()
		{
			RandomNumberGenerator rnd = RandomNumberGenerator.Create();
	
			byte[] input = new byte[20];
			rnd.GetBytes(input);
	
			Console.WriteLine("Input        : {0}\n", BytesToStr(input));
			PrintHash(input);
			PrintHashOneBlock(input);
			PrintHashMultiBlock(input, 1);
			PrintHashMultiBlock(input, 2);
			PrintHashMultiBlock(input, 3);
			PrintHashMultiBlock(input, 5);
			PrintHashMultiBlock(input, 10);
			PrintHashMultiBlock(input, 11);
			PrintHashMultiBlock(input, 19);
			PrintHashMultiBlock(input, 20);
			PrintHashMultiBlock(input, 21);
		}
	
		public static string BytesToStr(byte[] bytes)
		{
			StringBuilder str = new StringBuilder();
	
			for (int i = 0; i < bytes.Length; i++)
				str.AppendFormat("{0:X2}", bytes[i]);
	
			return str.ToString();
		}
	
		public static void PrintHash(byte[] input)
		{
			SHA256Managed sha = new SHA256Managed();
			Console.WriteLine("ComputeHash  : {0}", BytesToStr(sha.ComputeHash(input)));
		}
	
		public static void PrintHashOneBlock(byte[] input)
		{
			SHA256Managed sha = new SHA256Managed();
			sha.TransformFinalBlock(input, 0, input.Length);
			Console.WriteLine("FinalBlock   : {0}", BytesToStr(sha.Hash));
		}
	
		public static void PrintHashMultiBlock(byte[] input, int size)
		{
			SHA256Managed sha = new SHA256Managed();
			int offset = 0;
	
			while (input.Length - offset >= size)
				offset += sha.TransformBlock(input, offset, size, input, offset);
	
			sha.TransformFinalBlock(input, offset, input.Length - offset);
			Console.WriteLine("MultiBlock {0:00}: {1}", size, BytesToStr(sha.Hash));
		}
	
	}
snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/turkish1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      string fileUrl = "file";
	      Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
	      Console.WriteLine("Culture = {0}",
	                        Thread.CurrentThread.CurrentCulture.DisplayName);
	      Console.WriteLine("(file == FILE) = {0}", 
	                       fileUrl.StartsWith("FILE", true, null));
	      Console.WriteLine();
	      
	      Thread.CurrentThread.CurrentCulture = new CultureInfo("tr-TR");
	      Console.WriteLine("Culture = {0}",
	                        Thread.CurrentThread.CurrentCulture.DisplayName);
	      Console.WriteLine("(file == FILE) = {0}", 
	                        fileUrl.StartsWith("FILE", true, null));
	   }
	}
	
	public class Example2
	{
	   public static bool IsFileURI(String path) 
	   {
	      return path.StartsWith("FILE:", true, null);
	   }
	}
	
	public class Example3
	{
	   public static bool IsFileURI(string path) 
	   {
	      return path.StartsWith("FILE:", StringComparison.OrdinalIgnoreCase);
	   }
	}
	
	public class Example4
	{
	   public static bool IsFileURI(string path)
	   {
	      if (path.Length < 5) return false;
	      
	      return String.Equals(path.Substring(0, 5), "FILE:", 
	                           StringComparison.OrdinalIgnoreCase);
	   }   
	}

snippet conceptual_events_other

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_events_other/remarks.cs

	
	using System;
	
	namespace EventRemarks
	{
	    public class AlarmEventArgs : EventArgs
	    {
	    }
	    public delegate void AlarmEventHandler(object sender, AlarmEventArgs e);
	
	    public class AlarmClock
	    {
	        public event AlarmEventHandler Alarm;
	
	        protected virtual void OnAlarm(AlarmEventArgs e)
	        {
	            AlarmEventHandler handler = Alarm;
	            if (handler != null)
	            {
	                handler(this, e);
	            }
	        }
	    }
	
	    delegate void EventHandler(object sender, EventArgs e);
	    public class WakeMeUp
	    {
	        public void AlarmRang(object sender, AlarmEventArgs e)
	        {
	        }
	    }
	
	    public class AlarmDriver
	    {
	        public static void Main()
	        {
	            WakeMeUp w = new WakeMeUp();
	
	            AlarmEventHandler alhandler = new AlarmEventHandler(w.AlarmRang);
	
	            AlarmClock clock = new AlarmClock();
	
	            clock.Alarm += alhandler;
	        }
	    }
	}

snippet x509store2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/x509store2/storenames1.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	
	public class Example
	{
	    static void Main()
	    {
	        Console.WriteLine("\r\nExists Certs Name and Location");
	        Console.WriteLine("------ ----- -------------------------");
	
	        foreach (StoreLocation storeLocation in (StoreLocation[]) 
	            Enum.GetValues(typeof(StoreLocation)))
	        {
	            foreach (StoreName storeName in (StoreName[]) 
	                Enum.GetValues(typeof(StoreName)))
	            {
	                X509Store store = new X509Store(storeName, storeLocation);
	
	                try
	                {
	                    store.Open(OpenFlags.OpenExistingOnly);
	
	                    Console.WriteLine("Yes    {0,4}  {1}, {2}", 
	                        store.Certificates.Count, store.Name, store.Location);
	                }   
	                catch (CryptographicException)
	                {
	                    Console.WriteLine("No           {0}, {1}", 
	                        store.Name, store.Location);
	                }
	            }
	            Console.WriteLine();
	        }
	    }
	}
	
	/* This example produces output similar to the following:
	
	Exists Certs Name and Location
	------ ----- -------------------------
	Yes       1  AddressBook, CurrentUser
	Yes      25  AuthRoot, CurrentUser
	Yes     136  CA, CurrentUser
	Yes      55  Disallowed, CurrentUser
	Yes      20  My, CurrentUser
	Yes      36  Root, CurrentUser
	Yes       0  TrustedPeople, CurrentUser
	Yes       1  TrustedPublisher, CurrentUser
	
	No           AddressBook, LocalMachine
	Yes      25  AuthRoot, LocalMachine
	Yes     131  CA, LocalMachine
	Yes      55  Disallowed, LocalMachine
	Yes       3  My, LocalMachine
	Yes      36  Root, LocalMachine
	Yes       0  TrustedPeople, LocalMachine
	Yes       1  TrustedPublisher, LocalMachine
	
	 */

snippet runtime_interopservices_marshal_securestringtocotaskmemunicode

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode/sample.cs

	using System;
	using System.Runtime.InteropServices;
	using System.Security;
	
	class Example
	{
	    static void Main()
	    {
	        IntPtr unmanagedRef = IntPtr.Zero;
	        Console.Write("Please enter your password: ");
	        SecureString passWord = GetPassword();
	
	        Console.WriteLine("Copying and decrypting the string to unmanaged memory...");
	        unmanagedRef = Marshal.SecureStringToCoTaskMemUnicode(passWord);
	        passWord.Dispose();
	        
	        if (unmanagedRef != IntPtr.Zero) {
	            Console.WriteLine("Zeroing out unmanaged memory...");
	            Marshal.ZeroFreeCoTaskMemUnicode(unmanagedRef);
	        }
	        Console.WriteLine("Done.");
	    }
	
	    public static SecureString GetPassword()
	    {
	        SecureString password = new SecureString();
	
	        ConsoleKeyInfo nextKey = Console.ReadKey(true);
	        while (nextKey.Key != ConsoleKey.Enter) {
	            if (nextKey.Key == ConsoleKey.Backspace) {
	                if (password.Length > 0) {
	                    password.RemoveAt(password.Length - 1);
	
	                    Console.Write(nextKey.KeyChar);
	                    Console.Write(" ");
	                    Console.Write(nextKey.KeyChar);
	                }
	            }
	            else {
	                password.AppendChar(nextKey.KeyChar);
	                Console.Write("*");
	            }
	
	            nextKey = Console.ReadKey(true);
	        }
	
	         Console.WriteLine();
	
	         password.MakeReadOnly();
	         return password;
	     }
	 }

snippet installercollection_copyto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_CopyTo/installercollection_copyto.cs

	
	/*
	   The following example demonstrates the 'CopyTo(Installer[], Int32)' method
	   of the 'InstallerCollection' class. It Creates 'AssemblyInstaller' instances
	   for 'MyAssembly1.exe' and 'MyAssembly2.exe'. These instances of 
	   'AssemblyInstaller' are added to an instance of 'TransactedInstaller'
	   instance. The names of the assemblies to be installed
	   are displayed on the console. The installation process then installs 
	   both 'MyAssembly1.exe' and 'MyAssembly2.exe'.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Collections;
	using System.Configuration.Install;
	using System.IO;
	
	public class InstallerCollection_CopyTo
	{
	   public static void Main()
	   {
	      TransactedInstaller myTransactedInstaller = new TransactedInstaller();
	      AssemblyInstaller myAssemblyInstaller;
	      InstallContext myInstallContext;
	
	      myAssemblyInstaller =
	         new AssemblyInstaller("MyAssembly1.exe", null);
	
	      myTransactedInstaller.Installers.Add(myAssemblyInstaller);
	
	      myAssemblyInstaller =
	         new AssemblyInstaller("MyAssembly2.exe", null);
	
	      myTransactedInstaller.Installers.Add(myAssemblyInstaller);
	     
	      Installer[] myInstallers =
	         new Installer[myTransactedInstaller.Installers.Count];
	
	      myTransactedInstaller.Installers.CopyTo(myInstallers, 0);
	      Console.WriteLine("Printing all assemblies to be installed -");
	      for(int i = 0; i < myInstallers.Length; i++)
	      {
	         if((myInstallers[i].GetType()).Equals(typeof(AssemblyInstaller)))
	         {
	            Console.WriteLine("{0} {1}", i + 1,
	               ((AssemblyInstaller)myInstallers[i]).Path);
	         }
	      }
	      myInstallContext = 
	         new InstallContext("Install.log", null);
	      myTransactedInstaller.Context = myInstallContext;
	
	      myTransactedInstaller.Install(new Hashtable());  
	   }  
	} 
snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/openfiledlg.cs

	using System;
	using System.Runtime.InteropServices;
	
	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
	public class OpenFileName
	{
	    public int    structSize = 0;
	    public IntPtr hwnd = IntPtr.Zero;
	    public IntPtr hinst = IntPtr.Zero;
	    public string filter = null;
	    public string custFilter = null;
	    public int    custFilterMax = 0;
	    public int    filterIndex = 0;
	    public string file = null;
	    public int    maxFile = 0;
	    public string fileTitle = null;
	    public int    maxFileTitle = 0;
	    public string initialDir = null;
	    public string title = null;
	    public int    flags = 0;
	    public short  fileOffset = 0;
	    public short  fileExtMax = 0;
	    public string defExt = null;
	    public int    custData = 0;
	    public IntPtr pHook = IntPtr.Zero;
	    public string template = null;
	}
	
	public class LibWrap
	{
	    [DllImport("Comdlg32.dll", CharSet = CharSet.Auto)]
	    public static extern bool GetOpenFileName([In, Out] OpenFileName ofn);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        OpenFileName ofn = new OpenFileName();
	
	        ofn.structSize = Marshal.SizeOf(ofn);
	        ofn.filter = "Log files\0*.log\0Batch files\0*.bat\0";
	        ofn.file = new string(new char[256]);
	        ofn.maxFile = ofn.file.Length;
	        ofn.fileTitle = new string(new char[64]);
	        ofn.maxFileTitle = ofn.fileTitle.Length;
	        ofn.initialDir = "C:\\";
	        ofn.title = "Open file called using platform invoke...";
	        ofn.defExt = "txt";
	
	        if (LibWrap.GetOpenFileName(ofn))
	        {
	            Console.WriteLine("Selected file with full path: {0}", ofn.file);
	        }
	    }
	}

snippet appdomaininitializer

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomainInitializer/source.cs

	using System;
	using System.Security.Policy;
	
	public class Example
	{
	    public static void Main()
	    {
	        AppDomain current = AppDomain.CurrentDomain;
	
	        AppDomainSetup ads = new AppDomainSetup();
	
	        Evidence ev = new Evidence(current.Evidence);
	
	        AppDomainInitializer adi = new AppDomainInitializer(AppDomainInit);
	        ads.AppDomainInitializer = adi;
	
	        string[] initArgs = {"String1", "String2"};
	        ads.AppDomainInitializerArguments = initArgs;
	
	        AppDomain ad = AppDomain.CreateDomain("ChildDomain", ev, ads);
	
	        Console.WriteLine("Press the Enter key to exit the example program.");
	        Console.ReadLine();
	    }
	
	    public static void AppDomainInit(string[] args)
	    {
	        Console.WriteLine("AppDomain \"{0}\" is initialized with these arguments:", 
	            AppDomain.CurrentDomain.FriendlyName);
	        foreach (string arg in args)
	        {
	            Console.WriteLine("    {0}", arg);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	AppDomain "ChildDomain" is initialized with these arguments:
	    String1
	    String2
	 */
snippet securestring_xchar

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/SecureString_xChar/xchar.cs

	using System;
	using System.Security;
	
	class Example
	{
	   public static void Main()
	   {
	      ConsoleKeyInfo cki;
	      String m = "\nEnter your password (up to 15 letters, numbers, and underscores)\n" +
	                 "Press BACKSPACE to delete the last character entered. " +
	                 "\nPress Enter when done, or ESCAPE to quit:";
	      SecureString password = new SecureString();
	      int top, left;
	
	      Console.TreatControlCAsInput = true;
	
	      Console.Clear();
	      Console.WriteLine(m);
	
	      top  = Console.CursorTop;
	      left = Console.CursorLeft;
	
	
	      do {
	         cki = Console.ReadKey(true);
	         if (cki.Key == ConsoleKey.Escape) break;
	
	         if (cki.Key == ConsoleKey.Backspace) {
	            if (password.Length > 0) {
	               Console.SetCursorPosition(left + password.Length - 1, top);
	               Console.Write(' ');
	               Console.SetCursorPosition(left + password.Length - 1, top);
	               password.RemoveAt(password.Length-1);
	            }
	         }
	         else {
	            if ((password.Length < 15) &&
	                 (Char.IsLetterOrDigit(cki.KeyChar) || cki.KeyChar == '_')) {
	               password.AppendChar(cki.KeyChar);
	               Console.SetCursorPosition(left+password.Length-1, top);
	               Console.Write('*');
	            }
	         }
	      } while (cki.Key != ConsoleKey.Enter & password.Length < 15);
	
	      password.MakeReadOnly();
	      password.Dispose();
	   }
	}

snippet processmodule

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProcessModule/processmodule.cs

	
	/* The following program demonstrates the use of 'ProcessModule' class. 
	   It creates a notepad, gets the 'MainModule' and all other modules of 
	   the process 'notepad.exe', displays some of the properties of each modules.
	*/
	using System;
	using System.Diagnostics;
	
	class MyProcessModuleClass
	{
	    public static void Main()
	    {
	        try
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo("notepad.exe");
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	                System.Threading.Thread.Sleep(1000);
	                ProcessModule myProcessModule;
	                ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;
	                Console.WriteLine("Properties of the modules  associated "
	                    + "with 'notepad' are:");
	                for (int i = 0; i < myProcessModuleCollection.Count; i++)
	                {
	                    myProcessModule = myProcessModuleCollection[i];
	                    Console.WriteLine("The moduleName is "
	                        + myProcessModule.ModuleName);
	                    Console.WriteLine("The " + myProcessModule.ModuleName + "'s base address is: "
	                        + myProcessModule.BaseAddress);
	                    Console.WriteLine("The " + myProcessModule.ModuleName + "'s Entry point address is: "
	                        + myProcessModule.EntryPointAddress);
	                    Console.WriteLine("The " + myProcessModule.ModuleName + "'s File name is: "
	                        + myProcessModule.FileName);
	                }
	                myProcessModule = myProcess.MainModule;
	                Console.WriteLine("The process's main moduleName is:  "
	                    + myProcessModule.ModuleName);
	                Console.WriteLine("The process's main module's base address is: "
	                    + myProcessModule.BaseAddress);
	                Console.WriteLine("The process's main module's Entry point address is: "
	                    + myProcessModule.EntryPointAddress);
	                Console.WriteLine("The process's main module's File name is: "
	                    + myProcessModule.FileName);
	                myProcess.CloseMainWindow();
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine($"Exception : {e.Message}");
	        }
	    }
	}

snippet sys_glob_sortkey_tostring

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_sortkey_tostring/ts.cs

	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    CompareInfo cmpi = null;
	    SortKey sk1 = null;
	    SortKey sk2 = null;
	    string s = "ABC";
	    string ignoreCase = "Ignore case";
	    string useCase    = "Use case   ";
	
	    cmpi = CompareInfo.GetCompareInfo("en-GB");
	
	    sk1 = cmpi.GetSortKey(s, CompareOptions.IgnoreCase);
	    sk2 = cmpi.GetSortKey(s);
	
	    Console.WriteLine("Original string: \"{0}\"", sk1.OriginalString);
	    Console.WriteLine();
	
	    Console.WriteLine("CompareInfo (culture) name: {0}", cmpi.Name);
	    Console.WriteLine("ToString - {0}: \"{1}\"", ignoreCase, sk1.ToString());
	    Console.WriteLine("ToString - {0}: \"{1}\"", useCase, sk2.ToString());
	    Console.WriteLine();
	
	    DisplayKeyData(sk1, ignoreCase);
	    DisplayKeyData(sk2, useCase);
	    }
	
	    public static void DisplayKeyData(SortKey sk, string title)
	    {
	    Console.Write("Key Data - {0}: ", title);
	    foreach (byte keyDatum in sk.KeyData)
	        Console.Write("0x{0} ", (uint)keyDatum);
	    Console.WriteLine();
	    }
	}
	/*
	This code example produces the following results:
	
	Original string: "ABC"
	
	CompareInfo (culture) name: en-GB
	ToString - Ignore case: "SortKey - 2057, IgnoreCase, ABC"
	ToString - Use case   : "SortKey - 2057, None, ABC"
	
	Key Data - Ignore case: 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x1 0x1 0x0
	Key Data - Use case   : 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x18 0x18 0x18 0x1 0x1 0x0
	
	*/
snippet conceptual_encoding

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_encoding/getbytes1.cs

	using System;
	using System.Text;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] strings= { "This is the first sentence. ", 
	                          "This is the second sentence. " };
	      Encoding asciiEncoding = Encoding.ASCII;
	      
	      byte[] bytes = new byte[49];
	      int index = 0;
	      
	      Console.WriteLine("Strings to encode:");
	      foreach (var stringValue in strings) {
	         Console.WriteLine("   {0}", stringValue);
	         
	         int count = asciiEncoding.GetByteCount(stringValue);
	         if (count + index >=  bytes.Length)
	            Array.Resize(ref bytes, bytes.Length + 50);
	
	         int written = asciiEncoding.GetBytes(stringValue, 0, 
	                                              stringValue.Length, 
	                                              bytes, index);    
	    
	         index = index + written; 
	      } 
	      Console.WriteLine("\nEncoded bytes:");
	      Console.WriteLine("{0}", ShowByteValues(bytes, index));
	      Console.WriteLine();
	      
	      string newString = asciiEncoding.GetString(bytes, 0, index);
	      Console.WriteLine("Decoded: {0}", newString);
	   }
	   
	   private static string ShowByteValues(byte[] bytes, int last ) 
	   {
	      string returnString = "   ";
	      for (int ctr = 0; ctr <= last - 1; ctr++) {
	         if (ctr % 20 == 0)
	            returnString += "\n   ";
	         returnString += String.Format("{0:X2} ", bytes[ctr]);
	      }
	      return returnString;
	   }
	}

snippet cryptography_dataprotector

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cryptography_dataprotector/class1.cs

	using System;
	using System.Security.Permissions;
	
	namespace System.Security.Cryptography
	{
	    public sealed class MyDataProtector : DataProtector
	    {
	        public DataProtectionScope Scope { get; set; }
	        protected override bool PrependHashedPurposeToPlaintext
	        {
	            get
	            {
	                return false;
	            }
	        }
	        [SecuritySafeCritical]
	        [DataProtectionPermission(SecurityAction.Assert, ProtectData = true)]
	        protected override byte[] ProviderProtect(byte[] userData)
	        {
	            return ProtectedData.Protect(userData, GetHashedPurpose(), Scope);
	        }
	        [SecuritySafeCritical]
	        [DataProtectionPermission(SecurityAction.Assert, UnprotectData = true)]
	        protected override byte[] ProviderUnprotect(byte[] encryptedData)
	        {
	            return ProtectedData.Unprotect(encryptedData, GetHashedPurpose(), Scope);
	        }
	        public override bool IsReprotectRequired(byte[] encryptedData)
	        {
	            return true;
	        }
	        [DataProtectionPermission(SecurityAction.Demand, Unrestricted = true)]
	        [SecuritySafeCritical]
	        public MyDataProtector(string appName, string primaryPurpose, params string[] specificPurpose)
	            : base(appName, primaryPurpose, specificPurpose)
	        {
	        }
	    }
	}

snippet conceptual_tap

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_tap/examples1.cs

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.IO;
	using System.Threading;
	using System.Threading.Tasks;
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	
	   public Task ReadAsync(byte [] buffer, int offset, int count, 
	                         CancellationToken cancellationToken)
	   {
	      return Task.Factory.StartNew( () => Thread.Sleep(100));
	   }                      
	
	   public Task ReadAsync(byte[] buffer, int offset, int count, 
	                         IProgress<long> progress)
	   {
	      return Task.Factory.StartNew( () => Thread.Sleep(100));
	   }                      
	
	
	   public Task<ReadOnlyCollection<FileInfo>> FindFilesAsync(
	               string pattern, 
	               IProgress<Tuple<double, 
	               ReadOnlyCollection<List<FileInfo>>>> progress)
	   {
	      return Task.Factory.StartNew( () => { FileInfo[] fi = new FileInfo[10]; 
	                                          return new ReadOnlyCollection<FileInfo>(fi); } );
	   }               
	
	   public Task<ReadOnlyCollection<FileInfo>> FindFilesAsync(
	       string pattern, 
	       IProgress<FindFilesProgressInfo> progress)
	   {
	      return Task.Factory.StartNew( () => { FileInfo[] fi = new FileInfo[10]; 
	                                          return new ReadOnlyCollection<FileInfo>(fi); } );
	   }
	}
	
	public class FindFilesProgressInfo
	{}
	
	
	public class Progress<T> : IProgress<T>
	{
	    public Progress();
	    public Progress(Action<T> handler);
	    protected virtual void OnReport(T value);
	    public event EventHandler<T> ProgressChanged;
	}

snippet finfo_ctor

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_Ctor/finfo_ctor.cs

	using System;
	using System.IO;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\temp\MyTest.txt";
	        FileInfo fi1 = new FileInfo(path);
	
	        if (!fi1.Exists) 
	        {
	            using (StreamWriter sw = fi1.CreateText()) 
	            {
	                sw.WriteLine("Hello");
	                sw.WriteLine("And");
	                sw.WriteLine("Welcome");
	            }	
	        }
	
	        using (StreamReader sr = fi1.OpenText()) 
	        {
	            string s = "";
	            while ((s = sr.ReadLine()) != null) 
	            {
	                Console.WriteLine(s);
	            }
	        }
	
	        try 
	        {
	            string path2 = path + "temp";
	            FileInfo fi2 = new FileInfo(path2);
	
	            fi2.Delete();
	
	            fi1.CopyTo(path2);
	            Console.WriteLine("{0} was copied to {1}.", path, path2);
	
	            fi2.Delete();
	            Console.WriteLine("{0} was successfully deleted.", path2);
	
	        } 
	        catch (Exception e) 
	        {
	            Console.WriteLine("The process failed: {0}", e.ToString());
	        }
	    }
	}

snippet conceptual_calendars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_calendars/changecalendar2.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime date1 = new DateTime(2011, 6, 20);
	
	      DisplayCurrentInfo();
	      Console.WriteLine(date1.ToString("d"));       
	      Console.WriteLine();
	      
	      CultureInfo arSA = CultureInfo.CreateSpecificCulture("ar-SA");
	      
	      Thread.CurrentThread.CurrentCulture = arSA;
	      DisplayCurrentInfo();
	      Console.WriteLine(date1.ToString("d"));
	      Console.WriteLine();
	      
	      Calendar hijri = new HijriCalendar();
	      if (CalendarExists(arSA, hijri)) {
	         arSA.DateTimeFormat.Calendar = hijri;
	         DisplayCurrentInfo();
	         Console.WriteLine(date1.ToString("d"));
	      }       
	   }
	
	   private static void DisplayCurrentInfo()
	   {
	      Console.WriteLine("Current Culture: {0}", 
	                        CultureInfo.CurrentCulture.Name);
	      Console.WriteLine("Current Calendar: {0}", 
	                        DateTimeFormatInfo.CurrentInfo.Calendar);
	   }
	
	   private static bool CalendarExists(CultureInfo culture, Calendar cal)
	   {
	      foreach (Calendar optionalCalendar in culture.OptionalCalendars)
	         if (cal.ToString().Equals(optionalCalendar.ToString())) 
	            return true;
	
	      return false;
	   }
	}

snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/ecmascript2.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   static string pattern;
	   
	   public static void Main()
	   {
	      string input = "aa aaaa aaaaaa "; 
	      pattern = @"((a+)(\1) ?)+";
	      
	      AnalyzeMatch(Regex.Match(input, pattern));
	      
	      AnalyzeMatch(Regex.Match(input, pattern, RegexOptions.ECMAScript));
	   }   
	   
	   private static void AnalyzeMatch(Match m)
	   {
	      if (m.Success)
	      {
	         Console.WriteLine("'{0}' matches {1} at position {2}.",  
	                           pattern, m.Value, m.Index);
	         int grpCtr = 0;
	         foreach (Group grp in m.Groups)
	         {
	            Console.WriteLine("   {0}: '{1}'", grpCtr, grp.Value);
	            grpCtr++;
	            int capCtr = 0;
	            foreach (Capture cap in grp.Captures)
	            {
	               Console.WriteLine("      {0}: '{1}'", capCtr, cap.Value);
	               capCtr++;
	            }
	         }
	      }
	      else
	      {
	         Console.WriteLine("No match found.");
	      }   
	      Console.WriteLine();
	   }
	}

snippet projectn_reflection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/propertyinfo1.cs

	using System;
	using System.Reflection;
	
	class PropertyInfo_GetValue
	{
	   private TextBlock b;
	
	   public PropertyInfo_GetValue()
	   {
	      this.b = new TextBlock();
	   }
	
	   public static void Main()
	   {
	      PropertyInfo_GetValue p = new PropertyInfo_GetValue();
	      p.Example();
	      Console.WriteLine(p.Show());
	   }
	
	   public void Example()
	   {
	     string test = "abcdefghijklmnopqrstuvwxyz";
	
	     TypeInfo ti = typeof(string).GetTypeInfo();
	     PropertyInfo pinfo = ti.GetDeclaredProperty("Chars");
	
	     object[] indexArgs = { 6 };
	     object value = pinfo.GetValue(test, indexArgs);
	     b.Text += String.Format("Character at position {0}: {1}\n", indexArgs[0], value);
	
	     b.Text += "\nThe complete string:\n";
	     for (int x = 0; x < test.Length; x++)
	     {
	         b.Text += pinfo.GetValue(test, new Object[] {x}).ToString() + " ";
	     }
	   }
	   
	   public string Show()
	   {
	      return b.Text;
	   }
	}
	
	internal class TextBlock
	{
	   private String s;
	   
	   public String Text 
	   {
	      get { return s; }
	      set { s = value; }
	   }
	}
	
	

snippet registrykey_opensubkey_permcheck

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegistryKey_OpenSubKey_PermCheck/source.cs

	using System;
	using Microsoft.Win32;
	using System.Diagnostics;
	
	public class Example
	{
	    public static void Main()
	    {
	        const int LIMIT = 100;
	        RegistryKey cu = Registry.CurrentUser;
	        const string testKey = "RegistryKeyPermissionCheckExample";
	
	        Console.WriteLine("Generating {0} key/value pairs.", LIMIT);
	        RegistryKey rk = cu.CreateSubKey(testKey);
	        for (int i = 0; i < LIMIT; i++)
	        {
	            rk.SetValue("Key" + i, i);
	        }
	
	        rk.Close();
	
	        Stopwatch s = new Stopwatch();
	
	        rk = cu.OpenSubKey(testKey, RegistryKeyPermissionCheck.Default);
	        
	        s.Start();
	        for (int i = 0; i < LIMIT; i++)
	        {
	            rk.GetValue("Key" + i, i);
	        }
	        s.Stop();
	        rk.Close();
	        long delta1 = s.ElapsedTicks;
	
	        s.Reset();
	
	        rk = cu.OpenSubKey(testKey, RegistryKeyPermissionCheck.ReadSubTree);
	        
	        s.Start();
	        for (int i = 0; i < LIMIT; i++)
	        {
	            rk.GetValue("Key" + i, i);
	        }
	        s.Stop();
	        rk.Close();
	        long delta2 = s.ElapsedTicks;
	
	        double faster = (double) (delta1 - delta2) / (double) delta1;
	        Console.WriteLine("ReadSubTree is {0}% faster for {1} values.",
	            (faster * 100).ToString("0.0"), LIMIT);
	
	        cu.DeleteSubKey(testKey);
	    }
	}
	
	/* This code example produces output similar to the following:
	
	Generating 100 key/value pairs.
	ReadSubTree is 23.4% faster for 100 values.
	 */
snippet fieldbuilder_class_name

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldBuilder_Class_Name/FieldBuilder.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public class FieldBuilder_Sample
	{
	   private static Type CreateType()
	   {
	      AssemblyName assemName = new AssemblyName();
	      assemName.Name = "DynamicAssembly";
	      AssemblyBuilder assemBuilder =
	                     AssemblyBuilder.DefineDynamicAssembly(assemName, AssemblyBuilderAccess.Run);
	      ModuleBuilder modBuilder = assemBuilder.DefineDynamicModule("DynamicModule");
	      TypeBuilder typBuilder = modBuilder.DefineType("DynamicClass", TypeAttributes.Public);
	
	      FieldBuilder fldBuilder = typBuilder.DefineField("DynamicField",
	          typeof(string), FieldAttributes.Private | FieldAttributes.Static);
	      Type[] constructorArgs = { typeof(String) };
	      ConstructorBuilder constructor = typBuilder.DefineConstructor(
	         MethodAttributes.Public, CallingConventions.Standard, constructorArgs);
	      ILGenerator constructorIL = constructor.GetILGenerator();
	      constructorIL.Emit(OpCodes.Ldarg_0);
	      ConstructorInfo superConstructor = typeof(Object).GetConstructor(new Type[0]);
	      constructorIL.Emit(OpCodes.Call, superConstructor);
	      constructorIL.Emit(OpCodes.Ldarg_0);
	      constructorIL.Emit(OpCodes.Ldarg_1);
	      constructorIL.Emit(OpCodes.Stfld, fldBuilder);
	      constructorIL.Emit(OpCodes.Ret);
	
	      MethodBuilder methBuilder= typBuilder.DefineMethod("DynamicMethod",
	                           MethodAttributes.Public,typeof(String),null);
	      ILGenerator methodIL = methBuilder.GetILGenerator();
	      methodIL.Emit(OpCodes.Ldarg_0);
	      methodIL.Emit(OpCodes.Ldfld, fldBuilder);
	      methodIL.Emit(OpCodes.Ret);
	
	      Console.WriteLine($"Name               : {fldBuilder.Name}");
	      Console.WriteLine($"DeclaringType      : {fldBuilder.DeclaringType}");
	      Console.WriteLine($"Type               : {fldBuilder.FieldType}");
	      return typBuilder.CreateType();
	   }
	
	   public static void Main()
	   {
	      Type dynType = CreateType();
	      try
	      {
	         Object helloWorld = Activator.CreateInstance(dynType, new Object[] { "HelloWorld" });
	         Object obj  = dynType.InvokeMember("DynamicMethod",
	                        BindingFlags.InvokeMethod, null, helloWorld, null);
	         Console.WriteLine($"DynamicClass.DynamicMethod returned: \"{obj}\"");
	      }
	      catch(MethodAccessException e)
	      {
	         Console.WriteLine($"{e.GetType().Name}: {e.Message}");
	      }
	  }
	} 
snippet typebuilder_getevents1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_GetEvents1/typebuilder_getevents1.cs

	
	/*
	   The program demonstrates the 'GetEvents' method of the 'TypeBuilder' class.
	   It builds an assembly by defining 'HelloWorld' type and creates a 'Click' and
	   'MouseUp' events on the type. Then displays all events to the Console.
	*/
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	
	
	public class MyApplication
	{
	   public delegate void MyEvent(Object temp);
	   public static void Main()
	   {
	      TypeBuilder helloWorldClass = CreateCallee(Thread.GetDomain());
	
	      EventInfo[] info =
	         helloWorldClass.GetEvents(BindingFlags.Public | BindingFlags.Instance);
	      Console.WriteLine("'HelloWorld' type has following events :");
	      for(int i=0; i < info.Length; i++)
	         Console.WriteLine(info[i].Name);
	   }
	
	   private static TypeBuilder CreateCallee(AppDomain myDomain)
	   {
	      AssemblyName assemblyName = new AssemblyName();
	      assemblyName.Name = "EmittedAssembly";
	
	      AssemblyBuilder myAssembly =
	         myDomain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);
	      ModuleBuilder myModule = myAssembly.DefineDynamicModule("EmittedModule");
	
	      TypeBuilder helloWorldClass =
	         myModule.DefineType("HelloWorld", TypeAttributes.Public);
	
	      MethodBuilder myMethod1 = helloWorldClass.DefineMethod("OnClick",
	         MethodAttributes.Public, typeof(void), new Type[]{typeof(Object)});
	      ILGenerator methodIL1 = myMethod1.GetILGenerator();
	      methodIL1.Emit(OpCodes.Ret);
	      MethodBuilder myMethod2 = helloWorldClass.DefineMethod("OnMouseUp",
	         MethodAttributes.Public, typeof(void), new Type[]{typeof(Object)});
	      ILGenerator methodIL2 = myMethod2.GetILGenerator();
	      methodIL2.Emit(OpCodes.Ret);
	
	      EventBuilder myEvent1 = helloWorldClass.DefineEvent("Click", EventAttributes.None,
	         typeof(MyEvent));
	      myEvent1.SetRaiseMethod(myMethod1);
	      EventBuilder myEvent2 = helloWorldClass.DefineEvent("MouseUp", EventAttributes.None,
	         typeof(MyEvent));
	      myEvent2.SetRaiseMethod(myMethod2);
	
	      helloWorldClass.CreateType();
	      return(helloWorldClass);
	   }
	}
snippet countercreationdatacollection_addrange

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CounterCreationDataCollection_AddRange/countercreationdatacollection_addrange.cs

	/*
	   The following program demonstrates 'CounterCreationDataCollection()' constructor and
	   'AddRange(CounterCreationDataCollection)' method of 'CounterCreationDataCollection' class.
	   A 'CounterCreationData' object is created and added to an instance of 'CounterCreationDataCollection'
	   class. Then counters in the 'CounterCreationDataCollection' are displayed to the console.
	*/
	using System;
	using System.Diagnostics;
	
	public class CounterDataCollectionExample
	{
	    public static void Main()
	    {
	        try
	        {
	
	            string myCategoryName;
	            int numberOfCounters;
	            Console.Write("Enter the number of counters : ");
	            numberOfCounters = int.Parse(Console.ReadLine());
	            CounterCreationData[] myCounterCreationData =
	               new CounterCreationData[numberOfCounters];
	            for (int i = 0; i < numberOfCounters; i++)
	            {
	                Console.Write("Enter the counter name for {0} counter : ", i);
	                myCounterCreationData[i] = new CounterCreationData();
	                myCounterCreationData[i].CounterName = Console.ReadLine();
	            }
	            CounterCreationDataCollection myCounterCollection =
	               new CounterCreationDataCollection(myCounterCreationData);
	            Console.Write("Enter the category Name : ");
	            myCategoryName = Console.ReadLine();
	            if (!PerformanceCounterCategory.Exists(myCategoryName))
	            {
	                CounterCreationDataCollection myNewCounterCollection =
	                   new CounterCreationDataCollection();
	                myNewCounterCollection.AddRange(myCounterCollection);
	
	                PerformanceCounterCategory.Create(myCategoryName, "Sample Category",
	                PerformanceCounterCategoryType.SingleInstance, myNewCounterCollection);
	
	                Console.WriteLine("The list of counters in CounterCollection are: ");
	                for (int i = 0; i < myNewCounterCollection.Count; i++)
	                    Console.WriteLine("Counter {0} is '{1}'", i + 1, myNewCounterCollection[i].CounterName);
	            }
	            else
	            {
	                Console.WriteLine("The category already exists");
	            }
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception: {0}.", e.Message);
	            return;
	        }
	    }
	}
snippet assemblybuilder_setcustomattribute1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute1/assemblybuilder_setcustomattribute1.cs

	/*
	   The following program demonstrates the 'SetCustomAttribute(CustomAttributeBuilder)'
	   method of 'AssemblyBuilder' class. It defines a 'MyAttribute' class which is derived
	   from 'Attribute' class. It builds an assembly by setting 'MyAttribute' custom attribute
	   and defines 'HelloWorld' type. Then it gets the custom attributes of 'HelloWorld' type
	   and displays its contents to the console.
	*/
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	
	[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
	public class MyAttribute : Attribute
	{
	   public String s;
	   public int x;
	
	   public MyAttribute(String s, int x)
	   {
	      this.s = s;
	      this.x = x;
	   }
	}
	
	class MyApplication
	{
	   public static void Main()
	   {
	      Type customAttribute = CreateCallee(Thread.GetDomain());
	      object[] attributes = customAttribute.Assembly.GetCustomAttributes(true);
	      Console.WriteLine("MyAttribute custom attribute contains : ");
	      for(int index=0; index < attributes.Length; index++)
	      {
	         if(attributes[index] is MyAttribute)
	         {
	            Console.WriteLine("s : " + ((MyAttribute)attributes[index]).s);
	            Console.WriteLine("x : " + ((MyAttribute)attributes[index]).x);
	            break;
	         }
	      }
	   }
	
	
	   private static Type CreateCallee(AppDomain domain)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedAssembly";
	      AssemblyBuilder myAssembly = domain.DefineDynamicAssembly(myAssemblyName,
	         AssemblyBuilderAccess.Run);
	      Type myType = typeof(MyAttribute);
	      ConstructorInfo infoConstructor = myType.GetConstructor(new Type[2]{typeof(String), typeof(int)});
	      CustomAttributeBuilder attributeBuilder =
	         new CustomAttributeBuilder(infoConstructor, new object[2]{"Hello", 2});
	      myAssembly.SetCustomAttribute(attributeBuilder);
	      ModuleBuilder myModule = myAssembly.DefineDynamicModule("EmittedModule");
	      TypeBuilder helloWorldClass = myModule.DefineType("HelloWorld", TypeAttributes.Public);
	
	      return(helloWorldClass.CreateType());
	  }
	}
snippet io_fileinfo_isreadonly

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_FileInfo_isReadOnly/sample.cs

	using System;
	using System.IO;
	
	namespace FileSystemExample
	{
	    class FileExample
	    {
	        public static void Main()
	        {
	
	            string FileName = @"c:\test.xml";
	
	            bool isReadOnly = IsFileReadOnly(FileName);
	
	            Console.WriteLine("The file read-only value for " + FileName + " is: " + isReadOnly);
	
	            Console.WriteLine("Changing the read-only value for " + FileName + " to true.");
	
	            SetFileReadAccess(FileName, true);
	
	            isReadOnly = IsFileReadOnly(FileName);
	
	            Console.WriteLine("The file read-only value for " + FileName + " is: " + isReadOnly);
	
	
	        }
	
	        public static void SetFileReadAccess(string FileName, bool SetReadOnly)
	        {
	            FileInfo fInfo = new FileInfo(FileName);
	
	            fInfo.IsReadOnly = SetReadOnly;
	
	        }
	
	        public static bool IsFileReadOnly(string FileName)
	        {
	            FileInfo fInfo = new FileInfo(FileName);
	
	            return fInfo.IsReadOnly;
	
	        }
	
	    }
	}
	
snippet microsoft_win32_registrykey_setvalue1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Win32_RegistryKey_SetValue1/source.cs

	using System;
	using Microsoft.Win32;
	
	public class Example
	{
	    public static void Main()
	    {
	        Registry.CurrentUser.DeleteSubKey("RegistrySetValueExample", false);
	        RegistryKey rk = Registry.CurrentUser.CreateSubKey("RegistrySetValueExample");
	
	
	        rk.SetValue("LargeNumberValue1", (long) 42);
	        rk.SetValue("LargeNumberValue2", 42000000000);
	
	        rk.SetValue("DWordValue", 42);
	        rk.SetValue("MultipleStringValue", new string[] {"One", "Two", "Three"});
	        rk.SetValue("BinaryValue", new byte[] {10, 43, 44, 45, 14, 255});
	
	        rk.SetValue("StringValue", "The path is %PATH%");
	
	
	        string[] valueNames = rk.GetValueNames();
	        foreach (string s in valueNames)
	        {
	            RegistryValueKind rvk = rk.GetValueKind(s);
	            switch (rvk)
	            {
	                case RegistryValueKind.MultiString :
	                    string[] values = (string[]) rk.GetValue(s);
	                    Console.Write("\r\n {0} ({1}) = \"{2}\"", s, rvk, values[0]);
	                    for (int i = 1; i < values.Length; i++)
	                    {
	                        Console.Write(", \"{0}\"", values[i]);
	                    }
	                    Console.WriteLine();
	                    break;
	                
	                case RegistryValueKind.Binary :
	                    byte[] bytes = (byte[]) rk.GetValue(s);
	                    Console.Write("\r\n {0} ({1}) = {2:X2}", s, rvk, bytes[0]);
	                    for (int i = 1; i < bytes.Length; i++)
	                    {
	                        Console.Write(" {0:X2}", bytes[i]);
	                    }
	                    Console.WriteLine();
	                    break;
	                
	                default :
	                    Console.WriteLine("\r\n {0} ({1}) = {2}", s, rvk, rk.GetValue(s));
	                    break;
	            }
	        }
	    }
	}
snippet cryptography_xml_cipherreference

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cryptography_Xml_CipherReference/example.cs

	using System;
	using System.Security.Cryptography.Xml;
	using System.Xml;
	using System.IO;
	
	namespace EncryptedDataSample
	{
		class Sample1
		{
			[STAThread]
			static void Main(string[] args)
			{
				Transform base64 = new XmlDsigBase64Transform();
				TransformChain tc = new TransformChain();
				tc.Add(base64);
				CipherReference reference = new CipherReference(uri, tc);
	
				CipherData cd = new CipherData(reference);
	
				EncryptedData ed = new EncryptedData();
	
				ed.Id = "ED";
				ed.CipherData = cd;
	
				KeyInfo ki = new KeyInfo();
				ed.KeyInfo = ki;
	
				XmlDocument doc = new XmlDocument();
				XmlElement encryptionPropertyElement = (XmlElement)doc.CreateElement("EncryptionProperty", EncryptedXml.XmlEncNamespaceUrl);
				EncryptionProperty ep = new EncryptionProperty(encryptionPropertyElement);
				ed.AddProperty(ep);
	
				try
				{
					string path = @"c:\test\MyTest.xml";
	
					File.WriteAllText(path, ed.GetXml().OuterXml);
				}
				catch (IOException e)
				{
					Console.WriteLine("File IO error. {0}", e);
				}
	
			}
		}
	}
snippet console_cancelkeypress

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_cancelkeypress/ckp.cs

	using System;
	
	class Sample 
	{
	    public static void Main()
	    {
	        ConsoleKeyInfo cki;
	
	        Console.Clear();
	
	        Console.CancelKeyPress += new ConsoleCancelEventHandler(myHandler);
	        while (true) {
	            Console.Write("Press any key, or 'X' to quit, or ");
	            Console.WriteLine("CTRL+C to interrupt the read operation:");
	
	            cki = Console.ReadKey(true);
	
	            Console.WriteLine("  Key pressed: {0}\n", cki.Key);
	
	            if (cki.Key == ConsoleKey.X) break;
	        }
	    }
	
	    protected static void myHandler(object sender, ConsoleCancelEventArgs args)
	    {
	        Console.WriteLine("\nThe read operation has been interrupted.");
	
	        Console.WriteLine("  Key pressed: {0}", args.SpecialKey);
	
	        Console.WriteLine("  Cancel property: {0}", args.Cancel);
	
	        Console.WriteLine("Setting the Cancel property to true...");
	        args.Cancel = true;
	
	        Console.WriteLine("  Cancel property: {0}", args.Cancel);
	        Console.WriteLine("The read operation will resume...\n");
	    }
	}
snippet list`1_copyto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>();
	
	        dinosaurs.Add("Tyrannosaurus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("Mamenchisaurus");
	        dinosaurs.Add("Brachiosaurus");
	        dinosaurs.Add("Compsognathus");
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        string[] array = new string[15];
	
	        dinosaurs.CopyTo(array);
	        dinosaurs.CopyTo(array, 6);
	        dinosaurs.CopyTo(2, array, 12, 3);
	
	        Console.WriteLine("\nContents of the array:");
	        foreach(string dinosaur in array)
	        {
	            Console.WriteLine(dinosaur);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Tyrannosaurus
	Amargasaurus
	Mamenchisaurus
	Brachiosaurus
	Compsognathus
	
	Contents of the array:
	Tyrannosaurus
	Amargasaurus
	Mamenchisaurus
	Brachiosaurus
	Compsognathus
	
	Tyrannosaurus
	Amargasaurus
	Mamenchisaurus
	Brachiosaurus
	Compsognathus
	
	Mamenchisaurus
	Brachiosaurus
	Compsognathus
	 */
	
	

snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/unions.cs

	using System;
	using System.Runtime.InteropServices;
	
	[StructLayout(LayoutKind.Explicit)]
	public struct MyUnion
	{
	    [FieldOffset(0)]
	    public int i;
	    [FieldOffset(0)]
	    public double d;
	}
	
	[StructLayout(LayoutKind.Explicit, Size = 128)]
	public struct MyUnion2_1
	{
	    [FieldOffset(0)]
	    public int i;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct MyUnion2_2
	{
	    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
	    public string str;
	}
	
	public class LibWrap
	{
	    [DllImport("..\\LIB\\PInvokeLib.dll")]
	    public static extern void TestUnion(MyUnion u, int type);
	
	    [DllImport("..\\LIB\\PInvokeLib.dll")]
	    public static extern void TestUnion2(MyUnion2_1 u, int type);
	
	    [DllImport("..\\LIB\\PInvokeLib.dll")]
	    public static extern void TestUnion2(MyUnion2_2 u, int type);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        MyUnion mu = new MyUnion();
	        mu.i = 99;
	        LibWrap.TestUnion(mu, 1);
	
	        mu.d = 99.99;
	        LibWrap.TestUnion(mu, 2);
	
	        MyUnion2_1 mu2_1 = new MyUnion2_1();
	        mu2_1.i = 99;
	        LibWrap.TestUnion2(mu2_1, 1);
	
	        MyUnion2_2 mu2_2 = new MyUnion2_2();
	        mu2_2.str = "*** string ***";
	        LibWrap.TestUnion2(mu2_2, 2);
	    }
	}

snippet finfo_appendtext

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_AppendText/finfo_appendtext.cs

	using System;
	using System.IO;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        FileInfo fi = new FileInfo(@"c:\MyTest.txt");
	
	        if (!fi.Exists) 
	        {
	            using (StreamWriter sw = fi.CreateText()) 
	            {
	                sw.WriteLine("Hello");
	                sw.WriteLine("And");
	                sw.WriteLine("Welcome");
	            }	
	        }
	
	        using (StreamWriter sw = fi.AppendText()) 
	        {
	            sw.WriteLine("This");
	            sw.WriteLine("is Extra");
	            sw.WriteLine("Text");
	        }	
	
	        using (StreamReader sr = fi.OpenText()) 
	        {
	            string s = "";
	            while ((s = sr.ReadLine()) != null) 
	            {
	                Console.WriteLine(s);
	            }
	        }
	    }
	}
	
	

snippet stackframesample2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stackframesample2/program.cs

	using System;
	using System.Diagnostics;
	
	namespace StackFrameExample
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            try
	            {
	                Method1();
	            }
	            catch (Exception e)
	            {
	                StackTrace st = new StackTrace();
	                StackTrace st1 = new StackTrace(new StackFrame(true));
	                Console.WriteLine(" Stack trace for Main: {0}",
	                   st1.ToString());
	                Console.WriteLine(st.ToString());
	            }
	            Console.WriteLine("Press Enter to exit.");
	            Console.ReadLine();
	        }
	        private static void Method1()
	        {
	            try
	            {
	                Method2(4);
	            }
	            catch (Exception e)
	            {
	                StackTrace st = new StackTrace();
	                StackTrace st1 = new StackTrace(new StackFrame(true));
	                Console.WriteLine(" Stack trace for Method1: {0}",
	                   st1.ToString());
	                Console.WriteLine(st.ToString());
	                StackTrace st2 = new StackTrace(new StackFrame(1, true));
	                Console.WriteLine(" Stack trace for next level frame: {0}",
	                   st2.ToString());
	                throw e;
	            }
	
	        }
	        private static void Method2( int count)
	        {
	            try
	            {
	                if (count < 5)
	                    throw new ArgumentException("count too large", "count");
	            }
	            catch (Exception e)
	            {
	                StackTrace st = new StackTrace();              
	                StackTrace st1 = new StackTrace(new StackFrame(2,true));
	                Console.WriteLine(" Stack trace for Method2: {0}",
	                   st1.ToString());
	                Console.WriteLine(st.ToString());
	                throw e;
	            }
	        }
	    }
	}

snippet attrtargs

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AttrTargs/attrtargs.cs

	using System;
	
	namespace AttTargsCS {
	    [AttributeUsage(AttributeTargets.Class)]
	    public class ClassTargetAttribute : Attribute {
	    }
	
	    [AttributeUsage(AttributeTargets.Method)]
	    public class MethodTargetAttribute : Attribute {
	    }
	
	    [AttributeUsage(AttributeTargets.Constructor)]
	    public class ConstructorTargetAttribute : Attribute {
	    }
	
	    [AttributeUsage(AttributeTargets.Field)]
	    public class FieldTargetAttribute : Attribute {
	    }
	
	    [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)]
	    public class ClassMethodTargetAttribute : Attribute {
	    }
	
	    [AttributeUsage(AttributeTargets.GenericParameter)]
	    public class GenericParameterTargetAttribute : Attribute {
	    }
	
	    [AttributeUsage(AttributeTargets.All)]
	    public class AllTargetsAttribute : Attribute {
	    }
	
	    [ClassTarget]
	    [ClassMethodTarget]
	    [AllTargets]
	    public class TestClassAttribute {
	        [ConstructorTarget]
	        [AllTargets]
	        TestClassAttribute() {
	        }
	
	        [MethodTarget]
	        [ClassMethodTarget]
	        [AllTargets]
	        public void Method1() {
	        }
	
	        [FieldTarget]
	        [AllTargets]
	        public int myInt;
	
	        public void GenericMethod<
	            [GenericParameterTarget, AllTargets] T>(T x) {
	        }
	
	        static void Main(string[] args) {
	        }
	    }
	}
snippet unmanagedmarshalobsolete

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/UnmanagedMarshalObsolete/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Runtime.InteropServices;
	
	public class Example
	{
	    public static void Main()
	    {
	        AppDomain myDomain = AppDomain.CurrentDomain;
	        AssemblyName myAsmName = new AssemblyName("EmitMarshalAs");
	
	        AssemblyBuilder myAssembly = 
	            myDomain.DefineDynamicAssembly(myAsmName, 
	                AssemblyBuilderAccess.RunAndSave);
	
	        ModuleBuilder myModule = 
	            myAssembly.DefineDynamicModule(myAsmName.Name, 
	               myAsmName.Name + ".dll");
	
	        TypeBuilder myType = 
	            myModule.DefineType("Sample", TypeAttributes.Public);
	
	        MethodBuilder myMethod = 
	            myType.DefineMethod("Test", MethodAttributes.Public,
	                null, new Type[] { typeof(string) });
	
	
	        ParameterBuilder pb = 
	            myMethod.DefineParameter(0, 
	               ParameterAttributes.HasFieldMarshal, "arg");
	
	        ConstructorInfo ci = 
	            typeof(MarshalAsAttribute).GetConstructor(
	                new Type[] { typeof(UnmanagedType) });
	
	        CustomAttributeBuilder cabuilder = 
	            new CustomAttributeBuilder(
	                ci, new object[] { UnmanagedType.BStr });
	
	        pb.SetCustomAttribute(cabuilder);
	
	
	        ILGenerator il = myMethod.GetILGenerator();
	        il.Emit(OpCodes.Ret);
	
	        Type finished = myType.CreateType();
	        myAssembly.Save(myAsmName.Name + ".dll");
	    }
	}
snippet typebuilder_definepinvokemethod_fix

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/100656_fix.cs

	using System;
	using System.Text;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Runtime.InteropServices;
	
	public class Example
	{
	    public static void Main()
	    {
	        AssemblyName asmName = new AssemblyName("PInvokeTest");           
	        AssemblyBuilder dynamicAsm = AppDomain.CurrentDomain.DefineDynamicAssembly(
	            asmName, 
	            AssemblyBuilderAccess.RunAndSave
	        );
	
	        ModuleBuilder dynamicMod = 
	            dynamicAsm.DefineDynamicModule(asmName.Name, asmName.Name + ".dll");
	
	        TypeBuilder tb = dynamicMod.DefineType(
	            "MyType", 
	            TypeAttributes.Public | TypeAttributes.UnicodeClass
	        );
	    
	        MethodBuilder mb = tb.DefinePInvokeMethod(
	            "GetTickCount",
	            "Kernel32.dll",
	            MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.PinvokeImpl,
	            CallingConventions.Standard,
	            typeof(int),
	            Type.EmptyTypes,
	            CallingConvention.Winapi,
	            CharSet.Ansi);
	
	        mb.SetImplementationFlags(
	            mb.GetMethodImplementationFlags() | MethodImplAttributes.PreserveSig);
	
	
	        Type t = tb.CreateType();
	
	        MethodInfo mi = t.GetMethod("GetTickCount");
	        Console.WriteLine("Testing PInvoke method...");
	        Console.WriteLine("GetTickCount returned: {0}", mi.Invoke(null, null));
	
	        Console.WriteLine("Saving: " + asmName.Name + ".dll");
	        dynamicAsm.Save(asmName.Name + ".dll");
	    }
	}
	
	/* This example produces output similar to the following:
	
	Testing PInvoke method...
	GetTickCount returned: 1312576235
	Saving: PInvokeTest.dll
	 */
snippet type_iscontextfulimpl

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextfulImpl/type_iscontextfulimpl.cs

	using System;
	using System.Reflection;
	public class MyTypeDelegatorClass : TypeDelegator
	{
	    public string myElementType = null;
	    private Type myType = null ; 
	
	    public MyTypeDelegatorClass(Type myType) : base(myType)
	    {
	        this.myType = myType;
	    }
	    protected override bool IsContextfulImpl()
	    {
	        if(myType.IsContextful)
	        { 
	            myElementType = " is contextful ";
	            return true;
	        }
	        return false;
	    }
	}
	public class MyTypeDemoClass
	{
	    public static void Main()
	    {
	        try
	        {
	            MyTypeDelegatorClass myType;
	            Console.WriteLine ("Check whether MyContextBoundClass can be hosted in a context.");
	            myType = new MyTypeDelegatorClass(typeof(MyContextBoundClass));
	            if( myType.IsContextful)
	            {
	                Console.WriteLine(typeof(MyContextBoundClass) + " can be hosted in a context.");
	            }
	            else
	            {
	                Console.WriteLine(typeof(MyContextBoundClass) + " cannot be hosted in a context.");
	            }
	            myType = new MyTypeDelegatorClass(typeof(MyTypeDemoClass));
	            Console.WriteLine ("\nCheck whether MyTypeDemoClass can be hosted in a context.");
	            if( myType.IsContextful)
	            {
	                Console.WriteLine(typeof(MyTypeDemoClass) + " can be hosted in a context.");
	            }
	            else
	            {
	                Console.WriteLine(typeof(MyTypeDemoClass) + " cannot be hosted in a context.");
	            }
	        }
	        catch( Exception e )
	        {
	            Console.WriteLine("Exception: {0}", e.Message);
	        }
	    }
	}
	public class MyContextBoundClass : ContextBoundObject
	{
	    public string myString = "This class is used to demonstrate members of the Type class.";
	}

snippet type_ismarshalbyrefimpl

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/type_ismarshalbyrefimpl.cs

	using System;
	using System.Reflection;
	public class MyTypeDelegatorClass : TypeDelegator
	{
	    public string myElementType = null;
	    private Type myType = null ; 
	    public MyTypeDelegatorClass(Type myType) : base(myType)
	    {
	        this.myType = myType;
	    }
	    protected override bool IsMarshalByRefImpl()
	    {
	        if(myType.IsMarshalByRef)
	        { 
	            myElementType = " marshalled by reference";
	            return true;
	        }
	        return false;
	    }
	}
	public class MyTypeDemoClass
	{
	    public static void Main()
	    {
	        try
	        {
	            MyTypeDelegatorClass myType;
	            Console.WriteLine ("Determine whether MyContextBoundClass is marshalled by reference.");
	            myType = new MyTypeDelegatorClass(typeof(MyContextBoundClass));
	            if( myType.IsMarshalByRef )
	            {
	                Console.WriteLine(typeof(MyContextBoundClass) + " is marshalled by reference.");
	            }
	            else
	            {
	                Console.WriteLine(typeof(MyContextBoundClass) + " is not marshalled by reference.");
	            }
	
	            myType = new MyTypeDelegatorClass(typeof(int));
	            Console.WriteLine ("\nDetermine whether int is marshalled by reference.");
	            if( myType.IsMarshalByRef)
	            {
	                Console.WriteLine(typeof(int) + " is marshalled by reference.");
	            }
	            else
	            {
	                Console.WriteLine(typeof(int) + " is not marshalled by reference.");
	            }
	        }
	        catch( Exception e )
	        {
	            Console.WriteLine("Exception: {0}", e.Message);
	        }
	    }
	}
	public class MyContextBoundClass : ContextBoundObject
	{
	    public string myString = "This class is used to demonstrate members of the Type class.";
	}

snippet type_haselementtypeimpl

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/type_haselementtypeimpl.cs

	using System;
	using System.Reflection;
	public class MyTypeDelegator : TypeDelegator
	{
	    public string myElementType = null;
	    private Type myType = null ; 
	    public MyTypeDelegator(Type myType) : base(myType)
	    {
	        this.myType = myType;
	    }
	    protected override bool HasElementTypeImpl()
	    {
	        if(myType.IsArray)
	        {
	            myElementType = "array";
	            return true;
	        }
	        if(myType.IsByRef)
	        {
	            myElementType = "reference";
	            return true;
	        }
	        if(myType.IsPointer)
	        { 
	            myElementType = "pointer";
	            return true;
	        }
	        return false;
	    }  
	}
	public class Type_HasElementTypeImpl
	{
	    public static void Main()
	    {
	        try
	        {
	            int myInt = 0 ; 
	            int[] myArray = new int[5];
	            MyTypeDelegator myType = new MyTypeDelegator(myArray.GetType());
	            Console.WriteLine("\nDetermine whether a variable is an array, pointer, or reference type.\n");
	            if( myType.HasElementType)
	                Console.WriteLine("The type of myArray is {0}.", myType.myElementType);
	            else
	                Console.WriteLine("myArray is not an array, pointer, or reference type.");
	            myType = new MyTypeDelegator(myInt.GetType());
	            if( myType.HasElementType)
	                Console.WriteLine("The type of myInt is {0}.", myType.myElementType);
	            else
	                Console.WriteLine("myInt is not an array, pointer, or reference type.");
	        }
	        catch( Exception e )
	        {
	            Console.WriteLine("Exception: {0}", e.Message);
	        }
	    }
	}
	

snippet cryptography_dataprotectionsample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_DataProtectionSample/dataprotectionsample.cs

	using System;
	using System.Security.Cryptography;
	
	public class DataProtectionSample
	{
	    static byte [] s_aditionalEntropy = { 9, 8, 7, 6, 5 };
	
	    public static void Main()
	    {
	        byte [] secret = { 0, 1, 2, 3, 4, 1, 2, 3, 4 };
	
	        byte [] encryptedSecret = Protect( secret );
	        Console.WriteLine("The encrypted byte array is:");
	        PrintValues(encryptedSecret);
	
	        byte [] originalData = Unprotect( encryptedSecret );
	        Console.WriteLine("{0}The original data is:", Environment.NewLine);
	        PrintValues(originalData);
	    }
	
	    public static byte [] Protect( byte [] data )
	    {
	        try
	        {
	            return ProtectedData.Protect( data, s_aditionalEntropy, DataProtectionScope.CurrentUser );
	        } 
	        catch (CryptographicException e)
	        {
	            Console.WriteLine("Data was not encrypted. An error occurred.");
	            Console.WriteLine(e.ToString());
	            return null;
	        }
	    }
	
	    public static byte [] Unprotect( byte [] data )
	    {
	        try
	        {
	            return ProtectedData.Unprotect( data, s_aditionalEntropy, DataProtectionScope.CurrentUser );
	        } 
	        catch (CryptographicException e)
	        {
	            Console.WriteLine("Data was not decrypted. An error occurred.");
	            Console.WriteLine(e.ToString());
	            return null;
	        }
	    }
	
	    public static void PrintValues( Byte[] myArr )  
	    {
	        foreach ( Byte i in myArr )  
	        {
	            Console.Write( "\t{0}", i );
	        }
	        Console.WriteLine();
	    }
	}

snippet regularexpressions_quantifiers_emptymatch

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/regularexpressions_quantifiers_emptymatch/emptymatch4.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern, input;
	       
	      pattern = @"(a\1|(?(1)\1)){0,2}";
	      input = "aaabbb"; 
	
	      Console.WriteLine("Regex pattern: {0}", pattern);
	      Match match = Regex.Match(input, pattern);
	      Console.WriteLine("Match: '{0}' at position {1}.", 
	                        match.Value, match.Index);
	      if (match.Groups.Count > 1) {
	         for (int groupCtr = 1; groupCtr <= match.Groups.Count - 1; groupCtr++)
	         {
	            Group group = match.Groups[groupCtr];         
	            Console.WriteLine("   Group: {0}: '{1}' at position {2}.", 
	                              groupCtr, group.Value, group.Index);
	            int captureCtr = 0;
	            foreach (Capture capture in group.Captures) {
	               captureCtr++;
	               Console.WriteLine("      Capture: {0}: '{1}' at position {2}.", 
	                                 captureCtr, capture.Value, capture.Index);
	            }   
	         }
	      }
	      Console.WriteLine();
	
	      pattern = @"(a\1|(?(1)\1)){2}";
	      Console.WriteLine("Regex pattern: {0}", pattern);
	      match = Regex.Match(input, pattern);
	         Console.WriteLine("Matched '{0}' at position {1}.", 
	                           match.Value, match.Index);
	      if (match.Groups.Count > 1) {
	         for (int groupCtr = 1; groupCtr <= match.Groups.Count - 1; groupCtr++)
	         {
	            Group group = match.Groups[groupCtr];         
	            Console.WriteLine("   Group: {0}: '{1}' at position {2}.", 
	                              groupCtr, group.Value, group.Index);
	            int captureCtr = 0;
	            foreach (Capture capture in group.Captures) {
	               captureCtr++;
	               Console.WriteLine("      Capture: {0}: '{1}' at position {2}.", 
	                                 captureCtr, capture.Value, capture.Index);
	            }   
	         }
	      }
	   }
	}

snippet cryptography_memoryprotector

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cryptography_memoryprotector/class1.cs

	using System;
	using System.Security.Permissions;
	
	namespace System.Security.Cryptography
	{
	    public sealed class MemoryProtector : DataProtector
	    {
	        public MemoryProtectionScope Scope { get; set; }
	        protected override bool PrependHashedPurposeToPlaintext 
	        {
	            get
	            {
	                return true;
	            }
	        }
	        [SecuritySafeCritical]
	        [DataProtectionPermission(SecurityAction.Assert, ProtectData = true)]
	        protected override byte[] ProviderProtect(byte[] userData)
	        {
	            
	            ProtectedMemory.Protect(userData, Scope);
	            return userData;
	        }
	        [SecuritySafeCritical]
	        [DataProtectionPermission(SecurityAction.Assert, UnprotectData = true)]
	        protected override byte[] ProviderUnprotect(byte[] encryptedData)
	        {
	
	            ProtectedMemory.Unprotect(encryptedData,Scope);           
	                return encryptedData;
	        }
	
	        public override bool IsReprotectRequired(byte[] encryptedData)
	        {
	            return true;
	        }
	        [DataProtectionPermission(SecurityAction.Demand, Unrestricted = true)]
	        [SecuritySafeCritical]
	        public MemoryProtector(string appName, string primaryPurpose, params string[] specificPurpose)
	            : base(appName, primaryPurpose, specificPurpose)
	        {
	        }
	    }
	}

snippet eventloginstaller_resources

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/source.cs

	
	
	using System;
	using System.Configuration.Install;
	using System.Diagnostics;
	using System.ComponentModel;
	
	[RunInstaller(true)]
	public class SampleEventLogInstaller : Installer
	{
	    private EventLogInstaller myEventLogInstaller;
	
	    public SampleEventLogInstaller() 
	    {
	        myEventLogInstaller = new EventLogInstaller();
	
	        myEventLogInstaller.Source = "ApplicationEventSource";
	
	        myEventLogInstaller.Log = "myNewLog";
	
	            
	        myEventLogInstaller.CategoryResourceFile =
	             Environment.SystemDirectory + "\\eventlogmsgs.dll";
	        myEventLogInstaller.CategoryCount = 3;
	        myEventLogInstaller.MessageResourceFile =
	             Environment.SystemDirectory + "\\eventlogmsgs.dll";
	        myEventLogInstaller.ParameterResourceFile =
	             Environment.SystemDirectory + "\\eventlogmsgs.dll";
	
	        Installers.Add(myEventLogInstaller); 
	    }
	
	    public static void Main()
	    {
	        Console.WriteLine("Usage: InstallUtil.exe [<install>.exe | <install>.dll]");
	    }
	}

snippet entrywritteneventargs_ctor2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EntryWrittenEventArgs_ctor2/entrywritteneventargs_ctor2.cs

	
	/* 
	The following example demonstrates the 'Entry' property and EntryWrittenEventArgs (EventLogEntry)
	constructor of the  'EntryWrittenEventArgs' class. It creates a custom 'EventLog' and writes an
	entry into it. Then creates an 'EntryWrittenEventArgs' object using the first entry in the custom
	eventlog.This object is used to notify a message 
	 */
	
	using System;
	using System.Diagnostics;
	
	class MySample
	{
	    public static void Main()
	    {
	        try
	        {
	            EventLog myNewLog = new EventLog();
	            myNewLog.Log = "MyNewLog";
	            myNewLog.Source = "MySource";
	            if (!EventLog.SourceExists("MySource"))
	            {
	                EventLog.CreateEventSource("MySource", "MyNewLog");
	                Console.WriteLine("CreatingEventSource");
	                Console.WriteLine("Exiting, execute the application a second time to use the source.");
	                return;
	            }
	            myNewLog.WriteEntry("The Latest entry in the Event Log");
	            int myEntries = myNewLog.Entries.Count;
	            EventLogEntry entry = myNewLog.Entries[myEntries - 1];
	            EntryWrittenEventArgs myEntryEventArgs =
	                                 new EntryWrittenEventArgs(entry);
	            MyOnEntry(myNewLog, myEntryEventArgs);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception Raised" + e.Message);
	        }
	    }
	    protected static void MyOnEntry(Object source, EntryWrittenEventArgs e)
	    {
	        EventLogEntry myEventLogEntry = e.Entry;
	        if (myEventLogEntry != null)
	        {
	            Console.WriteLine("Current message entry is: '"
	                              + myEventLogEntry.Message + "'");
	        }
	        else
	        {
	            Console.WriteLine("The current entry is null");
	        }
	    }
	}

snippet waithandle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/WaitHandle.cs

	using System;
	using System.Threading;
	
	public sealed class App 
	{
	    static WaitHandle[] waitHandles = new WaitHandle[] 
	    {
	        new AutoResetEvent(false),
	        new AutoResetEvent(false)
	    };
	
	    static Random r = new Random();
	
	    static void Main() 
	    {
	        DateTime dt = DateTime.Now;
	        Console.WriteLine("Main thread is waiting for BOTH tasks to complete.");
	        ThreadPool.QueueUserWorkItem(new WaitCallback(DoTask), waitHandles[0]);
	        ThreadPool.QueueUserWorkItem(new WaitCallback(DoTask), waitHandles[1]);
	        WaitHandle.WaitAll(waitHandles);
	        Console.WriteLine("Both tasks are completed (time waited={0})", 
	            (DateTime.Now - dt).TotalMilliseconds);
	
	        dt = DateTime.Now;
	        Console.WriteLine();
	        Console.WriteLine("The main thread is waiting for either task to complete.");
	        ThreadPool.QueueUserWorkItem(new WaitCallback(DoTask), waitHandles[0]);
	        ThreadPool.QueueUserWorkItem(new WaitCallback(DoTask), waitHandles[1]);
	        int index = WaitHandle.WaitAny(waitHandles);
	        Console.WriteLine("Task {0} finished first (time waited={1}).",
	            index + 1, (DateTime.Now - dt).TotalMilliseconds);
	    }
	
	    static void DoTask(Object state) 
	    {
	        AutoResetEvent are = (AutoResetEvent) state;
	        int time = 1000 * r.Next(2, 10);
	        Console.WriteLine("Performing a task for {0} milliseconds.", time);
	        Thread.Sleep(time);
	        are.Set();
	    }
	}
	
snippet array_findindex

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Array_FindIndex/source.cs

	using System;
	
	public class Example
	{
	    public static void Main()
	    {
	        string[] dinosaurs = { "Compsognathus", 
	            "Amargasaurus",   "Oviraptor",      "Velociraptor", 
	            "Deinonychus",    "Dilophosaurus",  "Gallimimus", 
	            "Triceratops" };
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine(
	            "\nArray.FindIndex(dinosaurs, EndsWithSaurus): {0}", 
	            Array.FindIndex(dinosaurs, EndsWithSaurus));
	
	        Console.WriteLine(
	            "\nArray.FindIndex(dinosaurs, 2, EndsWithSaurus): {0}",
	            Array.FindIndex(dinosaurs, 2, EndsWithSaurus));
	
	        Console.WriteLine(
	            "\nArray.FindIndex(dinosaurs, 2, 3, EndsWithSaurus): {0}",
	            Array.FindIndex(dinosaurs, 2, 3, EndsWithSaurus));
	    }
	
	    private static bool EndsWithSaurus(String s)
	    {
	        if ((s.Length > 5) && 
	            (s.Substring(s.Length - 6).ToLower() == "saurus"))
	        {
	            return true;
	        }
	        else
	        {
	            return false;
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Compsognathus
	Amargasaurus
	Oviraptor
	Velociraptor
	Deinonychus
	Dilophosaurus
	Gallimimus
	Triceratops
	
	Array.FindIndex(dinosaurs, EndsWithSaurus): 1
	
	Array.FindIndex(dinosaurs, 2, EndsWithSaurus): 5
	
	Array.FindIndex(dinosaurs, 2, 3, EndsWithSaurus): -1
	 */
	
	

snippet array_findlastindex

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Array_FindLastIndex/source.cs

	using System;
	
	public class Example
	{
	    public static void Main()
	    {
	        string[] dinosaurs = { "Compsognathus", 
	            "Amargasaurus",   "Oviraptor",      "Velociraptor", 
	            "Deinonychus",    "Dilophosaurus",  "Gallimimus", 
	            "Triceratops" };
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine(
	            "\nArray.FindLastIndex(dinosaurs, EndsWithSaurus): {0}", 
	            Array.FindLastIndex(dinosaurs, EndsWithSaurus));
	
	        Console.WriteLine(
	            "\nArray.FindLastIndex(dinosaurs, 4, EndsWithSaurus): {0}",
	            Array.FindLastIndex(dinosaurs, 4, EndsWithSaurus));
	
	        Console.WriteLine(
	            "\nArray.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): {0}",
	            Array.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus));
	    }
	
	    private static bool EndsWithSaurus(String s)
	    {
	        if ((s.Length > 5) && 
	            (s.Substring(s.Length - 6).ToLower() == "saurus"))
	        {
	            return true;
	        }
	        else
	        {
	            return false;
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Compsognathus
	Amargasaurus
	Oviraptor
	Velociraptor
	Deinonychus
	Dilophosaurus
	Gallimimus
	Triceratops
	
	Array.FindLastIndex(dinosaurs, EndsWithSaurus): 5
	
	Array.FindLastIndex(dinosaurs, 4, EndsWithSaurus): 1
	
	Array.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): -1
	 */
	
	

snippet conceptual_asyncinterop

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_AsyncInterop/APM2.cs

	using System;
	using System.Threading.Tasks;
	
	public class Example
	{
	   public static Task<String> DownloadStringAsync(Uri url)
	   { return Task.FromResult<String>(String.Empty); }
	
	   public IAsyncResult BeginDownloadString(Uri url, 
	                                           AsyncCallback callback, 
	                                           object state)
	   { return null; }
	
	   public string EndDownloadString(IAsyncResult asyncResult)
	   { return String.Empty; }
	}
	
	public class Example2
	{
	   public IAsyncResult BeginDownloadString(Uri url, 
	                                           AsyncCallback callback, 
	                                           object state)
	   {
	      return DownloadStringAsync(url).AsApm(callback, state);
	   }
	
	   public string EndDownloadString(IAsyncResult asyncResult)
	   {
	      return ((Task<string>)asyncResult).Result;
	   }
	   
	   public static Task<String> DownloadStringAsync(Uri url)
	   { return Task.FromResult<String>(String.Empty); }
	}
	
	public static class Library
	{
	    public static IAsyncResult AsApm<T>(this Task<T> task, 
	                                        AsyncCallback callback, 
	                                        object state)
	    {
	        if (task == null) 
	            throw new ArgumentNullException("task");
	        
	        var tcs = new TaskCompletionSource<T>(state);
	        task.ContinueWith(t => 
	                          {
	                             if (t.IsFaulted) 
	                                tcs.TrySetException(t.Exception.InnerExceptions);
	                             else if (t.IsCanceled)    
	                                tcs.TrySetCanceled();
	                             else 
	                                tcs.TrySetResult(t.Result);
	    
	                             if (callback != null) 
	                                callback(tcs.Task);
	                          }, TaskScheduler.Default);
	        return tcs.Task;
	    }
	} 
snippet microsoft_visualstudio_data_core_ivsdataproviderdynamicsupport

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_VisualStudio_Data_Core_IVsDataProviderDynamicSupport/IVsDataProviderDynamicSupport2.cs

	using System;
	using System.ComponentModel.Design;
	using Microsoft.Win32;
	using Microsoft.VisualStudio.Data.Core;
	using Microsoft.VisualStudio.Data.Services;
	
	public class MyProviderDynamicSupport2 : IVsDataProviderDynamicSupport
	{
	    private static readonly CommandID DeployCommand =
	        new CommandID(new Guid("6535F307-2083-4cbb-B2FA-11F2DCD69DAF"), 25);
	
	    public bool IsProviderSupported
	    {
	        get
	        {
	            return true;
	        }
	    }
	
	    public bool IsSourceSupported(Guid source)
	    {
	        return true;
	    }
	
	    public bool IsOperationSupported(
	        Guid source, CommandID command, object context)
	    {
	        if (command == null)
	        {
	            throw new ArgumentNullException("command");
	        }
	        if (command.Equals(DeployCommand))
	        {
	            IVsDataExplorerConnection explorerConnection =
	                context as IVsDataExplorerConnection;
	            if (explorerConnection == null)
	            {
	                throw new ArgumentException();
	            }
	            RegistryKey key = Registry.LocalMachine.OpenSubKey(
	                @"SOFTWARE\Company\DeployTechnology");
	            if (key == null)
	            {
	                return false;
	            }
	            key.Close();
	        }
	        return true;
	    }
	
	    public string GetUnsupportedReason(
	        Guid source, CommandID command, object context)
	    {
	        if (command == null)
	        {
	            throw new ArgumentNullException("command");
	        }
	        if (command.Equals(DeployCommand) &&
	            !IsOperationSupported(source, command, context))
	        {
	            return "In order to deploy a database you need to install our deployment technology.";
	        }
	        return null;
	    }
	}
snippet process_sample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/process_sample/process_sample.cs

	
	
	using System;
	using System.Diagnostics;
	using System.Threading;
	
	namespace ProcessSample
	{
	    class MyProcessClass
	    {
	        public static void Main()
	        {
	            try
	            {
	                using (Process myProcess = Process.Start("NotePad.exe"))
	                {
	                    while (!myProcess.HasExited)
	                    {
	                        Console.WriteLine();
	
	                        Console.WriteLine($"Physical memory usage     : {myProcess.WorkingSet}");
	                        Console.WriteLine($"Base priority             : {myProcess.BasePriority}");
	                        Console.WriteLine($"Priority class            : {myProcess.PriorityClass}");
	                        Console.WriteLine($"User processor time       : {myProcess.UserProcessorTime}");
	                        Console.WriteLine($"Privileged processor time : {myProcess.PrivilegedProcessorTime}");
	                        Console.WriteLine($"Total processor time      : {myProcess.TotalProcessorTime}");
	                        Console.WriteLine($"Process's Name            : {myProcess}");
	                        Console.WriteLine("-------------------------------------");
	
	                        if (myProcess.Responding)
	                        {
	                            Console.WriteLine("Status:  Responding to user interface");
	                            myProcess.Refresh();
	                        }
	                        else
	                        {
	                            Console.WriteLine("Status:  Not Responding");
	                        }
	
	                        Thread.Sleep(1000);
	                    }
	
	                    Console.WriteLine();
	                    Console.WriteLine($"Process exit code: {myProcess.ExitCode}");
	                }
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine($"The following exception was raised: {e.Message}");
	            }
	        }
	    }
	}

snippet runtime_interopservices_marshal_securestringtohglobalansi

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_SecureStringToHGlobalAnsi/sample.cs

	using System;
	using System.Runtime.InteropServices;
	using System.Security;
	
	class Example
	{
	    static void Main()
	    {
	        IntPtr unmanagedRef = IntPtr.Zero;
	
	        Console.Write("Please enter your password: ");
	        SecureString passWord = GetPassword();
	
	        Console.WriteLine("Copying and decrypting the string to unmanaged memory...");
	        unmanagedRef = Marshal.SecureStringToGlobalAllocAnsi(passWord);
	        passWord.Dispose();
	        
	        if (unmanagedRef != IntPtr.Zero) {
	            Console.WriteLine("Zeroing out unmanaged memory...");
	            Marshal.ZeroFreeGlobalAllocAnsi(unmanagedRef);
	        }
	        Console.WriteLine("Done.");
	    }
	
	    public static SecureString GetPassword()
	    {
	        SecureString password = new SecureString();
	
	        ConsoleKeyInfo nextKey = Console.ReadKey(true);
	
	        while (nextKey.Key != ConsoleKey.Enter) {
	            if (nextKey.Key == ConsoleKey.Backspace) {
	                if (password.Length > 0) {
	                    password.RemoveAt(password.Length - 1);
	
	                    Console.Write(nextKey.KeyChar);
	                    Console.Write(" ");
	                    Console.Write(nextKey.KeyChar);
	                }
	            }
	            else {
	                password.AppendChar(nextKey.KeyChar);
	                Console.Write("*");
	            }
	
	            nextKey = Console.ReadKey(true);
	        }
	        Console.WriteLine();
	
	        password.MakeReadOnly();
	        return password;
	    }
	}
	

snippet modulebuilder_defineinitializeddata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_DefineInitializedData/modulebuilder_defineinitializeddata.cs

	
	/*
	The following example demonstrates the 'DefineInitializedData' method of 
	'ModuleBuilder' class.
	A dynamic assembly with a module in it is created in 'CodeGenerator' class. 
	A initialized data field is created using  'DefineInitializedData'
	method for creating the initialized data.
	*/
	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	   public class CodeGenerator
	   {
	      ModuleBuilder myModuleBuilder ;
	      AssemblyBuilder myAssemblyBuilder;
	
	      public CodeGenerator()
	      {
	         AppDomain currentDomain;
	         AssemblyName myAssemblyName;
	
	         currentDomain = AppDomain.CurrentDomain;
	         myAssemblyName = new AssemblyName();
	         myAssemblyName.Name = "TempAssembly";
	
	         myAssemblyBuilder = 
	            currentDomain.DefineDynamicAssembly
	                        (myAssemblyName, AssemblyBuilderAccess.Run);
	
	         myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("TempModule");
	
	         FieldBuilder myFieldBuilder = 
	             myModuleBuilder.DefineInitializedData("MyField",new byte[]{01,00,01},
	                        FieldAttributes.Static|FieldAttributes.Public);
	          myModuleBuilder.CreateGlobalFunctions();
	      }
	      public AssemblyBuilder MyAssembly
	      {
	         get
	         {
	            return this.myAssemblyBuilder;
	         }
	      }
	   }
	
	   public class CallerClass
	   {
	      public static void Main()
	      {
	         CodeGenerator myGenerator = new CodeGenerator();
	         AssemblyBuilder myAssembly = myGenerator.MyAssembly;
	         ModuleBuilder myBuilder = myAssembly.GetDynamicModule("TempModule");
	         FieldInfo myInfo = myBuilder.GetField("MyField");
	         Console.WriteLine("The name of the initialized data field is :"+myInfo.Name);
	         Console.WriteLine("The object having the field value is :"
	                                                                   +myInfo.GetValue(myBuilder));
	      }
	   }

snippet installer_helptext

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_HelpText/installer_helptext.cs

	/*
	   System.Configuration.Install.Installer.HelpText
	   
	   The following example demonstrates the property 'HelpText'. The
	   'HelpText' property is defined in the 'Installer', which when called
	   returns the description of the 'Installer' and the command line 
	   options for the installation executable, such as the InstallUtil.exe utility,
	   that can be passed to and understood by the 'Installer'.
	
	   Use 'installutil' to run the assembly Installer_HelpText.exe.
	*/
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller: Installer 
	{
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      string myHelpText = HelpText;
	      Console.WriteLine("Help Text : ");
	      Console.WriteLine(myHelpText);
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	   }
	   public override string HelpText
	   {
	      get
	      {
	         return "Installer Description : This is a sample Installer\n"
	              + "HelpText is used to provide useful information about the "
	              + "installer.";
	      }
	   }
	}
	
	public class MyAssembly
	{
	   public static void Main()
	   {
	      Console.WriteLine("Use installutil.exe to run the assembly Installer_HelpText.exe");
	   }
	}
	

snippet installercollection_item

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Item/installercollection_item.cs

	
	/*
	   The following example demonstrates the 'Item(Int32)' method of the 
	   'InstallerCollection' class. It creates 'AssemblyInstaller' instances
	   for 'MyAssembly1.exe' and 'MyAssembly2.exe'. These instances are added 
	   to an instance of 'TransactedInstaller'. The names of all the assemblies 
	   that are to be installed are displayed to the console.The installation 
	   process installs both 'MyAssembly1.exe' and 'MyAssembly2.exe'.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Collections;
	using System.Configuration.Install;
	using System.IO;
	
	public class InstallerCollection_Item
	{
	   public static void Main()
	   {
	      try
	      {
	         TransactedInstaller myTransactedInstaller = new TransactedInstaller();
	         AssemblyInstaller myAssemblyInstaller;
	         InstallContext myInstallContext;
	
	         myAssemblyInstaller = 
	            new AssemblyInstaller("MyAssembly1.exe", null);
	
	         myTransactedInstaller.Installers.Add(myAssemblyInstaller);
	
	         myAssemblyInstaller = 
	            new AssemblyInstaller("MyAssembly2.exe", null);
	
	         myTransactedInstaller.Installers.Add(myAssemblyInstaller);
	
	         InstallerCollection myInstallers = myTransactedInstaller.Installers;
	         Console.WriteLine("\nPrinting all assemblies to be installed");
	         for(int i = 0; i < myInstallers.Count; i++)
	         {
	            if((myInstallers[i].GetType()).Equals(typeof(AssemblyInstaller)))
	            {
	               Console.WriteLine("{0} {1}", i + 1, 
	                  ((AssemblyInstaller)myInstallers[i]).Path);
	            }
	         }
	         myInstallContext = 
	            new InstallContext("Install.log", null);
	         myTransactedInstaller.Context = myInstallContext;
	
	         myTransactedInstaller.Install(new Hashtable());
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("Exception raised : {0}", e.Message);
	      }
	   }  
	} 
snippet x509store2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/x509store2/x509store2.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	using System.IO;
	
	public class X509store2
	{
		public static void Main (string[] args)
		{
			X509Store store = new X509Store ("teststore", StoreLocation.CurrentUser);
			store.Open (OpenFlags.ReadWrite);
			X509Certificate2 certificate = new X509Certificate2 ();
	
			X509Certificate2 certificate1 = new X509Certificate2 ("c:\\mycerts\\*****.cer");
			X509Certificate2 certificate2 = new X509Certificate2 ("c:\\mycerts\\*****.cer");
			X509Certificate2 certificate5 = new X509Certificate2 ("c:\\mycerts\\*****.cer");
	
			X509Certificate2Collection collection = new X509Certificate2Collection ();
			collection.Add (certificate2);
			collection.Add (certificate5);
	
			store.Add (certificate1);
			store.AddRange (collection);
	
			X509Certificate2Collection storecollection = (X509Certificate2Collection)store.Certificates;
			Console.WriteLine ("Store name: {0}", store.Name);
			Console.WriteLine ("Store location: {0}", store.Location);
			foreach (X509Certificate2 x509 in storecollection)
			{
				Console.WriteLine("certificate name: {0}",x509.Subject);
			}
	
			store.Remove (certificate1);
			X509Certificate2Collection storecollection2 = (X509Certificate2Collection)store.Certificates;
			Console.WriteLine ("{1}Store name: {0}", store.Name, Environment.NewLine);
			foreach (X509Certificate2 x509 in storecollection2)
			{
				Console.WriteLine ("certificate name: {0}", x509.Subject);
			}
	
			store.RemoveRange (collection);
			X509Certificate2Collection storecollection3 = (X509Certificate2Collection)store.Certificates;
			Console.WriteLine ("{1}Store name: {0}", store.Name, Environment.NewLine);
			if (storecollection3.Count == 0)
			{
				Console.WriteLine ("Store contains no certificates.");
			}
			else
			{
				foreach (X509Certificate2 x509 in storecollection3)
				{
					Console.WriteLine ("certificate name: {0}", x509.Subject);
				}
			}
	
			store.Close ();
		}	
	}
snippet assemblybuilder_defineresource_example_2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineResource_Example_2/assemblybuilder_defineresource.cs

	
	/*
	   The following program demonstrates the 'DefineResource' and 'DefineVersionInfoResource' 
	   methods of 'AssemblyBuilder' class. It builds an assembly and a resource file at runtime.
	   The unmanaged version information like product, product version, Company, Copyright, 
	   trademark are defined with 'DefineVersionInfoResource' method. The EmittedTest.cs file
	   calls the methods of "MyEmitAssembly.dll" assembly and the message is displayed to console.
	*/
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Resources;
	
	public class MyEmitTest 
	{
	   public static void Main() 
	   {
	      AssemblyBuilder myAssembly;
	      IResourceWriter myResourceWriter; 
	      myAssembly = (AssemblyBuilder)CreateAssembly(Thread.GetDomain()).Assembly;
	         
	      myResourceWriter = myAssembly.DefineResource("myResourceFile",
	         "A sample Resource File", "MyEmitAssembly.MyResource.resources");
	      myResourceWriter.AddResource("AddResource 1", "First added resource");
	      myResourceWriter.AddResource("AddResource 2", "Second added resource");
	      myResourceWriter.AddResource("AddResource 3", "Third added resource");
	
	      myAssembly.DefineVersionInfoResource("AssemblySample", "2:0:0:1",
	         "Microsoft Corporation", "@Copyright Microsoft Corp. 1990-2001",
	         ".NET is a trademark of Microsoft Corporation");
	      myAssembly.Save("MyEmitAssembly.dll");
	   }
	
	   private static Type CreateAssembly(AppDomain appDomain) 
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "MyEmitAssembly";
	      AssemblyBuilder myAssembly = appDomain.DefineDynamicAssembly(myAssemblyName, 
	         AssemblyBuilderAccess.Save);
	      ModuleBuilder myModule = myAssembly.DefineDynamicModule("EmittedModule",
	         "EmittedModule.mod");
	
	      TypeBuilder helloWorldClass = 
	         myModule.DefineType("HelloWorld", TypeAttributes.Public);
	      MethodBuilder myMethod = helloWorldClass.DefineMethod("Display", 
	         MethodAttributes.Public, typeof(String), null);
	
	      ILGenerator methodIL = myMethod.GetILGenerator();
	      methodIL.Emit(OpCodes.Ldstr, "Display method get called.");
	      methodIL.Emit(OpCodes.Ret);
	
	      return(helloWorldClass.CreateType());
	   }   
	}

snippet animalattributes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AnimalAttributes/customattribute.cs

	using System;
	using System.Reflection;
	
	public enum Animal {
	    Dog = 1,
	    Cat,
	    Bird,
	}
	
	public class AnimalTypeAttribute : Attribute {
	    public AnimalTypeAttribute(Animal pet) {
	        thePet = pet;
	    }
	
	    protected Animal thePet;
	
	    public Animal Pet {
	        get { return thePet; }
	        set { thePet = value; }
	    }
	}
	
	class AnimalTypeTestClass {
	    [AnimalType(Animal.Dog)]
	    public void DogMethod() {}
	
	    [AnimalType(Animal.Cat)]
	    public void CatMethod() {}
	
	    [AnimalType(Animal.Bird)]
	    public void BirdMethod() {}
	}
	
	class DemoClass {
	    static void Main(string[] args) {
	        AnimalTypeTestClass testClass = new AnimalTypeTestClass();
	        Type type = testClass.GetType();
	        foreach(MethodInfo mInfo in type.GetMethods()) {
	            foreach (Attribute attr in
	                Attribute.GetCustomAttributes(mInfo)) {
	                if (attr.GetType() == typeof(AnimalTypeAttribute))
	                    Console.WriteLine(
	                        "Method {0} has a pet {1} attribute.",
	                        mInfo.Name, ((AnimalTypeAttribute)attr).Pet);
	            }
	
	        }
	    }
	}
	/*
	 * Output:
	 * Method DogMethod has a pet Dog attribute.
	 * Method CatMethod has a pet Cat attribute.
	 * Method BirdMethod has a pet Bird attribute.
	 */

snippet io_fileinfo_encrypt_decrypt

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_FileInfo_Encrypt_Decrypt/sample.cs

	using System;
	using System.IO;
	using System.Security.AccessControl;
	
	namespace FileSystemExample
	{
	    class FileExample
	    {
	        public static void Main()
	        {
	            try
	            {
	                string FileName = @"c:\MyTest.txt";
	
	                Console.WriteLine("Encrypt " + FileName);
	
	                AddEncryption(FileName);
	
	                Console.WriteLine("Decrypt " + FileName);
	
	                RemoveEncryption(FileName);
	
	                Console.WriteLine("Done");
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine(e);
	            }
	        }
	
	        public static void AddEncryption(string FileName)
	        {
	            FileInfo fInfo = new FileInfo(FileName);
	            if (!fInfo.Exists)
	            {
	                fInfo.Create();
	            }
	            fInfo.Encrypt();
	        }
	
	        public static void RemoveEncryption(string FileName)
	        {
	            FileInfo fInfo = new FileInfo(FileName);
	            if (!fInfo.Exists)
	            {
	                fInfo.Create();
	            }
	            fInfo.Decrypt();
	
	        }
	    }
	}
	
snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/osinfo.cs

	using System;
	using System.Runtime.InteropServices;
	
	[StructLayout(LayoutKind.Sequential)]
	public class OSVersionInfo
	{
	    public int OSVersionInfoSize;
	    public int MajorVersion;
	    public int MinorVersion;
	    public int BuildNumber;
	    public int PlatformId;
	
	    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
	    public String CSDVersion;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct OSVersionInfo2
	{
	    public int OSVersionInfoSize;
	    public int MajorVersion;
	    public int MinorVersion;
	    public int BuildNumber;
	    public int PlatformId;
	
	    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
	    public String CSDVersion;
	}
	
	public class LibWrap
	{
	    [DllImport("kernel32")]
	    public static extern bool GetVersionEx([In, Out] OSVersionInfo osvi);
	
	    [DllImport("kernel32", EntryPoint = "GetVersionEx")]
	    public static extern bool GetVersionEx2(ref OSVersionInfo2 osvi);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        Console.WriteLine("\nPassing OSVersionInfo as a class");
	
	        OSVersionInfo osvi = new OSVersionInfo();
	        osvi.OSVersionInfoSize = Marshal.SizeOf(osvi);
	
	        LibWrap.GetVersionEx(osvi);
	
	        Console.WriteLine("Class size:    {0}", osvi.OSVersionInfoSize);
	        Console.WriteLine("OS Version:    {0}.{1}", osvi.MajorVersion, osvi.MinorVersion);
	
	        Console.WriteLine("\nPassing OSVersionInfo as a struct");
	
	        OSVersionInfo2 osvi2 = new OSVersionInfo2();
	        osvi2.OSVersionInfoSize = Marshal.SizeOf(osvi2);
	
	        LibWrap.GetVersionEx2(ref osvi2);
	        Console.WriteLine("Struct size:   {0}", osvi2.OSVersionInfoSize);
	        Console.WriteLine("OS Version:    {0}.{1}", osvi2.MajorVersion, osvi2.MinorVersion);
	    }
	}

snippet eventsoverview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/eventsoverview/programwithdata.cs

	using System;
	
	namespace ConsoleApplication1
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            Counter c = new Counter(new Random().Next(10));
	            c.ThresholdReached += c_ThresholdReached;
	
	            Console.WriteLine("press 'a' key to increase total");
	            while (Console.ReadKey(true).KeyChar == 'a')
	            {
	                Console.WriteLine("adding one");
	                c.Add(1);
	            }
	        }
	
	        static void c_ThresholdReached(object sender, ThresholdReachedEventArgs e)
	        {
	            Console.WriteLine("The threshold of {0} was reached at {1}.", e.Threshold,  e.TimeReached);
	            Environment.Exit(0);
	        }
	    }
	
	    class Counter
	    {
	        private int threshold;
	        private int total;
	
	        public Counter(int passedThreshold)
	        {
	            threshold = passedThreshold;
	        }
	
	        public void Add(int x)
	        {
	            total += x;
	            if (total >= threshold)
	            {
	                ThresholdReachedEventArgs args = new ThresholdReachedEventArgs();
	                args.Threshold = threshold;
	                args.TimeReached = DateTime.Now;
	                OnThresholdReached(args);
	            }
	        }
	
	        protected virtual void OnThresholdReached(ThresholdReachedEventArgs e)
	        {
	            EventHandler<ThresholdReachedEventArgs> handler = ThresholdReached;
	            if (handler != null)
	            {
	                handler(this, e);
	            }
	        }
	
	        public event EventHandler<ThresholdReachedEventArgs> ThresholdReached;
	    }
	
	    public class ThresholdReachedEventArgs : EventArgs
	    {
	        public int Threshold { get; set; }
	        public DateTime TimeReached { get; set; }
	    }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/ctor1.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	
	public class Person
	{
	   private string fName, lName, _id;
	   
	   public Person(string firstName, string lastName, string id)
	   {
	      if (String.IsNullOrEmpty(firstName + lastName))
	         throw new ArgumentNullException("Either a first name or a last name must be provided.");    
	      
	      fName = firstName;
	      lName = lastName;
	      _id = id;
	   }
	   
	   public string FirstName 
	   {
	      get { return fName; }
	   }
	
	   public string LastName 
	   {
	      get { return lName; }
	   }
	   
	   public string Id 
	   {
	      get { return _id; }
	   }
	
	   public override string ToString()
	   {
	      return String.Format("{0}{1}{2}", fName, 
	                           String.IsNullOrEmpty(fName) ?  "" : " ",
	                           lName);
	   }
	}
	
	public class Doctor : Person
	{
	   public Doctor(string firstName, string lastName, string id)
	   {
	   }
	
	   public override string ToString()
	   {
	      return "Dr. " + base.ToString();
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}
	

snippet filecopydelete

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/filecopydelete/program.cs

	using System;
	using System.IO;
	
	namespace AProject
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	string sourceDir = @"c:\current";
	string backupDir = @"c:\archives\2008";
	
	try
	{
	    string[] picList = Directory.GetFiles(sourceDir, "*.jpg");
	    string[] txtList = Directory.GetFiles(sourceDir, "*.txt");
	
	    foreach (string f in picList)
	    {
	        string fName = f.Substring(sourceDir.Length + 1);
	
	        File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName), true);
	    }
	
	    foreach (string f in txtList)
	    {
	
	        string fName = f.Substring(sourceDir.Length + 1);
	
	        try
	        {
	            File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName));
	        }
	
	        catch (IOException copyError)
	        {
	            Console.WriteLine(copyError.Message);
	        }
	    }
	
	    foreach (string f in txtList)
	    {
	        File.Delete(f);
	    }
	    foreach (string f in picList)
	    {
	        File.Delete(f);
	    }
	}
	
	catch (DirectoryNotFoundException dirNotFound)
	{
	    Console.WriteLine(dirNotFound.Message);
	}
	
	        }
	    }
	} 
snippet process_standardoutput

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Process_StandardOutput/process_standardoutput.cs

	using System;
	using System.IO;
	using System.Diagnostics;
	
	class IORedirExample
	{
	    public static void Main()
	    {
	        string[] args = Environment.GetCommandLineArgs();
	        if (args.Length > 1)
	        {
	            Console.WriteLine("Hello from the redirected process!");
	        }
	        else
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo(args[0], "spawn");
	                myProcessStartInfo.UseShellExecute = false;
	                myProcessStartInfo.RedirectStandardOutput = true;
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	                StreamReader myStreamReader = myProcess.StandardOutput;
	                string myString = myStreamReader.ReadLine();
	                Console.WriteLine(myString);
	
	                myProcess.WaitForExit();
	            }
	        }
	    }
	}
	using System;
	using System.IO;
	using System.Diagnostics;
	
	class StandardOutputExample
	{
	    public static void Main()
	    {
	        using (Process process = new Process())
	        {
	            process.StartInfo.FileName = "ipconfig.exe";
	            process.StartInfo.UseShellExecute = false;
	            process.StartInfo.RedirectStandardOutput = true;
	            process.Start();
	
	            StreamReader reader = process.StandardOutput;
	            string output = reader.ReadToEnd();
	
	            Console.WriteLine(output);
	
	            process.WaitForExit();
	        }
	
	        Console.WriteLine("\n\nPress any key to exit.");
	        Console.ReadLine();
	    }
	}

snippet x509storename

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/x509storename/program.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	using System.IO;
	
	public class X509store2
	{
	    public static void Main(string[] args)
	    {
	        X509Store store = new X509Store(StoreName.My);
	        store.Open(OpenFlags.ReadWrite);
	        X509Certificate2 certificate = new X509Certificate2();
	
	        X509Certificate2 certificate1 = new X509Certificate2("c:\\mycerts\\*****.cer");
	        X509Certificate2 certificate2 = new X509Certificate2("c:\\mycerts\\*****.cer");
	        X509Certificate2 certificate5 = new X509Certificate2("c:\\mycerts\\*****.cer");
	
	        X509Certificate2Collection collection = new X509Certificate2Collection();
	        collection.Add(certificate2);
	        collection.Add(certificate5);
	
	        store.Add(certificate1);
	        store.AddRange(collection);
	
	        X509Certificate2Collection storecollection = (X509Certificate2Collection)store.Certificates;
	        Console.WriteLine("Store name: {0}", store.Name);
	        Console.WriteLine("Store location: {0}", store.Location);
	        foreach (X509Certificate2 x509 in storecollection)
	        {
	            Console.WriteLine("certificate name: {0}", x509.Subject);
	        }
	
	        store.Remove(certificate1);
	        X509Certificate2Collection storecollection2 = (X509Certificate2Collection)store.Certificates;
	        Console.WriteLine("{1}Store name: {0}", store.Name, Environment.NewLine);
	        foreach (X509Certificate2 x509 in storecollection2)
	        {
	            Console.WriteLine("certificate name: {0}", x509.Subject);
	        }
	
	        store.RemoveRange(collection);
	        X509Certificate2Collection storecollection3 = (X509Certificate2Collection)store.Certificates;
	        Console.WriteLine("{1}Store name: {0}", store.Name, Environment.NewLine);
	        if (storecollection3.Count == 0)
	        {
	            Console.WriteLine("Store contains no certificates.");
	        }
	        else
	        {
	            foreach (X509Certificate2 x509 in storecollection3)
	            {
	                Console.WriteLine("certificate name: {0}", x509.Subject);
	            }
	        }
	
	        store.Close();
	    }
	}

snippet conceptual_calendars

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_calendars/datesandcalendars2.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      CultureInfo arEG = CultureInfo.CreateSpecificCulture("ar-EG");
	      Calendar cal = new UmAlQuraCalendar();
	      arEG.DateTimeFormat.Calendar = cal;
	      Thread.CurrentThread.CurrentCulture = arEG;
	
	      DisplayCurrentInfo();      
	
	      DateTime date1 = new DateTime(2011, 7, 15);
	
	      Console.WriteLine("Date: {0:d}", date1);
	      Console.WriteLine("Date in the Invariant Culture: {0}", 
	                        date1.ToString("d", CultureInfo.InvariantCulture));
	      Console.WriteLine();
	            
	      Console.WriteLine("DateTime.Month property: {0}", date1.Month);
	      Console.WriteLine("UmAlQura.GetMonth: {0}", 
	                        cal.GetMonth(date1));
	      Console.WriteLine();
	
	      Console.WriteLine("DateTime.Day property: {0}", date1.Day);
	      Console.WriteLine("UmAlQura.GetDayOfMonth: {0}", 
	                        cal.GetDayOfMonth(date1));                         
	      Console.WriteLine();
	      
	      Console.WriteLine("DateTime.Year property: {0:D4}", date1.Year);
	      Console.WriteLine("UmAlQura.GetYear: {0}", 
	                        cal.GetYear(date1));                         
	      Console.WriteLine();
	   }
	
	   private static void DisplayCurrentInfo()
	   {
	      Console.WriteLine("Current Culture: {0}", 
	                        CultureInfo.CurrentCulture.Name);
	      Console.WriteLine("Current Calendar: {0}", 
	                        DateTimeFormatInfo.CurrentInfo.Calendar);
	   }
	}

snippet memberinfo_getcustomattribute_isdefined

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MemberInfo_GetCustomAttribute_IsDefined/memberinfo_getcustomattribute_isdefined.cs

	
	using System;
	using System.Reflection;
	
	[AttributeUsage(AttributeTargets.All)]
	public class MyAttribute : Attribute
	{
	    private string myName;
	    public MyAttribute(string name)
	    {
	        myName = name;
	    }
	    public string Name
	    {
	        get
	        {
	            return myName;
	        }
	    }
	}
	
	public class MyClass1
	{
	    [MyAttribute("This is an example attribute.")]
	    public void MyMethod(int i)
	    {
	        return;
	    }
	}
	
	public class MemberInfo_GetCustomAttributes_IsDefined
	{
	    public static void Main()
	    {
	        try
	        {
	            Type myType = typeof(MyClass1);
	            MemberInfo[] myMembers = myType.GetMembers();
	
	            for(int i = 0; i < myMembers.Length; i++)
	            {
	                if(myMembers[i].IsDefined(typeof(MyAttribute), false))
	                {
	                    Object[] myAttributes = myMembers[i].GetCustomAttributes(typeof(MyAttribute), false);
	                    Console.WriteLine("\nThe attributes of type MyAttribute for the member {0} are: \n",
	                        myMembers[i]);
	                    for(int j = 0; j < myAttributes.Length; j++)
	                        Console.WriteLine("The value of the attribute is : \"{0}\"",
	                            ((MyAttribute)myAttributes[j]).Name);
	                }
	            }
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("An exception occurred: {0}", e.Message);
	        }
	    }
	}
	

snippet threadstart

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ThreadStart/source1.cs

	using System;
	using System.Threading;
	
	public class ServerClass
	{
	    public void InstanceMethod()
	    {
	        Console.WriteLine(
	            "ServerClass.InstanceMethod is running on another thread.");
	
	        Thread.Sleep(3000);
	        Console.WriteLine(
	            "The instance method called by the worker thread has ended.");
	    }
	
	    public static void StaticMethod()
	    {
	        Console.WriteLine(
	            "ServerClass.StaticMethod is running on another thread.");
	
	        Thread.Sleep(5000);
	        Console.WriteLine(
	            "The static method called by the worker thread has ended.");
	    }
	}
	
	public class Simple
	{
	    public static int Main(String[] args)
	    {
	        Console.WriteLine("Thread Simple Sample");
	
	        ServerClass serverObject = new ServerClass();
	
	        Thread InstanceCaller = new Thread(
	            new ThreadStart(serverObject.InstanceMethod));
	
	        InstanceCaller.Start();
	
	        Console.WriteLine("The Main() thread calls this after "
	            + "starting the new InstanceCaller thread.");
	
	        Thread StaticCaller = new Thread(
	            new ThreadStart(ServerClass.StaticMethod));
	
	        StaticCaller.Start();
	
	        Console.WriteLine("The Main() thread calls this after "
	            + "starting the new StaticCaller thread.");
	
	        return 0;
	    }
	}

snippet conceptual_types_enum

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_types_enum/example.cs

	using System;
	using System.Collections.Generic;
	
	public enum SomeRootVegetables
	{
	    HorseRadish,
	    Radish,
	    Turnip
	}
	
	[Flags]
	public enum Seasons
	{
	    None = 0,
	    Summer = 1,
	    Autumn = 2,
	    Winter = 4,
	    Spring = 8,
	    All = Summer | Autumn | Winter | Spring
	}
	
	public class Example
	{
	   public static void Main()
	   {
	       Dictionary<SomeRootVegetables, Seasons> AvailableIn = new Dictionary<SomeRootVegetables, Seasons>();
	
	       AvailableIn[SomeRootVegetables.HorseRadish] = Seasons.All;
	       AvailableIn[SomeRootVegetables.Radish] = Seasons.Spring;
	       AvailableIn[SomeRootVegetables.Turnip] = Seasons.Spring | 
	            Seasons.Autumn;
	
	       Seasons[] theSeasons = new Seasons[] { Seasons.Summer, Seasons.Autumn, 
	            Seasons.Winter, Seasons.Spring };
	
	       foreach (Seasons season in theSeasons)
	       {
	          Console.Write(String.Format(
	              "The following root vegetables are harvested in {0}:\n", 
	              season.ToString("G")));
	          foreach (KeyValuePair<SomeRootVegetables, Seasons> item in AvailableIn)
	          {
	             if (((Seasons)item.Value & season) > 0)
	                 Console.Write(String.Format("  {0:G}\n", 
	                      (SomeRootVegetables)item.Key));
	          }
	       }
	   }
	}
snippet eventlog_writeentry_5

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_5/eventlog_writeentry_5.cs

	
	/*
	 The following sample demonstrates the 
	 'WriteEntry(String, EventLogEntryType, Int32, Int16, Byte[])' method of 
	 'EventLog' class. It writes an entry to a custom event log, "MyLog".
	 It creates the source "MySource" if the source does not already exist.
	 It creates an 'EventLog' object and calls 'WriteEntry' passing the 
	 description, Log entry type, application specific identifier for the event,
	 application specific subcategory and  data to be associated with the entry.
	*/
	
	using System;
	using System.Diagnostics;
	              
	class EventLog_WriteEntry_5
	{
	   public static void Main()   
	   {
	      try
	      {
	         string myLogName = "myNewLog";
	         if(!EventLog.SourceExists("MySource"))
	         {
	            EventLog.CreateEventSource("MySource", myLogName);
	            Console.WriteLine("Created EventSource");
	            Console.WriteLine("Exiting, execute the application a second time to use the source.");
	            return;
	         }
	         else
	            myLogName = EventLog.LogNameFromSourceName("MySource",".");
	         EventLog myEventLog = new EventLog();
	         myEventLog.Source = "MySource";
	         myEventLog.Log = myLogName;
	
	         string myMessage = "This is my event.";
	         EventLogEntryType myEventLogEntryType = EventLogEntryType.Warning;
	         int myApplicatinEventId = 1100;
	         short myApplicatinCategoryId = 1;
	
	         byte[] myRawData = new byte[4];
	         for(int i=0;i<4;i++)
	         {
	            myRawData[i]=1;
	         }
	         Console.WriteLine("Writing to EventLog.. ");
	         myEventLog.WriteEntry(myMessage,myEventLogEntryType, 
	            myApplicatinEventId, myApplicatinCategoryId, myRawData);
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("Exception:{0}",e.Message);
	      }
	   }
	}
	
	

snippet resourcemanager_class

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ResourceManager_Class/rmc.cs

	using System;
	using System.Resources;
	using System.Reflection;
	using System.Threading;
	using System.Globalization;
	
	class Example 
	{
	    public static void Main() 
	    {
	    string day;
	    string year;
	    string holiday;
	    string celebrate = "{0} will occur on {1} in {2}.\n";
	
	    ResourceManager rm = new ResourceManager("rmc", 
	                             typeof(Example).Assembly);
	
	    Console.WriteLine("Obtain resources using the current UI culture.");
	
	    day  = rm.GetString("day");
	    year = rm.GetString("year");
	    holiday = rm.GetString("holiday");
	    Console.WriteLine(celebrate, holiday, day, year);
	
	    CultureInfo ci = new CultureInfo("es-MX");
	
	    Console.WriteLine("Obtain resources using the es-MX culture.");
	
	    day  = rm.GetString("day", ci);
	    year = rm.GetString("year", ci);
	    holiday = rm.GetString("holiday", ci);
	
	
	    Console.WriteLine(celebrate, holiday, day, year);
	    }
	}
	/*
	This example displays the following output:
	
	   Obtain resources using the current UI culture.
	   "5th of May" will occur on Friday in 2006.
	   
	   Obtain resources using the es-MX culture.
	   "Cinco de Mayo" will occur on Viernes in 2006.
	*/
snippet securestring_xat

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/SecureString_xAt/xat.cs

	using System;
	using System.Security;
	
	class Example
	{
	    public static void Main() 
	    {
	       string msg = "The curent length of the SecureString object: {0}\n";
	       Console.WriteLine("1) Instantiate the SecureString object.");
	       SecureString ss = new SecureString();
	       Console.WriteLine(msg, ss.Length);
	
	       Console.WriteLine("2) Append 'a' to the value.");
	       ss.AppendChar('a');
	       Console.WriteLine(msg, ss.Length);
	
	       Console.WriteLine("3) Append 'X' to the value.");
	       ss.AppendChar('X');
	       Console.WriteLine(msg, ss.Length);
	
	       Console.WriteLine("4) Append 'c' to the value.");
	       ss.AppendChar('c');
	       Console.WriteLine(msg, ss.Length);
	
	       Console.WriteLine("5) Insert 'd' at the end of the value.");
	       ss.InsertAt(ss.Length, 'd');
	       Console.WriteLine(msg, ss.Length);
	
	       Console.WriteLine("6) Remove the last character ('d') from the value.");
	       ss.RemoveAt(3);
	       Console.WriteLine(msg, ss.Length);
	
	       Console.WriteLine("7) Set the second character of the value to 'b'.");
	       ss.SetAt(1, 'b');
	       Console.WriteLine(msg, ss.Length);
	
	       Console.WriteLine("8) Delete the value of the SecureString object:");
	       ss.Clear();
	       Console.WriteLine(msg, ss.Length);
	       
	       ss.Dispose();
	    }
	}
snippet missingmethodexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MissingMethodException/MissingMethodException.cs

	using System;
	using System.Reflection;
	
	public class App
	{
	    public static void Main()
	    {
	
	        try
	        {
	            typeof(App).InvokeMember("DoSomething", BindingFlags.Static |
	                BindingFlags.InvokeMethod, null, null, null);
	        }
	        catch (MissingMethodException e)
	        {
	            Console.WriteLine("Unable to call the DoSomething method: {0}", e.Message);
	        }
	
	        try
	        {
	            typeof(App).InvokeMember("AField", BindingFlags.Static | BindingFlags.SetField,
	                null, null, new Object[] { 5 });
	        }
	        catch (MissingFieldException e)
	        {
	         Console.WriteLine("Unable to access the AField field: {0}", e.Message);
	        }
	
	        try
	        {
	            typeof(App).InvokeMember("AnotherField", BindingFlags.Static |
	                BindingFlags.GetField, null, null, null);
	        }
	        catch (MissingMemberException e)
	        {
	         Console.WriteLine("Unable to access the AnotherField field: {0}", e.Message);
	        }
	    }
	}
snippet conceptual_encoding

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_encoding/getchars1.cs

	using System;
	using System.Text;
	
	public class Example
	{
	   public static void Main()
	   {
	      string[] strings = { "This is the first sentence. ", 
	                           "This is the second sentence. ",
	                           "This is the third sentence. " };
	      Encoding asciiEncoding = Encoding.ASCII;
	      byte[] bytes;
	      char[] chars = new char[50];
	      int index = 0;     
	      
	      foreach (var stringValue in strings) {
	         Console.WriteLine("String to Encode: {0}", stringValue);
	         bytes = asciiEncoding.GetBytes(stringValue);
	         Console.Write("Encoded bytes: ");
	         for (int ctr = 0; ctr < bytes.Length; ctr++)
	            Console.Write(" {0}{1:X2}", 
	                          ctr % 20 == 0 ? Environment.NewLine : "", 
	                          bytes[ctr]);
	         Console.WriteLine();
	
	         int count = asciiEncoding.GetCharCount(bytes);
	         if (count + index >=  chars.Length)
	            Array.Resize(ref chars, chars.Length + 50);
	
	         int written = asciiEncoding.GetChars(bytes, 0, 
	                                              bytes.Length, 
	                                              chars, index);              
	         index = index + written;
	         Console.WriteLine();       
	      }
	      
	      string decodedString = new string(chars, 0, index - 1);
	      Console.WriteLine("Decoded string: ");
	      Console.WriteLine(decodedString);
	   }
	}

snippet list`1_reverse

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>();
	
	        dinosaurs.Add("Pachycephalosaurus");
	        dinosaurs.Add("Parasauralophus");
	        dinosaurs.Add("Mamenchisaurus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("Coelophysis");
	        dinosaurs.Add("Oviraptor");
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        dinosaurs.Reverse();
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        dinosaurs.Reverse(1, 4);
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Pachycephalosaurus
	Parasauralophus
	Mamenchisaurus
	Amargasaurus
	Coelophysis
	Oviraptor
	
	Oviraptor
	Coelophysis
	Amargasaurus
	Mamenchisaurus
	Parasauralophus
	Pachycephalosaurus
	
	Oviraptor
	Parasauralophus
	Mamenchisaurus
	Amargasaurus
	Coelophysis
	Pachycephalosaurus
	 */
	
	

snippet runtime_interopservices_marshal_securestringtocotaskmemansi

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi/sample.cs

	using System;
	using System.Runtime.InteropServices;
	using System.Security;
	
	class MarshalExample
	{
	     static void Main()
	     {
	         IntPtr unmanagedRef = IntPtr.Zero;
	
	          Console.Write("Please enter your password: ");
	
	          SecureString passWord = GetPassword();
	
	          Console.WriteLine("Copying and decrypting the string to unmanaged memory...");
	
	          unmanagedRef = Marshal.SecureStringToCoTaskMemAnsi(passWord);
	
	          if (unmanagedRef != IntPtr.Zero)
	          {
	              Console.WriteLine("Zeroing out unmanaged memory...");
	
	              Marshal.ZeroFreeCoTaskMemAnsi(unmanagedRef);
	          }
	          passWord.Dispose();
	          
	         Console.WriteLine("Done.");
	     }
	
	     public static SecureString GetPassword()
	     {
	         SecureString password = new SecureString();
	
	         ConsoleKeyInfo nextKey = Console.ReadKey(true);
	
	         while (nextKey.Key != ConsoleKey.Enter)
	         {
	             if (nextKey.Key == ConsoleKey.Backspace)
	             {
	                 if (password.Length > 0)
	                 {
	                     password.RemoveAt(password.Length - 1);
	
	                     Console.Write(nextKey.KeyChar);
	                     Console.Write(" ");
	                     Console.Write(nextKey.KeyChar);
	                 }
	             }
	             else
	             {
	                 password.AppendChar(nextKey.KeyChar);
	                 Console.Write("*");
	             }
	
	             nextKey = Console.ReadKey(true);
	         }
	
	         Console.WriteLine();
	
	         password.MakeReadOnly();
	         return password;
	     }
	}
snippet conceptual_isolatedstorage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_isolatedstorage/source4.cs

	using System;
	using System.IO.IsolatedStorage;
	using System.IO;
	
	public class DeletingFilesDirectories
	{
	    public static void Main()
	    {
	
	        IsolatedStorageFile isoStore =  IsolatedStorageFile.GetStore(IsolatedStorageScope.User |
	            IsolatedStorageScope.Domain | IsolatedStorageScope.Assembly, null, null);
	
	        Console.WriteLine("Creating Directories:");
	
	
	        isoStore.CreateDirectory("TopLevelDirectory");
	        Console.WriteLine("TopLevelDirectory");
	        isoStore.CreateDirectory("TopLevelDirectory/SecondLevel");
	        Console.WriteLine("TopLevelDirectory/SecondLevel");
	
	
	        isoStore.CreateDirectory("AnotherTopLevelDirectory/InsideDirectory");
	        Console.WriteLine("AnotherTopLevelDirectory/InsideDirectory");
	        Console.WriteLine();
	
	
	        Console.WriteLine("Creating Files:");
	
	
	        IsolatedStorageFileStream isoStream1 = new IsolatedStorageFileStream("InTheRoot.txt",
	            FileMode.Create, isoStore);
	        Console.WriteLine("InTheRoot.txt");
	
	        isoStream1.Close();
	
	
	        IsolatedStorageFileStream isoStream2 = new IsolatedStorageFileStream(
	            "AnotherTopLevelDirectory/InsideDirectory/HereIAm.txt", FileMode.Create, isoStore);
	        Console.WriteLine("AnotherTopLevelDirectory/InsideDirectory/HereIAm.txt");
	        Console.WriteLine();
	
	        isoStream2.Close();
	
	        Console.WriteLine("Deleting File:");
	
	        isoStore.DeleteFile("AnotherTopLevelDirectory/InsideDirectory/HereIAm.txt");
	        Console.WriteLine("AnotherTopLevelDirectory/InsideDirectory/HereIAm.txt");
	        Console.WriteLine();
	
	        Console.WriteLine("Deleting Directory:");
	
	
	        isoStore.DeleteDirectory("AnotherTopLevelDirectory/InsideDirectory/");
	        Console.WriteLine("AnotherTopLevelDirectory/InsideDirectory/");
	        Console.WriteLine();
	
	}

snippet conceptual_string_basicops

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_string_basicops/trimming.cs

	using System;
	
	class Example
	{
	    public static void Main()
	    {
	        Trim();
	        TrimEnd1();
	        TrimEnd2();
	        TrimStart();
	        Remove();
	    }
	
	    public static void Trim()
	    {
	        string MyString = " Big   ";
	        Console.WriteLine("Hello{0}World!", MyString);
	        string TrimString = MyString.Trim();
	        Console.WriteLine("Hello{0}World!", TrimString);
	    }
	
	
	    public static void TrimEnd1()
	    {
	        string MyString = "Hello World!";
	        char[] MyChar = {'r','o','W','l','d','!',' '};
	        string NewString = MyString.TrimEnd(MyChar);
	        Console.WriteLine(NewString);
	    }
	
	    public static void TrimEnd2()
	    {
	        string MyString = "Hello, World!";
	        char[] MyChar = {'r','o','W','l','d','!',' '};
	        string NewString = MyString.TrimEnd(MyChar);
	        Console.WriteLine(NewString);
	    }
	
	    public static void TrimStart()
	    {
	        string MyString = "Hello World!";
	        char[] MyChar = {'e', 'H','l','o',' ' };
	        string NewString = MyString.TrimStart(MyChar);
	        Console.WriteLine(NewString);
	    }
	
	    public static void Remove()
	    {
	        string MyString = "Hello Beautiful World!";
	        Console.WriteLine(MyString.Remove(5,10));
	    }
	}

snippet arraylist

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ArrayList/ArrayListSample.cs

	using System;
	using System.Text;
	using System.Collections;
	
	public class SamplesArrayList  {
	
		public static void Main()  {
			ArrayList myAL = new ArrayList();
			myAL.Add("Eric");
			myAL.Add("Mark");
			myAL.Add("Lance");
			myAL.Add("Rob");
			myAL.Add("Kris");
			myAL.Add("Brad");
			myAL.Add("Kit");
			myAL.Add("Bradley");
			myAL.Add("Keith");
			myAL.Add("Susan");
		
			Console.WriteLine( "Count: {0}", myAL.Count );
			
			PrintValues ("Unsorted", myAL );
			myAL.Sort();
			PrintValues("Sorted", myAL );
			myAL.Sort(new ReverseStringComparer() );
			PrintValues ("Reverse" , myAL );
	
	
			string [] names = (string[]) myAL.ToArray (typeof(string));
	
	
		}
		public static void PrintValues(string title, IEnumerable	myList )  {
			Console.Write ("{0,10}: ", title);
			StringBuilder sb = new StringBuilder();
			foreach (string s in myList) {
				sb.AppendFormat( "{0}, ", s);
			}
			sb.Remove (sb.Length-2,2);
			Console.WriteLine(sb);
		}
	}
	public class ReverseStringComparer : IComparer {
	   public int Compare (object x, object y) {
		   string s1 = x as string;
		   string s2 = y as string;	  
		   return - String.Compare (s1,s2);
	
	   }
	}
	
	

snippet runtime_compilerservices_asyncstatemachineattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/runtime_compilerservices_asyncstatemachineattribute/program.cs

	using System;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Threading.Tasks;
	using System.Runtime.CompilerServices;
	
	namespace ConsoleApplication1
	{
	
	    public class TheClass
	    {
	        public async Task<int> AsyncMethod()
	        {
	            await Task.Delay(5);
	            return 1;
	        }
	
	        public int RegularMethod()
	        {
	            return 0;
	        }
	    }
	
	    class Program
	    {
	        private static bool IsAsyncMethod(Type classType, string methodName)
	        {
	            MethodInfo method = classType.GetMethod(methodName);
	
	            Type attType = typeof(AsyncStateMachineAttribute);
	
	            var attrib = (AsyncStateMachineAttribute)method.GetCustomAttribute(attType);
	
	            return (attrib != null);
	        }
	
	        private static void ShowResult(Type classType, string methodName)
	        {
	            Console.Write((methodName + ": ").PadRight(16));
	
	            if (IsAsyncMethod(classType, methodName))
	                Console.WriteLine("Async method");
	            else
	                Console.WriteLine("Regular method");
	        }
	
	        static void Main(string[] args)
	        {
	            ShowResult(classType: typeof(TheClass), methodName: "AsyncMethod");
	            ShowResult(classType: typeof(TheClass), methodName: "RegularMethod");
	
	
	            Console.ReadKey();
	        }
	
	    }
	}
	
snippet cryptography_xml_xmllicensetransform

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_XmlLicenseTransform/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	namespace XMLDSIGExample
	{
	    class XmlLicenseTransformExample
	    {
	        public static void Main()
	        {
	
	        }
	        public static void CheckSignatureWithEncryptedGrant(string fileName, IRelDecryptor decryptor)
	        {
	            XmlDocument xmlDocument = new XmlDocument();
	            XmlNamespaceManager nsManager = new XmlNamespaceManager(xmlDocument.NameTable);
	
	            xmlDocument.PreserveWhitespace = true;
	
	            xmlDocument.Load(fileName);
	            nsManager.AddNamespace("dsig", SignedXml.XmlDsigNamespaceUrl);
	
	
	            for (int i = 0, count = nodeList.Count; i < count; i++)
	            {
	                XmlDocument clone = xmlDocument.Clone() as XmlDocument;
	
	                SignedXml signedXml = new SignedXml(clone);
	
	                signedXml.LoadXml((XmlElement)signatures[i]);
	
	                Transform trans = ((Reference)signedXml.SignedInfo.References[0]).TransformChain[0];
	
	                if (trans is XmlLicenseTransform)
	                {
	
	                    if (decryptor != null)
	                        (trans as XmlLicenseTransform).Decryptor = decryptor;
	                }
	
	                bool result = signedXml.CheckSignature();
	
	                if (result)
	                    Console.WriteLine("SUCCESS: CheckSignatureWithEncryptedGrant - issuer index #" +
	                                                    i.ToString());
	                else
	                    Console.WriteLine("FAILURE: CheckSignatureWithEncryptedGrant - issuer index #" +
	                                                    i.ToString());
	            }
	
	        }
	    }
	}
	
snippet installer_context

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_Context/installer_context.cs

	/*
	   System.Configuration.Install.Installer.Context
	
	   The following example demonstrates the 'Context' property of 
	   the 'Installer' class. The contents of the 'Context' property 
	   like information about the location of the log file for the 
	   installation, the location of the file to save information 
	   required by the Uninstall method, and the command line that 
	   was entered when the installation executable was run is 
	   displayed on the console.
	   
	   Use 'installutil' to run the assembly Installer_Context.exe
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.Collections.Specialized;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   public override void Install( IDictionary mySavedState )
	   {
	      base.Install(mySavedState);
	      Console.WriteLine( "" );
	      StringDictionary myStringDictionary = Context.Parameters;
	      if ( Context.Parameters.Count > 0 )
	      {
	         Console.WriteLine("Context Property : " );
	         foreach( string myString in Context.Parameters.Keys)
	         {
	            Console.WriteLine( Context.Parameters[ myString ] );
	         }
	      }
	      Console.WriteLine( "" );
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	   }
	}
	
	public class MyAssembly
	{
	   public static void Main()
	   {
	      Console.WriteLine("Run the assembly Installer_Context.exe using the" +
	                        " installer process 'installutil'");
	   }
	}

snippet rngcsp

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RNGCSP/rngcsp.cs

	
	using System;
	using System.IO;
	using System.Text;
	using System.Security.Cryptography;
	
	class RNGCSP
	{
	    private static RNGCryptoServiceProvider rngCsp = new RNGCryptoServiceProvider();
	    public static void Main()
	    {
	        const int totalRolls = 25000;
	        int[] results = new int[6];
	
	        for (int x = 0; x < totalRolls; x++)
	        {
	            byte roll = RollDice((byte)results.Length);
	            results[roll - 1]++;
	        }
	        for (int i = 0; i < results.Length; ++i)
	        {
	            Console.WriteLine("{0}: {1} ({2:p1})", i + 1, results[i], (double)results[i] / (double)totalRolls);
	        }
	        rngCsp.Dispose();
	        Console.ReadLine();
	    }
	
	
	    public static byte RollDice(byte numberSides)
	    {
	        if (numberSides <= 0)
	            throw new ArgumentOutOfRangeException("numberSides");
	
	        byte[] randomNumber = new byte[1];
	        do
	        {
	            rngCsp.GetBytes(randomNumber);
	        }
	        while (!IsFairRoll(randomNumber[0], numberSides));
	        return (byte)((randomNumber[0] % numberSides) + 1);
	    }
	
	    private static bool IsFairRoll(byte roll, byte numSides)
	    {
	        int fullSetsOfValues = Byte.MaxValue / numSides;
	
	        return roll < numSides * fullSetsOfValues;
	    }
	}
snippet eventsoverview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/eventsoverview/programwithdelegate.cs

	using System;
	
	namespace ConsoleApplication1
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            Counter c = new Counter(new Random().Next(10));
	            c.ThresholdReached += c_ThresholdReached;
	
	            Console.WriteLine("press 'a' key to increase total");
	            while (Console.ReadKey(true).KeyChar == 'a')
	            {
	                Console.WriteLine("adding one");
	                c.Add(1);
	            }
	        }
	
	        static void c_ThresholdReached(Object sender, ThresholdReachedEventArgs e)
	        {
	            Console.WriteLine("The threshold of {0} was reached at {1}.", e.Threshold, e.TimeReached);
	            Environment.Exit(0);
	        }
	    }
	
	    class Counter
	    {
	        private int threshold;
	        private int total;
	
	        public Counter(int passedThreshold)
	        {
	            threshold = passedThreshold;
	        }
	
	        public void Add(int x)
	        {
	            total += x;
	            if (total >= threshold)
	            {
	                ThresholdReachedEventArgs args = new ThresholdReachedEventArgs();
	                args.Threshold = threshold;
	                args.TimeReached = DateTime.Now;
	                OnThresholdReached(args);
	            }
	        }
	
	        protected virtual void OnThresholdReached(ThresholdReachedEventArgs e)
	        {
	            ThresholdReachedEventHandler handler = ThresholdReached;
	            if (handler != null)
	            {
	                handler(this, e);
	            }
	        }
	
	        public event ThresholdReachedEventHandler ThresholdReached;
	    }
	
	    public class ThresholdReachedEventArgs : EventArgs
	    {
	        public int Threshold { get; set; }
	        public DateTime TimeReached { get; set; }
	    }
	
	    public delegate void ThresholdReachedEventHandler(Object sender, ThresholdReachedEventArgs e);
	}

snippet conceptual_regularexpressions_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_bestpractices/static2.cs

	using System.Windows.Forms;
	using System.Drawing;
	
	using System;
	using System.Text.RegularExpressions;
	
	public class RegexLib
	{
	   public static bool IsValidCurrency(string currencyValue)
	   {
	      string pattern = @"\p{Sc}+\s*\d+";
	      return Regex.IsMatch(currencyValue, pattern); 
	   }
	}
	
	public class CurrencyForm : Form
	{ 
	   Button OKButton;
	   TextBox sourceCurrency;
	   Label status;
	   
	   public CurrencyForm()
	   {
	      sourceCurrency = new TextBox();
	      sourceCurrency.Location = new Point(25, 50);
	      sourceCurrency.Size = new Size(100, 25);
	      sourceCurrency.Text = String.Empty;
	      sourceCurrency.TextChanged += new System.EventHandler(this.sourceCurrency_TextChanged);
	      this.Controls.Add(sourceCurrency);
	      
	      OKButton = new Button();
	      OKButton.Location = new Point(100, 150);
	      OKButton.Size = new Size(75, 25);
	      OKButton.Text = "OK";
	      OKButton.Click += new System.EventHandler(this.OKButton_Click);
	      this.Controls.Add(OKButton);
	      this.AcceptButton = OKButton;
	
	      status = new Label();
	      status.Location = new Point(0, this.Height - 55);
	      status.Size = new Size(this.Width, 25);
	      status.BorderStyle = BorderStyle.Fixed3D;
	      status.Anchor = AnchorStyles.Bottom;
	      this.Controls.Add(status);
	   }
	   
	   public static void Main()
	   {
	      Form frm = new CurrencyForm();
	      Application.Run(frm);
	   }
	
	   private void PerformConversion() {}
	   
	   public void sourceCurrency_TextChanged(object sender, EventArgs e)
	   { 
	      status.Text = "";           
	   }  
	   
	   public void OKButton_Click(object sender, EventArgs e) 
	   {
	      if (! String.IsNullOrEmpty(sourceCurrency.Text))
	         if (RegexLib.IsValidCurrency(sourceCurrency.Text))
	            PerformConversion();
	         else
	            status.Text = "The source currency value is invalid.";
	   }
	}

snippet io_filestream_ctor2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_FileStream_ctor2/example.cs

	using System;
	using System.IO;
	using System.Text;
	using System.Security.AccessControl;
	
	namespace FileSystemExample
	{
	    class FileStreamExample
	    {
	        public static void Main()
	        {
	            try
	            {
	
	                byte[] messageByte = Encoding.ASCII.GetBytes("Here is some data.");
	
	                FileSecurity fs = new FileSecurity();
	
	                fs.AddAccessRule(new FileSystemAccessRule(@"DOMAINNAME\AccountName",
	                                                            FileSystemRights.ReadData,
	                                                            AccessControlType.Allow));
	
	                FileStream fWrite = new FileStream("test.txt", FileMode.Create, FileSystemRights.Modify, FileShare.None, 8, FileOptions.None, fs);
	
	                fWrite.WriteByte((byte)messageByte.Length);
	
	                fWrite.Write(messageByte, 0, messageByte.Length);
	
	                fWrite.Close();
	
	                
	
	                FileStream fRead = new FileStream("test.txt", FileMode.Open);
	
	                int length = (int)fRead.ReadByte();
	
	                byte[] readBytes = new byte[length];
	
	                fRead.Read(readBytes, 0, readBytes.Length);
	
	                fRead.Close();
	
	                Console.WriteLine(Encoding.ASCII.GetString(readBytes));
	
	                Console.WriteLine("Done writing and reading data.");
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine(e);
	            }
	
	            Console.ReadLine();
	        }
	    }
	}
	
snippet appdomain_loadraw

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_LoadRaw/loadraw.cs

	using System;
	using System.IO;
	using System.Reflection;
	using System.Reflection.Emit;
	
	class Test {
	   public static void Main() {
	      AppDomain currentDomain = AppDomain.CurrentDomain;
	      
	
	      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolver);
	      
	   }
	   
	   static void InstantiateMyType(AppDomain domain) {
	      try {
	         domain.CreateInstance("Assembly text name, Version, Culture, PublicKeyToken", "MyType");
	      } catch (Exception e) {
	         Console.WriteLine(e.Message);
	      }
	   }
	   
	   static byte[] loadFile(string filename) {
	      FileStream fs = new FileStream(filename, FileMode.Open);
	      byte[] buffer = new byte[(int) fs.Length];
	      fs.Read(buffer, 0, buffer.Length);
	      fs.Close();
	   
	      return buffer;
	   }   
	
	   static Assembly MyResolver(object sender, ResolveEventArgs args) {
	      AppDomain domain = (AppDomain) sender;
	
	      EmitAssembly(domain);
	      
	      byte[] rawAssembly = loadFile("temp.dll");
	      byte[] rawSymbolStore = loadFile("temp.pdb");
	      Assembly assembly = domain.Load(rawAssembly, rawSymbolStore);
	
	      return assembly;
	   }
	   
	   static void EmitAssembly(AppDomain domain) {
	      AssemblyName assemblyName = new AssemblyName();
	      assemblyName.Name = "MyAssembly";
	
	      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Save);
	      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule("MyModule", "temp.dll", true);
	      TypeBuilder typeBuilder = moduleBuilder.DefineType("MyType", TypeAttributes.Public);
	
	      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);
	      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();
	      ilGenerator.EmitWriteLine("MyType instantiated!");
	      ilGenerator.Emit(OpCodes.Ret);
	
	      typeBuilder.CreateType();
	      
	      assemblyBuilder.Save("temp.dll");
	   }
	}
snippet assemblybuilder_defineunmanagedresource

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource/assemblybuilder_defineunmanagedresource.cs

	
	/*
	   The following program demonstrates the 'DefineResource' and 'DefineUnmanagedResource'
	   methods of 'AssemblyBuilder' class. It builds an assembly and a resource file at runtime.
	   An unmanaged resource file is also defined for the same resource file. The EmittedTest2.cs file
	   calls the methods of "MyEmitAssembly.dll" assembly and the message is displayed to console.
	*/
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Resources;
	
	public class MyAssemblyResource
	{
	   internal static void Main()
	   {
	      AssemblyBuilder myAssembly = CreateAssembly("MyEmitTestAssembly");
	
	      IResourceWriter myResourceWriter = myAssembly.DefineResource("myResourceFile",
	         "A sample Resource File", "MyAssemblyResource.resources", 
	         ResourceAttributes.Private);
	
	      myResourceWriter.AddResource("AddResource Test", "Testing for the added resource");
	
	      myAssembly.Save(myAssembly.GetName().Name + ".dll");
	
	      myAssembly.DefineUnmanagedResource("MyAssemblyResource.resources");
	   }
	
	   private static AssemblyBuilder CreateAssembly(string name)
	   {
	      AssemblyName aName = new AssemblyName(name);
	      AssemblyBuilder myAssembly = 
	         AppDomain.CurrentDomain.DefineDynamicAssembly(aName,
	            AssemblyBuilderAccess.Save);
	
	      ModuleBuilder myModule = 
	         myAssembly.DefineDynamicModule(aName.Name, aName.Name + ".dll");
	
	      TypeBuilder myEmitClass = myModule.DefineType("EmitClass", TypeAttributes.Public);
	
	      MethodBuilder myMethod = myEmitClass.DefineMethod("Display",
	         MethodAttributes.Public, typeof(String), null);
	
	      ILGenerator methodIL = myMethod.GetILGenerator();
	      methodIL.Emit(OpCodes.Ldstr, "Display method gets called.");
	      methodIL.Emit(OpCodes.Ret);
	
	      myEmitClass.CreateType();
	
	      return(myAssembly);
	   }
	}

snippet assemblybuilder_defineunmanagedresource2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource2/assemblybuilder_defineunmanagedresource2.cs

	
	/*
	   The following program demonstrates the 'DefineResource' and 'DefineUnmanagedResource'
	   methods of 'AssemblyBuilder' class. It builds an assembly and a resource file at runtime.
	   An unmanaged resource file is also defined for the same resource file. The EmittedTest2.cs file
	   calls the methods of "MyEmitAssembly.dll" assembly and the message is displayed to console.
	*/
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Resources;
	
	public class MyAssemblyResource
	{
	   internal static void Main()
	   {
	      AssemblyBuilder myAssembly = CreateAssembly("MyEmitTestAssembly");
	
	      IResourceWriter myResourceWriter = myAssembly.DefineResource("myResourceFile",
	         "A sample Resource File", "MyAssemblyResource.resources", 
	         ResourceAttributes.Private);
	
	      myResourceWriter.AddResource("AddResource Test", "Testing for the added resource");
	
	      myAssembly.Save(myAssembly.GetName().Name + ".dll");
	
	      myAssembly.DefineUnmanagedResource(new byte[]{01, 00, 01});
	   }
	
	   private static AssemblyBuilder CreateAssembly(string name)
	   {
	      AssemblyName aName = new AssemblyName(name);
	      AssemblyBuilder myAssembly = 
	         AppDomain.CurrentDomain.DefineDynamicAssembly(aName,
	            AssemblyBuilderAccess.Save);
	
	      ModuleBuilder myModule = 
	         myAssembly.DefineDynamicModule(aName.Name, aName.Name + ".dll");
	
	      TypeBuilder myEmitClass = myModule.DefineType("EmitClass", TypeAttributes.Public);
	
	      MethodBuilder myMethod = myEmitClass.DefineMethod("Display",
	         MethodAttributes.Public, typeof(String), null);
	
	      ILGenerator methodIL = myMethod.GetILGenerator();
	      methodIL.Emit(OpCodes.Ldstr, "Display method gets called.");
	      methodIL.Emit(OpCodes.Ret);
	
	      myEmitClass.CreateType();
	
	      return(myAssembly);
	   }
	}

snippet certinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CertInfo/certinfo.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Permissions;
	using System.IO;
	using System.Security.Cryptography.X509Certificates;
	
	class CertInfo
	{
		internal static byte[] ReadFile (string fileName)
		{
			FileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);
			int size = (int)f.Length;
			byte[] data = new byte[size];
			size = f.Read(data, 0, size);
			f.Close();
			return data;
		}
		static void Main(string[] args)
		{
			if (args.Length < 1)
			{
				Console.WriteLine("Usage: CertInfo <filename>");
				return;
			}
			try
			{
				X509Certificate2 x509 = new X509Certificate2();
				byte[] rawData = ReadFile(args[0]);
				x509.Import(rawData);
	
				Console.WriteLine("{0}Subject: {1}{0}", Environment.NewLine, x509.Subject);
				Console.WriteLine("{0}Issuer: {1}{0}", Environment.NewLine, x509.Issuer);
				Console.WriteLine("{0}Version: {1}{0}", Environment.NewLine, x509.Version);
				Console.WriteLine("{0}Valid Date: {1}{0}", Environment.NewLine, x509.NotBefore);
				Console.WriteLine("{0}Expiry Date: {1}{0}", Environment.NewLine, x509.NotAfter);
				Console.WriteLine("{0}Thumbprint: {1}{0}", Environment.NewLine, x509.Thumbprint);
				Console.WriteLine("{0}Serial Number: {1}{0}", Environment.NewLine, x509.SerialNumber);
				Console.WriteLine("{0}Friendly Name: {1}{0}", Environment.NewLine, x509.PublicKey.Oid.FriendlyName);
				Console.WriteLine("{0}Public Key Format: {1}{0}", Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(true));
				Console.WriteLine("{0}Raw Data Length: {1}{0}", Environment.NewLine, x509.RawData.Length);
				Console.WriteLine("{0}Certificate to string: {1}{0}", Environment.NewLine, x509.ToString(true));
				Console.WriteLine("{0}Certificate to XML String: {1}{0}", Environment.NewLine, x509.PublicKey.Key.ToXmlString(false));
	
				X509Store store = new X509Store();
				store.Open(OpenFlags.MaxAllowed);
				store.Add(x509);
				store.Close();
			}
			catch (DirectoryNotFoundException)
			{
				   Console.WriteLine("Error: The directory specified could not be found.");
			}
			catch (IOException)
			{
				Console.WriteLine("Error: A file in the directory could not be accessed.");
			}
			catch (NullReferenceException)
			{
				Console.WriteLine("File must be a .cer file. Program does not have access to that type of file.");
			}
		}
	}

snippet countersample_ctor_2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CounterSample_Ctor_2/countersample_ctor_2.cs

	
	/* The following program demonstrates the constructors of the 'CounterSample'
	   structure. It creates an instance of performance counter, configures it
	   to interact with 'Processor' category, '% Processor Time' counter and
	   '0' instance, creates an instance of 'CounterSample', and displays
	    the corresponding fields.
	*/
	
	using System;
	using System.Diagnostics;
	
	class MyCounterSampleClass
	{
	   public static void Main()
	   {
	      PerformanceCounter myPerformanceCounter1 = new PerformanceCounter
	         ("Processor","% Processor Time", "0");
	      CounterSample myCounterSample1 = new CounterSample(10L, 20L, 30L, 40L, 50L, 60L,
	                           PerformanceCounterType.AverageCount64);
	      Console.WriteLine("CounterTimeStamp = "+myCounterSample1.CounterTimeStamp);
	
	      Console.WriteLine("BaseValue = "+myCounterSample1.BaseValue);
	      Console.WriteLine("RawValue = "+myCounterSample1.RawValue);
	      Console.WriteLine("CounterFrequency = "+myCounterSample1.CounterFrequency);
	      Console.WriteLine("SystemFrequency = "+myCounterSample1.SystemFrequency);
	      Console.WriteLine("TimeStamp = "+myCounterSample1.TimeStamp);
	      Console.WriteLine("TimeStamp100nSec = "+myCounterSample1.TimeStamp100nSec);
	      Console.WriteLine("CounterType = "+myCounterSample1.CounterType);
	      myCounterSample1 = myPerformanceCounter1.NextSample();
	      Console.WriteLine("BaseValue = "+myCounterSample1.BaseValue);
	      Console.WriteLine("RawValue = "+myCounterSample1.RawValue);
	      Console.WriteLine("CounterFrequency = "+myCounterSample1.CounterFrequency);
	      Console.WriteLine("SystemFrequency = "+myCounterSample1.SystemFrequency);
	      Console.WriteLine("TimeStamp = "+myCounterSample1.TimeStamp);
	      Console.WriteLine("TimeStamp100nSec = "+myCounterSample1.TimeStamp100nSec);
	      Console.WriteLine("CounterType = "+myCounterSample1.CounterType);
	      Console.WriteLine("");
	      Console.WriteLine("");
	      PerformanceCounter myPerformanceCounter2 = new PerformanceCounter
	         ("Processor","% Processor Time", "0");
	      CounterSample myCounterSample2 = new CounterSample(10L, 20L, 30L, 40L, 50L, 60L,
	                     PerformanceCounterType.AverageCount64, 300);
	      Console.WriteLine("CounterTimeStamp = "+myCounterSample2.CounterTimeStamp);
	      Console.WriteLine("BaseValue = "+myCounterSample2.BaseValue);
	      Console.WriteLine("RawValue = "+myCounterSample2.RawValue);
	      Console.WriteLine("CounterFrequency = "+myCounterSample2.CounterFrequency);
	      Console.WriteLine("SystemFrequency = "+myCounterSample2.SystemFrequency);
	      Console.WriteLine("TimeStamp = "+myCounterSample2.TimeStamp);
	      Console.WriteLine("TimeStamp100nSec = "+myCounterSample2.TimeStamp100nSec);
	      Console.WriteLine("CounterType = "+myCounterSample2.CounterType);
	      Console.WriteLine("CounterTimeStamp = "+myCounterSample2.CounterTimeStamp);
	      myCounterSample2 = myPerformanceCounter2.NextSample();
	      Console.WriteLine("BaseValue = "+myCounterSample2.BaseValue);
	      Console.WriteLine("RawValue = "+myCounterSample2.RawValue);
	      Console.WriteLine("CounterFrequency = "+myCounterSample2.CounterFrequency);
	      Console.WriteLine("SystemFrequency = "+myCounterSample2.SystemFrequency);
	      Console.WriteLine("TimeStamp = "+myCounterSample2.TimeStamp);
	      Console.WriteLine("TimeStamp100nSec = "+myCounterSample2.TimeStamp100nSec);
	      Console.WriteLine("CounterType = "+myCounterSample2.CounterType);
	      Console.WriteLine("CounterTimeStamp = "+myCounterSample2.CounterTimeStamp);
	   }
	}

snippet conceptual_resources_portablemetro

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetro/app.xaml.cs

	using System;
	using System.Collections.Generic;
	using System.IO;
	using System.Linq;
	using Windows.ApplicationModel;
	using Windows.ApplicationModel.Activation;
	using Windows.Foundation;
	using Windows.Foundation.Collections;
	using Windows.UI.Xaml;
	using Windows.UI.Xaml.Controls;
	using Windows.UI.Xaml.Controls.Primitives;
	using Windows.UI.Xaml.Data;
	using Windows.UI.Xaml.Input;
	using Windows.UI.Xaml.Media;
	using Windows.UI.Xaml.Navigation;
	
	
	namespace ConsumerCS
	{
	    sealed partial class App : Application
	    {
	       public App()
	        {
	            this.InitializeComponent();
	            this.Suspending += OnSuspending;
	        }
	
	        protected override void OnLaunched(LaunchActivatedEventArgs args)
	        {
	            if (args.PreviousExecutionState == ApplicationExecutionState.Terminated)
	            {
	            }
	
	            var rootFrame = new Frame();
	            rootFrame.Navigate(typeof(BlankPage));
	
	            Window.Current.Content = rootFrame;
	            Window.Current.Activate();
	        }
	
	        void OnSuspending(object sender, SuspendingEventArgs e)
	        {
	        }
	    }
	}

snippet conceptual_resources_portablemetroloc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetroloc/app.xaml.cs

	using System;
	using System.Collections.Generic;
	using System.IO;
	using System.Linq;
	using Windows.ApplicationModel;
	using Windows.ApplicationModel.Activation;
	using Windows.Foundation;
	using Windows.Foundation.Collections;
	using Windows.UI.Xaml;
	using Windows.UI.Xaml.Controls;
	using Windows.UI.Xaml.Controls.Primitives;
	using Windows.UI.Xaml.Data;
	using Windows.UI.Xaml.Input;
	using Windows.UI.Xaml.Media;
	using Windows.UI.Xaml.Navigation;
	
	
	namespace LocConsumerCS
	{
	    sealed partial class App : Application
	    {
	       public App()
	        {
	            this.InitializeComponent();
	            this.Suspending += OnSuspending;
	        }
	
	        protected override void OnLaunched(LaunchActivatedEventArgs args)
	        {
	            if (args.PreviousExecutionState == ApplicationExecutionState.Terminated)
	            {
	            }
	
	            var rootFrame = new Frame();
	            rootFrame.Navigate(typeof(BlankPage));
	
	            Window.Current.Content = rootFrame;
	            Window.Current.Activate();
	        }
	
	        void OnSuspending(object sender, SuspendingEventArgs e)
	        {
	        }
	    }
	}

snippet stringbuilder_ensurecapacity

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringbuilder_ensurecapacity/cap.cs

	using System;
	using System.Text;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    StringBuilder sb1 = new StringBuilder("abc");
	    StringBuilder sb2 = new StringBuilder("abc", 16);
	
	    Console.WriteLine();
	    Console.WriteLine("a1) sb1.Length = {0}, sb1.Capacity = {1}", sb1.Length, sb1.Capacity);
	    Console.WriteLine("a2) sb2.Length = {0}, sb2.Capacity = {1}", sb2.Length, sb2.Capacity);
	    Console.WriteLine("a3) sb1.ToString() = \"{0}\", sb2.ToString() = \"{1}\"", 
	                           sb1.ToString(),       sb2.ToString());
	    Console.WriteLine("a4) sb1 equals sb2: {0}", sb1.Equals(sb2));
	
	    Console.WriteLine();
	    Console.WriteLine("Ensure sb1 has a capacity of at least 50 characters.");
	    sb1.EnsureCapacity(50);
	
	    Console.WriteLine();
	    Console.WriteLine("b1) sb1.Length = {0}, sb1.Capacity = {1}", sb1.Length, sb1.Capacity);
	    Console.WriteLine("b2) sb2.Length = {0}, sb2.Capacity = {1}", sb2.Length, sb2.Capacity);
	    Console.WriteLine("b3) sb1.ToString() = \"{0}\", sb2.ToString() = \"{1}\"", 
	                           sb1.ToString(),       sb2.ToString());
	    Console.WriteLine("b4) sb1 equals sb2: {0}", sb1.Equals(sb2));
	
	    Console.WriteLine();
	    Console.WriteLine("Set the length of sb1 to zero.");
	    Console.WriteLine("Set the capacity of sb2 to 51 characters.");
	    sb1.Length = 0;
	    sb2.Capacity = 51;
	
	    Console.WriteLine();
	    Console.WriteLine("c1) sb1.Length = {0}, sb1.Capacity = {1}", sb1.Length, sb1.Capacity);
	    Console.WriteLine("c2) sb2.Length = {0}, sb2.Capacity = {1}", sb2.Length, sb2.Capacity);
	    Console.WriteLine("c3) sb1.ToString() = \"{0}\", sb2.ToString() = \"{1}\"", 
	                           sb1.ToString(),       sb2.ToString());
	    Console.WriteLine("c4) sb1 equals sb2: {0}", sb1.Equals(sb2));
	    }
	}
	/*
	The example displays the following output:
	
	a1) sb1.Length = 3, sb1.Capacity = 16
	a2) sb2.Length = 3, sb2.Capacity = 16
	a3) sb1.ToString() = "abc", sb2.ToString() = "abc"
	a4) sb1 equals sb2: True
	
	Ensure sb1 has a capacity of at least 50 characters.
	
	b1) sb1.Length = 3, sb1.Capacity = 50
	b2) sb2.Length = 3, sb2.Capacity = 16
	b3) sb1.ToString() = "abc", sb2.ToString() = "abc"
	b4) sb1 equals sb2: False
	
	Set the length of sb1 to zero.
	Set the capacity of sb2 to 51 characters.
	
	c1) sb1.Length = 0, sb1.Capacity = 50
	c2) sb2.Length = 3, sb2.Capacity = 51
	c3) sb1.ToString() = "", sb2.ToString() = "abc"
	c4) sb1 equals sb2: False
	*/
snippet tracesourceexample2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/tracesourceexample2/program.cs

	using System;
	using System.Diagnostics;
	using System.Threading;
	
	namespace TraceSourceApp
	{
	    class Program
	    {
	        private static TraceSource mySource =
	            new TraceSource("TraceSourceApp");
	        static void Main(string[] args)
	        {
	            mySource.Switch = new SourceSwitch("sourceSwitch", "Error");
	            mySource.Listeners.Remove("Default");
	            TextWriterTraceListener textListener =
	                new TextWriterTraceListener("myListener.log");
	            ConsoleTraceListener console =
	                new ConsoleTraceListener(false);
	            console.Filter =
	                new EventTypeFilter(SourceLevels.Information);
	            console.Name = "console";
	            textListener.Filter =
	                new EventTypeFilter(SourceLevels.Error);
	            mySource.Listeners.Add(console);
	            mySource.Listeners.Add(textListener);
	            Activity1();
	
	            mySource.Switch.Level = SourceLevels.All;
	
	            mySource.Listeners["console"].Filter =
	                new EventTypeFilter(SourceLevels.Critical);
	            Activity2();
	
	            mySource.Listeners["console"].Filter =
	                new EventTypeFilter(SourceLevels.Information);
	            Activity3();
	            mySource.Close();
	            return;
	        }
	        static void Activity1()
	        {
	            mySource.TraceEvent(TraceEventType.Error, 1,
	                "Error message.");
	            mySource.TraceEvent(TraceEventType.Warning, 2,
	                "Warning message.");
	        }
	        static void Activity2()
	        {
	            mySource.TraceEvent(TraceEventType.Critical, 3,
	                "Critical message.");
	            mySource.TraceInformation("Informational message.");
	        }
	        static void Activity3()
	        {
	            mySource.TraceEvent(TraceEventType.Error, 4,
	                "Error message.");
	            mySource.TraceInformation("Informational message.");
	        }
	    }
	}
	
snippet type_getmethod5

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod5/type_getmethod5.cs

	
	using System;
	using System.Reflection;
	
	class Program
	{
	
	    public void MethodA(int i, int j) { }
	
	    public void MethodA(int[] i) { }
	
	    public unsafe void MethodA(int* i) { }
	
	
	    public void MethodA(ref int r) {}
	
	    public void MethodA(int i, out int o) { o = 100; }
	
	
	  static void Main(string[] args)
	  {
	    MethodInfo mInfo;
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        BindingFlags.Public | BindingFlags.Instance,
	        null,
	        new Type[] { typeof(int), typeof(int) },
	        null);
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        BindingFlags.Public | BindingFlags.Instance,
	        null,
	        new Type[] { typeof(int[]) },
	        null);
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        BindingFlags.Public | BindingFlags.Instance,
	        null,
	        new Type[] { typeof(int).MakePointerType() },
	        null);
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        BindingFlags.Public | BindingFlags.Instance,
	        null,
	        new Type[] { typeof(int).MakeByRefType() },
	        null);
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        BindingFlags.Public | BindingFlags.Instance,
	        null,
	        new Type[] { typeof(int), typeof(int).MakeByRefType() },
	        null);
	    Console.WriteLine("Found method: {0}", mInfo);
	
	  }
	}
	
	

snippet assemblyresolve

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyResolve/assemblyresolve.cs

	using System;
	using System.Reflection;
	
	public class MyType
	{
	    public MyType()
	    {
	        Console.WriteLine();
	        Console.WriteLine("MyType instantiated!");
	    }
	}
	
	class Test
	{
	    public static void Main()
	    {
	        AppDomain currentDomain = AppDomain.CurrentDomain;
	
	        InstantiateMyTypeFail(currentDomain);
	
	        currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);
	
	        InstantiateMyTypeFail(currentDomain);
	
	        InstantiateMyTypeSucceed(currentDomain);
	    }
	
	    private static void InstantiateMyTypeFail(AppDomain domain)
	    {
	        try
	        {
	            domain.CreateInstance("Assembly text name, Version, Culture, PublicKeyToken", "MyType");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine();
	            Console.WriteLine(e.Message);
	        }
	    }
	
	    private static void InstantiateMyTypeSucceed(AppDomain domain)
	    {
	        try
	        {
	            string asmname = Assembly.GetCallingAssembly().FullName;
	            domain.CreateInstance(asmname, "MyType");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine();
	            Console.WriteLine(e.Message);
	        }
	    }
	
	    private static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args)
	    {
	        Console.WriteLine("Resolving...");
	        return typeof(MyType).Assembly;
	    }
	}

snippet conceptual_encoding

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_encoding/exceptionascii.cs

	using System;
	using System.Text;
	
	public class Example
	{
	   public static void Main()
	   {
	      Encoding enc = Encoding.GetEncoding("us-ascii", 
	                                          new EncoderExceptionFallback(), 
	                                          new DecoderExceptionFallback());
	      
	      string str1 = "\u24C8 \u2075 \u221E";
	      Console.WriteLine(str1);
	      foreach (var ch in str1)
	         Console.Write("{0} ", Convert.ToUInt16(ch).ToString("X4"));
	
	      Console.WriteLine("\n");
	
	      byte[] bytes = {};
	      try {
	         bytes = enc.GetBytes(str1);
	         Console.Write("Encoded bytes: ");
	         foreach (var byt in bytes)
	            Console.Write("{0:X2} ", byt);
	
	         Console.WriteLine();
	      }
	      catch (EncoderFallbackException e) {
	         Console.Write("Exception: ");
	         if (e.IsUnknownSurrogate())
	            Console.WriteLine("Unable to encode surrogate pair 0x{0:X4} 0x{1:X3} at index {2}.", 
	                              Convert.ToUInt16(e.CharUnknownHigh), 
	                              Convert.ToUInt16(e.CharUnknownLow), 
	                              e.Index);
	         else
	            Console.WriteLine("Unable to encode 0x{0:X4} at index {1}.", 
	                              Convert.ToUInt16(e.CharUnknown), 
	                              e.Index);
	         return;
	      }
	      Console.WriteLine();
	
	      try {
	         string str2 = enc.GetString(bytes);
	         Console.WriteLine("Round-trip: {0}", str1.Equals(str2));
	         if (! str1.Equals(str2)) {
	            Console.WriteLine(str2);
	            foreach (var ch in str2)
	               Console.Write("{0} ", Convert.ToUInt16(ch).ToString("X4"));
	
	            Console.WriteLine();
	         } 
	      }
	      catch (DecoderFallbackException e) {
	         Console.Write("Unable to decode byte(s) ");
	         foreach (byte unknown in e.BytesUnknown)
	            Console.Write("0x{0:X2} ");
	
	         Console.WriteLine("at index {0}", e.Index);
	      }
	   }
	}

snippet conceptual_resources_resx

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_resx/create1.cs

	using System;
	using System.Drawing;
	using System.Resources;
	
	[Serializable()] public class Automobile
	{
	   private string carMake;
	   private string carModel;
	   private int carYear;
	   private int carDoors;
	   private int carCylinders;
	   
	   public Automobile(string make, string model, int year) :  
	                     this(make, model, year, 0, 0)   
	   { }
	   
	   public Automobile(string make, string model, int year, 
	                     int doors, int cylinders)
	   {                     
	      this.carMake = make;
	      this.carModel = model;
	      this.carYear = year;
	      this.carDoors = doors;
	      this.carCylinders = cylinders;
	   }
	
	   public string Make {
	      get { return this.carMake; }
	   }       
	   
	   public string Model {
	      get {return this.carModel; }
	   }       
	   
	   public int Year {
	      get { return this.carYear; }
	   }       
	   
	   public int Doors {
	      get { return this.carDoors; }
	   }       
	   
	   public int Cylinders {
	      get { return this.carCylinders; }
	   }       
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      Automobile car1 = new Automobile("Ford", "Model N", 1906, 0, 4);
	      Automobile car2 = new Automobile("Ford", "Model T", 1909, 2, 4);
	      using (ResXResourceWriter resx = new ResXResourceWriter(@".\CarResources.resx"))
	      {
	         resx.AddResource("Title", "Classic American Cars");
	         resx.AddResource("HeaderString1", "Make");
	         resx.AddResource("HeaderString2", "Model");
	         resx.AddResource("HeaderString3", "Year");
	         resx.AddResource("HeaderString4", "Doors");
	         resx.AddResource("HeaderString5", "Cylinders");
	         resx.AddResource("Information", SystemIcons.Information); 
	         resx.AddResource("EarlyAuto1", car1);  
	         resx.AddResource("EarlyAuto2", car2);  
	      }
	   }
	}

snippet cryptowalkthru/properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CryptoWalkThru/Properties/Resources.Designer.cs

	
	namespace CryptoWalkThru.Properties
	{
	
	
	    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
	    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
	    internal class Resources
	    {
	
	        private static global::System.Resources.ResourceManager resourceMan;
	
	        private static global::System.Globalization.CultureInfo resourceCulture;
	
	        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
	        internal Resources()
	        {
	        }
	
	        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
	        internal static global::System.Resources.ResourceManager ResourceManager
	        {
	            get
	            {
	                if ((resourceMan == null))
	                {
	                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CryptoWalkThru.Properties.Resources", typeof(Resources).Assembly);
	                    resourceMan = temp;
	                }
	                return resourceMan;
	            }
	        }
	
	        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
	        internal static global::System.Globalization.CultureInfo Culture
	        {
	            get
	            {
	                return resourceCulture;
	            }
	            set
	            {
	                resourceCulture = value;
	            }
	        }
	    }
	}

snippet modulebuilder_definepinvokemethod1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_DefinePInvokeMethod1/modulebuilder_definepinvokemethod1.cs

	/*
	   The following example demonstrates that DefinePInvokeMethod doesn't work (that is,
	   you don't get the return value) unless you add PreserveSig.
	
	*/
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Runtime.InteropServices;
	
	namespace PInvoke
	{
	   public class Example
	   {
	      const int MB_RETRYCANCEL = 5;
	
	      static void Main()
	      {
	         AssemblyName myAssemblyName = new AssemblyName("TempAssembly");
	
	         AssemblyBuilder myAssemblyBuilder = 
	            AppDomain.CurrentDomain.DefineDynamicAssembly(
	                        myAssemblyName, AssemblyBuilderAccess.Run);
	
	         ModuleBuilder myModuleBuilder = 
	            myAssemblyBuilder.DefineDynamicModule("TempModule");
	
	         Type[] paramTypes = { typeof(int), typeof(string), typeof(string), typeof(int) };
	
	         MethodBuilder piMethodBuilder = myModuleBuilder.DefinePInvokeMethod(
	            "MessageBoxA",
	            "user32.dll",
	            MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.PinvokeImpl,
	            CallingConventions.Standard,
	            typeof(int),
	            paramTypes,
	            CallingConvention.Winapi,
	            CharSet.Ansi);
	         
	         piMethodBuilder.SetImplementationFlags(
	            piMethodBuilder.GetMethodImplementationFlags() | MethodImplAttributes.PreserveSig);
	
	         myModuleBuilder.CreateGlobalFunctions();
	
	         Object[] arguments = { 0, "Hello World", "Title", MB_RETRYCANCEL };
	
	         MethodInfo pinvokeMethod = myModuleBuilder.GetMethod("MessageBoxA");
	         Console.WriteLine("Testing module-level PInvoke method created with DefinePInvokeMethod...");
	         Console.WriteLine("Message box returned: {0}", 
	            pinvokeMethod.Invoke(null, arguments));
	      }
	   }
	}
	
	/* This code example produces input similar to the following:
	
	Testing module-level PInvoke method created with DefinePInvokeMethod...
	Message box returned: 4
	 */

snippet conceptual_resources_portablemetroloc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetroloc/blankpage.xaml.cs

	using System;
	using System.Collections.Generic;
	using Windows.Globalization;
	using Windows.UI.Xaml;
	using Windows.UI.Xaml.Controls;
	using Windows.UI.Xaml.Controls.Primitives;
	using Windows.UI.Xaml.Data;
	using Windows.UI.Xaml.Input;
	using Windows.UI.Xaml.Media;
	using Windows.UI.Xaml.Navigation;
	using MyCompany.Employees;
	
	namespace LocConsumerCS
	{
	    public sealed partial class BlankPage : Page
	    {
	        public BlankPage()
	        {
	            this.InitializeComponent();
	
	        }
	
	        protected override void OnNavigatedTo(NavigationEventArgs e)
	        {
	            Example.Demo(outputBlock);
	        }
	    }
	
	    public class Example
	    {
	        public static void Demo(TextBlock outputBlock)
	        {
	            ApplicationLanguages.PrimaryLanguageOverride = "fr-FR";
	
	            var employees = InitializeData();
	            outputBlock.FontFamily = new FontFamily("Courier New");
	            string title = UILibrary.GetTitle();
	            outputBlock.Text += title + Environment.NewLine + Environment.NewLine; 
	
	            string[] fields = UILibrary.GetFieldNames();
	            int[] lengths = UILibrary.GetFieldLengths();
	            string fmtString = String.Empty;
	            for (int ctr = 0; ctr < fields.Length; ctr++)
	                fmtString += String.Format("{{{0},-{1}{2}{3}   ", ctr, lengths[ctr], ctr >= 2 ? ":d" : "", "}");
	
	            outputBlock.Text += String.Format(fmtString, fields) + Environment.NewLine + Environment.NewLine;
	
	            foreach (var e in employees)
	                outputBlock.Text += String.Format(fmtString, e.Item1, e.Item2, e.Item3, e.Item4) + Environment.NewLine;
	        }
	
	        private static List<Tuple<String, String, DateTime, DateTime>> InitializeData()
	        {
	            List<Tuple<String, String, DateTime, DateTime>> employees = new List<Tuple<String, String, DateTime, DateTime>>();
	            var t1 = Tuple.Create("John", "16302", new DateTime(1954, 8, 18), new DateTime(2006, 9, 8));
	            employees.Add(t1);
	            t1 = Tuple.Create("Alice", "19745", new DateTime(1995, 5, 10), new DateTime(2012, 10, 17));
	            employees.Add(t1);
	            return employees;
	        }
	    }
	}

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/numbers1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      DateTime dateForMonth = new DateTime(2013, 1, 1);
	      double[] temperatures = {  3.4, 3.5, 7.6, 10.4, 14.5, 17.2, 
	                                19.9, 18.2, 15.9, 11.3, 6.9, 5.3 };
	
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("fr-FR");
	      Console.WriteLine("Current Culture: {0}", CultureInfo.CurrentCulture.DisplayName);
	      string fmtString = "{0,-" + GetLongestMonthNameLength().ToString() + ":MMMM}     {1,4}"; 
	      for (int ctr = 0; ctr < temperatures.Length; ctr++)
	         Console.WriteLine(fmtString, 
	                           dateForMonth.AddMonths(ctr), 
	                           temperatures[ctr]);
	
	      Console.WriteLine();
	      
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
	      Console.WriteLine("Current Culture: {0}", CultureInfo.CurrentCulture.DisplayName);
	      fmtString = "{0,-" + GetLongestMonthNameLength().ToString() + ":MMMM}     {1,4}"; 
	      for (int ctr = 0; ctr < temperatures.Length; ctr++)
	         Console.WriteLine(fmtString, 
	                           dateForMonth.AddMonths(ctr), 
	                           temperatures[ctr]);
	   }
	
	   private static int GetLongestMonthNameLength()
	   {
	      int length = 0; 
	      foreach (var nameOfMonth in DateTimeFormatInfo.CurrentInfo.MonthNames)
	         if (nameOfMonth.Length > length) length = nameOfMonth.Length;
	
	      return length;
	   }
	}

snippet typebuilder_properties1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Properties1/typebuilder_properties.cs

	
	/*
	   The following program demonstrates DefineTypeInitializer and 'GetConstructors' methods and 
	   the 'FullName' property of 'TypeBuilder' class. It builds an assembly by defining 'HelloWorld'
	   type. It also defines a constructor for 'HelloWorld' type. Then it displays the
	   full name of type and its constructors to the console.
	*/
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public class MyApplication
	{
	   public static void Main()
	   {
	      TypeBuilder helloWorldClass = CreateCallee(Thread.GetDomain());
	      Console.WriteLine("Full Name : " + helloWorldClass.FullName);
	      Console.WriteLine("Constructors :");
	      ConstructorInfo[] info =
	         helloWorldClass.GetConstructors(BindingFlags.Public|BindingFlags.Instance);
	      for(int index=0; index < info.Length; index++)
	         Console.WriteLine(info[index].ToString());
	   }
	
	   private static TypeBuilder CreateCallee(AppDomain myDomain)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedAssembly";
	
	      AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(myAssemblyName,
	         AssemblyBuilderAccess.Run);
	      ModuleBuilder myModule = myAssembly.DefineDynamicModule("EmittedModule");
	
	      TypeBuilder helloWorldClass = myModule.DefineType("HelloWorld", TypeAttributes.Public);
	      FieldBuilder greetingField = helloWorldClass.DefineField("Greeting", typeof(String),
	         FieldAttributes.Private);
	
	      ConstructorBuilder constructor = helloWorldClass.DefineTypeInitializer();
	
	      ILGenerator constructorIL = constructor.GetILGenerator();
	      constructorIL.Emit(OpCodes.Ldarg_0);
	      ConstructorInfo superConstructor = typeof(Object).GetConstructor(new Type[0]);
	      constructorIL.Emit(OpCodes.Call, superConstructor);
	      constructorIL.Emit(OpCodes.Ldarg_0);
	      constructorIL.Emit(OpCodes.Ldarg_1);
	      constructorIL.Emit(OpCodes.Stfld, greetingField);
	      constructorIL.Emit(OpCodes.Ret);
	
	      helloWorldClass.CreateType();
	      return(helloWorldClass);
	   }
	}
snippet x509chaintest

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/x509chaintest/x509chaintest.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	using System.IO;
	
	class TestX509Chain
	{
		static void Main(string[] args)
		{
			X509Store store = new X509Store("MY", StoreLocation.CurrentUser);
			store.Open(OpenFlags.OpenExistingOnly | OpenFlags.ReadWrite);
	
			Console.WriteLine ("Store Information");
			Console.WriteLine ("Number of certificates in the store: {0}", store.Certificates.Count);
			Console.WriteLine ("Store location: {0}", store.Location);
			Console.WriteLine ("Store name: {0} {1}", store.Name, Environment.NewLine);
		
			X509Certificate2Collection fcollection = (X509Certificate2Collection)store.Certificates;
			X509Certificate2Collection collection = X509Certificate2UI.SelectFromCollection(fcollection, "Select an X509 Certificate", "Choose a certificate to examine.", X509SelectionFlag.SingleSelection);
			X509Certificate2 certificate = collection[0];
			X509Certificate2UI.DisplayCertificate(certificate);
	
			X509Chain ch = new X509Chain();
			ch.ChainPolicy.RevocationMode = X509RevocationMode.Online;
			ch.Build (certificate);
			Console.WriteLine ("Chain Information");
			Console.WriteLine ("Chain revocation flag: {0}", ch.ChainPolicy.RevocationFlag);
			Console.WriteLine ("Chain revocation mode: {0}", ch.ChainPolicy.RevocationMode);
			Console.WriteLine ("Chain verification flag: {0}", ch.ChainPolicy.VerificationFlags);
			Console.WriteLine ("Chain verification time: {0}", ch.ChainPolicy.VerificationTime);
			Console.WriteLine ("Chain status length: {0}", ch.ChainStatus.Length);
			Console.WriteLine ("Chain application policy count: {0}", ch.ChainPolicy.ApplicationPolicy.Count);
			Console.WriteLine ("Chain certificate policy count: {0} {1}", ch.ChainPolicy.CertificatePolicy.Count, Environment.NewLine);
	
			Console.WriteLine ("Chain Element Information");
			Console.WriteLine ("Number of chain elements: {0}", ch.ChainElements.Count);
			Console.WriteLine ("Chain elements synchronized? {0} {1}", ch.ChainElements.IsSynchronized, Environment.NewLine);
		
			foreach (X509ChainElement element in ch.ChainElements)
			{
				Console.WriteLine ("Element issuer name: {0}", element.Certificate.Issuer);
				Console.WriteLine ("Element certificate valid until: {0}", element.Certificate.NotAfter);
				Console.WriteLine ("Element certificate is valid: {0}", element.Certificate.Verify ());
				Console.WriteLine ("Element error status length: {0}", element.ChainElementStatus.Length);
				Console.WriteLine ("Element information: {0}", element.Information);
				Console.WriteLine ("Number of element extensions: {0}{1}", element.Certificate.Extensions.Count, Environment.NewLine);
	
				if (ch.ChainStatus.Length > 1)
				{
					for (int index = 0; index < element.ChainElementStatus.Length; index++)
					{
						Console.WriteLine (element.ChainElementStatus[index].Status);
						Console.WriteLine (element.ChainElementStatus[index].StatusInformation);
					}
				}
			}
			store.Close();
		}
	}
snippet stringinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StringInfo/StringInfo.cs

	using System;
	using System.Text;
	using System.Globalization;
	
	public sealed class App {
	   static void Main() {
	      String s = "a\u0304\u0308bc\u0327";
	
	      EnumTextElements(s);
	
	      EnumTextElementIndexes(s);
	   }
	
	   static void EnumTextElements(String s) {
	      StringBuilder sb = new StringBuilder();
	
	      TextElementEnumerator charEnum = StringInfo.GetTextElementEnumerator(s);
	      while (charEnum.MoveNext()) {
	         sb.AppendFormat(
	           "Character at index {0} is '{1}'{2}",
	           charEnum.ElementIndex, charEnum.GetTextElement(),
	           Environment.NewLine);
	      }
	
	      Console.WriteLine("Result of GetTextElementEnumerator:");
	      Console.WriteLine(sb);
	   }
	
	   static void EnumTextElementIndexes(String s) {
	      StringBuilder sb = new StringBuilder();
	
	      Int32[] textElemIndex = StringInfo.ParseCombiningCharacters(s);
	
	      for (Int32 i = 0; i < textElemIndex.Length; i++) {
	         sb.AppendFormat(
	            "Character {0} starts at index {1}{2}",
	            i, textElemIndex[i], Environment.NewLine);
	      }
	
	      Console.WriteLine("Result of ParseCombiningCharacters:");
	      Console.WriteLine(sb);
	   }
	}
	
snippet codeattacheventstatementexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeAttachEventStatementExample/codeattacheventstatementexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeAttachEventStatementExample
	    {
	    public CodeAttachEventStatementExample()
	    {
	        CodeTypeDeclaration type1 = new CodeTypeDeclaration("AttachEventTest");
	
	        CodeMemberEvent event1 = new CodeMemberEvent();
	        event1.Name = "TestEvent";
	        event1.Type = new CodeTypeReference("System.EventHandler");
	        type1.Members.Add( event1 );
	
	        CodeMemberMethod method1 = new CodeMemberMethod();
	        method1.Name = "TestMethod";
	        method1.Parameters.Add( new CodeParameterDeclarationExpression("System.Object", "sender") );
	        method1.Parameters.Add( new CodeParameterDeclarationExpression("System.EventArgs", "e") );        
	        type1.Members.Add( method1 );
	
	        CodeConstructor constructor1 = new CodeConstructor();
	        constructor1.Attributes = MemberAttributes.Public;            
	
	        CodeDelegateCreateExpression createDelegate1 = new CodeDelegateCreateExpression( 
	        new CodeTypeReference( "System.EventHandler" ), new CodeThisReferenceExpression(), "TestMethod" );                                
	        CodeAttachEventStatement attachStatement1 = new CodeAttachEventStatement( new CodeThisReferenceExpression(), "TestEvent", createDelegate1 );
	
	
	
	        constructor1.Statements.Add( attachStatement1 );    
	        type1.Members.Add( constructor1 );
	
	            
	    }
	    }
	}
snippet eventlogentry_item

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Item/eventlogentry_item.cs

	
	
	/*
	   The following example demonstrates 'Item','Count' properties of 
	   EventLogEntryCollection class.A new Source for eventlog 'MyNewLog' is created.
	   The program checks if a Event source exists.If the source already exists, it gets 
	   the Log name associated with it otherwise, creates a new event source. 
	   A new entry is created for 'MyNewLog'.Entries  of 'MyNewLog' are obtained and 
	   the count and the messages are displayed.
	   
	 */
	
	using System;
	using System.Collections;
	using System.Diagnostics;
	
	class EventLogEntryCollection_Item
	{
	    public static void Main()
	    {
	        try
	        {
	            string myLogName = "MyNewLog";
	            if (!EventLog.SourceExists("MySource"))
	            {
	                EventLog.CreateEventSource("MySource", myLogName);
	                Console.WriteLine("Creating EventSource");
	                Console.WriteLine("Exiting, execute the application a second time to use the source.");
	                return;
	            }
	            else
	                myLogName = EventLog.LogNameFromSourceName("MySource", ".");
	
	            EventLog myEventLog2 = new EventLog();
	            myEventLog2.Source = "MySource";
	            myEventLog2.WriteEntry("Successfully created a new Entry in the Log. ");
	            EventLog myEventLog1 = new EventLog();
	            myEventLog1.Log = myLogName;
	            EventLogEntryCollection myEventLogEntryCollection = myEventLog1.Entries;
	            Console.WriteLine("The number of entries in 'MyNewLog' = " +
	                                    myEventLogEntryCollection.Count);
	            for (int i = 0; i < myEventLogEntryCollection.Count; i++)
	            {
	                Console.WriteLine("The Message of the EventLog is :" +
	                                        myEventLogEntryCollection[i].Message);
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception Caught!" + e.Message);
	        }
	    }
	} 
snippet list`1_asreadonly

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>(4);
	
	        Console.WriteLine("\nCapacity: {0}", dinosaurs.Capacity);
	
	        dinosaurs.Add("Tyrannosaurus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("Mamenchisaurus");
	        dinosaurs.Add("Deinonychus");
	
	        Console.WriteLine();
	        foreach(string s in dinosaurs)
	        {
	            Console.WriteLine(s);
	        }
	
	        Console.WriteLine("\nIList<string> roDinosaurs = dinosaurs.AsReadOnly()");
	        IList<string> roDinosaurs = dinosaurs.AsReadOnly();
	
	        Console.WriteLine("\nElements in the read-only IList:");
	        foreach(string dinosaur in roDinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\ndinosaurs[2] = \"Coelophysis\"");
	        dinosaurs[2] = "Coelophysis";
	
	        Console.WriteLine("\nElements in the read-only IList:");
	        foreach(string dinosaur in roDinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Capacity: 4
	
	Tyrannosaurus
	Amargasaurus
	Mamenchisaurus
	Deinonychus
	
	IList<string> roDinosaurs = dinosaurs.AsReadOnly()
	
	Elements in the read-only IList:
	Tyrannosaurus
	Amargasaurus
	Mamenchisaurus
	Deinonychus
	
	dinosaurs[2] = "Coelophysis"
	
	Elements in the read-only IList:
	Tyrannosaurus
	Amargasaurus
	Coelophysis
	Deinonychus
	 */
	
	

snippet directoryinfogetfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/directoryinfogetfiles/directoryinfogetfiles2.cs

	using System;
	using System.IO;
	
	namespace ConsoleApplication1
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            DirectoryInfo di = new DirectoryInfo(@"C:\Users\tomfitz\Documents\ExampleDir");
	            Console.WriteLine("No search pattern returns:");
	            foreach (var fi in di.GetFiles())
	            {
	                Console.WriteLine(fi.Name);
	            }
	
	            Console.WriteLine();
	
	            Console.WriteLine("Search pattern *2* returns:");
	            foreach (var fi in di.GetFiles("*2*"))
	            {
	                Console.WriteLine(fi.Name);
	            }
	
	            Console.WriteLine();
	
	            Console.WriteLine("Search pattern test?.txt returns:");
	            foreach (var fi in di.GetFiles("test?.txt"))
	            {
	                Console.WriteLine(fi.Name);
	            }
	
	            Console.WriteLine();
	
	            Console.WriteLine("Search pattern AllDirectories returns:");
	            foreach (var fi in di.GetFiles("*", SearchOption.AllDirectories))
	            {
	                Console.WriteLine(fi.Name);
	            }
	        }
	    }
	}
	/* 
	This code produces output similar to the following:
	
	No search pattern returns:
	log1.txt
	log2.txt
	test1.txt
	test2.txt
	test3.txt
	
	Search pattern *2* returns:
	log2.txt
	test2.txt
	
	Search pattern test?.txt returns:
	test1.txt
	test2.txt
	test3.txt
	
	Search pattern AllDirectories returns:
	log1.txt
	log2.txt
	test1.txt
	test2.txt
	test3.txt
	SubFile.txt
	Press any key to continue . . .
	
	*/
snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/indicator3.cs

	using System;
	using System.Text;
	
	[assembly:CLSCompliant(true)]
	
	public class CharacterUtilities
	{
	   [CLSCompliant(false)] public static ushort ToUTF16(String s)
	   {
	      s = s.Normalize(NormalizationForm.FormC);
	      return Convert.ToUInt16(s[0]);
	   }
	
	   [CLSCompliant(false)] public static ushort ToUTF16(Char ch)
	   {
	      return Convert.ToUInt16(ch); 
	   }
	      
	   public static int ToUTF16CodeUnit(String s)
	   {
	      s = s.Normalize(NormalizationForm.FormC);
	      return (int) Convert.ToUInt16(s[0]);
	   }
	
	   public static int ToUTF16CodeUnit(Char ch)
	   {
	      return Convert.ToInt32(ch);
	   }
	
	   public bool HasMultipleRepresentations(String s)
	   {
	      String s1 = s.Normalize(NormalizationForm.FormC);
	      return s.Equals(s1);   
	   }
	
	   public int GetUnicodeCodePoint(Char ch)
	   {
	      if (Char.IsSurrogate(ch))
	         throw new ArgumentException("ch cannot be a high or low surrogate.");
	
	      return Char.ConvertToUtf32(ch.ToString(), 0);   
	   }
	   
	   public int GetUnicodeCodePoint(Char[] chars)
	   {
	      if (chars.Length > 2)
	         throw new ArgumentException("The array has too many characters.");
	
	      if (chars.Length == 2) {
	         if (! Char.IsSurrogatePair(chars[0], chars[1]))
	            throw new ArgumentException("The array must contain a low and a high surrogate.");
	         else
	            return Char.ConvertToUtf32(chars[0], chars[1]);
	      }
	      else {
	         return Char.ConvertToUtf32(chars.ToString(), 0);
	      } 
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	
	
	   }
	}

snippet codedom_class_sample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDOM_Class_Sample/SampleCode.cs

	
	namespace CodeDOMSample
	{
	    using System;
	    
	    
	    public sealed class CodeDOMCreatedClass
	    {
	        
	        private double widthValue;
	        
	        private double heightValue;
	        
	        public CodeDOMCreatedClass(double width, double height)
	        {
	            this.widthValue = width;
	            this.heightValue = height;
	        }
	        
	        public double Width
	        {
	            get
	            {
	                return this.widthValue;
	            }
	        }
	        
	        public double Height
	        {
	            get
	            {
	                return this.heightValue;
	            }
	        }
	        
	        public double Area
	        {
	            get
	            {
	                return (this.widthValue * this.heightValue);
	            }
	        }
	        
	        public override string ToString()
	        {
	            return string.Format(
	                "The object:\r\n width = {0},\r\n height = {1},\r\n area = {2}", 
	                this.Width, this.Height, this.Area);
	        }
	        
	        public static void Main()
	        {
	            CodeDOMCreatedClass testClass = new CodeDOMCreatedClass(5.3, 6.9);
	            System.Console.WriteLine(testClass.ToString());
	        }
	    }
	}
snippet conceptual_regularexpressions_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_bestpractices/static1.cs

	using System.Windows.Forms;
	using System.Drawing;
	using System;
	using System.Text.RegularExpressions;
	
	public class RegexLib
	{
	   public static bool IsValidCurrency(string currencyValue)
	   {
	      string pattern = @"\p{Sc}+\s*\d+";
	      Regex currencyRegex = new Regex(pattern);
	      return currencyRegex.IsMatch(currencyValue);
	   }
	}
	
	public class CurrencyForm : Form
	{ 
	   Button OKButton;
	   TextBox sourceCurrency;
	   Label status;
	   
	   public CurrencyForm()
	   {
	      sourceCurrency = new TextBox();
	      sourceCurrency.Location = new Point(25, 50);
	      sourceCurrency.Size = new Size(100, 25);
	      sourceCurrency.Text = String.Empty;
	      sourceCurrency.TextChanged += new System.EventHandler(this.sourceCurrency_TextChanged);
	      this.Controls.Add(sourceCurrency);
	      
	      OKButton = new Button();
	      OKButton.Location = new Point(100, 150);
	      OKButton.Size = new Size(75, 25);
	      OKButton.Text = "OK";
	      OKButton.Click += new System.EventHandler(this.OKButton_Click);
	      this.Controls.Add(OKButton);
	      this.AcceptButton = OKButton;
	
	      status = new Label();
	      status.Location = new Point(0, this.Height - 55);
	      status.Size = new Size(this.Width, 25);
	      status.BorderStyle = BorderStyle.Fixed3D;
	      status.Anchor = AnchorStyles.Bottom;
	      this.Controls.Add(status);
	   }
	   
	   public static void Main()
	   {
	      Form frm = new CurrencyForm();
	      Application.Run(frm);
	   }
	
	   private void PerformConversion() {}
	   
	   public void sourceCurrency_TextChanged(object sender, EventArgs e)
	   { 
	      status.Text = "";           
	   }  
	   
	   public void OKButton_Click(object sender, EventArgs e) 
	   {
	      if (! String.IsNullOrEmpty(sourceCurrency.Text))
	         if (RegexLib.IsValidCurrency(sourceCurrency.Text))
	            PerformConversion();
	         else
	            status.Text = "The source currency value is invalid.";
	   }
	}

snippet stringbuilder_replace

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringbuilder_replace/replace.cs

	using System;
	using System.Text;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string str = "The quick br!wn d#g jumps #ver the lazy cat.";
	    StringBuilder sb = new StringBuilder(str);
	
	    Console.WriteLine();
	    Console.WriteLine("StringBuilder.Replace method");
	    Console.WriteLine();
	
	    Console.WriteLine("Original value:");
	    Show(sb);
	
	    Show(sb);
	    Show(sb);
	    Show(sb);
	
	    Console.WriteLine("Final value:");
	    Show(sb);
	    }
	
	    public static void Show(StringBuilder sbs)
	    {
	    string rule1 = "0----+----1----+----2----+----3----+----4---";
	    string rule2 = "01234567890123456789012345678901234567890123";
	
	    Console.WriteLine(rule1);
	    Console.WriteLine(rule2);
	    Console.WriteLine("{0}", sbs.ToString());
	    Console.WriteLine();
	    }
	}
	/*
	This example produces the following results:
	
	StringBuilder.Replace method
	
	Original value:
	0----+----1----+----2----+----3----+----4---
	01234567890123456789012345678901234567890123
	The quick br!wn d#g jumps #ver the lazy cat.
	
	0----+----1----+----2----+----3----+----4---
	01234567890123456789012345678901234567890123
	The quick br!wn d!g jumps !ver the lazy cat.
	
	0----+----1----+----2----+----3----+----4---
	01234567890123456789012345678901234567890123
	The quick brown dog jumps over the lazy cat.
	
	0----+----1----+----2----+----3----+----4---
	01234567890123456789012345678901234567890123
	The quick brown dog jumps over the lazy dog.
	
	Final value:
	0----+----1----+----2----+----3----+----4---
	01234567890123456789012345678901234567890123
	The quick brown fox jumps over the lazy dog.
	
	*/
snippet layoutkind

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/LayoutKind/layoutkind.cs

	/*
	   System.Runtime.InteropServices.LayoutKind.Sequential
	   System.Runtime.InteropServices.LayoutKind.Explicit
	   
	   The program shows a managed declaration of the PtInRect function and defines Point
	   structure with sequential layout and Rect structure with explicit layout. The PtInRect
	   checks the point lies within the rectangle or not.
	*/
	using System;
	using System.Runtime.InteropServices;
	
	namespace InteropSample
	{
	   enum Bool
	   {
	      False = 0,
	      True
	   };
	   [StructLayout(LayoutKind.Sequential)]
	   public struct Point 
	   {
	      public int x;
	      public int y;
	   }   
	
	   [StructLayout(LayoutKind.Explicit)]
	   public struct Rect 
	   {
	      [FieldOffset(0)] public int left;
	      [FieldOffset(4)] public int top;
	      [FieldOffset(8)] public int right;
	      [FieldOffset(12)] public int bottom;
	   }   
	
	   internal static class NativeMethods
	   {
	      [DllImport("user32.dll", CallingConvention=CallingConvention.StdCall)]
	      internal static extern Bool PtInRect(ref Rect r, Point p);
	   };
	
	   class TestApplication
	   {
	      public static void Main()
	      {
	         try
	         {
	            Bool bPointInRect = 0;
	            Rect myRect = new Rect();
	            myRect.left = 10;
	            myRect.right = 100;
	            myRect.top = 10;
	            myRect.bottom = 100;
	            Point myPoint = new Point();
	            myPoint.x = 50;
	            myPoint.y = 50;
	            bPointInRect = NativeMethods.PtInRect(ref myRect, myPoint);
	            if(bPointInRect == Bool.True)
	               Console.WriteLine("Point lies within the Rect");
	            else
	               Console.WriteLine("Point did not lie within the Rect");
	         }
	         catch(Exception e)
	         {
	            Console.WriteLine("Exception : " + e.Message);
	         }
	      }
	   }
	}

snippet finfo_open2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FInfo_Open2/finfo_open2.cs

	using System;
	using System.IO;
	using System.Text;
	
	class Test 
	{
		
	    public static void Main() 
	    {
	        string path = @"c:\MyTest.txt";
	        FileInfo fi = new FileInfo(path);
	
	        if (!fi.Exists) 
	        {
	            using (FileStream fs = fi.Create()) 
	            {
	                Byte[] info = new UTF8Encoding(true).GetBytes("This is some text in the file.");
	                fs.Write(info, 0, info.Length);
	            }
	        }
	
	        using (FileStream fs = fi.Open(FileMode.Open, FileAccess.Read)) 
	        {
	            byte[] b = new byte[1024];
	            UTF8Encoding temp = new UTF8Encoding(true);
	            while (fs.Read(b,0,b.Length) > 0) 
	            {
	                Console.WriteLine(temp.GetString(b));
	            }
	
	            try 
	            {
	                fs.Write(b,0,b.Length);
	            } 
	            catch (Exception e) 
	            {
	                Console.WriteLine("Writing was disallowed, as expected: {0}",
	                    e.ToString());
	            }
	        }
	    }
	}
	

snippet cryptography_rsacsp_usemachinekey

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RSACSP_UseMachineKey/example2.cs

	using System;
	using System.Security.Cryptography;
	
	public class RSAKeyStoreSample
	{
	    public static void Main()
	    {
	        RSACryptoServiceProvider.UseMachineKeyStore = true;
	        try
	        {
	            using (RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider())
	            {
	                ShowContainerInfo(RSAalg.CspKeyContainerInfo);
	                RSAalg.PersistKeyInCsp = false;
	            }
	
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = "MyKeyContainer";
	
	            using (RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams))
	            {
	                ShowContainerInfo(RSAalg.CspKeyContainerInfo);
	                RSAalg.PersistKeyInCsp = false;
	            }
	
	            cspParams.Flags |= CspProviderFlags.UseMachineKeyStore;
	
	            using (RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams))
	            {
	                ShowContainerInfo(RSAalg.CspKeyContainerInfo);
	                RSAalg.PersistKeyInCsp = false;
	            }
	        }
	        catch (CryptographicException e)
	        {
	            Console.WriteLine("Exception: {0}", e.GetType().FullName);
	            Console.WriteLine(e.Message);
	
	        }
	    }
	
	    public static void ShowContainerInfo(CspKeyContainerInfo containerInfo)
	    {
	        string keyStore;
	
	        Console.WriteLine();
	        if (containerInfo.MachineKeyStore)
	        {
	            keyStore = "Machine Store";
	        }
	        else
	        {
	            keyStore = "User Store";
	        }
	        Console.WriteLine("Key Store:     {0}", keyStore);
	        Console.WriteLine("Key Provider:  {0}", containerInfo.ProviderName);
	        Console.WriteLine("Key Container: \"{0}\"", containerInfo.KeyContainerName);
	        Console.WriteLine("Generated:     {0}", containerInfo.RandomlyGenerated);
	        Console.WriteLine("Key Nubmer:    {0}", containerInfo.KeyNumber);
	        Console.WriteLine("Removable Key: {0}", containerInfo.Removable);
	    }
	}
snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/icustomformatter1.cs

	using System;
	
	public class ByteByByteFormatter : IFormatProvider, ICustomFormatter
	{
	   public object GetFormat(Type formatType)
	   { 
	      if (formatType == typeof(ICustomFormatter))
	         return this;
	      else
	         return null;
	   }
	   
	   public string Format(string format, object arg, 
	                          IFormatProvider formatProvider)
	   {   
	      if (! formatProvider.Equals(this)) return null;
	      
	      if (! format.StartsWith("X")) return null;
	      
	      byte[] bytes;
	      string output = null;
	      
	      if (arg is Byte) 
	         bytes = BitConverter.GetBytes((Byte) arg);
	      else if (arg is Int16)
	         bytes = BitConverter.GetBytes((Int16) arg);
	      else if (arg is Int32)
	         bytes = BitConverter.GetBytes((Int32) arg);
	      else if (arg is Int64)   
	         bytes = BitConverter.GetBytes((Int64) arg);
	      else if (arg is SByte)
	         bytes = BitConverter.GetBytes((SByte) arg);
	      else if (arg is UInt16)
	         bytes = BitConverter.GetBytes((UInt16) arg);
	      else if (arg is UInt32)
	         bytes = BitConverter.GetBytes((UInt32) arg);
	      else if (arg is UInt64)
	         bytes = BitConverter.GetBytes((UInt64) arg);
	      else
	         return null;
	
	      for (int ctr = bytes.Length - 1; ctr >= 0; ctr--)
	         output += String.Format("{0:X2} ", bytes[ctr]);   
	      
	      return output.Trim();
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      long value = 3210662321; 
	      byte value1 = 214;
	      byte value2 = 19;
	      
	      Console.WriteLine(String.Format(new ByteByByteFormatter(), "{0:X}", value));
	      Console.WriteLine(String.Format(new ByteByByteFormatter(), "{0:X} And {1:X} = {2:X} ({2:000})", 
	                                      value1, value2, value1 & value2));                                
	      Console.WriteLine(String.Format(new ByteByByteFormatter(), "{0,10:N0}", value));
	   }
	}

snippet conceptual_observerdesignpattern

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_observerdesignpattern/program.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	   public static void Main()
	   {
	      BaggageHandler provider = new BaggageHandler();
	      ArrivalsMonitor observer1 = new ArrivalsMonitor("BaggageClaimMonitor1");
	      ArrivalsMonitor observer2 = new ArrivalsMonitor("SecurityExit");
	
	      provider.BaggageStatus(712, "Detroit", 3);
	      observer1.Subscribe(provider);
	      provider.BaggageStatus(712, "Kalamazoo", 3);
	      provider.BaggageStatus(400, "New York-Kennedy", 1);
	      provider.BaggageStatus(712, "Detroit", 3);
	      observer2.Subscribe(provider);
	      provider.BaggageStatus(511, "San Francisco", 2);
	      provider.BaggageStatus(712);
	      observer2.Unsubscribe();
	      provider.BaggageStatus(400);
	      provider.LastBaggageClaimed();
	   }
	}
snippet type_gettypecode

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/type_gettypecode.cs

	
	/* The following example demonstrates the  'GetTypeCode()', 'GetProperties()', 'GetTypeArray()',
	    'GetType(String,Boolean,Boolean)' methods of 'Type' class.
	    An object of 'Type' corresponding to 'System.Int32 is obtained '. Properties of 'System.Type' 
	    is retrieved into 'PropertyInfo' array and displayed. Array of 'Type' objects is created 
	    which represents the type specified by an arbitary    set of objects. When 'Type' object is 
	    attempted to create for 'sYSTem.iNT32', an exception is thrown when case-sensitive search 
	    is done.  
	 */
	using System;
	using System.Reflection;
	
	namespace TypeCodeNamespace
	{
	    class MyClass
	    {
	        static void Main(string[] args)
	        {
	            Type myType1 = Type.GetType("System.Int32");
	            TypeCode myTypeCode = Type.GetTypeCode(myType1);
	            Console.WriteLine("TypeCode is: {0}",myTypeCode);
	            PropertyInfo[] myPropertyInfo;
	            myPropertyInfo = Type.GetType("System.Type").GetProperties();
	            Console.WriteLine("Properties of System.Type are:");
	            for (int i = 0; i < myPropertyInfo.Length; i++)
	            {
	                Console.WriteLine(myPropertyInfo[i].ToString());
	            }
	            Object[] myObject = new Object[3];
	            myObject[0] = 66;
	            myObject[1] = "puri";
	            myObject[2] = 33.33;
	            Type[] myTypeArray = Type.GetTypeArray(myObject);
	            Console.WriteLine("Full names of the 'Type' objects in the array are:");
	            for(int h = 0; h < myTypeArray.Length ; h++)
	            {
	                Console.WriteLine(myTypeArray[h].FullName);
	            }
	            try
	            {
	                Type myType2 = Type.GetType("sYSTem.iNT32",true,false);
	                Console.WriteLine(myType2.FullName);
	            }
	            catch(TypeLoadException e)
	            {
	                Console.WriteLine(e.Message);
	            }
	            catch(Exception e)
	            {
	                Console.WriteLine(e.Message);
	            }
	        }
	    }
	}
	

snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/persistence.cs

	using System;
	using System.Globalization;
	using System.IO;
	using System.Text;
	using System.Threading;
	
	public class Example
	{
	   private static string filename = @".\dates.dat";
	
	   public static void Main()
	   {
	      DateTime[] dates = { new DateTime(1758, 5, 6, 21, 26, 0), 
	                           new DateTime(1818, 5, 5, 7, 19, 0), 
	                           new DateTime(1870, 4, 22, 23, 54, 0),  
	                           new DateTime(1890, 9, 8, 6, 47, 0), 
	                           new DateTime(1905, 2, 18, 15, 12, 0) }; 
	      WriteData(dates);
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("fr-CH");
	      DateTime[] newDates = ReadData();
	      foreach (var newDate in newDates)
	         Console.WriteLine(newDate.ToString("g"));
	   }
	   
	   private static void WriteData(DateTime[] dates) 
	   {
	      StreamWriter sw = new StreamWriter(filename, false, Encoding.UTF8);    
	      for (int ctr = 0; ctr < dates.Length; ctr++) {
	         sw.Write("{0}", dates[ctr].ToString("g", CultureInfo.CurrentCulture));
	         if (ctr < dates.Length - 1) sw.Write("|");   
	      }      
	      sw.Close();
	   }
	   
	   private static DateTime[] ReadData() 
	   {
	      bool exceptionOccurred = false;
	           
	      StreamReader sr = new StreamReader(filename, Encoding.UTF8);
	      string output = sr.ReadToEnd();
	      sr.Close();   
	
	      string[] values = output.Split( new char[] { '|' } );
	      DateTime[] newDates = new DateTime[values.Length]; 
	      for (int ctr = 0; ctr < values.Length; ctr++) {
	         try {
	            newDates[ctr] = DateTime.Parse(values[ctr], CultureInfo.CurrentCulture);
	         }
	         catch (FormatException) {
	            Console.WriteLine("Failed to parse {0}", values[ctr]);
	            exceptionOccurred = true;
	         }
	      }      
	      if (exceptionOccurred) Console.WriteLine();
	      return newDates;
	   }
	}
snippet conceptual_choosingdates

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_choosingdates/datetimereplacement1.cs

	using System;
	
	public struct StoreInfo
	{
	   public String store;
	   public TimeZoneInfo tz;
	   public TimeSpan open;
	   public TimeSpan close;
	
	   public bool IsOpenNow()
	   {
	      return IsOpenAt(DateTime.Now.TimeOfDay);
	   }
	   
	   public bool IsOpenAt(TimeSpan time)
	   {
	      TimeZoneInfo local = TimeZoneInfo.Local;
	      TimeSpan offset = TimeZoneInfo.Local.BaseUtcOffset;
	
	      if (tz.Equals(local)) {
	         return time >= open & time <= close;
	      }
	      else {
	         TimeSpan delta = TimeSpan.Zero;
	         TimeSpan storeDelta = TimeSpan.Zero;
	         
	         if (local.IsDaylightSavingTime(DateTime.Now.Date + time))
	            delta = local.GetAdjustmentRules()[local.GetAdjustmentRules().Length - 1].DaylightDelta;
	
	         if (tz.IsDaylightSavingTime(TimeZoneInfo.ConvertTime(DateTime.Now.Date + time, local, tz)))
	            storeDelta = tz.GetAdjustmentRules()[local.GetAdjustmentRules().Length - 1].DaylightDelta;
	
	         TimeSpan comparisonTime = time + (offset - tz.BaseUtcOffset).Negate() + (delta - storeDelta).Negate();
	         return comparisonTime >= open & comparisonTime <= close;
	      }
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      var store103 = new StoreInfo();
	      store103.store = "Store #103";
	      store103.tz = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
	      store103.open = new TimeSpan(8, 0, 0);
	      store103.close = new TimeSpan(21, 30, 0);
	      
	      Console.WriteLine("Store is open now at {0}: {1}",
	                        DateTime.Now.TimeOfDay, store103.IsOpenNow());
	      TimeSpan[] times = { new TimeSpan(8, 0, 0), new TimeSpan(21, 0, 0),
	                           new TimeSpan(4, 59, 0), new TimeSpan(18, 31, 0) };
	      foreach (var time in times)
	         Console.WriteLine("Store is open at {0}: {1}",
	                           time, store103.IsOpenAt(time));
	   }
	}

snippet stringendswith

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringendswith/stringendswith.cs

	using System;
	
	public class EndsWithTest {
	    public static void Main() {
	
	
	        string [] strSource = { "<b>This is bold text</b>", "<H1>This is large Text</H1>",
	                "<b><i><font color=green>This has multiple tags</font></i></b>",
	                "<b>This has <i>embedded</i> tags.</b>",
	                "This line simply ends with a greater than symbol, it should not be modified>" };
	
	        Console.WriteLine("The following lists the items before the ends have been stripped:");
	        Console.WriteLine("-----------------------------------------------------------------");
	
	        foreach ( string s in strSource )
	            Console.WriteLine( s );
	
	        Console.WriteLine();
	
	        Console.WriteLine("The following lists the items after the ends have been stripped:");
	        Console.WriteLine("----------------------------------------------------------------");
	
	        foreach (var s in strSource)
	            Console.WriteLine(StripEndTags(s));
	    }
	
	    private static string StripEndTags( string item ) {
	
	        bool found = false;
	            
	        if (item.Trim().EndsWith(">")) {
	                
	            int lastLocation = item.LastIndexOf( "</" );
	
	            if ( lastLocation >= 0 ) {
	                found = true;
	                item =  item.Substring( 0, lastLocation );
	            }    
	        }
	
	        if (found)
	           item = StripEndTags(item);
	           
	        return item;
	    }
	}
snippet assemblyclass

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyClass/source.cs

	using System;
	using System.Reflection;
	using System.Security.Permissions;
	
	[assembly:AssemblyVersionAttribute("1.0.2000.0")]
	
	public class Example
	{
	    private int factor;
	    public Example(int f)
	    {
	        factor = f;
	    }
	
	    public int SampleMethod(int x) 
	    { 
	        Console.WriteLine("\nExample.SampleMethod({0}) executes.", x);
	        return x * factor;
	    }
	
	    public static void Main()
	    {
	        Assembly assem = typeof(Example).Assembly;
	
	        Console.WriteLine("Assembly Full Name:");
	        Console.WriteLine(assem.FullName);
	
	        AssemblyName assemName = assem.GetName();
	        Console.WriteLine("\nName: {0}", assemName.Name);
	        Console.WriteLine("Version: {0}.{1}", 
	            assemName.Version.Major, assemName.Version.Minor);
	
	        Console.WriteLine("\nAssembly CodeBase:");
	        Console.WriteLine(assem.CodeBase);
	
	        Object o = assem.CreateInstance("Example", false, 
	            BindingFlags.ExactBinding, 
	            null, new Object[] { 2 }, null, null);
	
	        MethodInfo m = assem.GetType("Example").GetMethod("SampleMethod");
	        Object ret = m.Invoke(o, new Object[] { 42 });
	        Console.WriteLine("SampleMethod returned {0}.", ret);
	
	        Console.WriteLine("\nAssembly entry point:");
	        Console.WriteLine(assem.EntryPoint);
	    }
	}
	
	/* This code example produces output similar to the following:
	
	Assembly Full Name:
	source, Version=1.0.2000.0, Culture=neutral, PublicKeyToken=null
	
	Name: source
	Version: 1.0
	
	Assembly CodeBase:
	
	Example.SampleMethod(42) executes.
	SampleMethod returned 84.
	
	Assembly entry point:
	Void Main()
	 */
	

snippet assemblyflagsattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyFlagsAttribute/source.cs

	using System;
	using System.Reflection;
	
	[assembly:AssemblyFlagsAttribute(
	    AssemblyNameFlags.EnableJITcompileOptimizer |
	    AssemblyNameFlags.Retargetable)]
	
	public class Example
	{
	    public static void Main()
	    {
	        Assembly thisAsm = typeof(Example).Assembly;
	
	        AssemblyName thisAsmName = thisAsm.GetName(false);
	
	        ListFlags(thisAsmName.Flags);
	
	        AssemblyFlagsAttribute afa = new AssemblyFlagsAttribute(
	            AssemblyNameFlags.EnableJITcompileOptimizer |
	            AssemblyNameFlags.Retargetable);
	
	        AssemblyNameFlags anf = (AssemblyNameFlags) afa.AssemblyFlags;
	
	        Console.WriteLine();
	        ListFlags(anf);
	    }
	
	    private static void ListFlags(AssemblyNameFlags anf)
	    {
	        if (anf == AssemblyNameFlags.None)
	        {
	            Console.WriteLine("AssemblyNameFlags.None");
	        }
	        else
	        {
	            if (0!=(anf & AssemblyNameFlags.Retargetable)) 
	                Console.WriteLine("AssemblyNameFlags.Retargetable");
	            if (0!=(anf & AssemblyNameFlags.PublicKey)) 
	                Console.WriteLine("AssemblyNameFlags.PublicKey");
	            if (0!=(anf & AssemblyNameFlags.EnableJITcompileOptimizer)) 
	                Console.WriteLine("AssemblyNameFlags.EnableJITcompileOptimizer");
	            if (0!=(anf & AssemblyNameFlags.EnableJITcompileTracking)) 
	                Console.WriteLine("AssemblyNameFlags.EnableJITcompileTracking");
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	AssemblyNameFlags.Retargetable
	AssemblyNameFlags.PublicKey
	AssemblyNameFlags.EnableJITcompileOptimizer
	
	AssemblyNameFlags.Retargetable
	AssemblyNameFlags.EnableJITcompileOptimizer
	*/
	
	

snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/strings.cs

	using System;
	using System.Text;
	using System.Runtime.InteropServices;
	
	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
	public struct MyStrStruct
	{
	    public string buffer;
	    public int size;
	}
	
	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
	public struct MyStrStruct2
	{
	    public string buffer;
	    public int size;
	}
	
	public class LibWrap
	{
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern string TestStringAsResult();
	
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern void TestStringInStruct(ref MyStrStruct mss);
	
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern void TestStringInStructAnsi(ref MyStrStruct2 mss);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        string str = LibWrap.TestStringAsResult();
	        Console.WriteLine("\nString returned: {0}", str);
	
	        StringBuilder buffer = new StringBuilder("content", 100);
	        buffer.Append((char)0);
	        buffer.Append('*', buffer.Capacity - 8);
	
	        MyStrStruct mss;
	        mss.buffer = buffer.ToString();
	        mss.size = mss.buffer.Length;
	
	        LibWrap.TestStringInStruct(ref mss);
	        Console.WriteLine("\nBuffer after Unicode function call: {0}",
	            mss.buffer);
	
	        StringBuilder buffer2 = new StringBuilder("content", 100);
	        buffer2.Append((char)0);
	        buffer2.Append('*', buffer2.Capacity - 8);
	
	        MyStrStruct2 mss2;
	        mss2.buffer = buffer2.ToString();
	        mss2.size = mss2.buffer.Length;
	
	        LibWrap.TestStringInStructAnsi(ref mss2);
	        Console.WriteLine("\nBuffer after Ansi function call: {0}",
	            mss2.buffer);
	    }
	}

snippet conceptual_resources_resources

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_resources/resources1.cs

	using System;
	using System.Drawing;
	using System.Resources;
	
	[Serializable()] public class Automobile
	{
	   private string carMake;
	   private string carModel;
	   private int carYear;
	   private int carDoors;
	   private int carCylinders;
	   
	   public Automobile(string make, string model, int year) :
	                     this(make, model, year, 0, 0)
	   { }
	   
	   public Automobile(string make, string model, int year, 
	                     int doors, int cylinders)
	   {                     
	      this.carMake = make;
	      this.carModel = model;
	      this.carYear = year;
	      this.carDoors = doors;
	      this.carCylinders = cylinders;
	   }
	
	   public string Make {
	      get { return this.carMake; }
	   }       
	   
	   public string Model {
	      get { return this.carModel; } 
	   }       
	   
	   public int Year {
	      get { return this.carYear; }
	   }       
	   
	   public int Doors {
	      get { 
	         return this.carDoors; }
	   }       
	   
	   public int Cylinders {
	      get { 
	         return this.carCylinders; }
	   }        
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      Automobile car1 = new Automobile("Ford", "Model N", 1906, 0, 4);
	      Automobile car2 = new Automobile("Ford", "Model T", 1909, 2, 4);
	      using (ResourceWriter rw = new ResourceWriter(@".\CarResources.resources"))
	      {
	         rw.AddResource("Title", "Classic American Cars");
	         rw.AddResource("HeaderString1", "Make");
	         rw.AddResource("HeaderString2", "Model");
	         rw.AddResource("HeaderString3", "Year");
	         rw.AddResource("HeaderString4", "Doors");
	         rw.AddResource("HeaderString5", "Cylinders");
	         rw.AddResource("Information", SystemIcons.Information); 
	         rw.AddResource("EarlyAuto1", car1);
	         rw.AddResource("EarlyAuto2", car2);  
	      }
	   }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/generics2.cs

	using System;
	
	[assembly:CLSCompliant(true)]
	
	
	public class Number<T> where T : struct
	{
	   protected double number;
	      
	   public Number(T value)
	   {
	      try {
	         this.number = Convert.ToDouble(value);
	      }  
	      catch (OverflowException e) {
	         throw new ArgumentException("value is too large.", e);
	      }
	      catch (InvalidCastException e) {
	         throw new ArgumentException("The value parameter is not numeric.", e);
	      }
	   }
	
	   public T Add(T value)
	   {
	      return (T) Convert.ChangeType(number + Convert.ToDouble(value), typeof(T));
	   }
	
	   public T Subtract(T value)
	   {
	      return (T) Convert.ChangeType(number - Convert.ToDouble(value), typeof(T));
	   }
	}
	 
	public class FloatingPoint<T> : Number<T> where T : struct 
	{
	   public FloatingPoint(T number) : base(number) 
	   {
	      if (typeof(float) == number.GetType() ||
	          typeof(double) == number.GetType() || 
	          typeof(decimal) == number.GetType())
	         this.number = Convert.ToDouble(number);
	      else   
	         throw new ArgumentException("The number parameter is not a floating-point number.");
	   }       
	}           
	
	public class Example
	{
	   public static void Main()
	   {
	      Number<Byte> byt = new Number<Byte>(12);
	      Console.WriteLine(byt.Add(12));
	      
	      Number<SByte> sbyt = new Number<SByte>(-3);
	      Console.WriteLine(sbyt.Subtract(12));
	      
	      Number<ushort> ush = new Number<ushort>(16);
	      Console.WriteLine(ush.Add((ushort)3));
	      
	      Number<double> dbl = new Number<double>(Math.PI);
	      Console.WriteLine(dbl.Add(1.0));
	      
	      FloatingPoint<Single> sng = new FloatingPoint<float>(12.3f);
	      Console.WriteLine(sng.Add(3.0f));
	      
	   }
	}

snippet countercreationdatacollection_contains

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CounterCreationDataCollection_Contains/countercreationdatacollection_contains.cs

	/*
	   The following program demonstrates 'Contains' and 'Remove' methods of
	   'CounterCreationDataCollection' class. An instance of 'CounterCreationDataCollection'
	   is created by passing an array of 'CounterCreationData'. A particular instance of
	   'CounterCreationData' is removed if it exist in the 'CounterCreationDataCollection'.
	*/
	using System;
	using System.Diagnostics;
	
	public class CounterCreationDataCollectionExample
	{
	    public static void Main()
	    {
	        try
	        {
	            string myCategoryName;
	            int numberOfCounters;
	            Console.Write("Enter the category Name :");
	            myCategoryName = Console.ReadLine();
	            if (!PerformanceCounterCategory.Exists(myCategoryName))
	            {
	                Console.Write("Enter the number of counters : ");
	                numberOfCounters = int.Parse(Console.ReadLine());
	                CounterCreationData[] myCounterCreationData =
	                   new CounterCreationData[numberOfCounters];
	                for (int i = 0; i < numberOfCounters; i++)
	                {
	                    Console.Write("Enter the counter name for {0} counter : ", i);
	                    myCounterCreationData[i] = new CounterCreationData();
	                    myCounterCreationData[i].CounterName = Console.ReadLine();
	                }
	                CounterCreationDataCollection myCounterCollection =
	                   new CounterCreationDataCollection();
	                myCounterCollection.AddRange(myCounterCreationData);
	
	                PerformanceCounterCategory.Create(myCategoryName,
	                   "Sample Category",
	                PerformanceCounterCategoryType.SingleInstance, myCounterCollection);
	
	                if (myCounterCreationData.Length > 0)
	                {
	                    if (myCounterCollection.Contains(myCounterCreationData[0]))
	                    {
	                        myCounterCollection.Remove(myCounterCreationData[0]);
	                        Console.WriteLine("'{0}' counter is removed from the " +
	                           "CounterCreationDataCollection", myCounterCreationData[0].CounterName);
	                    }
	                }
	                else
	                {
	                    Console.WriteLine("The counters does not exist");
	                }
	            }
	            else
	            {
	                Console.WriteLine("The category already exists");
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception: {0}.", e.Message);
	            return;
	        }
	    }
	}

snippet type_getmembers2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers2/type_getmembers2.cs

	
	/*
	  This program demonstrates 'GetMembers(BindingFlags)' method of 
	  System.Type Class. This will get all the public instance members
	  declared or inherited by this type and displays the members to
	  the console.
	*/
	
	using System;
	using System.Reflection;
	using System.Security; 
	
	
	class MyClass
	{
	   public int myInt = 0;
	   public string myString = null;
	
	   public MyClass()
	   {
	   }
	   public void Myfunction()
	   {
	   }
	}
	
	class Type_GetMembers_BindingFlags
	{
	   public static void Main()
	   {
	      try
	      {
	         MyClass MyObject = new MyClass();
	         MemberInfo [] myMemberInfo; 
	
	         Type myType = MyObject.GetType(); 
	        
	         myMemberInfo = myType.GetMembers(BindingFlags.Public|BindingFlags.Instance);
	    
	         Console.WriteLine( "\nThe public instance members of class '{0}' are : \n", myType); 
	         for (int i =0 ; i < myMemberInfo.Length ; i++)
	         {
	            Console.WriteLine( "'{0}' is a {1}", myMemberInfo[i].Name, myMemberInfo[i].MemberType);
	         }
	
	      }
	      catch (SecurityException e)
	      {
	         Console.WriteLine("SecurityException : " + e.Message ); 
	      }      
	
	
	
	   }
	}
	
	

snippet installer_oninstall

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_OnInstall/installer_oninstall.cs

	/*
	   System.Configuration.Install.Installer.OnBeforeInstall(IDictionary savedState)
	   System.Configuration.Install.Installer.OnAfterInstall(IDictionary savedState)
	
	   The following example demonstrates the methods 'OnBeforeInstall' and
	   'OnAfterInstall' of the 'Installer' class. The methods 'OnBeforeInstall'
	   and 'OnAfterInstall' are overridden in the derived class. Space is provided
	   to add steps to be done before the installation in 'OnBeforeInstall' method 
	   and after the installation in 'OnAfterInstall' method.
	   
	   Use the installer process 'InstallUtil' to run the assembly 
	   Installer_OnInstall.exe.
	   
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller: Installer
	{
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	   }
	   protected override void OnBeforeInstall(IDictionary savedState)
	   {
	      base.OnBeforeInstall(savedState);
	      Console.WriteLine("OnBeforeInstall method of MyInstaller called");
	   }
	   protected override void OnAfterInstall(IDictionary savedState)
	   {
	      base.OnAfterInstall(savedState);
	      Console.WriteLine("OnAfterInstall method of MyInstaller called");
	   }
	}
	
	public class MyAssembly
	{
	   public static void Main()
	   {
	      Console.WriteLine("Use installutil.exe to run the assembly Installer_OnInstall.exe");
	   }
	}

snippet asyncdesignpattern

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncDesignPattern/Async_Poll.cs

	/*
	The following example demonstrates using asynchronous methods to
	get Domain Name System information for the specified host computer.
	This example polls to detect the end of the asynchronous operation.
	*/
	
	using System;
	using System.Net;
	using System.Net.Sockets;
	using System.Threading;
	
	namespace Examples.AdvancedProgramming.AsynchronousOperations
	{
	    public class PollUntilOperationCompletes
	    {
	        static void UpdateUserInterface()
	        {
	            Console.Write(".");
	        }
	        public static void Main(string[] args)
	        {
	            if (args.Length == 0 || args[0].Length == 0)
	            {
	                Console.WriteLine("You must specify the name of a host computer.");
	                return;
	            }
	            IAsyncResult result = Dns.BeginGetHostEntry(args[0], null, null);
	            Console.WriteLine("Processing request for information...");
	            
	            while (result.IsCompleted != true)
	            {
	                UpdateUserInterface();
	            }
	            Console.WriteLine();
	            try 
	            {
	                IPHostEntry host = Dns.EndGetHostEntry(result);
	                string[] aliases = host.Aliases;
	                IPAddress[] addresses = host.AddressList;
	                if (aliases.Length > 0)
	                {
	                    Console.WriteLine("Aliases");
	                    for (int i = 0; i < aliases.Length; i++)
	                    {
	                        Console.WriteLine("{0}", aliases[i]);
	                    }
	                }
	                if (addresses.Length > 0)
	                {
	                    Console.WriteLine("Addresses");
	                    for (int i = 0; i < addresses.Length; i++)
	                    {
	                        Console.WriteLine("{0}",addresses[i].ToString());
	                    }
	                }
	            }
	            catch (SocketException e)
	            {
	                Console.WriteLine("An exception occurred while processing the request: {0}", e.Message);
	            }
	        }
	    }
	}
snippet formatting_composite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_Composite/Composite1.cs

	using System;
	
	public class Class1
	{
	   public static void Main()
	   {
	      string name = "Fred";
	      String.Format("Name = {0}, hours = {1:hh}", name, DateTime.Now);
	      
	      string FormatString1 = String.Format("{0:dddd MMMM}", DateTime.Now);
	      string FormatString2 = DateTime.Now.ToString("dddd MMMM");
	      
	      int MyInt = 100;
	      Console.WriteLine("{0:C}", MyInt);
	      
	      CallSnippet5();
	      CallSnippet6();
	   }
	
	   private static void CallSnippet5()
	   {
	      string myName = "Fred";
	      Console.WriteLine(String.Format("Name = {0}, hours = {1:hh}, minutes = {1:mm}",
	            myName, DateTime.Now));
	   }
	
	   private static void CallSnippet6()
	   {
	      string myFName = "Fred";
	      string myLName = "Opals";
	      int myInt = 100;
	      string FormatFName = String.Format("First Name = |{0,10}|", myFName);
	      string FormatLName = String.Format("Last Name = |{0,10}|", myLName);
	      string FormatPrice = String.Format("Price = |{0,10:C}|", myInt); 
	      Console.WriteLine(FormatFName);
	      Console.WriteLine(FormatLName);
	      Console.WriteLine(FormatPrice);
	      Console.WriteLine();
	      
	      FormatFName = String.Format("First Name = |{0,-10}|", myFName);
	      FormatLName = String.Format("Last Name = |{0,-10}|", myLName);
	      FormatPrice = String.Format("Price = |{0,-10:C}|", myInt);
	      Console.WriteLine(FormatFName);
	      Console.WriteLine(FormatLName);
	      Console.WriteLine(FormatPrice);
	   } 
	}

snippet methodbuilderclass_typesample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MethodBuilderClass_TypeSample/methodbuilderclass.cs

	
	/*
	   This program demonstrates 'MethodBuilder' class. A dynamic class 'myTypeBuilder'
	   is created in which a constructor 'myConstructorBuilder' and a method 'myMethodBuilder'
	   are created dynamically. Their IL's are generated. The Non-Public methods of the class
	   are printed on the console. The attributes and signature of 'MyDynamicMethod' are displayed
	   on the console using 'Attributes' and 'Signature' properties of the 'MethodBuilder' class.
	*/
	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public class MethodBuilderClass
	{
	   public static void Main()
	   {
	      try
	      {
	         AppDomain myAppDomain = AppDomain.CurrentDomain;
	         AssemblyName myAssemblyName = new AssemblyName();
	         myAssemblyName.Name = "MyDynamicAssembly";
	
	         AssemblyBuilder myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(
	                        myAssemblyName, AssemblyBuilderAccess.Save);
	         ModuleBuilder myModuleBuilder =
	              myAssemblyBuilder.DefineDynamicModule("MyDynamicModule", true);
	         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("MyDynamicClass",
	                                                 TypeAttributes.Public);
	         FieldBuilder myField = myTypeBuilder.DefineField("MyDynamicField",
	                        typeof(String), FieldAttributes.Public);
	         
	         MethodBuilder myMethodBuilder = myTypeBuilder.DefineMethod("MyDynamicMethod",
	                              MethodAttributes.Private, typeof(int), new Type[] {});
	         ILGenerator myMethodIL = myMethodBuilder.GetILGenerator();
	         myMethodIL.Emit(OpCodes.Ldarg_0);
	         myMethodIL.Emit(OpCodes.Ldfld, myField);
	         myMethodIL.Emit(OpCodes.Ret);
	
	         Type myType1 = myTypeBuilder.CreateType();
	
	         MethodInfo[] myInfo = myType1.GetMethods(BindingFlags.NonPublic |
	                                                BindingFlags.Instance);
	         Console.WriteLine("\nThe Non-Public methods present in 'myType1' are:\n");
	         for(int i = 0; i < myInfo.Length; i++)
	         {
	            Console.WriteLine(myInfo[i].Name);
	         }
	         Console.WriteLine("\nThe Attribute of 'MyDynamicMethod' is :{0}" ,
	                                    myMethodBuilder.Attributes);
	         Console.WriteLine("\nThe Signature of 'MyDynamicMethod' is : \n"
	                                    + myMethodBuilder.Signature);
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("Exception :{0}", e.Message);
	      }
	   }
	}
snippet codetypedelegateexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDelegateExample/codetypedelegateexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeTypeDelegateExample
	    {
	        public CodeTypeDelegateExample()
	        {
	
	            CodeTypeDeclaration type1 = new CodeTypeDeclaration("DelegateTest");
	
	            CodeMemberEvent event1 = new CodeMemberEvent();
	            event1.Name = "TestEvent";
	            event1.Type = new CodeTypeReference("DelegateTest.TestDelegate");
	            type1.Members.Add( event1 );
	
	            CodeTypeDelegate delegate1 = new CodeTypeDelegate("TestDelegate");            
	            delegate1.Parameters.Add( new CodeParameterDeclarationExpression("System.Object", "sender") );
	            delegate1.Parameters.Add( new CodeParameterDeclarationExpression("System.EventArgs", "e") );        
	
	
	            type1.Members.Add( delegate1 );
	
	            CodeMemberMethod method1 = new CodeMemberMethod();
	            method1.Name = "TestMethod";
	            method1.Parameters.Add( new CodeParameterDeclarationExpression("System.Object", "sender") );
	            method1.Parameters.Add( new CodeParameterDeclarationExpression("System.EventArgs", "e") );        
	            type1.Members.Add( method1 );
	
	            CodeConstructor constructor1 = new CodeConstructor();
	            constructor1.Attributes = MemberAttributes.Public;            
	            CodeDelegateCreateExpression createDelegate1 = new CodeDelegateCreateExpression( 
	                new CodeTypeReference( "DelegateTest.TestDelegate" ), new CodeThisReferenceExpression(), "TestMethod" );                                
	            CodeAttachEventStatement attachStatement1 = new CodeAttachEventStatement( new CodeThisReferenceExpression(), "TestEvent", createDelegate1 );
	            constructor1.Statements.Add( attachStatement1 );                    
	            type1.Members.Add( constructor1 );    
	
	            
	
	        }        
	    }
	}
snippet string_tolower1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_tolower1/tolower.cs

	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    String str1 = "INDIGO";
	    String str2 = new String(new Char[] {'\u0130', 'N', 'D', '\u0130', 'G', 'O'});
	    String str3, str4;
	
	    Console.WriteLine();
	    Console.WriteLine("str1 = '{0}'", str1);
	
	    Console.WriteLine();
	    Console.WriteLine("str1 is {0} to str2.", 
	         ((0 == String.CompareOrdinal(str1, str2)) ? "equal" : "not equal"));
	    CodePoints("str1", str1);
	    CodePoints("str2", str2);
	
	    Console.WriteLine();
	    Console.WriteLine("str3 = Lower case copy of str2 using English-United States culture.");
	    str3 = str2.ToLower(new CultureInfo("en-US", false));
	
	    Console.WriteLine("str4 = Lower case copy of str2 using Turkish-Turkey culture.");
	    str4 = str2.ToLower(new CultureInfo("tr-TR", false));
	
	    Console.WriteLine();
	    Console.WriteLine("str3 is {0} to str4.", 
	         ((0 == String.CompareOrdinal(str3, str4)) ? "equal" : "not equal"));
	    CodePoints("str3", str3);
	    CodePoints("str4", str4);
	    }
	
	    public static void CodePoints(String title, String s)
	    {
	    Console.Write("{0}The code points in {1} are: {0}", Environment.NewLine, title);
	    foreach (ushort u in s)
	      Console.Write("{0:x4} ", u);
	    Console.WriteLine();
	    }
	}
	/*
	This example produces the following results:
	
	str1 = 'INDIGO'
	
	str1 is not equal to str2.
	
	The code points in str1 are:
	0049 004e 0044 0049 0047 004f
	
	The code points in str2 are:
	0130 004e 0044 0130 0047 004f
	
	str3 = Lower case copy of str2 using English-United States culture.
	str4 = Lower case copy of str2 using Turkish-Turkey culture.
	
	str3 is equal to str4.
	
	The code points in str3 are:
	0069 006e 0064 0069 0067 006f
	
	The code points in str4 are:
	0069 006e 0064 0069 0067 006f
	*/
snippet cryptography_asnencodeddata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_AsnEncodedData/asnencodeddata.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	
	class AsnEncodedDataSample
	{
		static void Main()
		{		
			try
			{
				X509Store store = new X509Store("MY", StoreLocation.CurrentUser);
				store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);
				X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;
				X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid, DateTime.Now, false);
				X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, "Certificate Select", "Select certificates from the following list to get extension information on that certificate", X509SelectionFlag.MultiSelection);
	
				AsnEncodedDataCollection asncoll = new AsnEncodedDataCollection();
				for (int i = 0; i < scollection.Count; i++)
				{
					Console.ForegroundColor = ConsoleColor.Red;
					Console.WriteLine("Certificate name: {0}", scollection[i].GetName());
					Console.ResetColor();
					foreach (X509Extension extension in scollection[i].Extensions)
					{
						AsnEncodedData asndata = new AsnEncodedData(extension.Oid, extension.RawData);
						Console.ForegroundColor = ConsoleColor.Green;
						Console.WriteLine("Extension type: {0}", extension.Oid.FriendlyName);
						Console.WriteLine("Oid value: {0}",asndata.Oid.Value);
						Console.WriteLine("Raw data length: {0} {1}", asndata.RawData.Length, Environment.NewLine);
						Console.ResetColor();
						Console.WriteLine(asndata.Format(true));
						Console.WriteLine(Environment.NewLine);
						asncoll.Add(asndata);
					}
					Console.WriteLine(Environment.NewLine);
				}
				Console.ForegroundColor = ConsoleColor.Red;
				Console.WriteLine("Number of AsnEncodedData items in the collection: {0} {1}", asncoll.Count, Environment.NewLine);
				Console.ResetColor();
	
				store.Close();
				AsnEncodedDataEnumerator asne = asncoll.GetEnumerator();
				asne.MoveNext();
				Console.ForegroundColor = ConsoleColor.Blue;
				Console.WriteLine("First AsnEncodedData in the collection: {0}", asne.Current.Format(true));
				Console.ResetColor();
	
				asne.MoveNext();
				Console.ForegroundColor = ConsoleColor.DarkBlue;
				Console.WriteLine("Second AsnEncodedData in the collection: {0}", asne.Current.Format(true));
				Console.ResetColor();
				asne.Reset();
			}
			catch (CryptographicException)
			{
				Console.WriteLine("Information could not be written out for this certificate.");
			}
		}
	}
snippet httpparseexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HttpParseException/source.cs

	using System;
	using System.Security.Permissions;
	using System.Collections;
	using System.Web;
	using System.Web.UI;
	using System.Web.UI.WebControls;
	using System.Web.UI.HtmlControls;
	
	namespace Samples.AspNet.CS
	{
	    public class MyCustomOption
	    {
	        string _id;
	        string _value;
	
	        public string optionid
	        {
	            get
	            { return _id; }
	            set
	            { _id = value; }
	        }
	
	        public string value
	        {
	            get
	            { return _value; }
	            set
	            { _value = value; }
	        }
	
	    }
	
	    public class MyHtmlSelectBuilderWithparseException : HtmlSelectBuilder
	    {
	        [AspNetHostingPermission(SecurityAction.Demand, Level = AspNetHostingPermissionLevel.Minimal)]
	        public override Type GetChildControlType(string tagName, IDictionary attribs)
	        {
	            if (tagName.ToLower().EndsWith("mycustomoption"))
	            {
	                return typeof(MyCustomOption);
	            }
	            else
	            {
	                throw new HttpParseException("This custom HtmlSelect control" +                                                  "requires child elements of the form \"MyCustomOption\"");
	            }
	        }
	
	    }
	
	    [ControlBuilderAttribute(typeof(MyHtmlSelectBuilderWithparseException))]
	    public class CustomHtmlSelectWithHttpParseException : HtmlSelect
	    {
	        protected override void AddParsedSubObject(object obj)
	        {
	            
	            string _outputtext;
	            if (obj is MyCustomOption)
	            {
	                _outputtext = "custom select option : " + ((MyCustomOption)obj).value;
	                ListItem li = new ListItem(_outputtext, ((MyCustomOption)obj).value);
	                base.Items.Add(li);
	            }
	        }      
	    }
	
	}
snippet formatting_howto_weekdayname

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_WeekdayName/example6.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	      string dateString = "6/11/2007";
	      DateTime dateValue;
	      DateTimeOffset dateOffsetValue;
	      
	      try
	      {
	         DateTimeFormatInfo dateTimeFormats;
	         dateValue = DateTime.Parse(dateString, CultureInfo.InvariantCulture);
	         dateOffsetValue = new DateTimeOffset(dateValue, 
	                                      TimeZoneInfo.Local.GetUtcOffset(dateValue));         
	
	         Console.WriteLine((int) dateValue.DayOfWeek);
	         Console.WriteLine((int) dateOffsetValue.DayOfWeek);
	                  
	         Console.WriteLine(dateValue.ToString("ddd"));
	         Console.WriteLine(dateOffsetValue.ToString("ddd"));
	         
	         Console.WriteLine(dateValue.ToString("dddd"));
	         Console.WriteLine(dateOffsetValue.ToString("dddd"));
	         
	         Console.WriteLine(dateValue.ToString("ddd", new CultureInfo("de-DE")));
	         Console.WriteLine(dateOffsetValue.ToString("ddd", 
	                                                     new CultureInfo("de-DE")));
	         
	         dateTimeFormats = new CultureInfo("de-DE").DateTimeFormat;
	         Console.WriteLine(dateValue.ToString("ddd", dateTimeFormats));
	         Console.WriteLine(dateOffsetValue.ToString("ddd", dateTimeFormats));
	          
	         Console.WriteLine(dateValue.ToString("ddd", new CultureInfo("fr-FR")));
	         Console.WriteLine(dateOffsetValue.ToString("ddd", 
	                                                    new CultureInfo("fr-FR")));
	
	         dateTimeFormats = new CultureInfo("fr-FR").DateTimeFormat;
	         Console.WriteLine(dateValue.ToString("dddd", dateTimeFormats));
	         Console.WriteLine(dateOffsetValue.ToString("dddd", dateTimeFormats));
	      }
	      catch (FormatException)
	      {
	         Console.WriteLine("Unable to convert {0} to a date.", dateString);
	      }
	   }
	}

snippet diagnostics_countercreationdata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_CounterCreationData/diagnostics_countercreationdata.cs

	
	/* The following program demonstrates 'CounterCreationData' class,
	   CounterCreationData(string, string, PerformanceCounterType)',
	   'CounterCreationData()', 'CounterName', 'CounterHelp' and 
	   'CounterType' members of 'System.Diagnostics.CounterCreationData'
	   class. It creates the custom counters with 'CounterCreationData'  
	   and binds them to 'PerformanceCounterCategory' object. */
	
	using System;
	using System.Diagnostics;
	
	namespace MyDiagnostics
	{
	    class MyCounterCreationData
	    {
	        static void Main()
	        {
	            CounterCreationDataCollection myCol =
	                                       new CounterCreationDataCollection();
	
	            CounterCreationData myCounter1 = new CounterCreationData("Counter1",
	               "First custom counter", PerformanceCounterType.CounterDelta32);
	
	            CounterCreationData myCounter2 = new CounterCreationData();
	
	            myCounter2.CounterName = "Counter2";
	            myCounter2.CounterHelp = "Second custom counter";
	            myCounter2.CounterType = PerformanceCounterType.NumberOfItemsHEX32;
	
	            myCol.Add(myCounter1);
	            myCol.Add(myCounter2);
	
	            if (PerformanceCounterCategory.Exists("New Counter Category"))
	                PerformanceCounterCategory.Delete("New Counter Category");
	
	            PerformanceCounterCategory myCategory =
	                  PerformanceCounterCategory.Create("New Counter Category", "Category Help",
	                PerformanceCounterCategoryType.SingleInstance, myCol);
	
	
	            Console.WriteLine("Counter Information:");
	            Console.WriteLine("Category Name: " + myCategory.CategoryName);
	            for (int i = 0; i < myCol.Count; i++)
	            {
	                Console.WriteLine("CounterName : " + myCol[i].CounterName);
	                Console.WriteLine("CounterHelp : " + myCol[i].CounterHelp);
	                Console.WriteLine("CounterType : " + myCol[i].CounterType);
	            }
	        }
	    }
	}

snippet console_cursorlts

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_cursorLTS/lts.cs

	using System;
	
	class Sample 
	{
	    protected static int origRow;
	    protected static int origCol;
	
	    protected static void WriteAt(string s, int x, int y)
	    {
	    try
	        {
	        Console.SetCursorPosition(origCol+x, origRow+y);
	        Console.Write(s);
	        }
	    catch (ArgumentOutOfRangeException e)
	        {
	        Console.Clear();
	        Console.WriteLine(e.Message);
	        }
	    }
	
	    public static void Main() 
	    {
	    Console.Clear();
	    origRow = Console.CursorTop;
	    origCol = Console.CursorLeft;
	
	    WriteAt("+", 0, 0);
	    WriteAt("|", 0, 1);
	    WriteAt("|", 0, 2);
	    WriteAt("|", 0, 3);
	    WriteAt("+", 0, 4);
	
	    WriteAt("+", 4, 4);
	
	    WriteAt("|", 4, 3);
	    WriteAt("|", 4, 2);
	    WriteAt("|", 4, 1);
	    WriteAt("+", 4, 0);
	
	    WriteAt("All done!", 0, 6);
	    Console.WriteLine();
	    }
	}
	/*
	This example produces the following results:
	
	+---+
	|   |
	|   |
	|   |
	+---+
	
	All done!
	
	*/
snippet threadstart

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ThreadStart/source3.cs

	using System;
	using System.Threading;
	
	public class ThreadWithState
	{
	    private string boilerplate;
	    private int value;
	
	    private ExampleCallback callback;
	
	    public ThreadWithState(string text, int number, 
	        ExampleCallback callbackDelegate) 
	    {
	        boilerplate = text;
	        value = number;
	        callback = callbackDelegate;
	    }
	    
	    public void ThreadProc() 
	    {
	        Console.WriteLine(boilerplate, value);
	        if (callback != null)
	            callback(1);
	    }
	}
	
	public delegate void ExampleCallback(int lineCount);
	
	public class Example 
	{
	    public static void Main() 
	    {
	        ThreadWithState tws = new ThreadWithState(
	            "This report displays the number {0}.",
	            42,
	            new ExampleCallback(ResultCallback)
	        );
	
	        Thread t = new Thread(new ThreadStart(tws.ThreadProc));
	        t.Start();
	        Console.WriteLine("Main thread does some work, then waits.");
	        t.Join();
	        Console.WriteLine(
	            "Independent task has completed; main thread ends."); 
	    }
	
	    public static void ResultCallback(int lineCount) 
	    {
	        Console.WriteLine(
	            "Independent task printed {0} lines.", lineCount);
	    }
	}

snippet sys_txt_rgxcompinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_txt_rgxCompInfo/useFishRegex.cs

	
	namespace MyApp
	  {
	  using System;
	  using System.Reflection;
	  using System.Text.RegularExpressions;
	
	  class UseFishRegEx
	    {
	    public static void Main()
	      {
	      string targetString = "One fish two fish red fish blue fish";
	      int matchCount = 0;
	      FishRegex f = new FishRegex();
	
	      Console.WriteLine("\nInput string = \"" + targetString + "\"");
	
	      foreach (Match m in f.Matches(targetString))
		{
		Console.WriteLine("\nMatch(" + (++matchCount) + ")");
		for (int i = 1; i <= 2; i++)
		  {
		  Group g = m.Groups[i];
		  Console.WriteLine("Group(" + i + ") = \"" + g + "\"");
		  CaptureCollection cc = g.Captures;
		  for (int j = 0; j < cc.Count; j++)
		    {
		    Capture c = cc[j];
		    System.Console.WriteLine(
		      "Capture(" + j + ") = \"" + c + "\", Position = " + c.Index);
		    }
		  }
		}
	      }
	    }
	  }
	
	/*
	This code example produces the following results:
	
	Input string = "One fish two fish red fish blue fish"
	
	Match(1)
	Group(1) = "One"
	Capture(0) = "One", Position = 0
	Group(2) = "fish"
	Capture(0) = "fish", Position = 4
	
	Match(2)
	Group(1) = "two"
	Capture(0) = "two", Position = 9
	Group(2) = "fish"
	Capture(0) = "fish", Position = 13
	
	Match(3)
	Group(1) = "red"
	Capture(0) = "red", Position = 18
	Group(2) = "fish"
	Capture(0) = "fish", Position = 22
	
	Match(4)
	Group(1) = "blue"
	Capture(0) = "blue", Position = 27
	Group(2) = "fish"
	Capture(0) = "fish", Position = 32
	
	*/
snippet conceptual_resources_portablemetro

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetro/blankpage.xaml.cs

	using System;
	using System.Collections.Generic;
	using Windows.UI.Xaml;
	using Windows.UI.Xaml.Controls;
	using Windows.UI.Xaml.Controls.Primitives;
	using Windows.UI.Xaml.Data;
	using Windows.UI.Xaml.Input;
	using Windows.UI.Xaml.Media;
	using Windows.UI.Xaml.Navigation;
	using MyCompany.Employees;
	
	namespace ConsumerCS
	{
	    public sealed partial class BlankPage : Page
	    {
	        public BlankPage()
	        {
	            this.InitializeComponent();
	
	         }
	
	        protected override void OnNavigatedTo(NavigationEventArgs e)
	        {
	           Example.DisplayData(outputBlock);
	       }
	    }
	}
	
	public class Example
	{
	    static public void DisplayData(Windows.UI.Xaml.Controls.TextBlock outputBlock)
	    {
	        var employees = InitializeData();
	        outputBlock.FontFamily = new FontFamily("Courier New");      
	        string title = UILibrary.GetTitle();
	        outputBlock.Text += title + Environment.NewLine + Environment.NewLine;
	
	        string[] fields = UILibrary.GetFieldNames();
	        int[] lengths = UILibrary.GetFieldLengths();
	        string fmtString = String.Empty;
	        for (int ctr = 0; ctr < fields.Length; ctr++)
	            fmtString += String.Format("{{{0},-{1}{2}{3}   ", ctr, lengths[ctr], ctr >= 2 ? ":d" : "", "}");
	
	        outputBlock.Text += String.Format(fmtString, fields) + Environment.NewLine + Environment.NewLine;
	        foreach (var e in employees)
	            outputBlock.Text += String.Format(fmtString, e.Item1, e.Item2, e.Item3, e.Item4) + Environment.NewLine;
	    }
	
	    private static List<Tuple<String, String, DateTime, DateTime>> InitializeData()
	    {
	        List<Tuple<String, String, DateTime, DateTime>> employees = new List<Tuple<String, String, DateTime, DateTime>>();
	        var t1 = Tuple.Create("John", "16302", new DateTime(1954, 8, 18), new DateTime(2006, 9, 8));
	        employees.Add(t1);
	        t1 = Tuple.Create("Alice", "19745", new DateTime(1995, 5, 10), new DateTime(2012, 10, 17));
	        employees.Add(t1);
	        return employees;
	    }
	}

snippet makexxxtypebuilder

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using Microsoft.VisualBasic;
	
	public class Example
	{
	    public static void Main()
	    {
	        AppDomain myDomain = AppDomain.CurrentDomain;
	        AssemblyName myAsmName = new AssemblyName("MakeXxxTypeExample");
	        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(
	            myAsmName, 
	            AssemblyBuilderAccess.Save);
	
	        ModuleBuilder myModule = myAssembly.DefineDynamicModule(
	            myAsmName.Name, 
	            myAsmName.Name + ".dll");
	
	        TypeBuilder myType = myModule.DefineType(
	            "Sample", 
	            TypeAttributes.Public | TypeAttributes.Abstract);
	
	        Type byRefMyType = myType.MakeByRefType();
	        Type pointerMyType = myType.MakePointerType();
	        Type arrayMyType = myType.MakeArrayType();
	        Type twoDimArrayMyType = myType.MakeArrayType(2);
	
	        Type[] parameterTypes = {byRefMyType, pointerMyType, arrayMyType};
	
	        MethodBuilder myMethodBuilder = myType.DefineMethod(
	            "TestMethod", 
	            MethodAttributes.Abstract | MethodAttributes.Virtual 
	                | MethodAttributes.Public,
	            twoDimArrayMyType,
	            parameterTypes);
	
	        myType.CreateType();
	        myAssembly.Save(myAsmName.Name + ".dll");
	    }
	}
	
	

snippet conceptual_regularexpressions_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_bestpractices/design2.cs

	using System;
	using System.Diagnostics;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      Stopwatch sw;    
	      string[] addresses = { "AAAAAAAAAAA@contoso.com", 
	                             "AAAAAAAAAAaaaaaaaaaa!@contoso.com" };
	      string pattern = @"^[0-9A-Z]([-.\w]*[0-9A-Z])*$";
	      string input; 
	      
	      foreach (var address in addresses) {
	         string mailBox = address.Substring(0, address.IndexOf("@"));       
	         int index = 0;
	         for (int ctr = mailBox.Length - 1; ctr >= 0; ctr--) {
	            index++;
	
	            input = mailBox.Substring(ctr, index); 
	            sw = Stopwatch.StartNew();
	            Match m = Regex.Match(input, pattern, RegexOptions.IgnoreCase);
	            sw.Stop();
	            if (m.Success)
	               Console.WriteLine("{0,2}. Matched '{1,25}' in {2}", 
	                                 index, m.Value, sw.Elapsed);
	            else                     
	               Console.WriteLine("{0,2}. Failed  '{1,25}' in {2}", 
	                                 index, input, sw.Elapsed);
	         }
	         Console.WriteLine();
	      }
	   }
	}
	

snippet microsoft_win32_registrykey2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Win32_RegistryKey2/source.cs

	using System;
	using System.Security.Permissions;
	using Microsoft.Win32;
	
	class RegKey
	{
	    static void Main()
	    {
	        RegistryKey test9999 = 
	            Registry.CurrentUser.CreateSubKey("Test9999");
	        using(RegistryKey 
	            testName = test9999.CreateSubKey("TestName"),
	            testSettings = test9999.CreateSubKey("TestSettings"))
	        {
	            testSettings.SetValue("Language", "French");
	            testSettings.SetValue("Level", "Intermediate");
	            testSettings.SetValue("ID", 123);
	        }
	
	        Console.WriteLine("There are {0} subkeys under {1}.", 
	            test9999.SubKeyCount.ToString(), test9999.Name);
	        foreach(string subKeyName in test9999.GetSubKeyNames())
	        {
	            using(RegistryKey 
	                tempKey = test9999.OpenSubKey(subKeyName))
	            {
	                Console.WriteLine("\nThere are {0} values for {1}.", 
	                    tempKey.ValueCount.ToString(), tempKey.Name);
	                foreach(string valueName in tempKey.GetValueNames())
	                {
	                    Console.WriteLine("{0,-8}: {1}", valueName, 
	                        tempKey.GetValue(valueName).ToString());
	                }
	            }
	        }
	
	        using(RegistryKey 
	            testSettings = test9999.OpenSubKey("TestSettings", true))
	        {
	            testSettings.DeleteValue("id");
	
	            Console.WriteLine((string)testSettings.GetValue(
	                "id", "ID not found."));
	        }
	
	        Console.Write("\nDelete newly created registry key? (Y/N) ");
	        if(Char.ToUpper(Convert.ToChar(Console.Read())) == 'Y')
	        {
	            Registry.CurrentUser.DeleteSubKeyTree("Test9999");
	            Console.WriteLine("\nRegistry key {0} deleted.", 
	                test9999.Name);
	        }
	        else
	        {
	            Console.WriteLine("\nRegistry key {0} closed.", 
	                test9999.ToString());
	            test9999.Close();
	        }
	    }
	}
snippet type_getmethod3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod3/type_getmethod3.cs

	
	using System;
	using System.Reflection;
	
	class Program
	{
	
	    public void MethodA(int i, int j) { }
	
	    public void MethodA(int[] i) { }
	
	    public unsafe void MethodA(int* i) { }
	
	    public void MethodA(ref int r) {}
	
	    public void MethodA(int i, out int o) { o = 100;}
	
	
	  static void Main(string[] args)
	  {
	    MethodInfo mInfo;
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        BindingFlags.Public | BindingFlags.Instance,
	        null,
	        CallingConventions.Any,
	        new Type[] { typeof(int), typeof(int) },
	        null);
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        BindingFlags.Public | BindingFlags.Instance,
	        null,
	        CallingConventions.Any,
	        new Type[] { typeof(int[]) },
	        null);
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        BindingFlags.Public | BindingFlags.Instance,
	        null,
	        CallingConventions.Any,
	        new Type[] { typeof(int).MakePointerType() },
	        null);
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        BindingFlags.Public | BindingFlags.Instance,
	        null,
	        CallingConventions.Any,
	        new Type[] { typeof(int).MakeByRefType() },
	        null);
	    Console.WriteLine("Found method: {0}", mInfo);
	
	    mInfo = typeof(Program).GetMethod("MethodA",
	        BindingFlags.Public | BindingFlags.Instance,
	        null,
	        CallingConventions.Any,
	        new Type[] { typeof(int), typeof(int).MakeByRefType() },
	        null);
	    Console.WriteLine("Found method: {0}", mInfo);
	
	  }
	}
	
	

snippet io_file_getaccesscontrol_setaccesscontrol

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_File_GetAccessControl_SetAccessControl/sample.cs

	using System;
	using System.IO;
	using System.Security.AccessControl;
	
	namespace FileSystemExample
	{
	    class FileExample
	    {
	        public static void Main()
	        {
	            try
	            {
	                string fileName = "test.xml";
	
	                Console.WriteLine("Adding access control entry for "
	                    + fileName);
	
	                AddFileSecurity(fileName, @"DomainName\AccountName",
	                    FileSystemRights.ReadData, AccessControlType.Allow);
	
	                Console.WriteLine("Removing access control entry from "
	                    + fileName);
	
	                RemoveFileSecurity(fileName, @"DomainName\AccountName",
	                    FileSystemRights.ReadData, AccessControlType.Allow);
	
	                Console.WriteLine("Done.");
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine(e);
	            }
	        }
	
	        public static void AddFileSecurity(string fileName, string account,
	            FileSystemRights rights, AccessControlType controlType)
	        {
	
	
	            FileSecurity fSecurity = File.GetAccessControl(fileName);
	
	            fSecurity.AddAccessRule(new FileSystemAccessRule(account,
	                rights, controlType));
	
	            File.SetAccessControl(fileName, fSecurity);
	
	        }
	
	        public static void RemoveFileSecurity(string fileName, string account,
	            FileSystemRights rights, AccessControlType controlType)
	        {
	
	            FileSecurity fSecurity = File.GetAccessControl(fileName);
	
	            fSecurity.RemoveAccessRule(new FileSystemAccessRule(account,
	                rights, controlType));
	
	            File.SetAccessControl(fileName, fSecurity);
	
	        }
	    }
	}
snippet modulebuilder_createglobalfunctions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_CreateGlobalFunctions/modulebuilder_createglobalfunctions.cs

	
	/*
	   The following example demonstrates the 'DefineGlobalMethod(String,MethodAttributes,Type,Type[])'
	   and 'CreateGlobalFunctions' methods of 'ModuleBuilder' class. 
	   A dynamic assembly with a module in it is created in 'CodeGenerator' class. Then a global method 
	   is created in the module using the 'DefineGlobalMethod' method. The global method is called from
	   the 'CallerClass'.
	*/
	
	   using System;
	   using System.Reflection;
	   using System.Reflection.Emit;
	
	   public class CodeGenerator
	   {
	      ModuleBuilder myModuleBuilder =null;
	      AssemblyBuilder myAssemblyBuilder = null;
	
	      public CodeGenerator()
	      {
	         AppDomain currentDomain;
	         AssemblyName myAssemblyName;
	         MethodBuilder myMethodBuilder=null;
	         ILGenerator myILGenerator;
	
	         currentDomain = AppDomain.CurrentDomain;
	         myAssemblyName = new AssemblyName();
	         myAssemblyName.Name = "TempAssembly";
	         
	         myAssemblyBuilder = 
	            currentDomain.DefineDynamicAssembly
	                        (myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	         myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("TempModule");
	
	         myMethodBuilder = myModuleBuilder.DefineGlobalMethod
	              ("MyMethod1",MethodAttributes.Static|MethodAttributes.Public,
	                    null,null);
	         myILGenerator = myMethodBuilder.GetILGenerator();
	         myILGenerator.EmitWriteLine("Hello World from global method.");
	         myILGenerator.Emit(OpCodes.Ret);
	         myModuleBuilder.CreateGlobalFunctions();
	      }
	      
	      public AssemblyBuilder MyAssembly
	      {
	         get
	         {
	            return this.myAssemblyBuilder;
	         }
	      }
	   }
	   public class CallerClass
	   {
	      public static void Main()
	      {
	         CodeGenerator myGenerator = new CodeGenerator();
	         AssemblyBuilder myAssembly = myGenerator.MyAssembly;
	         ModuleBuilder myBuilder = myAssembly.GetDynamicModule("TempModule");
	         Console.WriteLine("Invoking the global method...");
	         MethodInfo myMethodInfo = myBuilder.GetMethod("MyMethod1");
	         myMethodInfo.Invoke(null, null);
	      }
	   }
	

snippet installer_committed

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_Committed/installer_committed.cs

	/*
	   System.Configuration.Install.Installer.OnCommitting(Idictionary savedState)
	   System.Configuration.Install.Installer.OnCommitted(Idictionary savedState)
	
	   The following example demonstrates the methods 'OnCommitting' and
	   'OnCommitted' of the 'Installer' class. The methods 'OnCommitting' and
	   'OnCommitted' are overridden in the derived class. Space is provided
	   for the user to add the steps to be performed before committing and
	   after committing.
	  
	   'Installer_Committed.exe' needs to be run using the installer process 
	   'installutil'. 
	*/
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller: Installer 
	{
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("Install method of MyInstaller called");
	      Console.WriteLine("");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	   }
	   protected override void OnCommitting(IDictionary savedState)
	   {
	      base.OnCommitting(savedState);
	      Console.WriteLine("The OnCommitting method of MyInstaller called");
	   }
	   protected override void OnCommitted(IDictionary savedState)
	   {
	      base.OnCommitted(savedState);
	      Console.WriteLine("The OnCommitted method of MyInstaller called");
	   }
	}
	
	public class MyAssembly
	{
	   public static void Main()
	   {
	      Console.WriteLine("Use installutil.exe to run the assembly Installer_Committed.exe");
	   }
	}
	

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/generics2a.cs

	using System;
	
	[assembly:CLSCompliant(true)]
	
	public class Number<T> where T : struct
	{
	   protected double number;
	      
	   public Number(T value)
	   {
	      try {
	         this.number = Convert.ToDouble(value);
	      }  
	      catch (OverflowException e) {
	         throw new ArgumentException("value is too large.", e);
	      }
	      catch (InvalidCastException e) {
	         throw new ArgumentException("The value parameter is not numeric.", e);
	      }
	   }
	
	   public T Add(T value)
	   {
	      return (T) Convert.ChangeType(number + Convert.ToDouble(value), typeof(T));
	   }
	
	   public T Subtract(T value)
	   {
	      return (T) Convert.ChangeType(number - Convert.ToDouble(value), typeof(T));
	   }
	}
	 
	public class FloatingPoint<T> : Number<T> 
	{
	   public FloatingPoint(T number) : base(number) 
	   {
	      if (typeof(float) == number.GetType() ||
	          typeof(double) == number.GetType() || 
	          typeof(decimal) == number.GetType())
	         this.number = Convert.ToDouble(number);
	      else   
	         throw new ArgumentException("The number parameter is not a floating-point number.");
	   }       
	}           
	
	public class Example
	{
	   public static void Main()
	   {
	      Number<Byte> byt = new Number<Byte>(12);
	      Console.WriteLine(byt.Add(12));
	      
	      Number<SByte> sbyt = new Number<SByte>(-3);
	      Console.WriteLine(sbyt.Subtract(12));
	      
	      Number<ushort> ush = new Number<ushort>(16);
	      Console.WriteLine(ush.Add((ushort)3));
	      
	      Number<double> dbl = new Number<double>(Math.PI);
	      Console.WriteLine(dbl.Add(1.0));
	      
	      FloatingPoint<Single> sng = new FloatingPoint<float>(12.3f);
	      Console.WriteLine(sng.Add(3.0f));
	      
	   }
	}

snippet codeexpressioncollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeExpressionCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	
	namespace CodeExpressionCollectionExample
	{	
		public class Class1
		{
			public Class1()
			{
			}
	
	        public void CodeExpressionCollectionExample()
	        {
	            CodeExpressionCollection collection = new CodeExpressionCollection();
	
	            collection.Add( new CodePrimitiveExpression(true) );
	
	            CodeExpression[] expressions = { new CodePrimitiveExpression(true), new CodePrimitiveExpression(true) };
	            collection.AddRange( expressions );
	
	            CodeExpressionCollection expressionsCollection = new CodeExpressionCollection();
	            expressionsCollection.Add( new CodePrimitiveExpression(true) );
	            expressionsCollection.Add( new CodePrimitiveExpression(true) );
	            collection.AddRange( expressionsCollection );
	
	            CodeExpression testComment = new CodePrimitiveExpression(true);
	            int itemIndex = -1;
	            if( collection.Contains( testComment ) )
	                itemIndex = collection.IndexOf( testComment );
	
	            collection.CopyTo( expressions, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CodePrimitiveExpression(true) );
	
	            CodeExpression expression = new CodePrimitiveExpression(true);
	            collection.Remove( expression );
	
	            collection.RemoveAt(0);
	        }
		}
	} 
snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/handleref.cs

	using System;
	using System.IO;
	using System.Text;
	using System.Runtime.InteropServices;
	
	[StructLayout(LayoutKind.Sequential)]
	public struct Overlapped
	{
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public class Overlapped2
	{
	}
	
	public class LibWrap
	{
	    [DllImport("Kernel32.dll")]
	    public static extern bool ReadFile(
	        HandleRef hndRef,
	        StringBuilder buffer,
	        int numberOfBytesToRead,
	        out int numberOfBytesRead,
	        ref Overlapped flag);
	
	    [DllImport("Kernel32.dll")]
	    public static extern bool ReadFile(
	        HandleRef hndRef,
	        StringBuilder buffer,
	        int numberOfBytesToRead,
	        out int numberOfBytesRead,
	
	    [DllImport("Kernel32.dll", EntryPoint = "ReadFile")]
	    public static extern bool ReadFile2(
	        HandleRef hndRef,
	        StringBuilder buffer,
	        int numberOfBytesToRead,
	        out int numberOfBytesRead,
	        Overlapped2 flag);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        FileStream fs = new FileStream("HandleRef.txt", FileMode.Open);
	        HandleRef hr = new HandleRef(fs, fs.SafeFileHandle.DangerousGetHandle());
	        StringBuilder buffer = new StringBuilder(5);
	        int read = 0;
	        LibWrap.ReadFile(hr, buffer, 5, out read, IntPtr.Zero);
	        Console.WriteLine($"Read {read} bytes with struct parameter: {buffer}");
	        LibWrap.ReadFile2(hr, buffer, 5, out read, null);
	        Console.WriteLine($"Read {read} bytes with class parameter: {buffer}");
	    }
	}

snippet ripemd160

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RIPEMD160/ripemd160.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	using System.Windows.Forms;
	
	public class HashDirectory
	{
	
	    [STAThreadAttribute]
	    public static void Main(String[] args)
	    {
	        string directory = "";
	        if (args.Length < 1)
	        {
	            FolderBrowserDialog fbd = new FolderBrowserDialog();
	            DialogResult dr = fbd.ShowDialog();
	            if (dr == DialogResult.OK)
	                directory = fbd.SelectedPath;
	            else
	            {
	                Console.WriteLine("No directory selected.");
	                return;
	            }
	        }
	        else
	            directory = args[0];
	        try
	        {
	            DirectoryInfo dir = new DirectoryInfo(directory);
	            FileInfo[] files = dir.GetFiles();
	            RIPEMD160 myRIPEMD160 = RIPEMD160Managed.Create();
	            byte[] hashValue;
	            foreach (FileInfo fInfo in files)
	            {
	                FileStream fileStream = fInfo.Open(FileMode.Open);
	                fileStream.Position = 0;
	                hashValue = myRIPEMD160.ComputeHash(fileStream);
	                Console.Write(fInfo.Name + ": ");
	                PrintByteArray(hashValue);
	                fileStream.Close();
	            }
	            return;
	        }
	        catch (DirectoryNotFoundException)
	        {
	            Console.WriteLine("Error: The directory specified could not be found.");
	        }
	        catch (IOException)
	        {
	            Console.WriteLine("Error: A file in the directory could not be accessed.");
	        }
	    }
	    public static void PrintByteArray(byte[] array)
	    {
	        int i;
	        for (i = 0; i < array.Length; i++)
	        {
	            Console.Write(String.Format("{0:X2}", array[i]));
	            if ((i % 4) == 3) Console.Write(" ");
	        }
	        Console.WriteLine();
	    }
	}
snippet runtime_interopservices_preservesigattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_PreserveSigAttribute/example.cs

	using System;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	
	internal class Win32
	{
	
	    public enum SHAutoCompleteFlags
	    {
	        SHACF_DEFAULT = 0x00000000,
	        SHACF_FILESYSTEM = 0x00000001
	    }
	
	    [DllImportAttribute("shlwapi.dll", EntryPoint = "SHAutoComplete", ExactSpelling = true, PreserveSig = false)]
	    public static extern void SHAutoComplete(IntPtr hwndEdit, SHAutoCompleteFlags dwFlags);
	
	    [DllImportAttribute("shlwapi.dll", EntryPoint = "SHAutoComplete", ExactSpelling = true)]
	    public static extern int SHAutoCompleteHRESULT(IntPtr hwndEdit, SHAutoCompleteFlags dwFlags);
	}
	
	
	static class Program
	{
	    static void Main()
	    {
	        Run();
	    }
	
	    static void Run()
	    {
	        IntPtr iPtr = new IntPtr(0);
	
	        try
	        {
	            Console.WriteLine("Calling the SHAutoComplete method with the PreserveSig field set to false.");
	
	            Win32.SHAutoComplete(iPtr, Win32.SHAutoCompleteFlags.SHACF_DEFAULT);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception handled: " + e.Message);
	        }
	
	        Console.WriteLine("Calling the SHAutoComplete method with the PreserveSig field set to true.");
	
	        int HRESULT = Win32.SHAutoCompleteHRESULT(iPtr, Win32.SHAutoCompleteFlags.SHACF_DEFAULT);
	
	        Console.WriteLine("HRESULT handled: " + HRESULT.ToString());
	
	
	    }
	}
snippet conceptual_events_other

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_events_other/example4.cs

	using System;
	using System.ComponentModel;
	using System.Windows.Forms;
	using System.Drawing;
	
	public class MyForm : Form
	{
	    private TextBox box;
	    private Button button;
	
	    public MyForm() : base()
	    {
	        box = new TextBox();
	        box.BackColor = System.Drawing.Color.Cyan;
	        box.Size = new Size(100,100);
	        box.Location = new Point(50,50);
	        box.Text = "Hello";
	
	        button = new Button();
	        button.Location = new Point(50,100);
	        button.Text = "Click Me";
	
	        button.Click += new EventHandler(this.Button_Click);
	        Controls.Add(box);
	        Controls.Add(button);
	    }
	
	    private void Button_Click(object sender, EventArgs e)
	    {
	        box.BackColor = System.Drawing.Color.Green;
	    }
	
	    [STAThread]
	    public static void Main()
	    {
	        Application.Run(new MyForm());
	    }
	}
	
	public class SnippetForm : Form
	{
	    private Button button;
	
	    private void Button_Click(object sender, EventArgs e)
	    {
	    }
	
	
	    public SnippetForm() : base()
	    {
	        button = new Button();
	
	        button.Click += new EventHandler(this.Button_Click);
	    }
	}
	#if null
	csc /r:System.DLL /r:System.Windows.Forms.dll /r:System.Drawing.dll WinEvents.vb
	#endif

snippet conceptual_events_other

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_events_other/example3.cs

	using System;
	using System.ComponentModel;
	using System.Windows.Forms;
	
	class SampleControl : Component
	{
	
	    protected EventHandlerList listEventDelegates = new EventHandlerList();
	
	    static readonly object mouseDownEventKey = new object();
	    static readonly object mouseUpEventKey = new object();
	
	    public event MouseEventHandler MouseDown
	    {
	        add
	        {
	            listEventDelegates.AddHandler(mouseDownEventKey, value);
	        }
	        remove
	        {
	            listEventDelegates.RemoveHandler(mouseDownEventKey, value);
	        }
	    }
	
	    private void OnMouseDown(MouseEventArgs e)
	    {
	        MouseEventHandler mouseEventDelegate =
	            (MouseEventHandler)listEventDelegates[mouseDownEventKey];
	        mouseEventDelegate(this, e);
	    }
	
	    public event MouseEventHandler MouseUp
	    {
	        add
	        {
	            listEventDelegates.AddHandler(mouseUpEventKey, value);
	        }
	        remove
	        {
	            listEventDelegates.RemoveHandler(mouseUpEventKey, value);
	        }
	    }
	
	    private void OnMouseUp(MouseEventArgs e)
	    {
	        MouseEventHandler mouseEventDelegate =
	            (MouseEventHandler)listEventDelegates[mouseUpEventKey];
	        mouseEventDelegate(this, e);
	    }
	}
	
	class Dummy
	{
	    public static void Main()
	    {
	        Console.WriteLine("Dummy.Main()");
	    }
	}

snippet conceptual_crosslanguage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_crosslanguage/useutilities1.cs

	using System.Collections.Generic;
	using System.Globalization;
	using System.Resources;
	
	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      Double dbl = 0.0 - Double.Epsilon;
	      Console.WriteLine(NumericLib.NearZero(dbl));
	      
	      string s = "war and peace";
	      Console.WriteLine(s.ToTitleCase());
	   }
	}
	
	public static class NumericLib 
	{
	   public static bool IsEven(this IConvertible number)
	   {
	      if (number is Byte ||
	          number is SByte ||
	          number is Int16 ||
	          number is UInt16 || 
	          number is Int32 || 
	          number is UInt32 ||
	          number is Int64)
	         return ((long) number) % 2 == 0;
	      else if (number is UInt64)
	         return ((ulong) number) %2 == 0;
	      else
	         throw new NotSupportedException("IsEven called for a non-integer value.");
	   }
	   
	   public static bool NearZero(double number)
	   {
	      return number < .00001; 
	   }
	}
	
	public static class StringLib
	{
	   private static List<string> exclusions; 
	   
	   static StringLib()
	   {
	      string[] words = { "a", "an", "and", "of", "the" };
	      exclusions = new List<string>();
	      exclusions.AddRange(words);
	   }
	   
	   public static string ToTitleCase(this string title)
	   {
	      string[] words = title.Split(); 
	      string result = String.Empty;
	      
	      for (int ctr = 0; ctr < words.Length; ctr++) {
	         string word = words[ctr];
	         if (ctr == 0 || !(exclusions.Contains(word.ToLower())))
	            result += word.Substring(0, 1).ToUpper() + 
	                      word.Substring(1).ToLower();
	         else
	            result += word.ToLower();
	
	         if (ctr <= words.Length - 1)
	            result += " ";             
	      } 
	      return result; 
	   }
	} 
snippet codenamespacecollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeNamespaceCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	
	namespace CodeNamespaceCollectionExample
	{
		public class Class1
		{
			public Class1()
			{
			}
	
	        public void CodeNamespaceCollectionExample()
	        {
	            CodeNamespaceCollection collection = new CodeNamespaceCollection();
	            
	            collection.Add( new CodeNamespace("TestNamespace") );
	
	            CodeNamespace[] namespaces = { new CodeNamespace("TestNamespace1"), new CodeNamespace("TestNamespace2") };
	            collection.AddRange( namespaces );
	
	            CodeNamespaceCollection namespacesCollection = new CodeNamespaceCollection();
	            namespacesCollection.Add( new CodeNamespace("TestNamespace1") );
	            namespacesCollection.Add( new CodeNamespace("TestNamespace2") );
	            collection.AddRange( namespacesCollection );
	
	            CodeNamespace testNamespace = new CodeNamespace("TestNamespace");
	            int itemIndex = -1;
	            if( collection.Contains( testNamespace ) )
	                itemIndex = collection.IndexOf( testNamespace );
	
	            collection.CopyTo( namespaces, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CodeNamespace("TestNamespace") );
	
	            CodeNamespace namespace_ = new CodeNamespace("TestNamespace");
	            collection.Remove( namespace_ );
	
	            collection.RemoveAt(0);
	        }
		}
	} 
snippet codetypereferencecollection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeTypeReferenceCollection/class1.cs

	using System;
	using System.CodeDom;
	
	namespace CodeTypeReferenceCollectionExample
	{
		public class Class1
		{
			public Class1()
			{
			}
	        
	        public void CodeTypeReferenceCollectionExample()
	        {
	            CodeTypeReferenceCollection collection = new CodeTypeReferenceCollection();
	            
	            collection.Add( new CodeTypeReference(typeof(bool)) );
	
	            CodeTypeReference[] references = { new CodeTypeReference(typeof(bool)), new CodeTypeReference(typeof(bool)) };
	            collection.AddRange( references );
	
	            CodeTypeReferenceCollection referencesCollection = new CodeTypeReferenceCollection();
	            referencesCollection.Add( new CodeTypeReference(typeof(bool)) );
	            referencesCollection.Add( new CodeTypeReference(typeof(bool)) );
	            collection.AddRange( referencesCollection );
	
	            CodeTypeReference testReference = new CodeTypeReference(typeof(bool));
	            int itemIndex = -1;
	            if( collection.Contains( testReference ) )
	                itemIndex = collection.IndexOf( testReference );
	
	            collection.CopyTo( references, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CodeTypeReference(typeof(bool)) );
	
	            CodeTypeReference reference = new CodeTypeReference(typeof(bool));
	            collection.Remove( reference );
	
	            collection.RemoveAt(0);
	        }    
		}
	} 
snippet countercreationdatacollection_insert_indexof

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CounterCreationDataCollection_Insert_IndexOf/countercreationdatacollection_insert_indexof.cs

	
	/*
	   The following program demonstrates 'IndexOf(CounterCreationData)' and 'Insert(int, CounterCreationData)'
	   methods of 'CounterCreationDataCollection' class. An instance of 'CounterCreationDataCollection'
	   is created by passing an array of 'CounterCreationData' to the constructor. A counter is inserted
	   into the 'CounterCreationDataCollection' at specified index. The inserted counter and
	   its index are displayed to the console.
	
	 */
	using System;
	using System.Diagnostics;
	
	public class CounterCreationDataCollectionExample
	{
	    static PerformanceCounter myCounter;
	    public static void Main()
	    {
	        try
	        {
	            string myCategoryName;
	            int numberOfCounters;
	            Console.Write("Enter the category Name : ");
	            myCategoryName = Console.ReadLine();
	            if (!PerformanceCounterCategory.Exists(myCategoryName))
	            {
	                Console.Write("Enter the number of counters : ");
	                numberOfCounters = int.Parse(Console.ReadLine());
	                CounterCreationData[] myCounterCreationData =
	                   new CounterCreationData[numberOfCounters];
	
	                for (int i = 0; i < numberOfCounters; i++)
	                {
	                    Console.Write("Enter the counter name for {0} counter ", i);
	                    myCounterCreationData[i] = new CounterCreationData();
	                    myCounterCreationData[i].CounterName = Console.ReadLine();
	                }
	                CounterCreationDataCollection myCounterCollection =
	                   new CounterCreationDataCollection(myCounterCreationData);
	                CounterCreationData myInsertCounterCreationData = new CounterCreationData(
	                   "CounterInsert", "", PerformanceCounterType.NumberOfItems32);
	                myCounterCollection.Insert(myCounterCollection.Count - 1,
	                   myInsertCounterCreationData);
	                Console.WriteLine("'{0}' counter is inserted into 'CounterCreationDataCollection'",
	                   myInsertCounterCreationData.CounterName);
	                PerformanceCounterCategory.Create(myCategoryName, "Sample Category",
	                PerformanceCounterCategoryType.SingleInstance, myCounterCollection);
	
	                for (int i = 0; i < numberOfCounters; i++)
	                {
	                    myCounter = new PerformanceCounter(myCategoryName,
	                       myCounterCreationData[i].CounterName, "", false);
	                }
	                Console.WriteLine("The index of '{0}' counter is {1}",
	                   myInsertCounterCreationData.CounterName, myCounterCollection.IndexOf(myInsertCounterCreationData));
	            }
	            else
	            {
	                Console.WriteLine("The category already exists");
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception: {0}.", e.Message);
	            return;
	        }
	    }
	}

snippet codetypemembercollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeTypeMemberCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	
	namespace CodeTypeMemberCollectionExample
	{
		public class Class1
		{
			public Class1()
			{
			}
	
	        public void CodeTypeMemberCollectionExample()
	        {
	            CodeTypeMemberCollection collection = new CodeTypeMemberCollection();
	         
	            collection.Add( new CodeMemberField("System.String", "TestStringField") );
	
	            CodeTypeMember[] members = { new CodeMemberField("System.String", "TestStringField1"), new CodeMemberField("System.String", "TestStringField2") };
	            collection.AddRange( members );
	
	            CodeTypeMemberCollection membersCollection = new CodeTypeMemberCollection();
	            membersCollection.Add( new CodeMemberField("System.String", "TestStringField1") );
	            membersCollection.Add( new CodeMemberField("System.String", "TestStringField2") );
	            collection.AddRange( membersCollection );
	
	            CodeTypeMember testMember = new CodeMemberField("System.String", "TestStringField");
	            int itemIndex = -1;
	            if( collection.Contains( testMember ) )
	                itemIndex = collection.IndexOf( testMember );
	
	            collection.CopyTo( members, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CodeMemberField("System.String", "TestStringField") );
	
	            CodeTypeMember member = new CodeMemberField("System.String", "TestStringField");
	            collection.Remove( member );
	
	            collection.RemoveAt(0);
	        }
		}
	} 
snippet exception_data

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/exception_data/data.cs

	using System;
	using System.Collections;
	
	class Sample 
	{
	   public static void Main()
	   {
	      Console.WriteLine("\nException with some extra information...");
	      RunTest(false);
	      Console.WriteLine("\nException with all extra information...");
	      RunTest(true);
	   }
	
	   public static void RunTest(bool displayDetails)
	   {
	      try {
	         NestedRoutine1(displayDetails);
	      }
	      catch (Exception e) {
	         Console.WriteLine("An exception was thrown.");
	         Console.WriteLine(e.Message);
	         if (e.Data.Count > 0) {
	            Console.WriteLine("  Extra details:");
	            foreach (DictionaryEntry de in e.Data)
	               Console.WriteLine("    Key: {0,-20}      Value: {1}", 
	                                 "'" + de.Key.ToString() + "'", de.Value);
	         }
	      }
	   }
	    
	   public static void NestedRoutine1(bool displayDetails)
	   {
	      try {
	         NestedRoutine2(displayDetails);
	      }
	      catch (Exception e) {
	         e.Data["ExtraInfo"] = "Information from NestedRoutine1.";
	         e.Data.Add("MoreExtraInfo", "More information from NestedRoutine1.");
	         throw;
	      }
	   }
	    
	   public static void NestedRoutine2(bool displayDetails)
	   {
	      Exception e = new Exception("This statement is the original exception message.");
	      if (displayDetails) {
	         string s = "Information from NestedRoutine2.";
	         int i = -903;
	         DateTime dt = DateTime.Now;
	         e.Data.Add("stringInfo", s);
	         e.Data["IntInfo"] = i;
	         e.Data["DateTimeInfo"] = dt;
	      }
	      throw e;
	   }
	}

snippet io_diretoryinfo_getaccesscontrol_setaccesscontrol

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_DiretoryInfo_GetAccessControl_SetAccessControl/sample.cs

	using System;
	using System.IO;
	using System.Security.AccessControl;
	
	namespace FileSystemExample
	{
	    class DirectoryExample
	    {
	        public static void Main()
	        {
	            try
	            {
	                string DirectoryName = "TestDirectory";
	
	                Console.WriteLine("Adding access control entry for " + DirectoryName);
	
	                AddDirectorySecurity(DirectoryName, @"MYDOMAIN\MyAccount", FileSystemRights.ReadData, AccessControlType.Allow);
	
	                Console.WriteLine("Removing access control entry from " + DirectoryName);
	
	                RemoveDirectorySecurity(DirectoryName, @"MYDOMAIN\MyAccount", FileSystemRights.ReadData, AccessControlType.Allow);
	
	                Console.WriteLine("Done.");
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine(e);
	            }
	
	            Console.ReadLine();
	        }
	
	        public static void AddDirectorySecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)
	        {
	            DirectoryInfo dInfo = new DirectoryInfo(FileName);
	
	            DirectorySecurity dSecurity = dInfo.GetAccessControl();
	
	            dSecurity.AddAccessRule(new FileSystemAccessRule(Account,
	                                                            Rights,
	                                                            ControlType));
	
	            dInfo.SetAccessControl(dSecurity);
	
	        }
	
	        public static void RemoveDirectorySecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)
	        {
	            DirectoryInfo dInfo = new DirectoryInfo(FileName);
	
	            DirectorySecurity dSecurity = dInfo.GetAccessControl();
	
	            dSecurity.RemoveAccessRule(new FileSystemAccessRule(Account,
	                                                            Rights,
	                                                            ControlType));
	
	            dInfo.SetAccessControl(dSecurity);
	
	        }
	    }
	}
	
snippet accesscontrol_filesystemauditrule

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AccessControl_FileSystemAuditRule/sample.cs

	using System;
	using System.IO;
	using System.Security.AccessControl;
	
	namespace FileSystemExample
	{
	    class FileExample
	    {
	        public static void Main()
	        {
	            try 
	            {
	                string FileName = "test.xml";
	
	                Console.WriteLine("Adding access control entry for " + FileName);
	
	                AddFileAuditRule(FileName, @"MYDOMAIN\MyAccount", FileSystemRights.ReadData, AuditFlags.Failure);
	
	                Console.WriteLine("Removing access control entry from " + FileName);
	
	                RemoveFileAuditRule(FileName, @"MYDOMAIN\MyAccount", FileSystemRights.ReadData, AuditFlags.Failure);
	
	                Console.WriteLine("Done.");
	            }
	            catch (IOException e)
	            {
	                Console.WriteLine("Unable to open the file: " + e.Message);
	            }
	            catch (PrivilegeNotHeldException e)
	            {
	                Console.WriteLine("The current account does not have the correct privileges: " + e.Message);
	            }
	
	            Console.ReadLine();
	        }
	
	        public static void AddFileAuditRule(string FileName, string Account, FileSystemRights Rights, AuditFlags AuditRule)
	        {
	
	
	            FileSecurity fSecurity = File.GetAccessControl(FileName);
	
	            fSecurity.AddAuditRule(new FileSystemAuditRule(Account,
	                                                            Rights,
	                                                            AuditRule));
	
	            File.SetAccessControl(FileName, fSecurity);
	
	        }
	
	        public static void RemoveFileAuditRule(string FileName, string Account, FileSystemRights Rights, AuditFlags AuditRule)
	        {
	
	            FileSecurity fSecurity = File.GetAccessControl(FileName);
	
	            fSecurity.RemoveAuditRule(new FileSystemAuditRule(Account,
	                                                            Rights,
	                                                            AuditRule));
	
	            File.SetAccessControl(FileName, fSecurity);
	
	        }
	    }
	}
snippet codetypedeclarationcollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	
	namespace CodeTypeDeclarationCollectionExample
	{
		public class Class1
		{
			public Class1()
			{
			}
	
	        public void CodeTypeDeclarationCollectionExample()
	        {
	            CodeTypeDeclarationCollection collection = new CodeTypeDeclarationCollection();
	
	            collection.Add( new CodeTypeDeclaration("TestType") );
	
	            CodeTypeDeclaration[] declarations = { new CodeTypeDeclaration("TestType1"), new CodeTypeDeclaration("TestType2") };
	            collection.AddRange( declarations );
	
	            CodeTypeDeclarationCollection declarationsCollection = new CodeTypeDeclarationCollection();
	            declarationsCollection.Add( new CodeTypeDeclaration("TestType1") );
	            declarationsCollection.Add( new CodeTypeDeclaration("TestType2") );
	            collection.AddRange( declarationsCollection );
	
	            CodeTypeDeclaration testDeclaration = new CodeTypeDeclaration("TestType");
	            int itemIndex = -1;
	            if( collection.Contains( testDeclaration ) )
	                itemIndex = collection.IndexOf( testDeclaration );
	
	            collection.CopyTo( declarations, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CodeTypeDeclaration("TestType") );
	
	            CodeTypeDeclaration declaration = new CodeTypeDeclaration("TestType");
	            collection.Remove( declaration );
	
	            collection.RemoveAt(0);
	        }
		}
	} 
snippet formatting_howto_numericvalue

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_NumericValue/Telephone1.cs

	using System;
	using System.Globalization;
	
	public class TelephoneFormatter : IFormatProvider, ICustomFormatter
	{
	   public object GetFormat(Type formatType)
	   {
	      if (formatType == typeof(ICustomFormatter))
	         return this;
	      else
	         return null;
	   }               
	
	   public string Format(string format, object arg, IFormatProvider formatProvider)
	   {
	      if (! this.Equals(formatProvider))
	         return null; 
	
	      if (string.IsNullOrEmpty(format)) 
	         format = "N";
	
	      string numericString = arg.ToString();
	      
	      if (format == "N")
	      {
	         if (numericString.Length <= 4)
	            return numericString;
	         else if (numericString.Length == 7)
	            return numericString.Substring(0, 3) + "-" + numericString.Substring(3, 4); 
	         else if (numericString.Length == 10)
	               return "(" + numericString.Substring(0, 3) + ") " +
	                      numericString.Substring(3, 3) + "-" + numericString.Substring(6);   
	         else
	            throw new FormatException( 
	                      string.Format("'{0}' cannot be used to format {1}.", 
	                                    format, arg.ToString()));
	      }
	      else if (format == "I")
	      {
	         if (numericString.Length < 10)
	            throw new FormatException(string.Format("{0} does not have 10 digits.", arg.ToString()));
	         else
	            numericString = "+1 " + numericString.Substring(0, 3) + " " + numericString.Substring(3, 3) + " " + numericString.Substring(6);
	      }
	      else
	      {
	         throw new FormatException(string.Format("The {0} format specifier is invalid.", format));
	      } 
	      return numericString;  
	   }
	}
	
	public class TestTelephoneFormatter
	{
	   public static void Main()
	   {
	      Console.WriteLine(String.Format(new TelephoneFormatter(), "{0}", 0));
	      Console.WriteLine(String.Format(new TelephoneFormatter(), "{0}", 911));
	      Console.WriteLine(String.Format(new TelephoneFormatter(), "{0}", 8490216));
	      Console.WriteLine(String.Format(new TelephoneFormatter(), "{0}", 4257884748));
	      
	      Console.WriteLine(String.Format(new TelephoneFormatter(), "{0:N}", 0));
	      Console.WriteLine(String.Format(new TelephoneFormatter(), "{0:N}", 911));
	      Console.WriteLine(String.Format(new TelephoneFormatter(), "{0:N}", 8490216));
	      Console.WriteLine(String.Format(new TelephoneFormatter(), "{0:N}", 4257884748));
	
	      Console.WriteLine(String.Format(new TelephoneFormatter(), "{0:I}", 4257884748));
	   }
	}

snippet codecatchclausecollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeCatchClauseCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	
	namespace CodeCatchClauseCollectionExample
	{
		public class Class1
		{
			public Class1()
			{
			}
	        
	        public void CodeCatchClauseCollectionExample()
	        {
	            CodeCatchClauseCollection collection = new CodeCatchClauseCollection();
	
	            collection.Add( new CodeCatchClause("e") );
	
	            CodeCatchClause[] clauses = { new CodeCatchClause(), new CodeCatchClause() };
	            collection.AddRange( clauses );
	
	            CodeCatchClauseCollection clausesCollection = new CodeCatchClauseCollection();
	            clausesCollection.Add( new CodeCatchClause("e", new CodeTypeReference(typeof(System.ArgumentOutOfRangeException))) );
	            clausesCollection.Add( new CodeCatchClause("e") );
	            collection.AddRange( clausesCollection );
	
	            CodeCatchClause testClause = new CodeCatchClause("e");
	            int itemIndex = -1;
	            if( collection.Contains( testClause ) )
	                itemIndex = collection.IndexOf( testClause );
	
	            collection.CopyTo( clauses, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CodeCatchClause("e") );
	
	            CodeCatchClause clause = new CodeCatchClause("e");
	            collection.Remove( clause );
	
	            collection.RemoveAt(0);
	        }
		}
	}

snippet codecommentstatementcollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeCommentStatementCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	
	namespace CodeCommentStatementCollectionExample
	{	
		public class Class1
		{
			public Class1()
			{
			}
	        
	        public void CodeCommentStatementCollectionExample()
	        {
	            CodeCommentStatementCollection collection = new CodeCommentStatementCollection();
	
	            collection.Add( new CodeCommentStatement("Test comment") );
	
	            CodeCommentStatement[] comments = { new CodeCommentStatement("Test comment"), new CodeCommentStatement("Another test comment") };
	            collection.AddRange( comments );
	
	            CodeCommentStatementCollection commentsCollection = new CodeCommentStatementCollection();
	            commentsCollection.Add( new CodeCommentStatement("Test comment") );
	            commentsCollection.Add( new CodeCommentStatement("Another test comment") );
	            collection.AddRange( commentsCollection );
	
	            CodeCommentStatement testComment = new CodeCommentStatement("Test comment");
	            int itemIndex = -1;
	            if( collection.Contains( testComment ) )
	                itemIndex = collection.IndexOf( testComment );
	
	            collection.CopyTo( comments, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CodeCommentStatement("Test comment") );
	
	            CodeCommentStatement comment = new CodeCommentStatement("Test comment");
	            collection.Remove( comment );
	
	            collection.RemoveAt(0);
	        }
		}
	} 
snippet ecma_system_object_equals3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ECMA_System_Object_Equals3/equals3.cs

	using System;
	
	class Rectangle 
	{
	   private Point a, b;
	
	   public Rectangle(int upLeftX, int upLeftY, int downRightX, int downRightY) 
	   {
	      this.a = new Point(upLeftX, upLeftY);
	      this.b = new Point(downRightX, downRightY);
	   }
	
	   public override bool Equals(Object obj)
	   {
	      if (obj == null || GetType() != obj.GetType()) 
	          return false;
	      Rectangle r = (Rectangle)obj;
	      return a.Equals(r.a) && b.Equals(r.b);
	   }
	
	   public override int GetHashCode()
	   {
	      return Tuple.Create(a, b).GetHashCode();
	   }
	
	    public override String ToString()
	    {
	       return String.Format("Rectangle({0}, {1}, {2}, {3})",
	                            a.x, a.y, b.x, b.y); 
	    }
	}
	
	class Point 
	{
	  internal int x;
	  internal int y;
	
	  public Point(int X, int Y)
	  {
	     this.x = X;
	     this.y = Y;
	  }
	
	  public override bool Equals (Object obj)
	  {
	     if (obj == null || GetType() != obj.GetType()) return false;
	     Point p = (Point)obj;
	     return (x == p.x) && (y == p.y);
	  }
	
	  public override int GetHashCode()
	  {
	     return Tuple.Create(x, y).GetHashCode();
	  }
	}
	
	class Example 
	{
	   public static void Main()
	   {
	      Rectangle r1 = new Rectangle(0, 0, 100, 200);
	      Rectangle r2 = new Rectangle(0, 0, 100, 200);
	      Rectangle r3 = new Rectangle(0, 0, 150, 200);
	
	      Console.WriteLine("{0} = {1}: {2}", r1, r2, r1.Equals(r2));
	      Console.WriteLine("{0} = {1}: {2}", r1, r3, r1.Equals(r3));
	      Console.WriteLine("{0} = {1}: {2}", r2, r3, r2.Equals(r3));
	   }
	}

snippet process_standardinput

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Process_StandardInput/process_standardinput.cs

	
	
	using System;
	using System.IO;
	using System.Diagnostics;
	using System.ComponentModel;
	
	namespace ProcessStandardInputSample
	{
	    class StandardInputTest
	    {
	        static void Main()
	        {
	            Console.WriteLine("Ready to sort one or more text lines...");
	
	            using (Process myProcess = new Process())
	            {
	                myProcess.StartInfo.FileName = "Sort.exe";
	                myProcess.StartInfo.UseShellExecute = false;
	                myProcess.StartInfo.RedirectStandardInput = true;
	
	                myProcess.Start();
	
	                StreamWriter myStreamWriter = myProcess.StandardInput;
	
	                String inputText;
	                int numLines = 0;
	                do
	                {
	                    Console.WriteLine("Enter a line of text (or press the Enter key to stop):");
	
	                    inputText = Console.ReadLine();
	                    if (inputText.Length > 0)
	                    {
	                        numLines++;
	                        myStreamWriter.WriteLine(inputText);
	                    }
	                } while (inputText.Length > 0);
	
	                if (numLines > 0)
	                {
	                    Console.WriteLine($" {numLines} sorted text line(s) ");
	                    Console.WriteLine("------------------------");
	                }
	                else
	                {
	                    Console.WriteLine(" No input was sorted");
	                }
	
	                myStreamWriter.Close();
	
	                myProcess.WaitForExit();
	            }
	        }
	    }
	}

snippet compilererrorcollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CompilerErrorCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	
	namespace CompilerErrorCollectionExample
	{
		public class Class1
		{
			public Class1()
			{
			}
	
	        public void CompilerErrorCollectionExample()
	        {
	            CompilerErrorCollection collection = new CompilerErrorCollection();            			
	
	            collection.Add( new CompilerError("Testfile.cs", 5, 10, "CS0001", "Example error text") );
	
	            CompilerError[] errors = { new CompilerError("Testfile.cs", 5, 10, "CS0001", "Example error text"), new CompilerError("Testfile.cs", 5, 10, "CS0001", "Example error text") };
	            collection.AddRange( errors );
	
	            CompilerErrorCollection errorsCollection = new CompilerErrorCollection();
	            errorsCollection.Add( new CompilerError("Testfile.cs", 5, 10, "CS0001", "Example error text") );
	            errorsCollection.Add( new CompilerError("Testfile.cs", 5, 10, "CS0001", "Example error text") );
	            collection.AddRange( errorsCollection );
	
	            CompilerError testError = new CompilerError("Testfile.cs", 5, 10, "CS0001", "Example error text");
	            int itemIndex = -1;
	            if( collection.Contains( testError ) )
	                itemIndex = collection.IndexOf( testError );
	
	            collection.CopyTo( errors, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CompilerError("Testfile.cs", 5, 10, "CS0001", "Example error text") );
	
	            CompilerError error = new CompilerError("Testfile.cs", 5, 10, "CS0001", "Example error text");
	            collection.Remove( error );
	            
	            collection.RemoveAt(0);
	        }
		}
	} 
snippet console_cursorvis

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_cursorvis/vis.cs

	
	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string m1 = "\nThe cursor is {0}.\nType any text then press Enter. " +
	                "Type '+' in the first column to show \n" +
	                "the cursor, '-' to hide the cursor, " +
	                "or lowercase 'x' to quit:";
	    string s;
	    bool saveCursorVisibile;
	    int  saveCursorSize;
	    saveCursorVisibile = Console.CursorVisible;
	    saveCursorSize  = Console.CursorSize;
	
	    while(true) 
	        {
	        Console.WriteLine(m1, 
	                         ((Console.CursorVisible == true) ? 
	                           "VISIBLE" : "HIDDEN"));
	        s = Console.ReadLine();
	        if (String.IsNullOrEmpty(s) == false) 
	            if (s[0] == '+')
	                Console.CursorVisible = true;
	            else if (s[0] == '-')
	                Console.CursorVisible = false;
	            else if (s[0] == 'x')
	                break;
	        }
	    Console.CursorVisible = saveCursorVisibile;
	    Console.CursorSize    = saveCursorSize;
	    }
	
	}
	/*
	This example produces the following results. Note that these results
	cannot depict cursor visibility. You must run the example to see the 
	cursor behavior:
	
	The cursor is VISIBLE.
	Type any text then press Enter. Type '+' in the first column to show
	the cursor, '-' to hide the cursor, or lowercase 'x' to quit:
	The quick brown fox
	
	The cursor is VISIBLE.
	Type any text then press Enter. Type '+' in the first column to show
	the cursor, '-' to hide the cursor, or lowercase 'x' to quit:
	-
	
	The cursor is HIDDEN.
	Type any text then press Enter. Type '+' in the first column to show
	the cursor, '-' to hide the cursor, or lowercase 'x' to quit:
	jumps over
	
	The cursor is HIDDEN.
	Type any text then press Enter. Type '+' in the first column to show
	the cursor, '-' to hide the cursor, or lowercase 'x' to quit:
	+
	
	The cursor is VISIBLE.
	Type any text then press Enter. Type '+' in the first column to show
	the cursor, '-' to hide the cursor, or lowercase 'x' to quit:
	the lazy dog.
	
	The cursor is VISIBLE.
	Type any text then press Enter. Type '+' in the first column to show
	the cursor, '-' to hide the cursor, or lowercase 'x' to quit:
	x
	
	*/
snippet codedirectivecollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDirectiveCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDirectiveCollectionExample
	{
	    public class Class1
	    {
	        public Class1()
	        {
	        }
	
	        public void CodeDirectiveCollectionExample()
	        {
	            CodeDirectiveCollection collection = new CodeDirectiveCollection();
	
	            collection.Add(new CodeRegionDirective(CodeRegionMode.Start, "Region1"));
	
	            CodeDirective[] directives = { 
	                new CodeRegionDirective(CodeRegionMode.Start,"Region1"), 
	                new CodeRegionDirective(CodeRegionMode.End,"Region1") };
	            collection.AddRange(directives);
	
	            CodeDirectiveCollection directivesCollection = new CodeDirectiveCollection();
	            directivesCollection.Add(new CodeRegionDirective(CodeRegionMode.Start, "Region2"));
	            directivesCollection.Add(new CodeRegionDirective(CodeRegionMode.End, "Region2"));
	            collection.AddRange(directivesCollection);
	
	            CodeDirective testDirective = new CodeRegionDirective(CodeRegionMode.Start, "Region1");
	            int itemIndex = -1;
	            if (collection.Contains(testDirective))
	                itemIndex = collection.IndexOf(testDirective);
	
	            collection.CopyTo(directives, 0);
	
	            int collectionCount = collection.Count;
	
	            collection.Insert(0, new CodeRegionDirective(CodeRegionMode.Start, "Region1"));
	
	            CodeDirective directive = new CodeRegionDirective(CodeRegionMode.Start, "Region1");
	            collection.Remove(directive);
	
	            collection.RemoveAt(0);
	        }
	    }
	}

snippet setcurrentprincipal

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/SetCurrentPrincipal/program.cs

	using System;
	using System.Threading;
	using System.Security.Permissions;
	using System.Security.Principal;
	
	class SecurityPrincipalDemo
	{
	    public static void Main()
	    {
	        GenericPrincipal genericPrincipal = GetGenericPrincipal();
	
	        GenericIdentity principalIdentity =
	            (GenericIdentity)genericPrincipal.Identity;
	
	        if (principalIdentity.IsAuthenticated)
	        {
	            Console.WriteLine(principalIdentity.Name);
	            Console.WriteLine("Type:" + principalIdentity.AuthenticationType);
	        }
	
	        if (genericPrincipal.IsInRole("NetworkUser"))
	        {
	            Console.WriteLine("User belongs to the NetworkUser role.");
	        }
	
	        Thread.CurrentPrincipal = genericPrincipal;
	
	    }
	
	    private static GenericPrincipal GetGenericPrincipal()
	    {
	        WindowsIdentity windowsIdentity = WindowsIdentity.GetCurrent();
	        string[] roles = new string[10];
	        if (windowsIdentity.IsAuthenticated)
	        {
	            roles[0] = "NetworkUser";
	        }
	
	        if (windowsIdentity.IsGuest)
	        {
	            roles[1] = "GuestUser";
	        }
	
	        if (windowsIdentity.IsSystem)
	        {
	            roles[2] = "SystemUser";
	        }
	
	        string authenticationType = windowsIdentity.AuthenticationType;
	        string userName = windowsIdentity.Name;
	        GenericIdentity genericIdentity =
	            new GenericIdentity(userName, authenticationType);
	
	        GenericPrincipal genericPrincipal =
	            new GenericPrincipal(genericIdentity, roles);
	
	        return genericPrincipal;
	    }
	
	}
snippet uninstallaction_noaction_remove_3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/UninstallAction_NoAction_Remove_3/uninstallaction_noaction_remove_3.cs

	
	/* The following program demonstrates "NoAction" and "Remove" 
	   members of "UninstallAction" enumeration. A resource is 
	   installed and uninstalled using 'installutil.exe' in an event 
	   log depending on the user input.
	*/
	
	using System;
	using System.Diagnostics;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyUninstallActionClass : Installer 
	{
	   EventLogInstaller myInstaller = new EventLogInstaller();
	   
	   public override void Install(IDictionary savedState)
	   {
	      Console.Write("Enter a new log to create (eg: MyLog ): ");
	      myInstaller.Log = Console.ReadLine();
	      Console.Write("Enter a source for log (eg: MySource ): ");
	      myInstaller.Source = Console.ReadLine();
	      Installers.Add( myInstaller );
	      base.Install(savedState);
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	   public override void Uninstall(IDictionary savedState)
	   {
	      Console.Write("Enter a source from log to uninstall(eg: MySource ): ");
	      myInstaller.Source = Console.ReadLine();
	
	      Console.Write("Do you want to uninstall, press 'y' for 'YES' and 'n' for 'NO':");
	      string myUninstall = Console.ReadLine();
	     
	      if( myUninstall == "n" )
	      {
	         myInstaller.UninstallAction = System.Configuration.Install.UninstallAction.NoAction;
	      }
	      else
	      {
	         myInstaller.UninstallAction = System.Configuration.Install.UninstallAction.Remove;
	      }
	      Installers.Add( myInstaller );
	      base.Uninstall(savedState);
	   }
	   public static void Main()
	   {
	      Console.WriteLine("Syntax for install: installutil.exe UninstallAction_NoAction_Remove_3.exe ");
	      Console.WriteLine("Syntax for uninstall: installutil.exe /u "
	         +"UninstallAction_NoAction_Remove_3.exe ");
	   }
	
	}

snippet isdefaultattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IsDefaultAttribute/defattr.cs

	using System;
	using System.Reflection;
	
	namespace DefAttrCS 
	{
	    public enum Animal 
	    {
	        Dog = 1,
	        Cat,
	        Bird,
	    }
	
	    public class AnimalTypeAttribute : Attribute 
	    {
	        public AnimalTypeAttribute(Animal pet) 
	        {
	            thePet = pet;
	        }
	
	        public AnimalTypeAttribute() 
	        {
	            thePet = Animal.Dog;
	        }
	
	        protected Animal thePet;
	
	        public Animal Pet 
	        {
	            get { return thePet; }
	            set { thePet = Pet; }
	        }
	
	        public override bool IsDefaultAttribute() 
	        {
	            if (thePet == Animal.Dog)
	                return true;
	
	            return false;
	        }
	    }
	
	    public class TestClass 
	    {
	        [AnimalType]
	        public void Method1()
	        {}
	    }
	
	    class DemoClass 
	    {
	        static void Main(string[] args) 
	        {
	            Type clsType = typeof(TestClass);
	            MethodInfo mInfo = clsType.GetMethod("Method1");
	            AnimalTypeAttribute atAttr = 
	                (AnimalTypeAttribute)Attribute.GetCustomAttribute(mInfo,
	                typeof(AnimalTypeAttribute));
	            Console.WriteLine("The attribute {0} for method {1} in class {2}",
	                atAttr.Pet, mInfo.Name, clsType.Name); 
	            Console.WriteLine("{0} the default for the AnimalType attribute.", 
	                atAttr.IsDefaultAttribute() ? "is" : "is not");
	        }
	    }
	}
snippet security_cryptography_md5cryptoserviceprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Security_Cryptography_MD5CryptoServiceProvider/example.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	class Example
	{
	    static string getMd5Hash(string input)
	    {
	        MD5CryptoServiceProvider md5Hasher = new MD5CryptoServiceProvider();
	
	        byte[] data = md5Hasher.ComputeHash(Encoding.Default.GetBytes(input));
	
	        StringBuilder sBuilder = new StringBuilder();
	
	        for (int i = 0; i < data.Length; i++)
	        {
	            sBuilder.Append(data[i].ToString("x2"));
	        }
	
	        return sBuilder.ToString();
	    }
	
	    static bool verifyMd5Hash(string input, string hash)
	    {
	        string hashOfInput = getMd5Hash(input);
	
	        StringComparer comparer = StringComparer.OrdinalIgnoreCase;
	
	        if (0 == comparer.Compare(hashOfInput, hash))
	        {
	            return true;
	        }
	        else
	        {
	            return false;
	        }
	    }
	
	
	    static void Main()
	    {
	        string source = "Hello World!";
	        
	        string hash = getMd5Hash(source);
	
	        Console.WriteLine("The MD5 hash of " + source + " is: " + hash + ".");
	
	        Console.WriteLine("Verifying the hash...");
	
	        if (verifyMd5Hash(source, hash))
	        {
	            Console.WriteLine("The hashes are the same.");
	        }
	        else
	        {
	            Console.WriteLine("The hashes are not same.");
	        }
	        
	    }
	}
snippet strings_creating

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Strings_Creating/Example.cs

	using System;
	
	[assembly: CLSCompliant(true)]
	public class Class1
	{
	   public static void Main()
	   {
	      UseStringFormat();
	      Console.WriteLine();
	      UseStringConcat();
	      Console.WriteLine();
	      UseStringJoin();
	      Console.WriteLine();
	      UseStringInsert();
	      Console.WriteLine();
	      UseStringCopyTo();
	   }
	
	   private static void UseStringFormat()
	   {   
	      int numberOfFleas = 12;
	      string miscInfo = String.Format("Your dog has {0} fleas. " +
	                                      "It is time to get a flea collar. " + 
	                                      "The current universal date is: {1:u}.", 
	                                      numberOfFleas, DateTime.Now);
	      Console.WriteLine(miscInfo);
	   }
	
	   private static void UseStringConcat()
	   {
	      string helloString1 = "Hello";
	      string helloString2 = "World!";
	      Console.WriteLine(String.Concat(helloString1, ' ', helloString2));
	   }
	
	   private static void UseStringJoin()
	   {
	      string[] words = {"Hello", "and", "welcome", "to", "my" , "world!"};
	      Console.WriteLine(String.Join(" ", words));
	   }
	
	   private static void UseStringInsert()
	   {
	     string sentence = "Once a time.";   
	      Console.WriteLine(sentence.Insert(4, " upon"));
	   }
	
	   private static void UseStringCopyTo()
	   {
	      string greeting = "Hello World!";
	      char[] charArray = {'W','h','e','r','e'};
	      Console.WriteLine("The original character array: {0}", new string(charArray));
	      greeting.CopyTo(0, charArray,0 ,5);
	      Console.WriteLine("The new character array: {0}", new string(charArray));
	   }
	}

snippet codeattributeargumentcollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeAttributeArgumentCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	
	namespace CodeAttributeArgumentCollectionExample
	{
		public class Class1
		{
			public Class1()
			{
			}
	
	        public void CodeAttributeArgumentCollectionExample()
	        {
	            CodeAttributeArgumentCollection collection = new CodeAttributeArgumentCollection();
	
	            collection.Add( new CodeAttributeArgument("Test Boolean Argument", new CodePrimitiveExpression(true)) );
	
	            CodeAttributeArgument[] arguments = { new CodeAttributeArgument(), new CodeAttributeArgument() };
	            collection.AddRange( arguments );
	
	            CodeAttributeArgumentCollection argumentsCollection = new CodeAttributeArgumentCollection();
	            argumentsCollection.Add( new CodeAttributeArgument("TestBooleanArgument", new CodePrimitiveExpression(true)) );
	            argumentsCollection.Add( new CodeAttributeArgument("TestIntArgument", new CodePrimitiveExpression(1)) );
	            collection.AddRange( argumentsCollection );
	
	            CodeAttributeArgument testArgument = new CodeAttributeArgument("Test Boolean Argument", new CodePrimitiveExpression(true));
	            int itemIndex = -1;
	            if( collection.Contains( testArgument ) )
	                itemIndex = collection.IndexOf( testArgument );
	
	            collection.CopyTo( arguments, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CodeAttributeArgument("Test Boolean Argument", new CodePrimitiveExpression(true)) );
	
	            CodeAttributeArgument argument = new CodeAttributeArgument("Test Boolean Argument", new CodePrimitiveExpression(true));
	            collection.Remove( argument );
	
	            collection.RemoveAt(0);
	        }
		}
	} 
snippet codetrycatchfinallyexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeTryCatchFinallyExample/codetrycatchfinallyexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeTryCatchFinallyExample
	    {
	        public CodeTryCatchFinallyExample()
	        {
	            CodeTypeDeclaration type1 = new CodeTypeDeclaration("TryCatchTest");
	
	            CodeMemberMethod method1 = new CodeMemberMethod();
	            method1.Name = "ThrowApplicationException";
	            method1.Statements.Add( new CodeThrowExceptionStatement( 
	                new CodeObjectCreateExpression("System.ApplicationException", new CodePrimitiveExpression("Test Application Exception")) ) );
	            type1.Members.Add( method1 );
	
	            CodeConstructor constructor1 = new CodeConstructor();
	            constructor1.Attributes = MemberAttributes.Public;            
	            type1.Members.Add( constructor1 );    
	        
	            CodeTryCatchFinallyStatement try1 = new CodeTryCatchFinallyStatement();
	            try1.TryStatements.Add( new CodeMethodInvokeExpression( new CodeThisReferenceExpression(), "ThrowApplicationException" ) );
	            constructor1.Statements.Add( try1 );                    
	
	            CodeCatchClause catch1 = new CodeCatchClause("ex", new CodeTypeReference("System.ApplicationException"));
	            catch1.Statements.Add( new CodeCommentStatement("Handle any System.ApplicationException here.") );
	            try1.CatchClauses.Add( catch1 );
	            
	            CodeCatchClause catch2 = new CodeCatchClause("ex");
	            catch2.Statements.Add( new CodeCommentStatement("Handle any other exception type here.") );
	            try1.CatchClauses.Add( catch2 );
	        
	            try1.FinallyStatements.Add( new CodeCommentStatement("Handle any finally block statements.") );
	        
	    
	
	        }
	    }
	}
snippet conceptual_strings_comparing

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_comparing/index1.cs

	using System;
	using System.Globalization;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      string str1 = "æble";
	      string str2 = "aeble";
	      char find = 'æ';
	
	      CultureInfo[] cultures = { CultureInfo.CreateSpecificCulture("da-DK"), 
	                                 CultureInfo.CreateSpecificCulture("en-US") };
	
	      foreach (var ci in cultures) {
	         Thread.CurrentThread.CurrentCulture = ci;
	                                                  
	         int result1 = ci.CompareInfo.IndexOf(str1, find);
	         int result2 = ci.CompareInfo.IndexOf(str2, find);
	         int result3 = ci.CompareInfo.IndexOf(str1, find,  
	                                              CompareOptions.Ordinal);
	         int result4 = ci.CompareInfo.IndexOf(str2, find, 
	                                              CompareOptions.Ordinal);      
	   
	         Console.WriteLine("\nThe current culture is {0}", 
	                           CultureInfo.CurrentCulture.Name);
	         Console.WriteLine("\n   CompareInfo.IndexOf(string, char) method:");
	         Console.WriteLine("   Position of {0} in the string {1}: {2}", 
	                           find, str1, result1);
	
	         Console.WriteLine("\n   CompareInfo.IndexOf(string, char) method:");
	         Console.WriteLine("   Position of {0} in the string {1}: {2}", 
	                           find, str2, result2);
	
	         Console.WriteLine("\n   CompareInfo.IndexOf(string, char, CompareOptions.Ordinal) method");
	         Console.WriteLine("   Position of {0} in the string {1}: {2}", 
	                           find, str1, result3);
	
	         Console.WriteLine("\n   CompareInfo.IndexOf(string, char, CompareOptions.Ordinal) method");
	         Console.WriteLine("   Position of {0} in the string {1}: {2}", 
	                           find, str2, result4);
	         Console.WriteLine();
	      }   
	   }
	}
snippet conceptual_observerdesign_howto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_observerdesign_howto/provider.cs

	using System.Threading;
	using System;
	using System.Collections.Generic;
	
	public class TemperatureMonitor : IObservable<Temperature>
	{
	   List<IObserver<Temperature>> observers;
	
	   public TemperatureMonitor()
	   {
	      observers = new List<IObserver<Temperature>>();
	   }
	
	   private class Unsubscriber : IDisposable
	   {
	      private List<IObserver<Temperature>> _observers;
	      private IObserver<Temperature> _observer;
	
	      public Unsubscriber(List<IObserver<Temperature>> observers, IObserver<Temperature> observer)
	      {
	         this._observers = observers;
	         this._observer = observer;
	      }
	
	      public void Dispose() 
	      {
	         if (! (_observer == null)) _observers.Remove(_observer);
	      }
	   }
	
	   public IDisposable Subscribe(IObserver<Temperature> observer)
	   {
	      if (! observers.Contains(observer))
	         observers.Add(observer);
	
	      return new Unsubscriber(observers, observer);
	   }
	
	   public void GetTemperature()
	   {
	      Nullable<Decimal>[] temps = {14.6m, 14.65m, 14.7m, 14.9m, 14.9m, 15.2m, 15.25m, 15.2m,
	                                   15.4m, 15.45m, null };
	      Nullable<Decimal> previous = null;
	      bool start = true;
	
	      foreach (var temp in temps) {
	         System.Threading.Thread.Sleep(2500);
	         if (temp.HasValue) {
	            if (start || (Math.Abs(temp.Value - previous.Value) >= 0.1m )) {
	               Temperature tempData = new Temperature(temp.Value, DateTime.Now);
	               foreach (var observer in observers)
	                  observer.OnNext(tempData);
	               previous = temp;
	               if (start) start = false;
	            }
	         }
	         else {
	            foreach (var observer in observers.ToArray())
	               if (observer != null) observer.OnCompleted();
	
	            observers.Clear();
	            break;
	         }
	      }
	   }
	}
snippet codeparameterdeclarationexpressioncollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeParameterDeclarationExpressionCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	
	namespace CodeParameterDeclarationExpressionCollectionExample
	{
		public class Class1
		{
			public Class1()
			{			
			}
	
	        public void CodeParameterDeclarationExpressionCollectionExample()
	        {
	            CodeParameterDeclarationExpressionCollection collection = new CodeParameterDeclarationExpressionCollection();
	
	            collection.Add( new CodeParameterDeclarationExpression(typeof(int), "testIntArgument") );
	
	            CodeParameterDeclarationExpression[] parameters = { new CodeParameterDeclarationExpression(typeof(int), "testIntArgument"), new CodeParameterDeclarationExpression(typeof(bool), "testBoolArgument") };
	            collection.AddRange( parameters );
	
	            CodeParameterDeclarationExpressionCollection parametersCollection = new CodeParameterDeclarationExpressionCollection();
	            parametersCollection.Add( new CodeParameterDeclarationExpression(typeof(int), "testIntArgument") );
	            parametersCollection.Add( new CodeParameterDeclarationExpression(typeof(bool), "testBoolArgument") );
	            collection.AddRange( parametersCollection );
	
	            CodeParameterDeclarationExpression testParameter = new CodeParameterDeclarationExpression(typeof(int), "testIntArgument");
	            int itemIndex = -1;
	            if( collection.Contains( testParameter ) )
	                itemIndex = collection.IndexOf( testParameter );
	
	            collection.CopyTo( parameters, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CodeParameterDeclarationExpression(typeof(int), "testIntArgument") );
	
	            CodeParameterDeclarationExpression parameter = new CodeParameterDeclarationExpression(typeof(int), "testIntArgument");
	            collection.Remove( parameter );
	
	            collection.RemoveAt(0);
	        }
		}
	} 
snippet diag_process_memoryproperties64

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/source.cs

	
	using System;
	using System.Diagnostics;
	
	namespace ProcessSample
	{
	    class ProcessMonitorSample
	    {
	        public static void Main()
	        {
	            long peakPagedMem   = 0,
	                 peakWorkingSet = 0,
	                 peakVirtualMem = 0;
	
	            using (Process myProcess = Process.Start("NotePad.exe"))
	            {
	                do
	                {
	                    if (!myProcess.HasExited)
	                    {
	                        myProcess.Refresh();
	
	                        Console.WriteLine();
	
	
	                        Console.WriteLine($"{myProcess} -");
	                        Console.WriteLine("-------------------------------------");
	
	                        Console.WriteLine($"  Physical memory usage     : {myProcess.WorkingSet64}");
	                        Console.WriteLine($"  Base priority             : {myProcess.BasePriority}");
	                        Console.WriteLine($"  Priority class            : {myProcess.PriorityClass}");
	                        Console.WriteLine($"  User processor time       : {myProcess.UserProcessorTime}");
	                        Console.WriteLine($"  Privileged processor time : {myProcess.PrivilegedProcessorTime}");
	                        Console.WriteLine($"  Total processor time      : {myProcess.TotalProcessorTime}");
	                        Console.WriteLine($"  Paged system memory size  : {myProcess.PagedSystemMemorySize64}");
	                        Console.WriteLine($"  Paged memory size         : {myProcess.PagedMemorySize64}");
	
	                        peakPagedMem   = myProcess.PeakPagedMemorySize64;
	                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;
	                        peakWorkingSet = myProcess.PeakWorkingSet64;
	
	                        if (myProcess.Responding)
	                        {
	                            Console.WriteLine("Status = Running");
	                        }
	                        else
	                        {
	                            Console.WriteLine("Status = Not Responding");
	                        }
	                    }
	                }
	                while (!myProcess.WaitForExit(1000));
	
	
	                Console.WriteLine();
	                Console.WriteLine($"  Process exit code          : {myProcess.ExitCode}");
	
	                Console.WriteLine($"  Peak physical memory usage : {peakWorkingSet}");
	                Console.WriteLine($"  Peak paged memory usage    : {peakPagedMem}");
	                Console.WriteLine($"  Peak virtual memory usage  : {peakVirtualMem}");
	            }
	        }
	    }
	}

snippet sys_glob_sortkey_compare

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_sortkey_compare/skcmp.cs

	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string lowerABC = "abc";
	    string upperABC = "ABC";
	    int result = 0;
	
	    Console.WriteLine("\nCreate a CompareInfo object for the en-US culture...\n");
	    CompareInfo cmpi = CompareInfo.GetCompareInfo("en-US");
	
	    SortKey sk1LowerIgnCase = cmpi.GetSortKey(lowerABC, CompareOptions.IgnoreCase);
	    SortKey sk2UpperIgnCase = cmpi.GetSortKey(upperABC, CompareOptions.IgnoreCase);
	
	    SortKey sk1LowerUseCase = cmpi.GetSortKey(lowerABC, CompareOptions.None);
	    SortKey sk2UpperUseCase = cmpi.GetSortKey(upperABC, CompareOptions.None);
	
	    result = cmpi.Compare(lowerABC, upperABC, CompareOptions.IgnoreCase);
	    Display(result, "CompareInfo, Ignore case", lowerABC, upperABC);
	    result = SortKey.Compare(sk1LowerIgnCase, sk2UpperIgnCase);
	    Display(result, "SortKey, Ignore case", lowerABC, upperABC);
	    Console.WriteLine();
	
	    result = cmpi.Compare(lowerABC, upperABC, CompareOptions.None);
	    Display(result, "CompareInfo, Use case", lowerABC, upperABC);
	    result = SortKey.Compare(sk1LowerUseCase, sk2UpperUseCase);
	    Display(result, "SortKey, Use case", lowerABC, upperABC);
	    }
	
	    private static void Display(int compareResult, string title, 
	                                string lower, string upper)
	    {
	    string lessThan    = "less than ";
	    string equalTo     = "equal to ";
	    string greaterThan = "greater than ";
	    string resultPhrase = null;
	    string format = "{0}:\n    \"{1}\" is {2}\"{3}\".";
	
	    if      (compareResult < 0) resultPhrase = lessThan;
	    else if (compareResult > 0) resultPhrase = greaterThan;
	    else                        resultPhrase = equalTo;
	    Console.WriteLine(format, title, lower, resultPhrase, upper);
	    }
	}
	/*
	This code example produces the following results:
	
	Create a CompareInfo object for the en-US culture...
	
	CompareInfo, Ignore case:
	    "abc" is equal to "ABC".
	SortKey, Ignore case:
	    "abc" is equal to "ABC".
	
	CompareInfo, Use case:
	    "abc" is less than "ABC".
	SortKey, Use case:
	    "abc" is less than "ABC".
	
	*/
snippet fieldinfo_getfieldfromhandle2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle2/source.cs

	using System;
	using System.Reflection;
	
	public class Test<T>
	{
	    public T TestField;
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        RuntimeTypeHandle rth = typeof(Test<string>).TypeHandle;
	        RuntimeFieldHandle rfh = typeof(Test<string>).GetField("TestField").FieldHandle;
	
	        try
	        {
	            FieldInfo f1 = FieldInfo.GetFieldFromHandle(rfh);
	        }
	        catch(Exception ex)
	        {
	            Console.WriteLine("{0}: {1}", ex.GetType().Name, ex.Message);
	        }
	
	        FieldInfo fi = FieldInfo.GetFieldFromHandle(rfh, rth);
	        Console.WriteLine("\r\nThe type of {0} is: {1}", fi.Name, fi.FieldType);
	
	        fi = FieldInfo.GetFieldFromHandle(rfh, typeof(Test<object>).TypeHandle);
	        Console.WriteLine("\r\nThe type of {0} is: {1}", fi.Name, fi.FieldType);
	
	        try
	        {
	            fi = FieldInfo.GetFieldFromHandle(rfh, typeof(Test<int>).TypeHandle);
	        }
	        catch(Exception ex)
	        {
	            Console.WriteLine("\r\n{0}: {1}", ex.GetType().Name, ex.Message);
	        }
	    }
	}
	
	/* This code example produces output similar to the following:
	
	ArgumentException: Cannot resolve field TestField because the declaring type of
	the field handle Test`1[T] is generic. Explicitly provide the declaring type to
	GetFieldFromHandle.
	
	The type of TestField is: System.String
	
	The type of TestField is: System.Object
	
	ArgumentException: Type handle 'Test`1[System.Int32]' and field handle with decl
	aring type 'Test`1[System.__Canon]' are incompatible. Get RuntimeFieldHandle and
	 declaring RuntimeTypeHandle off the same FieldInfo.
	 */
	
	

snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/activedir.cs

	using System;
	using System.Runtime.InteropServices;
	
	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
	public struct DsBrowseInfo
	{
	    public const int MAX_PATH = 256;
	
	    public int    Size;
	    public IntPtr OwnerHandle;
	    public string Caption;
	    public string Title;
	    public string Root;
	    public string Path;
	    public int    PathSize;
	    public int    Flags;
	    public IntPtr Callback;
	    public int    Param;
	    public int    ReturnFormat;
	    public string UserName;
	    public string Password;
	    public string ObjectClass;
	    public int    ObjectClassSize;
	}
	
	public class LibWrap
	{
	    [DllImport("dsuiext.dll", CharSet = CharSet.Unicode)]
	    public static extern int DsBrowseForContainerW(ref DsBrowseInfo info);
	
	    public const int DSBI_ENTIREDIRECTORY = 0x00090000;
	    public const int ADS_FORMAT_WINDOWS = 1;
	
	    public enum BrowseStatus
	    {
	        BrowseError = -1,
	        BrowseOk = 1,
	        BrowseCancel = 2
	    }
	}
	
	class App
	{
	    [STAThread]
	    public static void Main()
	    {
	        DsBrowseInfo dsbi = new DsBrowseInfo
	        {
	            Size = Marshal.SizeOf(typeof(DsBrowseInfo)),
	            PathSize = DsBrowseInfo.MAX_PATH,
	            Caption = "Container Selection Example",
	            Title = "Select a container from the list.",
	            ReturnFormat = LibWrap.ADS_FORMAT_WINDOWS,
	            Flags = LibWrap.DSBI_ENTIREDIRECTORY,
	            Root = "LDAP:",
	            Path = new string(new char[DsBrowseInfo.MAX_PATH])
	        };
	
	        int status = LibWrap.DsBrowseForContainerW(ref dsbi);
	        if ((LibWrap.BrowseStatus)status == LibWrap.BrowseStatus.BrowseOk)
	        {
	            Console.WriteLine(dsbi.Path);
	        }
	        else
	        {
	            Console.WriteLine("No path returned.");
	        }
	    }
	}

snippet codestatementcollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeStatementCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	
	namespace CodeStatementCollectionExample
	{
	    public class Class1
	    {
	        public Class1()
	        {
	        }
	        
	        public void CodeStatementCollectionSample()
	        {
	            CodeStatementCollection collection = new CodeStatementCollection();
	
	            collection.Add( new CodeCommentStatement("Test comment statement") );
	
	            CodeStatement[] statements = { 
	                            new CodeCommentStatement("Test comment statement"), 
	                            new CodeCommentStatement("Test comment statement")};
	            collection.AddRange( statements );
	
	            CodeStatement testStatement = new CodeCommentStatement("Test comment statement");
	            CodeStatementCollection statementsCollection = new CodeStatementCollection();
	            statementsCollection.Add( new CodeCommentStatement("Test comment statement") );
	            statementsCollection.Add( new CodeCommentStatement("Test comment statement") );
	            statementsCollection.Add( testStatement );
	
	            collection.AddRange( statementsCollection );
	
	            int itemIndex = -1;
	            if( collection.Contains( testStatement ) )
	                itemIndex = collection.IndexOf( testStatement );
	
	
	            CodeStatement[] statementArray = new CodeStatement[collection.Count];
	            collection.CopyTo( statementArray, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CodeCommentStatement("Test comment statement") );
	
	            collection.Remove( testStatement );
	
	            collection.RemoveAt(0);
	        }
	    }
	} 
snippet appdomain_typeresolve

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomain_TypeResolve/typeresolve.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	class Test 
	{
	    private static AssemblyBuilder ab;
	    private static string moduleName;
	
	    public static void Main() 
	    {
	        AppDomain currDom = AppDomain.CurrentDomain;
	
	        AssemblyName aName = new AssemblyName();
	        aName.Name = "Transient";
	        moduleName = aName.Name + ".dll";
	        ab = currDom.DefineDynamicAssembly(aName,
	            AssemblyBuilderAccess.Save);
	        ModuleBuilder mb = ab.DefineDynamicModule(aName.Name, moduleName);
	
	        TypeBuilder tb = mb.DefineType("Example");
	        tb.CreateType();
	
	
	        try
	        {
	            Type temp = Type.GetType("Example", true);
	            Console.WriteLine("Loaded type {0}.", temp);
	        }
	        catch (TypeLoadException)
	        {
	            Console.WriteLine("Loader could not resolve the type.");
	        }
	
	        currDom.TypeResolve += 
	            new ResolveEventHandler(HandleTypeResolve);
	
	        Type t = Type.GetType("Example", true);
	        Console.WriteLine("Loaded type \"{0}\".", t);
	        Object o = Activator.CreateInstance(t);
	    }
	
	    static Assembly HandleTypeResolve(object sender, ResolveEventArgs args) 
	    {
	        Console.WriteLine("TypeResolve event handler.");
	
	        ab.Save(moduleName);
	        return Assembly.Load(ab.FullName); 
	    }
	}
	
	/* This code example produces the following output:
	
	Loader could not resolve the type.
	TypeResolve event handler.
	Loaded type "Example".
	 */
snippet console_read

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_read/read.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string m1 = "\nType a string of text then press Enter. " +
	                "Type '+' anywhere in the text to quit:\n";
	    string m2 = "Character '{0}' is hexadecimal 0x{1:x4}.";
	    string m3 = "Character     is hexadecimal 0x{0:x4}.";
	    char ch;
	    int x;
	    Console.WriteLine(m1);
	    do  
	        {
	        x = Console.Read();
	        try 
	            {
	            ch = Convert.ToChar(x);
	            if (Char.IsWhiteSpace(ch))
	               {
	               Console.WriteLine(m3, x);
	               if (ch == 0x0a) 
	                   Console.WriteLine(m1);
	               }
	            else
	               Console.WriteLine(m2, ch, x);
	            }
	        catch (OverflowException e) 
	            {
	            Console.WriteLine("{0} Value read = {1}.", e.Message, x);
	            ch = Char.MinValue;
	            Console.WriteLine(m1);
	            }
	        } while (ch != '+');
	    }
	}
	/*
	This example produces the following results:
	
	Type a string of text then press Enter. Type '+' anywhere in the text to quit:
	
	The quick brown fox.
	Character 'T' is hexadecimal 0x0054.
	Character 'h' is hexadecimal 0x0068.
	Character 'e' is hexadecimal 0x0065.
	Character     is hexadecimal 0x0020.
	Character 'q' is hexadecimal 0x0071.
	Character 'u' is hexadecimal 0x0075.
	Character 'i' is hexadecimal 0x0069.
	Character 'c' is hexadecimal 0x0063.
	Character 'k' is hexadecimal 0x006b.
	Character     is hexadecimal 0x0020.
	Character 'b' is hexadecimal 0x0062.
	Character 'r' is hexadecimal 0x0072.
	Character 'o' is hexadecimal 0x006f.
	Character 'w' is hexadecimal 0x0077.
	Character 'n' is hexadecimal 0x006e.
	Character     is hexadecimal 0x0020.
	Character 'f' is hexadecimal 0x0066.
	Character 'o' is hexadecimal 0x006f.
	Character 'x' is hexadecimal 0x0078.
	Character '.' is hexadecimal 0x002e.
	Character     is hexadecimal 0x000d.
	Character     is hexadecimal 0x000a.
	
	Type a string of text then press Enter. Type '+' anywhere in the text to quit:
	
	^Z
	Value was either too large or too small for a character. Value read = -1.
	
	Type a string of text then press Enter. Type '+' anywhere in the text to quit:
	
	+
	Character '+' is hexadecimal 0x002b.
	
	*/
snippet makexxxgenerictypeparameterbuilder

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using Microsoft.VisualBasic;
	
	public class Example
	{
	    public static void Main()
	    {
	        AppDomain myDomain = AppDomain.CurrentDomain;
	        AssemblyName myAsmName = new 
	            AssemblyName("MakeXxxGenericTypeParameterExample");
	        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(
	            myAsmName, AssemblyBuilderAccess.Save);
	
	        ModuleBuilder myModule = myAssembly.DefineDynamicModule(
	            myAsmName.Name, myAsmName.Name + ".dll");
	
	        TypeBuilder myType = myModule.DefineType("Sample", 
	            TypeAttributes.Public | TypeAttributes.Abstract);
	
	        string[] typeParamNames = {"T"};
	        GenericTypeParameterBuilder[] typeParams = 
	            myType.DefineGenericParameters(typeParamNames);
	
	        Type byRefType = typeParams[0].MakeByRefType();
	        Type pointerType = typeParams[0].MakePointerType();
	        Type arrayType = typeParams[0].MakeArrayType();
	        Type twoDimArrayType = typeParams[0].MakeArrayType(2);
	
	        Type[] parameterTypes = {byRefType, pointerType, arrayType};
	
	        MethodBuilder myMethodBuilder = myType.DefineMethod(
	            "TestMethod", 
	            MethodAttributes.Abstract | MethodAttributes.Virtual
	            | MethodAttributes.Public, 
	            twoDimArrayType, 
	            parameterTypes);
	
	        myType.CreateType();
	        myAssembly.Save(myAsmName.Name + ".dll");
	    }
	}
	
	

snippet reflection_dynamicmethod_ctor1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Reflection_DynamicMethod_ctor1/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using Microsoft.VisualBasic;
	
	public class Test
	{
	    private delegate int HelloInvoker(string msg, int ret);
	
	    public static void Main()
	    {
	        Type[] helloArgs = {typeof(string), typeof(int)};
	
	        DynamicMethod hello = new DynamicMethod("Hello", 
	            typeof(int), 
	            helloArgs, 
	            typeof(Test).Module);
	
	        Type[] writeStringArgs = {typeof(string)};
	        MethodInfo writeString = 
	            typeof(Console).GetMethod("WriteLine", writeStringArgs);
	
	        ILGenerator il = hello.GetILGenerator();
	        il.Emit(OpCodes.Ldarg_0);
	        il.EmitCall(OpCodes.Call, writeString, null);
	        il.Emit(OpCodes.Ldarg_1);
	        il.Emit(OpCodes.Ret);
	
	        HelloInvoker hi = 
	            (HelloInvoker) hello.CreateDelegate(typeof(HelloInvoker));
	
	        int retval = hi("\r\nHello, World!", 42);
	        Console.WriteLine("Executing delegate hi(\"Hello, World!\", 42) returned {0}",
	            retval);
	
	        retval = hi("\r\nHi, Mom!", 5280);
	        Console.WriteLine("Executing delegate hi(\"Hi, Mom!\", 5280) returned {0}",
	            retval);
	        
	        object[] invokeArgs = {"\r\nHello, World!", 42};
	        object objRet = hello.Invoke(null, invokeArgs);
	        Console.WriteLine("hello.Invoke returned {0}", objRet);
	    }
	}
snippet icomparable_example

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IComparable_Example/source.cs

	using System;
	using System.Collections;
	
	public class Temperature : IComparable 
	{
	    protected double temperatureF;
	
	    public int CompareTo(object obj) {
	        if (obj == null) return 1;
	        
	        Temperature otherTemperature = obj as Temperature;
	        if (otherTemperature != null) 
	            return this.temperatureF.CompareTo(otherTemperature.temperatureF);
	        else
	           throw new ArgumentException("Object is not a Temperature");
	    }
	
	    public double Fahrenheit 
	    {
	        get 
	        {
	            return this.temperatureF;
	        }
	        set {
	            this.temperatureF = value;
	        }
	    }
	
	    public double Celsius 
	    {
	        get 
	        {
	            return (this.temperatureF - 32) * (5.0/9);
	        }
	        set 
	        {
	            this.temperatureF = (value * 9.0/5) + 32;
	        }
	    }
	}
	
	public class CompareTemperatures
	{
	   public static void Main()
	   {
	      ArrayList temperatures = new ArrayList();
	      Random rnd = new Random();
	      
	      for (int ctr = 1; ctr <= 10; ctr++)
	      {
	         int degrees = rnd.Next(0, 100);
	         Temperature temp = new Temperature();
	         temp.Fahrenheit = degrees;
	         temperatures.Add(temp);   
	      }
	
	      temperatures.Sort();
	      
	      foreach (Temperature temp in temperatures)
	         Console.WriteLine(temp.Fahrenheit);
	            
	   }
	}

snippet conceptual_observerdesignpattern

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_observerdesignpattern/observer.cs

	using System;
	using System.Collections.Generic;
	
	public class ArrivalsMonitor : IObserver<BaggageInfo>
	{
	   private string name;
	   private List<string> flightInfos = new List<string>();
	   private IDisposable cancellation;
	   private string fmt = "{0,-20} {1,5}  {2, 3}";
	
	   public ArrivalsMonitor(string name)
	   {
	      if (String.IsNullOrEmpty(name))
	         throw new ArgumentNullException("The observer must be assigned a name.");
	
	      this.name = name;
	   }
	
	   public virtual void Subscribe(BaggageHandler provider)
	   {
	      cancellation = provider.Subscribe(this);
	   }
	
	   public virtual void Unsubscribe()
	   {
	      cancellation.Dispose();
	      flightInfos.Clear();
	   }
	
	   public virtual void OnCompleted() 
	   {
	      flightInfos.Clear();
	   }
	
	   public virtual void OnError(Exception e)
	   {
	   }
	
	   public virtual void OnNext(BaggageInfo info) 
	   {
	      bool updated = false;
	
	      if (info.Carousel == 0) {
	         var flightsToRemove = new List<string>();
	         string flightNo = String.Format("{0,5}", info.FlightNumber);
	         
	         foreach (var flightInfo in flightInfos) {
	            if (flightInfo.Substring(21, 5).Equals(flightNo)) {
	               flightsToRemove.Add(flightInfo);
	               updated = true;
	            }
	         }
	         foreach (var flightToRemove in flightsToRemove)
	            flightInfos.Remove(flightToRemove);
	
	         flightsToRemove.Clear();
	      }
	      else {
	         string flightInfo = String.Format(fmt, info.From, info.FlightNumber, info.Carousel);
	         if (! flightInfos.Contains(flightInfo)) {
	            flightInfos.Add(flightInfo);
	            updated = true;
	         }
	      }
	      if (updated) {
	         flightInfos.Sort();
	         Console.WriteLine("Arrivals information from {0}", this.name);
	         foreach (var flightInfo in flightInfos)
	            Console.WriteLine(flightInfo);
	
	         Console.WriteLine();
	      }
	   }
	}

snippet fieldbuilder_reflectedtype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldBuilder_ReflectedType/fieldbuilder_reflectedtype.cs

	
	/*
	   The following example demonstrates 'ReflectedType' and 'Attributes'
	   properties of 'FieldBuilder' class.A new class 'MyClass' is created.
	   A  Field and a method are defined in the class.In the constructor of the class
	   the field is initialized.Method of the class gets the value of the Field.
	   An instance of the class is created and method is invoked.
	*/
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	
	public class FieldBuilder_Sample
	{
	   private static Type CreateType(AppDomain currentDomain)
	   {
	
	
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "DynamicAssembly";
	      AssemblyBuilder myAssembly =
	         currentDomain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.Run);
	      ModuleBuilder myModuleBuilder=myAssembly.DefineDynamicModule("MyModule");
	      TypeBuilder myTypeBuilder= myModuleBuilder.DefineType("MyClass",TypeAttributes.Public);
	
	      FieldBuilder myFieldBuilder= myTypeBuilder.DefineField("MyField",
	         typeof(string),FieldAttributes.Private|FieldAttributes.Static);
	      Type[] constructorArgs = { typeof(String) };
	      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(
	         MethodAttributes.Public, CallingConventions.Standard, constructorArgs);
	      ILGenerator constructorIL = myConstructor.GetILGenerator();
	      constructorIL.Emit(OpCodes.Ldarg_0);
	      ConstructorInfo superConstructor = typeof(Object).GetConstructor(new Type[0]);
	      constructorIL.Emit(OpCodes.Call, superConstructor);
	      constructorIL.Emit(OpCodes.Ldarg_0);
	      constructorIL.Emit(OpCodes.Ldarg_1);
	      constructorIL.Emit(OpCodes.Stfld, myFieldBuilder);
	      constructorIL.Emit(OpCodes.Ret);
	
	      MethodBuilder myMethodBuilder= myTypeBuilder.DefineMethod("MyMethod",
	         MethodAttributes.Public,typeof(String),null);
	      ILGenerator methodIL = myMethodBuilder.GetILGenerator();
	      methodIL.Emit(OpCodes.Ldarg_0);
	      methodIL.Emit(OpCodes.Ldfld, myFieldBuilder);
	      methodIL.Emit(OpCodes.Ret);
	      if (myFieldBuilder.Attributes.Equals(FieldAttributes.Static))
	      {
	            Console.WriteLine("Field attribute defined as Static");
	      }
	      else if(myFieldBuilder.Attributes.Equals(FieldAttributes.Static|FieldAttributes.Private))
	      {
	         Console.WriteLine("Field attributes are Static and Private");
	      }
	      Console.WriteLine("ReflectedType of Field is: " + myFieldBuilder.ReflectedType);
	
	      return myTypeBuilder.CreateType();
	   }
	
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      Type myType = CreateType(Thread.GetDomain());
	      Object helloWorld = Activator.CreateInstance(myType, new Object[] { "HelloWorld" });
	      Object myObject  = myType.InvokeMember("MyMethod",
	         BindingFlags.InvokeMethod, null, helloWorld, null);
	      Console.WriteLine("MyClass.MyMethod returned: \"" + myObject + "\"");
	   }
	}
snippet parameterinfo_getcustomattributes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_GetCustomAttributes/source.cs

	using System;
	using System.Reflection;
	
	[AttributeUsage(AttributeTargets.Parameter)]
	public class MyAttribute : Attribute
	{
	    private string myName;
	    public MyAttribute(string name)
	    {
	        myName = name;
	    }
	    public string Name 
	    {
	        get 
	        {
	            return myName;
	        }
	    }
	}
	
	public class MyClass1
	{
	    public void MyMethod(
	        [MyAttribute("This is an example parameter attribute")]
	        int i)
	    {
	        return;
	    }
	}
	
	public class MemberInfo_GetCustomAttributes 
	{
	    public static void Main()
	    {
	        Type myType = typeof(MyClass1);
	        MethodInfo[] myMethods = myType.GetMethods();
	
	        for(int i = 0; i < myMethods.Length; i++)
	        {
	            ParameterInfo[] myParameters = myMethods[i].GetParameters();
	
	            if (myParameters.Length > 0)
	            {
	                Console.WriteLine("\nThe parameters for the method {0} that have custom attributes are :", myMethods[i]);
	                for(int j = 0; j < myParameters.Length; j++)
	                {
	                    Object[] myAttributes = myParameters[j].GetCustomAttributes(typeof(MyAttribute), false);
	 
	                    if (myAttributes.Length > 0)
	                    {
	                        Console.WriteLine("Parameter {0}, name = {1}, type = {2} has attributes: ", 
	                            myParameters[j].Position, myParameters[j].Name, myParameters[j].ParameterType);
	                        for(int k = 0; k < myAttributes.Length; k++)
	                        {
	                            Console.WriteLine("\t{0}", myAttributes[k]);
	                        }
	                    }
	                }
	            }
	        }  
	    }
	}
	/* This code example produces the following output:
	
	The parameters for the method Void MyMethod(Int32) that have custom attributes are :
	Parameter 0, name = i, type = System.Int32 has attributes:
	        MyAttribute
	
	The parameters for the method Boolean Equals(System.Object) that have custom attributes are :
	 */
	

snippet formatting_howto_millisecond

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_Millisecond/Millisecond.cs

	using System;
	using System.Globalization;
	using System.Text.RegularExpressions;
	
	public class MillisecondDisplay
	{
	   public static void Main()
	   {
	      string dateString = "7/16/2008 8:32:45.126 AM";
	      
	      try
	      {
	         DateTime dateValue = DateTime.Parse(dateString);
	         DateTimeOffset dateOffsetValue = DateTimeOffset.Parse(dateString);
	   
	         Console.WriteLine("Millisecond component only: {0}", 
	                           dateValue.ToString("fff"));
	         Console.WriteLine("Millisecond component only: {0}", 
	                           dateOffsetValue.ToString("fff"));
	   
	         Console.WriteLine("Date and Time with Milliseconds: {0}", 
	                           dateValue.ToString("MM/dd/yyyy hh:mm:ss.fff tt"));                        
	         Console.WriteLine("Date and Time with Milliseconds: {0}", 
	                           dateOffsetValue.ToString("MM/dd/yyyy hh:mm:ss.fff tt"));
	   
	         string fullPattern = DateTimeFormatInfo.CurrentInfo.FullDateTimePattern;
	         fullPattern = Regex.Replace(fullPattern, "(:ss|:s)", "$1.fff");
	         
	         Console.WriteLine("Modified full date time pattern: {0}", 
	                           dateValue.ToString(fullPattern));
	         Console.WriteLine("Modified full date time pattern: {0}",
	                           dateOffsetValue.ToString(fullPattern));
	      }
	      catch (FormatException)
	      {
	         Console.WriteLine("Unable to convert {0} to a date.", dateString);
	      }
	   }
	}
	
	public class AdditionalSnippets
	{
	   public static void Show()
	   {
	      DateTime dateValue = new DateTime(2008, 7, 16, 8, 32, 45, 180); 
	      Console.WriteLine(dateValue.ToString("fff"));    
	      Console.WriteLine(dateValue.ToString("FFF"));
	   }
	
	   public static void Show2()
	   {
	      DateTime dateValue = new DateTime(2008, 7, 16, 8, 32, 45, 180); 
	      Console.WriteLine("{0} seconds", dateValue.ToString("s.f"));
	      Console.WriteLine("{0} seconds", dateValue.ToString("s.ff"));      
	      Console.WriteLine("{0} seconds", dateValue.ToString("s.ffff"));
	   }
	}

snippet sys_glob_carib1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_carib1/carib.cs

	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	
	
	    CultureAndRegionInfoBuilder cib = null;
	    try {
	        cib = new CultureAndRegionInfoBuilder(
	                                          "x-en-US-sample",
	                                          CultureAndRegionModifiers.None);
	        }
	    catch (ArgumentException ae)
	        {
	        Console.WriteLine(ae);
	        return;
	        }
	
	
	    CultureInfo ci = new CultureInfo("en-US");
	    cib.LoadDataFromCultureInfo(ci);
	
	
	    RegionInfo  ri = new RegionInfo("US");
	    cib.LoadDataFromRegionInfo(ri);
	
	
	    Console.Clear();
	    Console.WriteLine("CultureName:. . . . . . . . . . {0}", cib.CultureName);
	    Console.WriteLine("CultureEnglishName: . . . . . . {0}", cib.CultureEnglishName);
	    Console.WriteLine("CultureNativeName:. . . . . . . {0}", cib.CultureNativeName);
	    Console.WriteLine("GeoId:. . . . . . . . . . . . . {0}", cib.GeoId);
	    Console.WriteLine("IsMetric: . . . . . . . . . . . {0}", cib.IsMetric);
	    Console.WriteLine("ISOCurrencySymbol:. . . . . . . {0}", cib.ISOCurrencySymbol);
	    Console.WriteLine("RegionEnglishName:. . . . . . . {0}", cib.RegionEnglishName);
	    Console.WriteLine("RegionName: . . . . . . . . . . {0}", cib.RegionName);
	    Console.WriteLine("RegionNativeName: . . . . . . . {0}", cib.RegionNativeName);
	    Console.WriteLine("ThreeLetterISOLanguageName: . . {0}", cib.ThreeLetterISOLanguageName);
	    Console.WriteLine("ThreeLetterISORegionName: . . . {0}", cib.ThreeLetterISORegionName);
	    Console.WriteLine("ThreeLetterWindowsLanguageName: {0}", cib.ThreeLetterWindowsLanguageName);
	    Console.WriteLine("ThreeLetterWindowsRegionName: . {0}", cib.ThreeLetterWindowsRegionName);
	    Console.WriteLine("TwoLetterISOLanguageName: . . . {0}", cib.TwoLetterISOLanguageName);
	    Console.WriteLine("TwoLetterISORegionName: . . . . {0}", cib.TwoLetterISORegionName);
	    }
	}
	/*
	This code example produces the following results:
	
	CultureName:. . . . . . . . . . x-en-US-sample
	CultureEnglishName: . . . . . . English
	CultureNativeName:. . . . . . . English
	GeoId:. . . . . . . . . . . . . 244
	IsMetric: . . . . . . . . . . . False
	ISOCurrencySymbol:. . . . . . . USD
	RegionEnglishName:. . . . . . . United States
	RegionName: . . . . . . . . . . US
	RegionNativeName: . . . . . . . United States
	ThreeLetterISOLanguageName: . . eng
	ThreeLetterISORegionName: . . . USA
	ThreeLetterWindowsLanguageName: ENU
	ThreeLetterWindowsRegionName: . USA
	TwoLetterISOLanguageName: . . . en
	TwoLetterISORegionName: . . . . US
	
	*/
snippet conceptual_resources_resx

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_resx/enumerate1.cs

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Resources;
	
	public class Example
	{
	   public static void Main()
	   {
	      string resxFile = @".\CarResources.resx";
	      List<Automobile> autos = new List<Automobile>();
	      SortedList headers = new SortedList();
	      
	      using (ResXResourceReader resxReader = new ResXResourceReader(resxFile))
	      {
	         foreach (DictionaryEntry entry in resxReader) {
	            if (((string) entry.Key).StartsWith("EarlyAuto"))
	               autos.Add((Automobile) entry.Value); 
	            else if (((string) entry.Key).StartsWith("Header")) 
	               headers.Add((string) entry.Key, (string) entry.Value);      
	         } 
	      }
	      string[] headerColumns = new string[headers.Count];
	      headers.GetValueList().CopyTo(headerColumns, 0);
	      Console.WriteLine("{0,-8} {1,-10} {2,-4}   {3,-5}   {4,-9}\n", 
	                        headerColumns);
	      foreach (var auto in autos)                        
	         Console.WriteLine("{0,-8} {1,-10} {2,4}   {3,5}   {4,9}", 
	                           auto.Make, auto.Model, auto.Year, 
	                           auto.Doors, auto.Cylinders);
	   }
	}
	
	
	[Serializable()] public class Automobile
	{
	   private string carMake;
	   private string carModel;
	   private int carYear;
	   private int carDoors;
	   private int carCylinders;
	   
	   public Automobile(string make, string model, int year) :  
	                     this(make, model, year, 0, 0)   
	   { }
	   
	   public Automobile(string make, string model, int year, 
	                     int doors, int cylinders)
	   {                     
	      this.carMake = make;
	      this.carModel = model;
	      this.carYear = year;
	      this.carDoors = doors;
	      this.carCylinders = cylinders;
	   }
	
	   public string Make {
	      get { return this.carMake; }
	   }       
	   
	   public string Model {
	      get {return this.carModel; }
	   }       
	   
	   public int Year {
	      get { return this.carYear; }
	   }       
	   
	   public int Doors {
	      get { return this.carDoors; }
	   }       
	   
	   public int Cylinders {
	      get { return this.carCylinders; }
	   }       
	} 
snippet security_cryptography_md5

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Security_Cryptography_MD5/example.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	namespace MD5Sample
	{
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            string source = "Hello World!";
	            using (MD5 md5Hash = MD5.Create())
	            {
	                string hash = GetMd5Hash(md5Hash, source);
	
	                Console.WriteLine("The MD5 hash of " + source + " is: " + hash + ".");
	
	                Console.WriteLine("Verifying the hash...");
	
	                if (VerifyMd5Hash(md5Hash, source, hash))
	                {
	                    Console.WriteLine("The hashes are the same.");
	                }
	                else
	                {
	                    Console.WriteLine("The hashes are not same.");
	                }
	            }
	
	
	
	        }
	        static string GetMd5Hash(MD5 md5Hash, string input)
	        {
	
	            byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));
	
	            StringBuilder sBuilder = new StringBuilder();
	
	            for (int i = 0; i < data.Length; i++)
	            {
	                sBuilder.Append(data[i].ToString("x2"));
	            }
	
	            return sBuilder.ToString();
	        }
	
	        static bool VerifyMd5Hash(MD5 md5Hash, string input, string hash)
	        {
	            string hashOfInput = GetMd5Hash(md5Hash, input);
	
	            StringComparer comparer = StringComparer.OrdinalIgnoreCase;
	
	            if (0 == comparer.Compare(hashOfInput, hash))
	            {
	                return true;
	            }
	            else
	            {
	                return false;
	            }
	        }
	
	    }
	}
	

snippet mathsample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MathSample/mathsample.cs

	using System;
	
	namespace MathClassCS
	{
		class MathTrapezoidSample
		{
			private double m_longBase;
			private double m_shortBase;
			private double m_leftLeg;
			private double m_rightLeg;
	
			public MathTrapezoidSample(double longbase, double shortbase, double leftLeg, double rightLeg)
			{
				m_longBase = Math.Abs(longbase);
				m_shortBase = Math.Abs(shortbase);
				m_leftLeg = Math.Abs(leftLeg);
				m_rightLeg = Math.Abs(rightLeg);
			}
	
			private double GetRightSmallBase()
			{
				return (Math.Pow(m_rightLeg,2.0) - Math.Pow(m_leftLeg,2.0) + Math.Pow(m_longBase,2.0) + Math.Pow(m_shortBase,2.0) - 2* m_shortBase * m_longBase)/ (2*(m_longBase - m_shortBase));
			}
	
			public double GetHeight()
			{
				double x = GetRightSmallBase();
				return Math.Sqrt(Math.Pow(m_rightLeg,2.0) - Math.Pow(x,2.0));
			}
	
			public double GetSquare()
			{
				return GetHeight() * m_longBase / 2.0;
			}
	
			public double GetLeftBaseRadianAngle()
			{
				double sinX = GetHeight()/m_leftLeg;
				return Math.Round(Math.Asin(sinX),2);
			}
	
			public double GetRightBaseRadianAngle()
			{
				double x = GetRightSmallBase();
				double cosX = (Math.Pow(m_rightLeg,2.0) + Math.Pow(x,2.0) - Math.Pow(GetHeight(),2.0))/(2*x*m_rightLeg);
				return Math.Round(Math.Acos(cosX),2);
			}
	
			public double GetLeftBaseDegreeAngle()
			{
				double x = GetLeftBaseRadianAngle() * 180/ Math.PI;
				return Math.Round(x,2);
			}
	
			public double GetRightBaseDegreeAngle()
			{
				double x = GetRightBaseRadianAngle() * 180/ Math.PI;
				return Math.Round(x,2);
			}
	
			static void Main(string[] args)
			{
				MathTrapezoidSample trpz = new MathTrapezoidSample(20.0, 10.0, 8.0, 6.0);
				Console.WriteLine("The trapezoid's bases are 20.0 and 10.0, the trapezoid's legs are 8.0 and 6.0");
				double h = trpz.GetHeight();
				Console.WriteLine("Trapezoid height is: " + h.ToString());
				double dxR = trpz.GetLeftBaseRadianAngle();
				Console.WriteLine("Trapezoid left base angle is: " + dxR.ToString() + " Radians");
				double dyR = trpz.GetRightBaseRadianAngle();
				Console.WriteLine("Trapezoid right base angle is: " + dyR.ToString() + " Radians");
				double dxD = trpz.GetLeftBaseDegreeAngle();
				Console.WriteLine("Trapezoid left base angle is: " + dxD.ToString() + " Degrees");
				double dyD = trpz.GetRightBaseDegreeAngle();
				Console.WriteLine("Trapezoid left base angle is: " + dyD.ToString() + " Degrees");
			}
		}
	}

snippet codeattributedeclarationcollectionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeAttributeDeclarationCollectionExample/class1.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.Collections;
	
	namespace CodeAttributeDeclarationCollectionExample
	{
		public class Class1
		{
			public Class1()
			{
			}
	        
	        public void CodeAttributeDeclarationCollectionExample()
	        {
	            CodeAttributeDeclarationCollection collection = new CodeAttributeDeclarationCollection();
	
	            collection.Add( new CodeAttributeDeclaration("DescriptionAttribute",  new CodeAttributeArgument(new CodePrimitiveExpression("Test Description"))) );
	
	            CodeAttributeDeclaration[] declarations = { new CodeAttributeDeclaration(), new CodeAttributeDeclaration() };
	            collection.AddRange( declarations );
	
	            CodeAttributeDeclarationCollection declarationsCollection = new CodeAttributeDeclarationCollection();
	            declarationsCollection.Add( new CodeAttributeDeclaration("DescriptionAttribute", new CodeAttributeArgument(new CodePrimitiveExpression("Test Description"))) );
	            declarationsCollection.Add( new CodeAttributeDeclaration("BrowsableAttribute", new CodeAttributeArgument(new CodePrimitiveExpression(true))) );
	            collection.AddRange( declarationsCollection );
	
	            CodeAttributeDeclaration testdeclaration = new CodeAttributeDeclaration("DescriptionAttribute", new CodeAttributeArgument(new CodePrimitiveExpression("Test Description")) );
	            int itemIndex = -1;
	            if( collection.Contains( testdeclaration ) )
	                itemIndex = collection.IndexOf( testdeclaration );
	
	            collection.CopyTo( declarations, 0 );
	
	            int collectionCount = collection.Count;
	
	            collection.Insert( 0, new CodeAttributeDeclaration("DescriptionAttribute", new CodeAttributeArgument(new CodePrimitiveExpression("Test Description"))) );
	
	            CodeAttributeDeclaration declaration = new CodeAttributeDeclaration("DescriptionAttribute", new CodeAttributeArgument(new CodePrimitiveExpression("Test Description")) );
	            collection.Remove( declaration );
	
	            collection.RemoveAt(0);
	        }        
		}
	}

snippet typebuilder_definenestedtype1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/typebuilder_definenestedtype1.cs

	
	/*
	   The following program demonstrates the 'DefineNestedType', 'DefineMethodOverride' and
	   'DefineMethod' methods of 'TypeBuilder' class. It builds an assembly by defining
	   'MyHelloWorld' type. 'MyHelloWorld' class has a nested class 'MyNestedClass' which extends 
	   'Example' and implements 'IMyInterface' interface. Then it creates and instance of
	   'MyNestedClass' type and calls the 'HelloMethod' using 'IMyInterface' object and
	   results are displayed to the console.
	*/
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	
	public interface IMyInterface
	{
	   String HelloMethod(String parameter);
	}
	
	public class Example
	{
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      Type myNestedClassType = CreateCallee(Thread.GetDomain());
	      IMyInterface myInterface =
	         (IMyInterface)Activator.CreateInstance(myNestedClassType);
	      Console.WriteLine(myInterface.HelloMethod("Bill"));
	   }
	
	   private static Type CreateCallee(AppDomain myAppDomain)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "Example";
	      AssemblyBuilder myAssembly =
	         myAppDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run);
	      ModuleBuilder myModule = myAssembly.DefineDynamicModule("EmittedModule");
	      TypeBuilder myHelloWorldType =
	         myModule.DefineType("MyHelloWorld", TypeAttributes.Public);
	      TypeBuilder myNestedClassType =
	         myHelloWorldType.DefineNestedType("MyNestedClass",
	            TypeAttributes.NestedPublic, typeof(Example),
	            new Type[]{typeof(IMyInterface)});
	      myNestedClassType.AddInterfaceImplementation(typeof(IMyInterface));
	      MethodBuilder myHelloMethod =
	         myNestedClassType.DefineMethod("HelloMethod",
	            MethodAttributes.Public | MethodAttributes.Virtual,
	            typeof(String), new Type[]{typeof(String)});
	      ILGenerator myMethodIL = myHelloMethod.GetILGenerator();
	      myMethodIL.Emit(OpCodes.Ldstr, "Hi! ");
	      myMethodIL.Emit(OpCodes.Ldarg_1);
	      MethodInfo infoMethod =
	         typeof(String).GetMethod("Concat",new Type[]{typeof(string),typeof(string)});
	      myMethodIL.Emit(OpCodes.Call, infoMethod);
	      myMethodIL.Emit(OpCodes.Ret);
	
	      MethodInfo myHelloMethodInfo =
	         typeof(IMyInterface).GetMethod("HelloMethod");
	      myNestedClassType.DefineMethodOverride(myHelloMethod, myHelloMethodInfo);
	      Type myType = myHelloWorldType.CreateType();
	      return myNestedClassType.CreateType();
	   }
	}
snippet array_sortintinticomparer

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Array_SortIntIntIComparer/source.cs

	using System;
	using System.Collections.Generic;
	
	public class ReverseComparer: IComparer<string>
	{
	    public int Compare(string x, string y)
	    {
	        return y.CompareTo(x);
	    }
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        string[] dinosaurs = {"Pachycephalosaurus", 
	                              "Amargasaurus", 
	                              "Mamenchisaurus", 
	                              "Tarbosaurus",
	                              "Tyrannosaurus", 
	                              "Albertasaurus"};
	
	        Console.WriteLine();
	        foreach( string dinosaur in dinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nSort(dinosaurs, 3, 3)");
	        Array.Sort(dinosaurs, 3, 3);
	
	        Console.WriteLine();
	        foreach( string dinosaur in dinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        ReverseComparer rc = new ReverseComparer();
	
	        Console.WriteLine("\nSort(dinosaurs, 3, 3, rc)");
	        Array.Sort(dinosaurs, 3, 3, rc);
	
	        Console.WriteLine();
	        foreach( string dinosaur in dinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Pachycephalosaurus
	Amargasaurus
	Mamenchisaurus
	Tarbosaurus
	Tyrannosaurus
	Albertasaurus
	
	Sort(dinosaurs, 3, 3)
	
	Pachycephalosaurus
	Amargasaurus
	Mamenchisaurus
	Albertasaurus
	Tarbosaurus
	Tyrannosaurus
	
	Sort(dinosaurs, 3, 3, rc)
	
	Pachycephalosaurus
	Amargasaurus
	Mamenchisaurus
	Tyrannosaurus
	Tarbosaurus
	Albertasaurus
	 */
	
	

snippet installer_afterinstall

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_AfterInstall/installer_afterinstall.cs

	/*
	   System.Configuration.Install.Installer.AfterInstall
	
	   The following example demonstrates the event 'AfterInstall' of the 
	   'Installer' class. The event 'AfterInstall' is raised by the method
	   'OnAfterInstall'.
	   
	   Use the installer process 'InstallUtil' to run the assembly 
	   'Installer_AfterInstall.exe'.
	   
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller: Installer
	{
	   MyInstaller() : base()
	   {
	      AfterInstall += new InstallEventHandler(AfterInstallEventHandler);
	   }
	   private void AfterInstallEventHandler(object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("Code for AfterInstallEventHandler"); 
	   }
	   
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("Install method of MyInstaller called");
	      Console.WriteLine("");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	   }
	
	   protected override void OnBeforeInstall(IDictionary savedState)
	   {
	      base.OnBeforeInstall(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("OnBeforeInstall method of MyInstaller called");
	      Console.WriteLine("");
	   }
	
	   protected override void OnAfterInstall(IDictionary savedState)
	   {
	      base.OnAfterInstall(savedState);
	   }
	}
	
	public class MyAssembly
	{
	   public static void Main()
	   {
	      Console.WriteLine("Use installutil.exe to run the assembly Installer_AfterInstall.exe");
	   }
	}

snippet conceptual_types_viewinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_types_viewinfo/source4.cs

	using System;
	using System.IO;
	using System.Reflection;
	
	class ListMembers
	{
	    public static void Main()
	    {
	        Type t = typeof(System.IO.BufferedStream);
	        Console.WriteLine("Listing all the members (public and non public) of the {0} type", t);
	
	        FieldInfo[] fi = t.GetFields(BindingFlags.Static |
	            BindingFlags.NonPublic | BindingFlags.Public);
	        PrintMembers(fi);
	
	        PropertyInfo[] pi = t.GetProperties(BindingFlags.Static |
	            BindingFlags.NonPublic | BindingFlags.Public);
	        PrintMembers(pi);
	
	        EventInfo[] ei = t.GetEvents(BindingFlags.Static |
	            BindingFlags.NonPublic | BindingFlags.Public);
	        PrintMembers(ei);
	
	        MethodInfo[] mi = t.GetMethods (BindingFlags.Static |
	            BindingFlags.NonPublic | BindingFlags.Public);
	        PrintMembers(mi);
	
	        ConstructorInfo[] ci = t.GetConstructors(BindingFlags.Instance |
	            BindingFlags.NonPublic | BindingFlags.Public);
	        PrintMembers(ci);
	
	        fi = t.GetFields(BindingFlags.Instance | BindingFlags.NonPublic |
	            BindingFlags.Public);
	        PrintMembers(fi);
	
	        pi = t.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic |
	            BindingFlags.Public);
	        PrintMembers(pi);
	
	        ei = t.GetEvents(BindingFlags.Instance | BindingFlags.NonPublic |
	            BindingFlags.Public);
	        PrintMembers(ei);
	
	        mi = t.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic
	            | BindingFlags.Public);
	        PrintMembers(mi);
	
	        Console.WriteLine("\r\nPress ENTER to exit.");
	        Console.Read();
	    }
	
	    public static void PrintMembers (MemberInfo [] ms)
	    {
	        foreach (MemberInfo m in ms)
	        {
	            Console.WriteLine ("{0}{1}", "     ", m);
	        }
	        Console.WriteLine();
	    }
	}

snippet constructorbuilder_setcustomattribute2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ConstructorBuilder_SetCustomAttribute2/constructorbuilder_setcustomattribute2.cs

	/*
	   The following program demonstrates the 'SetCustomAttribute(ConstructorInfo, byte[])'
	   method of 'ConstructorBuilder' class. It defines a 'MyAttribute' class which is derived
	   from 'Attribute' class. It builds a constructor by setting 'MyAttribute' custom attribute
	   and defines 'Helloworld' type. Then it gets the custom attributes of 'HelloWorld' type
	   and displays its contents to the console.
	*/
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	
	
	[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
	public class MyAttribute : Attribute
	{
	   public bool myBoolean;
	
	   public MyAttribute(bool myBoolean)
	   {
	      this.myBoolean = myBoolean;
	   }
	}
	
	public class MyConstructorBuilder
	{
	   public static void Main()
	   {
	      Type myHelloworld = MyCreateCallee(Thread.GetDomain());
	      ConstructorInfo myConstructor = myHelloworld.GetConstructor(new Type[]{typeof(String)});
	      object[] myAttributes1 = myConstructor.GetCustomAttributes(true);
	      Console.WriteLine("MyAttribute custom attribute contains  ");
	      for(int index=0; index < myAttributes1.Length; index++)
	      {
	         if(myAttributes1[index] is MyAttribute)
	         {
	            Console.WriteLine("myBoolean : " + ((MyAttribute)myAttributes1[index]).myBoolean);
	         }
	      }
	   }
	
	   private static Type MyCreateCallee(AppDomain domain)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedAssembly";
	      AssemblyBuilder myAssembly =
	                  domain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.Run);
	      ModuleBuilder myModuleBuilder = myAssembly.DefineDynamicModule("EmittedModule");
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("HelloWorld",
	         TypeAttributes.Public);
	      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(
	               MethodAttributes.Public, CallingConventions.Standard, new Type[]{typeof(String)});
	      ILGenerator myILGenerator = myConstructor.GetILGenerator();
	      myILGenerator.Emit(OpCodes.Ldstr, "Constructor is invoked");
	      myILGenerator.Emit(OpCodes.Ldarg_1);
	      MethodInfo myMethodInfo =
	                     typeof(Console).GetMethod("WriteLine",new Type[]{typeof(string)});
	      myILGenerator.Emit(OpCodes.Call, myMethodInfo);
	      myILGenerator.Emit(OpCodes.Ret);
	      Type myType = typeof(MyAttribute);
	      ConstructorInfo myConstructorInfo = myType.GetConstructor(new Type[]{typeof(bool)});
	      try
	      {
	         myConstructor.SetCustomAttribute(myConstructorInfo, new byte[]{01,00,01});
	      }
	      catch(ArgumentNullException ex)
	      {
	         Console.WriteLine("The following exception has occurred : "+ex.Message);
	      }
	      catch(Exception ex)
	      {
	         Console.WriteLine("The following exception has occurred : "+ex.Message);
	      }
	      return myTypeBuilder.CreateType();
	   }
	}

snippet cryptography_rsacsp_persistkey

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RSACSP_PersistKey/example.cs

	using System;
	using System.Security.Cryptography;
	
	
	class RSACSPSample
	{
	
	    static void Main()
	    {
	
	        string KeyContainerName = "MyKeyContainer";
	
	        RSAPersistKeyInCSP(KeyContainerName);
	
	        RSADeleteKeyInCSP(KeyContainerName);
	    }
	
	    public static void RSAPersistKeyInCSP(string ContainerName)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);
	
	            Console.WriteLine("The RSA key was persisted in the container, \"{0}\".", ContainerName);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	        }
	    }
	
	    public static void RSADeleteKeyInCSP(string ContainerName)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);
	
	            RSAalg.PersistKeyInCsp = false;
	
	            RSAalg.Clear();
	
	            Console.WriteLine("The RSA key was deleted from the container, \"{0}\".", ContainerName);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	        }
	    }
	}
snippet sys_glob_textinfo_clone

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_textinfo_clone/ro.cs

	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    CultureInfo ci = new CultureInfo("en-US");
	    TextInfo ti1 = ci.TextInfo;
	
	    DisplayReadOnly("1) The original TextInfo object", ti1);
	    Console.WriteLine();
	   
	    Console.WriteLine("2a) Create a clone of the original TextInfo object...");
	    TextInfo ti2 = (TextInfo)ti1.Clone();
	
	    DisplayReadOnly("2b) The TextInfo clone", ti2);
	
	    Console.WriteLine("2c) The original value of the clone's ListSeparator " +
	                      "property is \"{0}\".", ti2.ListSeparator);
	    ti2.ListSeparator = "/";
	    Console.WriteLine("2d) The new value of the clone's ListSeparator " +
	                      "property is \"{0}\".\n", ti2.ListSeparator);
	
	    Console.WriteLine("3a) Create a read-only clone of the original TextInfo object...");
	    TextInfo ti3 = TextInfo.ReadOnly(ti1);
	
	    DisplayReadOnly("3b) The TextInfo clone", ti3);
	
	    Console.WriteLine("3c) Try to set the read-only clone's LineSeparator " +
	                      "property.");
	    if (ti3.IsReadOnly == true)
	        {
	        Console.WriteLine("3d) The set operation is invalid.");
	        }
	    else
	        {
	        ti3.ListSeparator = "/";
	        Console.WriteLine("3d) The new value of the clone's ListSeparator " +
	                          "property is \"{0}\".\n", ti2.ListSeparator);
	        }
	    }
	
	    private static void DisplayReadOnly(string caption, TextInfo ti)
	    {
	    Console.WriteLine("{0} is {1}read-only.", 
	                      caption, ti.IsReadOnly ? "" : "not ");
	    }
	}
	
	/*
	This code example produces the following results:
	
	1) The original TextInfo object is not read-only.
	
	2a) Create a clone of the original TextInfo object...
	2b) The TextInfo clone is not read-only.
	2c) The original value of the clone's ListSeparator property is ",".
	2d) The new value of the clone's ListSeparator property is "/".
	
	3a) Create a read-only clone of the original TextInfo object...
	3b) The TextInfo clone is read-only.
	3c) Try to set the read-only clone's LineSeparator property.
	3d) The set operation is invalid.
	
	*/
snippet asyncdelegateexamples

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/callback.cs

	using System;
	using System.Threading;
	using System.Runtime.Remoting.Messaging;
	
	namespace Examples.AdvancedProgramming.AsynchronousOperations
	{
	    public class AsyncMain 
	    {
	        static void Main() 
	        {
	            AsyncDemo ad = new AsyncDemo();
	
	            AsyncMethodCaller caller = new AsyncMethodCaller(ad.TestMethod);
	       
	            int dummy = 0;
	
	            IAsyncResult result = caller.BeginInvoke(3000,
	                out dummy, 
	                new AsyncCallback(CallbackMethod),
	                "The call executed on thread {0}, with return value \"{1}\".");
	
	            Console.WriteLine("The main thread {0} continues to execute...", 
	                Thread.CurrentThread.ManagedThreadId);
	
	            Thread.Sleep(4000);
	
	            Console.WriteLine("The main thread ends.");
	        }
	        
	        static void CallbackMethod(IAsyncResult ar) 
	        {
	            AsyncResult result = (AsyncResult) ar;
	            AsyncMethodCaller caller = (AsyncMethodCaller) result.AsyncDelegate;
	
	            string formatString = (string) ar.AsyncState;
	
	            int threadId = 0;
	
	            string returnValue = caller.EndInvoke(out threadId, ar);
	
	            Console.WriteLine(formatString, threadId, returnValue);
	        }
	    }
	}
	
	/* This example produces output similar to the following:
	
	The main thread 1 continues to execute...
	Test method begins.
	The call executed on thread 3, with return value "My call time was 3000.".
	The main thread ends.
	 */
	

snippet safehandle_runtimehelpers_prepareconstrainedregions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/SafeHandle_RuntimeHelpers_PrepareConstrainedRegions/sample.cs

	
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.CompilerServices;
	using System.Runtime.ConstrainedExecution;
	
	namespace SafeHandleExample
	{
	    [StructLayout(LayoutKind.Sequential)]
	    struct MyStruct
	    {
	        public IntPtr m_outputHandle;
	    }
	
	    sealed class MySafeHandle : SafeHandle
	    {
	        public MySafeHandle()
	            : base(IntPtr.Zero, true)
	        {
	        }
	
	        public MySafeHandle AllocateHandle()
	        {
	            MySafeHandle sh = new MySafeHandle();
	
	            RuntimeHelpers.PrepareConstrainedRegions();
	            try { }
	            finally
	            {
	                MyStruct myStruct = new MyStruct();
	                NativeAllocateHandle(ref myStruct);
	                sh.SetHandle(myStruct.m_outputHandle);
	            }
	
	            return sh;
	        }
	
	        internal MySafeHandle(IntPtr preexistingHandle, bool ownsHandle)
	            : base(IntPtr.Zero, ownsHandle)
	        {
	            SetHandle(preexistingHandle);
	        }
	
	
	        public override bool IsInvalid
	        {
	
	            get { return IsClosed || handle == IntPtr.Zero; }
	        }
	   
	        [DllImport("kernel32")]
	        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	        private static extern bool CloseHandle(IntPtr handle);
	
	        protected override bool ReleaseHandle()
	        {
	            return CloseHandle(handle);
	        }
	
	        [DllImport("kernel32")]
	        public static extern MySafeHandle CreateHandle(int someState);
	
	        [DllImport("kernel32")]
	        public static extern MySafeHandle NativeAllocateHandle(ref MyStruct someState);
	    }
	
	
	    public class Example
	    {
	        static void Main()
	        {
	        }
	    }
	
	   
	}
	

snippet conceptual_strings_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_strings_bestpractices/indirect1.cs

	using System;
	
	public class Class1
	{
	   public static void Main()
	   {
	
	   }
	
	   string []storedNames;
	   
	   public void StoreNames(string [] names)
	   {
	      int index = 0;
	      storedNames = new string[names.Length];
	   
	      foreach (string name in names)
	      {
	         this.storedNames[index++] = name;
	      }
	   
	   }
	   
	   public bool DoesNameExist(string name)
	   {
	   }
	}
	
	public class Class8
	{
	   string []storedNames;
	   
	   public void StoreNames(string [] names)
	   {
	      int index = 0;
	      storedNames = new string[names.Length];
	   
	      foreach (string name in names)
	      {
	         this.storedNames[index++] = name;
	      }
	   
	   }
	   
	   public bool DoesNameExist(string name)
	   {
	   }
	}
	
	public class Class9
	{
	   string []storedNames;
	   
	   public void StoreNames(string [] names)
	   {
	      int index = 0;
	      storedNames = new string[names.Length];
	   
	      foreach (string name in names)
	      {
	         this.storedNames[index++] = name;
	      }
	   
	   }
	   
	   public bool DoesNameExist(string name)
	   {
	   }
	}

snippet assemblyname_constructor

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyName_Constructor/assemblyname_constructor.cs

	
	/* 
	   The following example demonstrates the constructor 'AssemblyName()' and
	   the 'Name' and 'Version' properties of the 'AssemblyName' class. Creates
	   a dynamic assembly named 'MyAssembly' with a module named 'MyModule' and
	   a type within the module named 'MyType'. The type 'MyType' has a single
	   method called 'Main' which is also the entry point to the assembly. The
	   creation of the dynamic assembly is carried out by the method called
	   'MakeAssembly'. After the assembly is created with the help of 'MakeAssembly'
	   the assemblies currently loaded are found and the dynamic assembly that we
	   have created is searched for, which is displayed to the console. The dynamic
	   assembly is also saved to a file named 'MyAssembly.exe'.
	   
	   Note : Run 'MyAssembly.exe' which this example has created for a simple
	          'Hello World!" display.
	*/
	
	using System;
	using System.Reflection;
	using System.Threading;
	using System.Reflection.Emit;
	
	public class AssemblyName_Constructor
	{
	   public static void MakeAssembly(AssemblyName myAssemblyName, string fileName)
	   {
	      AssemblyBuilder myAssemblyBuilder = Thread.GetDomain().DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("MyModule", fileName);
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("MyType");
	      MethodBuilder myMethodBuilder = myTypeBuilder.DefineMethod("Main", MethodAttributes.Public | MethodAttributes.HideBySig |
	         MethodAttributes.Static, typeof(void), null);
	      ILGenerator myILGenerator = myMethodBuilder.GetILGenerator();
	      myILGenerator.EmitWriteLine("Hello World!");
	      myILGenerator.Emit(OpCodes.Ret);
	      myTypeBuilder.CreateType();
	      myAssemblyBuilder.SetEntryPoint(myMethodBuilder);
	      myAssemblyBuilder.Save(fileName);
	   }
	
	   public static void Main()
	   {
	
	
	      AssemblyName myAssemblyName = new AssemblyName(); 
	      myAssemblyName.Name = "MyAssembly";
	      myAssemblyName.Version = new Version("1.0.0.2001");
	      MakeAssembly(myAssemblyName, "MyAssembly.exe");
	
	      Assembly[] myAssemblies = Thread.GetDomain().GetAssemblies();
	
	      Assembly myAssembly = null;
	      for(int i = 0; i < myAssemblies.Length; i++)
	      {
	         if(String.Compare(myAssemblies[i].GetName().Name, "MyAssembly") == 0)
	            myAssembly = myAssemblies[i];
	      }
	      if(myAssembly != null)
	      {
	         Console.WriteLine("\nDisplaying the assembly name\n");
	         Console.WriteLine(myAssembly);
	      }
	   }
	}

snippet installer_afteruninstall

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_AfterUninstall/installer_afteruninstall.cs

	/*
	   System.Configuration.Install.Installer.AfterUninstall
	
	   The following example demonstrates the event 'AfterUninstall' of the 
	   'Installer' class. This event is raised by the method 'OnAfterUninstall'.
	   
	   Use the installer process 'InstallUtil -u' to run the assembly 
	   'Installer_AfterUninstall.exe'.
	   
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller: Installer
	{
	   MyInstaller() : base()
	   {
	      AfterUninstall += new InstallEventHandler(AfterUninstallEventHandler);
	   }
	   private void AfterUninstallEventHandler(object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("Code for AfterUninstallEventHandler"); 
	   }
	   
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("Uninstall method of MyInstaller called");
	      Console.WriteLine("");
	   }
	
	   protected override void OnBeforeUninstall(IDictionary savedState)
	   {
	      base.OnBeforeUninstall(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("OnBeforeUninstall method of MyInstaller called");
	      Console.WriteLine("");
	   }
	
	   protected override void OnAfterUninstall(IDictionary savedState)
	   {
	      base.OnAfterUninstall(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("OnAfterUninstall method of MyInstaller called");
	      Console.WriteLine("");
	   }
	}
	
	public class MyAssembly
	{
	   public static void Main()
	   {
	      Console.WriteLine("Use 'installutil.exe -u' to run the assembly Installer_AfterUninstall.exe");
	   }
	}

snippet installer_beforeuninstall

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_BeforeUninstall/installer_beforeuninstall.cs

	/*
	   System.Configuration.Install.Installer.BeforeUninstall
	
	   The following example demonstrates the event 'BeforeUninstall' of the 
	   'Installer' class. This event is raised by the method 'OnBeforeUninstall'.
	   
	   Use the installer process 'InstallUtil -u' to run the assembly 
	   'Installer_BeforeUninstall.exe'.
	   
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller: Installer
	{
	   MyInstaller() : base()
	   {
	      BeforeUninstall += new InstallEventHandler(BeforeUninstallEventHandler);
	   }
	   private void BeforeUninstallEventHandler(object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("Code for BeforeUninstallEventHandler"); 
	   }
	   
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("Uninstall method of MyInstaller called");
	      Console.WriteLine("");
	   }
	
	   protected override void OnBeforeUninstall(IDictionary savedState)
	   {
	      base.OnBeforeUninstall(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("OnBeforeUninstall method of MyInstaller called");
	      Console.WriteLine("");
	   }
	
	   protected override void OnAfterUninstall(IDictionary savedState)
	   {
	      base.OnAfterUninstall(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("OnAfterUninstall method of MyInstaller called");
	      Console.WriteLine("");
	   }
	}
	
	public class MyAssembly
	{
	   public static void Main()
	   {
	      Console.WriteLine("Use 'installutil.exe -u' to run the assembly Installer_BeforeUninstall.exe");
	   }
	}

snippet cryptography_rsacryptoserviceprovider_cspkeycontainerinfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RsaCryptoServiceProvider_CspKeyContainerInfo/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	
	public class CspKeyContainerInfoExample
	{
	
	    public static void Main(String[] args)
	    {
	        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();
	
	        try
	        {
	
	            string data = "Here is some data to encrypt.";
	
	            Console.WriteLine("Data to encrypt: " + data);
	
	            byte[] byteData = Encoding.ASCII.GetBytes(data);
	
	            byte[] encData = rsa.Encrypt(byteData, false);
	
	            Console.WriteLine("Encrypted Data: " + Encoding.ASCII.GetString(encData));
	
	            Console.WriteLine();
	
	            Console.WriteLine("CspKeyContainerInfo information:");
	
	            Console.WriteLine();
	
	            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;
	
	
	            Console.WriteLine("Accessible property: " + keyInfo.Accessible);
	
	            Console.WriteLine("Exportable property: " + keyInfo.Exportable);
	
	            Console.WriteLine("HardwareDevice property: " + keyInfo.HardwareDevice);
	
	            Console.WriteLine("KeyContainerName property: " + keyInfo.KeyContainerName);
	
	            Console.WriteLine("KeyNumber property: " + keyInfo.KeyNumber.ToString());
	
	            Console.WriteLine("MachineKeyStore property: " + keyInfo.MachineKeyStore);
	
	            Console.WriteLine("Protected property: " + keyInfo.Protected);
	
	            Console.WriteLine("ProviderName property: " + keyInfo.ProviderName);
	
	            Console.WriteLine("ProviderType property: " + keyInfo.ProviderType);
	
	            Console.WriteLine("RandomlyGenerated property: " + keyInfo.RandomlyGenerated);
	
	            Console.WriteLine("Removable property: " + keyInfo.Removable);
	
	            Console.WriteLine("UniqueKeyContainerName property: " + keyInfo.UniqueKeyContainerName);
	
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.ToString());
	        }
	        finally
	        {
	            rsa.Clear();
	        }
	    }
	}

snippet microsoft_win32_registryvaluekind

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Win32_RegistryValueKind/source.cs

	using System;
	using Microsoft.Win32;
	
	public class Example
	{
	    public static void Main()
	    {
	        Registry.CurrentUser.DeleteSubKey("RegistryValueKindExample", false);
	        RegistryKey rk = Registry.CurrentUser.CreateSubKey("RegistryValueKindExample");
	
	
	        rk.SetValue("QuadWordValue", 42, RegistryValueKind.QWord);
	
	        rk.SetValue("DWordValue", 42, RegistryValueKind.DWord);
	        rk.SetValue("MultipleStringValue", new string[] {"One", "Two", "Three"}, RegistryValueKind.MultiString);
	        rk.SetValue("BinaryValue", new byte[] {10, 43, 44, 45, 14, 255}, RegistryValueKind.Binary);
	        rk.SetValue("StringValue", "The path is %PATH%", RegistryValueKind.String);
	
	        rk.SetValue("ExpandedStringValue", "The path is %PATH%", RegistryValueKind.ExpandString);
	
	
	        string[] valueNames = rk.GetValueNames();
	        foreach (string s in valueNames)
	        {
	            RegistryValueKind rvk = rk.GetValueKind(s);
	            switch (rvk)
	            {
	                case RegistryValueKind.MultiString :
	                    string[] values = (string[]) rk.GetValue(s);
	                    Console.Write("\r\n {0} ({1}) =", s, rvk);
	                    for (int i = 0; i < values.Length; i++)
	                    {
	                        if (i != 0) Console.Write(",");
	                        Console.Write(" \"{0}\"", values[i]);
	                    }
	                    Console.WriteLine();
	                    break;
	                
	                case RegistryValueKind.Binary :
	                    byte[] bytes = (byte[]) rk.GetValue(s);
	                    Console.Write("\r\n {0} ({1}) =", s, rvk);
	                    for (int i = 0; i < bytes.Length; i++)
	                    {
	                        Console.Write(" {0:X2}", bytes[i]);
	                    }
	                    Console.WriteLine();
	                    break;
	                
	                default :
	                    Console.WriteLine("\r\n {0} ({1}) = {2}", s, rvk, rk.GetValue(s));
	                    break;
	            }
	        }
	    }
	}
	/*
	
	This code example produces the following output:
	 QuadWordValue (QWord) = 42
	
	 DWordValue (DWord) = 42
	
	 MultipleStringValue (MultiString) =, "One", "Two", "Three"
	
	 BinaryValue (Binary) = 0A 2B 2C 2D 0E FF
	
	 StringValue (String) = The path is %PATH%
	
	 ExpandedStringValue (ExpandString) = The path is C:\Program Files\Microsoft.NET\SDK\v2.0\Bin;
	 [***The remainder of this output is omitted.***]
	
	*/
snippet eventlogentry_copyto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_CopyTo/eventlogentry_copyto.cs

	
	/*
	   The following example demonstrates the EventLogEntryCollection class and the 
	   CopyTo method of EventLogEntryCollection class.A new Source for eventlog 'MyNewLog'
	   is created.A new entry is created for 'MyNewLog'.The entries of EventLog are copied
	   to an Array.
	 */
	
	using System;
	using System.Collections;
	using System.Diagnostics;
	
	class EventLogEntryCollection_Item
	{
	    public static void Main()
	    {
	        try
	        {
	            string myLogName = "MyNewLog";
	            if (!EventLog.SourceExists("MySource"))
	            {
	                EventLog.CreateEventSource("MySource", myLogName);
	                Console.WriteLine("Creating EventSource");
	                Console.WriteLine("Exiting, execute the application a second time to use the source.");
	                return;
	            }
	            else
	                myLogName = EventLog.LogNameFromSourceName("MySource", ".");
	
	            EventLog myEventLog2 = new EventLog();
	            myEventLog2.Source = "MySource";
	            myEventLog2.WriteEntry("Successfully created a new Entry in the Log");
	            myEventLog2.Close();
	            EventLog myEventLog1 = new EventLog();
	            myEventLog1.Log = myLogName;
	
	            EventLogEntryCollection myEventLogEntryCollection =
	               myEventLog1.Entries;
	            myEventLog1.Close();
	            Console.WriteLine("The number of entries in 'MyNewLog' = "
	               + myEventLogEntryCollection.Count);
	
	            for (int i = 0; i < myEventLogEntryCollection.Count; i++)
	            {
	                Console.WriteLine("The Message of the EventLog is :"
	                   + myEventLogEntryCollection[i].Message);
	            }
	
	            EventLogEntry[] myEventLogEntryArray =
	               new EventLogEntry[myEventLogEntryCollection.Count];
	            myEventLogEntryCollection.CopyTo(myEventLogEntryArray, 0);
	            IEnumerator myEnumerator = myEventLogEntryArray.GetEnumerator();
	            while (myEnumerator.MoveNext())
	            {
	                EventLogEntry myEventLogEntry = (EventLogEntry)myEnumerator.Current;
	                Console.WriteLine("The LocalTime the Event is generated is "
	                   + myEventLogEntry.TimeGenerated);
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception:{0}", e.Message);
	        }
	    }
	}

snippet fsizesort

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FSizeSort/fsizesort.cs

	using System;
	using System.IO;
	
	class DirectoryFileCount
	{
	
	    static long files = 0;
	    static long directories = 0;
	
	
	    static void Main()
	    {
	        try
	        {
	            Console.WriteLine("Enter the path to a directory:");
	
	            string directory = Console.ReadLine();
	
	            DirectoryInfo dir = new DirectoryInfo(directory);
	
	            if (!dir.Exists)
	            {
	                throw new DirectoryNotFoundException("The directory does not exist.");
	            }
	
	            FileSystemInfo[] infos = dir.GetFileSystemInfos();
	
	            Console.WriteLine("Working...");
	
	            ListDirectoriesAndFiles(infos);
	
	            Console.WriteLine("Directories: {0}", directories);
	            Console.WriteLine("Files: {0}", files);
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	
	            Console.ReadLine();
	        }
	    }
	
	    static void ListDirectoriesAndFiles(FileSystemInfo[] FSInfo)
	    {
	        if (FSInfo == null)
	        {
	            throw new ArgumentNullException("FSInfo");
	        }
	
	        foreach (FileSystemInfo i in FSInfo)
	        {
	            if (i is DirectoryInfo)
	            {
	                directories++;
	
	                DirectoryInfo dInfo = (DirectoryInfo)i;
	
	                ListDirectoriesAndFiles(dInfo.GetFileSystemInfos());
	            }
	            else if (i is FileInfo)
	            {
	                files++;
	
	            }
	
	        }
	    }
	}
snippet installer_beforeinstall

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Installer_BeforeInstall/installer_beforeinstall.cs

	/*
	   System.Configuration.Install.Installer.BeforeInstall
	
	   The following example demonstrates the event 'BeforeInstall' of the 
	   'Installer' class. The event 'BeforeInstall' is raised by the method
	   'OnBeforeInstall'.
	   
	   Use the installer process 'InstallUtil' to run the assembly 
	   Installer_BeforeInstall.exe.
	   
	*/
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	[RunInstaller(true)]
	public class MyInstaller: Installer
	{
	   MyInstaller() : base()
	   {
	      BeforeInstall += new InstallEventHandler(BeforeInstallEventHandler);
	   }
	   private void BeforeInstallEventHandler(object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("Code for BeforeInstallEventHandler"); 
	   }
	   
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("Install method of MyInstaller called");
	      Console.WriteLine("");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	   }
	
	   protected override void OnBeforeInstall(IDictionary savedState)
	   {
	      base.OnBeforeInstall(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("OnBeforeInstall method of MyInstaller called");
	      Console.WriteLine("");
	   }
	
	   protected override void OnAfterInstall(IDictionary savedState)
	   {
	      base.OnAfterInstall(savedState);
	      Console.WriteLine("");
	      Console.WriteLine("OnAfterInstall method of MyInstaller called");
	      Console.WriteLine("");
	   }
	}
	
	public class MyAssembly
	{
	   public static void Main()
	   {
	      Console.WriteLine("Use installutil.exe to run the assembly Installer_BeforeInstall.exe");
	   }
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/convert1.cs

	
	using System;
	
	public struct UDouble
	{
	   private double number;
	   
	   public UDouble(double value)
	   {
	      if (value < 0)
	         throw new InvalidCastException("A negative value cannot be converted to a UDouble.");
	
	      number = value;
	   }
	   
	   public UDouble(float value)
	   {
	      if (value < 0)
	         throw new InvalidCastException("A negative value cannot be converted to a UDouble.");
	
	      number = value;
	   }
	   
	   public static readonly UDouble MinValue = (UDouble) 0.0;
	   public static readonly UDouble MaxValue = (UDouble) Double.MaxValue;
	   
	   public static explicit operator Double(UDouble value)
	   {
	      return value.number;
	   }
	   
	   public static implicit operator Single(UDouble value)
	   {
	      if (value.number > (double) Single.MaxValue) 
	         throw new InvalidCastException("A UDouble value is out of range of the Single type.");
	
	      return (float) value.number;         
	   }
	   
	   public static explicit operator UDouble(double value)
	   {
	      if (value < 0)
	         throw new InvalidCastException("A negative value cannot be converted to a UDouble.");
	
	      return new UDouble(value);
	   } 
	
	   public static implicit operator UDouble(float value)
	   {
	      if (value < 0)
	         throw new InvalidCastException("A negative value cannot be converted to a UDouble.");
	
	      return new UDouble(value);
	   } 
	
	   public static Double ToDouble(UDouble value)
	   {
	      return (Double) value;
	   }   
	
	   public static float ToSingle(UDouble value)
	   {
	      return (float) value;
	   }   
	
	   public static UDouble FromDouble(double value)
	   {
	      return new UDouble(value);
	   }
	   
	   public static UDouble FromSingle(float value)
	   {
	      return new UDouble(value);
	   }   
	}
	
	public class Example
	{
	   public static void Main()
	   {
	   UDouble max = new UDouble(Double.MaxValue);
	   UDouble neg = new UDouble(-3.0);
	   }
	}

snippet enumbuilder_properties_4_cs

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_4_cs/enumbuilder_properties_4.cs

	
	/* The following program demonstrates 'TypeToken', 'UnderlyingField',
	   'UnderlyingSystemType' and ''GUID' properties of
	   'System.Reflection.Emit.EnumBuilder' class. This example defines
	   a class 'MyEnumBuilderSample'. The main function calls the CreateCalle
	   method in which the 'EnumBuilder' class and its fields are constructed.
	   The output of the 'EnumBuilder' properties are displayed on the console
	   in the main method. */
	
	
	using System;
	using System.Collections;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public class MyEnumBuilderSample
	{
	   static AssemblyBuilder myAssemblyBuilder;
	   static ModuleBuilder myModuleBuilder;
	   static EnumBuilder myEnumBuilder;
	   
	   public static void Main()
	   {
	      try
	      {
	         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save);
	         Type[] myTypeArray = myModuleBuilder.GetTypes();
	         foreach(Type myType in myTypeArray)
	         {
	            Console.WriteLine("Enum Builder defined in the module builder is: " 
	               + myType.Name);
	         }
	
	         Console.WriteLine("Enum TypeToken is :" +  
	                                       myEnumBuilder.TypeToken.ToString());
	         Console.WriteLine("Enum UnderLyingField is :" +  
	                                    myEnumBuilder.UnderlyingField.ToString());
	         Console.WriteLine("Enum UnderLyingSystemType is :" +  
	                              myEnumBuilder.UnderlyingSystemType.ToString());
	         Console.WriteLine("Enum GUID is :" + myEnumBuilder.GUID.ToString());
	         myAssemblyBuilder.Save("EmittedAssembly.dll");
	      }
	      catch(NotSupportedException ex)
	      {
	         Console.WriteLine("The following is the exception is raised: " + ex.Message);
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("The following is the exception raised: " + e.Message);
	      }
	   }
	
	   private static void CreateCallee(AppDomain myAppDomain, AssemblyBuilderAccess access)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedAssembly";
	
	      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, 
	                                             AssemblyBuilderAccess.Save);
	      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("EmittedModule", 
	                                                         "EmittedModule.mod");
	      myEnumBuilder = myModuleBuilder.DefineEnum("MyNamespace.MyEnum", 
	                                 TypeAttributes.Public, typeof(Int32));
	
	      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral("FieldOne", 1);
	      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral("FieldTwo", 2);
	
	      myEnumBuilder.CreateType();
	   }
	}
snippet installercollection_remove

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Remove/installercollection_remove.cs

	
	/*
	   The following example demonstrates the 'Remove(Installer)',
	   'Contains(Installer)' and 'IndexOf(Installer)' methods of the 
	   'InstallerCollection' class. Create's 'AssemblyInstaller' instances
	   for 'MyAssembly1.exe' and for 'MyAssembly2.exe'. These instances
	   of 'AssemblyInstaller' are added to an instance of 'TransactedInstaller'.
	   The 'AssemblyIntaller' instance for 'MyAssembly2.exe' is removed
	   from the installers collection of the 'TransactedInstaller' instance.
	   The installation process is started which installs only 'MyAssembly1.exe'.
	*/
	
	using System;
	using System.Reflection;
	using System.ComponentModel;
	using System.Collections;
	using System.Configuration.Install;
	using System.IO;
	
	public class InstallerCollection_Remove
	{
	   public static void Main()
	   {
	      try
	      {
	         TransactedInstaller myTransactedInstaller = new TransactedInstaller();
	         AssemblyInstaller myAssemblyInstaller1;
	         AssemblyInstaller myAssemblyInstaller2;
	         InstallContext myInstallContext;
	
	         myAssemblyInstaller1 = 
	            new AssemblyInstaller("MyAssembly1.exe", null);
	
	         myTransactedInstaller.Installers.Insert(0, myAssemblyInstaller1);
	
	         myAssemblyInstaller2 = 
	            new AssemblyInstaller("MyAssembly2.exe", null);
	
	         myTransactedInstaller.Installers.Insert(1, myAssemblyInstaller2);
	
	         if(myTransactedInstaller.Installers.Contains(myAssemblyInstaller2))
	         {
	            Console.WriteLine("\nInstaller at index : {0} is being removed",
	               myTransactedInstaller.Installers.IndexOf(myAssemblyInstaller2));
	            myTransactedInstaller.Installers.Remove(myAssemblyInstaller2);
	         }
	         InstallerCollection myInstallers = myTransactedInstaller.Installers;
	         Console.WriteLine("\nPrinting all installers to be installed\n");
	         for(int i = 0; i < myInstallers.Count; i++)
	         {
	            if((myInstallers[i].GetType()).Equals(typeof(AssemblyInstaller)))
	            {
	               Console.WriteLine("{0} {1}", i + 1, 
	                  ((AssemblyInstaller)myInstallers[i]).Path);
	            }
	         }
	
	         myInstallContext = 
	            new InstallContext("Install.log", null);
	         myTransactedInstaller.Context = myInstallContext;
	
	         myTransactedInstaller.Install(new Hashtable());
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("Exception raised : {0}", e.Message);
	      }
	   }
	}

snippet parameterinfo_getcustomattribute_isdefined

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_GetCustomAttribute_IsDefined/parameterinfo_getcustomattribute_isdefined.cs

	using System;
	using System.Reflection;
	
	[AttributeUsage(AttributeTargets.Parameter)]
	public class MyAttribute : Attribute
	{
	    private string myName;
	    public MyAttribute(string name)
	    {
	        myName = name;
	    }
	    public string Name 
	    {
	        get 
	        {
	            return myName;
	        }
	    }
	}
	
	[AttributeUsage(AttributeTargets.Parameter)]
	public class MyDerivedAttribute : MyAttribute
	{
	    public MyDerivedAttribute(string name) : base(name) {}
	}
	
	public class MyClass1
	{
	    public void MyMethod(
	        [MyAttribute("This is an example parameter attribute")]
	        int i,
	        [MyDerivedAttribute("This is another parameter attribute")]
	        int j,
	        int k )
	    {
	        return;
	    }
	}
	
	public class MemberInfo_GetCustomAttributes 
	{
	    public static void Main()
	    {
	        Type myType = typeof(MyClass1);
	        MethodInfo[] myMethods = myType.GetMethods();
	
	        foreach (MethodInfo mi in myMethods)
	        {
	            ParameterInfo[] myParameters = mi.GetParameters();
	            if (myParameters.Length > 0)
	            {
	                Console.WriteLine("\nThe following parameters of {0} have MyAttribute or a derived type: ", mi);
	                foreach (ParameterInfo pi in myParameters)
	                {
	                    if (pi.IsDefined(typeof(MyAttribute), false))
	                    {
	                        Console.WriteLine("Parameter {0}, name = {1}, type = {2}", 
	                            pi.Position, pi.Name, pi.ParameterType);
	                    }
	                }
	            }
	        }  
	    }
	}
	
	/* This code example produces the following output:
	
	The following parameters of Void MyMethod(Int32, Int32, Int32) have MyAttribute or a derived type:
	Parameter 0, name = i, type = System.Int32
	Parameter 1, name = j, type = System.Int32
	
	The following parameters of Boolean Equals(System.Object) have MyAttribute or a derived type:
	 */
	

snippet projectn_reflection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/subtypes.cs

	using System;
	using System.Collections.Generic;
	using System.IO;
	using System.Linq;
	using System.Runtime.InteropServices.WindowsRuntime;
	using Windows.Foundation;
	
	public class Page
	{ }
	
	public class TextBlock
	{
	   public string Text;
	}
	
	namespace Examples
	{
	   public partial class MainPage
	   {
	      public TextBlock block = new TextBlock();
	      private void InitializeComponent() {}
	   }
	}
	
	namespace Examples
	{
	   using System.Reflection;
	   using Examples.Libraries;
	
	   public sealed partial class MainPage : Page
	    {
	        public MainPage()
	        {
	            this.InitializeComponent();
	
	            Derived1 d1 = new Derived1();
	            block.Text += d1.ToString() + Environment.NewLine;
	
	            Type derivedType = typeof(Derived1);
	            Object obj = Activator.CreateInstance(derivedType);
	            block.Text += obj.GetType().FullName + Environment.NewLine;
	            
	        }
	    }
	}
	
	namespace Examples.Libraries
	{
	   public class BaseClass
	   {
	      public BaseClass()
	      { }
	       
	      public override string ToString()
	      {
	 	      return String.Format("{0} Version  {1}", this.GetType().Name, Version);
	      }
	      public virtual double Version
	      { get { return 1.0; }}
	    }
	
	   public class Derived1 : BaseClass
	   {
	      public Derived1() : base()
	      {}
	
	      public override double Version
	      { get { return 1.1; }}
	
	      public override string ToString()
	      { 
	         return String.Format("{0} Version {1}", this.GetType().Name, Version);
	      }
	   }
	}
snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/iformattable.cs

	using System;
	using System.Globalization;
	
	public class Temperature : IFormattable
	{
	   private decimal m_Temp;
	
	   public Temperature(decimal temperature)
	   {
	      this.m_Temp = temperature;
	   }
	   
	   public decimal Celsius
	   {
	      get { return this.m_Temp; }
	   }
	   
	   public decimal Kelvin
	   {
	      get { return this.m_Temp + 273.15m; }   
	   }
	   
	   public decimal Fahrenheit
	   {
	      get { return Math.Round((decimal) this.m_Temp * 9 / 5 + 32, 2); }
	   }
	
	   public override string ToString()
	   {
	      return this.ToString("G", null);
	   }
	   
	   public string ToString(string format)
	   {
	      return this.ToString(format, null);
	   }
	   
	   public string ToString(string format, IFormatProvider provider)  
	   {
	      if (String.IsNullOrEmpty(format))
	         format = "G";
	      format = format.Trim().ToUpperInvariant();
	
	      if (provider == null)
	         provider = NumberFormatInfo.CurrentInfo;
	            
	      switch (format)
	      {
	         case "F":
	            return this.Fahrenheit.ToString("N2", provider) + "°F";
	         case "K":
	            return this.Kelvin.ToString("N2", provider) + "K";
	         case "C":
	         case "G":
	            return this.Celsius.ToString("N2", provider) + "°C";
	         default:
	            throw new FormatException(String.Format("The '{0}' format string is not supported.", format));
	      }      
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
	      Temperature temp = new Temperature(22m);
	      Console.WriteLine(Convert.ToString(temp, new CultureInfo("ja-JP")));
	      Console.WriteLine("Temperature: {0:K}", temp);
	      Console.WriteLine("Temperature: {0:F}", temp);
	      Console.WriteLine(String.Format(new CultureInfo("fr-FR"), "Temperature: {0:F}", temp));
	   }
	}

snippet codememberpropertyexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeMemberPropertyExample/codememberpropertyexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeMemberPropertyExample
	    {
	        public CodeMemberPropertyExample()
	        {
	            CodeTypeDeclaration type1 = new CodeTypeDeclaration("PropertyTest");
	
	            CodeMemberField field1 = new CodeMemberField("System.String", "testStringField");
	            type1.Members.Add( field1 );
	
	            CodeMemberProperty property1 = new CodeMemberProperty();
	            property1.Name = "StringProperty";
	            property1.Type = new CodeTypeReference("System.String");
	            property1.Attributes = MemberAttributes.Public;
	            property1.GetStatements.Add( new CodeMethodReturnStatement( new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "testStringField") ) );
	            property1.SetStatements.Add( new CodeAssignStatement( new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "testStringField"), new CodePropertySetValueReferenceExpression()));
	            type1.Members.Add(property1);
	
	            CodeConstructor constructor1 = new CodeConstructor();
	            constructor1.Attributes = MemberAttributes.Public;            
	            type1.Members.Add( constructor1 );
	            
	
	
	        }
	
	        public void SpecificExample()
	        {
	            CodeMemberProperty property1 = new CodeMemberProperty();
	            property1.Name = "StringProperty";
	            property1.Type = new CodeTypeReference("System.String");
	            property1.Attributes = MemberAttributes.Public;
	            property1.GetStatements.Add( new CodeMethodReturnStatement( new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "testStringField") ) );
	            property1.SetStatements.Add( new CodeAssignStatement( new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "testStringField"), new CodePropertySetValueReferenceExpression()));
	            
	
	        }
	    }
	}
snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/outarrayofstructs.cs

	using System;
	using System.Runtime.InteropServices;
	
	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
	public class MyStruct
	{
	    public string buffer;
	    public int size;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct MyUnsafeStruct
	{
	    public IntPtr buffer;
	    public int size;
	}
	
	public unsafe class LibWrap
	{
	    [DllImport("..\\LIB\\PInvokeLib.dll")]
	    public static extern void TestOutArrayOfStructs(
	        out int size, out IntPtr outArray);
	
	    [DllImport("..\\LIB\\PInvokeLib.dll")]
	    public static extern void TestOutArrayOfStructs(
	        out int size, MyUnsafeStruct** outArray);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        Console.WriteLine("\nUsing marshal class\n");
	        UsingMarshaling();
	        Console.WriteLine("\nUsing unsafe code\n");
	        UsingUnsafePointer();
	    }
	
	    public static void UsingMarshaling()
	    {
	        int size;
	        IntPtr outArray;
	
	        LibWrap.TestOutArrayOfStructs(out size, out outArray);
	        MyStruct[] manArray = new MyStruct[size];
	        IntPtr current = outArray;
	        for (int i = 0; i < size; i++)
	        {
	            manArray[i] = new MyStruct();
	            Marshal.PtrToStructure(current, manArray[i]);
	
	            Marshal.DestroyStructure(current, typeof(MyStruct));
	            current = (IntPtr)((long)current + Marshal.SizeOf(manArray[i]));
	
	            Console.WriteLine("Element {0}: {1} {2}", i, manArray[i].buffer,
	                manArray[i].size);
	        }
	
	        Marshal.FreeCoTaskMem(outArray);
	    }
	
	    public static unsafe void UsingUnsafePointer()
	    {
	        int size;
	        MyUnsafeStruct* pResult;
	
	        LibWrap.TestOutArrayOfStructs(out size, &pResult);
	        MyUnsafeStruct* pCurrent = pResult;
	        for (int i = 0; i < size; i++, pCurrent++)
	        {
	            Console.WriteLine("Element {0}: {1} {2}", i,
	                Marshal.PtrToStringAnsi(pCurrent->buffer), pCurrent->size);
	            Marshal.FreeCoTaskMem(pCurrent->buffer);
	        }
	
	        Marshal.FreeCoTaskMem((IntPtr)pResult);
	    }
	}

snippet formatting_howto_parsenumericinput

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_ParseNumericInput/NumericUserInput1.aspx.cs

	using System.Web.UI;
	using System.Web.UI.WebControls;
	
	using System;
	using System.Globalization;
	
	partial class NumericUserInput : System.Web.UI.Page
	{
	   protected void OKButton_Click(object sender, EventArgs e)
	   {
	      string locale;
	      CultureInfo culture = null;
	      double number = 0;
	      bool result = false;
	
	      if (String.IsNullOrEmpty(this.NumericString.Text)) return;
	
	      this.NumericInput.Visible = false;
	
	      if (!(Request.UserLanguages.Length == 0 || String.IsNullOrEmpty(Request.UserLanguages[0])))
	      {
	         try
	         {
	            locale = Request.UserLanguages[0];
	            culture = new CultureInfo(locale, false);
	
	            result = Double.TryParse(this.NumericString.Text, NumberStyles.Any,
	                                     culture.NumberFormat, out number);
	         }
	         catch { }
	         if (!result)
	         {
	            if (Request.UserLanguages.Length > 1)
	            {
	               for (int ctr = 1; ctr <= Request.UserLanguages.Length - 1; ctr++)
	               {
	                  try
	                  {
	                     locale = Request.UserLanguages[ctr];
	                     locale = locale.Substring(1, locale.IndexOf(';') - 1);
	                     culture = new CultureInfo(Request.UserLanguages[ctr], false);
	                     result = Double.TryParse(this.NumericString.Text, NumberStyles.Any, culture.NumberFormat, out number);
	                     if (result) break;
	                  }
	                  catch { }
	               }
	            }
	         }
	      }
	      if (!result)
	         result = Double.TryParse(this.NumericString.Text, NumberStyles.Any, CultureInfo.InvariantCulture, out number);
	
	      number *= 2;
	
	      if (result)
	      {
	         Response.Write("<P />");
	         Response.Write(Server.HtmlEncode(this.NumericString.Text) + " * 2 = " + number.ToString("N", culture) + "<BR />");
	      }
	      else
	      {
	         this.NumericInput.Visible = true;
	
	         Response.Write("<P />");
	         Response.Write("Unable to recognize " + Server.HtmlEncode(this.NumericString.Text));
	      }
	   }
	}
	
	partial class NumericUserInput
	{
	   protected UserControl NumericInput = new UserControl();
	   protected TextBox NumericString = new TextBox();
	   protected Button OKButton = new Button();
	}

snippet io_fileinfo_getaccesscontrol_setaccesscontrol

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IO_FileInfo_GetAccessControl_SetAccessControl/sample.cs

	using System;
	using System.IO;
	using System.Security.AccessControl;
	
	namespace FileSystemExample
	{
	    class FileExample
	    {
	        public static void Main()
	        {
	            try
	            {
	                string FileName = "c:/test.xml";
	
	                Console.WriteLine("Adding access control entry for " + FileName);
	
	                AddFileSecurity(FileName, @"MyDomain\MyAccessAccount", FileSystemRights.ReadData, AccessControlType.Allow);
	
	                Console.WriteLine("Removing access control entry from " + FileName);
	
	                RemoveFileSecurity(FileName, @"MyDomain\MyAccessAccount", FileSystemRights.ReadData, AccessControlType.Allow);
	
	                Console.WriteLine("Done.");
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine(e);
	            }
	
	        }
	
	        public static void AddFileSecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)
	        {
	            FileInfo fInfo = new FileInfo(FileName);
	
	            FileSecurity fSecurity = fInfo.GetAccessControl();
	
	            fSecurity.AddAccessRule(new FileSystemAccessRule(Account,
	                                                            Rights,
	                                                            ControlType));
	
	            fInfo.SetAccessControl(fSecurity);
	
	        }
	
	        public static void RemoveFileSecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)
	        {
	            FileInfo fInfo = new FileInfo(FileName);
	
	            FileSecurity fSecurity = fInfo.GetAccessControl();
	
	            fSecurity.RemoveAccessRule(new FileSystemAccessRule(Account,
	                                                            Rights,
	                                                            ControlType));
	
	            fInfo.SetAccessControl(fSecurity);
	
	        }
	    }
	}
snippet enumbuilder_setcustomattribute2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/enumbuilder_setcustomattribute2.cs

	
	/*
	   The following program demonstrates 'GetCustomAttributes(bool)'
	   and 'SetCustomAttribute(ConstructorInfo, byte[])' methods of 
	   'System.Reflection.Emit.EnumBuilder' class. It defines 'MyAttribute' 
	   class which is derived from 'System.Attribute' class. It builds an 
	   Enum and sets 'MyAttribute' as  custom attribute to the Enum. 
	   It gets the custom attributes of the Enum type and displays its contents 
	   on the console.
	*/
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	
	
	[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
	public class MyAttribute : Attribute
	{
	   public bool myBoolValue;
	
	   public MyAttribute(bool myBool)
	   {
	      this.myBoolValue = myBool;
	   }
	}
	
	class MyApplication
	{
	   static EnumBuilder myEnumBuilder;
	   
	   public static void Main()
	   {
	      try
	      {
	         CreateCallee(Thread.GetDomain());
	         object[] myAttributesArray = myEnumBuilder.GetCustomAttributes(true);
	
	         Console.WriteLine("Custom attribute contains: ");
	         for(int index=0; index < myAttributesArray.Length; index++)
	         {
	            if(myAttributesArray[index] is MyAttribute)
	            {
	               Console.WriteLine("myBoolValue: " + 
	                                       ((MyAttribute)myAttributesArray[index]).myBoolValue);
	            }
	         }
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("The following exception is raised:" +e.Message);
	      }
	   }
	
	   private static void CreateCallee(AppDomain domain)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedAssembly";
	     
	      AssemblyBuilder myAssemblyBuilder 
	                  = domain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run); 
	      
	      Type myType = typeof(MyAttribute);
	      ConstructorInfo myInfo = myType.GetConstructor(new Type[]{typeof(bool)});
	                  
	      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("EmittedModule");
	      
	      myEnumBuilder = 
	         myModuleBuilder.DefineEnum("MyNamespace.MyEnum", TypeAttributes.Public, typeof(Int32));
	
	      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral("FieldOne", 1);
	      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral("FieldTwo", 2);  
	
	      myEnumBuilder.CreateType();
	      myEnumBuilder.SetCustomAttribute(myInfo, new byte[]{01,00,01});
	      
	   }
	}
snippet conceptual_disposable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_disposable/base1.cs

	using Microsoft.Win32.SafeHandles;
	using System;
	using System.IO;
	using System.Runtime.InteropServices;
	
	public class DisposableStreamResource : IDisposable
	{
	   protected const uint GENERIC_READ = 0x80000000;
	   protected const uint FILE_SHARE_READ = 0x00000001;
	   protected const uint OPEN_EXISTING = 3;
	   protected const uint FILE_ATTRIBUTE_NORMAL = 0x80;
	   protected IntPtr INVALID_HANDLE_VALUE = new IntPtr(-1);
	   private const int INVALID_FILE_SIZE = unchecked((int) 0xFFFFFFFF);
	   
	   [DllImport("kernel32.dll", EntryPoint = "CreateFileW", CharSet = CharSet.Unicode)]
	   protected static extern IntPtr CreateFile (
	                                  string lpFileName, uint dwDesiredAccess, 
	                                  uint dwShareMode, IntPtr lpSecurityAttributes, 
	                                  uint dwCreationDisposition, uint dwFlagsAndAttributes, 
	                                  IntPtr hTemplateFile);
	   
	   [DllImport("kernel32.dll")]
	   private static extern int GetFileSize(SafeFileHandle hFile, out int lpFileSizeHigh);
	    
	   private bool disposed = false;
	   private SafeFileHandle safeHandle; 
	   private long bufferSize;
	   private int upperWord;
	   
	   public DisposableStreamResource(string filename)
	   {
	      if (filename == null)
	         throw new ArgumentNullException("The filename cannot be null.");
	      else if (filename == "")
	         throw new ArgumentException("The filename cannot be an empty string.");
	            
	      IntPtr handle = CreateFile(filename, GENERIC_READ, FILE_SHARE_READ,
	                                 IntPtr.Zero, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL,
	                                 IntPtr.Zero);
	      if (handle != INVALID_HANDLE_VALUE)
	         safeHandle = new SafeFileHandle(handle, true);
	      else
	         throw new FileNotFoundException(String.Format("Cannot open '{0}'", filename));
	      
	      bufferSize = GetFileSize(safeHandle, out upperWord); 
	      if (bufferSize == INVALID_FILE_SIZE)
	         bufferSize = -1;
	      else if (upperWord > 0) 
	         bufferSize = (((long)upperWord) << 32) + bufferSize;
	   }
	   
	   public long Size 
	   { get { return bufferSize; } }
	
	   public void Dispose()
	   {
	      Dispose(true);
	      GC.SuppressFinalize(this);
	   }           
	
	   protected virtual void Dispose(bool disposing)
	   {
	      if (disposed) return;
	
	      if (disposing)
	         safeHandle.Dispose();
	      
	      
	      disposed = true;
	   }  
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      DisposableStreamResource d = new DisposableStreamResource(@"C:\Windows\Explorer.exe");
	      Console.WriteLine(d.Size.ToString("N0"));
	      d.Dispose();
	   }
	}

snippet constructorbuilder_setcustomattribute1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ConstructorBuilder_SetCustomAttribute1/constructorbuilder_setcustomattribute1.cs

	/*
	   The following program demonstrates the 'SetCustomAttribute(CustomAttributeBuilder)'
	   method of 'ConstructorBuilder' class. It defines a 'MyAttribute' class which is derived
	   from 'Attribute' class. It builds a constructor by setting 'MyAttribute' custom attribute
	   and defines 'Helloworld' type. Then it gets the custom attributes of 'HelloWorld' type
	   and displays its contents to the console.
	*/
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	
	
	[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
	public class MyAttribute : Attribute
	{
	   public String myString;
	   public int myInteger;
	   public MyAttribute(String myString, int myInteger)
	   {
	      this.myString = myString;
	      this.myInteger = myInteger;
	   }
	}
	
	public class MyConstructorBuilder
	{
	   public static void Main()
	   {
	      Type myHelloworld = MyCreateCallee(Thread.GetDomain());
	      ConstructorInfo myConstructor = myHelloworld.GetConstructor(new Type[]{typeof(String)});
	      object[] myAttributes1 = myConstructor.GetCustomAttributes(true);
	      Console.WriteLine("MyAttribute custom attribute contains  ");
	      for(int index=0; index < myAttributes1.Length; index++)
	      {
	         if(myAttributes1[index] is MyAttribute)
	         {
	            Console.WriteLine("The value of myString is : " 
	                                       + ((MyAttribute)myAttributes1[index]).myString);
	            Console.WriteLine("The value of myInteger is : " 
	                                       + ((MyAttribute)myAttributes1[index]).myInteger);
	         }
	      }
	   }
	
	   private static Type MyCreateCallee(AppDomain domain)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedAssembly";
	      AssemblyBuilder myAssembly =
	                  domain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.Run);
	      ModuleBuilder myModuleBuilder = myAssembly.DefineDynamicModule("EmittedModule");
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("HelloWorld",
	         TypeAttributes.Public);
	      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(
	               MethodAttributes.Public, CallingConventions.Standard, new Type[]{typeof(String)});
	      ILGenerator myILGenerator = myConstructor.GetILGenerator();
	      myILGenerator.Emit(OpCodes.Ldstr, "Constructor is invoked");
	      myILGenerator.Emit(OpCodes.Ldarg_1);
	      MethodInfo myMethodInfo =
	                     typeof(Console).GetMethod("WriteLine",new Type[]{typeof(string)});
	      myILGenerator.Emit(OpCodes.Call, myMethodInfo);
	      myILGenerator.Emit(OpCodes.Ret);
	      Type myType = typeof(MyAttribute);
	      ConstructorInfo myConstructorInfo = myType.GetConstructor(new Type[2]{typeof(String), typeof(int)});
	      CustomAttributeBuilder attributeBuilder =
	         new CustomAttributeBuilder(myConstructorInfo, new object[2]{"Hello", 2});
	      try
	      {
	         myConstructor.SetCustomAttribute(attributeBuilder);
	      }
	      catch(ArgumentNullException ex)
	      {
	         Console.WriteLine("The following exception has occurred : "+ex.Message);
	      }
	      catch(Exception ex)
	      {
	         Console.WriteLine("The following exception has occurred : "+ex.Message);
	      }
	      return myTypeBuilder.CreateType();
	   }
	}

snippet modulebuilder_class

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_Class/modulebuilder.cs

	
	/*
	The following example demonstrates the 'ModuleBuilder' class. 
	 A dynamic assembly with a module in it is created in 'CodeGenerator' class. 
	A run time class having a method and a field is created using the 'ModuleBuilder'
	class and created class is called from the 'TestClass'.
	*/
	
	   using System;
	   using System.Reflection;
	   using System.Reflection.Emit;
	   using System.Security.Permissions;
	
	   public class CodeGenerator
	   {
	      AssemblyBuilder myAssemblyBuilder;
	      public CodeGenerator()
	      {
	         AppDomain myCurrentDomain = AppDomain.CurrentDomain;
	         AssemblyName myAssemblyName = new AssemblyName();
	         myAssemblyName.Name = "TempAssembly";
	
	         myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly
	                        (myAssemblyName, AssemblyBuilderAccess.Run);
	
	         ModuleBuilder myModuleBuilder = myAssemblyBuilder.
	                                         DefineDynamicModule("TempModule");
	
	         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType
	                                          ("TempClass",TypeAttributes.Public);
	
	         FieldBuilder greetingField = myTypeBuilder.DefineField("Greeting", 
	                                                               typeof(String), FieldAttributes.Public);
	         Type[] myMethodArgs = { typeof(String) };
	
	         MethodBuilder myMethod = myTypeBuilder.DefineMethod("MyMethod",
	            MethodAttributes.Public, CallingConventions.Standard, null,myMethodArgs);
	
	         ILGenerator methodIL = myMethod.GetILGenerator();
	         methodIL.EmitWriteLine("In the method...");
	         methodIL.Emit(OpCodes.Ldarg_0);
	         methodIL.Emit(OpCodes.Ldarg_1);
	         methodIL.Emit(OpCodes.Stfld, greetingField);
	         methodIL.Emit(OpCodes.Ret);
	         myTypeBuilder.CreateType();
	      }
	      public AssemblyBuilder MyAssembly
	      {
	         get
	         {
	            return this.myAssemblyBuilder;
	         }
	      }
	   }
	   public class TestClass
	   {
	      [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	      public static void Main()
	      {
	         CodeGenerator myCodeGenerator = new CodeGenerator();
	         AssemblyBuilder myAssemblyBuilder = myCodeGenerator.MyAssembly;
	         ModuleBuilder myModuleBuilder = myAssemblyBuilder.
	                                                              GetDynamicModule("TempModule");
	         Console.WriteLine("The fully qualified name and path to this "
	                                  + "module is :" +myModuleBuilder.FullyQualifiedName);
	         Type myType = myModuleBuilder.GetType("TempClass");
	         MethodInfo myMethodInfo = 
	                                                   myType.GetMethod("MyMethod");
	         MethodToken myMethodToken = 
	                           myModuleBuilder.GetMethodToken(myMethodInfo);
	         Console.WriteLine("Token used to identify the method of 'myType'"
	                       + " within the module is {0:x}",myMethodToken.Token);
	        object[] args={"Hello."};
	        object myObject = Activator.CreateInstance(myType,null,null);
	        myMethodInfo.Invoke(myObject,args);
	      }
	   }

snippet appdomainunloadedexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomainUnloadedException/Sample.cs

	using System;
	using System.Threading;
	using System.Runtime.InteropServices;
	
	public class Example
	{
	    public static void Main()
	    {
	        ThreadPool.QueueUserWorkItem(ThreadProc, " from a ThreadPool thread");
	        Thread.Sleep(1000);
	
	        Thread t = new Thread(ThreadProc);
	        t.Start(" from an ordinary thread");
	        t.Join();
	
	        try
	        {
	            ThreadProc(" from the main application thread (handled)");
	        }
	        catch (AppDomainUnloadedException adue)
	        {
	            Console.WriteLine("Main thread caught AppDomainUnloadedException: {0}", adue.Message);
	        }
	
	        ThreadProc(" from the main application thread (unhandled)");
	
	        Console.WriteLine("Main: This message is never displayed.");
	    }
	
	    private static void ThreadProc(object state)
	    {
	        AppDomain ad = AppDomain.CreateDomain("TestDomain");
	        TestClass tc = (TestClass)ad.CreateInstanceAndUnwrap("Sample", "TestClass");
	
	        tc.UnloadCurrentDomain(state);
	
	        Console.WriteLine("ThreadProc: This message is never displayed.");
	    }
	}
	
	public class TestClass : MarshalByRefObject
	{
	    public void UnloadCurrentDomain(object state)
	    {
	        Console.WriteLine("\nUnloading the current AppDomain{0}.", state);
	 
	        AppDomain.Unload(AppDomain.CurrentDomain);
	    }
	}
	
	/* This code example produces output similar to the following:
	Unloading the current AppDomain from a ThreadPool thread.
	
	Unloading the current AppDomain from an ordinary thread.
	
	Unloading the current AppDomain from the main application thread (handled).
	Main thread caught AppDomainUnloadedException: The application domain in which the thread was running has been unloaded.
	
	Unloading the current AppDomain from the main application thread (unhandled).
	
	Unhandled Exception: System.AppDomainUnloadedException: The application domain in which the thread was running has been unloaded.
	   at TestClass.UnloadCurrentDomain(Object state)
	   at Example.ThreadProc(Object state)
	   at Example.Main()
	 */

snippet type_getdefaultmembers

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/source2.cs

	using System;
	using System.Reflection;
	
	[DefaultMember("GetIVal")]
	public class Class1
	{
	    private int ival;
	    private string sval;
	
	    public Class1()
	    {
	        ival = 5050;
	        sval = "6040";
	    }
	
	    public int GetIVal()
	    {
	        return ival;
	    }
	
	    public string GetSVal()
	    {
	        return sval;
	    }
	}
	
	public class GetMemberExample
	{
	    public static void Main()
	    {
	        Class1 c = new Class1();
	        object o;
	        o = c.GetType().InvokeMember("", BindingFlags.InvokeMethod, null, c, new object[0]);
	        Console.WriteLine("Default member result: {0}", o);
	
	        GetDefMemberExample1();
	        GetDefMemberExample2();
	        GetDefMemberExample3();
	    }
	
	    public static void GetDefMemberExample1()
	    {
	        Type classType = typeof(Class1);
	        Type attribType = typeof(DefaultMemberAttribute);
	        DefaultMemberAttribute defMem =
	            (DefaultMemberAttribute)Attribute.GetCustomAttribute((MemberInfo)classType, attribType);
	        MemberInfo[] memInfo = classType.GetMember(defMem.MemberName);
	        if ( memInfo.Length > 0)
	        {
	            Console.WriteLine("Default Member: {0}", memInfo[0].Name);
	        }
	    }
	
	    public static void GetDefMemberExample2()
	    {
	        Type t = typeof(Class1);
	        MemberInfo[] memInfo = t.GetDefaultMembers();
	        if ( memInfo.Length > 0)
	        {
	            Console.WriteLine("Default Member: {0}", memInfo[0].Name);
	        }
	    }
	
	    public static void GetDefMemberExample3()
	    {
	        Type t = typeof(Class1);
	        object[] customAttribs = t.GetCustomAttributes(typeof(DefaultMemberAttribute), false);
	        if (customAttribs.Length > 0)
	        {
	            DefaultMemberAttribute defMem = (DefaultMemberAttribute)customAttribs[0];
	            MemberInfo[] memInfo = t.GetMember(defMem.MemberName);
	            if (memInfo.Length > 0)
	            {
	                Console.WriteLine("Default Member: {0}", memInfo[0].Name);
	            }
	        }
	    }
	}

snippet formatting_enum

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_Enum/enum1.cs

	using System;
	using System.IO;
	
	public enum Color {Red = 1, Blue = 2, Green = 3}
	
	public class Class1
	{
	   public static void Main()
	   {
	      ShowGSpecifier();
	      ShowFSpecifier();
	      ShowDSpecifier();  
	      ShowXSpecifier();
	      ShowExample();
	   }
	
	   private static void ShowGSpecifier()
	   {
	      Console.WriteLine("G Specifier:");
	      FileAttributes attributes = FileAttributes.Hidden |
	                                  FileAttributes.Archive;
	      Console.WriteLine();
	   }
	   
	   private static void ShowFSpecifier()
	   {
	      Console.WriteLine("F Specifier:");
	      FileAttributes attributes = FileAttributes.Hidden | 
	                                  FileAttributes.Archive;
	      Console.WriteLine();
	   }
	   
	   private static void ShowDSpecifier()
	   {
	      Console.WriteLine("D Specifier:");
	      FileAttributes attributes = FileAttributes.Hidden |
	                                  FileAttributes.Archive;
	      Console.WriteLine();
	   }
	   
	   private static void ShowXSpecifier()
	   {
	      Console.WriteLine("X Specifier:");
	      FileAttributes attributes = FileAttributes.Hidden |
	                                  FileAttributes.Archive;
	      Console.WriteLine();
	   }
	
	   private static void ShowExample()
	   {
	      Console.WriteLine("Example:");
	      Color myColor = Color.Green;      
	      
	      Console.WriteLine("The value of myColor is {0}.", 
	                        myColor.ToString("G"));
	      Console.WriteLine("The value of myColor is {0}.", 
	                        myColor.ToString("F"));
	      Console.WriteLine("The value of myColor is {0}.", 
	                        myColor.ToString("D"));
	      Console.WriteLine("The value of myColor is 0x{0}.", 
	                        myColor.ToString("X"));
	   }
	}

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/numbers3.cs

	using System;
	using System.Globalization;
	using System.IO;
	using System.Runtime.Serialization.Formatters.Binary;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
	      double[] numbers = GetRandomNumbers(10);
	      DisplayRandomNumbers(numbers);
	      
	      FileStream fsIn = new FileStream("randoms.dat", FileMode.Create);
	      BinaryFormatter formatter = new BinaryFormatter();
	      formatter.Serialize(fsIn, numbers);
	      fsIn.Close();
	      
	      FileStream fsOut = new FileStream("randoms.dat", FileMode.Open);
	      double[] numbers1 = (Double[]) formatter.Deserialize(fsOut);      
	      fsOut.Close();
	      
	      Console.WriteLine("Current Culture: {0}", 
	                        Thread.CurrentThread.CurrentCulture.DisplayName); 
	      DisplayRandomNumbers(numbers1);
	                                             
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("fr-FR");
	      Console.WriteLine("Current Culture: {0}", 
	                        Thread.CurrentThread.CurrentCulture.DisplayName); 
	      DisplayRandomNumbers(numbers1);
	   }
	
	   private static double[] GetRandomNumbers(int n)
	   {
	      Random rnd = new Random();
	      double[] numbers = new double[n];
	      for (int ctr = 0; ctr < n; ctr++)
	         numbers[ctr] = rnd.NextDouble() * 1000;
	      return numbers;
	   }
	   
	   private static void DisplayRandomNumbers(double[] numbers)
	   {
	      for (int ctr = 0; ctr < numbers.Length; ctr++)
	         Console.WriteLine(numbers[ctr].ToString("R"));
	      Console.WriteLine();
	   }
	}
snippet cryptography_rsacsp_usemachinekey

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RSACSP_UseMachineKey/example.cs

	using System;
	using System.Security.Cryptography;
	
	class RSACSPSample
	{
	
	    static void Main()
	    {
	
	        string KeyContainerName = "MyKeyContainer";
	
	        RSACryptoServiceProvider.UseMachineKeyStore = true;
	
	        RSAPersistKeyInCSP(KeyContainerName);
	
	        RSADeleteKeyInCSP(KeyContainerName);
	    }
	
	    public static void RSAPersistKeyInCSP(string ContainerName)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);
	
	          
	
	            Console.WriteLine("The RSA key was persisted in the container, \"{0}\".", ContainerName);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	        }
	    }
	
	    public static void RSADeleteKeyInCSP(string ContainerName)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);
	
	            RSAalg.PersistKeyInCsp = false;
	
	            RSAalg.Clear();
	
	            Console.WriteLine("The RSA key was deleted from the container, \"{0}\".", ContainerName);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	        }
	    }
	}
snippet stringexample1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringexample1/source.cs

	using System;
	using System.Text;
	
	namespace Microsoft.Demo
	{
	    class ConsoleApp
	    {
	        [STAThread]
	        static void Main(string[] args)
	        {
	            char [] charArr1 = {'\u2200','\u2202','\u200F','\u2205'};
	            String szMathSymbols = new String(charArr1);
	
	            char [] charArr2 = {'\u2111','\u2118','\u2122','\u2126'};
	            String szLetterLike = new String (charArr2);
	
	            Console.WriteLine("The Strings are equal? " +
	                (String.Compare(szMathSymbols, szLetterLike)==0?"true":"false") );
	            unsafe
	            {
	                String szAsciiUpper = null;
	                sbyte[] sbArr1 = new sbyte[] { 0x41, 0x42, 0x43, 0x00 };
	                fixed(sbyte* pAsciiUpper = sbArr1)
	                {
	                    szAsciiUpper = new String(pAsciiUpper);
	                }
	                String szAsciiLower = null;
	                sbyte[] sbArr2 = { 0x61, 0x62, 0x63, 0x00 };
	                fixed(sbyte* pAsciiLower = sbArr2)
	                {
	                    szAsciiLower = new String(pAsciiLower, 0, sbArr2.Length);
	                }
	                Console.WriteLine(szAsciiUpper + " " + szAsciiLower);
	
	                Console.WriteLine("The Strings are equal when capitalized ? " +
	                    (String.Compare(szAsciiUpper.ToUpper(), szAsciiLower.ToUpper())==0?"true":"false") );
	
	                Console.WriteLine("The Strings are equal when capitalized ? " +
	                    (String.Compare(szAsciiUpper, szAsciiLower, true)==0?"true":"false") );
	            }
	            String szGreekAlpha = new String('\u0391',5);
	            String szGreekOmega = new String(new char [] {'\u03A9','\u03A9','\u03A9'},2,1);
	
	            String szGreekLetters = String.Concat(szGreekOmega, szGreekAlpha, szGreekOmega.Clone());
	
	            Console.WriteLine(szGreekLetters);
	
	            int ialpha = szGreekLetters.IndexOf('\u0391');
	            int iomega = szGreekLetters.LastIndexOf('\u03A9');
	
	            Console.WriteLine("The Greek letter Alpha first appears at index " + ialpha +
	                " and Omega last appears at index " + iomega + " in this String.");
	
	            unsafe
	            {
	                String utfeightstring = null;
	                sbyte [] asciiChars = new sbyte[] { 0x51,0x52,0x53,0x54,0x54,0x56 };
	                UTF8Encoding encoding = new UTF8Encoding(true, true);
	
	                fixed(sbyte* pAsciiChars = asciiChars)
	                {
	                    utfeightstring = new String(pAsciiChars,0,asciiChars.Length,encoding);
	                }
	            }
	        }
	    }
	} 
snippet filesystemwatcher

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FileSystemWatcher/filesystemwatcher.cs

	using System;
	using System.IO;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	        FileSystemWatcher fsw = new FileSystemWatcher("C:\\");
	
	        fsw.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite
	            | NotifyFilters.FileName |NotifyFilters.DirectoryName;
	
	        fsw.Changed += new FileSystemEventHandler(OnChanged);
	
	        fsw.Created += new FileSystemEventHandler(OnChanged);
	
	        fsw.Deleted += new FileSystemEventHandler(OnChanged);
	
	        fsw.Renamed += new RenamedEventHandler(OnRenamed);
	
	        fsw.Error += new ErrorEventHandler(OnError);
	
	        fsw.EnableRaisingEvents = true;
	
	        Console.WriteLine("Press \'Enter\' to quit the sample.");
	        Console.ReadLine();
	
	
	    }
	
	    private static void OnChanged(object source, FileSystemEventArgs e)
	    {
	        WatcherChangeTypes wct = e.ChangeType;
	        Console.WriteLine("File {0} {1}", e.FullPath, wct.ToString());
	    }
	
	    private static void OnRenamed(object source, RenamedEventArgs e)
	    {
	        WatcherChangeTypes wct = e.ChangeType;
	        Console.WriteLine("File {0} {2} to {1}", e.OldFullPath, e.FullPath, wct.ToString());
	    }
	
	    private static void OnError(object source, ErrorEventArgs e)
	    {
	        Console.WriteLine("The FileSystemWatcher has detected an error");
	        if (e.GetException().GetType() == typeof(InternalBufferOverflowException))
	        {
	            Console.WriteLine(("The file system watcher experienced an internal buffer overflow: " + e.GetException().Message));
	        }
	    }
	
	}

snippet char_surrogate

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/char_surrogate/sur.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    char cHigh = '\uD800';
	    char cLow  = '\uDC00';
	    string s1  = new String(new char[] {'a', '\uD800', '\uDC00', 'z'});
	    string divider = String.Concat( Environment.NewLine, new String('-', 70), 
	                                    Environment.NewLine);
	
	    Console.WriteLine();
	    Console.WriteLine("Hexadecimal code point of the character, cHigh: {0:X4}", (int)cHigh);
	    Console.WriteLine("Hexadecimal code point of the character, cLow:  {0:X4}", (int)cLow);
	    Console.WriteLine();
	    Console.WriteLine("Characters in string, s1: 'a', high surrogate, low surrogate, 'z'");
	    Console.WriteLine("Hexadecimal code points of the characters in string, s1: ");
	    for(int i = 0; i < s1.Length; i++)
	        {
	        Console.WriteLine("s1[{0}] = {1:X4} ", i, (int)s1[i]);
	        }
	    Console.WriteLine(divider);
	
	    Console.WriteLine("Is each of the following characters a high surrogate?");
	    Console.WriteLine("A1) cLow?  - {0}", Char.IsHighSurrogate(cLow));
	    Console.WriteLine("A2) cHigh? - {0}", Char.IsHighSurrogate(cHigh));
	    Console.WriteLine("A3) s1[0]? - {0}", Char.IsHighSurrogate(s1, 0));
	    Console.WriteLine("A4) s1[1]? - {0}", Char.IsHighSurrogate(s1, 1));
	    Console.WriteLine(divider);
	
	    Console.WriteLine("Is each of the following characters a low surrogate?");
	    Console.WriteLine("B1) cLow?  - {0}", Char.IsLowSurrogate(cLow));
	    Console.WriteLine("B2) cHigh? - {0}", Char.IsLowSurrogate(cHigh));
	    Console.WriteLine("B3) s1[0]? - {0}", Char.IsLowSurrogate(s1, 0));
	    Console.WriteLine("B4) s1[2]? - {0}", Char.IsLowSurrogate(s1, 2));
	    Console.WriteLine(divider);
	
	    Console.WriteLine("Is each of the following pairs of characters a surrogate pair?");
	    Console.WriteLine("C1) cHigh and cLow?  - {0}", Char.IsSurrogatePair(cHigh, cLow));
	    Console.WriteLine("C2) s1[0] and s1[1]? - {0}", Char.IsSurrogatePair(s1, 0));
	    Console.WriteLine("C3) s1[1] and s1[2]? - {0}", Char.IsSurrogatePair(s1, 1));
	    Console.WriteLine("C4) s1[2] and s1[3]? - {0}", Char.IsSurrogatePair(s1, 2));
	    Console.WriteLine(divider);
	    }
	}
	/*
	This example produces the following results:
	
	Hexadecimal code point of the character, cHigh: D800
	Hexadecimal code point of the character, cLow:  DC00
	
	Characters in string, s1: 'a', high surrogate, low surrogate, 'z'
	Hexadecimal code points of the characters in string, s1:
	s1[0] = 0061
	s1[1] = D800
	s1[2] = DC00
	s1[3] = 007A
	
	----------------------------------------------------------------------
	
	Is each of the following characters a high surrogate?
	A1) cLow?  - False
	A2) cHigh? - True
	A3) s1[0]? - False
	A4) s1[1]? - True
	
	----------------------------------------------------------------------
	
	Is each of the following characters a low surrogate?
	B1) cLow?  - True
	B2) cHigh? - False
	B3) s1[0]? - False
	B4) s1[2]? - True
	
	----------------------------------------------------------------------
	
	Is each of the following pairs of characters a surrogate pair?
	C1) cHigh and cLow?  - True
	C2) s1[0] and s1[1]? - False
	C3) s1[1] and s1[2]? - True
	C4) s1[2] and s1[3]? - False
	
	----------------------------------------------------------------------
	
	*/
snippet char_cvtutf32

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/char_cvtutf32/utf.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string s1;
	    string comment   = "Create a UTF-16 encoded string from a code point.";
	    string comment1b = "Create a code point from a UTF-16 encoded string.";
	    string comment2b = "Create a code point from a surrogate pair at a certain position in a string.";
	    string comment2c = "Create a code point from a high surrogate and a low surrogate code point.";
	
	
	    Console.WriteLine(comment);
	    s1 = Char.ConvertFromUtf32(letterA);
	    Console.Write("    1a) 0x{0:X} => ", letterA);
	    Show(s1);
	    Console.WriteLine();
	
	
	    Console.WriteLine(comment1b);
	    letterA = Char.ConvertToUtf32(s1, 0);
	    Console.Write("    1b) ");
	    Show(s1);
	    Console.WriteLine(" => 0x{0:X}", letterA);
	    Console.WriteLine();
	
	
	
	    Console.WriteLine(comment);
	    s1 = Char.ConvertFromUtf32(music);
	    Console.Write("    2a) 0x{0:X} => ", music);
	    Show(s1);
	    Console.WriteLine();
	
	
	    Console.WriteLine(comment2b);
	    music = Char.ConvertToUtf32(s1, 0);
	    Console.Write("    2b) ");
	    Show(s1);
	    Console.WriteLine(" => 0x{0:X}", music);
	
	
	    Console.WriteLine(comment2c);
	    music = Char.ConvertToUtf32(s1[0], s1[1]);
	    Console.Write("    2c) ");
	    Show(s1);
	    Console.WriteLine(" => 0x{0:X}", music);
	    }
	
	    private static void Show(string s)
	    {
	    for (int x = 0; x < s.Length; x++)
	        {
	        Console.Write("0x{0:X}{1}", 
	                       (int)s[x], 
	                       ((x == s.Length-1)? String.Empty : ", "));
	        }
	    }
	}
	/*
	This example produces the following results:
	
	Create a UTF-16 encoded string from a code point.
	    1a) 0x41 => 0x41
	Create a code point from a UTF-16 encoded string.
	    1b) 0x41 => 0x41
	
	Create a UTF-16 encoded string from a code point.
	    2a) 0x1D161 => 0xD834, 0xDD61
	Create a code point from a surrogate pair at a certain position in a string.
	    2b) 0xD834, 0xDD61 => 0x1D161
	Create a code point from a high surrogate and a low surrogate code point.
	    2c) 0xD834, 0xDD61 => 0x1D161
	
	*/
snippet regularexpressions_examples_email

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Examples_Email/example3.cs

	using System;
	using System.Globalization;
	using System.Text.RegularExpressions;
	
	public class RegexUtilities
	{
	   bool invalid = false;
	   
	   public bool IsValidEmail(string strIn)
	   {
	       invalid = false;
	       if (String.IsNullOrEmpty(strIn))
	          return false;
	       
	       try {
	          strIn = Regex.Replace(strIn, @"(@)(.+)$", this.DomainMapper,
	                                RegexOptions.None, TimeSpan.FromMilliseconds(200));
	       }
	       catch (RegexMatchTimeoutException) {
	         return false;
	       }
	       
	       if (invalid) 
	          return false;
	       
	       try {
	          return Regex.IsMatch(strIn, 
	                @"^(?("")(""[^""]+?""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" + 
	                @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9]{2,24}))$", 
	                RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));
	       }  
	       catch (RegexMatchTimeoutException) {
	          return false;
	       }
	   }
	   
	   private string DomainMapper(Match match)
	   {
	      IdnMapping idn = new IdnMapping();
	
	      string domainName = match.Groups[2].Value;
	      try {
	         domainName = idn.GetAscii(domainName);
	      }
	      catch (ArgumentException) {
	         invalid = true;      
	      }      
	      return match.Groups[1].Value + domainName;
	   }
	}
	
	public class Application
	{
	   public static void Main()
	   {
	      RegexUtilities util = new RegexUtilities();
	      string[] emailAddresses = { "david.jones@proseware.com", "d.j@server1.proseware.com", 
	                                  "jones@ms1.proseware.com", "j.@server1.proseware.com", 
	                                  "j@proseware.com9", "js#internal@proseware.com", 
	                                  "j_9@[129.126.118.1]", "j..s@proseware.com", 
	                                  "js*@proseware.com", "js@proseware..com", 
	                                  "js@proseware.com9", "j.s@server1.proseware.com" };
	
	      foreach (var emailAddress in emailAddresses) {
	         if (util.IsValidEmail(emailAddress))
	            Console.WriteLine("Valid: {0}", emailAddress);
	         else
	            Console.WriteLine("Invalid: {0}", emailAddress);
	      }                                            
	   }
	}

snippet generic_dictionary_genicoll

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_Dictionary_GenIColl/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        ICollection<KeyValuePair<String, String>> openWith =
	            new Dictionary<String, String>();
	        
	        openWith.Add(new KeyValuePair<String,String>("txt", "notepad.exe"));
	        openWith.Add(new KeyValuePair<String,String>("bmp", "paint.exe"));
	        openWith.Add(new KeyValuePair<String,String>("dib", "paint.exe"));
	        openWith.Add(new KeyValuePair<String,String>("rtf", "wordpad.exe"));
	        
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> element in openWith )
	        {
	            Console.WriteLine("{0}, {1}", element.Key, element.Value);
	        }
	           
	        Console.WriteLine(
	            "\nContains(KeyValuePair(\"txt\", \"notepad.exe\")): {0}", 
	            openWith.Contains(new KeyValuePair<String,String>("txt", "notepad.exe")));
	
	        Console.WriteLine("\nRemove(new KeyValuePair(\"dib\", \"paint.exe\"))");
	        openWith.Remove(new KeyValuePair<String,String>("dib", "paint.exe"));
	        
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> element in openWith )
	        {
	            Console.WriteLine("{0}, {1}", element.Key, element.Value);
	        }
	
	        KeyValuePair<string, string>[] copy = 
	            new KeyValuePair<string, string>[openWith.Count];
	        openWith.CopyTo(copy, 0);
	    
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> element in copy )
	        {
	            Console.WriteLine("{0}, {1}", element.Key, element.Value);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	txt, notepad.exe
	bmp, paint.exe
	dib, paint.exe
	rtf, wordpad.exe
	
	Contains(KeyValuePair("txt", "notepad.exe")): True
	
	Remove(new KeyValuePair("dib", "paint.exe"))
	
	txt, notepad.exe
	bmp, paint.exe
	rtf, wordpad.exe
	
	txt, notepad.exe
	bmp, paint.exe
	rtf, wordpad.exe
	 */
	
	
	

snippet enumbuilder_properties_5

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_5/enumbuilder_properties_5.cs

	
	/* The following program demonstrates 'Assembly', 'AssemblyQualifiedName',
	   'Module', 'Name' and 'Namespace' properties of
	   'System.Reflection.Emit.EnumBuilder' class. This example defines a
	   class 'MyEnumBuilderSample'. The main function calls the CreateCalle
	   method in which the 'EnumBuilder' class and its fields are constructed.
	   The output of the 'EnumBuilder' properties are displayed on the console
	   in the main method. */
	
	
	using System;
	using System.Collections;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public class MyEnumBuilderSample
	{
	   static AssemblyBuilder myAssemblyBuilder;
	   static ModuleBuilder myModuleBuilder;
	   static EnumBuilder myEnumBuilder;
	   
	   public static void Main()
	   {
	      try
	      {
	         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save);
	         Type[] myTypeArray = myModuleBuilder.GetTypes();
	         foreach(Type myType in myTypeArray)
	         {
	            Console.WriteLine("Enum Builder defined in the module builder is: " 
	               + myType.Name);
	         }
	
	         Console.WriteLine("Properties of EnumBuilder : ");
	         Console.WriteLine("Enum Assembly is :" +  myEnumBuilder.Assembly.ToString());
	         Console.WriteLine("Enum AssemblyQualifiedName is :" +  
	                                 myEnumBuilder.AssemblyQualifiedName.ToString());
	         Console.WriteLine("Enum Module is :" +  myEnumBuilder.Module.ToString());
	         Console.WriteLine("Enum Name is :" +  myEnumBuilder.Name.ToString());
	         Console.WriteLine("Enum NameSpace is :" +  myEnumBuilder.Namespace);
	         myAssemblyBuilder.Save("EmittedAssembly.dll");
	      }
	      catch(NotSupportedException ex)
	      {
	         Console.WriteLine("The following is the exception is raised: " + ex.Message);
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("The following is the exception raised: " + e.Message);
	      }
	   }
	
	   private static void CreateCallee(AppDomain myAppDomain, AssemblyBuilderAccess access)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedAssembly";
	
	      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, 
	                                             AssemblyBuilderAccess.Save);
	
	      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("EmittedModule", 
	                                                         "EmittedModule.mod");
	
	      myEnumBuilder = myModuleBuilder.DefineEnum("MyNamespace.MyEnum", 
	                                 TypeAttributes.Public, typeof(Int32));
	
	      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral("FieldOne", 1);
	      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral("FieldTwo", 2);
	
	      myEnumBuilder.CreateType();
	   }
	}
snippet datetime_getdatetimeformats

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_GetDateTimeFormats/class1.cs

	using System;
	
	class Class1
	{
	   static void Main(string[] args)
		{
		  ShowDefaultFormats();
		  ShowDefaultFrenchFormats();
		  Console.WriteLine("\nDefault 'D' Format:\n");
		  ShowDefaultDFormat();
		  Console.WriteLine("\nFrench 'D' Format:\n");
		  ShowFrenchDFormat();
		}
	
	   private static void ShowDefaultFormats()
	   {
			DateTime july28 = new DateTime(2009, 7, 28, 5, 23, 15, 16);
	
			string[] july28Formats = july28.GetDateTimeFormats();
	
			foreach (string format in july28Formats) {
				Console.WriteLine(format);
			}
	   }
	
	   private static void ShowDefaultFrenchFormats()
	   {
			DateTime july28 = new DateTime(2009, 7, 28, 5, 23, 15, 16);
			
			IFormatProvider culture = 
				new System.Globalization.CultureInfo("fr-FR", true);
			string [] frenchJuly28Formats = 
						july28.GetDateTimeFormats(culture);
	
			foreach (string format in frenchJuly28Formats) {
				Console.WriteLine(format);
			}
		}
	
	   private static void ShowDefaultDFormat()
	   {
			DateTime july28 = new DateTime(2009, 7, 28, 5, 23, 15);
			
			string [] longJuly28Formats = 
						july28.GetDateTimeFormats('D');
	
			foreach (string format in longJuly28Formats) {
				Console.WriteLine(format);
			}
	   }
	
	   private static void ShowFrenchDFormat()
	   {
			DateTime july28 = new DateTime(2009, 7, 28, 5, 23, 15);
			
			IFormatProvider culture = 
				new System.Globalization.CultureInfo("fr-FR", true);
			string [] frenchJuly28Formats = 
						july28.GetDateTimeFormats('d', culture);
	
			foreach (string format in frenchJuly28Formats) {
				Console.WriteLine(format);
			}
	   }
	}

snippet invokemem

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InvokeMem/invokemem.cs

	using System;
	using System.Reflection;
	
	class MyType 
	{
	    Int32 myField;
	    public MyType(ref Int32 x) {x *= 5;}
	    public override String ToString() {return myField.ToString();}
	    public Int32 MyProp 
	    {
	        get {return myField;}
	        set 
	        { 
	            if (value < 1) 
	                throw new ArgumentOutOfRangeException("value", value, "value must be > 0");
	            myField = value;
	        }
	    }
	}
	
	class MyApp 
	{
	    static void Main() 
	    {
	        Type t = typeof(MyType);
	        Object[] args = new Object[] {8};
	        Console.WriteLine("The value of x before the constructor is called is {0}.", args[0]);
	        Object obj = t.InvokeMember(null, 
	            BindingFlags.DeclaredOnly | 
	            BindingFlags.Public | BindingFlags.NonPublic | 
	            BindingFlags.Instance | BindingFlags.CreateInstance, null, null, args);
	        Console.WriteLine("Type: " + obj.GetType().ToString());
	        Console.WriteLine("The value of x after the constructor returns is {0}.", args[0]);
	
	        t.InvokeMember("myField", 
	            BindingFlags.DeclaredOnly | 
	            BindingFlags.Public | BindingFlags.NonPublic | 
	            BindingFlags.Instance | BindingFlags.SetField, null, obj, new Object[] {5});
	        Int32 v = (Int32) t.InvokeMember("myField", 
	            BindingFlags.DeclaredOnly | 
	            BindingFlags.Public | BindingFlags.NonPublic | 
	            BindingFlags.Instance | BindingFlags.GetField, null, obj, null);
	        Console.WriteLine("myField: " + v);
	
	        String s = (String) t.InvokeMember("ToString", 
	            BindingFlags.DeclaredOnly | 
	            BindingFlags.Public | BindingFlags.NonPublic | 
	            BindingFlags.Instance | BindingFlags.InvokeMethod, null, obj, null);
	        Console.WriteLine("ToString: " + s);
	
	        try 
	        {
	            t.InvokeMember("MyProp", 
	                BindingFlags.DeclaredOnly | 
	                BindingFlags.Public | BindingFlags.NonPublic | 
	                BindingFlags.Instance | BindingFlags.SetProperty, null, obj, new Object[] {0});
	        } 
	        catch (TargetInvocationException e) 
	        {
	            if (e.InnerException.GetType() != 
	                typeof(ArgumentOutOfRangeException)) 
	                throw;
	            Console.WriteLine("An invalid value was assigned to MyProp.");
	        }
	        t.InvokeMember("MyProp", 
	            BindingFlags.DeclaredOnly | 
	            BindingFlags.Public | BindingFlags.NonPublic | 
	            BindingFlags.Instance | BindingFlags.SetProperty, null, obj, new Object[] {2});
	        v = (Int32) t.InvokeMember("MyProp", 
	            BindingFlags.DeclaredOnly | 
	            BindingFlags.Public | BindingFlags.NonPublic | 
	            BindingFlags.Instance | BindingFlags.GetProperty, null, obj, null);
	        Console.WriteLine("MyProp: " + v);
	    }
	}
snippet conceptual_stringbuilder

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Conceptual_StringBuilder/Example.cs

	using System;
	using System.Text;
	
	[assembly: CLSCompliant(true)]
	public class Example
	{
	   public static void Main()
	   {
	      InstantiateStringBuilder();
	      InstantiateWithCapacity();
	      Appending();
	      AppendingFormat();
	      Inserting();
	      Removing();
	      Replacing();
	   }
	   
	   private static void InstantiateStringBuilder()
	   {
	      StringBuilder myStringBuilder = new StringBuilder("Hello World!");
	   }
	
	   private static void InstantiateWithCapacity()
	   {
	      StringBuilder myStringBuilder = new StringBuilder("Hello World!", 25);  
	      myStringBuilder.Capacity = 25;
	   }
	
	   private static void Appending()
	   {
	      StringBuilder myStringBuilder = new StringBuilder("Hello World!");
	      myStringBuilder.Append(" What a beautiful day.");
	      Console.WriteLine(myStringBuilder);
	   }
	
	   private static void AppendingFormat()
	   {
	      int MyInt = 25; 
	      StringBuilder myStringBuilder = new StringBuilder("Your total is ");
	      myStringBuilder.AppendFormat("{0:C} ", MyInt);
	      Console.WriteLine(myStringBuilder);
	   }
	
	   private static void Inserting()
	   {
	      StringBuilder myStringBuilder = new StringBuilder("Hello World!");
	      myStringBuilder.Insert(6,"Beautiful ");
	      Console.WriteLine(myStringBuilder);
	   }
	
	   private static void Removing()
	   {
	      StringBuilder myStringBuilder = new StringBuilder("Hello World!");
	      myStringBuilder.Remove(5,7);
	      Console.WriteLine(myStringBuilder);
	   }
	
	   private static void Replacing()
	   {
	      StringBuilder myStringBuilder = new StringBuilder("Hello World!");
	      myStringBuilder.Replace('!', '?');
	      Console.WriteLine(myStringBuilder);
	   }
	}

snippet projectn_reflection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/browsegenerictype1.cs

	using System;
	using System.Collections.Generic;
	using System.Reflection;
	using Windows.UI.Xaml.Controls;
	
	namespace GenericBrowsing
	{
	   public class Example
	   {
	      internal static TextBlock b;
	
	      public static void GetReflectionInfo()
	      {
	         Type t = typeof(List<>);
	         b.Text += String.Format("Type information for {0}\n", t);
	
	         b.Text += "\nFields:\n";
	
	         var fields = t.GetTypeInfo().DeclaredFields;
	         int nFields = 0;
	         foreach (var field in fields)
	         {
	            b.Text += String.Format("   {0} ({1})", field.Name, field.FieldType.Name);
	            nFields++;
	         }
	         if (nFields == 0) b.Text += "   None\n";
	
	         b.Text += "\nProperties:\n";
	         var props = t.GetTypeInfo().DeclaredProperties;
	         int nProps = 0;
	         foreach (var prop in props)
	         {
	            b.Text += String.Format("   {0} ({1})\n", prop.Name, prop.PropertyType.Name);
	            nProps++;
	         }
	         if (nProps == 0) b.Text += "   None\n"; 
	
	         b.Text += "\nMethods:\n";
	         var methods = t.GetTypeInfo().DeclaredMethods;
	         int nMethods = 0;
	         foreach (var method in methods)
	         {
	            if (method.IsSpecialName) continue;
	            b.Text += String.Format("   {0}({1}) ({2})\n", method.Name, 
	                                    GetSignature(method), method.ReturnType.Name);
	            nMethods++;
	         }
	         if (nMethods == 0) b.Text += "   None\n";
	      }
	
	      private static string GetSignature(MethodInfo m)
	      {
	         string signature = null;
	         var parameters = m.GetParameters();
	         for (int ctr = 0; ctr < parameters.Length; ctr++)
	         {
	            signature += String.Format("{0} {1}", parameters[ctr].ParameterType.Name,
	                                        parameters[ctr].Name);
	            if (ctr < parameters.Length - 1) signature += ", ";
	         }
	         return signature;
	      }
	   }
	}
	namespace Windows.UI.Xaml.Controls
	{
	internal class TextBlock
	{
	   private String s;
	   
	   public String Text 
	   {
	      get { return s; }
	      set { s = value; }
	   }
	}
	}
	
	public class App 
	{
	   public static void Main()
	   {
	      TextBlock t = new TextBlock();
	      GenericBrowsing.Example.b = t;
	      GenericBrowsing.Example.GetReflectionInfo();
	   }
	}

snippet fieldbuilder_setoffset

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldBuilder_SetOffset/fieldbuilder_setoffset.cs

	
	/*
	   The following program demonstrates 'SetOffset' and 'SetMarshal' 
	   methods of 'FieldBuilder' class.A new Class is defined and a 
	   'PInvoke' method 'OpenFile' method of 'Kernel32.dll' is defined 
	   in the class.Instance of the class is created and the method is invoked.
	   To execute this program, make sure a file named 'MyFile.txt' should be there 
	   in the current directory.
	*/
	
	using System;
	using System.Runtime.InteropServices;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	using System.Runtime.CompilerServices;
	
	public class FieldBuilder_Sample
	{
	   public static Type CreateType(AppDomain currentDomain)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "DynamicAssembly";
	      AssemblyBuilder myAssembly =
	         currentDomain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.RunAndSave);
	      ModuleBuilder myModuleBuilder=myAssembly.DefineDynamicModule("MyModule","MyModule.mod");
	      TypeBuilder myTypeBuilder= myModuleBuilder.DefineType("MyClass",TypeAttributes.Public);
	      TypeBuilder myTypeBuilder2 = myModuleBuilder.DefineType("MyClass2",
	         TypeAttributes.Public|TypeAttributes.BeforeFieldInit|TypeAttributes.SequentialLayout|TypeAttributes.AnsiClass|TypeAttributes.Sealed);
	      FieldBuilder myFieldBuilder1= myTypeBuilder2.DefineField("myBytes1",
	                                    typeof(byte),FieldAttributes.Public);
	      FieldBuilder myFieldBuilder2= myTypeBuilder2.DefineField("myBytes2",
	                                    typeof(byte),FieldAttributes.Public);
	      FieldBuilder myFieldBuilder3= myTypeBuilder2.DefineField("myErrorCode",
	                                    typeof(short),FieldAttributes.Public);
	      FieldBuilder myFieldBuilder4= myTypeBuilder2.DefineField("myReserved1",
	                                    typeof(short),FieldAttributes.Public);
	      FieldBuilder myFieldBuilder5= myTypeBuilder2.DefineField("myReserved2",
	                                    typeof(short),FieldAttributes.Public);
	      FieldBuilder myFieldBuilder6= myTypeBuilder2.DefineField("myPathName",
	                                    typeof(char[]),FieldAttributes.Public);
	      myFieldBuilder6.SetMarshal(UnmanagedMarshal.DefineByValArray(128)); 
	      myFieldBuilder6.SetOffset(4);
	      Type myType1 = myTypeBuilder2.CreateType();  
	      Type[] myParameters={ typeof(string), myType1 ,typeof(uint)}; 
	      MethodBuilder myMethodBuilder= myTypeBuilder.DefinePInvokeMethod("OpenFile",
	                                     "kernel32.dll",MethodAttributes.Public|MethodAttributes.Static|MethodAttributes.HideBySig,
	                                       CallingConventions.Standard,typeof(IntPtr),
	                                       myParameters,CallingConvention.Winapi,CharSet.None);
	      Type myAttributeType = typeof(MethodImplAttribute);
	      ConstructorInfo myConstructorInfo = 
	         myAttributeType.GetConstructor(new Type[1]{typeof(MethodImplOptions)});
	      CustomAttributeBuilder myAttributeBuilder = new CustomAttributeBuilder(myConstructorInfo,
	                                                   new object[1]{MethodImplOptions.PreserveSig});
	      myMethodBuilder.SetCustomAttribute(myAttributeBuilder);
	      ParameterBuilder myParameterBuilder2=myMethodBuilder.DefineParameter(2,
	                                            ParameterAttributes.Out,"myClass2");
	      Type myType=myTypeBuilder.CreateType();
	      myAssembly.Save("EmittedAssembly.dll");
	      return myType;
	   }
	
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      try
	      {
	         Type myType = CreateType(Thread.GetDomain());
	         Type myClass2 = myType.Module.GetType("MyClass2"); 
	         object myParam2 = Activator.CreateInstance(myClass2);
	         uint myUint=0x00000800;
	         object[] myArgs= {"MyFile.Txt",myParam2,myUint};
	         Object myObject  = myType.InvokeMember("OpenFile",BindingFlags.Public | 
	            BindingFlags.InvokeMethod | BindingFlags.Static,null,null,myArgs);
	         Console.WriteLine("MyClass.OpenFile method returned: \"{0}\"", myObject);
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("Exception Caught "+e.Message);
	      }
	   }
	
	}

snippet list`1_sortsearch

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>();
	
	        dinosaurs.Add("Pachycephalosaurus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("Mamenchisaurus");
	        dinosaurs.Add("Deinonychus");
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nSort");
	        dinosaurs.Sort();
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nBinarySearch and Insert \"Coelophysis\":");
	        int index = dinosaurs.BinarySearch("Coelophysis");
	        if (index < 0)
	        {
	            dinosaurs.Insert(~index, "Coelophysis");
	        }
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nBinarySearch and Insert \"Tyrannosaurus\":");
	        index = dinosaurs.BinarySearch("Tyrannosaurus");
	        if (index < 0)
	        {
	            dinosaurs.Insert(~index, "Tyrannosaurus");
	        }
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Pachycephalosaurus
	Amargasaurus
	Mamenchisaurus
	Deinonychus
	
	Sort
	
	Amargasaurus
	Deinonychus
	Mamenchisaurus
	Pachycephalosaurus
	
	BinarySearch and Insert "Coelophysis":
	
	Amargasaurus
	Coelophysis
	Deinonychus
	Mamenchisaurus
	Pachycephalosaurus
	
	BinarySearch and Insert "Tyrannosaurus":
	
	Amargasaurus
	Coelophysis
	Deinonychus
	Mamenchisaurus
	Pachycephalosaurus
	Tyrannosaurus
	 */
	
	

snippet regularexpressions_examples_email

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Examples_Email/example4.cs

	using System;
	using System.Globalization;
	using System.Text.RegularExpressions;
	
	public class RegexUtilities
	{
	    public static bool IsValidEmail(string email)
	    {
	        if (string.IsNullOrWhiteSpace(email))
	            return false;
	
	        try
	        {
	            email = Regex.Replace(email, @"(@)(.+)$", DomainMapper,
	                                  RegexOptions.None, TimeSpan.FromMilliseconds(200));
	
	            string DomainMapper(Match match)
	            {
	                var idn = new IdnMapping();
	
	                var domainName = idn.GetAscii(match.Groups[2].Value);
	
	                return match.Groups[1].Value + domainName;
	            }
	        }
	        catch (RegexMatchTimeoutException e)
	        {
	            return false;
	        }
	        catch (ArgumentException e)
	        {
	            return false;
	        }
	
	        try
	        {
	            return Regex.IsMatch(email,
	                @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
	                @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-0-9a-z]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$",
	                RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));
	        }
	        catch (RegexMatchTimeoutException)
	        {
	            return false;
	        }
	    }
	}
	
	class Program
	{
	    static void Main(string[] args)
	    {
	        string[] emailAddresses = { "david.jones@proseware.com", "d.j@server1.proseware.com",
	                                    "jones@ms1.proseware.com", "j.@server1.proseware.com",
	                                    "j@proseware.com9", "js#internal@proseware.com",
	                                    "j_9@[129.126.118.1]", "j..s@proseware.com",
	                                    "js*@proseware.com", "js@proseware..com",
	                                    "js@proseware.com9", "j.s@server1.proseware.com",
	                                    "\"j\\\"s\\\"\"@proseware.com", "js@contoso.中国" };
	
	        foreach (var emailAddress in emailAddresses)
	        {
	            if (RegexUtilities.IsValidEmail(emailAddress))
	                Console.WriteLine($"Valid:   {emailAddress}");
	            else
	                Console.WriteLine($"Invalid: {emailAddress}");
	        }
	
	        Console.ReadKey();
	    }
	}
snippet ecdiffiehellmancng

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ecdiffiehellmancng/program.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	using System.Text;
	
	
	class Alice
	{
	    public static byte[] alicePublicKey;
	
	    public static void Main(string[] args)
	    {
	        using (ECDiffieHellmanCng alice = new ECDiffieHellmanCng())
	        {
	
	            alice.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
	            alice.HashAlgorithm = CngAlgorithm.Sha256;
	            alicePublicKey = alice.PublicKey.ToByteArray();
	            Bob bob = new Bob();
	            CngKey k = CngKey.Import(bob.bobPublicKey, CngKeyBlobFormat.EccPublicBlob);
	            byte[] aliceKey = alice.DeriveKeyMaterial(CngKey.Import(bob.bobPublicKey, CngKeyBlobFormat.EccPublicBlob));
	            byte[] encryptedMessage = null;
	            byte[] iv = null;
	            Send(aliceKey, "Secret message", out encryptedMessage, out iv);
	            bob.Receive(encryptedMessage, iv);
	        }
	
	    }
	
	    private static void Send(byte[] key, string secretMessage, out byte[] encryptedMessage, out byte[] iv)
	    {
	        using (Aes aes = new AesCryptoServiceProvider())
	        {
	            aes.Key = key;
	            iv = aes.IV;
	
	            using (MemoryStream ciphertext = new MemoryStream())
	            using (CryptoStream cs = new CryptoStream(ciphertext, aes.CreateEncryptor(), CryptoStreamMode.Write))
	            {
	                byte[] plaintextMessage = Encoding.UTF8.GetBytes(secretMessage);
	                cs.Write(plaintextMessage, 0, plaintextMessage.Length);
	                cs.Close();
	                encryptedMessage = ciphertext.ToArray();
	            }
	        }
	    }
	
	}
	public class Bob 
	{
	    public byte[] bobPublicKey;
	    private byte[] bobKey;
	    public Bob()
	    {
	        using (ECDiffieHellmanCng bob = new ECDiffieHellmanCng())
	        {
	
	            bob.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
	            bob.HashAlgorithm = CngAlgorithm.Sha256;
	            bobPublicKey = bob.PublicKey.ToByteArray();
	            bobKey = bob.DeriveKeyMaterial(CngKey.Import(Alice.alicePublicKey, CngKeyBlobFormat.EccPublicBlob));
	
	        }
	    }
	
	    public void Receive(byte[] encryptedMessage, byte[] iv)
	    {
	
	        using (Aes aes = new AesCryptoServiceProvider())
	        {
	            aes.Key = bobKey;
	            aes.IV = iv;
	            using (MemoryStream plaintext = new MemoryStream())
	            {
	                using (CryptoStream cs = new CryptoStream(plaintext, aes.CreateDecryptor(), CryptoStreamMode.Write))
	                {
	                    cs.Write(encryptedMessage, 0, encryptedMessage.Length);
	                    cs.Close();
	                    string message = Encoding.UTF8.GetString(plaintext.ToArray());
	                    Console.WriteLine(message);
	                }
	            }
	        }
	    }
	
	}
snippet conceptual_conversion

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_conversion/implicit1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      PerformDecimalConversions();
	      Console.WriteLine("-----");
	      PerformCustomConversions();
	   }
	
	   private static void PerformDecimalConversions()
	   {
	      byte byteValue = 16;
	      short shortValue = -1024;
	      int intValue = -1034000;
	      long longValue = 1152921504606846976;
	      ulong ulongValue = UInt64.MaxValue;
	      
	      decimal decimalValue;
	      
	      decimalValue = byteValue;
	      Console.WriteLine("After assigning a {0} value, the Decimal value is {1}.", 
	                        byteValue.GetType().Name, decimalValue); 
	                               
	      decimalValue = shortValue;
	      Console.WriteLine("After assigning a {0} value, the Decimal value is {1}.", 
	                        shortValue.GetType().Name, decimalValue); 
	
	      decimalValue = intValue;
	      Console.WriteLine("After assigning a {0} value, the Decimal value is {1}.", 
	                        intValue.GetType().Name, decimalValue); 
	
	      decimalValue = longValue;
	      Console.WriteLine("After assigning a {0} value, the Decimal value is {1}.", 
	                        longValue.GetType().Name, decimalValue); 
	                          
	      decimalValue = ulongValue;
	      Console.WriteLine("After assigning a {0} value, the Decimal value is {1}.", 
	                        longValue.GetType().Name, decimalValue); 
	   }
	
	   private static void PerformCustomConversions()
	   {
	      SByte sbyteValue = -120;
	      ByteWithSign value = sbyteValue;
	      Console.WriteLine(value);
	      value = Byte.MaxValue;
	      Console.WriteLine(value);
	   }
	}
	
	public struct ByteWithSign
	{
	   private SByte signValue; 
	   private Byte value;
	   
	   public static implicit operator ByteWithSign(SByte value) 
	   {
	      ByteWithSign newValue;
	      newValue.signValue = (SByte) Math.Sign(value);
	      newValue.value = (byte) Math.Abs(value);
	      return newValue;
	   }  
	   
	   public static implicit operator ByteWithSign(Byte value)
	   {
	      ByteWithSign  newValue;
	      newValue.signValue = 1;
	      newValue.value = value;
	      return newValue;
	   }
	   
	   public override string ToString()
	   { 
	      return (signValue * value).ToString();
	   }
	}

snippet objectx

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ObjectX/ObjectX.cs

	using System;
	
	class Point
	{
	    public int x, y;
	
	    public Point(int x, int y) 
	    {
	        this.x = x;
	        this.y = y;
	    }
	    
	    public override bool Equals(object obj) 
	    {
	        if (obj.GetType() != this.GetType()) return false;
	
	        var other = (Point) obj;
	        return (this.x == other.x) && (this.y == other.y);
	    }
	
	    public override int GetHashCode() 
	    {
	        return x ^ y;
	    }
	
	    public override String ToString() 
	    {
	        return $"({x}, {y})";
	    }
	
	    public Point Copy() 
	    {
	        return (Point) this.MemberwiseClone();
	    }
	}
	
	public sealed class App
	{
	    static void Main() 
	    {
	        var p1 = new Point(1,2);
	
	        var p2 = p1.Copy();
	
	        var p3 = p1;
	
	        Console.WriteLine(Object.ReferenceEquals(p1, p2));
	
	        Console.WriteLine(Object.Equals(p1, p2));
	      
	        Console.WriteLine(Object.ReferenceEquals(p1, p3));
	        
	        Console.WriteLine($"p1's value is: {p1.ToString()}");
	    }
	}
	

snippet typeloadexception_getobjectdata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeLoadException_GetObjectData/typeloadexception_getobjectdata.cs

	
	/* This program demonstrates the 'GetObjectData' method and the
	   protected constructor TypeLoadException(SerializationInfo,StreamingContext)
	   of 'TypeLoadException' class. It generates an exception and 
	   serializes the exception data to a file and then reconstitutes the 
	   exception.
	*/
	
	
	using System;
	using System.Reflection;
	using System.Runtime.Serialization;
	using System.Runtime.Serialization.Formatters.Soap; 
	using System.Security.Permissions;
	using System.IO;
	
	class GetObjectDataDemo
	{
	   public static void Main()
	   {
	      Assembly mscorlib = typeof(string).Assembly;
	
	      try
	      {
	         Console.WriteLine ("Attempting to load a type not present in the assembly 'mscorlib'");
	         Type myType = mscorlib.GetType("System.NonExistentType", true);
	      }         
	      catch (TypeLoadException)
	      {
	         System.DateTime ErrorDatetime = DateTime.Now;
	         Console.WriteLine("A TypeLoadException has been raised.");
	
	         MyTypeLoadException myException = new MyTypeLoadException(ErrorDatetime);
	         IFormatter myFormatter = new SoapFormatter();
	         Stream myFileStream = new FileStream("typeload.xml", FileMode.Create, FileAccess.Write, FileShare.None);
	         Console.WriteLine("Serializing the TypeLoadException with DateTime as " + ErrorDatetime);
	
	         myFormatter.Serialize(myFileStream, myException);
	         myFileStream.Close();
	
	         Console.WriteLine("Deserializing the Exception.");
	         myFileStream = new FileStream("typeload.xml", FileMode.Open, FileAccess.Read, FileShare.None);
	
	         myException = (MyTypeLoadException) myFormatter.Deserialize(myFileStream);
	         myFileStream.Close();
	         Console.WriteLine("Deserialized exception has ErrorDateTime = " + myException.ErrorDateTime);
	      }
	   }
	}
	
	
	[Serializable]
	public class MyTypeLoadException : TypeLoadException 
	{
	   private System.DateTime _errorDateTime = DateTime.Now;
	   public DateTime ErrorDateTime { get { return _errorDateTime; }}
	
	   public MyTypeLoadException(DateTime myDateTime) 
	   {
	      _errorDateTime = myDateTime;
	   }
	
	   protected MyTypeLoadException(SerializationInfo sInfo, StreamingContext sContext) 
	       : base(sInfo, sContext)
	   {
	      _errorDateTime = sInfo.GetDateTime("ErrorDate");
	   }
	
	   [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter=true)]
	   public override void GetObjectData(SerializationInfo sInfo, StreamingContext sContext) 
	   {
	      base.GetObjectData(sInfo, sContext);
	      sInfo.AddValue("ErrorDate", ErrorDateTime);
	   }
	}

snippet perfcounter

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PerfCounter/perfcounter.cs

	using System;
	using System.Drawing;
	using System.Collections;
	using System.ComponentModel;
	using System.Windows.Forms;
	using System.Data;
	using System.Diagnostics;
	
	namespace PerfCounter
	{
		public class Form1 : System.Windows.Forms.Form
		{
			private System.ComponentModel.Container components = null;
	
			public Form1()
			{
				InitializeComponent();
	
			}
	
			protected override void Dispose( bool disposing )
			{
				if( disposing )
				{
					if (components != null) 
					{
						components.Dispose();
					}
				}
				base.Dispose( disposing );
			}
	
			#region Windows Form Designer generated code
			private void InitializeComponent()
			{
				this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
				this.ClientSize = new System.Drawing.Size(292, 266);
				this.Name = "Form1";
				this.Text = "Form1";
				this.Load += new System.EventHandler(this.Form1_Load);
	
			}
			#endregion
	
			[STAThread]
			static void Main() 
			{
				Application.Run(new Form1());
			}
	
			private void Form1_Load(object sender, System.EventArgs e)
			{
				PerformanceCounter PC=new PerformanceCounter();
				PC.CategoryName="Process";
				PC.CounterName="Private Bytes";
				PC.InstanceName="Explorer";
				MessageBox.Show(PC.NextValue().ToString());
			
				
			        Array PerfCat = PerformanceCounterCategory.GetCategories();
	                        MessageBox.Show(String.Concat("The number of performance counter categories in the local machine is ",PerfCat.Length.ToString()));
	
			}
		}
	}

snippet dirinfo_getfilesysinfos2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DirInfo_GetFileSysInfos2/dirinfo_getfilesysinfos2.cs

	using System;
	using System.IO;
	
	class DirectoryFileCount
	{
	
	    static long files = 0;
	    static long directories = 0;
	
	
	    static void Main()
	    {
	        try
	        {
	            Console.WriteLine("Enter the path to a directory:");
	
	            string directory = Console.ReadLine();
	
	            Console.WriteLine("Enter a search string (for example *p*):");
	
	            string searchString = Console.ReadLine();
	
	            DirectoryInfo dir = new DirectoryInfo(directory);
	
	            if (!dir.Exists)
	            {
	                throw new DirectoryNotFoundException("The directory does not exist.");
	            }
	
	            FileSystemInfo[] infos = dir.GetFileSystemInfos(searchString);
	
	            Console.WriteLine("Working...");
	
	            ListDirectoriesAndFiles(infos, searchString);
	
	            Console.WriteLine("Directories: {0}", directories);
	            Console.WriteLine("Files: {0}", files);
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	
	            Console.ReadLine();
	        }
	    }
	
	    static void ListDirectoriesAndFiles(FileSystemInfo[] FSInfo, string SearchString)
	    {
	        if (FSInfo == null)
	        {
	            throw new ArgumentNullException("FSInfo");
	        }
	        if (SearchString == null || SearchString.Length == 0)
	        {
	            throw new ArgumentNullException("SearchString");
	        }
	
	        foreach (FileSystemInfo i in FSInfo)
	        {
	            if (i is DirectoryInfo)
	            {
	                directories++;
	
	                DirectoryInfo dInfo = (DirectoryInfo)i;
	
	                ListDirectoriesAndFiles(dInfo.GetFileSystemInfos(SearchString), SearchString);
	            }
	            else if (i is FileInfo)
	            {
	                files++;
	
	            }
	
	        }
	    }
	}
snippet typebuilder_defineuninitializeddata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/typebuilder_defineuninitializeddata.cs

	
	/*
	   The following program demonstrates the 'DefineUninitializedData'
	   method of 'TypeBuilder' class. It builds an assembly by defining 'MyHelloWorld' type and
	   it has 'MyGreeting' field. Then it displays the initial value of 'MyGreeting'
	   field to the console.
	*/
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Runtime.InteropServices;
	using System.Security.Permissions;
	
	public sealed class Example
	{
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      Type myHelloWorldType = CreateCallee(Thread.GetDomain());
	      object myHelloWorldInstance =
	      Activator.CreateInstance(myHelloWorldType);
	      FieldInfo myGreetingFieldInfo =
	      myHelloWorldType.GetField("MyGreeting");
	      object oval = Activator.CreateInstance(myGreetingFieldInfo.FieldType);
	      IntPtr myIntPtr = Marshal.AllocHGlobal(4);
	      Random rand = new Random();
	      int iTempSeed = rand.Next();
	      byte[] bINITBYTE = GetRandBytes( iTempSeed, 4);
	      IntPtr intptrTemp = myIntPtr;
	      for ( int j = 0; j < 4; j++ )
	      {
	         Marshal.WriteByte( myIntPtr, bINITBYTE[j]);
	         myIntPtr = (IntPtr)((int)myIntPtr + 1);
	      }
	      myIntPtr = intptrTemp;
	      Object oValNew = Marshal.PtrToStructure( myIntPtr, myGreetingFieldInfo.FieldType);
	      Marshal.FreeHGlobal( myIntPtr );
	
	      myIntPtr = Marshal.AllocHGlobal(4);
	      object myObj = myGreetingFieldInfo.GetValue(myHelloWorldInstance);
	      Marshal.StructureToPtr(myObj, myIntPtr, true);
	      intptrTemp = myIntPtr;
	      Console.WriteLine("The value of 'MyGreeting' field : ");
	      for ( int j = 0; j < 4; j++ )
	      {
	         Marshal.WriteByte( myIntPtr, bINITBYTE[j]);
	         Console.WriteLine(bINITBYTE[j]);
	         myIntPtr = (IntPtr)((int)myIntPtr + 1);
	      }
	   }
	
	   private static byte[] GetRandBytes( int iRandSeed, int iSize )
	   {
	      byte[] barr = new byte[iSize];
	      Random randTemp = new Random( iRandSeed );
	      randTemp.NextBytes( barr );
	      return barr;
	   }
	
	   private static Type CreateCallee(AppDomain myDomain)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedClass";
	
	      AssemblyBuilder myAssembly =
	         myDomain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.Run);
	
	      ModuleBuilder myModule =
	         myAssembly.DefineDynamicModule("EmittedModule");
	
	      TypeBuilder myHelloWorldType =
	         myModule.DefineType("MyHelloWorld", TypeAttributes.Public);
	
	      FieldBuilder myFieldBuilder =
	         myHelloWorldType.DefineUninitializedData("MyGreeting",4,FieldAttributes.Public);
	
	      return(myHelloWorldType.CreateType());
	   }
	
	   private Example() {}
	}
	

snippet sys_glob_carib_saveldml

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_carib_saveLdml/sl.cs

	
	using System;
	using System.Globalization;
	using System.IO;
	using System.Xml;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string savedCARIB = "mySavedCARIB.xml";
	    string msg1 = "The name of the original CultureAndRegionInfoBuilder" +
	                  " is \"{0}\".";
	    string msg2 = "Reconstituting the CultureAndRegionInfoBuilder object " +
	                  "from \"{0}\".";
	    string msg3 = "The name of the reconstituted CultureAndRegionInfoBuilder" +
	                  " is \"{0}\".";
	
	
	    CultureAndRegionInfoBuilder cib1 = null;
	    CultureAndRegionInfoBuilder cib2 = null;
	    try {
	        cib1 = new CultureAndRegionInfoBuilder(
	                           "x-en-US-sample", CultureAndRegionModifiers.None);
	        }
	    catch (ArgumentException ae)
	        {
	        Console.WriteLine(ae);
	        return;
	        }
	
	    CultureInfo ci = new CultureInfo("en-US");
	    cib1.LoadDataFromCultureInfo(ci);
	
	    RegionInfo  ri = new RegionInfo("US");
	    cib1.LoadDataFromRegionInfo(ri);
	
	    Console.Clear();
	    Console.WriteLine(msg1, cib1.CultureName);
	
	
	    Console.WriteLine("Saving the custom culture to a file...");
	    try {
	        cib1.Save( savedCARIB );
	        }
	    catch (IOException exc)
	        {
	        Console.WriteLine("** I/O exception: {0}", exc.Message);
	        return;
	        }
	
	    Console.WriteLine(msg2, savedCARIB);
	    try {
	        cib2 = CultureAndRegionInfoBuilder.CreateFromLdml( savedCARIB );
	        }
	    catch (XmlException xe)
	        {
	        Console.WriteLine("** XML validation exception: {0}", xe.Message);
	        return;
	        }
	
	    Console.WriteLine(msg3, cib2.CultureName);
	
	    }
	}
	
	/*
	This code example produces the following results:
	
	The name of the original CultureAndRegionInfoBuilder is "x-en-US-sample".
	Saving the custom culture to a file...
	Reconstituting the CultureAndRegionInfoBuilder object from "mySavedCARIB.xml".
	The name of the reconstituted CultureAndRegionInfoBuilder is "x-en-US-sample".
	
	*/
snippet codedelegateinvokeexpressionexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDelegateInvokeExpressionExample/codedelegateinvokeexpressionexample.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSamples
	{
	    public class CodeDelegateInvokeExpressionExample
	    {
	        public CodeDelegateInvokeExpressionExample()
	        {
	
	            CodeTypeDeclaration type1 = new CodeTypeDeclaration("DelegateInvokeTest");
	
	            CodeMemberEvent event1 = new CodeMemberEvent();
	            event1.Name = "TestEvent";
	            event1.Type = new CodeTypeReference("DelegateInvokeTest.TestDelegate");
	            type1.Members.Add( event1 );
	
	            CodeTypeDelegate delegate1 = new CodeTypeDelegate("TestDelegate");            
	            delegate1.Parameters.Add( new CodeParameterDeclarationExpression("System.Object", "sender") );
	            delegate1.Parameters.Add( new CodeParameterDeclarationExpression("System.EventArgs", "e") );        
	            type1.Members.Add( delegate1 );
	
	            CodeMemberMethod method1 = new CodeMemberMethod();
	            method1.Name = "TestMethod";
	            method1.Parameters.Add( new CodeParameterDeclarationExpression("System.Object", "sender") );
	            method1.Parameters.Add( new CodeParameterDeclarationExpression("System.EventArgs", "e") );        
	            type1.Members.Add( method1 );
	
	            CodeConstructor constructor1 = new CodeConstructor();
	            constructor1.Attributes = MemberAttributes.Public;            
	
	            constructor1.Statements.Add( new CodeCommentStatement("Attaches a delegate to the TestEvent event.") );
	
	            CodeDelegateCreateExpression createDelegate1 = new CodeDelegateCreateExpression( 
	                new CodeTypeReference( "DelegateInvokeTest.TestDelegate" ), new CodeThisReferenceExpression(), "TestMethod" );                                
	            CodeAttachEventStatement attachStatement1 = new CodeAttachEventStatement( new CodeThisReferenceExpression(), "TestEvent", createDelegate1 );            
	            constructor1.Statements.Add( attachStatement1 );                    
	
	            constructor1.Statements.Add( new CodeCommentStatement("Invokes the TestEvent event.") );
	
	            CodeDelegateInvokeExpression invoke1 = new CodeDelegateInvokeExpression( new CodeEventReferenceExpression(new CodeThisReferenceExpression(), "TestEvent"), 
	                new CodeExpression[] { new CodeThisReferenceExpression(), new CodeObjectCreateExpression("System.EventArgs") } );
	            constructor1.Statements.Add( invoke1 );
	            
	            type1.Members.Add( constructor1 );
	
	
	        }
	
	        public void DelegateInvokeOnlyType()
	        {            
	            CodeDelegateInvokeExpression invoke1 = new CodeDelegateInvokeExpression( new CodeEventReferenceExpression(new CodeThisReferenceExpression(), "TestEvent"), 
	                new CodeExpression[] { new CodeThisReferenceExpression(), new CodeObjectCreateExpression("System.EventArgs") } );
	            
	
	        }
	    }
	}
snippet idnmapping_getx

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IdnMapping_GetX/getx.cs

	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	/* 
	   Define a domain name consisting of the labels: GREEK SMALL LETTER 
	   PI (U+03C0); IDEOGRAPHIC FULL STOP (U+3002); GREEK SMALL LETTER 
	   THETA (U+03B8); FULLWIDTH FULL STOP (U+FF0E); and "com".
	*/
	    string name = "\u03C0\u3002\u03B8\uFF0Ecom";
	    string international;
	    string nonInternational;
	
	    string msg1 = "the original non-internationalized \ndomain name:";
	    string msg2 = "Allow unassigned characters?:     {0}";
	    string msg3 = "Use non-internationalized rules?: {0}";
	    string msg4 = "Convert the non-internationalized domain name to international format...";
	    string msg5 = "Display the encoded domain name:\n\"{0}\"";
	    string msg6 = "the encoded domain name:";
	    string msg7 = "Convert the internationalized domain name to non-international format...";
	    string msg8 = "the reconstituted non-internationalized \ndomain name:";
	    string msg9 = "Visually compare the code points of the reconstituted string to the " +
	                  "original.\n" +
	                  "Note that the reconstituted string contains standard label " +
	                  "separators (U+002e).";
	    Console.Clear();
	    CodePoints(name, msg1);
	
	    IdnMapping idn = new IdnMapping();
	
	    Console.WriteLine(msg2, idn.AllowUnassigned);
	    Console.WriteLine(msg3, idn.UseStd3AsciiRules);
	    Console.WriteLine();
	    Console.WriteLine(msg4);
	    international = idn.GetAscii(name, 0, name.Length);
	    Console.WriteLine(msg5, international);
	    Console.WriteLine();
	    CodePoints(international, msg6);
	    Console.WriteLine(msg7);
	    nonInternational = idn.GetUnicode(international, 0, international.Length);
	    CodePoints(nonInternational, msg8);
	    Console.WriteLine(msg9);
	    }
	    static void CodePoints(string value, string title)
	    {
	    Console.WriteLine("Display the Unicode code points of {0}", title);
	    foreach (char c in value) 
	        {
	        Console.Write("{0:x4} ", Convert.ToInt32(c));
	        }
	        Console.WriteLine();
	        Console.WriteLine();
	    }
	}
	/*
	This code example produces the following results:
	
	Display the Unicode code points of the original non-internationalized
	domain name:
	03c0 3002 03b8 ff0e 0063 006f 006d
	
	Allow unassigned characters?:     False
	Use non-internationalized rules?: False
	
	Convert the non-internationalized domain name to international format...
	Display the encoded domain name:
	"xn--1xa.xn--txa.com"
	
	Display the Unicode code points of the encoded domain name:
	0078 006e 002d 002d 0031 0078 0061 002e 0078 006e 002d 002d 0074 0078 0061 002e 0063 006f
	006d
	
	Convert the internationalized domain name to non-international format...
	Display the Unicode code points of the reconstituted non-internationalized
	domain name:
	03c0 002e 03b8 002e 0063 006f 006d
	
	Visually compare the code points of the reconstituted string to the original.
	Note that the reconstituted string contains standard label separators (U+002e).
	
	*/
snippet generic_readonlycollection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/generic_ReadOnlyCollection/source.cs

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	
	public class Example
	{
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>();
	
	        dinosaurs.Add("Tyrannosaurus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("Deinonychus");
	        dinosaurs.Add("Compsognathus");
	
	        ReadOnlyCollection<string> readOnlyDinosaurs = 
	            new ReadOnlyCollection<string>(dinosaurs);
	
	        Console.WriteLine();
	        foreach( string dinosaur in readOnlyDinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nCount: {0}", readOnlyDinosaurs.Count);
	
	        Console.WriteLine("\nContains(\"Deinonychus\"): {0}", 
	            readOnlyDinosaurs.Contains("Deinonychus"));
	
	        Console.WriteLine("\nreadOnlyDinosaurs[3]: {0}", 
	            readOnlyDinosaurs[3]);
	
	        Console.WriteLine("\nIndexOf(\"Compsognathus\"): {0}", 
	            readOnlyDinosaurs.IndexOf("Compsognathus"));
	
	        Console.WriteLine("\nInsert into the wrapped List:");
	        Console.WriteLine("Insert(2, \"Oviraptor\")");
	        dinosaurs.Insert(2, "Oviraptor");
	
	        Console.WriteLine();
	        foreach( string dinosaur in readOnlyDinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        string[] dinoArray = new string[readOnlyDinosaurs.Count + 2];
	        readOnlyDinosaurs.CopyTo(dinoArray, 1);
	
	        Console.WriteLine("\nCopied array has {0} elements:", 
	            dinoArray.Length);
	        foreach( string dinosaur in dinoArray )
	        {
	            Console.WriteLine("\"{0}\"", dinosaur);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Tyrannosaurus
	Amargasaurus
	Deinonychus
	Compsognathus
	
	Count: 4
	
	Contains("Deinonychus"): True
	
	readOnlyDinosaurs[3]: Compsognathus
	
	IndexOf("Compsognathus"): 3
	
	Insert into the wrapped List:
	Insert(2, "Oviraptor")
	
	Tyrannosaurus
	Amargasaurus
	Oviraptor
	Deinonychus
	Compsognathus
	
	Copied array has 7 elements:
	""
	"Tyrannosaurus"
	"Amargasaurus"
	"Oviraptor"
	"Deinonychus"
	"Compsognathus"
	""
	 */
	
	

snippet array_sortsearch

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearch/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        string[] dinosaurs = {"Pachycephalosaurus", 
	                              "Amargasaurus", 
	                              "Tyrannosaurus", 
	                              "Mamenchisaurus", 
	                              "Deinonychus", 
	                              "Edmontosaurus"};
	
	        Console.WriteLine();
	        foreach( string dinosaur in dinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nSort");
	        Array.Sort(dinosaurs);
	
	        Console.WriteLine();
	        foreach( string dinosaur in dinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nBinarySearch for 'Coelophysis':");
	        int index = Array.BinarySearch(dinosaurs, "Coelophysis");
	        ShowWhere(dinosaurs, index);
	
	        Console.WriteLine("\nBinarySearch for 'Tyrannosaurus':");
	        index = Array.BinarySearch(dinosaurs, "Tyrannosaurus");
	        ShowWhere(dinosaurs, index);
	    }
	
	    private static void ShowWhere<T>(T[] array, int index)
	    {
	        if (index<0)
	        {
	            index = ~index;
	
	            Console.Write("Not found. Sorts between: ");
	
	            if (index == 0)
	                Console.Write("beginning of array and ");
	            else
	                Console.Write("{0} and ", array[index-1]);
	
	            if (index == array.Length)
	                Console.WriteLine("end of array.");
	            else
	                Console.WriteLine("{0}.", array[index]);
	        }
	        else
	        {
	            Console.WriteLine("Found at index {0}.", index);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Pachycephalosaurus
	Amargasaurus
	Tyrannosaurus
	Mamenchisaurus
	Deinonychus
	Edmontosaurus
	
	Sort
	
	Amargasaurus
	Deinonychus
	Edmontosaurus
	Mamenchisaurus
	Pachycephalosaurus
	Tyrannosaurus
	
	BinarySearch for 'Coelophysis':
	Not found. Sorts between: Amargasaurus and Deinonychus.
	
	BinarySearch for 'Tyrannosaurus':
	Found at index 5.
	 */
	
	

snippet processverbs_diagnostics

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ProcessVerbs_Diagnostics/source.cs

	using System;
	using System.ComponentModel;
	using System.IO;
	using System.Diagnostics;
	using System.Windows.Forms;
	
	class ProcessInformation
	{
	    [STAThread]
	    static void Main()
	    {
	        OpenFileDialog openFileDialog1 = new OpenFileDialog();
	
	        openFileDialog1.InitialDirectory = "c:\\";
	        openFileDialog1.Filter = "txt files (*.txt)|*.txt|All files (*.*)|*.*";
	        openFileDialog1.FilterIndex = 2;
	        openFileDialog1.RestoreDirectory = true;
	        openFileDialog1.CheckFileExists = true;
	
	        if (openFileDialog1.ShowDialog() == DialogResult.OK)
	        {
	            var fileName = openFileDialog1.FileName;
	
	            int i = 0;
	            var startInfo = new ProcessStartInfo(fileName);
	
	
	            foreach (var verb in startInfo.Verbs)
	            {
	                Console.WriteLine($"  {i++}. {verb}");
	            }
	
	            Console.Write("Select the index of the verb: ");
	            var indexInput = Console.ReadLine();
	            int index;
	            if (Int32.TryParse(indexInput, out index))
	            {
	                if (index < 0 || index >= i)
	                {
	                    Console.WriteLine("Invalid index value.");
	                    return;
	                }
	
	                var verbToUse = startInfo.Verbs[index];
	
	                startInfo.Verb = verbToUse;
	                if (verbToUse.ToLower().IndexOf("printto") >= 0)
	                {
	                    Console.Write("Enter the network address of the target printer: ");
	                    var arguments = Console.ReadLine();
	                    startInfo.Arguments = arguments;
	                }
	
	                try
	                {
	                    using (var newProcess = new Process())
	                    {
	                        newProcess.StartInfo = startInfo;
	                        newProcess.Start();
	
	                        Console.WriteLine($"{newProcess.ProcessName} for file {fileName} " +
	                                          $"started successfully with verb '{startInfo.Verb}'!");
	                    }
	                }
	                catch (Win32Exception e)
	                {
	                    Console.WriteLine("  Win32Exception caught!");
	                    Console.WriteLine($"  Win32 error = {e.Message}");
	                }
	                catch (InvalidOperationException)
	                {
	                    Console.WriteLine($"Unable to start '{fileName}' with verb {verbToUse}");
	                }
	            }
	        }
	        else
	        {
	            {
	                Console.WriteLine("You did not enter a number.");
	            }
	        }
	    }
	}

snippet conceptual_resources_portable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portable/program.cs

	using System.Resources;
	
	using System;
	using System.Collections.Generic;
	using MyCompany.Employees;
	 
	class Program
	{
	   static void Main()
	   {
	      var employees = InitializeData();
	
	      string title = UILibrary.GetTitle();
	      int start = (Console.WindowWidth + title.Length) / 2;
	      string titlefmt = String.Format("{{0,{0}{1}", start, "}");
	      Console.WriteLine(titlefmt, title);
	      Console.WriteLine();
	
	      string[] fields = UILibrary.GetFieldNames();
	      int[] lengths = UILibrary.GetFieldLengths();
	      string fmtString = String.Empty;
	      for (int ctr = 0; ctr < fields.Length; ctr++)
	         fmtString += String.Format("{{{0},-{1}{2}{3}   ", ctr, lengths[ctr], ctr >= 2 ? ":d" : "", "}");
	
	      Console.WriteLine(fmtString, fields);
	      Console.WriteLine();
	      foreach (var e in employees)
	         Console.WriteLine(fmtString, e.Item1, e.Item2, e.Item3, e.Item4);
	
	      Console.ReadLine();
	   }
	
	   private static List<Tuple<String, String, DateTime, DateTime>> InitializeData() 
	   {
	      List<Tuple<String, String, DateTime, DateTime>> employees = new List<Tuple<String, String, DateTime, DateTime>>();
	      var t1 = Tuple.Create("John", "16302", new DateTime(1954, 8, 18), new DateTime(2006, 9, 8));
	      employees.Add(t1);
	      t1 = Tuple.Create("Alice", "19745", new DateTime(1995, 5, 10), new DateTime(2012, 10, 17));
	      employees.Add(t1);
	      return employees;
	   }
	}
	
	
	namespace MyCompany.Employees
	{
	   public class UILibrary
	   {
	      private static ResourceManager rm;
	      private const int nFields = 4;
	
	      static UILibrary()
	      {
	         rm = new ResourceManager("MyCompany.Employees.LibResources", typeof(UILibrary).Assembly);
	      }
	
	      public static string GetTitle()
	      {
	         string retval = rm.GetString("Title");
	         if (String.IsNullOrEmpty(retval))
	            retval = "";
	
	         return retval;
	      }
	
	      public static string[] GetFieldNames()
	      {
	         string[] fieldnames = new string[nFields];
	         fieldnames[0] = rm.GetString("Name");
	         fieldnames[1] = rm.GetString("ID");
	         fieldnames[2] = rm.GetString("Born");
	         fieldnames[3] = rm.GetString("Hired");
	         return fieldnames;
	      }
	
	      public static int[] GetFieldLengths()
	      {
	         int[] fieldLengths = new int[nFields];
	         fieldLengths[0] = Int32.Parse(rm.GetString("NameLength"));
	         fieldLengths[1] = Int32.Parse(rm.GetString("IDLength"));
	         fieldLengths[2] = Int32.Parse(rm.GetString("BornLength"));
	         fieldLengths[3] = Int32.Parse(rm.GetString("HiredLength"));
	         return fieldLengths;
	      }
	   }
	}
	

snippet ecma_system_object_equals2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ECMA_System_Object_Equals2/equals2.cs

	using System;
	
	class Point
	{
	   protected int x, y;
	
	   public Point() : this(0, 0)
	   { }
	
	   public Point(int x, int y)
	   {
	      this.x = x;
	      this.y = y;
	   }
	 
	   public override bool Equals(Object obj)
	   {
	      if ((obj == null) || ! this.GetType().Equals(obj.GetType())) 
	      {
	         return false;
	      }
	      else { 
	         Point p = (Point) obj; 
	         return (x == p.x) && (y == p.y);
	      }   
	   }
	
	   public override int GetHashCode()
	   {
	      return (x << 2) ^ y;
	   }
	
	    public override string ToString()
	    {
	        return String.Format("Point({0}, {1})", x, y);
	    }
	}
	
	sealed class Point3D: Point 
	{
	   int z;
	
	   public Point3D(int x, int y, int z) : base(x, y)
	   {
	      this.z = z; 
	   }
	
	   public override bool Equals(Object obj)
	   {
	      Point3D pt3 = obj as Point3D;
	      if (pt3 == null)
	         return false;
	      else
	         return base.Equals((Point)obj) && z == pt3.z;
	   }
	
	   public override int GetHashCode()
	   {
	      return (base.GetHashCode() << 2) ^ z;
	   }
	
	   public override String ToString()
	   {
	        return String.Format("Point({0}, {1}, {2})", x, y, z);
	    }
	}
	
	class Example 
	{
	  public static void Main() 
	  {
	     Point point2D = new Point(5, 5);
	     Point3D point3Da = new Point3D(5, 5, 2);
	     Point3D point3Db = new Point3D(5, 5, 2);
	     Point3D point3Dc = new Point3D(5, 5, -1);
	     
	     Console.WriteLine("{0} = {1}: {2}", 
	                       point2D, point3Da, point2D.Equals(point3Da));
	     Console.WriteLine("{0} = {1}: {2}", 
	                       point2D, point3Db, point2D.Equals(point3Db));        
	     Console.WriteLine("{0} = {1}: {2}", 
	                       point3Da, point3Db, point3Da.Equals(point3Db));
	     Console.WriteLine("{0} = {1}: {2}", 
	                       point3Da, point3Dc, point3Da.Equals(point3Dc));
	  } 
	}
	

snippet sys_txt_fallbackencexc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_txt_fallbackEncExc/fallEncExc.cs

	
	using System;
	using System.Text;
	
	class Sample 
	{
	    public static void Main() 
	    {
	
	
	    Encoding ae = Encoding.GetEncoding(
	                  "us-ascii",
	                  new EncoderExceptionFallback(), 
	                  new DecoderExceptionFallback());
	
	    string inputString = "\u00abX\u00bb";
	
	    string twoNewLines = "\n\n";
	    byte[] encodedBytes = new byte[ae.GetMaxByteCount(inputString.Length)];
	    int numberOfEncodedBytes = 0;
	
	    Console.Clear();
	
	    Console.WriteLine("The name of the encoding is \"{0}\".\n", ae.WebName);
	
	    Console.WriteLine("Input string ({0} characters): \"{1}\"", 
	                       inputString.Length, inputString);
	
	    Console.Write("Input string in hexadecimal: ");
	    foreach (char c in inputString.ToCharArray()) {
	        Console.Write("0x{0:X2} ", (int)c);}
	    Console.Write(twoNewLines);
	
	
	    Console.WriteLine("Encode the input string...");
	
	    try {
	        numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, 
	                                           encodedBytes, 0);
	        }
	    catch (EncoderFallbackException e)
	        {
	        Console.WriteLine(e);
	        Console.WriteLine("\n*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***");
	        return;
	        }
	
	    Console.WriteLine("This statement is never executed.");
	    }
	}
	/*
	This code example produces the following results:
	
	The name of the encoding is "us-ascii".
	
	Input string (3 characters): "«X»"
	Input string in hexadecimal: 0xAB 0x58 0xBB
	
	Encode the input string...
	System.Text.EncoderFallbackException: Unable to translate Unicode character \u00AB at inde
	x 0 to specified code page.
	   at System.Text.EncoderExceptionFallbackBuffer.Fallback(Char charUnknown, Int32 index)
	   at System.Text.EncoderFallbackBuffer.InternalFallback(Char ch, Char*& chars)
	   at System.Text.ASCIIEncoding.GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32
	byteCount, EncoderNLS encoder)
	   at System.Text.ASCIIEncoding.GetBytes(String chars, Int32 charIndex, Int32 charCount, B
	yte[] bytes, Int32 byteIndex)
	   at Sample.Main()
	
	*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***
	
	*/
snippet conceptual_string_basicops

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_string_basicops/compare.cs

	using System;
	
	class Example
	{
	    public static void Main()
	    {
	        Compare();
	        CompareOrdinal();
	        Console.Write("CompareTo: ");
	        CompareTo();
	        Console.Write("Equals: "); 
	        Equals1();
	        Equals2();
	        StartsWith();
	        EndsWith();
	        IndexOf();
	        LastIndexOf();
	    }
	                                                                             
	    public static void Compare()
	    {
	        string string1 = "Hello World!";
	        Console.WriteLine(String.Compare(string1, "Hello World?"));
	    }
	
	    public static void CompareOrdinal()
	    {
	        string string1 = "Hello World!";
	        Console.WriteLine(String.CompareOrdinal(string1, "hello world!"));
	    }
	
	    public static void CompareTo()
	    {
	        string string1 = "Hello World";
	        string string2 = "Hello World!";
	        int MyInt = string1.CompareTo(string2);
	        Console.WriteLine( MyInt );
	    }
	
	    public static void Equals1()
	    {
	        string string1 = "Hello World";
	        Console.WriteLine(string1.Equals("Hello World"));
	    }
	
	    public static void Equals2()
	    {
	        string string1 = "Hello World";
	        string string2 = "Hello World";
	        Console.WriteLine(String.Equals(string1, string2));
	    }
	
	    public static void StartsWith()
	    {
	        string string1 = "Hello World";
	        Console.WriteLine(string1.StartsWith("Hello"));
	    }
	
	    public static void EndsWith()
	    {
	        string string1 = "Hello World";
	        Console.WriteLine(string1.EndsWith("Hello"));
	    }
	
	    public static void IndexOf()
	    {
	        string string1 = "Hello World";
	        Console.WriteLine(string1.IndexOf('l'));
	    }
	
	    public static void LastIndexOf()
	    {
	        string string1 = "Hello World";
	        Console.WriteLine(string1.LastIndexOf('l'));
	    }
	}

snippet microsoft_win32_safehandles_safefilehandle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Win32_SafeHandles_SafeFileHandle/sample.cs

	using System;
	using Microsoft.Win32.SafeHandles;
	using System.Runtime.InteropServices;
	using System.ComponentModel;
	
	class SafeHandlesExample
	{
	
	    static void Main()
	    {
	        try
	        {
	
	            UnmanagedFileLoader loader = new UnmanagedFileLoader("example.xml");
	
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e);
	        }
	        Console.ReadLine();
	
	
	    }
	}
	
	class UnmanagedFileLoader 
	{
	
	    public const short FILE_ATTRIBUTE_NORMAL = 0x80;
	    public const short INVALID_HANDLE_VALUE = -1;
	    public const uint GENERIC_READ = 0x80000000;
	    public const uint GENERIC_WRITE = 0x40000000;
	    public const uint CREATE_NEW = 1;
	    public const uint CREATE_ALWAYS = 2;
	    public const uint OPEN_EXISTING = 3;
	
	    [DllImport("kernel32.dll", SetLastError = true, CharSet=CharSet.Unicode)]
	    static extern SafeFileHandle CreateFile(string lpFileName, uint dwDesiredAccess,
	      uint dwShareMode, IntPtr lpSecurityAttributes, uint dwCreationDisposition,
	      uint dwFlagsAndAttributes, IntPtr hTemplateFile);
	
	
	
	    private SafeFileHandle handleValue = null;
	
	
	    public UnmanagedFileLoader(string Path)
	    {
	        Load(Path);
	    }
	
	
	    public void Load(string Path)
	    {
	        if (Path == null || Path.Length == 0)
	        {
	            throw new ArgumentNullException("Path");
	        }
	
	        handleValue = CreateFile(Path, GENERIC_WRITE, 0, IntPtr.Zero, OPEN_EXISTING, 0, IntPtr.Zero);
	
	        if (handleValue.IsInvalid)
	        {
	            Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
	        }
	    }
	
	    public SafeFileHandle Handle
	    {
	        get
	        {
	            if (!handleValue.IsInvalid)
	            {
	                return handleValue;
	            }
	            else
	            {
	                return null;
	            }
	        }
	
	    }
	
	}
snippet cryptography_rsacsp_signdata2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RSACSP_SignData2/example.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	class RSACSPSample
	{
	    static void Main()
	    {
	        try
	        {
	            ASCIIEncoding ByteConverter = new ASCIIEncoding();
	
	            string dataString = "Data to Sign";
	
	            byte[] originalData = ByteConverter.GetBytes(dataString);
	            byte[] signedData;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            RSAParameters Key = RSAalg.ExportParameters(true);
	
	            signedData = HashAndSignBytes(originalData, Key);
	
	            if(VerifySignedHash(originalData, signedData, Key))
	            {
	                Console.WriteLine("The data was verified.");
	            }
	            else
	            {
	                Console.WriteLine("The data does not match the signature.");
	            }
	
	        }
	        catch(ArgumentNullException)
	        {
	            Console.WriteLine("The data was not signed or verified");
	
	        }
	    }
	    public static byte[] HashAndSignBytes(byte[] DataToSign, RSAParameters Key)
	    {
	        try
	        {   
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            RSAalg.ImportParameters(Key);
	
	            return RSAalg.SignData(DataToSign, new SHA1CryptoServiceProvider());
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	            return null;
	        }
	    }
	
	    public static bool VerifySignedHash(byte[] DataToVerify, byte[] SignedData, RSAParameters Key)
	    {
	        try
	        {
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            RSAalg.ImportParameters(Key);
	
	            return RSAalg.VerifyData(DataToVerify, new SHA1CryptoServiceProvider(), SignedData); 
	
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	            return false;
	        }
	    }
	}
snippet microsoft_win32_safehandles_safefilehandle_ctor

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Win32_SafeHandles_SafeFileHandle_ctor/sample.cs

	using System;
	using Microsoft.Win32.SafeHandles;
	using System.Runtime.InteropServices;
	using System.ComponentModel;
	
	class SafeHandlesExample
	{
	
	    static void Main()
	    {
	        try
	        {
	
	            UnmanagedFileLoader loader = new UnmanagedFileLoader("example.xml");
	
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e);
	        }
	        Console.ReadLine();
	
	
	    }
	}
	
	class UnmanagedFileLoader
	{
	
	    public const short FILE_ATTRIBUTE_NORMAL = 0x80;
	    public const short INVALID_HANDLE_VALUE = -1;
	    public const uint GENERIC_READ = 0x80000000;
	    public const uint GENERIC_WRITE = 0x40000000;
	    public const uint CREATE_NEW = 1;
	    public const uint CREATE_ALWAYS = 2;
	    public const uint OPEN_EXISTING = 3;
	
	    [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
	    static extern IntPtr CreateFile(string lpFileName, uint dwDesiredAccess,
	      uint dwShareMode, IntPtr lpSecurityAttributes, uint dwCreationDisposition,
	      uint dwFlagsAndAttributes, IntPtr hTemplateFile);
	
	
	    private SafeFileHandle handleValue = null;
	
	
	    public UnmanagedFileLoader(string Path)
	    {
	        Load(Path);
	    }
	
	
	    public void Load(string Path)
	    {
	        if (Path == null && Path.Length == 0)
	        {
	            throw new ArgumentNullException("Path");
	        }
	
	        IntPtr ptr = CreateFile(Path, GENERIC_WRITE, 0, IntPtr.Zero, OPEN_EXISTING, 0, IntPtr.Zero);
	
	        handleValue = new SafeFileHandle(ptr, true);
	
	         if (handleValue.IsInvalid)
	         {
	             Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
	         }
	    }
	
	    public SafeFileHandle Handle
	    {
	        get
	        {
	            if (!handleValue.IsInvalid)
	            {
	                return handleValue;
	            }
	            else
	            {
	                return null;
	            }
	        }
	
	    }
	
	}
snippet generic_queue

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_Queue/source.cs

	using System;
	using System.Collections.Generic;
	
	class Example
	{
	    public static void Main()
	    {
	        Queue<string> numbers = new Queue<string>();
	        numbers.Enqueue("one");
	        numbers.Enqueue("two");
	        numbers.Enqueue("three");
	        numbers.Enqueue("four");
	        numbers.Enqueue("five");
	
	        foreach( string number in numbers )
	        {
	            Console.WriteLine(number);
	        }
	
	        Console.WriteLine("\nDequeuing '{0}'", numbers.Dequeue());
	        Console.WriteLine("Peek at next item to dequeue: {0}", 
	            numbers.Peek());
	        Console.WriteLine("Dequeuing '{0}'", numbers.Dequeue());
	
	        Queue<string> queueCopy = new Queue<string>(numbers.ToArray());
	
	        Console.WriteLine("\nContents of the first copy:");
	        foreach( string number in queueCopy )
	        {
	            Console.WriteLine(number);
	        }
	        
	        string[] array2 = new string[numbers.Count * 2];
	        numbers.CopyTo(array2, numbers.Count);
	        
	        Queue<string> queueCopy2 = new Queue<string>(array2);
	
	        Console.WriteLine("\nContents of the second copy, with duplicates and nulls:");
	        foreach( string number in queueCopy2 )
	        {
	            Console.WriteLine(number);
	        }
	
	        Console.WriteLine("\nqueueCopy.Contains(\"four\") = {0}", 
	            queueCopy.Contains("four"));
	
	        Console.WriteLine("\nqueueCopy.Clear()");
	        queueCopy.Clear();
	        Console.WriteLine("\nqueueCopy.Count = {0}", queueCopy.Count);
	    }
	}
	
	/* This code example produces the following output:
	
	one
	two
	three
	four
	five
	
	Dequeuing 'one'
	Peek at next item to dequeue: two
	Dequeuing 'two'
	
	Contents of the copy:
	three
	four
	five
	
	Contents of the second copy, with duplicates and nulls:
	
	
	
	three
	four
	five
	
	queueCopy.Contains("four") = True
	
	queueCopy.Clear()
	
	queueCopy.Count = 0
	 */
	
	
	

snippet generic_stack

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_Stack/source.cs

	using System;
	using System.Collections.Generic;
	
	class Example
	{
	    public static void Main()
	    {
	        Stack<string> numbers = new Stack<string>();
	        numbers.Push("one");
	        numbers.Push("two");
	        numbers.Push("three");
	        numbers.Push("four");
	        numbers.Push("five");
	
	        foreach( string number in numbers )
	        {
	            Console.WriteLine(number);
	        }
	
	        Console.WriteLine("\nPopping '{0}'", numbers.Pop());
	        Console.WriteLine("Peek at next item to destack: {0}", 
	            numbers.Peek());
	        Console.WriteLine("Popping '{0}'", numbers.Pop());
	
	        Stack<string> stack2 = new Stack<string>(numbers.ToArray());
	
	        Console.WriteLine("\nContents of the first copy:");
	        foreach( string number in stack2 )
	        {
	            Console.WriteLine(number);
	        }
	        
	        string[] array2 = new string[numbers.Count * 2];
	        numbers.CopyTo(array2, numbers.Count);
	        
	        Stack<string> stack3 = new Stack<string>(array2);
	
	        Console.WriteLine("\nContents of the second copy, with duplicates and nulls:");
	        foreach( string number in stack3 )
	        {
	            Console.WriteLine(number);
	        }
	
	        Console.WriteLine("\nstack2.Contains(\"four\") = {0}", 
	            stack2.Contains("four"));
	
	        Console.WriteLine("\nstack2.Clear()");
	        stack2.Clear();
	        Console.WriteLine("\nstack2.Count = {0}", stack2.Count);
	    }
	}
	
	/* This code example produces the following output:
	
	five
	four
	three
	two
	one
	
	Popping 'five'
	Peek at next item to destack: four
	Popping 'four'
	
	Contents of the first copy:
	one
	two
	three
	
	Contents of the second copy, with duplicates and nulls:
	one
	two
	three
	
	
	
	
	stack2.Contains("four") = False
	
	stack2.Clear()
	
	stack2.Count = 0
	 */
	
	
	

snippet console_beep2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_beep2/b2.cs

	using System;
	using System.Threading;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    Note[] Mary = 
	        {
	        new Note(Tone.B, Duration.QUARTER),
	        new Note(Tone.A, Duration.QUARTER),
	        new Note(Tone.GbelowC, Duration.QUARTER),
	        new Note(Tone.A, Duration.QUARTER),
	        new Note(Tone.B, Duration.QUARTER),
	        new Note(Tone.B, Duration.QUARTER),
	        new Note(Tone.B, Duration.HALF),
	        new Note(Tone.A, Duration.QUARTER),
	        new Note(Tone.A, Duration.QUARTER),
	        new Note(Tone.A, Duration.HALF),
	        new Note(Tone.B, Duration.QUARTER),
	        new Note(Tone.D, Duration.QUARTER),
	        new Note(Tone.D, Duration.HALF)
	        };
	    Play(Mary);
	    }
	
	    protected static void Play(Note[] tune)
	    {
	    foreach (Note n in tune)
	        {
	        if (n.NoteTone == Tone.REST)
	            Thread.Sleep((int)n.NoteDuration);
	        else
	            Console.Beep((int)n.NoteTone, (int)n.NoteDuration);
	        }
	    }
	
	    protected enum Tone
	    {
	    REST   = 0,
	    GbelowC = 196,
	    A      = 220,
	    Asharp = 233,
	    B      = 247,
	    C      = 262,
	    Csharp = 277,
	    D      = 294,
	    Dsharp = 311,
	    E      = 330,
	    F      = 349,
	    Fsharp = 370,
	    G      = 392,
	    Gsharp = 415, 
	    }
	
	    protected enum Duration
	    {
	    WHOLE     = 1600,
	    HALF      = WHOLE/2,
	    QUARTER   = HALF/2,
	    EIGHTH    = QUARTER/2,
	    SIXTEENTH = EIGHTH/2,
	    }
	
	    protected struct Note
	    {
	    Tone     toneVal;
	    Duration durVal;
	
	    public Note(Tone frequency, Duration time)
	        {
	        toneVal = frequency;
	        durVal  = time;
	        }
	
	    public Tone NoteTone { get{ return toneVal; } }
	    public Duration NoteDuration { get{ return durVal; } }
	    }
	}
	/*
	This example produces the following results:
	
	This example plays the first few notes of "Mary Had A Little Lamb" 
	through the console speaker.
	*/
snippet conceptual_conversion

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_conversion/convert1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      PerformConversions();
	      Console.WriteLine("-----");
	      LosePrecision();
	   }
	
	   private static void PerformConversions()
	   {      
	      int integralValue = 12534;
	      decimal decimalValue = Convert.ToDecimal(integralValue);
	      Console.WriteLine("Converted the {0} value {1} to " +  
	                                        "the {2} value {3:N2}.", 
	                                        integralValue.GetType().Name, 
	                                        integralValue, 
	                                        decimalValue.GetType().Name, 
	                                        decimalValue);
	      byte byteValue = Byte.MaxValue;
	      int integralValue2 = Convert.ToInt32(byteValue);                                  
	      Console.WriteLine("Converted the {0} value {1} to " +  
	                                        "the {2} value {3:G}.", 
	                                        byteValue.GetType().Name, 
	                                        byteValue, 
	                                        integralValue2.GetType().Name, 
	                                        integralValue2);
	
	      double doubleValue = 16.32513e12;
	      try {
	         long longValue = Convert.ToInt64(doubleValue);
	         Console.WriteLine("Converted the {0} value {1:E} to " +  
	                                           "the {2} value {3:N0}.", 
	                                           doubleValue.GetType().Name, 
	                                           doubleValue, 
	                                           longValue.GetType().Name, 
	                                           longValue);
	      }
	      catch (OverflowException) {
	         Console.WriteLine("Unable to convert the {0:E} value {1}.", 
	                                           doubleValue.GetType().Name, doubleValue);
	      }
	            
	      sbyte sbyteValue = -16;
	      try {
	         byte byteValue2 = Convert.ToByte(sbyteValue);
	         Console.WriteLine("Converted the {0} value {1} to " +  
	                                           "the {2} value {3:G}.", 
	                                           sbyteValue.GetType().Name, 
	                                           sbyteValue, 
	                                           byteValue2.GetType().Name, 
	                                           byteValue2);
	      }
	      catch (OverflowException) {
	         Console.WriteLine("Unable to convert the {0} value {1}.", 
	                                           sbyteValue.GetType().Name, sbyteValue);
	      }                                         
	   }
	
	   private static void LosePrecision()
	   {
	      double doubleValue; 
	      
	      decimal decimalValue = 13956810.96702888123451471211m;
	      doubleValue = Convert.ToDouble(decimalValue);
	      Console.WriteLine("{0} converted to {1}.", decimalValue, doubleValue);
	
	      doubleValue = 42.72;
	      try {
	         int integerValue = Convert.ToInt32(doubleValue);
	         Console.WriteLine("{0} converted to {1}.", 
	                                           doubleValue, integerValue);
	      }
	      catch (OverflowException) {      
	         Console.WriteLine("Unable to convert {0} to an integer.", 
	                                           doubleValue);
	      }   
	   }
	} 
snippet conceptual_resources_resx

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_resx/retrieve1.cs

	using System;
	using System.Collections.Generic;
	using System.Drawing;
	using System.Resources;
	using System.Windows.Forms;
	
	public class CarDisplayApp : Form
	{
	   private const string resxFile = @".\CarResources.resx";
	   Automobile[] cars;
	
	   public static void Main()
	   {
	      CarDisplayApp app = new CarDisplayApp();
	      Application.Run(app);
	   }
	
	   public CarDisplayApp()
	   {
	      PictureBox pictureBox = new PictureBox();
	      pictureBox.Location = new Point(10, 10);
	      this.Controls.Add(pictureBox);
	      DataGridView grid = new DataGridView();
	      grid.Location = new Point(10, 60);
	      this.Controls.Add(grid);
	      
	      using (ResXResourceSet resxSet = new ResXResourceSet(resxFile))
	      {
	         this.Text = resxSet.GetString("Title");
	         Icon image = (Icon) resxSet.GetObject("Information", true);
	         if (image != null)
	            pictureBox.Image = image.ToBitmap();
	
	         List<Automobile> carList = new List<Automobile>();
	         string resName = "EarlyAuto";
	         Automobile auto; 
	         int ctr = 1;
	         do {
	            auto = (Automobile) resxSet.GetObject(resName + ctr.ToString());
	            ctr++;
	            if (auto != null) 
	               carList.Add(auto);
	         } while (auto != null);
	         cars = carList.ToArray();
	         grid.DataSource = cars;
	      }
	   }
	}
	
	
	[Serializable()] public class Automobile
	{
	   private string carMake;
	   private string carModel;
	   private int carYear;
	   private int carDoors;
	   private int carCylinders;
	   
	   public Automobile(string make, string model, int year) :  
	                     this(make, model, year, 0, 0)   
	   { }
	   
	   public Automobile(string make, string model, int year, 
	                     int doors, int cylinders)
	   {                     
	      this.carMake = make;
	      this.carModel = model;
	      this.carYear = year;
	      this.carDoors = doors;
	      this.carCylinders = cylinders;
	   }
	
	   public string Make {
	      get { return this.carMake; }
	   }       
	   
	   public string Model {
	      get {return this.carModel; }
	   }       
	   
	   public int Year {
	      get { return this.carYear; }
	   }       
	   
	   public int Doors {
	      get { return this.carDoors; }
	   }       
	   
	   public int Cylinders {
	      get { return this.carCylinders; }
	   }       
	} 
snippet type_getmember

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/type_getmember.cs

	
	using System;
	using System.Security;
	using System.Reflection;
	
	public class MyMemberSample 
	{
	    public static void Main()
	    {
	        MyMemberSample myClass = new MyMemberSample();
	        try
	        {
	            myClass.GetMemberInfo();
	            myClass.GetPublicStaticMemberInfo();	
	            myClass.GetPublicInstanceMethodMemberInfo();	
	        }      
	        catch(ArgumentNullException e)
	        {
	            Console.WriteLine("ArgumentNullException occurred.");
	            Console.WriteLine("Source: " + e.Source);
	            Console.WriteLine("Message: " + e.Message);
	        }
	        catch(NotSupportedException e)
	        {
	            Console.WriteLine("NotSupportedException occurred.");
	            Console.WriteLine("Source: " + e.Source);
	            Console.WriteLine("Message: " + e.Message);
	        }
	        catch(SecurityException e)
	        {
	            Console.WriteLine("SecurityException occurred.");
	            Console.WriteLine("Source: " + e.Source);
	            Console.WriteLine("Message: " + e.Message);
	        }
	        catch(Exception e)
	        {
	            Console.WriteLine("Exception occurred.");
	            Console.WriteLine("Source: " + e.Source);
	            Console.WriteLine("Message: " + e.Message);
	        }
	    }
	
	    public void GetMemberInfo()
	    {
	        String myString = "GetMember_String";
	
	        Type myType = myString.GetType();
	        MemberInfo[] myMembers = myType.GetMember("C*");
	        if(myMembers.Length > 0)
	        {
	            Console.WriteLine("\nThe member(s) starting with the letter C for type {0}:", myType);
	            for(int index=0; index < myMembers.Length; index++)
	                Console.WriteLine("Member {0}: {1}", index + 1, myMembers[index].ToString());
	        }
	        else
	            Console.WriteLine("No members match the search criteria.");    
	    }
	
	    public void GetPublicStaticMemberInfo()
	    {
	        String myString = "GetMember_String_BindingFlag";
	        Type myType = myString.GetType();
	        MemberInfo[] myMembers = myType.GetMember("C*",
	            BindingFlags.Public |BindingFlags.Static);
	        if(myMembers.Length > 0)
	        {
	            Console.WriteLine("\nThe public static member(s) starting with the letter C for type {0}:", myType);
	            for(int index=0; index < myMembers.Length; index++)
	                Console.WriteLine("Member {0}: {1}", index + 1, myMembers[index].ToString());
	        }
	        else
	            Console.WriteLine("No members match the search criteria.");    
	    }
	
	    public void GetPublicInstanceMethodMemberInfo()
	    {
	        String myString = "GetMember_String_MemberType_BindingFlag";
	        Type myType = myString.GetType();
	        MemberInfo[] myMembers = myType.GetMember("C*", MemberTypes.Method, 
	            BindingFlags.Public | BindingFlags.Instance);
	        if(myMembers.Length > 0)
	        {
	            Console.WriteLine("\nThe public instance method(s) starting with the letter C for type {0}:", myType);
	            for(int index=0; index < myMembers.Length; index++)
	                Console.WriteLine("Member {0}: {1}", index + 1, myMembers[index].ToString());
	        }
	        else
	            Console.WriteLine("No members match the search criteria.");    
	    }
	}
snippet parameterinfo_isin_isout_isoptional

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/parameterinfo_isin_isout_isoptional.cs

	
	
	/*
	   The following program creates a dynamic assembly named 'MyAssembly', defines a
	   module named 'MyModule' within the assembly. It defines a type called 'MyType'
	   within the module and also defines a static method named 'MyMethod' for the 
	   type. This dynamic assembly is then queried for the type defined within it and
	   then the attributes of all the parameters of the method named 'MyMethod' is 
	   displayed.
	 */
	
	
	using System;
	using System.Reflection;
	using System.Threading;
	using System.Reflection.Emit;
	
	public class ParameterInfo_IsIn_IsOut_IsOptional
	{
	   public static void DefineMethod()
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "MyAssembly";
	      AssemblyBuilder myAssemblyBuilder = Thread.GetDomain().DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("MyModule", "MyAssembly.dll");
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("MyType");
	      MethodBuilder myMethodBuilder = myTypeBuilder.DefineMethod("MyMethod",MethodAttributes.Public | MethodAttributes.HideBySig |
	                                                                           MethodAttributes.Static, typeof(string), new Type[] {typeof(int), typeof(short), typeof(long)});
	      ParameterBuilder myParameterBuilder = myMethodBuilder.DefineParameter(1, ParameterAttributes.In, "MyIntParameter");
	      myParameterBuilder = myMethodBuilder.DefineParameter(2, ParameterAttributes.Out, "MyShortParameter");
	      myParameterBuilder = myMethodBuilder.DefineParameter(3, ParameterAttributes.Optional | ParameterAttributes.HasDefault, "MyLongParameter");
	      ILGenerator myILGenerator = myMethodBuilder.GetILGenerator();
	      myILGenerator.EmitWriteLine("Hello World!");
	      myILGenerator.Emit(OpCodes.Ret);
	      myTypeBuilder.CreateType();
	   }
	
	   public static void Main()
	   {
	      DefineMethod();
	
	      Assembly[] myAssemblies = Thread.GetDomain().GetAssemblies();
	      Assembly myAssembly = null;
	      for(int i = 0; i < myAssemblies.Length; i++)
	         if(String.Compare(myAssemblies[i].GetName(false).Name, "MyAssembly") == 0)
	            myAssembly = myAssemblies[i];
	
	      if(myAssembly != null)
	      {
	         Type myType = myAssembly.GetType("MyType");
	         MethodBase myMethodBase = myType.GetMethod("MyMethod");
	         ParameterInfo[] myParameters = myMethodBase.GetParameters();
	         Console.WriteLine("\nThe method {0} has the {1} parameters :", 
	            myMethodBase, myParameters.Length);
	         for(int i = 0; i < myParameters.Length; i++)
	         {
	            if(myParameters[i].IsIn)
	               Console.WriteLine("\tThe {0} parameter has the In attribute", 
	                                       i + 1);
	            if(myParameters[i].IsOptional)
	               Console.WriteLine("\tThe {0} parameter has the Optional attribute",
	                                       i + 1);
	            if(myParameters[i].IsOut)
	               Console.WriteLine("\tThe {0} parameter has the Out attribute",
	                                       i + 1);
	         }
	      }
	      else
	         Console.WriteLine("Could not find a assembly named 'MyAssembly' for the current application domain");
	   }
	}
snippet codedomsamplebatch

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDomSampleBatch/class1.cs

	using System;
	using System.CodeDom;
	
	namespace CodeDomSampleBatch
	{
		public class Class1
		{
			public Class1()
			{
			}
	
	        public static CodeCompileUnit CreateCompileUnit()
	        {
	            CodeCompileUnit cu = new CodeCompileUnit();
	
	            CodeExpression invokeExpression = new CodeMethodInvokeExpression( 
	                new CodeTypeReferenceExpression("Console"), 
	                "Write", new CodePrimitiveExpression("Example string") );
	
	            CodeExpressionStatement expressionStatement;
	            expressionStatement = new CodeExpressionStatement( invokeExpression );                        
	
	
	
	            CodeLinePragma pragma = new CodeLinePragma("example.cs", 100);
	
	            CodeSnippetExpression literalExpression = 
	                new CodeSnippetExpression("Literal expression");
	
	            CodeSnippetStatement literalStatement = 
	                new CodeSnippetStatement("Console.Write(\"Test literal statement output\")");            
	
	            CodeSnippetTypeMember literalMember = 
	                new CodeSnippetTypeMember("public static void TestMethod() {}");
	
	            return cu;
	        }
	
	        public static CodeCompileUnit CreateSnippetCompileUnit()
	        {
	            string literalCode;
	            literalCode = "using System; namespace TestLiteralCode " + 
	                "{ public class TestClass { public TestClass() {} } }";
	            CodeSnippetCompileUnit csu = new CodeSnippetCompileUnit( literalCode );            
	            return csu;
	        }
	
	        public void CodeNamespaceImportCollectionExample()
	        {
	            CodeNamespaceImportCollection collection = 
	                new CodeNamespaceImportCollection();            			
	
	            collection.Add( new CodeNamespaceImport("System") );
	
	            CodeNamespaceImport[] Imports = { 
	                    new CodeNamespaceImport("System"),
	                    new CodeNamespaceImport("System.Drawing") };
	            collection.AddRange( Imports );
	            
	            int collectionCount = collection.Count;
	        }
		}
	} 
snippet localbuilder_sample_setlocalsyminfo

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/localbuilder_sample_4.cs

	
	/*
	
	This program demonstrates 'LocalType' property, 'SetLocalSymInfo(String)',
	'SetLocalSymInfo(String, Int32,Int32)' methods, class level for 'LocalBuilder' and
	'DeclareLocal(Type)' method of ILGenerator class. An assembly 'Example' is created using
	AssemblyBuilder, ModuleBuilder, FieldBuilder, TypeBuilder, ConstructorBuilder classes.
	Localbuilder class is used to create local variables of the specified type.
	
	*/
	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Threading;
	
	class LocalBuilder_Sample
	{
	    public static void Main()
	    {
	        AssemblyName myAssemblyName = new AssemblyName();
	        myAssemblyName.Name = "SampleAssembly";
	
	        AssemblyBuilder myAssembly = 
	           Thread.GetDomain().DefineDynamicAssembly(myAssemblyName, 
	               AssemblyBuilderAccess.RunAndSave);
	
	        ModuleBuilder myModule = 
	            myAssembly.DefineDynamicModule(myAssemblyName.Name, 
	                myAssemblyName.Name + ".dll", true);
	
	        TypeBuilder myTypeBuilder = 
	            myModule.DefineType("Example", TypeAttributes.Public);
	
	        MethodBuilder myMethod = myTypeBuilder.DefineMethod("Function1",
	           MethodAttributes.Public | MethodAttributes.Static, 
	           typeof(String), new Type[] { typeof(int) });
	
	        ILGenerator myMethodIL = myMethod.GetILGenerator();
	
	        LocalBuilder myLB1 = myMethodIL.DeclareLocal(typeof(string));
	        myLB1.SetLocalSymInfo("myString");
	        Console.WriteLine("local 'myString' type is: {0}", myLB1.LocalType);
	
	        LocalBuilder myLB2 = myMethodIL.DeclareLocal(typeof(int));
	        myLB2.SetLocalSymInfo("myInt", 1, 2);
	        Console.WriteLine("local 'myInt' type is: {0}", myLB2.LocalType);
	
	        myMethodIL.Emit(OpCodes.Ldarg_0 );
	        myMethodIL.Emit(OpCodes.Stloc_1 );
	
	        myMethodIL.Emit(OpCodes.Ldstr, "string value"  );
	        myMethodIL.Emit(OpCodes.Stloc_0 );
	        myMethodIL.Emit(OpCodes.Ldloc_0 );
	        myMethodIL.Emit(OpCodes.Ret );
	
	        Type myType1 = myTypeBuilder.CreateType();
	        Console.WriteLine("'Example' is created.");
	
	        myAssembly.Save(myAssemblyName.Name + ".dll");
	        Console.WriteLine( "'{0}' is created.", myAssemblyName.Name + ".dll" );
	
	        Object myObject2 = myType1.InvokeMember("Function1", 
	            BindingFlags.InvokeMethod, null, null, new Object[] { 42 });
	
	        Console.WriteLine("Example.Function1 returned: {0}", myObject2);
	    }
	}
	/* This code example produces the following output:
	
	local 'myString' type is: System.String
	local 'myInt' type is: System.Int32
	'Example' is created.
	'SampleAssembly.dll' is created.
	Example.Function1 returned: string value
	 */
snippet microsoft_win32_registry_getset

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Win32_Registry_GetSet/source.cs

	using System;
	using Microsoft.Win32;
	
	public class Example
	{
	    public static void Main()
	    {
	        const string userRoot = "HKEY_CURRENT_USER";
	        const string subkey = "RegistrySetValueExample";
	        const string keyName = userRoot + "\\" + subkey;
	
	        Registry.SetValue(keyName, "", 5280);
	        Registry.SetValue(keyName, "TestLong", 12345678901234,
	            RegistryValueKind.QWord);
	
	        Registry.SetValue(keyName, "TestExpand", "My path: %path%");
	        Registry.SetValue(keyName, "TestExpand2", "My path: %path%",
	            RegistryValueKind.ExpandString);
	
	        string[] strings = {"One", "Two", "Three"};
	        Registry.SetValue(keyName, "TestArray", strings);
	
	        string noSuch = (string) Registry.GetValue(keyName, 
	            "NoSuchName",
	            "Return this default if NoSuchName does not exist.");
	        Console.WriteLine("\r\nNoSuchName: {0}", noSuch);
	
	        int tInteger = (int) Registry.GetValue(keyName, "", -1);
	        Console.WriteLine("(Default): {0}", tInteger);
	        long tLong = (long) Registry.GetValue(keyName, "TestLong",
	            long.MinValue);
	        Console.WriteLine("TestLong: {0}", tLong);
	
	        string[] tArray = (string[]) Registry.GetValue(keyName,
	            "TestArray",
	            new string[] {"Default if TestArray does not exist."});
	        for(int i=0; i<tArray.Length; i++)
	        {
	            Console.WriteLine("TestArray({0}): {1}", i, tArray[i]);
	        }
	
	        string tExpand = (string) Registry.GetValue(keyName,
	             "TestExpand", 
	             "Default if TestExpand does not exist.");
	        Console.WriteLine("TestExpand: {0}", tExpand);
	
	        string tExpand2 = (string) Registry.GetValue(keyName,
	            "TestExpand2",
	            "Default if TestExpand2 does not exist.");
	        Console.WriteLine("TestExpand2: {0}...",
	            tExpand2.Substring(0, 40));
	
	        Console.WriteLine("\r\nUse the registry editor to examine the key.");
	        Console.WriteLine("Press the Enter key to delete the key.");
	        Console.ReadLine();
	        Registry.CurrentUser.DeleteSubKey(subkey);
	    }
	}
	
	

snippet assemblyname_codebase

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyName_CodeBase/assemblyname_codebase.cs

	  
	/* 
	   The following example demonstrates the 'CodeBase', 'CultureInfo'
	   'HashAlgorithm' and 'FullName' properties of the 'AssemblyName' class. Creates
	   a dynamic assembly named 'MyAssembly' with a module named 'MyModule' and
	   a type within the module named 'MyType'. The type 'MyType' has a single
	   method called 'Main' which is also the entry point to the assembly. The
	   creation of the dynamic assembly is carried out by the method called
	   'MakeAssembly'. After the assembly is created with the help of 'MakeAssembly'
	   the assemblies currently loaded are found and the dynamic assembly that we
	   have created is searched for, which is displayed to the console. The dynamic
	   assembly is also saved to a file named 'MyAssembly.exe'.
	   
	   Note : Run 'MyAssembly.exe' which this example has created for a simple
	          'Hello World!" display.
	*/
	
	
	using System;
	using System.Reflection;
	using System.Threading;
	using System.IO;
	using System.Globalization;
	using System.Reflection.Emit;
	using System.Configuration.Assemblies;
	
	public class AssemblyName_CodeBase
	{
	   public static void MakeAssembly(AssemblyName myAssemblyName, string fileName)
	   {
	      AssemblyBuilder myAssemblyBuilder = Thread.GetDomain().DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("MyModule", fileName);
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("MyType");
	      MethodBuilder myMethodBuilder = myTypeBuilder.DefineMethod("Main", MethodAttributes.Public | MethodAttributes.HideBySig |
	         MethodAttributes.Static, typeof(void), null);
	      ILGenerator myILGenerator = myMethodBuilder.GetILGenerator();
	      myILGenerator.EmitWriteLine("Hello World!");
	      myILGenerator.Emit(OpCodes.Ret);
	      myTypeBuilder.CreateType();
	      myAssemblyBuilder.SetEntryPoint(myMethodBuilder);
	      myAssemblyBuilder.Save(fileName);
	   }
	
	   public static void Main()
	   {
	
	
	
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.CodeBase = Directory.GetCurrentDirectory();
	      myAssemblyName.CultureInfo = new CultureInfo("en-US");
	      myAssemblyName.HashAlgorithm = AssemblyHashAlgorithm.SHA1;
	      myAssemblyName.Name = "MyAssembly";
	      myAssemblyName.Version = new Version("1.0.0.2001");
	      MakeAssembly(myAssemblyName, "MyAssembly.exe");
	
	      Assembly[] myAssemblies = Thread.GetDomain().GetAssemblies();
	
	      Assembly myAssembly = null;
	      for(int i = 0; i < myAssemblies.Length; i++)
	      {
	         if(String.Compare(myAssemblies[i].GetName().Name, "MyAssembly") == 0)
	            myAssembly = myAssemblies[i];
	      }
	      if(myAssembly != null)
	      {
	         Console.WriteLine("\nDisplaying the full assembly name\n");
	         Console.WriteLine(myAssembly.GetName().FullName);
	      }
	   }
	}

snippet list`1_findetal

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>();
	
	        dinosaurs.Add("Compsognathus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("Oviraptor");
	        dinosaurs.Add("Velociraptor");
	        dinosaurs.Add("Deinonychus");
	        dinosaurs.Add("Dilophosaurus");
	        dinosaurs.Add("Gallimimus");
	        dinosaurs.Add("Triceratops");
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nTrueForAll(EndsWithSaurus): {0}",
	            dinosaurs.TrueForAll(EndsWithSaurus));
	
	        Console.WriteLine("\nFind(EndsWithSaurus): {0}", 
	            dinosaurs.Find(EndsWithSaurus));
	
	        Console.WriteLine("\nFindLast(EndsWithSaurus): {0}",
	            dinosaurs.FindLast(EndsWithSaurus));
	
	        Console.WriteLine("\nFindAll(EndsWithSaurus):");
	        List<string> sublist = dinosaurs.FindAll(EndsWithSaurus);
	
	        foreach(string dinosaur in sublist)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine(
	            "\n{0} elements removed by RemoveAll(EndsWithSaurus).", 
	            dinosaurs.RemoveAll(EndsWithSaurus));
	
	        Console.WriteLine("\nList now contains:");
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nExists(EndsWithSaurus): {0}", 
	            dinosaurs.Exists(EndsWithSaurus));
	    }
	
	    private static bool EndsWithSaurus(String s)
	    {
	        return s.ToLower().EndsWith("saurus");
	    }
	}
	
	/* This code example produces the following output:
	
	Compsognathus
	Amargasaurus
	Oviraptor
	Velociraptor
	Deinonychus
	Dilophosaurus
	Gallimimus
	Triceratops
	
	TrueForAll(EndsWithSaurus): False
	
	Find(EndsWithSaurus): Amargasaurus
	
	FindLast(EndsWithSaurus): Dilophosaurus
	
	FindAll(EndsWithSaurus):
	Amargasaurus
	Dilophosaurus
	
	2 elements removed by RemoveAll(EndsWithSaurus).
	
	List now contains:
	Compsognathus
	Oviraptor
	Velociraptor
	Deinonychus
	Gallimimus
	Triceratops
	
	Exists(EndsWithSaurus): False
	 */
	
	

snippet conceptual_resources_portable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portable/program2.cs

	using System.Resources;
	
	using System;
	using System.Collections.Generic;
	using System.Globalization;
	
	using MyCompany.Employees;
	 
	class Program
	{
	   static void Main(string[] args)
	   {
	     
	      var employees = InitializeData();
	
	      string title = UILibrary.GetTitle();
	      int start = (Console.WindowWidth + title.Length) / 2;
	      string titlefmt = String.Format("{{0,{0}{1}", start, "}");
	      Console.WriteLine(titlefmt, title);
	      Console.WriteLine();
	
	      string[] fields = UILibrary.GetFieldNames();
	      int[] lengths = UILibrary.GetFieldLengths();
	      string fmtString = String.Empty;
	      for (int ctr = 0; ctr < fields.Length; ctr++)
	         fmtString += String.Format("{{{0},-{1}{2}{3}   ", ctr, lengths[ctr], ctr >= 2 ? ":d" : "", "}");
	
	      Console.WriteLine(fmtString, fields);
	      Console.WriteLine();
	      foreach (var e in employees)
	         Console.WriteLine(fmtString, e.Item1, e.Item2, e.Item3, e.Item4);
	
	      Console.ReadLine();
	   }
	
	   private static List<Tuple<String, String, DateTime, DateTime>> InitializeData() 
	   {
	      List<Tuple<String, String, DateTime, DateTime>> employees = new List<Tuple<String, String, DateTime, DateTime>>();
	      var t1 = Tuple.Create("John", "16302", new DateTime(1954, 8, 18), new DateTime(2006, 9, 8));
	      employees.Add(t1);
	      t1 = Tuple.Create("Alice", "19745", new DateTime(1995, 5, 10), new DateTime(2012, 10, 17));
	      employees.Add(t1);
	      return employees;
	   }
	
	}
	
	namespace MyCompany.Employees
	{
	   public class UILibrary
	   {
	      private static ResourceManager rm;
	      private const int nFields = 4;
	
	      static UILibrary()
	      {
	         rm = new ResourceManager("MyCompany.Employees.LibResources", typeof(UILibrary).Assembly);
	      }
	
	      public static string GetTitle()
	      {
	         string retval = rm.GetString("Title");
	         if (String.IsNullOrEmpty(retval))
	            retval = "";
	
	         return retval;
	      }
	
	      public static string[] GetFieldNames()
	      {
	         string[] fieldnames = new string[nFields];
	         fieldnames[0] = rm.GetString("Name");
	         fieldnames[1] = rm.GetString("ID");
	         fieldnames[2] = rm.GetString("Born");
	         fieldnames[3] = rm.GetString("Hired");
	         return fieldnames;
	      }
	
	      public static int[] GetFieldLengths()
	      {
	         int[] fieldLengths = new int[nFields];
	         fieldLengths[0] = Int32.Parse(rm.GetString("NameLength"));
	         fieldLengths[1] = Int32.Parse(rm.GetString("IDLength"));
	         fieldLengths[2] = Int32.Parse(rm.GetString("BornLength"));
	         fieldLengths[3] = Int32.Parse(rm.GetString("HiredLength"));
	         return fieldLengths;
	      }
	   }
	}
	
	
	

snippet testisassignablefrom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TestIsAssignableFrom/testisassignablefrom.cs

	using System;
	using System.Collections.Generic;
	class Program
	{
	    public static void Main()
	    {
	            Console.WriteLine("Defined Classes:");
	            Room room1 = new Room();
	            Kitchen kitchen1 = new Kitchen();
	            Bedroom bedroom1 = new Bedroom();
	            Guestroom guestroom1 = new Guestroom();
	            MasterBedroom masterbedroom1 = new MasterBedroom();
	
	            Type room1Type = room1.GetType();
	            Type kitchen1Type = kitchen1.GetType();
	            Type bedroom1Type = bedroom1.GetType();
	            Type guestroom1Type = guestroom1.GetType();
	            Type masterbedroom1Type = masterbedroom1.GetType();
	
	            Console.WriteLine("room assignable from kitchen: {0}", room1Type.IsAssignableFrom(kitchen1Type));
	            Console.WriteLine("bedroom assignable from guestroom: {0}", bedroom1Type.IsAssignableFrom(guestroom1Type));
	            Console.WriteLine("kitchen assignable from masterbedroom: {0}", kitchen1Type.IsAssignableFrom(masterbedroom1Type));
	
	            Console.WriteLine();
	            Console.WriteLine("Integer arrays:");
	
	            int[] array2 = new int[2];
	            int[] array10 = new int[10];
	            int[,] array22 = new int[2, 2];
	            int[,] array24 = new int[2, 4];
	
	            Type array2Type = array2.GetType();
	            Type array10Type = array10.GetType();
	            Type array22Type = array22.GetType();
	            Type array24Type = array24.GetType();
	
	            Console.WriteLine("int[2] assignable from int[10]: {0}", array2Type.IsAssignableFrom(array10Type));
	            Console.WriteLine("int[2] assignable from int[2,4]: {0}", array2Type.IsAssignableFrom(array24Type));
	            Console.WriteLine("int[2,4] assignable from int[2,2]: {0}", array24Type.IsAssignableFrom(array22Type));
	
	            Console.WriteLine();
	            Console.WriteLine("Generics:");
	
	            int?[] arrayNull = new int?[10];
	            List<int> genIntList = new List<int>();
	            List<Type> genTList = new List<Type>();
	
	            Type arrayNullType = arrayNull.GetType();
	            Type genIntListType = genIntList.GetType();
	            Type genTListType = genTList.GetType();
	
	            Console.WriteLine("int[10] assignable from int?[10]: {0}", array10Type.IsAssignableFrom(arrayNullType));
	            Console.WriteLine("List<int> assignable from List<Type>: {0}", genIntListType.IsAssignableFrom(genTListType));
	            Console.WriteLine("List<Type> assignable from List<int>: {0}", genTListType.IsAssignableFrom(genIntListType));
	
	            Console.ReadLine();
	
	    }
	}
	class Room
	{
	}
	
	class Kitchen : Room
	{
	}
	
	class Bedroom : Room
	{
	}
	
	class Guestroom : Bedroom
	{
	}
	
	class MasterBedroom : Bedroom
	{
	}
	
snippet conceptual_isolatedstorage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_isolatedstorage/source8.cs

	using System;
	using System.IO;
	using System.IO.IsolatedStorage;
	using System.Collections;
	using System.Collections.Generic;
	
	public class FindingExistingFilesAndDirectories
	{
	    public static void Main()
	    {
	        IsolatedStorageFile isoStore = IsolatedStorageFile.GetStore(IsolatedStorageScope.User |
	            IsolatedStorageScope.Assembly, null, null);
	        isoStore.CreateDirectory("TopLevelDirectory");
	        isoStore.CreateDirectory("TopLevelDirectory/SecondLevel");
	        isoStore.CreateDirectory("AnotherTopLevelDirectory/InsideDirectory");
	        isoStore.CreateFile("InTheRoot.txt");
	        isoStore.CreateFile("AnotherTopLevelDirectory/InsideDirectory/HereIAm.txt");
	
	        Console.WriteLine('\r');
	        Console.WriteLine("Here is a list of all directories in this isolated store:");
	
	        foreach (string directory in GetAllDirectories("*", isoStore))
	        {
	            Console.WriteLine(directory);
	        }
	        Console.WriteLine('\r');
	
	
	        Console.WriteLine("Here is a list of all the files in this isolated store:");
	        foreach (string file in GetAllFiles("*", isoStore)){
	            Console.WriteLine(file);
	        }
	
	
	    public static List<String> GetAllDirectories(string pattern, IsolatedStorageFile storeFile)
	    {
	        string root = Path.GetDirectoryName(pattern);
	
	        if (root != "")
	        {
	            root += "/";
	        }
	
	        List<String> directoryList = new List<String>(storeFile.GetDirectoryNames(pattern));
	
	        for (int i = 0, max = directoryList.Count; i < max; i++)
	        {
	            string directory = directoryList[i] + "/";
	            List<String> more = GetAllDirectories(root + directory + "*", storeFile);
	
	            for (int j = 0; j < more.Count; j++)
	            {
	                more[j] = directory + more[j];
	            }
	
	            directoryList.InsertRange(i + 1, more);
	            i += more.Count;
	            max += more.Count;
	        }
	
	        return directoryList;
	    }
	
	    public static List<String> GetAllFiles(string pattern, IsolatedStorageFile storeFile)
	    {
	        string fileString = Path.GetFileName(pattern);
	
	        List<String> fileList = new List<String>(storeFile.GetFileNames(pattern));
	
	        foreach (string directory in GetAllDirectories("*", storeFile))
	        {
	            foreach (string file in storeFile.GetFileNames(directory + "/" + fileString))
	            {
	                fileList.Add((directory + "/" + file));
	            }
	        }
	
	        return fileList;
	}

snippet conceptual_regularexpressions_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_bestpractices/compare1.cs

	using System;
	using System.Diagnostics;
	using System.IO;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string pattern = @"\b(\w+((\r?\n)|,?\s))*\w+[.?:;!]";
	      Stopwatch sw;
	      Match match;
	      int ctr;
	
	      StreamReader inFile = new StreamReader(@".\Dreiser_TheFinancier.txt");
	      string input = inFile.ReadToEnd();
	      inFile.Close();
	      
	      Console.WriteLine("10 Sentences with Interpreted Regex:");
	      sw = Stopwatch.StartNew();
	      Regex int10 = new Regex(pattern, RegexOptions.Singleline);
	      match = int10.Match(input);
	      for (ctr = 0; ctr <= 9; ctr++) {
	         if (match.Success)
	            match = match.NextMatch();
	         else
	            break;
	      }
	      sw.Stop();
	      Console.WriteLine("   {0} matches in {1}", ctr, sw.Elapsed);
	      
	      Console.WriteLine("10 Sentences with Compiled Regex:");
	      sw = Stopwatch.StartNew();
	      Regex comp10 = new Regex(pattern, 
	                   RegexOptions.Singleline | RegexOptions.Compiled);
	      match = comp10.Match(input);
	      for (ctr = 0; ctr <= 9; ctr++) {
	         if (match.Success)
	            match = match.NextMatch();
	         else
	            break;
	      }
	      sw.Stop();
	      Console.WriteLine("   {0} matches in {1}", ctr, sw.Elapsed);
	      
	      Console.WriteLine("All Sentences with Interpreted Regex:");
	      sw = Stopwatch.StartNew();
	      Regex intAll = new Regex(pattern, RegexOptions.Singleline);
	      match = intAll.Match(input);
	      int matches = 0;
	      while (match.Success) {
	         matches++;
	         match = match.NextMatch();
	      }
	      sw.Stop();
	      Console.WriteLine("   {0:N0} matches in {1}", matches, sw.Elapsed);
	      
	      Console.WriteLine("All Sentences with Compiled Regex:");
	      sw = Stopwatch.StartNew();
	      Regex compAll = new Regex(pattern, 
	                      RegexOptions.Singleline | RegexOptions.Compiled);
	      match = compAll.Match(input);
	      matches = 0;
	      while (match.Success) {
	         matches++;
	         match = match.NextMatch();
	      }
	      sw.Stop();
	      Console.WriteLine("   {0:N0} matches in {1}", matches, sw.Elapsed);      
	   }
	}

snippet convert_tobase64chararray

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/convert_tobase64chararray/tb64ca.cs

	
	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    byte[] byteArray1 = new byte[256];
	    byte[] byteArray2 = new byte[256];
	    char[] charArray  = new char[352];
	    int charArrayLength;
	    string nl = Environment.NewLine;
	
	    string ruler1a = "         1         2         3         4";
	    string ruler2a = "1234567890123456789012345678901234567890";
	    string ruler3a = "----+----+----+----+----+----+----+----+";
	    string ruler1b = "         5         6         7      ";
	    string ruler2b = "123456789012345678901234567890123456";
	    string ruler3b = "----+----+----+----+----+----+----+-";
	    string ruler   = String.Concat(ruler1a, ruler1b, nl, 
	                                   ruler2a, ruler2b, nl,
	                                   ruler3a, ruler3b);
	
	    Console.WriteLine("1) Input: A Byte array of arbitrary data.{0}", nl);
	    for (int x = 0; x < byteArray1.Length; x++)
	    {
	    byteArray1[x] = (byte)x;
	    Console.Write("{0:X2} ", byteArray1[x]);
	    if (((x+1)%20) == 0) Console.WriteLine();
	    }
	    Console.Write("{0}{0}", nl);
	
	    charArrayLength = 
	        Convert.ToBase64CharArray(byteArray1, 0, byteArray1.Length, 
	                                   charArray, 0, Base64FormattingOptions.InsertLineBreaks);
	    Console.WriteLine("2) Convert the input Byte array to a Char array with newlines.");
	    Console.Write("   Output: A Char array (length = {0}). ", charArrayLength);
	    Console.WriteLine("The elements of the array are:{0}", nl);
	    Console.WriteLine(ruler);
	    Console.WriteLine(new String(charArray));
	    Console.WriteLine();
	
	    Console.WriteLine("3) Convert the Char array to an output Byte array.");
	    byteArray2 = Convert.FromBase64CharArray(charArray, 0, charArrayLength);
	
	    Console.WriteLine("4) The output Byte array is equal to the input Byte array: {0}", 
	                      ArraysAreEqual(byteArray1, byteArray2));
	    }
	
	    public static bool ArraysAreEqual(byte[] a1, byte[] a2)
	    {
	    if (a1.Length != a2.Length) return false;
	    for (int i = 0; i < a1.Length; i++)
	        if (a1[i] != a2[i]) return false;
	    return true;
	    }
	}
	/*
	This example produces the following results:
	
	1) Input: A Byte array of arbitrary data.
	
	00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13
	14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27
	28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B
	3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F
	50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63
	64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77
	78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B
	8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F
	A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3
	B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7
	C8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB
	DC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF
	F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF
	
	2) Convert the input Byte array to a Char array with newlines.
	   Output: A Char array (length = 352). The elements of the array are:
	
	         1         2         3         4         5         6         7
	1234567890123456789012345678901234567890123456789012345678901234567890123456
	----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-
	AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4
	OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx
	cnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq
	q6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj
	5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==
	
	3) Convert the Char array to an output Byte array.
	4) The output Byte array is equal to the input Byte array: True
	
	*/

snippet howtodecryptxmlelementasymmetric

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HowToDecryptXMLElementAsymmetric/sample.cs

	
	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	class Program
	{
		static void Main(string[] args)
		{
	
			XmlDocument xmlDoc = new XmlDocument();
	
			try
			{
				xmlDoc.PreserveWhitespace = true;
				xmlDoc.Load("test.xml");
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
			}
			CspParameters cspParams = new CspParameters();
			cspParams.KeyContainerName = "XML_ENC_RSA_KEY";
	
			RSACryptoServiceProvider rsaKey = new RSACryptoServiceProvider(cspParams);
	
			try
			{
	
				Decrypt(xmlDoc, rsaKey, "rsaKey");
	
				xmlDoc.Save("test.xml");
	
				Console.WriteLine();
				Console.WriteLine("Decrypted XML:");
				Console.WriteLine();
				Console.WriteLine(xmlDoc.OuterXml);
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
			}
			finally
			{
				rsaKey.Clear();
			}
	
	
			Console.ReadLine();
	
	
		}
	
		public static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)
		{
			if (Doc == null)
				throw new ArgumentNullException("Doc");
			if (Alg == null)
				throw new ArgumentNullException("Alg");
			if (KeyName == null)
				throw new ArgumentNullException("KeyName");
			EncryptedXml exml = new EncryptedXml(Doc);
	
			exml.AddKeyNameMapping(KeyName, Alg);
	
			exml.DecryptDocument();
	
		}
	
	}

snippet enumbuilder_setcustomattribute1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/enumbuilder_setcustomattribute1.cs

	
	/*
	   The following program demonstrates the EnumBuilder class and
	   its methods  'IsDefined', 'GetCustomAttributes(Type, bool)' and
	   'SetCustomAttribute(CustomAttributeBuilder)'. It defines a 'MyAttribute'
	   class which is derived from 'System.Attribute' class. It builds an Enum
	   and sets 'MyAttribute' as  custom attribute to the Enum.It gets the
	   custom attributes of the Enum type and displays its contents on the console.
	*/
	
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
	public class MyAttribute : Attribute
	{
	   public String myString;
	   public int myInteger;
	
	   public MyAttribute(String myString1, int myInteger1)
	   {
	      this.myString = myString1;
	      this.myInteger = myInteger1;
	   }
	}
	
	class MyApplication
	{
	   static AssemblyBuilder myAssemblyBuilder;
	   static EnumBuilder myEnumBuilder;
	
	   public static void Main()
	   {
	      try
	      {
	         CreateCallee(Thread.GetDomain());
	         if(myEnumBuilder.IsDefined(typeof(MyAttribute),false))
	         {
	            object[] myAttributesArray = myEnumBuilder.GetCustomAttributes(typeof(MyAttribute),false);
	            Console.WriteLine("Custom attribute contains: ");
	            for(int index=0; index < myAttributesArray.Length; index++)
	            {
	               if(myAttributesArray[index] is MyAttribute)
	               {
	                  Console.WriteLine("The value of myString  is: "
	                                    + ((MyAttribute)myAttributesArray[index]).myString);
	                  Console.WriteLine("The value of myInteger is: "
	                                    + ((MyAttribute)myAttributesArray[index]).myInteger);
	               }
	            }
	         }
	         else
	         {
	            Console.WriteLine("Custom Attributes are not set for the EnumBuilder");
	         }
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("The following exception is raised:" +e.Message);
	      }
	
	  }
	
	   private static void CreateCallee(AppDomain domain)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedAssembly";
	
	      myAssemblyBuilder = domain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run);
	
	      Type myType = typeof(MyAttribute);
	      ConstructorInfo myInfo = myType.GetConstructor(new Type[2]{typeof(String), typeof(int)});
	      CustomAttributeBuilder myCustomAttributeBuilder =
	                                    new CustomAttributeBuilder(myInfo, new object[2]{"Hello", 2});
	
	      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("EmittedModule");
	
	      myEnumBuilder = myModuleBuilder.DefineEnum("MyNamespace.MyEnum", TypeAttributes.Public, typeof(Int32));
	
	      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral("FieldOne", 1);
	      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral("FieldTwo", 2);
	
	      myEnumBuilder.CreateType();
	      myEnumBuilder.SetCustomAttribute(myCustomAttributeBuilder);
	   }
	}

snippet conceptual_regularexpressions_bestpractices

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regularexpressions_bestpractices/timeout1.cs

	using System;
	using System.Collections.Generic;
	using System.IO;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      RegexUtilities util = new RegexUtilities();
	      string title = "Doyle - The Hound of the Baskervilles.txt";
	      try {
	         var info = util.GetWordData(title);
	         Console.WriteLine("Words:               {0:N0}", info.Item1);
	         Console.WriteLine("Average Word Length: {0:N2} characters", info.Item2); 
	      }
	      catch (IOException e) {
	         Console.WriteLine("IOException reading file '{0}'", title);
	         Console.WriteLine(e.Message);
	      }
	      catch (RegexMatchTimeoutException e) {
	         Console.WriteLine("The operation timed out after {0:N0} milliseconds", 
	                           e.MatchTimeout.TotalMilliseconds);
	      }
	   }
	}
	
	public class RegexUtilities
	{
	   public Tuple<int, double> GetWordData(string filename)
	   { 
	      
	      List<string> exclusions = new List<string>( new string[] { "a", "an", "the" });
	      string input = null;
	      StreamReader sr = null;
	      try { 
	         sr = new StreamReader(filename);
	         input = sr.ReadToEnd();
	      }
	      catch (FileNotFoundException e) {
	         string msg = String.Format("Unable to find the file '{0}'", filename);
	         throw new IOException(msg, e);
	      }
	      catch (IOException e) {
	         throw new IOException(e.Message, e);
	      }
	      finally {
	         if (sr != null) sr.Close(); 
	      }
	
	      int timeoutInterval = INCREMENT;
	      bool init = false;
	      Regex rgx = null;
	      Match m = null;
	      int indexPos = 0;  
	      do {
	         try {
	            if (! init) {
	               rgx = new Regex(@"\b\w+\b", RegexOptions.None, 
	                               TimeSpan.FromMilliseconds(timeoutInterval));
	               m = rgx.Match(input, indexPos);
	               init = true;
	            }
	            else { 
	               m = m.NextMatch();
	            }
	            if (m.Success) {    
	               if ( !exclusions.Contains(m.Value.ToLower()))
	                  wordLengths[m.Value.Length]++;
	
	               indexPos += m.Length + 1;   
	            }
	         }
	         catch (RegexMatchTimeoutException e) {
	            if (e.MatchTimeout.TotalMilliseconds < MAX_TIMEOUT) {
	               timeoutInterval += INCREMENT;
	               init = false;
	            }
	            else {
	               throw; 
	            }   
	         }          
	      } while (m.Success);
	            
	      int nWords = 0; 
	      long totalLength = 0;
	      
	      for (int ctr = wordLengths.GetLowerBound(0); ctr <= wordLengths.GetUpperBound(0); ctr++) {
	         nWords += wordLengths[ctr];
	         totalLength += ctr * wordLengths[ctr];
	      }
	      return new Tuple<int, double>(nWords, totalLength/nWords);
	   }
	}

snippet conceptual_encoding

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_encoding/stream1.cs

	using System;
	using System.IO;
	using System.Text;
	
	public class Example
	{
	   public static void Main()
	   {
	      UnicodeEncoding enc = new UnicodeEncoding(true, false, false);
	      
	      string str1 = "AB YZ 19 \uD800\udc05 \u00e4"; 
	      str1 += "Unicode characters. \u00a9 \u010C s \u0062\u0308"; 
	      Console.WriteLine("Created original string...\n");
	      
	      byte[] bytes = enc.GetBytes(str1);
	       
	      FileStream fs = File.Create(@".\characters.bin");
	      BinaryWriter bw = new BinaryWriter(fs);
	      bw.Write(bytes);
	      bw.Close();
	      
	      FileStream fsIn = File.OpenRead(@".\characters.bin");
	      BinaryReader br = new BinaryReader(fsIn);
	      
	
	      do { 
	         read = br.Read(bytesRead, 0, count);
	         str2 += enc.GetString(bytesRead, 0, read); 
	      } while (read == count);
	      br.Close();
	      Console.WriteLine("Decoded string using UnicodeEncoding.GetString()...");
	      CompareForEquality(str1, str2);
	      Console.WriteLine();
	      
	      fsIn = File.OpenRead(@".\characters.bin");
	      br = new BinaryReader(fsIn);
	      Decoder decoder = enc.GetDecoder();
	      char[] chars = new char[50];
	      do { 
	         read = br.Read(bytesRead, 0, count);
	         if (index + decoder.GetCharCount(bytesRead, 0, read) - 1 >= chars.Length) 
	            Array.Resize(ref chars, chars.Length + 50);
	
	         written = decoder.GetChars(bytesRead, 0, read, chars, index);
	         index += written;                          
	      } while (read == count);
	      br.Close();            
	      string str3 = new String(chars, 0, index); 
	      Console.WriteLine("Decoded string using UnicodeEncoding.Decoder.GetString()...");
	      CompareForEquality(str1, str3); 
	   }
	
	   private static void CompareForEquality(string original, string decoded)
	   {
	      bool result = original.Equals(decoded);
	      Console.WriteLine("original = decoded: {0}", 
	                        original.Equals(decoded, StringComparison.Ordinal));
	      if (! result) {
	         Console.WriteLine("Code points in original string:");
	         foreach (var ch in original)
	            Console.Write("{0} ", Convert.ToUInt16(ch).ToString("X4"));
	         Console.WriteLine();
	         
	         Console.WriteLine("Code points in decoded string:");
	         foreach (var ch in decoded)
	            Console.Write("{0} ", Convert.ToUInt16(ch).ToString("X4"));
	         Console.WriteLine();
	      }
	   }
	}

snippet console_writelinefmt1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_writelineFmt1/wl.cs

	
	using System;
	class Sample 
	{
	    enum Color {Yellow = 1, Blue, Green};
	    static DateTime thisDate = DateTime.Now;
	
	    public static void Main() 
	    {
	        Console.Clear();
	
	        Console.WriteLine("Standard Numeric Format Specifiers");
	        Console.WriteLine(
	            "(C) Currency: . . . . . . . . {0:C}\n" +
	            "(D) Decimal:. . . . . . . . . {0:D}\n" +
	            "(E) Scientific: . . . . . . . {1:E}\n" +
	            "(F) Fixed point:. . . . . . . {1:F}\n" +
	            "(G) General:. . . . . . . . . {0:G}\n" +
	            "    (default):. . . . . . . . {0} (default = 'G')\n" +
	            "(N) Number: . . . . . . . . . {0:N}\n" +
	            "(P) Percent:. . . . . . . . . {1:P}\n" +
	            "(R) Round-trip: . . . . . . . {1:R}\n" +
	            "(X) Hexadecimal:. . . . . . . {0:X}\n",
	            -123, -123.45f); 
	
	        Console.WriteLine("Standard DateTime Format Specifiers");
	        Console.WriteLine(
	            "(d) Short date: . . . . . . . {0:d}\n" +
	            "(D) Long date:. . . . . . . . {0:D}\n" +
	            "(t) Short time: . . . . . . . {0:t}\n" +
	            "(T) Long time:. . . . . . . . {0:T}\n" +
	            "(f) Full date/short time: . . {0:f}\n" +
	            "(F) Full date/long time:. . . {0:F}\n" +
	            "(g) General date/short time:. {0:g}\n" +
	            "(G) General date/long time: . {0:G}\n" +
	            "    (default):. . . . . . . . {0} (default = 'G')\n" +
	            "(M) Month:. . . . . . . . . . {0:M}\n" +
	            "(R) RFC1123:. . . . . . . . . {0:R}\n" +
	            "(s) Sortable: . . . . . . . . {0:s}\n" +
	            "(u) Universal sortable: . . . {0:u} (invariant)\n" +
	            "(U) Universal full date/time: {0:U}\n" +
	            "(Y) Year: . . . . . . . . . . {0:Y}\n", 
	            thisDate);
	
	        Console.WriteLine("Standard Enumeration Format Specifiers");
	        Console.WriteLine(
	            "(G) General:. . . . . . . . . {0:G}\n" +
	            "    (default):. . . . . . . . {0} (default = 'G')\n" +
	            "(F) Flags:. . . . . . . . . . {0:F} (flags or integer)\n" +
	            "(D) Decimal number: . . . . . {0:D}\n" +
	            "(X) Hexadecimal:. . . . . . . {0:X}\n", 
	            Color.Green);       
	    }
	}
	/*
	This code example produces the following results:
	
	Standard Numeric Format Specifiers
	(C) Currency: . . . . . . . . ($123.00)
	(D) Decimal:. . . . . . . . . -123
	(E) Scientific: . . . . . . . -1.234500E+002
	(F) Fixed point:. . . . . . . -123.45
	(G) General:. . . . . . . . . -123
	    (default):. . . . . . . . -123 (default = 'G')
	(N) Number: . . . . . . . . . -123.00
	(P) Percent:. . . . . . . . . -12,345.00 %
	(R) Round-trip: . . . . . . . -123.45
	(X) Hexadecimal:. . . . . . . FFFFFF85
	
	Standard DateTime Format Specifiers
	(d) Short date: . . . . . . . 6/26/2004
	(D) Long date:. . . . . . . . Saturday, June 26, 2004
	(t) Short time: . . . . . . . 8:11 PM
	(T) Long time:. . . . . . . . 8:11:04 PM
	(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM
	(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM
	(g) General date/short time:. 6/26/2004 8:11 PM
	(G) General date/long time: . 6/26/2004 8:11:04 PM
	    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = 'G')
	(M) Month:. . . . . . . . . . June 26
	(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT
	(s) Sortable: . . . . . . . . 2004-06-26T20:11:04
	(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)
	(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM
	(Y) Year: . . . . . . . . . . June, 2004
	
	Standard Enumeration Format Specifiers
	(G) General:. . . . . . . . . Green
	    (default):. . . . . . . . Green (default = 'G')
	(F) Flags:. . . . . . . . . . Green (flags or integer)
	(D) Decimal number: . . . . . 3
	(X) Hexadecimal:. . . . . . . 00000003
	
	*/

snippet etwtrace

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/etwtrace/program.cs

	using System;
	using System.Diagnostics.Tracing;
	
	namespace Demo2
	{
	    enum MyColor { Red, Yellow, Blue };
	
	    [EventSource(Name = "MyCompany")]
	    class MyCompanyEventSource : EventSource
	    {
	        public class Keywords
	        {
	            public const EventKeywords Page = (EventKeywords)1;
	            public const EventKeywords DataBase = (EventKeywords)2;
	            public const EventKeywords Diagnostic = (EventKeywords)4;
	            public const EventKeywords Perf = (EventKeywords)8;
	        }
	
	        public class Tasks
	        {
	            public const EventTask Page = (EventTask)1;
	            public const EventTask DBQuery = (EventTask)2;
	        }
	
	        [Event(1, Message = "Application Failure: {0}", Level = EventLevel.Error, Keywords = Keywords.Diagnostic)]
	        public void Failure(string message) { WriteEvent(1, message); }
	
	        [Event(2, Message = "Starting up.", Keywords = Keywords.Perf, Level = EventLevel.Informational)]
	        public void Startup() { WriteEvent(2); }
	
	        [Event(3, Message = "loading page {1} activityID={0}", Opcode = EventOpcode.Start, 
	            Task = Tasks.Page, Keywords = Keywords.Page, Level = EventLevel.Informational)]
	        public void PageStart(int ID, string url) { if (IsEnabled()) WriteEvent(3, ID, url); }
	
	        [Event(4, Opcode = EventOpcode.Stop, Task = Tasks.Page, Keywords = Keywords.Page, Level = EventLevel.Informational)]
	        public void PageStop(int ID) { if (IsEnabled()) WriteEvent(4, ID); }
	
	        [Event(5, Opcode = EventOpcode.Start, Task = Tasks.DBQuery, Keywords = Keywords.DataBase, Level = EventLevel.Informational)]
	        public void DBQueryStart(string sqlQuery) { WriteEvent(5, sqlQuery); }
	
	        [Event(6, Opcode = EventOpcode.Stop, Task = Tasks.DBQuery, Keywords = Keywords.DataBase, Level = EventLevel.Informational)]
	        public void DBQueryStop() { WriteEvent(6); }
	
	        [Event(7, Level = EventLevel.Verbose, Keywords = Keywords.DataBase)]
	        public void Mark(int ID) { if (IsEnabled()) WriteEvent(7, ID); }
	
	        [Event(8)]
	        public void LogColor(MyColor color) { WriteEvent(8, (int) color); }
	
	        public static MyCompanyEventSource Log = new MyCompanyEventSource();
	    }
	
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            MyCompanyEventSource.Log.Startup();
	            Console.WriteLine("Starting up");
	
	            MyCompanyEventSource.Log.DBQueryStart("Select * from MYTable");
	            for (int i = 0; i < 10; i++)
	            {
	                MyCompanyEventSource.Log.PageStart(i, url);
	                MyCompanyEventSource.Log.Mark(i);
	                MyCompanyEventSource.Log.PageStop(i);
	            }
	            MyCompanyEventSource.Log.DBQueryStop();
	            MyCompanyEventSource.Log.LogColor(MyColor.Blue);
	
	            MyCompanyEventSource.Log.Failure("This is a failure 1");
	            MyCompanyEventSource.Log.Failure("This is a failure 2");
	            MyCompanyEventSource.Log.Failure("This is a failure 3");
	        }
	    }
	}

snippet constructorbuilder_setsymcustomattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ConstructorBuilder_SetSymCustomAttribute/constructorbuilder_setsymcustomattribute.cs

	
	/* The following program demonstrates the 'SetSymCustomAttribute' method
	   of ConstructorBuilder class. It creates an assembly in the current 
	   domain with dynamic module in the assembly. Constructor builder is
	   used in conjunction with the 'TypeBuilder' class to create constructor
	   at run time. It then sets this constructor's custom attribute associated
	   with symbolic information.
	*/ 
	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	
	internal class MyConstructorBuilder
	{
	   Type myType1;
	   ModuleBuilder myModuleBuilder=null;
	   AssemblyBuilder myAssemblyBuilder = null;
	
	   internal MyConstructorBuilder()
	   {
	      MethodBuilder myMethodBuilder = null;
	      AppDomain myCurrentDomain = AppDomain.CurrentDomain;
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "TempAssembly";
	      myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly
	               (myAssemblyName, AssemblyBuilderAccess.Run);
	      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("TempModule",true);
	      FieldInfo myFieldInfo =
	         myModuleBuilder.DefineUninitializedData("myField", 2, FieldAttributes.Public);
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("TempClass",TypeAttributes.Public);
	      FieldBuilder myGreetingField = myTypeBuilder.DefineField("Greeting", 
	                                          typeof(String), FieldAttributes.Public);
	      Type[] myConstructorArgs = { typeof(String) };
	      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(
	      MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);
	      Console.WriteLine("The constructor name is  : "+ myConstructor.Name);
	      myConstructor.SetSymCustomAttribute("MySimAttribute", new byte[]{01,00,00});
	      ILGenerator myILGenerator3 = myConstructor.GetILGenerator();
	      myILGenerator3.Emit(OpCodes.Ldarg_0);
	      ConstructorInfo myConstructorInfo = typeof(Object).GetConstructor(new Type[0]);
	      myILGenerator3.Emit(OpCodes.Call, myConstructorInfo);
	      myILGenerator3.Emit(OpCodes.Ldarg_0);
	      myILGenerator3.Emit(OpCodes.Ldarg_1);
	      myILGenerator3.Emit(OpCodes.Stfld, myGreetingField);
	      myILGenerator3.Emit(OpCodes.Ret);
	      myMethodBuilder = myTypeBuilder.DefineMethod
	         ("HelloWorld",MethodAttributes.Public,null,null);
	      ILGenerator myILGenerator2 = myMethodBuilder.GetILGenerator();
	      myILGenerator2.EmitWriteLine("Hello World from global");
	      myILGenerator2.Emit(OpCodes.Ret);
	      myModuleBuilder.CreateGlobalFunctions();
	      myType1 = myTypeBuilder.CreateType();
	   }
	
	   internal Type MyTypeProperty
	   {
	      get
	      {
	         return this.myType1;
	      }
	   }
	
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      MyConstructorBuilder myConstructorBuilder = new MyConstructorBuilder();
	      Type myType1 = myConstructorBuilder.MyTypeProperty;
	      if (null != myType1)
	      {
	         Console.WriteLine("Instantiating the new type...");
	         Object[] myObject = {"hello"};
	         object myObject1 = Activator.CreateInstance(myType1,myObject,null);
	         MethodInfo myMethodInfo = myType1.GetMethod("HelloWorld");
	         if (null != myMethodInfo)
	         {
	            Console.WriteLine("Invoking dynamically created HelloWorld method...");
	            myMethodInfo.Invoke(myObject1, null);
	         }
	         else
	         {
	            Console.WriteLine("Could not locate HelloWorld method");
	         }
	      }
	      else
	      {
	         Console.WriteLine("Could not access Type.");
	      }
	   }
	} 
snippet ilgenerator_begin_endscope

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ILGenerator_Begin_EndScope/ilgenerator_begin_endscope.cs

	
	/*
	   This program demonstrates the 'BeginScope()', 'EndScope()' methods and the class
	   'ILGenerator'. A dynamic class 'myTypeBuilder' is created in which a
	   constructor 'myConstructor' and a method 'myMethod' are created dynamically. Their IL's
	   are generated. A local variable 'myLocalBuilder' is declared using 'DeclareLocal' property
	   of 'myMethodIL'. The scope of 'myLocalBuilder' is specified using 'BeginScope' and
	   'EndScope' methods. Respective messages related to scope are printed on the console. 
	*/
	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	
	public class ILGenerator_Begin_EndScope
	{
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      try
	      {
	         AppDomain myAppDomain = AppDomain.CurrentDomain;
	         AssemblyName myAssemblyName = new AssemblyName();
	         myAssemblyName.Name = "SampleAssembly";
	
	         AssemblyBuilder myAssembly = myAppDomain.DefineDynamicAssembly(
	                                 myAssemblyName, AssemblyBuilderAccess.Run);
	         ModuleBuilder myModule=myAssembly.DefineDynamicModule("MyDynamicModule",true);
	         TypeBuilder myTypeBuilder = myModule.DefineType("MyDynamicClass",
	                                          TypeAttributes.Public);
	         FieldBuilder myField = myTypeBuilder.DefineField("MyDynamicField", 
	                                  typeof(String), FieldAttributes.Public);
	         Type[] myConstructorArgs = {typeof(String)};
	         ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(
	            MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);
	
	         ILGenerator myConstructorIL = myConstructor.GetILGenerator();
	         myConstructorIL.Emit(OpCodes.Ldarg_0);
	         ConstructorInfo mySuperConstructor = typeof(Object).GetConstructor(new Type[0]);
	         myConstructorIL.Emit(OpCodes.Call, mySuperConstructor);
	         myConstructorIL.Emit(OpCodes.Ldarg_0);
	         myConstructorIL.Emit(OpCodes.Ldarg_1);
	         myConstructorIL.Emit(OpCodes.Stfld, myField);
	         myConstructorIL.Emit(OpCodes.Ret);
	
	         MethodBuilder myMethod = myTypeBuilder.DefineMethod("MyDynamicMethod",
	            MethodAttributes.Public, typeof(String), null);
	         ILGenerator myMethodIL = myMethod.GetILGenerator();
	
	         myMethodIL.BeginScope();
	
	         LocalBuilder myLocalBuilder = myMethodIL.DeclareLocal(typeof(int));
	         Console.WriteLine("\nTrying to access the local variable within the scope.");
	         Console.WriteLine("'myLocalBuilder' type is: {0}", myLocalBuilder.LocalType);
	         myMethodIL.Emit(OpCodes.Ldstr, "Local value");
	         myMethodIL.Emit(OpCodes.Stloc_0, myLocalBuilder);
	         
	         myMethodIL.EndScope();
	
	         Console.WriteLine("\nTrying to access the local variable outside the scope:");
	         myMethodIL.Emit(OpCodes.Stloc_0, myLocalBuilder);
	         myMethodIL.Emit(OpCodes.Ldloc_0 );
	         myMethodIL.Emit(OpCodes.Ret );
	
	         Type myType1 = myTypeBuilder.CreateType();
	
	         Object myObject1 = Activator.CreateInstance(myType1, new Object[] {"HelloWorld"});
	
	         Object myObject2 = myType1.InvokeMember("MyDynamicMethod",
	                           BindingFlags.InvokeMethod, null, myObject1, null);
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("Exception: {0}", e.Message ); 
	      }
	   }
	}
snippet conceptual_basicio_textfiles

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_basicio_textfiles/source.cs

	using System;
	using System.IO;
	using System.Text;
	using System.Collections.Generic;
	
	class WriteTextFiles
	{
	    static void Main(string[] args)
	    {
	
	        WriteLineByLine();
	
	        AppendTextSW();
	
	        WriteTextAsync();
	
	        WriteFile();
	    }
	
	    static void WriteLineByLine()
	    {
	        
	        string[] lines = { "First line", "Second line", "Third line" };
	
	        string docPath =
	            Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
	
	        using (StreamWriter outputFile = new StreamWriter(Path.Combine(docPath,"WriteLines.txt"))) {
	            foreach (string line in lines)
	                outputFile.WriteLine(line);
	        }
	    }
	
	    static void AppendTextSW()
	    {
	        
	        string docPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
	
	        using (StreamWriter outputFile = new StreamWriter(Path.Combine(docPath,"WriteLines.txt"), true)) {
	            outputFile.WriteLine("Fourth Line");
	        }
	    }
	
	    static async void WriteTextAsync()
	    {
	        
	        string docPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
	
	        using (StreamWriter outputFile = new StreamWriter(Path.Combine(docPath,"WriteTextAsync.txt"))) {
	            await outputFile.WriteAsync("This is a sentence.");
	        }
	    }
	
	    static void WriteFile()
	    {
	        
	        string text = "First line" + Environment.NewLine;
	
	        string docPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
	
	        File.WriteAllText(Path.Combine(docPath,"WriteFile.txt"), text);
	
	        string[] lines = { "New line 1", "New line 2" };
	
	        File.AppendAllLines(Path.Combine(docPath,"WriteFile.txt"), lines);
	        
	    }
	
	}

snippet addeventhandler

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddEventHandler/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public class Example
	{
	    private static object timer;
	
	    public static void Main()
	    {
	        Type t = typeof(System.Timers.Timer);
	        timer = Activator.CreateInstance(t);
	
	        EventInfo eInfo = t.GetEvent("Elapsed");
	
	 
	        Type handlerType = eInfo.EventHandlerType;
	        MethodInfo invokeMethod = handlerType.GetMethod("Invoke");
	        ParameterInfo[] parms = invokeMethod.GetParameters();
	        Type[] parmTypes = new Type[parms.Length];
	        for (int i = 0; i < parms.Length; i++)
	        {
	            parmTypes[i] = parms[i].ParameterType;
	        }
	
	        AssemblyName aName = new AssemblyName();
	        aName.Name = "DynamicTypes";
	        AssemblyBuilder ab = AssemblyBuilder.DefineDynamicAssembly(aName, AssemblyBuilderAccess.Run);
	        ModuleBuilder mb = ab.DefineDynamicModule(aName.Name);
	        TypeBuilder tb = mb.DefineType("Handler", TypeAttributes.Class | TypeAttributes.Public);
	
	        MethodBuilder handler = tb.DefineMethod("DynamicHandler", 
	            MethodAttributes.Public | MethodAttributes.Static, 
	            invokeMethod.ReturnType, parmTypes);
	
	        ILGenerator il = handler.GetILGenerator();
	        il.EmitWriteLine("Timer's Elapsed event is raised.");
	        il.Emit(OpCodes.Ret);
	
	        Type finished = tb.CreateType();
	        MethodInfo eventHandler = finished.GetMethod("DynamicHandler");
	
	        Delegate d = Delegate.CreateDelegate(handlerType, eventHandler);
	        eInfo.AddEventHandler(timer, d);
	
	        t.InvokeMember("Interval", BindingFlags.SetProperty, null, timer, new Object[] { 1000 });
	        t.InvokeMember("Enabled", BindingFlags.SetProperty, null, timer, new Object[] { true });
	
	        Console.WriteLine("Press the Enter key to end the program.");
	        Console.ReadLine();
	    }
	}
	/* This example produces output similar to the following:
	
	Press the Enter key to end the program.
	Timer's Elapsed event is raised.
	Timer's Elapsed event is raised.
	Timer's Elapsed event is raised.
	*/
	

snippet process_synchronizingobject

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Process_SynchronizingObject/process_synchronizingobject.cs

	/*
	The following example demonstrates the property 'SynchronizingObject'
	of 'Process' class.
	
	It starts a process 'mspaint.exe' on button click. 
	It attaches 'MyProcessExited' method of 'MyButton' class as EventHandler to
	'Exited' event of the process.
	*/
	
	using System;
	using System.Diagnostics;
	using System.Windows.Forms;
	
	namespace ProcessSynchronizingObject
	{
	    public class Form1 : System.Windows.Forms.Form
	    {
	        private System.ComponentModel.Container components = null;
	
	        public Form1()
	        {
	            InitializeComponent();
	        }
	        
	        protected override void Dispose(bool disposing)
	        {
	            if (disposing)
	            {
	                if (components != null)
	                {
	                    components.Dispose();
	                }
	            }
	            
	            base.Dispose(disposing);
	        }
	
	        #region Windows Form Designer generated code
	        private void InitializeComponent()
	        {
	            this.button1 = new process_SynchronizingObject.MyButton();
	            this.SuspendLayout();
	            this.button1.Location = new System.Drawing.Point(40, 80);
	            this.button1.Name = "button1";
	            this.button1.Size = new System.Drawing.Size(168, 32);
	            this.button1.TabIndex = 0;
	            this.button1.Text = "Click Me";
	            this.button1.Click += new System.EventHandler(this.button1_Click);
	            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
	            this.ClientSize = new System.Drawing.Size(292, 273);
	            this.Controls.AddRange(new System.Windows.Forms.Control[] {
	                                                                      this.button1});
	            this.Name = "Form1";
	            this.Text = "Form1";
	            this.ResumeLayout(false);
	
	        }
	        #endregion
	
	        [STAThread]
	        static void Main()
	        {
	            Application.Run(new Form1());
	        }
	
	        private MyButton button1;
	        private void button1_Click(object sender, System.EventArgs e)
	        {
	            using (Process myProcess = new Process())
	            {
	                ProcessStartInfo myProcessStartInfo = new ProcessStartInfo("mspaint");
	                myProcess.StartInfo = myProcessStartInfo;
	                myProcess.Start();
	                myProcess.Exited += new EventHandler(MyProcessExited);
	                myProcess.EnableRaisingEvents = true;
	                myProcess.SynchronizingObject = button1;
	                MessageBox.Show("Waiting for the process 'mspaint' to exit....");
	                myProcess.WaitForExit();
	            }
	        }
	        private void MyProcessExited(Object source, EventArgs e)
	        {
	            MessageBox.Show("The process has exited.");
	        }
	    }
	
	    public class MyButton : Button
	    {
	
	    }
	}

snippet contractexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/contractexample/program.cs

	#define CONTRACTS_FULL
	
	using System;
	using System.Diagnostics.Contracts;
	
	
	[ContractClass(typeof(IArrayContract))]
	public interface IArray
	{
	    Object this[int index]
	    {
	        get;
	        set;
	    }
	
	    int Count
	    {
	        get;
	
	    }
	
	    int Add(Object value);
	
	    void Clear();
	
	    void Insert(int index, Object value);
	
	
	    void RemoveAt(int index);
	}
	
	[ContractClassFor(typeof(IArray))]
	internal abstract class IArrayContract : IArray
	{
	    int IArray.Add(Object value)
	    {
	        Contract.Ensures(Contract.Result<int>() >= -1);
	        Contract.Ensures(Contract.Result<int>() < ((IArray)this).Count);
	        return default(int);
	    }
	    Object IArray.this[int index]
	    {
	        get
	        {
	            Contract.Requires(index >= 0);
	            Contract.Requires(index < ((IArray)this).Count);
	            return default(int);
	        }
	        set
	        {
	            Contract.Requires(index >= 0);
	            Contract.Requires(index < ((IArray)this).Count);
	        }
	    }
	    public int Count
	    {
	        get
	        {
	            Contract.Requires(Count >= 0);
	            Contract.Requires(Count <= ((IArray)this).Count);
	            return default(int);
	        }
	    }
	
	    void IArray.Clear()
	    {
	        Contract.Ensures(((IArray)this).Count == 0);
	    }
	
	    void IArray.Insert(int index, Object value)
	    {
	        Contract.Requires(index >= 0);
	        Contract.Ensures(((IArray)this).Count == Contract.OldValue(((IArray)this).Count) + 1);
	    }
	
	    void IArray.RemoveAt(int index)
	    {
	        Contract.Requires(index >= 0);
	        Contract.Requires(index < ((IArray)this).Count);
	        Contract.Ensures(((IArray)this).Count == Contract.OldValue(((IArray)this).Count) - 1);
	    }
	}
snippet rfc28981

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/rfc28981/rfc28981.cs

	using System;
	using System.IO;
	using System.Text;
	using System.Security.Cryptography;
	
	public class rfc2898test
	{
	
	    private const string usageText = "Usage: RFC2898 <password>\nYou must 
	specify the password for encryption.\n";
	    public static void Main(string[] passwordargs)
	    {
	        if (passwordargs.Length == 0)
	        {
	            Console.WriteLine(usageText);
	        }
	        else
	        {
	            string pwd1 = passwordargs[0];
	            byte[] salt1 = new byte[8];
	            using (RNGCryptoServiceProvider rngCsp = new 
	RNGCryptoServiceProvider())
	            {
	                rngCsp.GetBytes(salt1);
	            }
	
	            string data1 = "Some test data";
	same iteration count.
	            int myIterations = 1000;
	            try
	            {
	                Rfc2898DeriveBytes k1 = new Rfc2898DeriveBytes(pwd1, salt1, 
	myIterations);
	                Rfc2898DeriveBytes k2 = new Rfc2898DeriveBytes(pwd1, salt1);
	                TripleDES encAlg = TripleDES.Create();
	                encAlg.Key = k1.GetBytes(16);
	                MemoryStream encryptionStream = new MemoryStream();
	                CryptoStream encrypt = new CryptoStream(encryptionStream, 
	encAlg.CreateEncryptor(), CryptoStreamMode.Write);
	                byte[] utfD1 = new System.Text.UTF8Encoding(false).GetBytes(
	data1);
	
	                encrypt.Write(utfD1, 0, utfD1.Length);
	                encrypt.FlushFinalBlock();
	                encrypt.Close();
	                byte[] edata1 = encryptionStream.ToArray();
	                k1.Reset();
	
	                TripleDES decAlg = TripleDES.Create();
	                decAlg.Key = k2.GetBytes(16);
	                decAlg.IV = encAlg.IV;
	                MemoryStream decryptionStreamBacking = new MemoryStream();
	                CryptoStream decrypt = new CryptoStream(
	decryptionStreamBacking, decAlg.CreateDecryptor(), CryptoStreamMode.Write);
	                decrypt.Write(edata1, 0, edata1.Length);
	                decrypt.Flush();
	                decrypt.Close();
	                k2.Reset();
	                string data2 = new UTF8Encoding(false).GetString(
	decryptionStreamBacking.ToArray());
	
	                if (!data1.Equals(data2))
	                {
	                    Console.WriteLine("Error: The two values are not equal.");
	                }
	                else
	                {
	                    Console.WriteLine("The two values are equal.");
	                    Console.WriteLine("k1 iterations: {0}", k1.IterationCount);
	                    Console.WriteLine("k2 iterations: {0}", k2.IterationCount);
	                }
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine("Error: ", e);
	            }
	
	        }
	    }
	}
snippet conceptual_formatting_overview

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_formatting_overview/appstandard1.cs

	using System;
	
	public class Temperature
	{
	   private decimal m_Temp;
	   
	   public Temperature(decimal temperature)
	   {
	      this.m_Temp = temperature;
	   }
	   
	   public decimal Celsius
	   {
	      get { return this.m_Temp; }
	   }
	   
	   public decimal Kelvin
	   {
	      get { return this.m_Temp + 273.15m; }   
	   }
	   
	   public decimal Fahrenheit
	   {
	      get { return Math.Round(((decimal) (this.m_Temp * 9 / 5 + 32)), 2); }
	   }
	
	   public override string ToString()
	   {
	      return this.ToString("C");
	   }
	   
	   public string ToString(string format)
	   {  
	      if (String.IsNullOrEmpty(format)) format = "C";
	      format = format.Trim().ToUpperInvariant();      
	      
	      switch (format)
	      {
	         case "F":
	            return this.Fahrenheit.ToString("N2") + " °F";
	         case "K":
	            return this.Kelvin.ToString("N2") + " K";
	         case "G":
	         case "C":
	            return this.Celsius.ToString("N2") + " °C";
	         default:
	            throw new FormatException(String.Format("The '{0}' format string is not supported.", format));
	      }      
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      Temperature temp1 = new Temperature(0m);
	      Console.WriteLine(temp1.ToString());
	      Console.WriteLine(temp1.ToString("G"));
	      Console.WriteLine(temp1.ToString("C"));
	      Console.WriteLine(temp1.ToString("F"));
	      Console.WriteLine(temp1.ToString("K"));
	
	      Temperature temp2 = new Temperature(-40m);
	      Console.WriteLine(temp2.ToString());
	      Console.WriteLine(temp2.ToString("G"));
	      Console.WriteLine(temp2.ToString("C"));
	      Console.WriteLine(temp2.ToString("F"));
	      Console.WriteLine(temp2.ToString("K"));
	
	      Temperature temp3 = new Temperature(16m);
	      Console.WriteLine(temp3.ToString());
	      Console.WriteLine(temp3.ToString("G"));
	      Console.WriteLine(temp3.ToString("C"));
	      Console.WriteLine(temp3.ToString("F"));
	      Console.WriteLine(temp3.ToString("K"));
	      
	      Console.WriteLine(String.Format("The temperature is now {0:F}.", temp3));
	   }
	}

snippet typebuilder_definemethodoverride

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineMethodOverride/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public interface I 
	{
	    void M();
	}
	
	public class A 
	{
	    public virtual void M() { Console.WriteLine("In method A.M"); }
	}
	
	public class C : A, I 
	{
	    public override void M() 
	    { 
	        Console.WriteLine("Overriding A.M from C.M"); 
	    }
	
	    void I.M() 
	    {
	        Console.WriteLine("The I.M implementation of C"); 
	    }
	}
	
	class Test 
	{
	    static void Main() 
	    {
	        string name = "DefineMethodOverrideExample";
	        AssemblyName asmName = new AssemblyName(name);
	        AssemblyBuilder ab = 
	            AppDomain.CurrentDomain.DefineDynamicAssembly(
	                asmName, AssemblyBuilderAccess.RunAndSave);
	        ModuleBuilder mb = ab.DefineDynamicModule(name, name + ".dll");
	
	        TypeBuilder tb = 
	            mb.DefineType("C", TypeAttributes.Public, typeof(A));
	        tb.AddInterfaceImplementation(typeof(I));
	
	        MethodBuilder mbIM = tb.DefineMethod("I.M", 
	            MethodAttributes.Private | MethodAttributes.HideBySig |
	                MethodAttributes.NewSlot | MethodAttributes.Virtual | 
	                MethodAttributes.Final,
	            null,
	            Type.EmptyTypes);
	        ILGenerator il = mbIM.GetILGenerator();
	        il.Emit(OpCodes.Ldstr, "The I.M implementation of C");
	        il.Emit(OpCodes.Call, typeof(Console).GetMethod("WriteLine", 
	            new Type[] { typeof(string) }));
	        il.Emit(OpCodes.Ret);
	
	        tb.DefineMethodOverride(mbIM, typeof(I).GetMethod("M"));
	
	        MethodBuilder mbM = tb.DefineMethod("M", 
	            MethodAttributes.Public | MethodAttributes.ReuseSlot | 
	                MethodAttributes.Virtual | MethodAttributes.HideBySig, 
	            null, 
	            Type.EmptyTypes);
	        il = mbM.GetILGenerator();
	        il.Emit(OpCodes.Ldstr, "Overriding A.M from C.M");
	        il.Emit(OpCodes.Call, typeof(Console).GetMethod("WriteLine", 
	            new Type[] { typeof(string) }));
	        il.Emit(OpCodes.Ret);
	
	        Type tc = tb.CreateType();
	
	        ab.Save(name + ".dll");
	
	        Object test = Activator.CreateInstance(tc);
	
	        MethodInfo mi = typeof(I).GetMethod("M");
	        mi.Invoke(test, null);
	
	        mi = typeof(A).GetMethod("M");
	        mi.Invoke(test, null);
	    }
	}
	
	/* This code example produces the following output:
	
	The I.M implementation of C
	Overriding A.M from C.M
	 */

snippet appdomainx

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AppDomainX/AppDomainX.cs

	using System;
	using System.Reflection;
	using System.Threading;
	
	class Module1
	{
	    public static void Main()
	    {
	        string callingDomainName = Thread.GetDomain().FriendlyName;
	        Console.WriteLine(callingDomainName);
	
	        string exeAssembly = Assembly.GetEntryAssembly().FullName;
	        Console.WriteLine(exeAssembly);
	
	        AppDomainSetup ads = new AppDomainSetup();
	        ads.ApplicationBase = AppDomain.CurrentDomain.BaseDirectory;
	
	        ads.DisallowBindingRedirects = false;
	        ads.DisallowCodeDownload = true;
	        ads.ConfigurationFile = 
	            AppDomain.CurrentDomain.SetupInformation.ConfigurationFile;
	
	        AppDomain ad2 = AppDomain.CreateDomain("AD #2", null, ads);
	
	        MarshalByRefType mbrt = 
	            (MarshalByRefType) ad2.CreateInstanceAndUnwrap(
	                exeAssembly, 
	                typeof(MarshalByRefType).FullName
	            );
	
	        mbrt.SomeMethod(callingDomainName);
	
	        AppDomain.Unload(ad2);
	        try
	        {
	            mbrt.SomeMethod(callingDomainName);
	            Console.WriteLine("Sucessful call.");
	        }
	        catch(AppDomainUnloadedException)
	        {
	            Console.WriteLine("Failed call; this is expected.");
	        }
	    }
	}
	
	public class MarshalByRefType : MarshalByRefObject
	{
	    public void SomeMethod(string callingDomainName)
	    {
	        AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;
	        Console.WriteLine("AppName={0}, AppBase={1}, ConfigFile={2}", 
	            ads.ApplicationName, 
	            ads.ApplicationBase, 
	            ads.ConfigurationFile
	        );
	
	        Console.WriteLine("Calling from '{0}' to '{1}'.", 
	            callingDomainName, 
	            Thread.GetDomain().FriendlyName
	        );
	    }
	}
	
	/* This code produces output similar to the following: 
	
	AppDomainX.exe
	AppDomainX, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
	AppName=, AppBase=C:\AppDomain\bin, ConfigFile=C:\AppDomain\bin\AppDomainX.exe.config
	Calling from 'AppDomainX.exe' to 'AD #2'.
	Failed call; this is expected.
	 */
	
	
	
	

snippet cryptography_rsacsp_ctor_int32_2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RSACSP_ctor_int32_2/example.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	class RSACSPSample
	{
	
	    static void Main()
	    {
	        try
	        {
	            UnicodeEncoding ByteConverter = new UnicodeEncoding();
	
	            byte[] dataToEncrypt = ByteConverter.GetBytes("Data to Encrypt");
	            byte[] encryptedData;
	            byte[] decryptedData;
				
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(2048);
	
	            Console.WriteLine("A new key pair of legth {0} was created", RSAalg.KeySize);
	
	            encryptedData = RSAEncrypt(dataToEncrypt,RSAalg.ExportParameters(false), false);
	
	            decryptedData = RSADecrypt(encryptedData,RSAalg.ExportParameters(true), false);
	
	            Console.WriteLine("Decrypted plaintext: {0}", ByteConverter.GetString(decryptedData));
	        }
	        catch(ArgumentNullException)
	        {
	            Console.WriteLine("Encryption failed.");
	
	        }
	    }
	
	    static public byte[] RSAEncrypt(byte[] DataToEncrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)
	    {
	        try
	        {	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            RSAalg.ImportParameters(RSAKeyInfo);
	
	            return RSAalg.Encrypt(DataToEncrypt, DoOAEPPadding);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	            return null;
	        }
	
	    }
	
	    static public byte[] RSADecrypt(byte[] DataToDecrypt, RSAParameters RSAKeyInfo,bool DoOAEPPadding)
	    {
	        try
	        {
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            RSAalg.ImportParameters(RSAKeyInfo);
	
	            return RSAalg.Decrypt(DataToDecrypt, DoOAEPPadding);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.ToString());
	
	            return null;
	        }
	
	    }
	}
snippet howtoverifyxmldocumentrsa

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HowToVerifyXMLDocumentRSA/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	using System.Xml;
	
	public class VerifyXML
	{
	
	    public static void Main(String[] args)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	            cspParams.KeyContainerName = "XML_DSIG_RSA_KEY";
	
	            RSACryptoServiceProvider rsaKey = new RSACryptoServiceProvider(cspParams);
	
	            XmlDocument xmlDoc = new XmlDocument();
	
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	
	            Console.WriteLine("Verifying signature...");
	            bool result = VerifyXml(xmlDoc, rsaKey);
	
	            if (result)
	            {
	                Console.WriteLine("The XML signature is valid.");
	            }
	            else
	            {
	                Console.WriteLine("The XML signature is not valid.");
	            }
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	    }
	
	    public static Boolean VerifyXml(XmlDocument xmlDoc, RSA key)
	    {
	        if (xmlDoc == null)
	             throw new ArgumentException("xmlDoc");
	        if (key == null)
	            throw new ArgumentException("key");
	
	        SignedXml signedXml = new SignedXml(xmlDoc);
	
	        XmlNodeList nodeList = xmlDoc.GetElementsByTagName("Signature");
	
	        if (nodeList.Count <= 0)
	        {
	            throw new CryptographicException("Verification failed: No Signature was found in the document.");
	        }
	
	        if (nodeList.Count >= 2)
	        {
	            throw new CryptographicException("Verification failed: More that one signature was found for the document.");
	        }
	
	        signedXml.LoadXml((XmlElement)nodeList[0]);
	
	        return signedXml.CheckSignature(key);
	    }
	}

snippet installexception

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallException/installexception.cs

	
	/*
	   The following example demonstrates the 'InstallException()', 'InstallException(String)'
	   and 'InstallException(String, Exception)' constructors for 'InstallException' class.
	   This example shows an assembly having its own installer named 'MyInstaller'
	   which has an attribute 'RunInstallerAttribute', indicating that this installer
	   will be invoked by InstallUtil.exe. InstallUtil.exe calls the 'Install', 'Commit',
	   'Rollback' and 'Uninstall' methods. The code in 'Commit' method presumes that 
	   a file named 'FileDoesNotExist.txt' exists before the installation of the 
	   assembly can be committed. If the file 'FileDoesNotExist.txt' does not exist
	   'Commit' raises a 'InstallException'. Same is the case with 'Uninstall', 
	   uninstalltion will only progress if the file named 'FileDoesNotExist.txt' 
	   exists else it raises an 'InstallException'. In 'Rollback' some piece of
	   code is executed which may raise an exception. If the exception is raised then
	   it is caught and an 'InstallException' is raised with that exception being passed
	   to it.
	   
	   Note : Run this example with the help of 'InstallUtil.exe'
	         InstallUtil InstallException.exe
	         InstallUtil /u InstallException.exe 
	 */
	
	using System;
	using System.ComponentModel;
	using System.Collections;
	using System.Configuration.Install;
	using System.IO;
	
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...");
	
	
	
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      base.Commit(savedState);
	      Console.WriteLine("Commit ...");
	      if(!File.Exists("FileDoesNotExist.txt"))
	         throw new InstallException();
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...");
	      try
	      {
	         throw new IOException();
	      }
	      catch(Exception e)
	      {
	         throw new InstallException("IOException raised", e);
	      }
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...");
	      if(!File.Exists("FileDoesNotExist.txt"))
	         throw new InstallException("The file 'FileDoesNotExist'" +
	            " does not exist");
	   }
	}
	
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer");
	   }
	}
snippet cryptography_passwordderivedbytes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_PasswordDerivedbytes/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	public class PasswordDerivedBytesExample
	{
	
	    public static void Main(String[] args)
	    {
	
	        Console.WriteLine("Enter a password to produce a key:");
	
	        byte[] pwd = Encoding.Unicode.GetBytes(Console.ReadLine());
	
	        byte[] salt = CreateRandomSalt(7);
	
	        TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
	
	        try
	        {
	            Console.WriteLine("Creating a key with PasswordDeriveBytes...");
	
	            PasswordDeriveBytes pdb = new PasswordDeriveBytes(pwd, salt);
	
	
	            tdes.Key = pdb.CryptDeriveKey("TripleDES", "SHA1", 192, tdes.IV);
	
	
	            Console.WriteLine("Operation complete.");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	            ClearBytes(pwd);
	            ClearBytes(salt);
	
	            tdes.Clear();
	        }
	
	        Console.ReadLine();
	    }
	
	
	    public static byte[] CreateRandomSalt(int length)
	    {
	        byte[] randBytes;
	
	        if (length >= 1)
	        {
	            randBytes = new byte[length];
	        }
	        else
	        {
	            randBytes = new byte[1];
	        }
	
	        RNGCryptoServiceProvider rand = new RNGCryptoServiceProvider();
	
	        rand.GetBytes(randBytes);
	
	        return randBytes;
	    }
	
	    public static void ClearBytes(byte[] buffer)
	    {
	        if (buffer == null)
	        {
	            throw new ArgumentException("buffer");
	        }
	
	        for (int x = 0; x < buffer.Length; x++)
	        {
	            buffer[x] = 0;
	        }
	    }
	}

snippet howtosignxmldocumentrsa

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HowToSignXMLDocumentRSA/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	using System.Xml;
	
	public class SignXML
	{
	    public static void Main(String[] args)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	            cspParams.KeyContainerName = "XML_DSIG_RSA_KEY";
	
	            RSACryptoServiceProvider rsaKey = new RSACryptoServiceProvider(cspParams);
	
	            XmlDocument xmlDoc = new XmlDocument();
	
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	
	            SignXml(xmlDoc, rsaKey);
	
	            Console.WriteLine("XML file signed.");
	
	            xmlDoc.Save("test.xml");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	    }
	
	    public static void SignXml(XmlDocument xmlDoc, RSA rsaKey)
	    {
	        if (xmlDoc == null)
	            throw new ArgumentException(nameof(xmlDoc));
	        if (rsaKey == null)
	            throw new ArgumentException(nameof(rsaKey));
	
	        SignedXml signedXml = new SignedXml(xmlDoc);
	
	        signedXml.SigningKey = rsaKey;
	
	        Reference reference = new Reference();
	        reference.Uri = "";
	
	        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
	        reference.AddTransform(env);
	
	        signedXml.AddReference(reference);
	
	        signedXml.ComputeSignature();
	
	        XmlElement xmlDigitalSignature = signedXml.GetXml();
	
	        xmlDoc.DocumentElement.AppendChild(xmlDoc.ImportNode(xmlDigitalSignature, true));
	    }
	}

snippet conceptual_globalization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_globalization/numbers2.cs

	using System;
	using System.Globalization;
	using System.IO;
	using System.Threading;
	
	public class Example
	{
	   public static void Main()
	   {
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
	      double[] numbers = GetRandomNumbers(10);
	      DisplayRandomNumbers(numbers);
	      
	      StreamWriter sw = new StreamWriter("randoms.dat");
	      for (int ctr = 0; ctr < numbers.Length; ctr++)
	         sw.Write("{0:R}{1}", numbers[ctr], ctr < numbers.Length - 1 ? "|" : "");
	
	      sw.Close();
	      
	      StreamReader sr = new StreamReader("randoms.dat");
	      string numericData = sr.ReadToEnd();
	      sr.Close();
	      string[] numberStrings = numericData.Split('|');
	      
	      Console.WriteLine("Current Culture: {0}", 
	                        Thread.CurrentThread.CurrentCulture.DisplayName); 
	      foreach (var numberStr in numberStrings) {
	         double restoredNumber;
	         if (Double.TryParse(numberStr, out restoredNumber))
	            Console.WriteLine(restoredNumber.ToString("R"));
	         else
	            Console.WriteLine("ERROR: Unable to parse '{0}'", numberStr);
	      }
	      Console.WriteLine();
	                                             
	      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("fr-FR");
	      Console.WriteLine("Current Culture: {0}", 
	                        Thread.CurrentThread.CurrentCulture.DisplayName); 
	      foreach (var numberStr in numberStrings) {
	         double restoredNumber;
	         if (Double.TryParse(numberStr, out restoredNumber))
	            Console.WriteLine(restoredNumber.ToString("R"));
	         else
	            Console.WriteLine("ERROR: Unable to parse '{0}'", numberStr);
	      }
	   }
	
	   private static double[] GetRandomNumbers(int n)
	   {
	      Random rnd = new Random();
	      double[] numbers = new double[n];
	      for (int ctr = 0; ctr < n; ctr++)
	         numbers[ctr] = rnd.NextDouble() * 1000;
	      return numbers;
	   }
	   
	   private static void DisplayRandomNumbers(double[] numbers)
	   {
	      for (int ctr = 0; ctr < numbers.Length; ctr++)
	         Console.WriteLine(numbers[ctr].ToString("R"));
	      Console.WriteLine();
	   }
	}

snippet sys_glob_persiancal

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_persianCal/calendar2.cs

	using System;
	using System.Globalization;
	
	public class Example
	{
	   public static void Main()
	   {
	        PersianCalendar pc = new PersianCalendar();
	        DateTime thisDate = DateTime.Now;
	
	        Console.WriteLine("Today in the Gregorian Calendar:  {0:dddd}, {0}", thisDate);
	        Console.WriteLine("Today in the Persian Calendar:    {0}, {1}/{2}/{3} {4}:{5}:{6}\n",  
	                      pc.GetDayOfWeek(thisDate), 
	                      pc.GetMonth(thisDate), 
	                      pc.GetDayOfMonth(thisDate),  
	                      pc.GetYear(thisDate), 
	                      pc.GetHour(thisDate), 
	                      pc.GetMinute(thisDate), 
	                      pc.GetSecond(thisDate));
	        
	        thisDate = new DateTime(2013, 5, 28, 10, 35, 0);
	        Console.WriteLine("Gregorian Calendar:  {0:D} ", thisDate);
	        Console.WriteLine("Persian Calendar:    {0}, {1}/{2}/{3} {4}:{5}:{6}\n",  
	                          pc.GetDayOfWeek(thisDate), 
	                          pc.GetMonth(thisDate), 
	                          pc.GetDayOfMonth(thisDate),  
	                          pc.GetYear(thisDate), 
	                          pc.GetHour(thisDate), 
	                          pc.GetMinute(thisDate), 
	                          pc.GetSecond(thisDate));
	         
	        thisDate = pc.ToDateTime(1395, 4, 22, 12, 30, 0, 0);
	        Console.WriteLine("Gregorian Calendar:  {0:D} ", thisDate);
	        Console.WriteLine("Persian Calendar:    {0}, {1}/{2}/{3} {4}:{5}:{6}\n",  
	                      pc.GetDayOfWeek(thisDate), 
	                      pc.GetMonth(thisDate), 
	                      pc.GetDayOfMonth(thisDate),  
	                      pc.GetYear(thisDate), 
	                      pc.GetHour(thisDate), 
	                      pc.GetMinute(thisDate), 
	                      pc.GetSecond(thisDate));
	        
	        Console.WriteLine("Minimum Persian Calendar date (Gregorian Calendar):  {0:D} ", 
	                          pc.MinSupportedDateTime);
	        Console.WriteLine("Minimum Persian Calendar date (Persian Calendar):  " +    
	                          "{0}, {1}/{2}/{3} {4}:{5}:{6}\n",  
	                          pc.GetDayOfWeek(pc.MinSupportedDateTime), 
	                          pc.GetMonth(pc.MinSupportedDateTime), 
	                          pc.GetDayOfMonth(pc.MinSupportedDateTime),  
	                          pc.GetYear(pc.MinSupportedDateTime), 
	                          pc.GetHour(pc.MinSupportedDateTime), 
	                          pc.GetMinute(pc.MinSupportedDateTime), 
	                          pc.GetSecond(pc.MinSupportedDateTime));
	        
	        Console.WriteLine("Maximum Persian Calendar date (Gregorian Calendar):  {0:D} ", 
	                          pc.MaxSupportedDateTime);
	        Console.WriteLine("Maximum Persian Calendar date (Persian Calendar):  " +   
	                          "{0}, {1}/{2}/{3} {4}:{5}:{6}\n",  
	                          pc.GetDayOfWeek(pc.MaxSupportedDateTime), 
	                          pc.GetMonth(pc.MaxSupportedDateTime), 
	                          pc.GetDayOfMonth(pc.MaxSupportedDateTime),  
	                          pc.GetYear(pc.MaxSupportedDateTime), 
	                          pc.GetHour(pc.MinSupportedDateTime), 
	                          pc.GetMinute(pc.MaxSupportedDateTime), 
	                          pc.GetSecond(pc.MaxSupportedDateTime));
	   }
	}

snippet sys_glob_carib_register

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_carib_register/persist.cs

	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    CultureAndRegionInfoBuilder cib = null;
	    try 
	    {
	    Console.WriteLine("Create and explore the CultureAndRegionInfoBuilder...\n");
	    cib = new CultureAndRegionInfoBuilder(
	                         "x-en-US-sample", CultureAndRegionModifiers.None);
	
	    CultureInfo ci = new CultureInfo("en-US");
	    cib.LoadDataFromCultureInfo(ci);
	
	    RegionInfo  ri = new RegionInfo("US");
	    cib.LoadDataFromRegionInfo(ri);
	
	    Console.WriteLine("CultureName:. . . . . . . . . . {0}", cib.CultureName);
	    Console.WriteLine("CultureEnglishName: . . . . . . {0}", cib.CultureEnglishName);
	    Console.WriteLine("CultureNativeName:. . . . . . . {0}", cib.CultureNativeName);
	    Console.WriteLine("GeoId:. . . . . . . . . . . . . {0}", cib.GeoId);
	    Console.WriteLine("IsMetric: . . . . . . . . . . . {0}", cib.IsMetric);
	    Console.WriteLine("ISOCurrencySymbol:. . . . . . . {0}", cib.ISOCurrencySymbol);
	    Console.WriteLine("RegionEnglishName:. . . . . . . {0}", cib.RegionEnglishName);
	    Console.WriteLine("RegionName: . . . . . . . . . . {0}", cib.RegionName);
	    Console.WriteLine("RegionNativeName: . . . . . . . {0}", cib.RegionNativeName);
	    Console.WriteLine("ThreeLetterISOLanguageName: . . {0}", cib.ThreeLetterISOLanguageName);
	    Console.WriteLine("ThreeLetterISORegionName: . . . {0}", cib.ThreeLetterISORegionName);
	    Console.WriteLine("ThreeLetterWindowsLanguageName: {0}", cib.ThreeLetterWindowsLanguageName);
	    Console.WriteLine("ThreeLetterWindowsRegionName: . {0}", cib.ThreeLetterWindowsRegionName);
	    Console.WriteLine("TwoLetterISOLanguageName: . . . {0}", cib.TwoLetterISOLanguageName);
	    Console.WriteLine("TwoLetterISORegionName: . . . . {0}", cib.TwoLetterISORegionName);
	    Console.WriteLine();
	
	    Console.WriteLine("Register the custom culture...");
	    cib.Register();
	
	    Console.WriteLine("Create and explore the custom culture...\n");
	    ci = new CultureInfo("x-en-US-sample");
	
	    Console.WriteLine("Name: . . . . . . . . . . . . . {0}", ci.Name);
	    Console.WriteLine("EnglishName:. . . . . . . . . . {0}", ci.EnglishName);
	    Console.WriteLine("NativeName: . . . . . . . . . . {0}", ci.NativeName);
	    Console.WriteLine("TwoLetterISOLanguageName: . . . {0}", ci.TwoLetterISOLanguageName);
	    Console.WriteLine("ThreeLetterISOLanguageName: . . {0}", ci.ThreeLetterISOLanguageName);
	    Console.WriteLine("ThreeLetterWindowsLanguageName: {0}", ci.ThreeLetterWindowsLanguageName);
	
	    Console.WriteLine("\nNote:\n" +
	        "Use the example in the Unregister method topic to remove the custom culture.");
	    }
	    catch (Exception e)
	    {
	        Console.WriteLine(e);
	    }
	    }
	}
	/*
	This code example produces the following results:
	
	Create and explore the CultureAndRegionInfoBuilder...
	
	CultureName:. . . . . . . . . . x-en-US-sample
	CultureEnglishName: . . . . . . English (United States)
	CultureNativeName:. . . . . . . English (United States)
	GeoId:. . . . . . . . . . . . . 244
	IsMetric: . . . . . . . . . . . False
	ISOCurrencySymbol:. . . . . . . USD
	RegionEnglishName:. . . . . . . United States
	RegionName: . . . . . . . . . . x-en-US-sample
	RegionNativeName: . . . . . . . United States
	ThreeLetterISOLanguageName: . . eng
	ThreeLetterISORegionName: . . . USA
	ThreeLetterWindowsLanguageName: ENU
	ThreeLetterWindowsRegionName: . USA
	TwoLetterISOLanguageName: . . . en
	TwoLetterISORegionName: . . . . US
	
	Register the custom culture...
	Create and explore the custom culture...
	
	Name: . . . . . . . . . . . . . x-en-US-sample
	EnglishName:. . . . . . . . . . English (United States)
	NativeName: . . . . . . . . . . English (United States)
	TwoLetterISOLanguageName: . . . en
	ThreeLetterISOLanguageName: . . eng
	ThreeLetterWindowsLanguageName: ENU
	
	Note:
	Use the example in the Unregister method topic to remove the custom culture.
	
	*/
snippet array_sortsearchcomparer

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearchComparer/source.cs

	using System;
	using System.Collections.Generic;
	
	public class ReverseComparer: IComparer<string>
	{
	    public int Compare(string x, string y)
	    {
	        return y.CompareTo(x);
	    }
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        string[] dinosaurs = {"Pachycephalosaurus", 
	                              "Amargasaurus", 
	                              "Tyrannosaurus", 
	                              "Mamenchisaurus", 
	                              "Deinonychus", 
	                              "Edmontosaurus"};
	
	        Console.WriteLine();
	        foreach( string dinosaur in dinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        ReverseComparer rc = new ReverseComparer();
	
	        Console.WriteLine("\nSort");
	        Array.Sort(dinosaurs, rc);
	
	        Console.WriteLine();
	        foreach( string dinosaur in dinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nBinarySearch for 'Coelophysis':");
	        int index = Array.BinarySearch(dinosaurs, "Coelophysis", rc);
	        ShowWhere(dinosaurs, index);
	
	        Console.WriteLine("\nBinarySearch for 'Tyrannosaurus':");
	        index = Array.BinarySearch(dinosaurs, "Tyrannosaurus", rc);
	        ShowWhere(dinosaurs, index);
	    }
	
	    private static void ShowWhere<T>(T[] array, int index)
	    {
	        if (index<0)
	        {
	            index = ~index;
	
	            Console.Write("Not found. Sorts between: ");
	
	            if (index == 0)
	                Console.Write("beginning of array and ");
	            else
	                Console.Write("{0} and ", array[index-1]);
	
	            if (index == array.Length)
	                Console.WriteLine("end of array.");
	            else
	                Console.WriteLine("{0}.", array[index]);
	        }
	        else
	        {
	            Console.WriteLine("Found at index {0}.", index);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Pachycephalosaurus
	Amargasaurus
	Tyrannosaurus
	Mamenchisaurus
	Deinonychus
	Edmontosaurus
	
	Sort
	
	Tyrannosaurus
	Pachycephalosaurus
	Mamenchisaurus
	Edmontosaurus
	Deinonychus
	Amargasaurus
	
	BinarySearch for 'Coelophysis':
	Not found. Sorts between: Deinonychus and Amargasaurus.
	
	BinarySearch for 'Tyrannosaurus':
	Found at index 0.
	 */
	
	

snippet sys_txt_fallbackencrpl

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_txt_fallbackEncRpl/fallEncRpl.cs

	
	using System;
	using System.Text;
	
	class Sample 
	{
	    public static void Main() 
	    {
	
	
	    Encoding ae = Encoding.GetEncoding(
	                  "us-ascii",
	                  new EncoderReplacementFallback("(unknown)"), 
	                  new DecoderReplacementFallback("(error)"));
	
	
	    string inputString = "\u00abX\u00bb";
	    string decodedString;
	    string twoNewLines = "\n\n";
	    byte[] encodedBytes = new byte[ae.GetByteCount(inputString)];
	    int numberOfEncodedBytes = 0;
	    int ix = 0;
	
	    Console.Clear();
	
	    Console.WriteLine("The name of the encoding is \"{0}\".\n", ae.WebName);
	
	    Console.WriteLine("Input string ({0} characters): \"{1}\"", 
	                       inputString.Length, inputString);
	
	    Console.Write("Input string in hexadecimal: ");
	    foreach (char c in inputString.ToCharArray()) 
	        {
	        Console.Write("0x{0:X2} ", (int)c);
	        }
	    Console.Write(twoNewLines);
	
	
	    Console.WriteLine("Encode the input string...");
	    numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, 
	                                       encodedBytes, 0);
	
	    Console.WriteLine("Encoded bytes in hexadecimal ({0} bytes):\n", 
	                       numberOfEncodedBytes);
	    ix = 0;
	    foreach (byte b in encodedBytes)
	        {
	        Console.Write("0x{0:X2} ", (int)b);
	        ix++;
	        if (0 == ix % 6) Console.WriteLine();
	        }
	    Console.Write(twoNewLines);
	
	
	    Console.WriteLine("Decode the encoded bytes...");
	    decodedString = ae.GetString(encodedBytes);
	
	    Console.WriteLine("Input string:  \"{0}\"", inputString);
	    Console.WriteLine("Decoded string:\"{0}\"", decodedString);
	    }
	}
	/*
	This code example produces the following results:
	
	The name of the encoding is "us-ascii".
	
	Input string (3 characters): "«X»"
	Input string in hexadecimal: 0xAB 0x58 0xBB
	
	Encode the input string...
	Encoded bytes in hexadecimal (19 bytes):
	
	0x28 0x75 0x6E 0x6B 0x6E 0x6F
	0x77 0x6E 0x29 0x58 0x28 0x75
	0x6E 0x6B 0x6E 0x6F 0x77 0x6E
	0x29
	
	Decode the encoded bytes...
	Input string:  "«X»"
	Decoded string:"(unknown)X(unknown)"
	
	*/
snippet addynamicbase

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADDynamicBase/addynamicbase.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public class Example : MarshalByRefObject
	{
	   static void Main()
	   {
	      AppDomainSetup setup = new AppDomainSetup();
	   
	      setup.ApplicationName = "Example";
	   
	      setup.DynamicBase = "C:\\DynamicAssemblyDir";
	      Console.WriteLine("DynamicBase is set to '{0}'.", setup.DynamicBase);
	
	      AppDomain ad = AppDomain.CreateDomain("MyDomain", null, setup);
	   
	      string dynamicDir = ad.DynamicDirectory;
	      Console.WriteLine("Dynamic directory is '{0}'.", dynamicDir);
	
	      if (!System.IO.Directory.Exists(dynamicDir))
	      {
	         Console.WriteLine("Creating the dynamic directory.");
	         System.IO.Directory.CreateDirectory(dynamicDir);
	      }
	
	      GenerateDynamicAssembly(dynamicDir);
	
	      Example ex = (Example) ad.CreateInstanceAndUnwrap(
	         typeof(Example).Assembly.FullName, "Example");
	      ex.Test();
	   }
	
	   public void Test()
	   {
	      Assembly dynAssem = Assembly.Load(
	         "DynamicHelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");
	
	      Type myType = dynAssem.GetType("HelloWorld");
	      myType.InvokeMember("HelloFromAD", BindingFlags.Public | 
	         BindingFlags.Static | BindingFlags.InvokeMethod, 
	         Type.DefaultBinder, null, null);
	   }
	
	
	   private static void GenerateDynamicAssembly(string location)
	   {
	      AssemblyName asmName = new AssemblyName("DynamicHelloWorld");
	      asmName.Version = new Version("1.0.0.0");
	
	      AssemblyBuilder ab = 
	         AppDomain.CurrentDomain.DefineDynamicAssembly( 
	            asmName, AssemblyBuilderAccess.Save, location);
	
	      String moduleName = asmName.Name + ".exe";
	      ModuleBuilder mb = ab.DefineDynamicModule(asmName.Name, moduleName);
	      
	      TypeBuilder tb = mb.DefineType("HelloWorld", TypeAttributes.Public);
	      MethodBuilder hello = tb.DefineMethod("HelloFromAD", 
	         MethodAttributes.Public | MethodAttributes.Static, null, null);
	
	      ILGenerator il = hello.GetILGenerator();
	      il.Emit(OpCodes.Ldstr, "Hello from '{0}'!");
	      il.Emit(OpCodes.Call, typeof(AppDomain).GetProperty("CurrentDomain").GetGetMethod());
	      il.Emit(OpCodes.Call, typeof(AppDomain).GetProperty("FriendlyName").GetGetMethod());
	      il.Emit(OpCodes.Call, typeof(Console).GetMethod("WriteLine", 
	                             new Type[] { typeof(String), typeof(String) }));
	      il.Emit(OpCodes.Ret);
	
	      Type myType = tb.CreateType();
	      ab.Save(moduleName);
	   }
	}
	
	/* This example produces output similar to the following:
	
	DynamicBase is set to 'C:\DynamicAssemblyDir\5e4a7545'.
	Dynamic directory is 'C:\DynamicAssemblyDir\5e4a7545\Example'.
	Creating the dynamic directory.
	Hello from 'MyDomain'!
	 */

snippet interop_handleref

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Interop_HandleRef/handleref.cs

	
	
	using System;
	using System.IO;
	using System.Text;
	using System.Runtime.InteropServices;
	using System.Security.Permissions;
	
	/*
	typedef struct _OVERLAPPED { 
	    ULONG_PTR  Internal; 
	    ULONG_PTR  InternalHigh; 
	    DWORD  Offset; 
	    DWORD  OffsetHigh; 
	    HANDLE hEvent; 
	} OVERLAPPED; 
	*/
	
	[StructLayout(LayoutKind.Sequential)]
	public struct Overlapped
	{
	    IntPtr intrnal;
	    IntPtr internalHigh;
	    int offset;
	    int offsetHigh;
	    IntPtr hEvent;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public class Overlapped2
	{
	    IntPtr intrnal;
	    IntPtr internalHigh;
	    int offset;
	    int offsetHigh;
	    IntPtr hEvent;
	}
	
	public class LibWrap
	{
	
	
	    [DllImport("Kernel32.dll", CharSet=CharSet.Unicode)]
	    public static extern bool ReadFile(
	        HandleRef hndRef,
	        StringBuilder buffer,
	        int numberOfBytesToRead,
	        out int numberOfBytesRead,
	        ref Overlapped flag);
	
	
	    [DllImport("Kernel32.dll", CharSet=CharSet.Unicode)]
	    public static extern bool ReadFile(
	        HandleRef hndRef,
	        StringBuilder buffer,
	        int numberOfBytesToRead,
	        out int numberOfBytesRead,
	
	
	    [DllImport("Kernel32.dll", CharSet=CharSet.Unicode, EntryPoint = "ReadFile")]
	    public static extern bool ReadFile2(
	        HandleRef hndRef,
	        StringBuilder buffer,
	        int numberOfBytesToRead,
	        out int numberOfBytesRead,
	        Overlapped2 flag);
	}
	
	public class App
	{
	    public static void Main()
	    {
		Run();
	    }
	    
	    [SecurityPermissionAttribute(SecurityAction.Demand, Flags=SecurityPermissionFlag.UnmanagedCode)]
	    public static void Run()
	    {
	        FileStream fs = new FileStream("HandleRef.txt", FileMode.Open);
	        HandleRef hr = new HandleRef(fs, fs.SafeFileHandle.DangerousGetHandle());
	        StringBuilder buffer = new StringBuilder(5);
	        int read = 0;
	
	
	        LibWrap.ReadFile(hr, buffer, 5, out read, 0);
	        Console.WriteLine("Read with struct parameter: {0}", buffer);
	        LibWrap.ReadFile2(hr, buffer, 5, out read, null);
	        Console.WriteLine("Read with class parameter: {0}", buffer);
	
	    }
	}
	

snippet cryptography_descsp_createencryptor_memory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_DESCSP_CreateEncryptor_Memory/memoryexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class DESCSPSample
	{
	    static void Main()
	    {
	        try
	        {
	            DESCryptoServiceProvider DESalg = new DESCryptoServiceProvider();
	
	            string sData = "Here is some data to encrypt.";
	
	            byte[] Data = EncryptTextToMemory(sData, DESalg.Key, DESalg.IV);
	
	            string Final = DecryptTextFromMemory(Data, DESalg.Key, DESalg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static byte[] EncryptTextToMemory(string Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream mStream = new MemoryStream();
	
	            CryptoStream cStream = new CryptoStream(mStream, 
	                new DESCryptoServiceProvider().CreateEncryptor(Key, IV), 
	                CryptoStreamMode.Write);
	
	            byte[] toEncrypt = new ASCIIEncoding().GetBytes(Data);
	
	            cStream.Write(toEncrypt, 0, toEncrypt.Length);
	            cStream.FlushFinalBlock();
	        
	            byte[] ret = mStream.ToArray();
	
	            cStream.Close();
	            mStream.Close();
	
	            return ret;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	
	    }
	
	    public static string DecryptTextFromMemory(byte[] Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream msDecrypt = new MemoryStream(Data);
	
	            CryptoStream csDecrypt = new CryptoStream(msDecrypt, 
	                new DESCryptoServiceProvider().CreateDecryptor(Key, IV), 
	                CryptoStreamMode.Read);
	
	            byte[] fromEncrypt = new byte[Data.Length];
	
	            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);
	
	            return new ASCIIEncoding().GetString(fromEncrypt);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}

snippet modulebuilder_getarraymethod

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_GetArrayMethod/modulebuilder_getarraymethod.cs

	/*
	The following example demonstrates 'GetArrayMethod' and 'GetArrayMethodToken'
	methods of 'ModuleBuilder' class.
	A dynamic assembly with a module having a runtime class, 'TempClass' is created. 
	This class defines a method, 'SortArray', which sorts the elements of the array 
	passed to it.The 'GetArrayMethod' method is used to obtain the 'MethodInfo' object 
	corresponding to the 'Sort' method of the 'Array' .The token used to identify the 'Sort' 
	method in dynamic module is displayed using 'GetArrayMethodToken' method.
	*/
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	
	   internal class CodeGenerator
	   {
	      AssemblyBuilder myAssemblyBuilder;
	      internal CodeGenerator()
	      {     
	         AppDomain myCurrentDomain = AppDomain.CurrentDomain;
	         AssemblyName myAssemblyName = new AssemblyName();
	         myAssemblyName.Name = "TempAssembly";
	         myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly
	                        (myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	         ModuleBuilder myModuleBuilder = myAssemblyBuilder.
	                                       DefineDynamicModule("TempModule");
	         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType
	                                    ("TempClass",TypeAttributes.Public);
	         Type[] paramArray = {typeof(Array)};
	         MethodBuilder myMethod = myTypeBuilder.DefineMethod("SortArray", 
	                                   MethodAttributes.Public,typeof(Array),paramArray);
	
	         Type[] myArrayClass = new Type[1];
	         Type[] parameterTypes = {typeof(Array)};
	         MethodInfo myMethodInfo=myModuleBuilder.GetArrayMethod(
	                     myArrayClass.GetType(),"Sort",CallingConventions.Standard,
	                                                                                  null,parameterTypes);
	         MethodToken myMethodToken=myModuleBuilder.GetArrayMethodToken(
	                     myArrayClass.GetType(),"Sort",CallingConventions.Standard,
	                                                                                 null,parameterTypes);
	         Console.WriteLine("Token used by module to identify the 'Sort' method"
	                                     + " of 'Array' class is : {0:x} ",myMethodToken.Token);
	
	         ILGenerator methodIL = myMethod.GetILGenerator();
	         methodIL.Emit(OpCodes.Ldarg_1);
	         methodIL.Emit(OpCodes.Call,myMethodInfo);
	         methodIL.Emit(OpCodes.Ldarg_1);
	         methodIL.Emit(OpCodes.Ret);
	
	         myTypeBuilder.CreateType();
	      }
	      public AssemblyBuilder MyBuilder
	      {
	         get
	         {
	            return this.myAssemblyBuilder;
	         }
	      }
	   }
	
	   public class TestClass
	   {
	      [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	      public static void Main()
	      {
	         CodeGenerator myCodeGenerator = new CodeGenerator();
	         AssemblyBuilder myAssemblyBuilder = myCodeGenerator.MyBuilder;
	         ModuleBuilder myModuleBuilder = myAssemblyBuilder.
	                                                        GetDynamicModule("TempModule");
	         Type myType = myModuleBuilder.GetType("TempClass");
	         object myObject = Activator.CreateInstance(myType);
	         MethodInfo sortArray = myType.GetMethod("SortArray");
	         if (null != sortArray)
	         {
	            string[] arrayToSort = {"I","am","not","sorted"};
	            Console.WriteLine("Array elements before sorting ");
	            for(int i=0;i<arrayToSort.Length;i++)
	            {
	               Console.WriteLine("Array element {0} : {1} ",i,arrayToSort[i]);
	            }
	            object[] arguments = {arrayToSort};
	            Console.WriteLine("Invoking our dynamically " 
	                                     + "created SortArray method...");
	            object myOutput=sortArray.Invoke(myObject, arguments);
	            String[] mySortedArray=(String[])myOutput;
	            Console.WriteLine("Array elements after sorting ");
	            for(int i=0;i<mySortedArray.Length;i++)
	            {
	               Console.WriteLine("Array element {0} : {1} ",i,mySortedArray[i]);
	            }
	         }
	      }
	   }
	

snippet eventlogentrytype_6

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventLogEntryType_6/eventlogentrytype_6.cs

	
	/* The following program demonstrates 'Error', 'Warning', 
	   'Information', 'FailureAudit' and 'SuccessAudit' members of 
	   'EventLogEntryType' enumerator. It creates new source with a 
	   specified event log, new ID, EventLogEntryType and message,
	   if does not exist.
	*/
	
	using System;
	using System.Diagnostics;
	using System.Runtime.Serialization;
	
	class MyEventLogEntryType
	{
	    public static void Main()
	    {
	        try
	        {
	            EventLog myEventLog;
	            string mySource = null;
	            string myLog = null;
	            string myType = null;
	            string myMessage = "A new event is created.";
	            string myEventID = null;
	            int myIntLog = 0;
	            int myID = 0;
	            Console.Write("Enter source name for new event (eg: Print ): ");
	            mySource = Console.ReadLine();
	            Console.Write("Enter log name in which to write an event( eg: System ): ");
	            myLog = Console.ReadLine();
	            if (false == EventLog.SourceExists(mySource))
	            {
	                EventLog.CreateEventSource(mySource, myLog);
	                Console.WriteLine("Creating the event source, press the Enter key to exit the application, \n" +
	                    "then run the applicaton again to use the new event source.");
	                Console.Read();
	            }
	            Console.WriteLine("");
	            Console.WriteLine("     Select type of event to write:");
	            Console.WriteLine("       1.     Error ");
	            Console.WriteLine("       2.     Warning");
	            Console.WriteLine("       3.     Information");
	            Console.WriteLine("       4.     FailureAudit");
	            Console.WriteLine("       5.     SuccessAudit");
	            Console.Write("Enter the choice(eg. 1): ");
	            myType = Console.ReadLine();
	            myIntLog = Convert.ToInt32(myType);
	            Console.Write("Enter ID with which to write an event( eg: 0-65535 ): ");
	            myEventID = Console.ReadLine();
	            myID = Convert.ToInt32(myEventID);
	
	            myEventLog = new EventLog(myLog);
	            myEventLog.Source = mySource;
	            switch (myIntLog)
	            {
	                case 1:
	                    myEventLog.WriteEntry(myMessage, EventLogEntryType.Error, myID);
	                    break;
	                case 2:
	                    myEventLog.WriteEntry(myMessage, EventLogEntryType.Warning, myID);
	                    break;
	                case 3:
	                    myEventLog.WriteEntry(myMessage, EventLogEntryType.Information, myID);
	                    break;
	                case 4:
	                    myEventLog.WriteEntry(myMessage, EventLogEntryType.FailureAudit, myID);
	                    break;
	                case 5:
	                    myEventLog.WriteEntry(myMessage, EventLogEntryType.SuccessAudit, myID);
	                    break;
	                default:
	                    Console.WriteLine("Error: Failed to create an event in event log.");
	                    break;
	            }
	            Console.WriteLine("A new event in log '{0}' with ID '{1}' "
	               + "is successfully written into event log.",
	               myEventLog.Log, myID);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("Exception: {0}", e.Message);
	        }
	    }
	}

snippet codeconstructorexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeConstructorExample/codeconstructorexample.cs

	using System;
	using System.CodeDom;
	using System.Reflection;
	
	namespace CodeDomSamples
	{
	    public class CodeConstructorExample
	    {
	        public CodeConstructorExample()
	        {
	
	            CodeCompileUnit CompileUnit = new CodeCompileUnit();
	            CodeNamespace Samples = new CodeNamespace("Samples");
	            CompileUnit.Namespaces.Add( Samples );
	            Samples.Imports.Add( new CodeNamespaceImport("System") );            
	            
	            CodeTypeDeclaration BaseType = new CodeTypeDeclaration("BaseType");                                                
	            Samples.Types.Add(BaseType);
	            
	            CodeConstructor defaultConstructor = new CodeConstructor();
	            defaultConstructor.Attributes = MemberAttributes.Public;
	            BaseType.Members.Add(defaultConstructor);
	
	            CodeConstructor stringConstructor = new CodeConstructor();
	            stringConstructor.Attributes = MemberAttributes.Public;
	            stringConstructor.Parameters.Add( new CodeParameterDeclarationExpression("System.String", "TestStringParameter") );
	            BaseType.Members.Add(stringConstructor);
	                        
	            CodeTypeDeclaration DerivedType = new CodeTypeDeclaration("DerivedType");
	            DerivedType.BaseTypes.Add( new CodeTypeReference("BaseType") );
	            Samples.Types.Add(DerivedType);        
	                    
	            CodeConstructor baseStringConstructor = new CodeConstructor();
	            baseStringConstructor.Attributes = MemberAttributes.Public;
	            baseStringConstructor.Parameters.Add( new CodeParameterDeclarationExpression("System.String", "TestStringParameter") );
	            baseStringConstructor.BaseConstructorArgs.Add( new CodeVariableReferenceExpression("TestStringParameter") );
	            DerivedType.Members.Add(baseStringConstructor);
	            
	            CodeConstructor overloadConstructor = new CodeConstructor();
	            overloadConstructor.Attributes = MemberAttributes.Public;
	            overloadConstructor.ChainedConstructorArgs.Add( new CodePrimitiveExpression("Test") );
	            DerivedType.Members.Add(overloadConstructor);        
	            
	            CodeConstructor overloadConstructor2 = new CodeConstructor();
	            overloadConstructor2.Attributes = MemberAttributes.Public;
	            overloadConstructor2.Parameters.Add( new CodeParameterDeclarationExpression("System.Int32", "TestIntParameter") );
	            overloadConstructor2.ChainedConstructorArgs.Add( new CodeSnippetExpression("") );
	            DerivedType.Members.Add(overloadConstructor2);            
	        
	
	
	        }
	    }
	}
snippet list`1_ranges

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        string[] input = { "Brachiosaurus", 
	                           "Amargasaurus", 
	                           "Mamenchisaurus" };
	
	        List<string> dinosaurs = new List<string>(input);
	
	        Console.WriteLine("\nCapacity: {0}", dinosaurs.Capacity);
	
	        Console.WriteLine();
	        foreach( string dinosaur in dinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nAddRange(dinosaurs)");
	        dinosaurs.AddRange(dinosaurs);
	
	        Console.WriteLine();
	        foreach( string dinosaur in dinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nRemoveRange(2, 2)");
	        dinosaurs.RemoveRange(2, 2);
	
	        Console.WriteLine();
	        foreach( string dinosaur in dinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        input = new string[] { "Tyrannosaurus", 
	                               "Deinonychus", 
	                               "Velociraptor"};
	
	        Console.WriteLine("\nInsertRange(3, input)");
	        dinosaurs.InsertRange(3, input);
	
	        Console.WriteLine();
	        foreach( string dinosaur in dinosaurs )
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\noutput = dinosaurs.GetRange(2, 3).ToArray()");
	        string[] output = dinosaurs.GetRange(2, 3).ToArray();
	        
	        Console.WriteLine();
	        foreach( string dinosaur in output )
	        {
	            Console.WriteLine(dinosaur);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Capacity: 3
	
	Brachiosaurus
	Amargasaurus
	Mamenchisaurus
	
	AddRange(dinosaurs)
	
	Brachiosaurus
	Amargasaurus
	Mamenchisaurus
	Brachiosaurus
	Amargasaurus
	Mamenchisaurus
	
	RemoveRange(2, 2)
	
	Brachiosaurus
	Amargasaurus
	Amargasaurus
	Mamenchisaurus
	
	InsertRange(3, input)
	
	Brachiosaurus
	Amargasaurus
	Amargasaurus
	Tyrannosaurus
	Deinonychus
	Velociraptor
	Mamenchisaurus
	
	output = dinosaurs.GetRange(2, 3).ToArray()
	
	Amargasaurus
	Tyrannosaurus
	Deinonychus
	 */
	
	

snippet cryptography_3descsp_createencryptor_memory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_3DESCSP_CreateEncryptor_Memory/memoryexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class TrippleDESCSPSample
	{
	
	    static void Main()
	    {
	        try
	        {
	            TripleDESCryptoServiceProvider tDESalg = new TripleDESCryptoServiceProvider();
	
	            string sData = "Here is some data to encrypt.";
	
	            byte[] Data = EncryptTextToMemory(sData, tDESalg.Key, tDESalg.IV);
	
	            string Final = DecryptTextFromMemory(Data, tDESalg.Key, tDESalg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static byte[] EncryptTextToMemory(string Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream mStream = new MemoryStream();
	
	            CryptoStream cStream = new CryptoStream(mStream, 
	                new TripleDESCryptoServiceProvider().CreateEncryptor(Key, IV), 
	                CryptoStreamMode.Write);
	
	            byte[] toEncrypt = new ASCIIEncoding().GetBytes(Data);
	
	            cStream.Write(toEncrypt, 0, toEncrypt.Length);
	            cStream.FlushFinalBlock();
	        
	            byte[] ret = mStream.ToArray();
	
	            cStream.Close();
	            mStream.Close();
	
	            return ret;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	
	    }
	
	    public static string DecryptTextFromMemory(byte[] Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream msDecrypt = new MemoryStream(Data);
	
	            CryptoStream csDecrypt = new CryptoStream(msDecrypt, 
	                new TripleDESCryptoServiceProvider().CreateDecryptor(Key, IV), 
	                CryptoStreamMode.Read);
	
	            byte[] fromEncrypt = new byte[Data.Length];
	
	            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);
	
	            return new ASCIIEncoding().GetString(fromEncrypt);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}

snippet cryptography_rsacsp_signdata1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RSACSP_SignData1/example.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	class RSACSPSample
	{
	    static void Main()
	    {
	        try
	        {
	            ASCIIEncoding ByteConverter = new ASCIIEncoding();
	
	            string dataString = "Data to Sign";
	
	            byte[] originalData = ByteConverter.GetBytes(dataString);
	            byte[] signedData;
	            byte[] smallArray;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            RSAParameters Key = RSAalg.ExportParameters(true);
	
	            signedData = HashAndSignBytes(originalData, Key, 5, 7 );
	
	            smallArray = new byte[7];
	            Array.Copy(originalData, 5 , smallArray, 0, 7); 
	
	            if(VerifySignedHash(smallArray, signedData, Key))
	            {
	                Console.WriteLine("The data was verified.");
	            }
	            else
	            {
	                Console.WriteLine("The data does not match the signature.");
	            }
	
	        }
	        catch(ArgumentNullException)
	        {
	            Console.WriteLine("The data was not signed or verified");
	
	        }
	    }
	    public static byte[] HashAndSignBytes(byte[] DataToSign, RSAParameters Key, int Index, int Length)
	    {
	        try
	        {   
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            RSAalg.ImportParameters(Key);
	
	            return RSAalg.SignData(DataToSign,Index,Length, new SHA1CryptoServiceProvider());
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	            return null;
	        }
	    }
	
	    public static bool VerifySignedHash(byte[] DataToVerify, byte[] SignedData, RSAParameters Key)
	    {
	        try
	        {
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            RSAalg.ImportParameters(Key);
	
	            return RSAalg.VerifyData(DataToVerify, new SHA1CryptoServiceProvider(), SignedData); 
	
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	            return false;
	        }
	    }
	}
snippet objectmodel_collection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ObjectModel_Collection/source.cs

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	
	public class Demo
	{
	    public static void Main()
	    {
	        Collection<string> dinosaurs = new Collection<string>();
	
	        dinosaurs.Add("Psitticosaurus");
	        dinosaurs.Add("Caudipteryx");
	        dinosaurs.Add("Compsognathus");
	        dinosaurs.Add("Muttaburrasaurus");
	
	        Console.WriteLine("{0} dinosaurs:", dinosaurs.Count);
	        Display(dinosaurs);
	    
	        Console.WriteLine("\nIndexOf(\"Muttaburrasaurus\"): {0}", 
	            dinosaurs.IndexOf("Muttaburrasaurus"));
	
	        Console.WriteLine("\nContains(\"Caudipteryx\"): {0}", 
	            dinosaurs.Contains("Caudipteryx"));
	
	        Console.WriteLine("\nInsert(2, \"Nanotyrannus\")");
	        dinosaurs.Insert(2, "Nanotyrannus");
	        Display(dinosaurs);
	
	        Console.WriteLine("\ndinosaurs[2]: {0}", dinosaurs[2]);
	
	        Console.WriteLine("\ndinosaurs[2] = \"Microraptor\"");
	        dinosaurs[2] = "Microraptor";
	        Display(dinosaurs);
	
	        Console.WriteLine("\nRemove(\"Microraptor\")");
	        dinosaurs.Remove("Microraptor");
	        Display(dinosaurs);
	
	        Console.WriteLine("\nRemoveAt(0)");
	        dinosaurs.RemoveAt(0);
	        Display(dinosaurs);
	
	        Console.WriteLine("\ndinosaurs.Clear()");
	        dinosaurs.Clear();
	        Console.WriteLine("Count: {0}", dinosaurs.Count);
	    }
	    
	    private static void Display(Collection<string> cs)
	    {
	        Console.WriteLine();
	        foreach( string item in cs )
	        {
	            Console.WriteLine(item);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	4 dinosaurs:
	
	Psitticosaurus
	Caudipteryx
	Compsognathus
	Muttaburrasaurus
	
	IndexOf("Muttaburrasaurus"): 3
	
	Contains("Caudipteryx"): True
	
	Insert(2, "Nanotyrannus")
	
	Psitticosaurus
	Caudipteryx
	Nanotyrannus
	Compsognathus
	Muttaburrasaurus
	
	dinosaurs[2]: Nanotyrannus
	
	dinosaurs[2] = "Microraptor"
	
	Psitticosaurus
	Caudipteryx
	Microraptor
	Compsognathus
	Muttaburrasaurus
	
	Remove("Microraptor")
	
	Psitticosaurus
	Caudipteryx
	Compsognathus
	Muttaburrasaurus
	
	RemoveAt(0)
	
	Caudipteryx
	Compsognathus
	Muttaburrasaurus
	
	dinosaurs.Clear()
	Count: 0
	 */
	
	

snippet list`1_sortcomparison

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    private static int CompareDinosByLength(string x, string y)
	    {
	        if (x == null)
	        {
	            if (y == null)
	            {
	                return 0;
	            }
	            else
	            {
	                return -1;
	            }
	        }
	        else
	        {
	            if (y == null)
	            {
	                return 1;
	            }
	            else
	            {
	                int retval = x.Length.CompareTo(y.Length);
	
	                if (retval != 0)
	                {
	                    return retval;
	                }
	                else
	                {
	                    return x.CompareTo(y);
	                }
	            }
	        }
	    }
	
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>();
	        dinosaurs.Add("Pachycephalosaurus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("");
	        dinosaurs.Add(null);
	        dinosaurs.Add("Mamenchisaurus");
	        dinosaurs.Add("Deinonychus");
	        Display(dinosaurs);
	
	        Console.WriteLine("\nSort with generic Comparison<string> delegate:");
	        dinosaurs.Sort(CompareDinosByLength);
	        Display(dinosaurs);
	
	    }
	
	    private static void Display(List<string> list)
	    {
	        Console.WriteLine();
	        foreach( string s in list )
	        {
	            if (s == null)
	                Console.WriteLine("(null)");
	            else
	                Console.WriteLine("\"{0}\"", s);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	"Pachycephalosaurus"
	"Amargasaurus"
	""
	(null)
	"Mamenchisaurus"
	"Deinonychus"
	
	Sort with generic Comparison<string> delegate:
	
	(null)
	""
	"Deinonychus"
	"Amargasaurus"
	"Mamenchisaurus"
	"Pachycephalosaurus"
	 */
	
	

snippet array_sortcomparison

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Array_SortComparison/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    private static int CompareDinosByLength(string x, string y)
	    {
	        if (x == null)
	        {
	            if (y == null)
	            {
	                return 0;
	            }
	            else
	            {
	                return -1;
	            }
	        }
	        else
	        {
	            if (y == null)
	            {
	                return 1;
	            }
	            else
	            {
	                int retval = x.Length.CompareTo(y.Length);
	
	                if (retval != 0)
	                {
	                    return retval;
	                }
	                else
	                {
	                    return x.CompareTo(y);
	                }
	            }
	        }
	    }
	
	    public static void Main()
	    {
	        string[] dinosaurs = {
	            "Pachycephalosaurus",
	            "Amargasaurus",
	            "",
	            null,
	            "Mamenchisaurus",
	            "Deinonychus" };
	        Display(dinosaurs);
	
	        Console.WriteLine("\nSort with generic Comparison<string> delegate:");
	        Array.Sort(dinosaurs, CompareDinosByLength);
	        Display(dinosaurs);
	
	    }
	
	    private static void Display(string[] arr)
	    {
	        Console.WriteLine();
	        foreach( string s in arr )
	        {
	            if (s == null)
	                Console.WriteLine("(null)");
	            else
	                Console.WriteLine("\"{0}\"", s);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	"Pachycephalosaurus"
	"Amargasaurus"
	""
	(null)
	"Mamenchisaurus"
	"Deinonychus"
	
	Sort with generic Comparison<string> delegate:
	
	(null)
	""
	"Deinonychus"
	"Amargasaurus"
	"Mamenchisaurus"
	"Pachycephalosaurus"
	 */
	
	

snippet indentedtextwriterexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IndentedTextWriterExample/form1.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.ComponentModel;
	using System.IO;
	using System.Windows.Forms;
	
	namespace IndentedTextWriterExample
	{
	    public class Form1 : System.Windows.Forms.Form
	    {
	        private System.Windows.Forms.TextBox textBox1;
	
	        private string CreateMultilevelIndentString()
	        {
	            System.IO.StringWriter baseTextWriter = new System.IO.StringWriter();            
	
	            System.CodeDom.Compiler.IndentedTextWriter indentWriter = new IndentedTextWriter(baseTextWriter, "    ");           
	
	            indentWriter.Indent = 0;
	
	            WriteLevel(indentWriter, 0, 5);
	
	            return baseTextWriter.ToString();
	        }
	
	        private void WriteLevel(IndentedTextWriter indentWriter, int level, int totalLevels)
	        {
	            indentWriter.WriteLine("This is a test phrase. Current indentation level: "+level.ToString());
	            
	            if( level < totalLevels )
	            {
	                indentWriter.Indent++;
	
	                WriteLevel(indentWriter, level+1, totalLevels);
	
	                indentWriter.Indent--;
	            }
	            else
	                indentWriter.WriteLineNoTabs("This is a test phrase written with the IndentTextWriter.WriteLineNoTabs method.");
	
	            indentWriter.WriteLine("This is a test phrase. Current indentation level: "+level.ToString());           
	        }
	
	        private void button1_Click(object sender, System.EventArgs e)
	        {
	            textBox1.Text = CreateMultilevelIndentString();
	        }
	
	        public Form1()
	        {
	            System.Windows.Forms.Button button1 = new System.Windows.Forms.Button();
	            this.textBox1 = new System.Windows.Forms.TextBox();
	            this.SuspendLayout();            
	            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
	                | System.Windows.Forms.AnchorStyles.Left) 
	                | System.Windows.Forms.AnchorStyles.Right)));
	            this.textBox1.Location = new System.Drawing.Point(8, 40);
	            this.textBox1.Multiline = true;
	            this.textBox1.Name = "textBox1";
	            this.textBox1.Size = new System.Drawing.Size(391, 242);
	            this.textBox1.TabIndex = 0;
	            this.textBox1.Text = "";
	            button1.Location = new System.Drawing.Point(11, 8);
	            button1.Name = "button1";
	            button1.Size = new System.Drawing.Size(229, 23);
	            button1.TabIndex = 1;
	            button1.Text = "Generate string using IndentedTextWriter";
	            button1.Click += new System.EventHandler(this.button1_Click);
	            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
	            this.ClientSize = new System.Drawing.Size(407, 287);
	            this.Controls.Add(button1);
	            this.Controls.Add(this.textBox1);
	            this.Name = "Form1";
	            this.Text = "IndentedTextWriter example";
	            this.ResumeLayout(false);        
	        }
	
	        [STAThread]
	        static void Main() 
	        {
	            Application.Run(new Form1());
	        }
	    }
	}
snippet typebuilder_sample_4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/typebuilder_sample_4.cs

	
	/* The following program demonstrates the property 'BaseType' and methods 
	   'DefineField','DefineConstructor','AddInterfaceImplementation' of the
	   class 'TypeBuilder'. 
	   The program creates a dynamic assembly and a type within it called as 
	   'HelloWorld' This defines a field and implements an interface.
	*/
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Threading;
	using System.Security.Permissions;
	
	public class MyTypeBuilder
	{
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main() 
	   {
	      Console.WriteLine("TypeBuilder Sample");
	      Console.WriteLine("----------------------");
	      Type helloWorldType = CreateDynamicAssembly(Thread.GetDomain(),
	                                       AssemblyBuilderAccess.RunAndSave);
	      Object helloWorld = Activator.CreateInstance(helloWorldType,
	                                       new Object[] { "Called HelloWorld" });
	      helloWorldType.InvokeMember("SayHello",
	                                BindingFlags.Default |BindingFlags.InvokeMethod 
	                               ,null, helloWorld, null);
	      Console.WriteLine("Defined Field: " + helloWorldType.GetField("myGreeting").Name);
	      AssemblyBuilder myAssemblyBuilder = (AssemblyBuilder)helloWorldType.Assembly;
	      myAssemblyBuilder.Save("EmittedAssembly.dll");
	   }
	   public interface IHello
	   {
	      void SayHello();
	   }
	  
	   private static Type CreateDynamicAssembly(AppDomain myAppDomain, AssemblyBuilderAccess myAccess) 
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedAssembly";
	      AssemblyBuilder myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, myAccess);
	      ModuleBuilder myModuleBuilder;
	      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("EmittedModule",
	                                                          "EmittedModule.mod");
	      TypeBuilder helloWorldTypeBuilder = 
	         myModuleBuilder.DefineType("HelloWorld", TypeAttributes.Public);
	
	      Console.WriteLine("Base Type: " + helloWorldTypeBuilder.BaseType.Name);
	      FieldBuilder myGreetingField = 
	         helloWorldTypeBuilder.DefineField("myGreeting", typeof(String), 
	                                                FieldAttributes.Public);
	      Type[] constructorArgs = { typeof(String) };
	      ConstructorBuilder myConstructorBuilder = 
	         helloWorldTypeBuilder.DefineConstructor(MethodAttributes.Public, 
	                            CallingConventions.Standard, constructorArgs);
	      ILGenerator myConstructorIL = myConstructorBuilder.GetILGenerator();
	      myConstructorIL.Emit(OpCodes.Ldarg_0);
	      myConstructorIL.Emit(OpCodes.Ldarg_1);
	      myConstructorIL.Emit(OpCodes.Stfld, myGreetingField);
	      myConstructorIL.Emit(OpCodes.Ret);
	      helloWorldTypeBuilder.AddInterfaceImplementation(typeof(IHello));
	      MethodBuilder myMethodBuilder =
	         helloWorldTypeBuilder.DefineMethod("SayHello",
	                              MethodAttributes.Public|MethodAttributes.Virtual,
	                              null,
	                              null);
	      ILGenerator myMethodIL = myMethodBuilder.GetILGenerator();
	      myMethodIL.EmitWriteLine(myGreetingField);
	      myMethodIL.Emit(OpCodes.Ret);
	     MethodInfo sayHelloMethod = typeof(IHello).GetMethod("SayHello");
	     helloWorldTypeBuilder.DefineMethodOverride(myMethodBuilder,sayHelloMethod);
	      return(helloWorldTypeBuilder.CreateType());
	   }
	}

snippet openfilewindowsstore

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/openfilewindowsstore/app.xaml.cs

	using System;
	using System.Collections.Generic;
	using System.IO;
	using System.Linq;
	using System.Runtime.InteropServices.WindowsRuntime;
	using Windows.ApplicationModel;
	using Windows.ApplicationModel.Activation;
	using Windows.Foundation;
	using Windows.Foundation.Collections;
	using Windows.UI.Xaml;
	using Windows.UI.Xaml.Controls;
	using Windows.UI.Xaml.Controls.Primitives;
	using Windows.UI.Xaml.Data;
	using Windows.UI.Xaml.Input;
	using Windows.UI.Xaml.Media;
	using Windows.UI.Xaml.Navigation;
	
	
	namespace OpenFileWindowsStore
	{
	    sealed partial class App : Application
	    {
	        public App()
	        {
	            this.InitializeComponent();
	            this.Suspending += OnSuspending;
	        }
	
	        protected override void OnLaunched(LaunchActivatedEventArgs e)
	        {
	
	#if DEBUG
	            if (System.Diagnostics.Debugger.IsAttached)
	            {
	                this.DebugSettings.EnableFrameRateCounter = true;
	            }
	#endif
	
	            Frame rootFrame = Window.Current.Content as Frame;
	
	            if (rootFrame == null)
	            {
	                rootFrame = new Frame();
	                rootFrame.Language = Windows.Globalization.ApplicationLanguages.Languages[0];
	
	                rootFrame.NavigationFailed += OnNavigationFailed;
	
	                if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)
	                {
	                }
	
	                Window.Current.Content = rootFrame;
	            }
	
	            if (rootFrame.Content == null)
	            {
	                rootFrame.Navigate(typeof(MainPage), e.Arguments);
	            }
	            Window.Current.Activate();
	        }
	
	        void OnNavigationFailed(object sender, NavigationFailedEventArgs e)
	        {
	            throw new Exception("Failed to load Page " + e.SourcePageType.FullName);
	        }
	
	        private void OnSuspending(object sender, SuspendingEventArgs e)
	        {
	            var deferral = e.SuspendingOperation.GetDeferral();
	            deferral.Complete();
	        }
	    }
	}

snippet codedomhelloworldsample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDomHelloWorldSample/source1.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.IO;
	using Microsoft.CSharp;
	
	public class CodeDOMSample
	{
	    public static void Main()
	    {
	        string sourceFile;
	        int dotSpot;
	
	        CodeCompileUnit cu = new CodeCompileUnit();
	        sourceFile = GenerateCSharpCode(cu);
	        Console.WriteLine("CS source file: {0}", sourceFile);
	        dotSpot = sourceFile.IndexOf('.');
	        CompileCSharpCode(sourceFile, sourceFile.Substring(0, dotSpot) + ".exe");
	    }
	
	    public static string GenerateCSharpCode(CodeCompileUnit compileunit)
	    {
	        CSharpCodeProvider provider = new CSharpCodeProvider();
	
	        string sourceFile;
	        if (provider.FileExtension[0] == '.')
	        {
	            sourceFile = "HelloWorld" + provider.FileExtension;
	        }
	        else
	        {
	            sourceFile = "HelloWorld." + provider.FileExtension;
	        }
	
	        IndentedTextWriter tw = new IndentedTextWriter(
	                new StreamWriter(sourceFile, false), "    ");
	
	        provider.GenerateCodeFromCompileUnit(compileunit, tw,
	               new CodeGeneratorOptions());
	
	        tw.Close();
	
	        return sourceFile;
	    }
	
	    public static bool CompileCSharpCode(string sourceFile,
	        string exeFile)
	    {
	        CSharpCodeProvider provider = new CSharpCodeProvider();
	
	        CompilerParameters cp = new CompilerParameters();
	
	        cp.ReferencedAssemblies.Add( "System.dll" );
	
	        cp.GenerateExecutable = true;
	
	        cp.OutputAssembly = exeFile;
	
	        cp.GenerateInMemory = false;
	
	        CompilerResults cr = provider.CompileAssemblyFromFile(cp, sourceFile);
	
	        if (cr.Errors.Count > 0)
	        {
	            Console.WriteLine("Errors building {0} into {1}",
	                sourceFile, cr.PathToAssembly);
	            foreach(CompilerError ce in cr.Errors)
	            {
	                Console.WriteLine("  {0}", ce.ToString());
	                Console.WriteLine();
	            }
	        }
	        else
	        {
	            Console.WriteLine("Source {0} built into {1} successfully.",
	                sourceFile, cr.PathToAssembly);
	        }
	
	        if (cr.Errors.Count > 0)
	        {
	            return false;
	        }
	        else
	        {
	            return true;
	        }
	    }
	}

snippet emit_argiterator

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Emit_ArgIterator/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	class Example
	{
	    static void Main() 
	    {
	        string name = "InMemory";
	
	        AssemblyBuilder asmBldr = 
	           AppDomain.CurrentDomain.DefineDynamicAssembly(new AssemblyName(name), 
	              AssemblyBuilderAccess.Run);
	        ModuleBuilder modBldr = asmBldr.DefineDynamicModule(name); 
	
	        TypeBuilder tb = modBldr.DefineType("DemoVararg");
	
	        MethodBuilder mb1 = tb.DefineMethod("VarargMethod",
	            MethodAttributes.Public | MethodAttributes.Static,
	            CallingConventions.VarArgs,
	            null, 
	            new Type[] { typeof(string) });
	
	        ILGenerator il1 = mb1.GetILGenerator();
	
	        LocalBuilder locAi = il1.DeclareLocal(typeof(ArgIterator));
	        LocalBuilder locNext = il1.DeclareLocal(typeof(bool));
	
	        Label labelCheckCondition = il1.DefineLabel();
	        Label labelNext = il1.DefineLabel();
	
	        il1.Emit(OpCodes.Ldarg_0);
	        il1.Emit(OpCodes.Call, typeof(Console).GetMethod("Write", new Type[] { typeof(string) }));
	
	        il1.Emit(OpCodes.Ldloca_S, locAi);
	
	        il1.Emit(OpCodes.Arglist);
	        il1.Emit(OpCodes.Call, typeof(ArgIterator).GetConstructor(new Type[] { typeof(RuntimeArgumentHandle) }));
	
	        il1.Emit(OpCodes.Br_S, labelCheckCondition);
	
	        il1.MarkLabel(labelNext);
	        il1.Emit(OpCodes.Ldloca_S, locAi);
	        il1.Emit(OpCodes.Call, typeof(ArgIterator).GetMethod("GetNextArg", Type.EmptyTypes));
	        il1.Emit(OpCodes.Call, typeof(TypedReference).GetMethod("ToObject"));
	        il1.Emit(OpCodes.Call, typeof(Console).GetMethod("Write", new Type[] { typeof(object) }));
	
	        il1.MarkLabel(labelCheckCondition);
	        il1.Emit(OpCodes.Ldloca_S, locAi);
	        il1.Emit(OpCodes.Call, typeof(ArgIterator).GetMethod("GetRemainingCount"));
	
	        il1.Emit(OpCodes.Ldc_I4_0);
	        il1.Emit(OpCodes.Cgt);
	        il1.Emit(OpCodes.Stloc_1);
	        il1.Emit(OpCodes.Ldloc_1);
	        il1.Emit(OpCodes.Brtrue_S, labelNext);
	
	        il1.Emit(OpCodes.Ret);
	
	        MethodBuilder mb2 = tb.DefineMethod("CallVarargMethod",
	            MethodAttributes.Public | MethodAttributes.Static,
	            CallingConventions.Standard,
	            typeof(void), Type.EmptyTypes);
	        ILGenerator il2 = mb2.GetILGenerator();
	
	        il2.Emit(OpCodes.Ldstr, "Hello ");
	        il2.Emit(OpCodes.Ldstr, "world ");
	        il2.Emit(OpCodes.Ldc_I4, 2006);
	
	        il2.EmitCall(OpCodes.Call, mb1, new Type[] { typeof(string), typeof(int) });
	
	        il2.Emit(OpCodes.Ret);
	
	        Type type = tb.CreateType();
	        type.GetMethod("CallVarargMethod").Invoke(null, null);
	    }
	}
	
	/* This code example produces the following output:
	
	Hello world 2006
	 */
	
	

snippet diagnostics_consoletracelistener

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/program.cs

	#define TRACE
	using System;
	using System.Diagnostics;
	
	public class ConsoleTraceSample
	{
	
	    public static void WriteEnvironmentInfoToTrace()
	    {
	
	        string methodName = "WriteEnvironmentInfoToTrace";
	
	        Trace.Indent();
	        Trace.WriteLine(DateTime.Now.ToString() + " - Start of " + methodName);
	        Trace.Indent();
	
	        Trace.WriteLine("Operating system: " + System.Environment.OSVersion.ToString());
	        Trace.WriteLine("Computer name: " + System.Environment.MachineName);
	        Trace.WriteLine("User name: " + System.Environment.UserName);
	        Trace.WriteLine("CLR runtime version: " + System.Environment.Version.ToString());
	        Trace.WriteLine("Command line: " + System.Environment.CommandLine);
	
	        Trace.WriteLine("Number of configured trace listeners = " + Trace.Listeners.Count.ToString());
	
	        foreach (TraceListener tl in Trace.Listeners)
	        {
	            Trace.WriteLine("Trace listener name = " + tl.Name);
	            Trace.WriteLine("               type = " + tl.GetType().ToString());
	        }
	
	        Trace.Unindent();
	        Trace.WriteLine(DateTime.Now.ToString() + " - End of " + methodName);
	        Trace.Unindent();
	
	    }
	
	    public static void Main(string[] CmdArgs)
	    {
	
	        Trace.WriteLine(DateTime.Now.ToString()+" - Start of Main");
	
	        ConsoleTraceListener consoleTracer;
	
	        if ((CmdArgs.Length>0)&&(CmdArgs[0].ToString().ToLower().Equals("/stderr")))
	        {
	            consoleTracer = new ConsoleTraceListener(true);
	        }
	        else
	        {
	            consoleTracer = new ConsoleTraceListener();
	        }
	        consoleTracer.Name = "mainConsoleTracer";
	
	        consoleTracer.WriteLine(DateTime.Now.ToString()+" ["+consoleTracer.Name+"] - Starting output to trace listener.");
	
	        Trace.Listeners.Add(consoleTracer);
	
	        WriteEnvironmentInfoToTrace();
	
	        consoleTracer.WriteLine(DateTime.Now.ToString()+" ["+consoleTracer.Name+"] - Ending output to trace listener.");
	
	        Trace.Flush();
	        Trace.Listeners.Remove(consoleTracer);
	        consoleTracer.Close();
	
	        Trace.WriteLine(DateTime.Now.ToString()+" - End of Main");
	
	        Trace.Close();
	
	    }
	
	}

snippet list`1_class

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>();
	
	        Console.WriteLine("\nCapacity: {0}", dinosaurs.Capacity);
	
	        dinosaurs.Add("Tyrannosaurus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("Mamenchisaurus");
	        dinosaurs.Add("Deinonychus");
	        dinosaurs.Add("Compsognathus");
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\nCapacity: {0}", dinosaurs.Capacity);
	        Console.WriteLine("Count: {0}", dinosaurs.Count);
	
	        Console.WriteLine("\nContains(\"Deinonychus\"): {0}",
	            dinosaurs.Contains("Deinonychus"));
	
	        Console.WriteLine("\nInsert(2, \"Compsognathus\")");
	        dinosaurs.Insert(2, "Compsognathus");
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        Console.WriteLine("\ndinosaurs[3]: {0}", dinosaurs[3]);
	
	        Console.WriteLine("\nRemove(\"Compsognathus\")");
	        dinosaurs.Remove("Compsognathus");
	
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	
	        dinosaurs.TrimExcess();
	        Console.WriteLine("\nTrimExcess()");
	        Console.WriteLine("Capacity: {0}", dinosaurs.Capacity);
	        Console.WriteLine("Count: {0}", dinosaurs.Count);
	
	        dinosaurs.Clear();
	        Console.WriteLine("\nClear()");
	        Console.WriteLine("Capacity: {0}", dinosaurs.Capacity);
	        Console.WriteLine("Count: {0}", dinosaurs.Count);
	
	        /* This code example produces the following output:
	
	        Capacity: 0
	
	        Tyrannosaurus
	        Amargasaurus
	        Mamenchisaurus
	        Deinonychus
	        Compsognathus
	
	        Capacity: 8
	        Count: 5
	
	        Contains("Deinonychus"): True
	
	        Insert(2, "Compsognathus")
	
	        Tyrannosaurus
	        Amargasaurus
	        Compsognathus
	        Mamenchisaurus
	        Deinonychus
	        Compsognathus
	
	        dinosaurs[3]: Mamenchisaurus
	
	        Remove("Compsognathus")
	
	        Tyrannosaurus
	        Amargasaurus
	        Mamenchisaurus
	        Deinonychus
	        Compsognathus
	
	        TrimExcess()
	        Capacity: 5
	        Count: 5
	
	        Clear()
	        Capacity: 5
	        Count: 0
	         */
	    }
	}
	

snippet projectn_reflection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/property1.cs

	using System;
	using System.Reflection;
	
	public class Page
	{ }
	
	public class MainPage
	{
	   static MainPage()
	   {
	      outputBlock = new TextBlock();
	      outputBlock.Text = "";
	   }
	
	   internal static TextBlock outputBlock;
	}
	
	internal class TextBlock
	{
	   private String s;
	   
	   public String Text 
	   {
	      get { return s; }
	      set { s = value; }
	   }
	}
	
	namespace LibraryApplications
	{
	   public sealed class Example
	   {
	      public void Execute()
	      {
	         TextBlock outputBlock = MainPage.outputBlock;
	         Type t = typeof(Book);
	         Object obj = Activator.CreateInstance(t, new Object[] { "A Tale of 2 Cities", "Charles Dickens", "" });
	         outputBlock.Text += "\n\n\n";
	         foreach (var p in t.GetRuntimeProperties())
	         {
	            outputBlock.Text += String.Format("{0}: {1}\n", p.Name, p.GetValue(obj));
	         }
	      }
	   }
	
	   public class Book
	   {
	      private string bookTitle = "";
	      private string bookAuthor = "";
	      private string bookISBN = "";
	
	      public Book(string title, string author, string isbn)
	      {
	         bookTitle = title;
	         bookAuthor = author;
	         bookISBN = isbn;
	      }
	
	      public string Title
	      {
	         get { return bookTitle; }
	         set { bookTitle = value; }
	      }
	
	      public string Author
	      {
	         get { return bookAuthor; }
	         set { bookTitle = value; }
	      }
	
	      public string ISBN
	      {
	         get { return bookISBN; }
	      }
	
	      public override string ToString()
	      {
	         return String.Format("{0}, {1}", Author, Title);
	      }
	   }
	}
	
	public class TextUtilities
	{
	   public static string ConvertNumberToWord(int value)
	   {
	      switch (value)
	      {
	         case 1:
	            return "One";
	         case 2:
	            return "Two";
	         case 3:
	            return "Three";
	         case 4:
	            return "Four";
	         case 5:
	            return "Five";
	         case 6:
	            return "Six";
	         case 7:
	            return "Seven";
	         case 8:
	            return "Eight";
	         case 9:
	            return "Nine";
	         default:
	            return value.ToString();
	      }
	   }
	}
snippet codedomexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/source3.cs

	using System;
	using System.IO;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using Microsoft.CSharp;
	
	class Example
	{
	    public static void Main()
	    {
	        string sourcefile;
	        string exefile;
	
	        CodeCompileUnit codeUnit = new CodeCompileUnit();
	        sourcefile = GenerateCSharpCode(codeUnit);
	        exefile = sourcefile.Substring(0, sourcefile.LastIndexOf('.')) + ".exe";
	        Console.WriteLine("outfile: {0}", exefile);
	        CompileCSharpCode(sourcefile, exefile);
	
	    }
	
	    public static string GenerateCSharpCode(CodeCompileUnit compileunit)
	    {
	        CSharpCodeProvider provider = new CSharpCodeProvider();
	
	        string sourceFile;
	        if (provider.FileExtension[0] == '.')
	        {
	           sourceFile = "HelloWorld" + provider.FileExtension;
	        }
	        else
	        {
	           sourceFile = "HelloWorld." + provider.FileExtension;
	        }
	
	        using (StreamWriter sw = new StreamWriter(sourceFile, false))
	        {
	            IndentedTextWriter tw = new IndentedTextWriter(sw, "    ");
	
	            provider.GenerateCodeFromCompileUnit(compileunit, tw,
	                new CodeGeneratorOptions());
	
	            tw.Close();
	        }
	
	        return sourceFile;
	    }
	
	    public static bool CompileCSharpCode(string sourceFile, string exeFile)
	    {
	        CSharpCodeProvider provider = new CSharpCodeProvider();
	
	        CompilerParameters cp = new CompilerParameters();
	
	        cp.ReferencedAssemblies.Add( "System.dll" );
	
	        cp.GenerateExecutable = true;
	
	        cp.OutputAssembly = exeFile;
	
	        cp.GenerateInMemory = false;
	
	        CompilerResults cr = provider.CompileAssemblyFromFile(cp, sourceFile);
	
	       if (cr.Errors.Count > 0)
	       {
	            Console.WriteLine("Errors building {0} into {1}",
	                sourceFile, cr.PathToAssembly);
	            foreach (CompilerError ce in cr.Errors)
	            {
	                Console.WriteLine("  {0}", ce.ToString());
	                Console.WriteLine();
	            }
	        }
	        else
	        {
	            Console.WriteLine("Source {0} built into {1} successfully.",
	                sourceFile, cr.PathToAssembly);
	        }
	
	        if (cr.Errors.Count > 0)
	        {
	            return false;
	        }
	        else
	        {
	            return true;
	        }
	    }
	}

snippet icomparable`1_example

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/IComparable`1_Example/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Temperature : IComparable<Temperature>
	{
	    public int CompareTo(Temperature other)
	    {
	        if (other == null) return 1;
	        
	        return m_value.CompareTo(other.m_value);
	    }
	
	    public static bool operator >  (Temperature operand1, Temperature operand2)
	    {
	       return operand1.CompareTo(operand2) == 1;
	    }
	    
	    public static bool operator <  (Temperature operand1, Temperature operand2)
	    {
	       return operand1.CompareTo(operand2) == -1;
	    }
	
	    public static bool operator >=  (Temperature operand1, Temperature operand2)
	    {
	       return operand1.CompareTo(operand2) >= 0;
	    }
	    
	    public static bool operator <=  (Temperature operand1, Temperature operand2)
	    {
	       return operand1.CompareTo(operand2) <= 0;
	    }
	
	    protected double m_value = 0.0;
	
	    public double Celsius    
	    {
	        get
	        {
	            return m_value - 273.15;
	        }
	    }
	
	    public double Kelvin    
	    {
	        get
	        {
	            return m_value;
	        }
	        set
	        {
	            if (value < 0.0)
	            {
	                throw new ArgumentException("Temperature cannot be less than absolute zero.");
	            }
	            else
	            {
	                m_value = value;
	            }
	        }
	    }
	
	    public Temperature(double kelvins)
	    {
	        this.Kelvin = kelvins;
	    }
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        SortedList<Temperature, string> temps = 
	            new SortedList<Temperature, string>();
	
	        temps.Add(new Temperature(2017.15), "Boiling point of Lead");
	        temps.Add(new Temperature(0), "Absolute zero");
	        temps.Add(new Temperature(273.15), "Freezing point of water");
	        temps.Add(new Temperature(5100.15), "Boiling point of Carbon");
	        temps.Add(new Temperature(373.15), "Boiling point of water");
	        temps.Add(new Temperature(600.65), "Melting point of Lead");
	
	        foreach( KeyValuePair<Temperature, string> kvp in temps )
	        {
	            Console.WriteLine("{0} is {1} degrees Celsius.", kvp.Value, kvp.Key.Celsius);
	        }
	    }
	}
	/* This example displays the following output:
	      Absolute zero is -273.15 degrees Celsius.
	      Freezing point of water is 0 degrees Celsius.
	      Boiling point of water is 100 degrees Celsius.
	      Melting point of Lead is 327.5 degrees Celsius.
	      Boiling point of Lead is 1744 degrees Celsius.
	      Boiling point of Carbon is 4827 degrees Celsius.
	*/
	
	
	

snippet cryptography_des_create_memory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_DES_Create_Memory/memoryexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class DESSample
	{
	    static void Main()
	    {
	        try
	        {
	            DES DESalg = DES.Create();
	
	            string sData = "Here is some data to encrypt.";
	
	            byte[] Data = EncryptTextToMemory(sData, DESalg.Key, DESalg.IV);
	
	            string Final = DecryptTextFromMemory(Data, DESalg.Key, DESalg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static byte[] EncryptTextToMemory(string Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream mStream = new MemoryStream();
	
	            DES DESalg = DES.Create();
	
	            CryptoStream cStream = new CryptoStream(mStream, 
	                DESalg.CreateEncryptor(Key, IV), 
	                CryptoStreamMode.Write);
	
	            byte[] toEncrypt = new ASCIIEncoding().GetBytes(Data);
	
	            cStream.Write(toEncrypt, 0, toEncrypt.Length);
	            cStream.FlushFinalBlock();
	        
	            byte[] ret = mStream.ToArray();
	
	            cStream.Close();
	            mStream.Close();
	
	            return ret;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	
	    }
	
	    public static string DecryptTextFromMemory(byte[] Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream msDecrypt = new MemoryStream(Data);
	
	            DES DESalg = DES.Create();
	
	            CryptoStream csDecrypt = new CryptoStream(msDecrypt, 
	                DESalg.CreateDecryptor(Key, IV), 
	                CryptoStreamMode.Read);
	
	            byte[] fromEncrypt = new byte[Data.Length];
	
	            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);
	
	            return new ASCIIEncoding().GetString(fromEncrypt);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}

snippet cryptography_rc2_create_memory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RC2_Create_Memory/memoryexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class RC2Sample
	{
	    static void Main()
	    {
	        try
	        {
	            RC2 RC2alg = RC2.Create();
	
	            string sData = "Here is some data to encrypt.";
	
	            byte[] Data = EncryptTextToMemory(sData, RC2alg.Key, RC2alg.IV);
	
	            string Final = DecryptTextFromMemory(Data, RC2alg.Key, RC2alg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static byte[] EncryptTextToMemory(string Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream mStream = new MemoryStream();
	
	            RC2 RC2alg = RC2.Create();
	
	            CryptoStream cStream = new CryptoStream(mStream, 
	                RC2alg.CreateEncryptor(Key, IV), 
	                CryptoStreamMode.Write);
	
	            byte[] toEncrypt = new ASCIIEncoding().GetBytes(Data);
	
	            cStream.Write(toEncrypt, 0, toEncrypt.Length);
	            cStream.FlushFinalBlock();
	        
	            byte[] ret = mStream.ToArray();
	
	            cStream.Close();
	            mStream.Close();
	
	            return ret;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	
	    }
	
	    public static string DecryptTextFromMemory(byte[] Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream msDecrypt = new MemoryStream(Data);
	
	            RC2 RC2alg = RC2.Create();
	
	            CryptoStream csDecrypt = new CryptoStream(msDecrypt, 
	                RC2alg.CreateDecryptor(Key, IV), 
	                CryptoStreamMode.Read);
	
	            byte[] fromEncrypt = new byte[Data.Length];
	
	            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);
	
	            return new ASCIIEncoding().GetString(fromEncrypt);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}

snippet asyncdesignpattern

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncDesignPattern/AsyncDelegateNoStateObject.cs

	/*
	The following example demonstrates using asynchronous methods to
	get Domain Name System information for the specified host computers.
	This example uses a delegate to obtain the results of each asynchronous 
	operation.
	*/
	
	using System;
	using System.Net;
	using System.Net.Sockets;
	using System.Threading;
	using System.Collections.Specialized;
	using System.Collections;
	
	namespace Examples.AdvancedProgramming.AsynchronousOperations
	{
	    public class UseDelegateForAsyncCallback
	    {
	        static int requestCounter;
	        static ArrayList hostData = new ArrayList();
	        static StringCollection hostNames = new StringCollection();
	        static void UpdateUserInterface()
	        {
	            Console.WriteLine("{0} requests remaining.", requestCounter);
	        }
	        public static void Main()
	        {
	            AsyncCallback callBack = new AsyncCallback(ProcessDnsInformation);
	            string host;
	            do
	            {
	                Console.Write(" Enter the name of a host computer or <enter> to finish: ");
	                host = Console.ReadLine();
	                if (host.Length > 0)
	                {
	                    Interlocked.Increment(ref requestCounter);
	                    Dns.BeginGetHostEntry(host, callBack, host);
	                 }
	            } while (host.Length > 0);
	            while (requestCounter > 0)
	            {
	                UpdateUserInterface();
	            }
	            for (int i = 0; i< hostNames.Count; i++)
	            {
	                object data = hostData [i];
	                string message = data as string;
	                if (message != null)
	                {
	                    Console.WriteLine("Request for {0} returned message: {1}", 
	                        hostNames[i], message);
	                    continue;
	                }
	                IPHostEntry h = (IPHostEntry) data;
	                string[] aliases = h.Aliases;
	                IPAddress[] addresses = h.AddressList;
	                if (aliases.Length > 0)
	                {
	                    Console.WriteLine("Aliases for {0}", hostNames[i]);
	                    for (int j = 0; j < aliases.Length; j++)
	                    {
	                        Console.WriteLine("{0}", aliases[j]);
	                    }
	                }
	                if (addresses.Length > 0)
	                {
	                    Console.WriteLine("Addresses for {0}", hostNames[i]);
	                    for (int k = 0; k < addresses.Length; k++)
	                    {
	                        Console.WriteLine("{0}",addresses[k].ToString());
	                    }
	                }
	            }
	       }
	
	        static void ProcessDnsInformation(IAsyncResult result)
	        {
	            string hostName = (string) result.AsyncState;
	            hostNames.Add(hostName);
	            try 
	            {
	                IPHostEntry host = Dns.EndGetHostEntry(result);
	                hostData.Add(host);
	            }
	            catch (SocketException e)
	            {
	                hostData.Add(e.Message);
	            }
	            finally 
	            {
	                Interlocked.Decrement(ref requestCounter);
	            }
	        }
	    }
	}
	

snippet installercollection_add

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallerCollection_Add/installercollection_add.cs

	
	/*
	   The following example demonstrates the Add(Installer)
	   method of the 'InstallerCollection' class. This example provides
	   an implementation similar to that of 'InstallUtil.exe'. It installs
	   assemblies with the options preceding that particular assembly.
	   If an option is not specified for an assembly the previous assemblies
	   options are taken if there is a previous assembly in the list. If the
	   '/u' or '/uninstall' option is specified then the assemblies are uninstalled.
	   If the '/?' or '/help' option is provided then the help information is
	  displayed to the console.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Collections;
	using System.Configuration.Install;
	using System.IO;
	
	public class InstallerCollection_Add
	{
	   public static void Main(String[] args)
	   {
	      ArrayList options = new ArrayList();
	      String myOption;
	      bool toUnInstall = false;
	      bool toPrintHelp = false;
	      TransactedInstaller myTransactedInstaller = new TransactedInstaller();
	      AssemblyInstaller myAssemblyInstaller;
	      InstallContext myInstallContext;
	
	      try
	      {
	         for(int i = 0; i < args.Length; i++)
	         {
	            if(args[i].StartsWith("/") || args[i].StartsWith("-"))
	            {
	               myOption = args[i].Substring(1);
	               if(String.Compare(myOption, "u", true) == 0 ||
	                  String.Compare(myOption, "uninstall", true) == 0)
	               {
	                  toUnInstall = true;
	                  continue;
	               }
	               if(String.Compare(myOption, "?", true) == 0 ||
	                  String.Compare(myOption, "help", true) == 0)
	               {
	                  toPrintHelp = true;
	                  continue;
	               }
	               options.Add(myOption);
	            }
	            else
	            {
	               if(!File.Exists(args[i]))
	               {
	                  Console.WriteLine(" Error : {0} - Assembly file doesn't exist.", args[i]);
	                  return;
	               }
	               myAssemblyInstaller = new AssemblyInstaller(args[i],
	                  (string[]) options.ToArray(typeof(string)));
	               myTransactedInstaller.Installers.Add(myAssemblyInstaller);
	            }
	         }
	         if(toPrintHelp || myTransactedInstaller.Installers.Count == 0)
	         {
	            PrintHelpMessage();
	            return;
	         }
	
	         myInstallContext =
	            new InstallContext("Install.log",
	            (string[]) options.ToArray(typeof(string)));
	         myTransactedInstaller.Context = myInstallContext;
	
	         if(!toUnInstall)
	            myTransactedInstaller.Install(new Hashtable());
	         else
	            myTransactedInstaller.Uninstall(null);
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine(" Exception raised : {0}", e.Message);
	      }
	   }
	
	   public static void PrintHelpMessage()
	   {
	      Console.WriteLine("Usage : InstallerCollection_Add [/u | /uninstall] [option [...]] assembly" +
	         "[[option [...]] assembly] [...]]");
	      Console.WriteLine("InstallerCollection_Add executes the installers in each of" +
	         " the given assembly. If /u or /uninstall option" +
	         " is given it uninstalls the assemblies.");
	   }
	}
snippet assemblyname_setpublickey

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyName_SetPublicKey/assemblyname_setpublickey.cs

	  
	/* 
	   The following example demonstrates the 'SetPublicKey(byte[])' and the
	   'SetPublicKeyToken(byte[])' methods of the 'AssemblyName' class. Creates
	   a dynamic assembly named 'MyAssembly' with a module named 'MyModule' and
	   a type within the module named 'MyType'. The type 'MyType' has a single
	   method called 'Main' which is also the entry point to the assembly. The
	   creation of the dynamic assembly is carried out by the method called
	   'MakeAssembly'. After the assembly is created with the help of 'MakeAssembly'
	   the assemblies currently loaded are found and the dynamic assembly that we
	   have created is searched for, which is displayed to the console. The dynamic
	   assembly is also saved to a file named 'MyAssembly.exe'. The assembly is
	   provided with a strong name. This is done by getting the public key and 
	   the public key token from the 'KeyPair.snk' (private and public key file).
	   The public key is stored in 'PublicKey.snk' and the public key token is
	   stored in 'PublicKeyToken.snk' with the help of the tool named 'sn.exe'.
	   
	   Note : Running 'MyAssembly.exe' with this example does not display 'Hello World!' 
	          since this assembly has been stongly signed.
	*/
	using System;
	using System.Reflection;
	using System.Threading;
	using System.IO;
	using System.Globalization;
	using System.Reflection.Emit;
	using System.Configuration.Assemblies;
	using System.Text;
	
	public class AssemblyName_CodeBase
	{
	   public static void MakeAssembly(AssemblyName myAssemblyName, string fileName)
	   {
	      AssemblyBuilder myAssemblyBuilder = Thread.GetDomain().DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("MyModule", fileName);
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("MyType");
	      MethodBuilder myMethodBuilder = myTypeBuilder.DefineMethod("Main", MethodAttributes.Public | MethodAttributes.HideBySig |
	         MethodAttributes.Static, typeof(void), null);
	      ILGenerator myILGenerator = myMethodBuilder.GetILGenerator();
	      myILGenerator.EmitWriteLine("Hello World!");
	      myILGenerator.Emit(OpCodes.Ret);
	      myTypeBuilder.CreateType();
	      myAssemblyBuilder.SetEntryPoint(myMethodBuilder);
	      myAssemblyBuilder.Save(fileName);
	   }
	
	   public static void Main()
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.CodeBase = Directory.GetCurrentDirectory();
	      myAssemblyName.CultureInfo = new CultureInfo("en-US");
	      myAssemblyName.HashAlgorithm = AssemblyHashAlgorithm.SHA1;
	      myAssemblyName.VersionCompatibility = AssemblyVersionCompatibility.SameProcess;
	      myAssemblyName.Flags = AssemblyNameFlags.PublicKey;
	      FileStream publicKeyStream = File.Open("PublicKey.snk", FileMode.Open);
	      byte[] publicKey = new byte[publicKeyStream.Length];
	      publicKeyStream.Read(publicKey, 0, (int)publicKeyStream.Length);
	      myAssemblyName.SetPublicKey(publicKey);
	      FileStream publicKeyTokenStream = File.Open("PublicKeyToken.snk", FileMode.Open);
	      byte[] publicKeyToken = new Byte[publicKeyTokenStream.Length];
	      publicKeyTokenStream.Read(publicKeyToken, 0, (int)publicKeyToken.Length);
	      myAssemblyName.SetPublicKeyToken(publicKeyToken);
	      myAssemblyName.Name = "MyAssembly";
	      myAssemblyName.Version = new Version("1.0.0.2001");
	      MakeAssembly(myAssemblyName, "MyAssembly.exe");
	      
	      Assembly[] myAssemblies = Thread.GetDomain().GetAssemblies();
	
	      Assembly myAssembly = null;
	      for(int i = 0; i < myAssemblies.Length; i++)
	         if(String.Compare(myAssemblies[i].GetName().Name, "MyAssembly") == 0)
	            myAssembly = myAssemblies[i];
	  
	      if(myAssembly != null)
	      {
	         Console.WriteLine("\nDisplaying the full assembly name\n");
	         string assemblyName = myAssembly.GetName().FullName;
	         Console.WriteLine(assemblyName);
	         Console.WriteLine("\nDisplaying the public key for the assembly\n");
	         byte[] publicKeyBytes = myAssembly.GetName().GetPublicKey();
	         Console.WriteLine(Encoding.ASCII.GetString(publicKeyBytes));
	         Console.WriteLine("\nDisplaying the public key token for the assembly\n");
	         byte[] publicKeyTokenBytes = myAssembly.GetName().GetPublicKeyToken();
	         Console.WriteLine(Encoding.ASCII.GetString(publicKeyTokenBytes));
	      }
	   }
	}

snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/structures.cs

	using System;
	using System.Runtime.InteropServices;
	
	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
	public struct MyPerson
	{
	    public string first;
	    public string last;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct MyPerson2
	{
	    public IntPtr person;
	    public int age;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct MyPerson3
	{
	    public MyPerson person;
	    public int age;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct MyArrayStruct
	{
	    public bool flag;
	
	    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 3)]
	    public int[] vals;
	}
	
	public class LibWrap
	{
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern int TestStructInStruct(ref MyPerson2 person2);
	
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern int TestStructInStruct3(MyPerson3 person3);
	
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern int TestArrayInStruct(ref MyArrayStruct myStruct);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        MyPerson personName;
	        personName.first = "Mark";
	        personName.last = "Lee";
	
	        MyPerson2 personAll;
	        personAll.age = 30;
	
	        IntPtr buffer = Marshal.AllocCoTaskMem(Marshal.SizeOf(personName));
	        Marshal.StructureToPtr(personName, buffer, false);
	
	        personAll.person = buffer;
	
	        Console.WriteLine("\nPerson before call:");
	        Console.WriteLine("first = {0}, last = {1}, age = {2}",
	            personName.first, personName.last, personAll.age);
	
	        int res = LibWrap.TestStructInStruct(ref personAll);
	
	        MyPerson personRes =
	            (MyPerson)Marshal.PtrToStructure(personAll.person,
	            typeof(MyPerson));
	
	        Marshal.FreeCoTaskMem(buffer);
	
	        Console.WriteLine("Person after call:");
	        Console.WriteLine("first = {0}, last = {1}, age = {2}",
	            personRes.first, personRes.last, personAll.age);
	
	        MyPerson3 person3 = new MyPerson3();
	        person3.person.first = "John";
	        person3.person.last = "Evans";
	        person3.age = 27;
	        LibWrap.TestStructInStruct3(person3);
	
	        MyArrayStruct myStruct = new MyArrayStruct();
	
	        myStruct.flag = false;
	        myStruct.vals = new int[3];
	        myStruct.vals[0] = 1;
	        myStruct.vals[1] = 4;
	        myStruct.vals[2] = 9;
	
	        Console.WriteLine("\nStructure with array before call:");
	        Console.WriteLine(myStruct.flag);
	        Console.WriteLine("{0} {1} {2}", myStruct.vals[0],
	            myStruct.vals[1], myStruct.vals[2]);
	
	        LibWrap.TestArrayInStruct(ref myStruct);
	        Console.WriteLine("\nStructure with array after call:");
	        Console.WriteLine(myStruct.flag);
	        Console.WriteLine("{0} {1} {2}", myStruct.vals[0],
	            myStruct.vals[1], myStruct.vals[2]);
	    }
	}

snippet getcustomattributes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/ca4.cs

	using System;
	using System.Reflection;
	using System.Security;
	using System.Runtime.InteropServices;
	
	namespace CustAttrs4CS
	{
	
	    public enum UnmanagedType
	    {
	        User,
	        GDI,
	        Kernel,
	        Shell,
	        Networking,
	        Multimedia
	    }
	
	    public class UnmanagedAttribute : Attribute
	    {
	        protected UnmanagedType thisType;
	
	        public UnmanagedAttribute(UnmanagedType type)
	        {
	            thisType = type;
	        }
	
	        public UnmanagedType Win32Type
	        {
	            get { return thisType; }
	            set { thisType = Win32Type; }
	        }
	    }
	
	    public class Win32 {
	        [DllImport("user32.dll", CharSet = CharSet.Unicode)]
	        public static extern int MessageBox(int hWnd, String text,
	            String caption, uint type);
	    }
	
	    public class AClass {
	        [Obsolete("This method is obsolete. Use managed MsgBox instead.")]
	        [Unmanaged(UnmanagedType.User)]
	        public void Win32CallMethod()
	        {
	            Win32.MessageBox(0, "This is an unmanaged call.", "Caution!", 0);
	        }
	    }
	
	    class DemoClass {
	        static void Main(string[] args)
	            {
	            Type clsType = typeof(AClass);
	            MethodInfo mInfo = clsType.GetMethod("Win32CallMethod");
	            if (mInfo != null)
	            {
	                foreach(Attribute attr in
	                    Attribute.GetCustomAttributes(mInfo)) {
	                    if (attr.GetType() == typeof(ObsoleteAttribute))
	                    {
	                        Console.WriteLine("Method {0} is obsolete. " +
	                            "The message is:",
	                            mInfo.Name);
	                        Console.WriteLine("  \"{0}\"",
	                            ((ObsoleteAttribute)attr).Message);
	                    }
	
	                    else if (attr.GetType() == typeof(UnmanagedAttribute))
	                    {
	                        Console.WriteLine(
	                            "This method calls unmanaged code.");
	                        Console.WriteLine(
	                            String.Format("The Unmanaged attribute type is {0}.",
	                                          ((UnmanagedAttribute)attr).Win32Type));
	                        AClass myCls = new AClass();
	                        myCls.Win32CallMethod();
	                    }
	                }
	            }
	        }
	    }
	}
	
	/*
	
	This code example produces the following results.
	
	First, the compilation yields the warning, "...This method is
	obsolete. Use managed MsgBox instead."
	Second, execution yields a message box with a title of "Caution!"
	and message text of "This is an unmanaged call."
	Third, the following text is displayed in the console window:
	
	Method Win32CallMethod is obsolete. The message is:
	  "This method is obsolete. Use managed MsgBox instead."
	This method calls unmanaged code.
	The Unmanaged attribute type is User.
	
	*/
	

snippet cryptography_rsacsp_signdata3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RSACSP_SignData3/example.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class RSACSPSample
	{
	    static void Main()
	    {
	        try
	        {
	            ASCIIEncoding ByteConverter = new ASCIIEncoding();
	
	            byte[] dataBytes = ByteConverter.GetBytes("Here is some data to sign!");
	   
	            byte[] buffer = new byte[dataBytes.Length];
	
	            MemoryStream mStream = new MemoryStream(buffer);
	
	            mStream.Write(dataBytes, 0, dataBytes.Length);
	
	            mStream.Flush();
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            RSAParameters Key = RSAalg.ExportParameters(true);
	
	            byte[] signedData = HashAndSignBytes(mStream, Key);
	           
	
	            if(VerifySignedHash(dataBytes, signedData, Key))
	            {
	                Console.WriteLine("The data was verified.");
	            }
	            else
	            {
	                Console.WriteLine("The data does not match the signature.");
	            } 
	            
	            mStream.Close();
	
	        }
	        catch(ArgumentNullException)
	        {
	            Console.WriteLine("The data was not signed or verified");
	
	        }
	    }
	    public static byte[] HashAndSignBytes(Stream DataStream, RSAParameters Key)
	    {
	        try
	        { 
	            DataStream.Position = 0;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            RSAalg.ImportParameters(Key);
	
	            return RSAalg.SignData(DataStream, new SHA1CryptoServiceProvider());
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	            return null;
	        }
	    }
	
	    public static bool VerifySignedHash(byte[] DataToVerify, byte[] SignedData, RSAParameters Key)
	    {
	        try
	        {
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
	
	            RSAalg.ImportParameters(Key);
	
	            return RSAalg.VerifyData(DataToVerify, new SHA1CryptoServiceProvider(), SignedData); 
	
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	            return false;
	        }
	    }
	}
snippet convert_tobase64string

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/convert_tobase64string/tb64s.cs

	
	using System;
	class Sample 
	{
	    public static void Main() 
	    {
	    byte[] inArray  = new byte[256];
	    byte[] outArray = new byte[256];
	    string s2;
	    string s3;
	    string step1 = "1) The input is a byte array (inArray) of arbitrary data.";
	    string step2 = "2) Convert a subarray of the input data array to a base 64 string.";
	    string step3 = "3) Convert the entire input data array to a base 64 string.";
	    string step4 = "4) The two methods in steps 2 and 3 produce the same result: {0}";
	    string step5 = "5) Convert the base 64 string to an output byte array (outArray).";
	    string step6 = "6) The input and output arrays, inArray and outArray, are equal: {0}";
	    int x;
	    string nl = Environment.NewLine;
	    string ruler1a = "         1         2         3         4";
	    string ruler2a = "1234567890123456789012345678901234567890";
	    string ruler3a = "----+----+----+----+----+----+----+----+";
	    string ruler1b = "         5         6         7      ";
	    string ruler2b = "123456789012345678901234567890123456";
	    string ruler3b = "----+----+----+----+----+----+----+-";
	    string ruler   = String.Concat(ruler1a, ruler1b, nl, 
	                                   ruler2a, ruler2b, nl,
	                                   ruler3a, ruler3b, nl);
	
	
	    Console.WriteLine(step1);
	    Console.WriteLine();
	    for (x = 0; x < inArray.Length; x++)
	        {
	        inArray[x] = (byte)x;
	        Console.Write("{0:X2} ", inArray[x]);
	        if (((x+1)%20) == 0) Console.WriteLine();
	        }
	    Console.Write("{0}{0}", nl);
	
	
	    Console.WriteLine(step2);
	    s2 = Convert.ToBase64String(inArray, 0, inArray.Length, 
	                                Base64FormattingOptions.InsertLineBreaks);
	    Console.WriteLine("{0}{1}{2}{3}", nl, ruler, s2, nl);
	
	
	    Console.WriteLine(step3);
	    s3 = Convert.ToBase64String(inArray, Base64FormattingOptions.InsertLineBreaks);
	
	    Console.WriteLine(step4, s2.Equals(s3));
	
	    Console.WriteLine(step5);
	    outArray = Convert.FromBase64String(s2);
	
	   Console.WriteLine(step6, ArraysAreEqual(inArray, outArray));
	   }
	
	    public static bool ArraysAreEqual(byte[] a1, byte[] a2)
	    {
	    if (a1.Length != a2.Length) return false;
	    for (int i = 0; i < a1.Length; i++)
	        if (a1[i] != a2[i]) return false;
	    return true;
	    }
	}
	/*
	This example produces the following results:
	
	1) The input is a byte array (inArray) of arbitrary data.
	
	00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13
	14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27
	28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B
	3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F
	50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63
	64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77
	78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B
	8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F
	A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3
	B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7
	C8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB
	DC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF
	F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF
	
	2) Convert a subarray of the input data array to a base 64 string.
	
	         1         2         3         4         5         6         7
	1234567890123456789012345678901234567890123456789012345678901234567890123456
	----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-
	AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4
	OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx
	cnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq
	q6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj
	5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==
	
	3) Convert the entire input data array to a base 64 string.
	4) The two methods in steps 2 and 3 produce the same result: True
	5) Convert the base 64 string to an output byte array (outArray).
	6) The input and output arrays, inArray and outArray, are equal: True
	
	*/

snippet ilgenerator_beginfaultblock

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ILGenerator_BeginFaultBlock/ilgenerator_beginfaultblock.cs

	
	/*
	   The following program demonstrates the 'BeginFaultBlock()' method of 'ILGenerator'
	   class. Exception is raised by passing two integer values which are out of range,
	   the same is caught in the 'BeginExceptionBlock' which is non-filtered. First it
	   checks for the exception thrown in the 'BeginFaultBlock' and then emits the MSIL
	   instructions in 'BeginExceptFilterBlock'. 
	*/
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	
	public class ILGenerator_BeginFaultBlock
	{
	   public static Type AddType()
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "AdderExceptionAsm";
	
	      AppDomain myAppDomain = Thread.GetDomain();
	      AssemblyBuilder myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName,
	         AssemblyBuilderAccess.Run);
	
	      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("AdderExceptionMod");
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("Adder");
	      Type[] myAdderParams = new Type[] {typeof(int), typeof(int)};
	
	      MethodBuilder myMethodBuilder = myTypeBuilder.DefineMethod("DoAdd",MethodAttributes.Public |
	         MethodAttributes.Static,typeof(int),myAdderParams);
	      ILGenerator myAdderIL = myMethodBuilder.GetILGenerator();
	
	      ConstructorInfo myConstructorInfo = typeof(OverflowException).GetConstructor(
	         new Type[]{typeof(string)});
	      MethodInfo myExToStrMI = typeof(OverflowException).GetMethod("ToString");
	      MethodInfo myWriteLineMI = typeof(Console).GetMethod("WriteLine",new Type[]
	         {typeof(string),typeof(object)});
	
	      LocalBuilder myLocalBuilder1 = myAdderIL.DeclareLocal(typeof(int));
	      LocalBuilder myLocalBuilder2 = myAdderIL.DeclareLocal(typeof(OverflowException));
	
	      Label myFailedLabel = myAdderIL.DefineLabel();
	      Label myEndOfMethodLabel = myAdderIL.DefineLabel();
	
	      Label myLabel = myAdderIL.BeginExceptionBlock();
	
	      myAdderIL.Emit(OpCodes.Ldarg_0);
	      myAdderIL.Emit(OpCodes.Ldc_I4_S, 10);
	      myAdderIL.Emit(OpCodes.Bgt_S, myFailedLabel);
	
	      myAdderIL.Emit(OpCodes.Ldarg_1);
	      myAdderIL.Emit(OpCodes.Ldc_I4_S, 10);
	      myAdderIL.Emit(OpCodes.Bgt_S, myFailedLabel);
	
	      myAdderIL.Emit(OpCodes.Ldarg_0);
	      myAdderIL.Emit(OpCodes.Ldarg_1);
	      myAdderIL.Emit(OpCodes.Add_Ovf_Un);
	      myAdderIL.Emit(OpCodes.Stloc_S, myLocalBuilder1);
	      myAdderIL.Emit(OpCodes.Br_S, myEndOfMethodLabel);
	
	      myAdderIL.MarkLabel(myFailedLabel);
	      myAdderIL.Emit(OpCodes.Ldstr, "Cannot accept values over 10 for addition.");
	      myAdderIL.Emit(OpCodes.Newobj, myConstructorInfo);
	
	      myAdderIL.Emit(OpCodes.Stloc_S, myLocalBuilder2);
	      myAdderIL.Emit(OpCodes.Ldloc_S, myLocalBuilder2);
	
	      myAdderIL.BeginFaultBlock();
	      Console.WriteLine("Fault block called.");
	      myAdderIL.ThrowException(typeof(NotSupportedException));
	
	      myAdderIL.BeginFinallyBlock();
	      
	      myAdderIL.Emit(OpCodes.Ldstr, "{0}");
	      myAdderIL.Emit(OpCodes.Ldloc_S, myLocalBuilder2);
	      myAdderIL.EmitCall(OpCodes.Callvirt, myExToStrMI, null);
	      myAdderIL.EmitCall(OpCodes.Call, myWriteLineMI, null);
	      myAdderIL.Emit(OpCodes.Ldc_I4_M1);
	      myAdderIL.Emit(OpCodes.Stloc_S, myLocalBuilder1);
	
	      myAdderIL.EndExceptionBlock();
	
	      myAdderIL.MarkLabel(myEndOfMethodLabel);
	      myAdderIL.Emit(OpCodes.Ldloc_S, myLocalBuilder1);
	      myAdderIL.Emit(OpCodes.Ret);
	
	      return myTypeBuilder.CreateType();
	   }
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      Type myAddType = AddType();
	      object myObject1 = Activator.CreateInstance(myAddType);
	      object[] myObject2 = new object[]{11,12};
	      
	      myAddType.InvokeMember("DoAdd",BindingFlags.InvokeMethod,null,myObject1,myObject2);
	   }
	}
snippet cryptography_descsp_createencryptor_file

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_DESCSP_CreateEncryptor_File/fileexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class DESCSPSample
	{
	
	    static void Main()
	    {
	        try
	        {
	            DESCryptoServiceProvider DESalg = new DESCryptoServiceProvider();
	
	            string sData = "Here is some data to encrypt.";
	            string FileName = "CText.txt";
	
	            EncryptTextToFile(sData, FileName, DESalg.Key, DESalg.IV);
	
	            string Final = DecryptTextFromFile(FileName, DESalg.Key, DESalg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static void EncryptTextToFile(String Data, String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName,FileMode.OpenOrCreate);
	
	            CryptoStream cStream = new CryptoStream(fStream, 
	                new DESCryptoServiceProvider().CreateEncryptor(Key,IV), 
	                CryptoStreamMode.Write); 
	
	            StreamWriter sWriter = new StreamWriter(cStream);
	
	            sWriter.WriteLine(Data);
	  
	            sWriter.Close();
	            cStream.Close();
	            fStream.Close();
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	        }
	
	    }
	
	    public static string DecryptTextFromFile(String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate);
	  
	            CryptoStream cStream = new CryptoStream(fStream, 
	                new DESCryptoServiceProvider().CreateDecryptor(Key,IV), 
	                CryptoStreamMode.Read); 
	
	            StreamReader sReader = new StreamReader(cStream);
	
	            string val = sReader.ReadLine();
	    
	            sReader.Close();
	            cStream.Close();
	            fStream.Close();
	
	            return val;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}
snippet cryptography_3descsp_createencryptor_file

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_3DESCSP_CreateEncryptor_File/fileexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class TrippleDESCSPSample
	{
	
	    static void Main()
	    {
	        try
	        {
	            TripleDESCryptoServiceProvider tDESalg = new TripleDESCryptoServiceProvider();
	
	            string sData = "Here is some data to encrypt.";
	            string FileName = "CText.txt";
	
	            EncryptTextToFile(sData, FileName, tDESalg.Key, tDESalg.IV);
	
	            string Final = DecryptTextFromFile(FileName, tDESalg.Key, tDESalg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static void EncryptTextToFile(String Data, String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName,FileMode.OpenOrCreate);
	
	            CryptoStream cStream = new CryptoStream(fStream, 
	                new TripleDESCryptoServiceProvider().CreateEncryptor(Key,IV), 
	                CryptoStreamMode.Write); 
	
	            StreamWriter sWriter = new StreamWriter(cStream);
	
	            sWriter.WriteLine(Data);
	  
	            sWriter.Close();
	            cStream.Close();
	            fStream.Close();
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file access error occurred: {0}", e.Message);
	        }
	
	    }
	
	    public static string DecryptTextFromFile(String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate);
	  
	            CryptoStream cStream = new CryptoStream(fStream, 
	                new TripleDESCryptoServiceProvider().CreateDecryptor(Key,IV), 
	                CryptoStreamMode.Read); 
	
	            StreamReader sReader = new StreamReader(cStream);
	
	            string val = sReader.ReadLine();
	    
	            sReader.Close();
	            cStream.Close();
	            fStream.Close();
	
	            return val;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file access error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}
snippet cryptography_des_createstring_memory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_DES_Createstring_Memory/memoryexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class DESSample
	{
	    static void Main()
	    {
	        try
	        {
	            DES DESalg = DES.Create("DES");
	
	            string sData = "Here is some data to encrypt.";
	
	            byte[] Data = EncryptTextToMemory(sData, DESalg.Key, DESalg.IV);
	
	            string Final = DecryptTextFromMemory(Data, DESalg.Key, DESalg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static byte[] EncryptTextToMemory(string Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream mStream = new MemoryStream();
	
	            DES DESalg = DES.Create();
	
	            CryptoStream cStream = new CryptoStream(mStream, 
	                DESalg.CreateEncryptor(Key, IV), 
	                CryptoStreamMode.Write);
	
	            byte[] toEncrypt = new ASCIIEncoding().GetBytes(Data);
	
	            cStream.Write(toEncrypt, 0, toEncrypt.Length);
	            cStream.FlushFinalBlock();
	        
	            byte[] ret = mStream.ToArray();
	
	            cStream.Close();
	            mStream.Close();
	
	            return ret;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	
	    }
	
	    public static string DecryptTextFromMemory(byte[] Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream msDecrypt = new MemoryStream(Data);
	
	            DES DESalg = DES.Create();
	
	            CryptoStream csDecrypt = new CryptoStream(msDecrypt, 
	                DESalg.CreateDecryptor(Key, IV), 
	                CryptoStreamMode.Read);
	
	            byte[] fromEncrypt = new byte[Data.Length];
	
	            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);
	
	            return new ASCIIEncoding().GetString(fromEncrypt);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}

snippet cryptography_rc2_createstring_memory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RC2_Createstring_Memory/memoryexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class RC2Sample
	{
	    static void Main()
	    {
	        try
	        {
	            RC2 RC2alg = RC2.Create("RC2");
	
	            string sData = "Here is some data to encrypt.";
	
	            byte[] Data = EncryptTextToMemory(sData, RC2alg.Key, RC2alg.IV);
	
	            string Final = DecryptTextFromMemory(Data, RC2alg.Key, RC2alg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static byte[] EncryptTextToMemory(string Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream mStream = new MemoryStream();
	
	            RC2 RC2alg = RC2.Create();
	
	            CryptoStream cStream = new CryptoStream(mStream, 
	                RC2alg.CreateEncryptor(Key, IV), 
	                CryptoStreamMode.Write);
	
	            byte[] toEncrypt = new ASCIIEncoding().GetBytes(Data);
	
	            cStream.Write(toEncrypt, 0, toEncrypt.Length);
	            cStream.FlushFinalBlock();
	        
	            byte[] ret = mStream.ToArray();
	
	            cStream.Close();
	            mStream.Close();
	
	            return ret;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	
	    }
	
	    public static string DecryptTextFromMemory(byte[] Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream msDecrypt = new MemoryStream(Data);
	
	            RC2 RC2alg = RC2.Create();
	
	            CryptoStream csDecrypt = new CryptoStream(msDecrypt, 
	                RC2alg.CreateDecryptor(Key, IV), 
	                CryptoStreamMode.Read);
	
	            byte[] fromEncrypt = new byte[Data.Length];
	
	            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);
	
	            return new ASCIIEncoding().GetString(fromEncrypt);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}

snippet cryptography_3des_createstring_memory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_3DES_Createstring_Memory/memoryexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class TripleDESSample
	{
	    static void Main()
	    {
	        try
	        {
	            TripleDES TripleDESalg = TripleDES.Create("TripleDES");
	
	            string sData = "Here is some data to encrypt.";
	
	            byte[] Data = EncryptTextToMemory(sData, TripleDESalg.Key, TripleDESalg.IV);
	
	            string Final = DecryptTextFromMemory(Data, TripleDESalg.Key, TripleDESalg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static byte[] EncryptTextToMemory(string Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream mStream = new MemoryStream();
	
	            TripleDES tripleDESalg = TripleDES.Create();
	
	            CryptoStream cStream = new CryptoStream(mStream, 
	                tripleDESalg.CreateEncryptor(Key, IV), 
	                CryptoStreamMode.Write);
	
	            byte[] toEncrypt = new ASCIIEncoding().GetBytes(Data);
	
	            cStream.Write(toEncrypt, 0, toEncrypt.Length);
	            cStream.FlushFinalBlock();
	        
	            byte[] ret = mStream.ToArray();
	
	            cStream.Close();
	            mStream.Close();
	
	            return ret;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	
	    }
	
	    public static string DecryptTextFromMemory(byte[] Data,  byte[] Key, byte[] IV)
	    {
	        try
	        {
	            MemoryStream msDecrypt = new MemoryStream(Data);
	
	            TripleDES tripleDESalg = TripleDES.Create();
	
	            CryptoStream csDecrypt = new CryptoStream(msDecrypt, 
	                tripleDESalg.CreateDecryptor(Key, IV), 
	                CryptoStreamMode.Read);
	
	            byte[] fromEncrypt = new byte[Data.Length];
	
	            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);
	
	            return new ASCIIEncoding().GetString(fromEncrypt);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}

snippet constructorbuilder_name_5

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ConstructorBuilder_Name_5/constructorbuilder_name_5.cs

	
	/* The following program demonstrates the 'ConstructorBuilder' class,
	   its 'Name', 'ReflectedType', 'Signature' properties and 'ToString'
	   method. Create the assembly in the current domain with dynamic module 
	   in the assembly. ConstructorBuilder is used in conjunction with the 
	   'TypeBuilder' class to create constructor at run time. Display the
	   'Name', 'Signature' and 'ReflectedType' to the console.
	*/
	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	
	public class MyConstructorBuilder
	{
	   Type myType1;
	   ModuleBuilder myModuleBuilder=null;
	   AssemblyBuilder myAssemblyBuilder = null;
	
	   public MyConstructorBuilder()
	   {
	      MethodBuilder myMethodBuilder = null;
	      AppDomain myCurrentDomain = AppDomain.CurrentDomain;
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "TempAssembly";
	      myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly
	               (myAssemblyName, AssemblyBuilderAccess.Run);
	      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("TempModule");
	      FieldInfo myFieldInfo =
	         myModuleBuilder.DefineUninitializedData("myField", 2, FieldAttributes.Public);
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("TempClass",TypeAttributes.Public);
	      FieldBuilder myGreetingField = myTypeBuilder.DefineField("Greeting", 
	                                          typeof(String), FieldAttributes.Public);
	      Type[] myConstructorArgs = { typeof(String) };
	      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(
	      MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);
	      Console.WriteLine("The constructor name is  : "+ myConstructor.Name);
	      Console.WriteLine("The reflected type  is  : "+ myConstructor.ReflectedType);
	      Console.WriteLine(myConstructor.Signature);
	      Console.WriteLine(myConstructor.ToString());
	      ILGenerator myILGenerator3 = myConstructor.GetILGenerator();
	      myILGenerator3.Emit(OpCodes.Ldarg_0);
	      ConstructorInfo myConstructorInfo = typeof(Object).GetConstructor(new Type[0]);
	      myILGenerator3.Emit(OpCodes.Call, myConstructorInfo);
	      myILGenerator3.Emit(OpCodes.Ldarg_0);
	      myILGenerator3.Emit(OpCodes.Ldarg_1);
	      myILGenerator3.Emit(OpCodes.Stfld, myGreetingField);
	      myILGenerator3.Emit(OpCodes.Ret);
	      myMethodBuilder = myTypeBuilder.DefineMethod
	            ("HelloWorld",MethodAttributes.Public,null,null);
	      ILGenerator myILGenerator2 = myMethodBuilder.GetILGenerator();
	      myILGenerator2.EmitWriteLine("Hello World from global");
	      myILGenerator2.Emit(OpCodes.Ret);
	      myModuleBuilder.CreateGlobalFunctions();
	      myType1 = myTypeBuilder.CreateType();
	   }
	
	   public Type MyTypeProperty
	   {
	      get
	      {
	         return this.myType1;
	      }
	   }
	
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      MyConstructorBuilder myConstructorBuilder = new MyConstructorBuilder();
	      Type myType1 = myConstructorBuilder.MyTypeProperty;
	      if (null != myType1)
	      {
	         Console.WriteLine("Instantiating the new type...");
	         Object[] myObject = {"hello"};
	         object myObject1 = Activator.CreateInstance(myType1,myObject,null);
	         MethodInfo myMethodInfo = myType1.GetMethod("HelloWorld");
	         if (null != myMethodInfo)
	         {
	            Console.WriteLine("Invoking dynamically created HelloWorld method...");
	            myMethodInfo.Invoke(myObject1, null);
	         }
	         else
	         {
	            Console.WriteLine("Could not locate HelloWorld method");
	         }
	      }
	      else
	      {
	         Console.WriteLine("Could not access Type.");
	      }
	   }
	}

snippet windowsidentity_impersonation2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/windowsidentity_impersonation2/source.cs

	
	
	using System;
	using System.Runtime.InteropServices;
	using System.Security.Principal;
	using System.Security.Permissions;
	using Microsoft.Win32.SafeHandles;
	using System.Runtime.ConstrainedExecution;
	using System.Security;
	
	
	public class ImpersonationDemo
	{
	    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
	    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword,
	        int dwLogonType, int dwLogonProvider, out SafeTokenHandle phToken);
	
	    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
	    public extern static bool CloseHandle(IntPtr handle);
	
	    [PermissionSetAttribute(SecurityAction.Demand, Name = "FullTrust")]
	    public static void Main(string[] args)
	    {
	        SafeTokenHandle safeTokenHandle;
	        try
	        {
	            string userName, domainName;
	            Console.Write("Enter the name of the domain on which to log on: ");
	            domainName = Console.ReadLine();
	
	            Console.Write("Enter the login of a user on {0} that you wish to impersonate: ", domainName);
	            userName = Console.ReadLine();
	
	            Console.Write("Enter the password for {0}: ", userName);
	
	            const int LOGON32_PROVIDER_DEFAULT = 0;
	            const int LOGON32_LOGON_INTERACTIVE = 2;
	
	            bool returnValue = LogonUser(userName, domainName, Console.ReadLine(),
	                LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,
	                out safeTokenHandle);
	
	            Console.WriteLine("LogonUser called.");
	
	            if (false == returnValue)
	            {
	                int ret = Marshal.GetLastWin32Error();
	                Console.WriteLine("LogonUser failed with error code : {0}", ret);
	                throw new System.ComponentModel.Win32Exception(ret);
	            }
	            using (safeTokenHandle)
	            {
	                Console.WriteLine("Did LogonUser Succeed? " + (returnValue ? "Yes" : "No"));
	                Console.WriteLine("Value of Windows NT token: " + safeTokenHandle);
	
	                Console.WriteLine("Before impersonation: "
	                    + WindowsIdentity.GetCurrent().Name);
	                using (WindowsImpersonationContext impersonatedUser = WindowsIdentity.Impersonate(safeTokenHandle.DangerousGetHandle()))
	                {
	
	                    Console.WriteLine("After impersonation: "
	                        + WindowsIdentity.GetCurrent().Name);
	                }
	                Console.WriteLine("After closing the context: " + WindowsIdentity.GetCurrent().Name);
	            }
	        }
	        catch (Exception ex)
	        {
	            Console.WriteLine("Exception occurred. " + ex.Message);
	        }
	
	    }
	}
	public sealed class SafeTokenHandle : SafeHandleZeroOrMinusOneIsInvalid
	{
	    private SafeTokenHandle()
	        : base(true)
	    {
	    }
	
	    [DllImport("kernel32.dll")]
	    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	    [SuppressUnmanagedCodeSecurity]
	    [return: MarshalAs(UnmanagedType.Bool)]
	    private static extern bool CloseHandle(IntPtr handle);
	
	    protected override bool ReleaseHandle()
	    {
	        return CloseHandle(handle);
	    }
	}
	
	
	
	

snippet conceptual_monitors

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_monitors/source.cs

	using System;
	using System.Threading;
	
	internal class SyncResource
	{
	    public void Access()
	    {
	        lock(this) {
	            Console.WriteLine("Starting synchronized resource access on thread #{0}",
	                              Thread.CurrentThread.ManagedThreadId);
	            if (Thread.CurrentThread.ManagedThreadId % 2 == 0)
	                Thread.Sleep(2000);
	
	            Thread.Sleep(200);
	            Console.WriteLine("Stopping synchronized resource access on thread #{0}",
	                              Thread.CurrentThread.ManagedThreadId);
	        }
	    }
	}
	
	internal class UnSyncResource
	{
	    public void Access()
	    {
	        Console.WriteLine("Starting unsynchronized resource access on Thread #{0}",
	                          Thread.CurrentThread.ManagedThreadId);
	        if (Thread.CurrentThread.ManagedThreadId % 2 == 0)
	            Thread.Sleep(2000);
	
	        Thread.Sleep(200);
	        Console.WriteLine("Stopping unsynchronized resource access on thread #{0}",
	                          Thread.CurrentThread.ManagedThreadId);
	    }
	}
	
	public class App
	{
	    private static int numOps;
	    private static AutoResetEvent opsAreDone = new AutoResetEvent(false);
	    private static SyncResource SyncRes = new SyncResource();
	    private static UnSyncResource UnSyncRes = new UnSyncResource();
	
	   public static void Main()
	   {
	        numOps = 5;
	        for (int ctr = 0; ctr <= 4; ctr++)
	            ThreadPool.QueueUserWorkItem(new WaitCallback(SyncUpdateResource));
	
	        opsAreDone.WaitOne();
	        Console.WriteLine("\t\nAll synchronized operations have completed.\n");
	
	        numOps = 5;
	        for (int ctr = 0; ctr <= 4; ctr++)
	            ThreadPool.QueueUserWorkItem(new WaitCallback(UnSyncUpdateResource));
	
	        opsAreDone.WaitOne();
	        Console.WriteLine("\t\nAll unsynchronized thread operations have completed.\n");
	   }
	
	    static void SyncUpdateResource(Object state)
	    {
	        SyncRes.Access();
	
	        if (Interlocked.Decrement(ref numOps) == 0)
	            opsAreDone.Set();
	    }
	
	    static void UnSyncUpdateResource(Object state)
	    {
	        UnSyncRes.Access();
	
	        if (Interlocked.Decrement(ref numOps) == 0)
	            opsAreDone.Set();
	    }
	}

snippet servicecontrollerclass

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/program.cs

	using System;
	using System.ServiceProcess;
	using System.Diagnostics;
	using System.Threading;
	
	namespace ServiceControllerSample
	{
	    class Program
	    {
	        public enum SimpleServiceCustomCommands
	        { StopWorker = 128, RestartWorker, CheckWorker };
	        static void Main(string[] args)
	        {
	            ServiceController[] scServices;
	            scServices = ServiceController.GetServices();
	
	            foreach (ServiceController scTemp in scServices)
	            {
	
	                if (scTemp.ServiceName == "Simple Service")
	                {
	                    ServiceController sc = new ServiceController("Simple Service");
	                    Console.WriteLine("Status = " + sc.Status);
	                    Console.WriteLine("Can Pause and Continue = " + sc.CanPauseAndContinue);
	                    Console.WriteLine("Can ShutDown = " + sc.CanShutdown);
	                    Console.WriteLine("Can Stop = " + sc.CanStop);
	                    if (sc.Status == ServiceControllerStatus.Stopped)
	                    {
	                        sc.Start();
	                        while (sc.Status == ServiceControllerStatus.Stopped)
	                        {
	                            Thread.Sleep(1000);
	                            sc.Refresh();
	                        }
	                    }
	                    sc.ExecuteCommand((int)SimpleServiceCustomCommands.StopWorker);
	                    sc.ExecuteCommand((int)SimpleServiceCustomCommands.RestartWorker);
	                    sc.Pause();
	                    while (sc.Status != ServiceControllerStatus.Paused)
	                    {
	                        Thread.Sleep(1000);
	                        sc.Refresh();
	                    }
	                    Console.WriteLine("Status = " + sc.Status);
	                    sc.Continue();
	                    while (sc.Status == ServiceControllerStatus.Paused)
	                    {
	                        Thread.Sleep(1000);
	                        sc.Refresh();
	                    }
	                    Console.WriteLine("Status = " + sc.Status);
	                    sc.Stop();
	                    while (sc.Status != ServiceControllerStatus.Stopped)
	                    {
	                        Thread.Sleep(1000);
	                        sc.Refresh();
	                    }
	                    Console.WriteLine("Status = " + sc.Status);
	                    String[] argArray = new string[] { "ServiceController arg1", "ServiceController arg2" };
	                    sc.Start(argArray);
	                    while (sc.Status == ServiceControllerStatus.Stopped)
	                    {
	                        Thread.Sleep(1000);
	                        sc.Refresh();
	                    }
	                    Console.WriteLine("Status = " + sc.Status);
	                    EventLog el = new EventLog("Application");
	                    EventLogEntryCollection elec = el.Entries;
	                    foreach (EventLogEntry ele in elec)
	                    {
	                        if (ele.Source.IndexOf("SimpleService.OnCustomCommand") >= 0 |
	                            ele.Source.IndexOf("SimpleService.Arguments") >= 0)
	                            Console.WriteLine(ele.Message);
	                    }
	                }
	            }
	
	
	        }
	    }
	}

snippet conceptual_attributes_usage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_attributes_usage/source3.cs

	using System;
	using System.Reflection;
	using CustomCodeAttributes;
	
	[Developer("Joan Smith", "42", Reviewed = true)]
	class MainApp
	{
	    public static void Main()
	    {
	        GetAttribute(typeof(MainApp));
	    }
	
	    public static void GetAttribute(Type t)
	    {
	        DeveloperAttribute MyAttribute =
	            (DeveloperAttribute) Attribute.GetCustomAttribute(t, typeof (DeveloperAttribute));
	
	        if (MyAttribute == null)
	        {
	            Console.WriteLine("The attribute was not found.");
	        }
	        else
	        {
	            Console.WriteLine("The Name Attribute is: {0}." , MyAttribute.Name);
	            Console.WriteLine("The Level Attribute is: {0}." , MyAttribute.Level);
	            Console.WriteLine("The Reviewed Attribute is: {0}." , MyAttribute.Reviewed);
	        }
	    }
	}
	
	class GetAttribTest1
	{
	    public static void GetAttribute(Type t)
	    {
	        DeveloperAttribute[] MyAttributes =
	            (DeveloperAttribute[]) Attribute.GetCustomAttributes(t, typeof (DeveloperAttribute));
	
	        if (MyAttributes.Length == 0)
	        {
	            Console.WriteLine("The attribute was not found.");
	        }
	        else
	        {
	            for (int i = 0 ; i < MyAttributes.Length ; i++)
	            {
	                Console.WriteLine("The Name Attribute is: {0}." , MyAttributes[i].Name);
	                Console.WriteLine("The Level Attribute is: {0}." , MyAttributes[i].Level);
	                Console.WriteLine("The Reviewed Attribute is: {0}.", MyAttributes[i].Reviewed);
	            }
	        }
	    }
	}
	
	class GetAttribTest2
	{
	    public static void GetAttribute(Type t)
	    {
	        DeveloperAttribute att;
	
	
	        att = (DeveloperAttribute) Attribute.GetCustomAttribute (t, typeof (DeveloperAttribute));
	
	        if (att == null)
	        {
	            Console.WriteLine("No attribute in class {0}.\n", t.ToString());
	        }
	        else
	        {
	            Console.WriteLine("The Name Attribute on the class level is: {0}.", att.Name);
	            Console.WriteLine("The Level Attribute on the class level is: {0}.", att.Level);
	            Console.WriteLine("The Reviewed Attribute on the class level is: {0}.\n", att.Reviewed);
	        }
	
	
	        MemberInfo[] MyMemberInfo = t.GetMethods();
	
	        for (int i = 0; i < MyMemberInfo.Length; i++)
	        {
	            att = (DeveloperAttribute) Attribute.GetCustomAttribute(MyMemberInfo[i], typeof (DeveloperAttribute));
	            if (att == null)
	            {
	                Console.WriteLine("No attribute in member function {0}.\n" , MyMemberInfo[i].ToString());
	            }
	            else
	            {
	                Console.WriteLine("The Name Attribute for the {0} member is: {1}.",
	                    MyMemberInfo[i].ToString(), att.Name);
	                Console.WriteLine("The Level Attribute for the {0} member is: {1}.",
	                    MyMemberInfo[i].ToString(), att.Level);
	                Console.WriteLine("The Reviewed Attribute for the {0} member is: {1}.\n",
	                    MyMemberInfo[i].ToString(), att.Reviewed);
	            }
	        }
	    }
	}

snippet weakreference

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/WeakReference/program.cs

	using System;
	using System.Collections.Generic;
	
	public class Program
	{
	    public static void Main()
	    {
	        int cacheSize = 50;
	        Random r = new Random();
	        Cache c = new Cache(cacheSize);
	
	        string DataName = "";
	        GC.Collect(0);
	        
	        for (int i = 0; i < c.Count; i++) {
	            int index = r.Next(c.Count);
	
	            DataName = c[index].Name;
	        }
	        double regenPercent = c.RegenerationCount/(double)c.Count;
	        Console.WriteLine("Cache size: {0}, Regenerated: {1:P2}%", c.Count, regenPercent);
	    }
	}
	
	public class Cache
	{
	    static Dictionary<int, WeakReference> _cache;
	
	    int regenCount = 0;   
	
	    public Cache(int count)
	    {
	        _cache = new Dictionary<int, WeakReference>();
	
	       for (int i = 0; i < count; i++) {
	            _cache.Add(i, new WeakReference(new Data(i), false));
	        }
	    }
	
	    public int Count
	    {
	        get {  return _cache.Count; }
	    }
	
	    public int RegenerationCount
	    {
	        get { return regenCount; }
	    }
	
	    public Data this[int index]
	    {
	        get {
	            Data d = _cache[index].Target as Data;
	            if (d == null) {
	                Console.WriteLine("Regenerate object at {0}: Yes", index);
	                d = new Data(index);
	                _cache[index].Target = d;
	                regenCount++;
	            }
	            else {
	                Console.WriteLine("Regenerate object at {0}: No", index);
	            }
	
	            return d;
	       }
	    }
	}
	
	public class Data
	{
	    private byte[] _data;
	    private string _name;
	
	    public Data(int size)
	    {
	        _data = new byte[size * 1024];
	        _name = size.ToString();
	    }
	
	    public string Name
	    {
	        get { return _name; }
	    }
	}
snippet sys_txt_fallbackdecrpl

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_txt_fallbackDecRpl/fallDecRpl.cs

	
	using System;
	using System.Text;
	
	class Sample 
	{
	    public static void Main() 
	    {
	
	
	    Encoding ae = Encoding.GetEncoding(
	                  "us-ascii",
	                  new EncoderReplacementFallback("(unknown)"), 
	                  new DecoderReplacementFallback("(error)"));
	    string inputString = "XYZ";
	    string decodedString;
	    string twoNewLines = "\n\n";
	    byte[] encodedBytes = new byte[ae.GetByteCount(inputString)];
	    int numberOfEncodedBytes = 0;
	
	    Console.Clear();
	
	    Console.WriteLine("The name of the encoding is \"{0}\".\n", ae.WebName);
	
	    Console.WriteLine("Input string ({0} characters): \"{1}\"", 
	                       inputString.Length, inputString);
	
	    Console.Write("Input string in hexadecimal: ");
	    foreach (char c in inputString.ToCharArray()) 
	        {
	        Console.Write("0x{0:X2} ", (int)c);
	        }
	    Console.Write(twoNewLines);
	
	
	    Console.WriteLine("Encode the input string...");
	    numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, 
	                                       encodedBytes, 0);
	
	    Console.WriteLine("Encoded bytes in hexadecimal ({0} bytes):\n", 
	                       numberOfEncodedBytes);
	    foreach (byte b in encodedBytes)
	        {
	        Console.Write("0x{0:X2} ", (int)b);
	        }
	    Console.Write(twoNewLines);
	
	
	
	    encodedBytes[0] = 0xFF;
	    encodedBytes[2] = 0xFF;
	
	    Console.WriteLine("Display the corrupted byte sequence...");
	    Console.WriteLine("Encoded bytes in hexadecimal ({0} bytes):\n", 
	                       numberOfEncodedBytes);
	    foreach (byte b in encodedBytes)
	        {
	        Console.Write("0x{0:X2} ", (int)b);
	        }
	    Console.Write(twoNewLines);
	
	
	    Console.WriteLine("Compare the decoded bytes to the input string...");
	    decodedString = ae.GetString(encodedBytes);
	
	    Console.WriteLine("Input string:  \"{0}\"", inputString);
	    Console.WriteLine("Decoded string:\"{0}\"", decodedString);
	    }
	}
	/*
	This code example produces the following results:
	
	The name of the encoding is "us-ascii".
	
	Input string (3 characters): "XYZ"
	Input string in hexadecimal: 0x58 0x59 0x5A
	
	Encode the input string...
	Encoded bytes in hexadecimal (3 bytes):
	
	0x58 0x59 0x5A
	
	Display the corrupted byte sequence...
	Encoded bytes in hexadecimal (3 bytes):
	
	0xFF 0x59 0xFF
	
	Compare the decoded bytes to the input string...
	Input string:  "XYZ"
	Decoded string:"(error)Y(error)"
	
	*/
snippet conceptual_regex_language_assertions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_assertions/endofstring1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      int startPos = 0, endPos = 70;
	      string cr = Environment.NewLine;
	      string input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957" + cr +
	                     "Chicago Cubs, National League, 1903-present" + cr + 
	                     "Detroit Tigers, American League, 1901-present" + cr + 
	                     "New York Giants, National League, 1885-1957" + cr +  
	                     "Washington Senators, American League, 1901-1960" + cr;   
	      Match match;
	
	      string basePattern = @"^((\w+(\s?)){2,}),\s(\w+\s\w+),(\s\d{4}(-(\d{4}|present))?,?)+";
	      string pattern = basePattern + "$";
	      Console.WriteLine("Attempting to match the entire input string:");
	      if (input.Substring(startPos, endPos).Contains(",")) {
	         match = Regex.Match(input, pattern);
	         while (match.Success) {
	            Console.Write("The {0} played in the {1} in", 
	                              match.Groups[1].Value, match.Groups[4].Value);
	            foreach (Capture capture in match.Groups[5].Captures)
	               Console.Write(capture.Value);
	   
	            Console.WriteLine(".");
	            startPos = match.Index + match.Length;
	            endPos = startPos + 70 <= input.Length ? 70 : input.Length - startPos;
	            if (! input.Substring(startPos, endPos).Contains(",")) break;
	            match = match.NextMatch();
	         }
	         Console.WriteLine();
	      }
	
	      string[] teams = input.Split(new String[] { cr }, StringSplitOptions.RemoveEmptyEntries);
	      Console.WriteLine("Attempting to match each element in a string array:");
	      foreach (string team in teams)
	      {
	         if (team.Length > 70) continue;
	
	         match = Regex.Match(team, pattern);
	         if (match.Success)
	         {
	            Console.Write("The {0} played in the {1} in", 
	                          match.Groups[1].Value, match.Groups[4].Value);
	            foreach (Capture capture in match.Groups[5].Captures)
	               Console.Write(capture.Value);
	            Console.WriteLine(".");
	         }
	      }
	      Console.WriteLine();
	      
	      startPos = 0;
	      endPos = 70;
	      Console.WriteLine("Attempting to match each line of an input string with '$':");
	      if (input.Substring(startPos, endPos).Contains(",")) {
	         match = Regex.Match(input, pattern, RegexOptions.Multiline);
	         while (match.Success) {
	            Console.Write("The {0} played in the {1} in", 
	                              match.Groups[1].Value, match.Groups[4].Value);
	            foreach (Capture capture in match.Groups[5].Captures)
	               Console.Write(capture.Value);
	   
	            Console.WriteLine(".");
	            startPos = match.Index + match.Length;
	            endPos = startPos + 70 <= input.Length ? 70 : input.Length - startPos;
	            if (! input.Substring(startPos, endPos).Contains(",")) break;
	            match = match.NextMatch();
	         }
	         Console.WriteLine();
	      }
	      
	      startPos = 0;
	      endPos = 70;
	      pattern = basePattern + "\r?$"; 
	      Console.WriteLine(@"Attempting to match each line of an input string with '\r?$':");
	      if (input.Substring(startPos, endPos).Contains(",")) {
	         match = Regex.Match(input, pattern, RegexOptions.Multiline);
	         while (match.Success) {
	            Console.Write("The {0} played in the {1} in", 
	                              match.Groups[1].Value, match.Groups[4].Value);
	            foreach (Capture capture in match.Groups[5].Captures)
	               Console.Write(capture.Value);
	   
	            Console.WriteLine(".");
	            startPos = match.Index + match.Length;
	            endPos = startPos + 70 <= input.Length ? 70 : input.Length - startPos;
	            if (! input.Substring(startPos, endPos).Contains(",")) break;
	            match = match.NextMatch();
	         }
	         Console.WriteLine();
	      }
	   }
	}

snippet conceptual_observerdesignpattern

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_observerdesignpattern/provider.cs

	using System;
	using System.Collections.Generic;
	
	public class BaggageInfo
	{
	   private int flightNo;
	   private string origin;
	   private int location;
	
	   internal BaggageInfo(int flight, string from, int carousel)
	   {
	      this.flightNo = flight;
	      this.origin = from;
	      this.location = carousel;
	   }
	
	   public int FlightNumber {
	      get { return this.flightNo; }
	   }
	
	   public string From {
	      get { return this.origin; }
	   }
	
	   public int Carousel {
	      get { return this.location; }
	   }
	}
	
	public class BaggageHandler : IObservable<BaggageInfo>
	{
	   private List<IObserver<BaggageInfo>> observers;
	   private List<BaggageInfo> flights;
	
	   public BaggageHandler()
	   {
	      observers = new List<IObserver<BaggageInfo>>();
	      flights = new List<BaggageInfo>();
	   }
	
	   public IDisposable Subscribe(IObserver<BaggageInfo> observer)
	   {
	      if (! observers.Contains(observer)) {
	         observers.Add(observer);
	         foreach (var item in flights)
	            observer.OnNext(item);
	      }
	      return new Unsubscriber<BaggageInfo>(observers, observer);
	   }
	
	   public void BaggageStatus(int flightNo)
	   {
	      BaggageStatus(flightNo, String.Empty, 0);
	   }
	
	   public void BaggageStatus(int flightNo, string from, int carousel)
	   {
	      var info = new BaggageInfo(flightNo, from, carousel);
	
	      if (carousel > 0 && ! flights.Contains(info)) {
	         flights.Add(info);
	         foreach (var observer in observers)
	            observer.OnNext(info);
	      }
	      else if (carousel == 0) {
	         var flightsToRemove = new List<BaggageInfo>();
	         foreach (var flight in flights) {
	            if (info.FlightNumber == flight.FlightNumber) {
	               flightsToRemove.Add(flight);
	               foreach (var observer in observers)
	                  observer.OnNext(info);
	            }
	         }
	         foreach (var flightToRemove in flightsToRemove)
	            flights.Remove(flightToRemove);
	
	         flightsToRemove.Clear();
	      }
	   }
	
	   public void LastBaggageClaimed()
	   {
	      foreach (var observer in observers)
	         observer.OnCompleted();
	
	      observers.Clear();
	   }
	}
	
	internal class Unsubscriber<BaggageInfo> : IDisposable
	{
	   private List<IObserver<BaggageInfo>> _observers;
	   private IObserver<BaggageInfo> _observer;
	
	   internal Unsubscriber(List<IObserver<BaggageInfo>> observers, IObserver<BaggageInfo> observer)
	   {
	      this._observers = observers;
	      this._observer = observer;
	   }
	
	   public void Dispose() 
	   {
	      if (_observers.Contains(_observer))
	         _observers.Remove(_observer);
	   }
	}

snippet datetime_kind_suite

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DateTime_Kind_Suite/ks.cs

	
	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	
	    DateTime saveNow = DateTime.Now;
	
	
	    DateTime saveUtcNow = DateTime.UtcNow;
	    DateTime myDt;
	
	
	    DisplayNow("UtcNow: ..........", saveUtcNow);
	    DisplayNow("Now: .............", saveNow);
	    Console.WriteLine();
	
	
	    myDt = DateTime.SpecifyKind(saveNow, DateTimeKind.Utc);
	    Display("Utc: .............", myDt);
	
	
	    myDt = DateTime.SpecifyKind(saveNow, DateTimeKind.Local);
	    Display("Local: ...........", myDt);
	
	
	    myDt = DateTime.SpecifyKind(saveNow, DateTimeKind.Unspecified);
	    Display("Unspecified: .....", myDt);
	    }
	
	
	    public static string datePatt = @"M/d/yyyy hh:mm:ss tt";
	    public static void Display(string title, DateTime inputDt)
	    {
	    DateTime dispDt = inputDt;
	    string dtString;
	
	
	    dtString = dispDt.ToString(datePatt);
	    Console.WriteLine("{0} {1}, Kind = {2}", 
	                      title, dtString, dispDt.Kind);
	
	
	    dispDt = inputDt.ToLocalTime();
	    dtString = dispDt.ToString(datePatt);
	    Console.WriteLine("  ToLocalTime:     {0}, Kind = {1}", 
	                      dtString, dispDt.Kind);
	
	
	    dispDt = inputDt.ToUniversalTime();
	    dtString = dispDt.ToString(datePatt);
	    Console.WriteLine("  ToUniversalTime: {0}, Kind = {1}", 
	                      dtString, dispDt.Kind);
	    Console.WriteLine();
	    }
	
	
	    public static void DisplayNow(string title, DateTime inputDt)
	    {
	    string dtString = inputDt.ToString(datePatt);
	    Console.WriteLine("{0} {1}, Kind = {2}", 
	                      title, dtString, inputDt.Kind);
	    }
	}
	
	/*
	This code example produces the following results:
	
	UtcNow: .......... 5/6/2005 09:34:42 PM, Kind = Utc
	Now: ............. 5/6/2005 02:34:42 PM, Kind = Local
	
	Utc: ............. 5/6/2005 02:34:42 PM, Kind = Utc
	  ToLocalTime:     5/6/2005 07:34:42 AM, Kind = Local
	  ToUniversalTime: 5/6/2005 02:34:42 PM, Kind = Utc
	
	Local: ........... 5/6/2005 02:34:42 PM, Kind = Local
	  ToLocalTime:     5/6/2005 02:34:42 PM, Kind = Local
	  ToUniversalTime: 5/6/2005 09:34:42 PM, Kind = Utc
	
	Unspecified: ..... 5/6/2005 02:34:42 PM, Kind = Unspecified
	  ToLocalTime:     5/6/2005 07:34:42 AM, Kind = Local
	  ToUniversalTime: 5/6/2005 09:34:42 PM, Kind = Utc
	
	*/
snippet assemblyname_keypair

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyName_KeyPair/assemblyname_keypair.cs

	  
	/* 
	   The following example demonstrates the 'GetPublicKey()' and
	   'GetPublicKeyToken()' methods and the 'KeyPair', 'Flags' and 'VersionCompatibility'
	   properties of the 'AssemblyName' class. Creates a dynamic assembly named 'MyAssembly' 
	   with a module named 'MyModule' and a type within the module named 'MyType'. 
	   The type 'MyType' has a single method called 'Main' which is also the entry 
	   point to the assembly. The creation of the dynamic assembly is carried out 
	   by the method called 'MakeAssembly'. After the assembly is created with the 
	   help of 'MakeAssembly' the assemblies currently loaded are found and the 
	   dynamic assembly that we have created is searched for, which is displayed 
	   to the console. Moreover the public key and the public key token are displayed
	   The dynamic assembly is also saved to a file named 'MyAssembly.exe'. The 
	   dynamic assembly that has been created has a strong name containing a private
	   and a public key which is generated by a tool named 'Sn.exe'. The key pair
	   is stored in a file named 'KeyPair.snk'.
	   
	   Note : Run 'MyAssembly.exe' which this example has created for a simple
	          'Hello World!" display.
	*/
	
	using System;
	using System.Reflection;
	using System.Threading;
	using System.IO;
	using System.Globalization;
	using System.Reflection.Emit;
	using System.Configuration.Assemblies;
	using System.Text;
	
	public class AssemblyName_CodeBase
	{
	   public static void MakeAssembly(AssemblyName myAssemblyName, string fileName)
	   {
	      AssemblyBuilder myAssemblyBuilder = Thread.GetDomain().DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("MyModule", fileName);
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("MyType");
	      MethodBuilder myMethodBuilder = myTypeBuilder.DefineMethod("Main", MethodAttributes.Public | MethodAttributes.HideBySig |
	         MethodAttributes.Static, typeof(void), null);
	      ILGenerator myILGenerator = myMethodBuilder.GetILGenerator();
	      myILGenerator.EmitWriteLine("Hello World!");
	      myILGenerator.Emit(OpCodes.Ret);
	      myTypeBuilder.CreateType();
	      myAssemblyBuilder.SetEntryPoint(myMethodBuilder);
	      myAssemblyBuilder.Save(fileName);
	   }
	
	   public static void Main()
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.CodeBase = Directory.GetCurrentDirectory();
	      myAssemblyName.CultureInfo = new CultureInfo("en-US");
	      myAssemblyName.HashAlgorithm = AssemblyHashAlgorithm.SHA1;
	      myAssemblyName.VersionCompatibility = AssemblyVersionCompatibility.SameProcess;
	      myAssemblyName.Flags = AssemblyNameFlags.PublicKey;
	      myAssemblyName.KeyPair = new StrongNameKeyPair(File.Open("KeyPair.snk", FileMode.Open, FileAccess.Read));
	      myAssemblyName.Name = "MyAssembly";
	      myAssemblyName.Version = new Version("1.0.0.2001");
	      MakeAssembly(myAssemblyName, "MyAssembly.exe");
	      
	      Assembly[] myAssemblies = Thread.GetDomain().GetAssemblies();
	
	      Assembly myAssembly = null;
	      for(int i = 0; i < myAssemblies.Length; i++)
	         if(String.Compare(myAssemblies[i].GetName().Name, "MyAssembly") == 0)
	            myAssembly = myAssemblies[i];
	
	      if(myAssembly != null)
	      {
	         Console.WriteLine("\nDisplaying the full assembly name.\n");
	         Console.WriteLine(myAssembly.GetName().FullName);
	         Console.WriteLine("\nDisplaying the public key.\n");
	         byte []pk;
	         pk = myAssembly.GetName().GetPublicKey();
	 	     for (int i=0;i<pk.GetLength(0);i++)
	 		    Console.Write ("{0:x2}", pk[i]);
	         Console.WriteLine();
	         Console.WriteLine("\nDisplaying the public key token.\n");
	         byte []pt;
	         pt = myAssembly.GetName().GetPublicKeyToken();
	         for (int i=0;i<pt.GetLength(0);i++)
	 		    Console.Write ("{0:x2}", pt[i]);
	      }
	   }
	}

snippet process_synchronizingobject

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Process_SynchronizingObject/remarks.cs

	
	using System;
	using System.Diagnostics;
	using System.Windows.Forms;
	
	namespace SynchronizingObjectTest
	{
	    public class SyncForm : Form
	    {
	        private System.ComponentModel.Container components = null;
	
	        public SyncForm()
	        {
	            InitializeComponent();
	        }
	
	        protected override void Dispose(bool disposing)
	        {
	            if (disposing)
	            {
	                if (components != null)
	                {
	                    components.Dispose();
	                }
	            }
	
	            base.Dispose(disposing);
	        }
	
	        #region Windows Form Designer generated code
	        private void InitializeComponent()
	        {
	            this.button1 = new Button();
	            this.label1 = new Label();
	            this.SuspendLayout();
	            this.button1.Location = new System.Drawing.Point(20, 20);
	            this.button1.Name = "button1";
	            this.button1.Size = new System.Drawing.Size(160, 30);
	            this.button1.TabIndex = 0;
	            this.button1.Text = "Click Me";
	            this.button1.Click += new System.EventHandler(this.button1_Click);
	            this.label1.Location = new System.Drawing.Point(20, 20);
	            this.label1.Name = "textbox1";
	            this.label1.Size = new System.Drawing.Size(160, 30);
	            this.label1.TabIndex = 1;
	            this.label1.Text = "Waiting for the process 'notepad' to exit....";
	            this.label1.ForeColor = System.Drawing.Color.Red;
	            this.label1.Visible = false;
	            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
	            this.ClientSize = new System.Drawing.Size(200, 70);
	            this.Controls.Add(this.button1);
	            this.Controls.Add(this.label1);
	            this.Name = "SyncForm";
	            this.Text = "SyncForm";
	            this.ResumeLayout(false);
	        }
	        #endregion
	
	        [STAThread]
	        static void Main()
	        {
	            Application.Run(new SyncForm());
	        }
	
	        private Button button1;
	        private Label label1;
	
	        private void button1_Click(object sender, System.EventArgs e)
	        {
	            this.button1.Hide();
	            this.label1.Show();
	
	            using (Process process1 = new Process())
	            {
	                ProcessStartInfo process1StartInfo = new ProcessStartInfo("notepad");
	
	                process1.StartInfo.Domain = "";
	                process1.StartInfo.LoadUserProfile = false;
	                process1.StartInfo.Password = null;
	                process1.StartInfo.StandardErrorEncoding = null;
	                process1.StartInfo.StandardOutputEncoding = null;
	                process1.StartInfo.UserName = "";
	                process1.SynchronizingObject = this;
	
	                process1.Exited += TheProcessExited;
	                process1.EnableRaisingEvents = true;
	
	                this.Refresh();
	                process1.StartInfo = process1StartInfo;
	                process1.Start();
	
	                process1.WaitForExit();
	            }
	        }
	
	        private void TheProcessExited(Object source, EventArgs e)
	        {
	            this.label1.Hide();
	            this.button1.Show();
	            MessageBox.Show("The process has exited.");
	        }
	    }
	}

snippet gethashcode

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/GetHashCode/hashcode.cs

	using System;
	using System.Reflection;
	using System.Collections.Generic;
	
	public class AuthorsAttribute : Attribute 
	{
	   protected string _authorName1;
	   protected string _authorName2;
	
	   public AuthorsAttribute(string name1, string name2) 
	   {
	      _authorName1 = name1;
	      _authorName2 = name2;
	   }
	
	
	   public string AuthorName1 
	   {
	      get { return _authorName1; }
	      set { _authorName1 = value; }
	   }
	
	   public string AuthorName2 
	   {
	      get { return _authorName2; }
	      set { _authorName2 = value; }
	   }
	
	   public override int GetHashCode() 
	   {
	      return _authorName1.GetHashCode() ^ _authorName2.GetHashCode();
	   }
	}
	
	public class TestClass 
	{
	  [Authors("Immanuel Kant", "Lao Tzu")]
	  public void Method1()
	  {}
	
	  [Authors("Jean-Paul Sartre", "Friedrich Nietzsche")]
	  public void Method2()
	  {}
	
	  [Authors("Immanuel Kant", "Lao Tzu")]
	  public void Method3()
	  {}
	
	  [Authors("Jean-Paul Sartre", "Friedrich Nietzsche")]
	  public void Method4()
	  {}
	
	  [Authors("Immanuel Kant", "Friedrich Nietzsche")]
	  public void Method5()
	  {}
	}
	
	class Example
	{
	   static void Main() 
	   {
	      Type clsType = typeof(TestClass);
	
	      var authorsInfo = new List<Tuple<String, AuthorsAttribute>>(); 
	
	      foreach(var method in clsType.GetMethods()) 
	      {
	          AuthorsAttribute authAttr = 
	              (AuthorsAttribute)Attribute.GetCustomAttribute(
	              method, typeof(AuthorsAttribute));
	          if (authAttr != null) 
	             authorsInfo.Add(Tuple.Create(clsType.Name + "." + method.Name,
	                                             authAttr));
	      }
	
	      bool[] listed = new bool[authorsInfo.Count]; 
	      Console.WriteLine("Method authors:\n");
	
	      for (int ctr = 0; ctr < authorsInfo.Count; ctr++) {
	         var authorInfo = authorsInfo[ctr];
	         if (!listed[ctr]) {
	             Console.WriteLine("{0} and {1}", authorInfo.Item2.AuthorName1,
	                                              authorInfo.Item2.AuthorName2);
	             listed[ctr] = true;
	             Console.WriteLine("   {0}", authorInfo.Item1);
	             for (int ctr2 = ctr + 1; ctr2 < authorsInfo.Count; ctr2++) {
	                 if (!listed[ctr2]) 
	                    if (authorInfo.Item2.Equals(authorsInfo[ctr2].Item2)) {
	                       Console.WriteLine("   {0}", authorsInfo[ctr2].Item1);
	                       listed[ctr2] = true;  
	                    }
	            }  
	         }   
	      }
	   }
	}

snippet projectn_reflection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/makegenerictype1.cs

	using System;
	using System.Collections.Generic;
	using System.Reflection;
	
	
	class Example
	{
	   internal static TextBlock b;
	
	   public static void Main()
	   {
	       Example.GetGenericInfo();
	       Example.b = new TextBlock();
	   }
	
	   public static void GetGenericInfo()
	   {
	      Type generic1 = typeof(Dictionary<,>);
	      DisplayGenericType(generic1);
	
	      Dictionary<string, Example> d1 = new Dictionary<string, Example>();
	      Type constructed1 = d1.GetType();
	      Type generic2 = constructed1.GetGenericTypeDefinition();
	
	      DisplayGenericType(constructed1);
	      DisplayGenericType(generic2);
	
	      Type[] typeArgs = { typeof(string), typeof(Example) };
	      Type constructed2 = generic1.MakeGenericType(typeArgs);
	
	      DisplayGenericType(constructed2);
	
	      object o = Activator.CreateInstance(constructed2);
	
	      b.Text += "\r\nCompare types obtained by different methods:\n";
	      b.Text += String.Format("   Are the constructed types equal? {0}\n",
	                              (d1.GetType() == constructed2));
	      b.Text += String.Format("   Are the generic definitions equal? {0}\n",
	                              (generic1 == constructed2.GetGenericTypeDefinition()));
	
	      DisplayGenericType(typeof(TestGeneric<>));
	   }
	
	   private static void DisplayGenericType(Type t)
	   {
	      b.Text += String.Format("\n{0}\n", t);
	      b.Text += String.Format("   Generic type? {0}\n",
	                              t.GetTypeInfo().GenericTypeParameters.Length !=
	                              t.GenericTypeArguments.Length);
	      b.Text += String.Format("   Generic type definition? {0}\n",
	                              ! t.IsConstructedGenericType);
	
	      Type[] typeParameters = t.GetTypeInfo().GenericTypeParameters;
	      if (typeParameters.Length > 0)
	      {
	         b.Text += String.Format("   {0} type parameters:\n",
	                                 typeParameters.Length);
	         foreach (Type tParam in typeParameters)
	            b.Text += String.Format("      Type parameter: {0} position {1}\n",
	                     tParam.Name, tParam.GenericParameterPosition);
	
	      }
	      else
	      {
	         Type[] typeArgs = t.GenericTypeArguments;
	         b.Text += String.Format("   {0} type arguments:\n",
	                                 typeArgs.Length);
	         foreach (var tArg in typeArgs)
	               b.Text += String.Format("      Type argument: {0}\n",
	                                       tArg);
	      }
	      b.Text += "\n-------------------------------\n";
	   }
	
	}
	
	public interface ITestInterface { }
	
	public class TestBase { }
	
	public class TestGeneric<T> where T : TestBase, ITestInterface, new() { }
	
	public class TestArgument : TestBase, ITestInterface
	{
	   public TestArgument()
	   { }
	}
	
	internal class TextBlock
	{
	   private String s;
	   
	   public String Text 
	   {
	      get { return s; }
	      set { s = value; }
	   }
	}

snippet windowsidentity_impersonation

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/WindowsIdentity_Impersonation/source.cs

	
	
	using System;
	using System.Runtime.InteropServices;
	using System.Security.Principal;
	using System.Security.Permissions;
	using Microsoft.Win32.SafeHandles;
	using System.Runtime.ConstrainedExecution;
	using System.Security;
	
	
	public class ImpersonationDemo
	{
	    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
	    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword,
	        int dwLogonType, int dwLogonProvider, out SafeTokenHandle phToken);
	
	    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
	    public extern static bool CloseHandle(IntPtr handle);
	
	    [PermissionSetAttribute(SecurityAction.Demand, Name = "FullTrust")]
	    public static void Main(string[] args)
	    {
	        SafeTokenHandle safeTokenHandle;
	        try
	        {
	            string userName, domainName;
	            Console.Write("Enter the name of the domain on which to log on: ");
	            domainName = Console.ReadLine();
	
	            Console.Write("Enter the login of a user on {0} that you wish to impersonate: ", domainName);
	            userName = Console.ReadLine();
	
	            Console.Write("Enter the password for {0}: ", userName);
	
	            const int LOGON32_PROVIDER_DEFAULT = 0;
	            const int LOGON32_LOGON_INTERACTIVE = 2;
	
	            bool returnValue = LogonUser(userName, domainName, Console.ReadLine(),
	                LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,
	                out safeTokenHandle);
	
	            Console.WriteLine("LogonUser called.");
	
	            if (false == returnValue)
	            {
	                int ret = Marshal.GetLastWin32Error();
	                Console.WriteLine("LogonUser failed with error code : {0}", ret);
	                throw new System.ComponentModel.Win32Exception(ret);
	            }
	            using (safeTokenHandle)
	            {
	                Console.WriteLine("Did LogonUser Succeed? " + (returnValue ? "Yes" : "No"));
	                Console.WriteLine("Value of Windows NT token: " + safeTokenHandle);
	
	                Console.WriteLine("Before impersonation: "
	                    + WindowsIdentity.GetCurrent().Name);
	                using (WindowsIdentity newId = new WindowsIdentity(safeTokenHandle.DangerousGetHandle()))
	                {
	                    using (WindowsImpersonationContext impersonatedUser = newId.Impersonate())
	                    {
	
	                        Console.WriteLine("After impersonation: "
	                            + WindowsIdentity.GetCurrent().Name);
	                    }
	                }
	                Console.WriteLine("After closing the context: " + WindowsIdentity.GetCurrent().Name);
	            }
	        }
	        catch (Exception ex)
	        {
	            Console.WriteLine("Exception occurred. " + ex.Message);
	        }
	
	    }
	}
	public sealed class SafeTokenHandle : SafeHandleZeroOrMinusOneIsInvalid
	{
	    private SafeTokenHandle()
	        : base(true)
	    {
	    }
	
	    [DllImport("kernel32.dll")]
	    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	    [SuppressUnmanagedCodeSecurity]
	    [return: MarshalAs(UnmanagedType.Bool)]
	    private static extern bool CloseHandle(IntPtr handle);
	
	    protected override bool ReleaseHandle()
	    {
	        return CloseHandle(handle);
	    }
	}
	
	
	
	

snippet stacktracesample1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StackTraceSample1/stacktracesample1.cs

	using System;
	using System.Diagnostics;
	
	class StackTraceSample
	{
	    [STAThread]
	    static void Main(string[] args)
	    {
	        StackTraceSample sample = new StackTraceSample();
	        try
	        {
	            sample.MyPublicMethod();
	        }
	        catch (Exception)
	        {
	            StackTrace st = new StackTrace(true);
	            for(int i =0; i< st.FrameCount; i++ )
	            {
	                StackFrame sf = st.GetFrame(i);
	                Console.WriteLine();
	                Console.WriteLine("High up the call stack, Method: {0}",
	                    sf.GetMethod());
	
	                Console.WriteLine("High up the call stack, Line Number: {0}",
	                    sf.GetFileLineNumber());
	            }
	        }
	    }
	
	    public void MyPublicMethod () 
	    { 
	        MyProtectedMethod(); 
	    }
	
	    protected void MyProtectedMethod ()
	    {
	        MyInternalClass mic = new MyInternalClass();
	        mic.ThrowsException();
	    }
	
	    class MyInternalClass
	    {
	        public void ThrowsException()
	        {
	            try
	            {
	                throw new Exception("A problem was encountered.");
	            }
	            catch (Exception e)
	            {
	                StackTrace st = new StackTrace(true);
	                string stackIndent = "";
	                for(int i =0; i< st.FrameCount; i++ )
	                {
	                    StackFrame sf = st.GetFrame(i);
	                    Console.WriteLine();
	                    Console.WriteLine(stackIndent + " Method: {0}",
	                        sf.GetMethod() );
	                    Console.WriteLine(  stackIndent + " File: {0}", 
	                        sf.GetFileName());
	                    Console.WriteLine(  stackIndent + " Line Number: {0}",
	                        sf.GetFileLineNumber());
	                    stackIndent += "  ";
	                }
	                throw e;
	            }
	        }
	    }
	}
	
	/*
	This console application produces the following output when
	compiled with the Debug configuration.
	  
	   Method: Void ThrowsException()
	   File: c:\samples\stacktraceframe\myclass.cs
	   Line Number: 59
	
	     Method: Void MyProtectedMethod()
	     File: c:\samples\stacktraceframe\myclass.cs
	     Line Number: 45
	
	       Method: Void MyPublicMethod()
	       File: c:\samples\stacktraceframe\myclass.cs
	       Line Number: 39
	
	         Method: Void Main(System.String[])
	         File: c:\samples\stacktraceframe\myclass.cs
	         Line Number: 13
	
	  High up the call stack, Method: Void Main(System.String[])
	  High up the call stack, Line Number: 20
	
	
	This console application produces the following output when
	compiled with the Release configuration.
	
	   Method: Void ThrowsException()
	   File:
	   Line Number: 0
	
	     Method: Void Main(System.String[])
	     File:
	     Line Number: 0
	
	  High up the call stack, Method: Void Main(System.String[])
	  High up the call stack, Line Number: 0
	
	*/
snippet environment_class

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/environment_class/env0.cs

	using System;
	using System.Collections;
	
	class Sample
	{
	    public static void Main()
	    {
	        string str;
	        string nl = Environment.NewLine;
	        Console.WriteLine();
	        Console.WriteLine("-- Environment members --");
	
	        Console.WriteLine("CommandLine: {0}", Environment.CommandLine);
	
	        string[] arguments = Environment.GetCommandLineArgs();
	        Console.WriteLine("GetCommandLineArgs: {0}", String.Join(", ", arguments));
	
	        Console.WriteLine("CurrentDirectory: {0}", Environment.CurrentDirectory);
	
	        Console.WriteLine("ExitCode: {0}", Environment.ExitCode);
	
	        Console.WriteLine("HasShutdownStarted: {0}", Environment.HasShutdownStarted);
	
	        Console.WriteLine("MachineName: {0}", Environment.MachineName);
	
	        Console.WriteLine("NewLine: {0}  first line{0}  second line{0}  third line",
	                              Environment.NewLine);
	
	        Console.WriteLine("OSVersion: {0}", Environment.OSVersion.ToString());
	
	        Console.WriteLine("StackTrace: '{0}'", Environment.StackTrace);
	
	        Console.WriteLine("SystemDirectory: {0}", Environment.SystemDirectory);
	
	        Console.WriteLine("TickCount: {0}", Environment.TickCount);
	
	        Console.WriteLine("UserDomainName: {0}", Environment.UserDomainName);
	
	        Console.WriteLine("UserInteractive: {0}", Environment.UserInteractive);
	
	        Console.WriteLine("UserName: {0}", Environment.UserName);
	
	        Console.WriteLine("Version: {0}", Environment.Version.ToString());
	
	        Console.WriteLine("WorkingSet: {0}", Environment.WorkingSet);
	
	
	        string query = "My system drive is %SystemDrive% and my system root is %SystemRoot%";
	        str = Environment.ExpandEnvironmentVariables(query);
	        Console.WriteLine("ExpandEnvironmentVariables: {0}  {1}", nl, str);
	
	        Console.WriteLine("GetEnvironmentVariable: {0}  My temporary directory is {1}.", nl,
	                               Environment.GetEnvironmentVariable("TEMP"));
	
	        Console.WriteLine("GetEnvironmentVariables: ");
	        IDictionary environmentVariables = Environment.GetEnvironmentVariables();
	        foreach (DictionaryEntry de in environmentVariables)
	        {
	            Console.WriteLine("  {0} = {1}", de.Key, de.Value);
	        }
	
	        Console.WriteLine("GetFolderPath: {0}",
	                     Environment.GetFolderPath(Environment.SpecialFolder.System));
	
	        string[] drives = Environment.GetLogicalDrives();
	        Console.WriteLine("GetLogicalDrives: {0}", String.Join(", ", drives));
	    }
	}
	/*
	This example produces results similar to the following:
	(Any result that is lengthy or reveals information that should remain 
	secure has been omitted and marked "!---OMITTED---!".)
	
	C:\>env0 ARBITRARY TEXT
	
	-- Environment members --
	CommandLine: env0 ARBITRARY TEXT
	GetCommandLineArgs: env0, ARBITRARY, TEXT
	CurrentDirectory: C:\Documents and Settings\!---OMITTED---!
	ExitCode: 0
	HasShutdownStarted: False
	MachineName: !---OMITTED---!
	NewLine:
	  first line
	  second line
	  third line
	OSVersion: Microsoft Windows NT 5.1.2600.0
	StackTrace: '   at System.Environment.GetStackTrace(Exception e)
	   at System.Environment.GetStackTrace(Exception e)
	   at System.Environment.get_StackTrace()
	   at Sample.Main()'
	SystemDirectory: C:\WINNT\System32
	TickCount: 17995355
	UserDomainName: !---OMITTED---!
	UserInteractive: True
	UserName: !---OMITTED---!
	Version: !---OMITTED---!
	WorkingSet: 5038080
	ExpandEnvironmentVariables:
	  My system drive is C: and my system root is C:\WINNT
	GetEnvironmentVariable:
	  My temporary directory is C:\DOCUME~1\!---OMITTED---!\LOCALS~1\Temp.
	GetEnvironmentVariables: 
	  !---OMITTED---!
	GetFolderPath: C:\WINNT\System32
	GetLogicalDrives: A:\, C:\, D:\
	
	*/
snippet listversions

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/listversions/program.cs

	using System;
	using Microsoft.Win32;
	
	public class GetDotNetVersion
	{
	    public static void Main()
	    {
	        GetVersionFromRegistry();
	        GetVersionFromEnvironment();
	        Get45or451FromRegistry();
	    }
	    private static void GetVersionFromEnvironment()
	    {
	        Console.WriteLine("Version: " + Environment.Version.ToString());
	
	    }
	private static void Get45or451FromRegistry()
	{
		using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\")) {
			if (ndpKey != null && ndpKey.GetValue("Release") != null) {
				Console.WriteLine("Version: " + CheckFor45DotVersion((int) ndpKey.GetValue("Release")));
			}
	      else {
	         Console.WriteLine("Version 4.5 or later is not detected.");
	      } 
		}
	}
	
	private static string CheckFor45DotVersion(int releaseKey)
	{
	   if (releaseKey >= 393295) {
	      return "4.6 or later";
	   }
	   if ((releaseKey >= 379893)) {
			return "4.5.2 or later";
		}
		if ((releaseKey >= 378675)) {
			return "4.5.1 or later";
		}
		if ((releaseKey >= 378389)) {
			return "4.5 or later";
		}
		return "No 4.5 or later version detected";
	}
	
	    private static void GetVersionFromRegistry()
	    {
	            using (RegistryKey ndpKey = 
	                RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, "").
	                OpenSubKey(@"SOFTWARE\Microsoft\NET Framework Setup\NDP\"))
	            {
	            foreach (string versionKeyName in ndpKey.GetSubKeyNames())
	            {
	                if (versionKeyName.StartsWith("v"))
	                {
	
	                    RegistryKey versionKey = ndpKey.OpenSubKey(versionKeyName);
	                    string name = (string)versionKey.GetValue("Version", "");
	                    string sp = versionKey.GetValue("SP", "").ToString();
	                    string install = versionKey.GetValue("Install", "").ToString();
	                        Console.WriteLine(versionKeyName + "  " + name);
	                    else
	                    {
	                        if (sp != "" && install == "1")
	                        {
	                            Console.WriteLine(versionKeyName + "  " + name + "  SP" + sp);
	                        }
	
	                    }
	                    if (name != "")
	                    {
	                        continue;
	                    }
	                    foreach (string subKeyName in versionKey.GetSubKeyNames())
	                    {
	                        RegistryKey subKey = versionKey.OpenSubKey(subKeyName);
	                        name = (string)subKey.GetValue("Version", "");
	                        if (name != "")
	                            sp = subKey.GetValue("SP", "").ToString();
	                        install = subKey.GetValue("Install", "").ToString();
	                            Console.WriteLine(versionKeyName + "  " + name);
	                        else
	                        {
	                            if (sp != "" && install == "1")
	                            {
	                                Console.WriteLine("  " + subKeyName + "  " + name + "  SP" + sp);
	                            }
	                            else if (install == "1")
	                            {
	                                Console.WriteLine("  " + subKeyName + "  " + name);
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }
	} 
snippet asyncresult_newexamples

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncResult_NewExamples/ad.cs

	using System;
	using System.Threading;
	using System.Runtime.Remoting;
	using System.Runtime.Remoting.Contexts;
	using System.Runtime.Remoting.Messaging;
	
	[Synchronization()]
	public class SampleSynchronized : ContextBoundObject {
	
	    public int Square(int i)  {
	
	        Console.Write("The hash of the thread executing ");
	        Console.WriteLine("SampleSynchronized.Square is: {0}", 
	                             Thread.CurrentThread.GetHashCode());
	        return i*i;
	    }
	}
	
	public delegate int SampSyncSqrDelegate(int i);
	
	public class AsyncResultSample {
	
	    public static void MyCallback(IAsyncResult ar) {
	
	        int value = Convert.ToInt32(ar.AsyncState);
	
	        AsyncResult aResult = (AsyncResult)ar;
	        SampSyncSqrDelegate temp = (SampSyncSqrDelegate)aResult.AsyncDelegate;
	        int result = temp.EndInvoke(ar);
	
	        Console.Write("Simple.SomeMethod (AsyncCallback): Result of ");
	        Console.WriteLine("{0} in SampleSynchronized.Square is {1} ", value, result);
	    }
	
	    public static void Main() {
	
	        int result;
	        int param;
	
	        SampleSynchronized sampSyncObj = new SampleSynchronized();
	
	        if (RemotingServices.IsTransparentProxy(sampSyncObj))
	            Console.WriteLine("sampSyncObj is a proxy.");
	        else
	            Console.WriteLine("sampSyncObj is NOT a proxy.");
	
	        param = 10;
	
	        Console.WriteLine("");
	        Console.WriteLine("Making a synchronous call on the context-bound object:");
	
	        result = sampSyncObj.Square(param);
	        Console.Write("The result of calling sampSyncObj.Square with ");
	        Console.WriteLine("{0} is {1}.", param, result);
	        Console.WriteLine("");
	
	        SampSyncSqrDelegate sampleDelegate = new SampSyncSqrDelegate(sampSyncObj.Square);
	        param = 8;
	
	        Console.WriteLine("Making a single asynchronous call on the context-bound object:");
	
	        IAsyncResult ar1 = sampleDelegate.BeginInvoke( param, 
	                              new AsyncCallback(AsyncResultSample.MyCallback), 
	                              param);
	
	        Console.WriteLine("Waiting for the asynchronous call to complete...");
	        WaitHandle wh = ar1.AsyncWaitHandle;
	        wh.WaitOne();
	
	        wh.Close();
	
	        Console.WriteLine("");
	        Console.WriteLine("Waiting for the AsyncCallback to complete...");
	        Thread.Sleep(1000);
	    }
	}
	
	/* This code produces output similar to the following:
	
	sampSyncObj is a proxy.
	
	Making a synchronous call on the context-bound object:
	The hash of the thread executing SampleSynchronized.Square is: 1
	The result of calling sampSyncObj.Square with 10 is 100.
	
	Making a single asynchronous call on the context-bound object:
	Waiting for the asynchronous call to complete...
	The hash of the thread executing SampleSynchronized.Square is: 6
	
	Waiting for the AsyncCallback to complete...
	Simple.SomeMethod (AsyncCallback): Result of 8 in SampleSynchronized.Square is 64
	 */
snippet microsoft_win32_safehandles_safewaithandle_ctor

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Win32_SafeHandles_SafeWaitHandle_ctor/sample.cs

	using System;
	using Microsoft.Win32.SafeHandles;
	using System.Runtime.InteropServices;
	
	
	class SafeHandlesExample
	{
	
	    static void Main()
	    {
	        UnmanagedMutex uMutex = new UnmanagedMutex("YourCompanyName_SafeHandlesExample_MUTEX");
	
	        try
	        {
	
	            uMutex.Create();
	            Console.WriteLine("Mutex created. Press Enter to release it.");
	            Console.ReadLine();
	
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e);
	        }
	        finally
	        {
	            uMutex.Release();
	            Console.WriteLine("Mutex Released.");
	        }
	
	        Console.ReadLine();
	
	
	    }
	}
	
	class UnmanagedMutex 
	{
	
	
	    [DllImport("kernel32.dll", CharSet = CharSet.Unicode)]
	    static extern IntPtr CreateMutex(IntPtr lpMutexAttributes, bool bInitialOwner,
	   string lpName);
	
	
	    [DllImport("kernel32.dll")]
	    public static extern bool ReleaseMutex(SafeWaitHandle hMutex);
	
	
	
	    private SafeWaitHandle handleValue = null;
	    private IntPtr mutexAttrValue = IntPtr.Zero;
	    private string nameValue = null;
	
	    public UnmanagedMutex(string Name)
	    {
	        nameValue = Name;
	    }
	
	
	    public void Create()
	    {
	        if (nameValue == null && nameValue.Length == 0)
	        {
	            throw new ArgumentNullException("nameValue");
	        }
	
	         IntPtr ptr = CreateMutex(mutexAttrValue,
	                                        true, nameValue);
	
	         handleValue = new SafeWaitHandle(ptr, true);
	
	        if (handleValue.IsInvalid)
	        {
	            Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
	        }
	    }
	
	    public SafeWaitHandle Handle
	    {
	        get
	        {
	            if (!handleValue.IsInvalid)
	            {
	                return handleValue;
	            }
	            else
	            {
	                return null;
	            }
	        }
	
	    }
	
	    public string Name
	    {
	        get
	        {
	            return nameValue;
	        }
	
	    }
	
	
	    public void Release()
	    {
	        ReleaseMutex(handleValue);
	    }
	
	}
snippet aescryptoservprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/aescryptoservprovider/program.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	namespace Aes_Example
	{
	    class AesExample
	    {
	        public static void Main()
	        {
	            string original = "Here is some data to encrypt!";
	
	            using (AesCryptoServiceProvider myAes = new AesCryptoServiceProvider())
	            {
	                byte[] encrypted = EncryptStringToBytes_Aes(original, myAes.Key, myAes.IV);
	
	                string roundtrip = DecryptStringFromBytes_Aes(encrypted, myAes.Key, myAes.IV);
	
	                Console.WriteLine("Original:   {0}", original);
	                Console.WriteLine("Round Trip: {0}", roundtrip);
	            }
	        }
	        static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
	        {
	            if (plainText == null || plainText.Length <= 0)
	                throw new ArgumentNullException("plainText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("IV");
	            byte[] encrypted;
	            
	            using (AesCryptoServiceProvider aesAlg = new AesCryptoServiceProvider())
	            {
	                aesAlg.Key = Key;
	                aesAlg.IV = IV;
	
	                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);
	
	                using (MemoryStream msEncrypt = new MemoryStream())
	                {
	                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
	                    {
	                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
	                        {
	                            swEncrypt.Write(plainText);
	                        }
	                        encrypted = msEncrypt.ToArray();
	                    }
	                }
	            }
	
	            return encrypted;
	
	        }
	
	        static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)
	        {
	            if (cipherText == null || cipherText.Length <= 0)
	                throw new ArgumentNullException("cipherText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("IV");
	
	            string plaintext = null;
	
	            using (AesCryptoServiceProvider aesAlg = new AesCryptoServiceProvider())
	            {
	                aesAlg.Key = Key;
	                aesAlg.IV = IV;
	
	                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
	
	                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
	                {
	                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
	                    {
	                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
	                        {
	
	                            plaintext = srDecrypt.ReadToEnd();
	                        }
	                    }
	                }
	
	            }
	
	            return plaintext;
	
	        }
	    }
	}
snippet microsoft_win32_safehandles_safewaithandle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Microsoft_Win32_SafeHandles_SafeWaitHandle/sample.cs

	using System;
	using Microsoft.Win32.SafeHandles;
	using System.Runtime.InteropServices;
	
	
	class SafeHandlesExample
	{
	
	    static void Main()
	    {
	        UnmanagedMutex uMutex = new UnmanagedMutex("YourCompanyName_SafeHandlesExample_MUTEX");
	
	        try
	        {
	
	            uMutex.Create();
	            Console.WriteLine("Mutex created. Press Enter to release it.");
	            Console.ReadLine();
	
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e);
	        }
	        finally
	        {
	            uMutex.Release();
	            Console.WriteLine("Mutex Released.");
	        }
	
	        Console.ReadLine();
	
	
	    }
	}
	
	class UnmanagedMutex 
	{
	
	
	    [DllImport("kernel32.dll", CharSet=CharSet.Unicode)]
	    static extern SafeWaitHandle CreateMutex(IntPtr lpMutexAttributes, bool bInitialOwner,
	    string lpName);
	
	
	    [DllImport("kernel32.dll")]
	    public static extern bool ReleaseMutex(SafeWaitHandle hMutex);
	
	
	
	    private SafeWaitHandle handleValue = null;
	    private IntPtr mutexAttrValue = IntPtr.Zero;
	    private string nameValue = null;
	
	    public UnmanagedMutex(string Name)
	    {
	        nameValue = Name;
	    }
	
	
	    public void Create()
	    {
	        if (nameValue == null && nameValue.Length == 0)
	        {
	            throw new ArgumentNullException("nameValue");
	        }
	
	        handleValue = CreateMutex(mutexAttrValue,
	                                        true, nameValue);
	
	        if (handleValue.IsInvalid)
	        {
	            Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
	        }
	    }
	
	    public SafeWaitHandle Handle
	    {
	        get
	        {
	            if (!handleValue.IsInvalid)
	            {
	                return handleValue;
	            }
	            else
	            {
	                return null;
	            }
	        }
	
	    }
	
	    public string Name
	    {
	        get
	        {
	            return nameValue;
	        }
	
	    }
	
	
	    public void Release()
	    {
	        ReleaseMutex(handleValue);
	    }
	
	}
snippet cryptography_des_create_file

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_DES_Create_File/fileexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class DESSample
	{
	
	    static void Main()
	    {
	        try
	        {
	            DES DESalg = DES.Create();
	
	            string sData = "Here is some data to encrypt.";
	            string FileName = "CText.txt";
	
	            EncryptTextToFile(sData, FileName, DESalg.Key, DESalg.IV);
	
	            string Final = DecryptTextFromFile(FileName, DESalg.Key, DESalg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static void EncryptTextToFile(String Data, String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName,FileMode.OpenOrCreate);
	
	            DES DESalg = DES.Create();
	
	            CryptoStream cStream = new CryptoStream(fStream, 
	                DESalg.CreateEncryptor(Key,IV), 
	                CryptoStreamMode.Write); 
	
	            StreamWriter sWriter = new StreamWriter(cStream);
	
	            sWriter.WriteLine(Data);
	  
	            sWriter.Close();
	            cStream.Close();
	            fStream.Close();
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	        }
	
	    }
	
	    public static string DecryptTextFromFile(String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate);
	
	            DES DESalg = DES.Create();
	  
	            CryptoStream cStream = new CryptoStream(fStream, 
	                DESalg.CreateDecryptor(Key,IV), 
	                CryptoStreamMode.Read); 
	
	            StreamReader sReader = new StreamReader(cStream);
	
	            string val = sReader.ReadLine();
	    
	            sReader.Close();
	            cStream.Close();
	            fStream.Close();
	
	            return val;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}
snippet cryptography_rc2_create_file

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RC2_Create_File/fileexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class RC2Sample
	{
	
	    static void Main()
	    {
	        try
	        {
	            RC2 RC2alg = RC2.Create();
	
	            string sData = "Here is some data to encrypt.";
	            string FileName = "CText.txt";
	
	            EncryptTextToFile(sData, FileName, RC2alg.Key, RC2alg.IV);
	
	            string Final = DecryptTextFromFile(FileName, RC2alg.Key, RC2alg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static void EncryptTextToFile(String Data, String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName,FileMode.OpenOrCreate);
	
	            RC2 RC2alg = RC2.Create();
	
	            CryptoStream cStream = new CryptoStream(fStream, 
	                RC2alg.CreateEncryptor(Key,IV), 
	                CryptoStreamMode.Write); 
	
	            StreamWriter sWriter = new StreamWriter(cStream);
	
	            sWriter.WriteLine(Data);
	  
	            sWriter.Close();
	            cStream.Close();
	            fStream.Close();
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	        }
	
	    }
	
	    public static string DecryptTextFromFile(String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate);
	
	            RC2 RC2alg = RC2.Create();
	  
	            CryptoStream cStream = new CryptoStream(fStream, 
	                RC2alg.CreateDecryptor(Key,IV), 
	                CryptoStreamMode.Read); 
	
	            StreamReader sReader = new StreamReader(cStream);
	
	            string val = sReader.ReadLine();
	    
	            sReader.Close();
	            cStream.Close();
	            fStream.Close();
	
	            return val;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}
snippet aesmanaged

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/aesmanaged/program.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	namespace Aes_Example
	{
	    class AesExample
	    {
	        public static void Main()
	        {
	            string original = "Here is some data to encrypt!";
	
	            using (AesManaged myAes = new AesManaged())
	            {
	                byte[] encrypted = EncryptStringToBytes_Aes(original, myAes.Key, myAes.IV);
	
	                string roundtrip = DecryptStringFromBytes_Aes(encrypted, myAes.Key, myAes.IV);
	
	                Console.WriteLine("Original:   {0}", original);
	                Console.WriteLine("Round Trip: {0}", roundtrip);
	            }
	        }
	        static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
	        {
	            if (plainText == null || plainText.Length <= 0)
	                throw new ArgumentNullException("plainText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("IV");
	            byte[] encrypted;
	            
	            using (AesManaged aesAlg = new AesManaged())
	            {
	                aesAlg.Key = Key;
	                aesAlg.IV = IV;
	
	                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);
	
	                using (MemoryStream msEncrypt = new MemoryStream())
	                {
	                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
	                    {
	                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
	                        {
	                            swEncrypt.Write(plainText);
	                        }
	                        encrypted = msEncrypt.ToArray();
	                    }
	                }
	            }
	
	
	            return encrypted;
	
	        }
	
	        static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)
	        {
	            if (cipherText == null || cipherText.Length <= 0)
	                throw new ArgumentNullException("cipherText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("IV");
	
	            string plaintext = null;
	
	            using (AesManaged aesAlg = new AesManaged())
	            {
	                aesAlg.Key = Key;
	                aesAlg.IV = IV;
	
	                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
	
	                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
	                {
	                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
	                    {
	                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
	                        {
	
	                            plaintext = srDecrypt.ReadToEnd();
	                        }
	                    }
	                }
	
	            }
	
	            return plaintext;
	
	        }
	    }
	}
snippet genericmethodbuilder

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	class DemoMethodBuilder
	{
	   
	    public static void Main()
	    {
	        AssemblyName asmName = 
	            new AssemblyName("DemoMethodBuilder1");
	        AppDomain domain = AppDomain.CurrentDomain;
	        AssemblyBuilder demoAssembly = 
	            domain.DefineDynamicAssembly(
	                asmName, 
	                AssemblyBuilderAccess.RunAndSave
	            );
	
	        ModuleBuilder demoModule = 
	            demoAssembly.DefineDynamicModule(
	                asmName.Name, 
	                asmName.Name + ".dll"
	            );
	      
	        TypeBuilder demoType = demoModule.DefineType(
	            "DemoType", 
	            TypeAttributes.Public | TypeAttributes.Abstract
	        );
	
	        MethodBuilder demoMethod = demoType.DefineMethod(
	            "DemoMethod", 
	            MethodAttributes.Public | MethodAttributes.Static
	        );
	
	        string[] typeParamNames = {"T", "U"};
	        GenericTypeParameterBuilder[] typeParameters = 
	            demoMethod.DefineGenericParameters(typeParamNames);
	
	        typeParameters[1].SetGenericParameterAttributes( 
	            GenericParameterAttributes.ReferenceTypeConstraint);
	
	        Console.WriteLine("Is DemoMethod generic? {0}", 
	            demoMethod.IsGenericMethod);
	        Console.WriteLine("Is DemoMethod a generic method definition? {0}", 
	            demoMethod.IsGenericMethodDefinition);
	
	        Type[] parms = {typeParameters[0]};
	        demoMethod.SetParameters(parms);
	
	        demoMethod.SetReturnType(typeParameters[1]);
	
	        ILGenerator ilgen = demoMethod.GetILGenerator();
	        ilgen.Emit(OpCodes.Ldnull);
	        ilgen.Emit(OpCodes.Ret);
	
	        Type dt = demoType.CreateType();
	
	        MethodInfo m = dt.GetMethod("DemoMethod");
	        Type[] typeArgs = {typeof(string), typeof(DemoMethodBuilder)};
	        MethodInfo bound = m.MakeGenericMethod(typeArgs);
	        Console.WriteLine(bound);
	
	        demoAssembly.Save(asmName.Name + ".dll");
	    }
	}
	
	/* This code example produces the following output:
	Is DemoMethod generic? True
	Is DemoMethod a generic method definition? True
	DemoMethodBuilder DemoMethod[String,DemoMethodBuilder](System.String)
	*/
	
	
	

snippet transactedinstaller

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TransactedInstaller/transactedinstaller.cs

	
	/*
	   The following example demonstrates the constructor, Install(IDictionary) and 
	   Uninstall(IDictionary) methods of the 'TransactedInstaller' class.
	   This example provides an implementation similar to that of 'InstallUtil.exe'.
	   It installs assemblies with the options preceding that particular assembly.
	   If an option is not specified for an assembly the previous assemblies options
	   are taken if there is a previous assembly in the list. If the '/u' or
	   '/uninstall' option is specified then the assemblies are uninstalled.
	   If the '/?' or '/help' option is provided then the help information is
	   printed to the console.
	 */
	
	using System;
	using System.ComponentModel;
	using System.Collections;
	using System.Configuration.Install;
	using System.IO;
	
	public class TransactedInstaller_Example
	{
	   public static void Main(String[] args)
	   {
	      ArrayList myOptions = new ArrayList();
	      String myOption;
	      bool toUnInstall = false;
	      bool toPrintHelp = false;
	      TransactedInstaller myTransactedInstaller = new TransactedInstaller();
	      AssemblyInstaller myAssemblyInstaller;
	      InstallContext myInstallContext;
	
	      try
	      {
	         for(int i = 0; i < args.Length; i++)
	         {
	            if(args[i].StartsWith("/") || args[i].StartsWith("-"))
	            {
	               myOption = args[i].Substring(1);
	               if(String.Compare(myOption, "u", true) == 0 ||
	                  String.Compare(myOption, "uninstall", true) == 0)
	               {
	                  toUnInstall = true;
	                  continue;
	               }
	               if(String.Compare(myOption, "?", true) == 0 ||
	                  String.Compare(myOption, "help", true) == 0)
	               {
	                  toPrintHelp = true;
	                  continue;
	               }
	               myOptions.Add(myOption);
	            }
	            else
	            {
	               if(!File.Exists(args[i]))
	               {
	                  Console.WriteLine("\nError : {0} - Assembly file doesn't exist.",
	                     args[i]);
	                  return;
	               }
	            
	               myAssemblyInstaller = 
	                  new AssemblyInstaller(args[i], 
	                  (string[]) myOptions.ToArray(typeof(string)));
	               myTransactedInstaller.Installers.Add(myAssemblyInstaller);
	            }
	         }
	         if(toPrintHelp || myTransactedInstaller.Installers.Count == 0)
	         {
	            PrintHelpMessage();
	            return;
	         }
	
	         myInstallContext = 
	            new InstallContext("Install.log", 
	            (string[]) myOptions.ToArray(typeof(string)));
	         myTransactedInstaller.Context = myInstallContext;
	
	         if(!toUnInstall)
	            myTransactedInstaller.Install(new Hashtable());
	         else
	            myTransactedInstaller.Uninstall(null);
	      }
	      catch(Exception e)
	      {
	         Console.WriteLine("\nException raised : {0}", e.Message);
	      }  
	   }  
	
	   public static void PrintHelpMessage()
	   {
	      Console.WriteLine("Usage : TransactedInstaller [/u | /uninstall] [option [...]] assembly" +
	         "[[option [...]] assembly] [...]]");
	      Console.WriteLine("TransactedInstaller executes the installers in each of" +
	         " the given assembly. If /u or /uninstall option" +
	         " is given it uninstalls the assemblies.");
	   }
	} 
snippet decimal_example

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Decimal_Example/source.cs

	using System;
	
	namespace Snippets
	{
		class Launcher {
			static void Main(string[] args)
			{
				PiggyBank pb = new PiggyBank();
	
				for(int i=0; i<378; i++) {
					pb.AddPenny();
				}
	
				Console.WriteLine(pb);
	
				Console.ReadLine();
			}
		}
	
		class PiggyBank {
			protected decimal MyFortune;
	
			public void AddPenny() {
				MyFortune = Decimal.Add(MyFortune, .01m);
			}
	
			public decimal Capacity {
				get {
					return Decimal.MaxValue;
				}
			}
	
			public decimal Dollars {
				get {
					return Decimal.Floor(MyFortune);
				}
			}
	
			public decimal Cents {
				get {
					return Decimal.Subtract(MyFortune, Decimal.Floor(MyFortune));
				}
			}
	
			public override string ToString() {
				return MyFortune.ToString("C")+" in piggy bank";
			}
		}
	}
	
	namespace Snippets2 {
		class PiggyBank {
			public decimal Capacity {
				get {
					return Decimal.MaxValue;
				}
			}
	
			protected decimal MyFortune;
	
			public void AddPenny() {
				MyFortune += .01m;
			}
		}
	}
	
	namespace Snippets3 {
		class PiggyBank {
			public decimal Dollars {
				get {
					return Decimal.Floor(MyFortune);
				}
			}
	
			protected decimal MyFortune;
	
			public void AddPenny() {
				MyFortune += .01m;
			}
		}
	}
	
	namespace Snippets4 {
		class PiggyBank {
			public decimal Cents {
				get {
					return Decimal.Subtract(MyFortune, Decimal.Floor(MyFortune));
				}
			}
	
			protected decimal MyFortune;
	
			public void AddPenny() {
				MyFortune += .01m;
			}
		}
	}
	
	namespace Snippets5 {
		class PiggyBank {
			public void AddPenny() {
				MyFortune = Decimal.Add(MyFortune, .01m);
			}
	
			public override string ToString() {
				return MyFortune.ToString("C")+" in piggy bank";
			}
	
			protected decimal MyFortune;
		}
	} 
snippet managedwindowsservice

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ManagedWindowsService/source.cs

	using System;
	using System.ServiceProcess;
	using System.Threading;
	using System.Windows.Forms;
	using System.Diagnostics;
	using Microsoft.Win32;
	using System.ComponentModel;
	using System.Configuration.Install;
	
	namespace SimpleServiceCs
	{
	    public class SimpleService : ServiceBase
	    {
	        static void Main(string[] args)
	        {
	            ServiceBase.Run(new SimpleService());
	        }
	
	        protected override void OnStart(string[] args)
	        {
	            EventLog.WriteEntry("SimpleService", "Starting SimpleService");
	            new Thread(RunMessagePump).Start();
	        }
	
	        void RunMessagePump()
	        {
	            EventLog.WriteEntry("SimpleService.MessagePump", "Starting SimpleService Message Pump");
	            Application.Run(new HiddenForm());
	        }
	
	        protected override void OnStop()
	        {
	            Application.Exit();
	        }
	    }
	
	    public partial class HiddenForm : Form
	    {
	        public HiddenForm()
	        {
	            InitializeComponent();
	        }
	
	        private void HiddenForm_Load(object sender, EventArgs e)
	        {
	            SystemEvents.TimeChanged += new EventHandler(SystemEvents_TimeChanged);
	            SystemEvents.UserPreferenceChanged += new UserPreferenceChangedEventHandler(SystemEvents_UPCChanged);
	        }
	
	        private void HiddenForm_FormClosing(object sender, FormClosingEventArgs e)
	        {
	            SystemEvents.TimeChanged -= new EventHandler(SystemEvents_TimeChanged);
	            SystemEvents.UserPreferenceChanged -= new UserPreferenceChangedEventHandler(SystemEvents_UPCChanged);
	        }
	
	        private void SystemEvents_TimeChanged(object sender, EventArgs e)
	        {
	            EventLog.WriteEntry("SimpleService.TimeChanged", "Time changed; it is now " +
	                DateTime.Now.ToLongTimeString());
	        }
	
	        private void SystemEvents_UPCChanged(object sender, UserPreferenceChangedEventArgs e)
	        {
	            EventLog.WriteEntry("SimpleService.UserPreferenceChanged", e.Category.ToString());
	        }
	    }
	
	    partial class HiddenForm
	    {
	        private System.ComponentModel.IContainer components = null;
	
	        protected override void Dispose(bool disposing)
	        {
	            if (disposing && (components != null))
	            {
	                components.Dispose();
	            }
	            base.Dispose(disposing);
	        }
	
	        private void InitializeComponent()
	        {
	            this.SuspendLayout();
	            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
	            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
	            this.ClientSize = new System.Drawing.Size(0, 0);
	            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
	            this.Name = "HiddenForm";
	            this.Text = "HiddenForm";
	            this.WindowState = System.Windows.Forms.FormWindowState.Minimized;
	            this.Load += new System.EventHandler(this.HiddenForm_Load);
	            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.HiddenForm_FormClosing);
	            this.ResumeLayout(false);
	
	        }
	    }
	
	    [RunInstaller(true)]
	    public class SimpleInstaller : Installer
	    {
	        private ServiceInstaller serviceInstaller;
	        private ServiceProcessInstaller processInstaller;
	
	        public SimpleInstaller()
	        {
	            processInstaller = new ServiceProcessInstaller();
	            serviceInstaller = new ServiceInstaller();
	
	            processInstaller.Account = ServiceAccount.LocalSystem;
	
	            serviceInstaller.StartType = ServiceStartMode.Automatic;
	
	            serviceInstaller.ServiceName = "Simple Service";
	
	            Installers.Add(serviceInstaller);
	            Installers.Add(processInstaller);
	        }
	    }
	}

snippet stringbuilder_insert

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/stringbuilder_insert/insert.cs

	using System;
	using System.Text;
	
	class Sample 
	{
	    static string initialValue = "--[]--";
	    static StringBuilder sb;
	
	    public static void Main() 
	    {
	    string      xyz       = "xyz";
	    char[]      abc       = {'a', 'b', 'c'};
	    char        star      = '*';
	    Object 	obj       = 0;
	
	    bool        xBool     = true;
	    byte        xByte     = 1;
	    short       xInt16    = 2;
	    int         xInt32    = 3;
	    long        xInt64    = 4;
	    Decimal     xDecimal  = 5;
	    float       xSingle   = 6.6F;
	    double      xDouble   = 7.7;
	
	    ushort      xUInt16   = 8;
	    uint        xUInt32   = 9;
	    ulong       xUInt64   = 10;
	    sbyte       xSByte    = -11;
	    Console.WriteLine("StringBuilder.Insert method");
	    sb = new StringBuilder(initialValue);
	
	    sb.Insert(3, xyz, 2);
	    Show(1, sb);
	
	    sb.Insert(3, xyz);
	    Show(2, sb);
	
	    sb.Insert(3, star);
	    Show(3, sb);
	
	    sb.Insert(3, abc);
	    Show(4, sb);
	
	    sb.Insert(3, abc, 1, 2);
	    Show(5, sb);
	
	    Show(6, sb);
	
	    Show(7, sb);
	
	    Show(8, sb);
	
	    Show(9, sb);
	
	    Show(10, sb);
	
	    Show(11, sb);
	
	    Show(12, sb);
	
	    Show(13, sb);
	
	    Show(14, sb);
	
	    Show(15, sb);
	
	    Show(16, sb);
	
	    Show(17, sb);
	
	    Show(18, sb);
	    }
	
	    public static void Show(int overloadNumber, StringBuilder sbs)
	    {
	    Console.WriteLine("{0,2:G} = {1}", overloadNumber, sbs.ToString());
	    sb = new StringBuilder(initialValue);
	    }
	}
	/*
	This example produces the following results:
	
	StringBuilder.Insert method
	 1 = --[xyzxyz]--
	 2 = --[xyz]--
	 3 = --[*]--
	 4 = --[abc]--
	 5 = --[bc]--
	 6 = --[True]--
	 7 = --[0]--
	 8 = --[1]--
	 9 = --[2]--
	10 = --[3]--
	11 = --[4]--
	12 = --[5]--
	13 = --[6.6]--
	14 = --[7.7]--
	15 = --[8]--
	16 = --[9]--
	17 = --[10]--
	18 = --[-11]--
	
	*/
snippet cryptography_des_createstring_file

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_DES_Createstring_File/fileexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class DESSample
	{
	
	    static void Main()
	    {
	        try
	        {
	            DES DESalg = DES.Create("DES");
	
	            string sData = "Here is some data to encrypt.";
	            string FileName = "CText.txt";
	
	            EncryptTextToFile(sData, FileName, DESalg.Key, DESalg.IV);
	
	            string Final = DecryptTextFromFile(FileName, DESalg.Key, DESalg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static void EncryptTextToFile(String Data, String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName,FileMode.OpenOrCreate);
	
	            DES DESalg = DES.Create();
	
	            CryptoStream cStream = new CryptoStream(fStream, 
	                DESalg.CreateEncryptor(Key,IV), 
	                CryptoStreamMode.Write); 
	
	            StreamWriter sWriter = new StreamWriter(cStream);
	
	            sWriter.WriteLine(Data);
	  
	            sWriter.Close();
	            cStream.Close();
	            fStream.Close();
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	        }
	
	    }
	
	    public static string DecryptTextFromFile(String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate);
	
	            DES DESalg = DES.Create();
	  
	            CryptoStream cStream = new CryptoStream(fStream, 
	                DESalg.CreateDecryptor(Key,IV), 
	                CryptoStreamMode.Read); 
	
	            StreamReader sReader = new StreamReader(cStream);
	
	            string val = sReader.ReadLine();
	    
	            sReader.Close();
	            cStream.Close();
	            fStream.Close();
	
	            return val;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}
snippet cryptography_rc2_createstring_file

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RC2_Createstring_File/fileexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class RC2Sample
	{
	
	    static void Main()
	    {
	        try
	        {
	            RC2 RC2alg = RC2.Create("RC2");
	
	            string sData = "Here is some data to encrypt.";
	            string FileName = "CText.txt";
	
	            EncryptTextToFile(sData, FileName, RC2alg.Key, RC2alg.IV);
	
	            string Final = DecryptTextFromFile(FileName, RC2alg.Key, RC2alg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static void EncryptTextToFile(String Data, String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName,FileMode.OpenOrCreate);
	
	            RC2 RC2alg = RC2.Create();
	
	            CryptoStream cStream = new CryptoStream(fStream, 
	                RC2alg.CreateEncryptor(Key,IV), 
	                CryptoStreamMode.Write); 
	
	            StreamWriter sWriter = new StreamWriter(cStream);
	
	            sWriter.WriteLine(Data);
	  
	            sWriter.Close();
	            cStream.Close();
	            fStream.Close();
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	        }
	
	    }
	
	    public static string DecryptTextFromFile(String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate);
	
	            RC2 RC2alg = RC2.Create();
	  
	            CryptoStream cStream = new CryptoStream(fStream, 
	                RC2alg.CreateDecryptor(Key,IV), 
	                CryptoStreamMode.Read); 
	
	            StreamReader sReader = new StreamReader(cStream);
	
	            string val = sReader.ReadLine();
	    
	            sReader.Close();
	            cStream.Close();
	            fStream.Close();
	
	            return val;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}
snippet cryptography_3des_createstring_file

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_3DES_Createstring_File/fileexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class TripleDESSample
	{
	
	    static void Main()
	    {
	        try
	        {
	            TripleDES TripleDESalg = TripleDES.Create("TripleDES");
	
	            string sData = "Here is some data to encrypt.";
	            string FileName = "CText.txt";
	
	            EncryptTextToFile(sData, FileName, TripleDESalg.Key, TripleDESalg.IV);
	
	            string Final = DecryptTextFromFile(FileName, TripleDESalg.Key, TripleDESalg.IV);
	            
	            Console.WriteLine(Final);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	       
	    }
	
	    public static void EncryptTextToFile(String Data, String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName,FileMode.OpenOrCreate);
	
	            TripleDES tripleDESalg = TripleDES.Create();
	
	            CryptoStream cStream = new CryptoStream(fStream, 
	                tripleDESalg.CreateEncryptor(Key,IV), 
	                CryptoStreamMode.Write); 
	
	            StreamWriter sWriter = new StreamWriter(cStream);
	
	            sWriter.WriteLine(Data);
	  
	            sWriter.Close();
	            cStream.Close();
	            fStream.Close();
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	        }
	
	    }
	
	    public static string DecryptTextFromFile(String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate);
	
	            TripleDES tripleDESalg = TripleDES.Create();
	  
	            CryptoStream cStream = new CryptoStream(fStream, 
	                tripleDESalg.CreateDecryptor(Key,IV), 
	                CryptoStreamMode.Read); 
	
	            StreamReader sReader = new StreamReader(cStream);
	
	            string val = sReader.ReadLine();
	    
	            sReader.Close();
	            cStream.Close();
	            fStream.Close();
	
	            return val;
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	        catch(UnauthorizedAccessException  e)
	        {
	            Console.WriteLine("A file error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}
snippet aessample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/aessample/program.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	namespace Aes_Example
	{
	    class AesExample
	    {
	        public static void Main()
	        {
	            string original = "Here is some data to encrypt!";
	
	            using (Aes myAes = Aes.Create())
	            {
	
	                byte[] encrypted = EncryptStringToBytes_Aes(original, myAes.Key, myAes.IV);
	
	                string roundtrip = DecryptStringFromBytes_Aes(encrypted, myAes.Key, myAes.IV);
	
	                Console.WriteLine("Original:   {0}", original);
	                Console.WriteLine("Round Trip: {0}", roundtrip);
	            }
	        }
	        static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
	        {
	            if (plainText == null || plainText.Length <= 0)
	                throw new ArgumentNullException("plainText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("IV");
	            byte[] encrypted;
	            
	            using (Aes aesAlg = Aes.Create())
	            {
	                aesAlg.Key = Key;
	                aesAlg.IV = IV;
	
	                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);
	
	                using (MemoryStream msEncrypt = new MemoryStream())
	                {
	                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
	                    {
	                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
	                        {
	                            swEncrypt.Write(plainText);
	                        }
	                        encrypted = msEncrypt.ToArray();
	                    }
	                }
	            }
	
	
	            return encrypted;
	
	        }
	
	        static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)
	        {
	            if (cipherText == null || cipherText.Length <= 0)
	                throw new ArgumentNullException("cipherText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("IV");
	
	            string plaintext = null;
	
	            using (Aes aesAlg = Aes.Create())
	            {
	                aesAlg.Key = Key;
	                aesAlg.IV = IV;
	
	                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
	
	                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
	                {
	                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
	                    {
	                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
	                        {
	
	                            plaintext = srDecrypt.ReadToEnd();
	                        }
	                    }
	                }
	
	            }
	
	            return plaintext;
	
	        }
	    }
	}

snippet constructorbuilder_setimplementationflags

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ConstructorBuilder_SetImplementationFlags/constructorbuilder_setimplementationflags.cs

	
	/* The following program demonstrates the 'SetImplementationFlags'
	   method of ConstructorBuilder class. It creates an assembly in the
	   current domain with a dynamic module in the assembly. Constructor 
	   builder is used in conjunction with the 'TypeBuilder' class to create
	   constructor at run time. It then sets the method implementation flags
	   for the constructor and displays the same.
	*/
	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	
	internal class MyConstructorBuilder
	{
	   Type myType1;
	   ModuleBuilder myModuleBuilder=null;
	   AssemblyBuilder myAssemblyBuilder = null;
	
	   internal MyConstructorBuilder()
	   {
	      try
	      {
	         MethodBuilder myMethodBuilder = null;
	         AppDomain myCurrentDomain = AppDomain.CurrentDomain;
	         AssemblyName myAssemblyName = new AssemblyName();
	         myAssemblyName.Name = "TempAssembly";
	         myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly
	            (myAssemblyName, AssemblyBuilderAccess.Run);
	         myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("TempModule", true);
	         FieldInfo myFieldInfo2 =
	            myModuleBuilder.DefineUninitializedData("myField", 2, FieldAttributes.Public);
	         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("TempClass",TypeAttributes.Public);
	         FieldBuilder myGreetingField = myTypeBuilder.DefineField("Greeting", 
	            typeof(String), FieldAttributes.Public);
	         Type[] myConstructorArgs = { typeof(String) };
	         ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(
	            MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);
	         myConstructor.SetImplementationFlags(MethodImplAttributes.PreserveSig | MethodImplAttributes.Runtime);
	         MethodImplAttributes myMethodAttributes = myConstructor.GetMethodImplementationFlags();
	         Type myAttributeType = typeof(MethodImplAttributes);
	         int myAttribValue = (int) myMethodAttributes;
	         if(! myAttributeType.IsEnum)
	         {
	            Console.WriteLine("This is not an Enum");
	         }
	         FieldInfo[] myFieldInfo = myAttributeType.GetFields(BindingFlags.Public | BindingFlags.Static);
	         Console.WriteLine("The Field info names of the MethodImplAttributes for the constructor are:");
	         for (int i = 0; i < myFieldInfo.Length; i++)
	         {
	            int myFieldValue = (Int32)myFieldInfo[i].GetValue(null);
	            if ((myFieldValue & myAttribValue) == myFieldValue)
	            {
	               Console.WriteLine("   " + myFieldInfo[i].Name);
	            }
	         }
	         myMethodBuilder = myTypeBuilder.DefineMethod
	            ("HelloWorld",MethodAttributes.Public,null,null);
	         ILGenerator myILGenerator2 = myMethodBuilder.GetILGenerator();
	         myILGenerator2.EmitWriteLine("Hello World from global");
	         myILGenerator2.Emit(OpCodes.Ret);
	         myModuleBuilder.CreateGlobalFunctions();
	         myType1 = myTypeBuilder.CreateType();
	      }
	      catch(InvalidOperationException ex)
	      {
	         Console.WriteLine("The following exception has occurred : "+ex.Message);
	      }
	      catch(Exception ex)
	      {
	         Console.WriteLine("The following exception has occurred : "+ex.Message);
	      }
	   }
	
	   internal Type MyTypeProperty
	   {
	      get
	      {
	         return this.myType1;
	      }
	   }
	
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      MyConstructorBuilder myConstructorBuilder = new MyConstructorBuilder();
	      Type myType1 = myConstructorBuilder.MyTypeProperty;
	      if (null != myType1)
	      {
	         Console.WriteLine("Instantiating the new type...");
	         Object[] myObject = {"hello"};
	         object myObject1 = Activator.CreateInstance(myType1,myObject,null);
	         MethodInfo myMethodInfo = myType1.GetMethod("HelloWorld");
	         if (null != myMethodInfo)
	         {
	            Console.WriteLine("Invoking dynamically created HelloWorld method...");
	            myMethodInfo.Invoke(myObject1, null);
	         }
	         else
	         {
	            Console.WriteLine("Could not locate HelloWorld method");
	         }
	      }
	      else
	      {
	         Console.WriteLine("Could not access Type.");
	      }
	   }
	}

snippet ilgenerator_beginfinallyblock_2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ILGenerator_BeginFinallyBlock_2/ilgenerator_beginfinallyblock_2.cs

	
	/*
	   The following program demonstrates the 'BeginExceptFilterBlock()' method and
	   'BeginFinallyBlock()' of 'ILGenerator' class. Exception is raised by passing
	   two integer values which are out of range, the same is caught in the
	   'BeginExceptionBlock' which is non-filtered and then emits the MSIL
	   instructions in 'BeginExceptFilterBlock' and 'BeginFinallyBlock'.
	*/
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	
	public class ILGenerator_BeginFinallyBlock
	{
	   public static Type AddType()
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "AdderExceptionAsm";
	
	      AppDomain myAppDomain = Thread.GetDomain();
	      AssemblyBuilder myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName,
	         AssemblyBuilderAccess.Run);
	
	      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("AdderExceptionMod");
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("Adder");
	      Type[] adderParams = new Type[] {typeof(int), typeof(int)};
	
	      MethodBuilder myMethodBuilder = myTypeBuilder.DefineMethod("DoAdd",MethodAttributes.Public |
	         MethodAttributes.Static,typeof(int),adderParams);
	      ILGenerator myAdderIL = myMethodBuilder.GetILGenerator();
	
	      ConstructorInfo myConstructorInfo = typeof(OverflowException).GetConstructor(
	         new Type[]{typeof(string)});
	      MethodInfo myExToStrMI = typeof(OverflowException).GetMethod("ToString");
	      MethodInfo myWriteLineMI = typeof(Console).GetMethod("WriteLine",new Type[]
	         {typeof(string),typeof(object)});
	
	      LocalBuilder myLocalBuilder1 = myAdderIL.DeclareLocal(typeof(int));
	      LocalBuilder myLocalBuilder2 = myAdderIL.DeclareLocal(typeof(OverflowException));
	
	      Label myFailedLabel = myAdderIL.DefineLabel();
	      Label myEndOfMethodLabel = myAdderIL.DefineLabel();
	
	      Label myLabel = myAdderIL.BeginExceptionBlock();
	
	      myAdderIL.Emit(OpCodes.Ldarg_0);
	      myAdderIL.Emit(OpCodes.Ldc_I4_S, 10);
	      myAdderIL.Emit(OpCodes.Bgt_S, myFailedLabel);
	
	      myAdderIL.Emit(OpCodes.Ldarg_1);
	      myAdderIL.Emit(OpCodes.Ldc_I4_S, 10);
	      myAdderIL.Emit(OpCodes.Bgt_S, myFailedLabel);
	
	      myAdderIL.Emit(OpCodes.Ldarg_0);
	      myAdderIL.Emit(OpCodes.Ldarg_1);
	      myAdderIL.Emit(OpCodes.Add_Ovf_Un);
	      myAdderIL.Emit(OpCodes.Stloc_S, myLocalBuilder1);
	      myAdderIL.Emit(OpCodes.Br_S, myEndOfMethodLabel);
	
	      myAdderIL.MarkLabel(myFailedLabel);
	      myAdderIL.Emit(OpCodes.Ldstr, "Cannot accept values over 10 for add.");
	      myAdderIL.Emit(OpCodes.Newobj, myConstructorInfo);
	
	      myAdderIL.Emit(OpCodes.Stloc_S, myLocalBuilder2);
	      myAdderIL.Emit(OpCodes.Ldloc_S, myLocalBuilder2);
	
	      myAdderIL.ThrowException(typeof(OverflowException));
	
	      myAdderIL.BeginExceptFilterBlock();
	      myAdderIL.EmitWriteLine("Except filter block called.");
	
	      myAdderIL.BeginCatchBlock(null);
	      
	      myAdderIL.BeginCatchBlock(typeof(OverflowException));
	
	      myAdderIL.Emit(OpCodes.Ldstr, "{0}");
	      myAdderIL.Emit(OpCodes.Ldloc_S, myLocalBuilder2);
	      myAdderIL.EmitCall(OpCodes.Callvirt, myExToStrMI, null);
	      myAdderIL.EmitCall(OpCodes.Call, myWriteLineMI, null);
	      myAdderIL.Emit(OpCodes.Ldc_I4_M1);
	      myAdderIL.Emit(OpCodes.Stloc_S, myLocalBuilder1);
	
	      myAdderIL.BeginFinallyBlock();
	      myAdderIL.EmitWriteLine("Finally block called.");
	
	      myAdderIL.EndExceptionBlock();
	
	      myAdderIL.MarkLabel(myEndOfMethodLabel);
	      myAdderIL.Emit(OpCodes.Ldloc_S, myLocalBuilder1);
	      myAdderIL.Emit(OpCodes.Ret);
	
	      return myTypeBuilder.CreateType();
	   }
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      Type myAddType = AddType();
	      object myObject1 = Activator.CreateInstance(myAddType);
	      object[] myObject2 = new object[]{15,15};
	      myAddType.InvokeMember("DoAdd", BindingFlags.InvokeMethod,
	         null, myObject1, myObject2);
	   }
	}
snippet installeventargs

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallEventArgs/installeventargs.cs

	
	/*
	   The following example demonstrates the 'InstallEventArgs()' and 
	   'InstallEventArgs(IDictionary)' constructors and the 'SavedState'
	   property of the 'InstallEventArgs' property. There are two new
	   events called 'BeforeCommit' and 'AfterCommit'. The handlers of
	   these events are invoked from the protected methods named 'OnBeforeCommit'
	   and 'OnAfterCommit' respectively. These events are raised when the 
	   'Commit' method is called.
	   
	   Note : 
	   a) The two events named 'BeforeCommit' and 'AfterCommit' are added 
	   only for example purposes, since there are already
	   events named 'Committing' and 'Committed' which perform the same
	   function. This example can be made a basis for a new stage being
	   added to the already existing four stages namely 'Install', 'Commit',
	   'Rollback' and 'Uninstall'.
	   
	   b) Run the example with the help of InstallUtil.exe
	      InstallUtil InstallEventArgs.exe
	*/
	
	
	using System;
	using System.ComponentModel;
	using System.Collections;
	using System.Configuration.Install;
	using System.IO;
	
	[RunInstaller(true)]
	public class MyInstaller : Installer
	{
	   public event InstallEventHandler BeforeCommit;
	   public event InstallEventHandler AfterCommit;
	   
	   public MyInstaller()
	   {
	      BeforeCommit += new InstallEventHandler(BeforeCommitHandler);
	      AfterCommit += new InstallEventHandler(AfterCommitHandler);
	   }
	
	   public override void Install(IDictionary savedState)
	   {
	      base.Install(savedState);
	      Console.WriteLine("Install ...\n");
	   }
	
	   public override void Commit(IDictionary savedState)
	   {
	      Console.WriteLine("Before Committing ...\n");
	      OnBeforeCommit(savedState);
	      base.Commit(savedState);
	      Console.WriteLine("Committing ...\n");
	      OnAfterCommit(savedState);
	      Console.WriteLine("After Committing ...\n");
	   }
	
	   public override void Rollback(IDictionary savedState)
	   {
	      base.Rollback(savedState);
	      Console.WriteLine("RollBack ...\n");
	   }
	
	   public override void Uninstall(IDictionary savedState)
	   {
	      base.Uninstall(savedState);
	      Console.WriteLine("UnInstall ...\n");
	   }
	   
	   protected virtual void OnBeforeCommit(IDictionary savedState)
	   {
	      if(BeforeCommit != null)
	         BeforeCommit(this, new InstallEventArgs(savedState)); 
	   }
	
	   protected virtual void OnAfterCommit(IDictionary savedState)
	   {
	      if(AfterCommit != null)
	         AfterCommit(this, new InstallEventArgs());
	   }
	
	   private void BeforeCommitHandler(Object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("BeforeCommitHandler event handler has been called\n");
	      Console.WriteLine("The count of saved state objects are : {0}\n",
	         e.SavedState.Count);
	   }
	
	   private void AfterCommitHandler(Object sender, InstallEventArgs e)
	   {
	      Console.WriteLine("AfterCommitHandler event handler has been called\n");
	   }
	}
	
	public class MyAssembly1
	{
	   public static void Main()
	   {
	      Console.WriteLine("This assembly is just an example for the Installer\n");
	   }
	}
	
	
	

snippet runtime_interopservices_marshal_securestringtohglobaluni

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Runtime_InteropServices_Marshal_SecureStringToHGlobalUni/sample.cs

	using System;
	using System.ComponentModel;
	using System.Runtime.InteropServices;
	using System.Security;
	using System.Security.Principal;
	
	class Example
	{
	     [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
	     internal static extern bool LogonUser(String username, String domain, IntPtr password,
	             int logonType, int logonProvider, ref IntPtr token);
	
	     [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
	     public extern static bool CloseHandle(IntPtr handle);
	
	     const int LOGON32_PROVIDER_DEFAULT = 0;
	     const int LOGON32_LOGON_INTERACTIVE = 2;
	
	     static void Main()
	     {
	          Console.WriteLine("Before impersonation: {0}",
	                            WindowsIdentity.GetCurrent().Name);
	
	          Console.Write("Please enter your domain: ");
	          string domain = Console.ReadLine();
	
	          Console.Write("Please enter your user name: ");
	          string username = Console.ReadLine();
	
	          Console.Write("Please enter your password: ");
	          SecureString passWord = GetPassword();
	
	          try {
	             WindowsImpersonationContext userContext =
	                           ImpersonateUser(passWord, username, domain);
	             Console.WriteLine("After impersonation: {0}",
	                               WindowsIdentity.GetCurrent().Name);
	          }
	          catch (ArgumentException e) {
	             Console.WriteLine("{0}: {1}", e.GetType().Name, e.Message);
	          }
	          catch (Win32Exception e) {
	             Console.WriteLine("{0}: {1}", e.GetType().Name, e.Message);
	          }
	          finally {
	             passWord.Dispose();
	          }
	     }
	
	     public static SecureString GetPassword()
	     {
	         SecureString password = new SecureString();
	
	         ConsoleKeyInfo nextKey = Console.ReadKey(true);
	
	         while (nextKey.Key != ConsoleKey.Enter) {
	             if (nextKey.Key == ConsoleKey.Backspace) {
	                 if (password.Length > 0) {
	                     password.RemoveAt(password.Length - 1);
	
	                     Console.Write(nextKey.KeyChar);
	                     Console.Write(" ");
	                     Console.Write(nextKey.KeyChar);
	                 }
	             }
	             else {
	                 password.AppendChar(nextKey.KeyChar);
	                 Console.Write("*");
	             }
	
	             nextKey = Console.ReadKey(true);
	         }
	
	         Console.WriteLine();
	
	         password.MakeReadOnly();
	         return password;
	     }
	
	     public static WindowsImpersonationContext ImpersonateUser(SecureString password, string userName, string domainName)
	     {
	         IntPtr tokenHandle = IntPtr.Zero;
	         IntPtr passwordPtr = IntPtr.Zero;
	         bool returnValue = false;
	         int error = 0;
	         
	         passwordPtr = Marshal.SecureStringToGlobalAllocUnicode(password);
	
	         returnValue = LogonUser(userName, domainName, passwordPtr,
	                                 LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,
	                                 ref tokenHandle);
	         if (!returnValue && tokenHandle == IntPtr.Zero)
	            error = Marshal.GetLastWin32Error();
	
	         Marshal.ZeroFreeGlobalAllocUnicode(passwordPtr);
	         CloseHandle(tokenHandle);
	
	         if (error != 0) {
	             throw new System.ComponentModel.Win32Exception(error);
	         }
	         WindowsIdentity newId = new WindowsIdentity(tokenHandle);
	
	         return newId.Impersonate();
	     }
	}
snippet constructorbuilder_getmodule_4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ConstructorBuilder_GetModule_4/constructorbuilder_getmodule_4.cs

	
	/* The following program demonstrates the 'GetModule','GetToken',
	   'GetMethodImplementationFlags' and 'GetParameters'
	   methods of 'ConstructorBuilder' class.  Create the assembly
	   in the current domain with dynamic module in the assembly. Constructor
	   builder is used in conjunction with the 'TypeBuilder' class to create
	   constructor at run time. Set a custom attribute using a custom attribute
	   builder and displays module name, Token id and parameter info of this class.
	*/
	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security;
	using System.Security.Permissions;
	
	internal class MyConstructorBuilder
	{
	   Type myType1;
	   ModuleBuilder myModuleBuilder=null;
	   AssemblyBuilder myAssemblyBuilder = null;
	
	   internal MyConstructorBuilder()
	   {
	
	      MethodBuilder myMethodBuilder = null;
	      AppDomain myCurrentDomain = AppDomain.CurrentDomain;
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "TempAssembly";
	      myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly
	                                    (myAssemblyName, AssemblyBuilderAccess.Run);
	      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("TempModule");
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("TempClass",TypeAttributes.Public);
	      FieldBuilder myGreetingField = myTypeBuilder.DefineField("Greeting",
	         typeof(String), FieldAttributes.Public);
	      Type[] myConstructorArgs = { typeof(String) };
	      ConstructorBuilder myConstructorBuilder = myTypeBuilder.DefineConstructor(
	         MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);
	      Module myModule = myConstructorBuilder.GetModule();
	      Console.WriteLine("Module Name : " + myModule.Name);
	      MethodToken myMethodToken = myConstructorBuilder.GetToken();
	      Console.WriteLine("Constructor Token is : " + myMethodToken.Token);
	      MethodImplAttributes myMethodImplAttributes = myConstructorBuilder.GetMethodImplementationFlags();
	      Console.WriteLine("MethodImplAttributes : "  + myMethodImplAttributes);
	      ILGenerator myILGenerator3 = myConstructorBuilder.GetILGenerator();
	      myILGenerator3.Emit(OpCodes.Ldarg_0);
	      ConstructorInfo myConstructorInfo = typeof(Object).GetConstructor(new Type[0]);
	      myILGenerator3.Emit(OpCodes.Call, myConstructorInfo);
	      myILGenerator3.Emit(OpCodes.Ldarg_0);
	      myILGenerator3.Emit(OpCodes.Ldarg_1);
	      myILGenerator3.Emit(OpCodes.Stfld, myGreetingField);
	      myILGenerator3.Emit(OpCodes.Ret);
	      myMethodBuilder = myTypeBuilder.DefineMethod
	         ("HelloWorld",MethodAttributes.Public,null,null);
	      ILGenerator myILGenerator2 = myMethodBuilder.GetILGenerator();
	      myILGenerator2.EmitWriteLine("Hello World from global");
	      myILGenerator2.Emit(OpCodes.Ret);
	      myModuleBuilder.CreateGlobalFunctions();
	      myType1 = myTypeBuilder.CreateType();
	
	      ParameterInfo[] myParameterInfo = myConstructorBuilder.GetParameters();
	      for(int i =0 ; i < myParameterInfo.Length; i++)
	      {
	         Console.WriteLine("Declaration type : " + myParameterInfo[i].Member.DeclaringType);
	      }
	   }
	   internal Type MyTypeProperty
	   {
	      get
	      {
	         return this.myType1;
	      }
	   }
	
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      MyConstructorBuilder myConstructorBuilder1 = new MyConstructorBuilder();
	      Type myTypeProperty = myConstructorBuilder1.MyTypeProperty;
	      if (null != myTypeProperty)
	      {
	         Object[] myObject = {"Hello"};
	         object myObject1 = Activator.CreateInstance(myTypeProperty,myObject,null);
	         MethodInfo myMethodInfo = myTypeProperty.GetMethod("HelloWorld");
	
	         if (null != myMethodInfo)
	         {
	            myMethodInfo.Invoke(myObject1, null);
	         }
	         else
	         {
	            Console.WriteLine("Could not locate HelloWorld method");
	         }
	      }
	      else
	      {
	         Console.WriteLine("Could not access Type.");
	      }
	   }
	}

snippet codedom_codeproviders

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CodeProviders/source.cs

	
	using System;
	using System.IO;
	using System.Globalization;
	using System.CodeDom.Compiler;
	using System.Text;
	using Microsoft.CSharp;
	using Microsoft.VisualBasic;
	
	namespace CodeProviders
	{
		class CompileSample
		{
	        [STAThread]
	        static void Main(string[] args)
	        {
	            if (args.Length > 0)
	            {
	                if (File.Exists(args[0]))
	                {
	                    CompileExecutable(args[0]);
	                }
	                else 
	                {
	                    Console.WriteLine("Input source file not found - {0}",
	                        args[0]);
	                }
	            }
	            else 
	            {
	                Console.WriteLine("Input source file not specified on command line!");
	            }
	        }
	
	        public static bool CompileExecutable(String sourceName)
	        {
	            FileInfo sourceFile = new FileInfo(sourceName);
	            CodeDomProvider provider = null;
	            bool compileOk = false;
	
	            if (sourceFile.Extension.ToUpper(CultureInfo.InvariantCulture) == ".CS")
	            {
	                provider = CodeDomProvider.CreateProvider("CSharp");
	            }
	            else if (sourceFile.Extension.ToUpper(CultureInfo.InvariantCulture) == ".VB")
	            {
	                provider = CodeDomProvider.CreateProvider("VisualBasic");
	            }
	            else 
	            {
	                Console.WriteLine("Source file must have a .cs or .vb extension");
	            }
	
	            if (provider != null)
	            {
	
	 
	                String exeName = String.Format(@"{0}\{1}.exe", 
	                    System.Environment.CurrentDirectory, 
	                    sourceFile.Name.Replace(".", "_"));
	
	                CompilerParameters cp = new CompilerParameters();
	
	                cp.GenerateExecutable = true;
	
	                cp.OutputAssembly = exeName;
	    
	                cp.GenerateInMemory = false;
	    
	                cp.TreatWarningsAsErrors = false;
	 
	                CompilerResults cr = provider.CompileAssemblyFromFile(cp, 
	                    sourceName);
	    
	                if(cr.Errors.Count > 0)
	                {
	                    Console.WriteLine("Errors building {0} into {1}",  
	                        sourceName, cr.PathToAssembly);
	                    foreach(CompilerError ce in cr.Errors)
	                    {
	                        Console.WriteLine("  {0}", ce.ToString());
	                        Console.WriteLine();
	                    }
	                }
	                else
	                {
	                    Console.WriteLine("Source {0} built into {1} successfully.",
	                        sourceName, cr.PathToAssembly);
	                }
	              
	                if (cr.Errors.Count > 0)
	                {
	                    compileOk = false;
	                }
	                else 
	                {
	                    compileOk = true;
	                }
	            }
	            return compileOk;
	        }
		}
	}

snippet array_sort2intinticomparer

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/source.cs

	using System;
	using System.Collections.Generic;
	
	public class ReverseComparer: IComparer<string>
	{
	    public int Compare(string x, string y)
	    {
	        return y.CompareTo(x);
	    }
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        string[] dinosaurs = {
	            "Seismosaurus", 
	            "Chasmosaurus", 
	            "Coelophysis", 
	            "Mamenchisaurus", 
	            "Caudipteryx", 
	            "Cetiosaurus"  };
	
	        int[] dinosaurSizes = { 40, 5, 3, 22, 1, 18 };
	
	        Console.WriteLine();
	        for (int i = 0; i < dinosaurs.Length; i++)
	        {
	            Console.WriteLine("{0}: up to {1} meters long.", 
	                dinosaurs[i], dinosaurSizes[i]);
	        }
	
	        Console.WriteLine("\nSort(dinosaurs, dinosaurSizes)");
	        Array.Sort(dinosaurs, dinosaurSizes);
	
	        Console.WriteLine();
	        for (int i = 0; i < dinosaurs.Length; i++)
	        {
	            Console.WriteLine("{0}: up to {1} meters long.", 
	                dinosaurs[i], dinosaurSizes[i]);
	        }
	
	        ReverseComparer rc = new ReverseComparer();
	
	        Console.WriteLine("\nSort(dinosaurs, dinosaurSizes, rc)");
	        Array.Sort(dinosaurs, dinosaurSizes, rc);
	
	        Console.WriteLine();
	        for (int i = 0; i < dinosaurs.Length; i++)
	        {
	            Console.WriteLine("{0}: up to {1} meters long.", 
	                dinosaurs[i], dinosaurSizes[i]);
	        }
	
	        Console.WriteLine("\nSort(dinosaurs, dinosaurSizes, 3, 3)");
	        Array.Sort(dinosaurs, dinosaurSizes, 3, 3);
	
	        Console.WriteLine();
	        for (int i = 0; i < dinosaurs.Length; i++)
	        {
	            Console.WriteLine("{0}: up to {1} meters long.", 
	                dinosaurs[i], dinosaurSizes[i]);
	        }
	
	        Console.WriteLine("\nSort(dinosaurs, dinosaurSizes, 3, 3, rc)");
	        Array.Sort(dinosaurs, dinosaurSizes, 3, 3, rc);
	
	        Console.WriteLine();
	        for (int i = 0; i < dinosaurs.Length; i++)
	        {
	            Console.WriteLine("{0}: up to {1} meters long.", 
	                dinosaurs[i], dinosaurSizes[i]);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Seismosaurus: up to 40 meters long.
	Chasmosaurus: up to 5 meters long.
	Coelophysis: up to 3 meters long.
	Mamenchisaurus: up to 22 meters long.
	Caudipteryx: up to 1 meters long.
	Cetiosaurus: up to 18 meters long.
	
	Sort(dinosaurs, dinosaurSizes)
	
	Caudipteryx: up to 1 meters long.
	Cetiosaurus: up to 18 meters long.
	Chasmosaurus: up to 5 meters long.
	Coelophysis: up to 3 meters long.
	Mamenchisaurus: up to 22 meters long.
	Seismosaurus: up to 40 meters long.
	
	Sort(dinosaurs, dinosaurSizes, rc)
	
	Seismosaurus: up to 40 meters long.
	Mamenchisaurus: up to 22 meters long.
	Coelophysis: up to 3 meters long.
	Chasmosaurus: up to 5 meters long.
	Cetiosaurus: up to 18 meters long.
	Caudipteryx: up to 1 meters long.
	
	Sort(dinosaurs, dinosaurSizes, 3, 3)
	
	Seismosaurus: up to 40 meters long.
	Mamenchisaurus: up to 22 meters long.
	Coelophysis: up to 3 meters long.
	Caudipteryx: up to 1 meters long.
	Cetiosaurus: up to 18 meters long.
	Chasmosaurus: up to 5 meters long.
	
	Sort(dinosaurs, dinosaurSizes, 3, 3, rc)
	
	Seismosaurus: up to 40 meters long.
	Mamenchisaurus: up to 22 meters long.
	Coelophysis: up to 3 meters long.
	Chasmosaurus: up to 5 meters long.
	Cetiosaurus: up to 18 meters long.
	Caudipteryx: up to 1 meters long.
	 */
	
	

snippet sys_glob_persiancal

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_persianCal/pcal.cs

	using System;
	using System.Globalization;
	 
	class Sample 
	{
	    public static void Main() 
	    {
	      PersianCalendar jc = new PersianCalendar();
	      DateTime thisDate = DateTime.Now;
	 
	      Console.WriteLine("\n........... Selected Properties .....................\n");
	      Console.Write("Eras:");
	      foreach (int era in jc.Eras)
	      {
	         Console.WriteLine(" era = {0}", era);
	      }
	      Console.WriteLine("\nTwoDigitYearMax = {0}", jc.TwoDigitYearMax);
	      Console.WriteLine("\n............ Selected Methods .......................\n");
	 
	      Console.WriteLine("GetDayOfYear: day = {0}", jc.GetDayOfYear(thisDate));
	      Console.WriteLine("GetDaysInMonth: days = {0}", 
	                        jc.GetDaysInMonth( thisDate.Year, thisDate.Month, 
	                        PersianCalendar.PersianEra));
	      Console.WriteLine("GetDaysInYear: days = {0}", 
	                        jc.GetDaysInYear(thisDate.Year, PersianCalendar.PersianEra));
	      Console.WriteLine("GetLeapMonth: leap month (if any) = {0}", 
	                        jc.GetLeapMonth(thisDate.Year, PersianCalendar.PersianEra));
	      Console.WriteLine("GetMonthsInYear: months in a year = {0}", 
	                        jc.GetMonthsInYear(thisDate.Year, PersianCalendar.PersianEra));
	      Console.WriteLine("IsLeapDay: This is a leap day = {0}", 
	                        jc.IsLeapDay(thisDate.Year, thisDate.Month, thisDate.Day, 
	                        PersianCalendar.PersianEra));
	      Console.WriteLine("IsLeapMonth: This is a leap month = {0}", 
	                        jc.IsLeapMonth(thisDate.Year, thisDate.Month, 
	                        PersianCalendar.PersianEra));
	      Console.WriteLine("IsLeapYear: 1370 is a leap year = {0}", 
	                        jc.IsLeapYear(1370, PersianCalendar.PersianEra));
	 
	 
	      Console.WriteLine("ToFourDigitYear:");
	      Console.WriteLine("  If TwoDigitYearMax = {0}, ToFourDigitYear(99) = {1}", 
	                         jc.TwoDigitYearMax, jc.ToFourDigitYear(99));
	      jc.TwoDigitYearMax = thisDate.Year;
	      Console.WriteLine("  If TwoDigitYearMax = {0}, ToFourDigitYear(99) = {1}", 
	                        jc.TwoDigitYearMax, jc.ToFourDigitYear(99));
	    }
	}
	
	public class CalendarConversion
	{
	   public void ConvertToday()
	   {
	      PersianCalendar pc = new PersianCalendar();
	
	      DateTime gregorianDate = new DateTime(2007, 3, 21, 00, 47, 15);
	      Console.WriteLine("The Gregorian calendar date is {0:G}", gregorianDate); 
	      Console.WriteLine("The Persian calendar date is {0}/{1}/{2} {3}:{4}:{5}.", 
	                        pc.GetMonth(gregorianDate), 
	                        pc.GetDayOfMonth(gregorianDate), 
	                        pc.GetYear(gregorianDate), 
	                        pc.GetHour(gregorianDate), 
	                        pc.GetMinute(gregorianDate), 
	                        pc.GetSecond(gregorianDate));
	      DateTime fromPersianDate = pc.ToDateTime(
	               pc.GetYear(gregorianDate), 
	               pc.GetMonth(gregorianDate), 
	               pc.GetDayOfMonth(gregorianDate), 
	               pc.GetHour(gregorianDate),
	               pc.GetMinute(gregorianDate), 
	               pc.GetSecond(gregorianDate),
	               (int) pc.GetMilliseconds(gregorianDate), 
	               PersianCalendar.PersianEra);
	      Console.WriteLine("The converted Gregorian calendar date is {0:G}", fromPersianDate); 
	
	   }
	}

snippet string_normalize

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_normalize/norm.cs

	using System;
	using System.Text;
	
	class Example
	{
	    public static void Main() 
	    {
	       string s1 = new String( new char[] {'\u0063', '\u0301', '\u0327', '\u00BE'});
	       string s2 = null;
	       string divider = new String('-', 80);
	       divider = String.Concat(Environment.NewLine, divider, Environment.NewLine);
	   
	       Show("s1", s1);
	       Console.WriteLine();
	       Console.WriteLine("U+0063 = LATIN SMALL LETTER C");
	       Console.WriteLine("U+0301 = COMBINING ACUTE ACCENT");
	       Console.WriteLine("U+0327 = COMBINING CEDILLA");
	       Console.WriteLine("U+00BE = VULGAR FRACTION THREE QUARTERS");
	       Console.WriteLine(divider);
	   
	       Console.WriteLine("A1) Is s1 normalized to the default form (Form C)?: {0}", 
	                                    s1.IsNormalized());
	       Console.WriteLine("A2) Is s1 normalized to Form C?:  {0}", 
	                                    s1.IsNormalized(NormalizationForm.FormC));
	       Console.WriteLine("A3) Is s1 normalized to Form D?:  {0}", 
	                                    s1.IsNormalized(NormalizationForm.FormD));
	       Console.WriteLine("A4) Is s1 normalized to Form KC?: {0}", 
	                                    s1.IsNormalized(NormalizationForm.FormKC));
	       Console.WriteLine("A5) Is s1 normalized to Form KD?: {0}", 
	                                    s1.IsNormalized(NormalizationForm.FormKD));
	   
	       Console.WriteLine(divider);
	   
	       Console.WriteLine("Set string s2 to each normalized form of string s1.");
	       Console.WriteLine();
	       Console.WriteLine("U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE");
	       Console.WriteLine("U+0033 = DIGIT THREE");
	       Console.WriteLine("U+2044 = FRACTION SLASH");
	       Console.WriteLine("U+0034 = DIGIT FOUR");
	       Console.WriteLine(divider);
	   
	       s2 = s1.Normalize();
	       Console.Write("B1) Is s2 normalized to the default form (Form C)?: ");
	       Console.WriteLine(s2.IsNormalized());
	       Show("s2", s2);
	       Console.WriteLine();
	   
	       s2 = s1.Normalize(NormalizationForm.FormC);
	       Console.Write("B2) Is s2 normalized to Form C?: ");
	       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormC));
	       Show("s2", s2);
	       Console.WriteLine();
	   
	       s2 = s1.Normalize(NormalizationForm.FormD);
	       Console.Write("B3) Is s2 normalized to Form D?: ");
	       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormD));
	       Show("s2", s2);
	       Console.WriteLine();
	   
	       s2 = s1.Normalize(NormalizationForm.FormKC);
	       Console.Write("B4) Is s2 normalized to Form KC?: ");
	       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKC));
	       Show("s2", s2);
	       Console.WriteLine();
	   
	       s2 = s1.Normalize(NormalizationForm.FormKD);
	       Console.Write("B5) Is s2 normalized to Form KD?: ");
	       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKD));
	       Show("s2", s2);
	       Console.WriteLine();
	    }
	
	    private static void Show(string title, string s)
	    {
	       Console.Write("Characters in string {0} = ", title);
	       foreach(short x in s) {
	           Console.Write("{0:X4} ", x);
	       }
	       Console.WriteLine();
	    }
	}
	/*
	This example produces the following results:
	
	Characters in string s1 = 0063 0301 0327 00BE
	
	U+0063 = LATIN SMALL LETTER C
	U+0301 = COMBINING ACUTE ACCENT
	U+0327 = COMBINING CEDILLA
	U+00BE = VULGAR FRACTION THREE QUARTERS
	
	--------------------------------------------------------------------------------
	
	A1) Is s1 normalized to the default form (Form C)?: False
	A2) Is s1 normalized to Form C?:  False
	A3) Is s1 normalized to Form D?:  False
	A4) Is s1 normalized to Form KC?: False
	A5) Is s1 normalized to Form KD?: False
	
	--------------------------------------------------------------------------------
	
	Set string s2 to each normalized form of string s1.
	
	U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE
	U+0033 = DIGIT THREE
	U+2044 = FRACTION SLASH
	U+0034 = DIGIT FOUR
	
	--------------------------------------------------------------------------------
	
	B1) Is s2 normalized to the default form (Form C)?: True
	Characters in string s2 = 1E09 00BE
	
	B2) Is s2 normalized to Form C?: True
	Characters in string s2 = 1E09 00BE
	
	B3) Is s2 normalized to Form D?: True
	Characters in string s2 = 0063 0327 0301 00BE
	
	B4) Is s2 normalized to Form KC?: True
	Characters in string s2 = 1E09 0033 2044 0034
	
	B5) Is s2 normalized to Form KD?: True
	Characters in string s2 = 0063 0327 0301 0033 2044 0034
	
	*/
snippet codedom_generatecodefrommember

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/program.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.IO;
	using System.Text.RegularExpressions;
	
	namespace BasicCodeDomApp
	{
	    class Program
	    {
	        static string providerName = "cs";
	        static string sourceFileName = "test.cs";
	        static CodeSnippetTypeMember snippetMethod;
	        static void Main(string[] args)
	        {
	            CodeDomProvider provider = CodeDomProvider.CreateProvider(providerName);
	
	            GenCodeFromMember(provider, new CodeGeneratorOptions());
	
	            LogMessage("Building CodeDOM graph...");
	
	            CodeCompileUnit cu = new CodeCompileUnit();
	
	            cu = BuildClass1();
	
	            StringWriter sw = new StringWriter();
	
	            LogMessage("Generating code...");
	            provider.GenerateCodeFromCompileUnit(cu, sw, null);
	
	            string output = sw.ToString();
	
	            LogMessage("Dumping source...");
	            LogMessage(output);
	
	            LogMessage("Writing source to file...");
	            Stream s = File.Open(sourceFileName, FileMode.Create);
	            StreamWriter t = new StreamWriter(s);
	            t.Write(output);
	            t.Close();
	            s.Close();
	
	            CompilerParameters opt = new CompilerParameters(new string[]{
	                                      "System.dll" });
	            opt.GenerateExecutable = false;
	            opt.OutputAssembly = "Sample.dll";
	
	            CompilerResults results;
	
	            LogMessage("Compiling with " + providerName);
	            results = provider.CompileAssemblyFromFile(opt, sourceFileName);
	
	            OutputResults(results);
	            if (results.NativeCompilerReturnValue != 0)
	            {
	                LogMessage("");
	                LogMessage("Compilation failed.");
	            }
	            else
	            {
	                LogMessage("");
	                LogMessage("Demo completed successfully.");
	            }
	            File.Delete(sourceFileName);
	        }
	
	        public static CodeCompileUnit BuildClass1()
	        {
	            CodeCompileUnit compileUnit = new CodeCompileUnit();
	
	            CodeNamespace samples = new CodeNamespace("Samples");
	            compileUnit.Namespaces.Add(samples);
	
	            samples.Imports.Add(new CodeNamespaceImport("System"));
	
	            CodeTypeDeclaration class1 = new CodeTypeDeclaration("Class1");
	
	            samples.Types.Add(class1);
	
	            class1.Members.Add(snippetMethod);
	
	            return compileUnit;
	        }
	        static void LogMessage(string text)
	        {
	            Console.WriteLine(text);
	        }
	
	        static void OutputResults(CompilerResults results)
	        {
	            LogMessage("NativeCompilerReturnValue=" +
	                results.NativeCompilerReturnValue.ToString());
	            foreach (string s in results.Output)
	            {
	                LogMessage(s);
	            }
	        }
	        static void GenCodeFromMember(CodeDomProvider provider, CodeGeneratorOptions options)
	        {
	            options.BracingStyle = "C";
	            CodeMemberMethod method1 = new CodeMemberMethod();
	            method1.Name = "ReturnString";
	            method1.Attributes = MemberAttributes.Public;
	            method1.ReturnType = new CodeTypeReference("System.String");
	            method1.Parameters.Add(new CodeParameterDeclarationExpression("System.String", "text"));
	            method1.Statements.Add(new CodeMethodReturnStatement(new CodeArgumentReferenceExpression("text")));
	            StringWriter sw = new StringWriter();
	            provider.GenerateCodeFromMember(method1, sw, options);
	            snippetMethod = new CodeSnippetTypeMember(sw.ToString());
	        }
	
	    }
	}

snippet howtoencryptxmlelementx509

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HowToEncryptXMLElementX509/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	using System.Security.Cryptography.X509Certificates;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	        try
	        {
	            XmlDocument xmlDoc = new XmlDocument();
	
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	                
	            X509Store store = new X509Store(StoreLocation.CurrentUser);
	            store.Open(OpenFlags.ReadOnly);
	
	            X509Certificate2Collection certCollection = store.Certificates;
	
	            X509Certificate2 cert = null;
	
	            foreach (X509Certificate2 c in certCollection)
	            {
	                if (c.Subject == "CN=XML_ENC_TEST_CERT")
	                {
	                    cert = c;
	
	                    break;
	                }
	            }
	
	            if (cert == null)
	            {
	                throw new CryptographicException("The X.509 certificate could not be found.");
	            }
	
	            store.Close();
	
	            Encrypt(xmlDoc, "creditcard", cert);
	
	            xmlDoc.Save("test.xml");
	
	            Console.WriteLine("Encrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	
	    }
	
	    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, X509Certificate2 Cert)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (ElementToEncrypt == null)
	            throw new ArgumentNullException("ElementToEncrypt");
	        if (Cert == null)
	            throw new ArgumentNullException("Cert");
	
	
	        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	        if (elementToEncrypt == null)
	        {
	            throw new XmlException("The specified element was not found");
	
	        }
	
	
	        EncryptedXml eXml = new EncryptedXml();
	
	        EncryptedData edElement = eXml.Encrypt(elementToEncrypt, Cert);
	
	        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	    }
	}
snippet cryptography_3des_create_file

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_3DES_Create_File/fileexample.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	using System.IO;
	
	class TripleDESSample
	{
	
	    static void Main()
	    {
	        try
	        {
	            using (TripleDES TripleDESalg = TripleDES.Create())
	            {
	                string sData = "Here is some data to encrypt.";
	                string FileName = "CText.enc";
	
	                EncryptTextToFile(sData, FileName, TripleDESalg.Key, TripleDESalg.IV);
	
	                string Final = DecryptTextFromFile(FileName, TripleDESalg.Key, TripleDESalg.IV);
	
	                Console.WriteLine(Final);
	            }
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	
	    }
	
	    public static void EncryptTextToFile(String Data, String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            using (FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate))
	            {
	
	                using (TripleDES tripleDESalg = TripleDES.Create())
	                {
	
	                    using (CryptoStream cStream = new CryptoStream(fStream,
	                        tripleDESalg.CreateEncryptor(Key, IV),
	                        CryptoStreamMode.Write))
	                    {
	
	                        using (StreamWriter sWriter = new StreamWriter(cStream))
	                        {
	
	                            sWriter.WriteLine(Data);
	                        }
	                    }
	                }
	            }
	
	        }
	        catch (CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	        }
	        catch (UnauthorizedAccessException e)
	        {
	            Console.WriteLine("A file access error occurred: {0}", e.Message);
	        }
	
	    }
	
	    public static string DecryptTextFromFile(String FileName, byte[] Key, byte[] IV)
	    {
	        try
	        {
	            string retVal = "";
	            using (FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate))
	            {
	
	                using (TripleDES tripleDESalg = TripleDES.Create())
	                {
	
	                    using (CryptoStream cStream = new CryptoStream(fStream,
	                        tripleDESalg.CreateDecryptor(Key, IV),
	                        CryptoStreamMode.Read))
	                    {
	
	                        using (StreamReader sReader = new StreamReader(cStream))
	                        {
	
	                            retVal = sReader.ReadLine();
	                        }
	                    }
	                }
	
	            }
	            return retVal;
	        }
	        catch (CryptographicException e)
	        {
	            Console.WriteLine("A Cryptographic error occurred: {0}", e.Message);
	            return null;
	        }
	        catch (UnauthorizedAccessException e)
	        {
	            Console.WriteLine("A file access error occurred: {0}", e.Message);
	            return null;
	        }
	    }
	}

snippet console_windowlt

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/console_windowLT/wlt.cs

	using System;
	using System.Text;
	using System.IO;
	class Sample 
	{
	    public static int saveBufferWidth;
	    public static int saveBufferHeight;
	    public static int saveWindowHeight;
	    public static int saveWindowWidth;
	    public static bool saveCursorVisible;
	    public static void Main() 
	    {
	    string m1 = "1) Press the cursor keys to move the console window.\n" +
	                "2) Press any key to begin. When you're finished...\n" +
	                "3) Press the Escape key to quit.";
	    string g1 = "+----";
	    string g2 = "|    ";
	    string grid1;
	    string grid2;
	    StringBuilder sbG1 = new StringBuilder();
	    StringBuilder sbG2 = new StringBuilder();
	    ConsoleKeyInfo cki;
	    int y;
	    try 
	    {
	    saveBufferWidth  = Console.BufferWidth;
	    saveBufferHeight = Console.BufferHeight;
	    saveWindowHeight = Console.WindowHeight;
	    saveWindowWidth  = Console.WindowWidth;
	    saveCursorVisible = Console.CursorVisible;
	    Console.Clear();
	    Console.WriteLine(m1);
	    Console.ReadKey(true);
	
	    Console.SetWindowSize(1, 1);
	    Console.SetBufferSize(80, 80);
	    Console.SetWindowSize(40, 20);
	
	    for (y = 0; y < Console.BufferWidth/g1.Length; y++)
	        {
	        sbG1.Append(g1);
	        sbG2.Append(g2);
	        }
	    sbG1.Append(g1, 0, Console.BufferWidth%g1.Length);
	    sbG2.Append(g2, 0, Console.BufferWidth%g2.Length);
	    grid1 = sbG1.ToString();
	    grid2 = sbG2.ToString();
	
	    Console.CursorVisible = false;
	    Console.Clear();
	    for (y = 0; y < Console.BufferHeight-1; y++)
	        {
	        if (y%3 == 0)
	            Console.Write(grid1);
	        else
	            Console.Write(grid2);
	        }
	
	    Console.SetWindowPosition(0, 0);
	    do
	        {
	        cki = Console.ReadKey(true);
	        switch (cki.Key) 
	            {
	            case ConsoleKey.LeftArrow:
	                if (Console.WindowLeft > 0) 
	                    Console.SetWindowPosition(
	                            Console.WindowLeft-1, Console.WindowTop);
	                break;
	            case ConsoleKey.UpArrow:
	                if (Console.WindowTop > 0) 
	                    Console.SetWindowPosition(
	                            Console.WindowLeft, Console.WindowTop-1);
	                break;
	            case ConsoleKey.RightArrow:
	                if (Console.WindowLeft < (Console.BufferWidth-Console.WindowWidth)) 
	                    Console.SetWindowPosition(
	                            Console.WindowLeft+1, Console.WindowTop);
	                break;
	            case ConsoleKey.DownArrow:
	                if (Console.WindowTop < (Console.BufferHeight-Console.WindowHeight)) 
	                    Console.SetWindowPosition(
	                            Console.WindowLeft, Console.WindowTop+1);
	                break;
	            }
	        } 
	    catch (IOException e) 
	        {
	        Console.WriteLine(e.Message);
	        }
	    finally 
	        {
	        Console.Clear();
	        Console.SetWindowSize(1, 1);
	        Console.SetBufferSize(saveBufferWidth, saveBufferHeight);
	        Console.SetWindowSize(saveWindowWidth, saveWindowHeight);
	        Console.CursorVisible = saveCursorVisible;
	        }
	/*
	This example produces results similar to the following:
	
	1) Press the cursor keys to move the console window.
	2) Press any key to begin. When you're finished...
	3) Press the Escape key to quit.
	
	...
	
	+----+----+----+-
	|    |    |    |
	|    |    |    |
	+----+----+----+-
	|    |    |    |
	|    |    |    |
	+----+----+----+-
	
	*/
snippet cryptography_rijndael_create_file

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/cryptography_rijndael_create_file/fileexample.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	namespace RijndaelManaged_Example
	{
	    class RijndaelExample
	    {
	        public static void Main()
	        {
	            try
	            {
	
	                string original = "Here is some data to encrypt!";
	
	                using (Rijndael myRijndael = Rijndael.Create())
	                {
	                    byte[] encrypted = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV);
	
	                    string roundtrip = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV);
	
	                    Console.WriteLine("Original:   {0}", original);
	                    Console.WriteLine("Round Trip: {0}", roundtrip);
	                }
	
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine("Error: {0}", e.Message);
	            }
	        }
	        static byte[] EncryptStringToBytes(string plainText, byte[] Key, byte[] IV)
	        {
	            if (plainText == null || plainText.Length <= 0)
	                throw new ArgumentNullException("plainText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("IV");
	            byte[] encrypted;
	            using (Rijndael rijAlg = Rijndael.Create())
	            {
	                rijAlg.Key = Key;
	                rijAlg.IV = IV;
	
	                ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);
	
	                using (MemoryStream msEncrypt = new MemoryStream())
	                {
	                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
	                    {
	                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
	                        {
	
	                            swEncrypt.Write(plainText);
	                        }
	                        encrypted = msEncrypt.ToArray();
	                    }
	                }
	            }
	
	
	            return encrypted;
	
	        }
	
	        static string DecryptStringFromBytes(byte[] cipherText, byte[] Key, byte[] IV)
	        {
	            if (cipherText == null || cipherText.Length <= 0)
	                throw new ArgumentNullException("cipherText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("IV");
	
	            string plaintext = null;
	
	            using (Rijndael rijAlg = Rijndael.Create())
	            {
	                rijAlg.Key = Key;
	                rijAlg.IV = IV;
	
	                ICryptoTransform decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);
	
	                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
	                {
	                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
	                    {
	                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
	                        {
	
	                            plaintext = srDecrypt.ReadToEnd();
	                        }
	                    }
	                }
	
	            }
	
	            return plaintext;
	
	        }
	    }
	}
snippet tripledescryptoserviceprovider

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/tripledescryptoserviceprovider/program.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	namespace TripleDESCryptoServiceProvider_Example
	{
	    class TripleDESManagedExample
	    {
	        public static void Main()
	        {
	            try
	            {
	
	                string original = "Here is some data to encrypt!";
	
	                using (TripleDESCryptoServiceProvider myTripleDES = new TripleDESCryptoServiceProvider())
	                {
	                    byte[] encrypted = EncryptStringToBytes(original, myTripleDES.Key, myTripleDES.IV);
	
	                    string roundtrip = DecryptStringFromBytes(encrypted, myTripleDES.Key, myTripleDES.IV);
	
	                    Console.WriteLine("Original:   {0}", original);
	                    Console.WriteLine("Round Trip: {0}", roundtrip);
	                }
	
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine("Error: {0}", e.Message);
	            }
	        }
	        static byte[] EncryptStringToBytes(string plainText, byte[] Key, byte[] IV)
	        {
	            if (plainText == null || plainText.Length <= 0)
	                throw new ArgumentNullException("plainText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("Key");
	            byte[] encrypted;
	            
	            using (TripleDESCryptoServiceProvider tdsAlg = new TripleDESCryptoServiceProvider())
	            {
	                tdsAlg.Key = Key;
	                tdsAlg.IV = IV;
	
	                ICryptoTransform encryptor = tdsAlg.CreateEncryptor(tdsAlg.Key, tdsAlg.IV);
	
	                using (MemoryStream msEncrypt = new MemoryStream())
	                {
	                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
	                    {
	                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
	                        {
	                            swEncrypt.Write(plainText);
	                        }
	                        encrypted = msEncrypt.ToArray();
	                    }
	                }
	            }
	
	
	            return encrypted;
	
	        }
	
	        static string DecryptStringFromBytes(byte[] cipherText, byte[] Key, byte[] IV)
	        {
	            if (cipherText == null || cipherText.Length <= 0)
	                throw new ArgumentNullException("cipherText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("Key");
	
	            string plaintext = null;
	
	            using (TripleDESCryptoServiceProvider tdsAlg = new TripleDESCryptoServiceProvider())
	            {
	                tdsAlg.Key = Key;
	                tdsAlg.IV = IV;
	
	                ICryptoTransform decryptor = tdsAlg.CreateDecryptor(tdsAlg.Key, tdsAlg.IV);
	
	                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
	                {
	                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
	                    {
	                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
	                        {
	
	                            plaintext = srDecrypt.ReadToEnd();
	                        }
	                    }
	                }
	
	            }
	
	            return plaintext;
	
	        }
	    }
	}
snippet cryptography_3des_create_memory

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_3DES_Create_Memory/memoryexample.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	namespace AesManaged_Examples
	{
	    class AesManagedExample
	    {
	        public static void Main()
	        {
	            try
	            {
	
	                string original = "Here is some data to encrypt!";
	
	                using (AesCryptoServiceProvider myAesManaged = new AesCryptoServiceProvider())
	                {
	
	                    byte[] encrypted = encryptStringToBytes_AesManaged(original, myAesManaged.Key, myAesManaged.IV);
	
	                    string roundtrip = decryptStringFromBytes_AesManaged(encrypted, myAesManaged.Key, myAesManaged.IV);
	
	                    Console.WriteLine("Original:   {0}", original);
	                    Console.WriteLine("Round Trip: {0}", roundtrip);
	                }
	
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine("Error: {0}", e.Message);
	            }
	        }
	
	        static byte[] encryptStringToBytes_AesManaged(string plainText, byte[] Key, byte[] IV)
	        {
	            if (plainText == null || plainText.Length <= 0)
	                throw new ArgumentNullException("plainText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("Key");
	            byte[] retVal;
	
	            using (AesCryptoServiceProvider AesManagedAlg = new AesCryptoServiceProvider())
	            {
	
	                AesManagedAlg.Key = Key;
	                AesManagedAlg.IV = IV;
	
	                ICryptoTransform encryptor = AesManagedAlg.CreateEncryptor(AesManagedAlg.Key, AesManagedAlg.IV);
	
	                using (MemoryStream msEncrypt = new MemoryStream())
	                {
	                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
	                    {
	                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
	                        {
	                            swEncrypt.Write(plainText);
	                            retVal = msEncrypt.ToArray();
	                        }
	                    }
	                }
	            }
	
	
	            return retVal;
	        }
	
	        static string decryptStringFromBytes_AesManaged(byte[] cipherText, byte[] Key, byte[] IV)
	        {
	            if (cipherText == null || cipherText.Length <= 0)
	                throw new ArgumentNullException("cipherText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("Key");
	
	            string plaintext = null;
	
	                using (AesCryptoServiceProvider AesManagedAlg = new AesCryptoServiceProvider())
	                { 
	                AesManagedAlg.Key = Key;
	                AesManagedAlg.IV = IV;
	
	                ICryptoTransform decryptor = AesManagedAlg.CreateDecryptor(AesManagedAlg.Key, AesManagedAlg.IV);
	
	                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
	                {
	                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
	                    {
	                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
	                        {
	
	                            plaintext = srDecrypt.ReadToEnd();
	                        }
	                    }
	                }
	            }
	
	
	            return plaintext;
	
	        }
	    }
	}

snippet conceptual_regex_language_options

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_regex_language_options/explicit1.cs

	using System;
	using System.Text.RegularExpressions;
	
	public class Example
	{
	   public static void Main()
	   {
	      string input = "This is the first sentence. Is it the beginning " + 
	                     "of a literary masterpiece? I think not. Instead, " + 
	                     "it is a nonsensical paragraph.";
	      string pattern = @"\b\(?((?>\w+),?\s?)+[\.!?]\)?";
	      Console.WriteLine("With implicit captures:");
	      foreach (Match match in Regex.Matches(input, pattern))
	      {
	         Console.WriteLine("The match: {0}", match.Value);
	         int groupCtr = 0;
	         foreach (Group group in match.Groups)
	         {
	            Console.WriteLine("   Group {0}: {1}", groupCtr, group.Value);
	            groupCtr++;
	            int captureCtr = 0;
	            foreach (Capture capture in group.Captures)
	            {
	               Console.WriteLine("      Capture {0}: {1}", captureCtr, capture.Value);
	               captureCtr++;
	            }
	         }
	      }
	      Console.WriteLine();
	      Console.WriteLine("With explicit captures only:");
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.ExplicitCapture))
	      {
	         Console.WriteLine("The match: {0}", match.Value);
	         int groupCtr = 0;
	         foreach (Group group in match.Groups)
	         {
	            Console.WriteLine("   Group {0}: {1}", groupCtr, group.Value);
	            groupCtr++;
	            int captureCtr = 0;
	            foreach (Capture capture in group.Captures)
	            {
	               Console.WriteLine("      Capture {0}: {1}", captureCtr, capture.Value);
	               captureCtr++;
	            }
	         }
	      }
	   }
	}

snippet cryptography_xml_xmlencminimaldecrypt

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_XMLEncMinimalDecrypt/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	
	        XmlDocument xmlDoc = new XmlDocument();
	
	        try
	        {
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	
	        TripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();
	
	
	        try
	        {
	            Encrypt(xmlDoc, "creditcard", tDESkey, "tDesKey");
	
	            Console.WriteLine("Encrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	
	            Decrypt(xmlDoc, tDESkey, "tDesKey");
	
	            Console.WriteLine();
	            Console.WriteLine("Decrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	            tDESkey.Clear();
	        }
	
	    }
	
	    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, SymmetricAlgorithm Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (ElementToEncrypt == null)
	            throw new ArgumentNullException("ElementToEncrypt");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	
	
	        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	
	        if (elementToEncrypt == null)
	        {
	            throw new XmlException("The specified element was not found");
	
	        }
	
	
	        EncryptedXml eXml = new EncryptedXml();
	
	        eXml.AddKeyNameMapping(KeyName, Alg);
	
	        EncryptedData edElement = eXml.Encrypt(elementToEncrypt, KeyName);
	
	
	
	        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	
	    }
	
	    public static void Decrypt(XmlDocument Doc, SymmetricAlgorithm Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	        if (KeyName == null)
	            throw new ArgumentNullException("KeyName");
	
	        EncryptedXml exml = new EncryptedXml(Doc);
	
	        exml.AddKeyNameMapping(KeyName, Alg);
	
	        exml.DecryptDocument();
	
	    }
	
	
	}
snippet type_getproperties2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperties2/type_getproperties2.cs

	using System;
	using System.Reflection;
	
	public class PropertyClass
	{
	    public String Property1
	    {
	        get { return "hello"; }
	    }
	
	    public String Property2
	    {
	        get { return "hello"; }
	    }
	
	    protected String Property3
	    {
	        get { return "hello"; }
	    }
	
	    private Int32 Property4
	    {
	        get { return 32; }
	    }
	
	    internal String Property5
	    {
	       get { return "value"; }
	    }
	
	    protected internal String Property6
	    {
	       get { return "value"; }
	    }
	}
	
	public class Example
	{
	    public static void Main() 
	    {
	        Type t = typeof(PropertyClass);
	        PropertyInfo[] propInfos = t.GetProperties(BindingFlags.Public|BindingFlags.Instance);
	        Console.WriteLine("The number of public properties: {0}.\n",
	                          propInfos.Length);
	        DisplayPropertyInfo(propInfos);
	
	        PropertyInfo[] propInfos1 = t.GetProperties(BindingFlags.NonPublic|BindingFlags.Instance);
	        Console.WriteLine("The number of non-public properties: {0}.\n",
	                          propInfos1.Length);
	        DisplayPropertyInfo(propInfos1);
	    }
	
	    public static void DisplayPropertyInfo(PropertyInfo[] propInfos)
	    {
	        foreach (var propInfo in propInfos) {
	            bool readable = propInfo.CanRead;
	            bool writable = propInfo.CanWrite;
	            
	            Console.WriteLine("   Property name: {0}", propInfo.Name);
	            Console.WriteLine("   Property type: {0}", propInfo.PropertyType);
	            Console.WriteLine("   Read-Write:    {0}", readable & writable);
	            if (readable) {
	               MethodInfo getAccessor = propInfo.GetMethod;
	               Console.WriteLine("   Visibility:    {0}",
	                                 GetVisibility(getAccessor));
	            }
	            if (writable) {
	               MethodInfo setAccessor = propInfo.SetMethod;
	               Console.WriteLine("   Visibility:    {0}",
	                                 GetVisibility(setAccessor));
	            }
	            Console.WriteLine();
	        }
	    }
	
	    public static String GetVisibility(MethodInfo accessor)
	    {
	       if (accessor.IsPublic)
	          return "Public";
	       else if (accessor.IsPrivate)
	          return "Private";
	       else if (accessor.IsFamily)
	          return "Protected";
	       else if (accessor.IsAssembly)
	          return "Internal/Friend";
	       else
	          return "Protected Internal/Friend";
	    }
	}

snippet t_compareto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/T_CompareTo/cat.cs

	
	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string    nl = Environment.NewLine;
	    string    msg = "{0}The following is the result of using the generic and non-generic{0}" +
	                    "versions of the CompareTo method for several base types:{0}";
	
	    DateTime  now = DateTime.Now;
	    TimeSpan  tsX = new TimeSpan(11, 22, 33, 44); 
	    Version   versX = new Version("1.2.333.4");  
	    Guid      guidX = new Guid("{CA761232-ED42-11CE-BACD-00AA0057B223}");
	
	    Boolean  a1 = true,  a2 = true;
	    Byte     b1 = 1,     b2 = 1;
	    Int16    c1 = -2,    c2 = 2;
	    Int32    d1 = 3,     d2 = 3;
	    Int64    e1 = 4,     e2 = -4;
	    Decimal  f1 = -5.5m, f2 = 5.5m;
	    Single   g1 = 6.6f,  g2 = 6.6f;
	    Double   h1 = 7.7d,  h2 = -7.7d;
	    Char     i1 = 'A',   i2 = 'A';
	    String   j1 = "abc", j2 = "abc";
	    DateTime k1 = now,   k2 = now;
	    TimeSpan l1 = tsX,   l2 = tsX;
	    Version  m1 = versX, m2 = new Version("2.0");
	    Guid     n1 = guidX, n2 = guidX;
	
	    SByte    w1 = 8,     w2 = 8;
	    UInt16   x1 = 9,     x2 = 9;
	    UInt32   y1 = 10,    y2 = 10;
	    UInt64   z1 = 11,    z2 = 11;
	    Console.WriteLine(msg, nl);
	    try 
	        {
	
	        Show("Boolean:  ", a1, a2, a1.CompareTo(a2), a1.CompareTo((Object)a2));
	        Show("Byte:     ", b1, b2, b1.CompareTo(b2), b1.CompareTo((Object)b2));
	        Show("Int16:    ", c1, c2, c1.CompareTo(c2), c1.CompareTo((Object)c2));
	        Show("Int32:    ", d1, d2, d1.CompareTo(d2), d1.CompareTo((Object)d2));
	        Show("Int64:    ", e1, e2, e1.CompareTo(e2), e1.CompareTo((Object)e2));
	        Show("Decimal:  ", f1, f2, f1.CompareTo(f2), f1.CompareTo((Object)f2));
	        Show("Single:   ", g1, g2, g1.CompareTo(g2), g1.CompareTo((Object)g2));
	        Show("Double:   ", h1, h2, h1.CompareTo(h2), h1.CompareTo((Object)h2));
	        Show("Char:     ", i1, i2, i1.CompareTo(i2), i1.CompareTo((Object)i2));
	        Show("String:   ", j1, j2, j1.CompareTo(j2), j1.CompareTo((Object)j2));
	        Show("DateTime: ", k1, k2, k1.CompareTo(k2), k1.CompareTo((Object)k2));
	        Show("TimeSpan: ", l1, l2, l1.CompareTo(l2), l1.CompareTo((Object)l2));
	        Show("Version:  ", m1, m2, m1.CompareTo(m2), m1.CompareTo((Object)m2));
	        Show("Guid:     ", n1, n2, n1.CompareTo(n2), n1.CompareTo((Object)n2));
	        Console.WriteLine("{0}The following types are not CLS-compliant:", nl);
	        Show("SByte:    ", w1, w2, w1.CompareTo(w2), w1.CompareTo((Object)w2));
	        Show("UInt16:   ", x1, x2, x1.CompareTo(x2), x1.CompareTo((Object)x2));
	        Show("UInt32:   ", y1, y2, y1.CompareTo(y2), y1.CompareTo((Object)y2));
	        Show("UInt64:   ", z1, z2, z1.CompareTo(z2), z1.CompareTo((Object)z2));
	        }
	    catch (Exception e)
	        {
	        Console.WriteLine(e);
	        }
	    }
	
	    public static void Show(string caption, Object var1, Object var2, 
	                            int resultGeneric, int resultNonGeneric)
	    {
	    string relation;
	
	    Console.Write(caption);
	    if (resultGeneric == resultNonGeneric) 
	        {
	        if      (resultGeneric < 0) relation = "less than";
	        else if (resultGeneric > 0) relation = "greater than";
	        else                        relation = "equal to";
	        Console.WriteLine("{0} is {1} {2}", var1, relation, var2);
	        }
	
	
	    else
	        {
	        Console.WriteLine("Generic CompareTo = {0}; non-generic CompareTo = {1}", 
	                           resultGeneric, resultNonGeneric);
	        }
	   }
	}
	/*
	This example produces the following results:
	
	The following is the result of using the generic and non-generic versions of the
	CompareTo method for several base types:
	
	Boolean:  True is equal to True
	Byte:     1 is equal to 1
	Int16:    -2 is less than 2
	Int32:    3 is equal to 3
	Int64:    4 is greater than -4
	Decimal:  -5.5 is less than 5.5
	Single:   6.6 is equal to 6.6
	Double:   7.7 is greater than -7.7
	Char:     A is equal to A
	String:   abc is equal to abc
	DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM
	TimeSpan: 11.22:33:44 is equal to 11.22:33:44
	Version:  1.2.333.4 is less than 2.0
	Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00
	aa0057b223
	
	The following types are not CLS-compliant:
	SByte:    8 is equal to 8
	UInt16:   9 is equal to 9
	UInt32:   10 is equal to 10
	UInt64:   11 is equal to 11
	*/

snippet assemblybuilder_defineversioninforesource

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/assemblybuilder_defineversioninforesource.cs

	
	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	class Example
	{
	   public static void Main()
	   {
	      AssemblyName assemName = new AssemblyName();
	      assemName.Name = "EmittedAssembly";
	
	      AssemblyBuilder myAssembly = 
	         AppDomain.CurrentDomain.DefineDynamicAssembly(assemName, 
	            AssemblyBuilderAccess.Save);
	
	
	      Type attributeType = typeof(AssemblyFileVersionAttribute);
	
	      Type[] ctorParameters = { typeof(string) };
	
	      ConstructorInfo ctor = attributeType.GetConstructor(ctorParameters);
	
	      object[] ctorArgs = { "2.0.3033.0" };
	      CustomAttributeBuilder attribute = 
	         new CustomAttributeBuilder(ctor, ctorArgs);
	
	      myAssembly.SetCustomAttribute(attribute);
	
	
	      
	
	      attributeType = typeof(AssemblyTitleAttribute);
	      ctor = attributeType.GetConstructor(ctorParameters);
	      ctorArgs = new object[] { "The Application Title" };
	      attribute = new CustomAttributeBuilder(ctor, ctorArgs);
	      myAssembly.SetCustomAttribute(attribute);
	
	      attributeType = typeof(AssemblyCopyrightAttribute);
	      ctor = attributeType.GetConstructor(ctorParameters);
	      ctorArgs = new object[] { "© My Example Company 1991-2005" };
	      attribute = new CustomAttributeBuilder(ctor, ctorArgs);
	      myAssembly.SetCustomAttribute(attribute);
	
	      attributeType = typeof(AssemblyDescriptionAttribute);
	      ctor = attributeType.GetConstructor(ctorParameters);
	      attribute = new CustomAttributeBuilder(ctor, 
	         new object[] { "This is a comment." });
	      myAssembly.SetCustomAttribute(attribute);
	
	      attributeType = typeof(AssemblyCompanyAttribute);
	      ctor = attributeType.GetConstructor(ctorParameters);
	      attribute = new CustomAttributeBuilder(ctor, 
	         new object[] { "My Example Company" });
	      myAssembly.SetCustomAttribute(attribute);
	
	      attributeType = typeof(AssemblyProductAttribute);
	      ctor = attributeType.GetConstructor(ctorParameters);
	      attribute = new CustomAttributeBuilder(ctor, 
	         new object[] { "My Product Name" });
	      myAssembly.SetCustomAttribute(attribute);
	
	
	      ModuleBuilder myModule = 
	         myAssembly.DefineDynamicModule(assemName.Name, 
	            assemName.Name + ".exe");
	
	
	
	      myAssembly.DefineVersionInfoResource();
	      myAssembly.Save(assemName.Name + ".exe");
	
	   }
	}
	
	

snippet rijndaelmanaged_example

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RijndaelManaged_Example/class1.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	namespace RijndaelManaged_Example
	{
	    class RijndaelExample
	    {
	        public static void Main()
	        {
	            try
	            {
	
	                string original = "Here is some data to encrypt!";
	
	                using (RijndaelManaged myRijndael = new RijndaelManaged())
	                {
	
						myRijndael.GenerateKey();
	                	myRijndael.GenerateIV();
	                    byte[] encrypted = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV);
	
	                    string roundtrip = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV);
	
	                    Console.WriteLine("Original:   {0}", original);
	                    Console.WriteLine("Round Trip: {0}", roundtrip);
	                }
	
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine("Error: {0}", e.Message);
	            }
	        }
	        static byte[] EncryptStringToBytes(string plainText, byte[] Key, byte[] IV)
	        {
	            if (plainText == null || plainText.Length <= 0)
	                throw new ArgumentNullException("plainText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("IV");
	            byte[] encrypted;
	            using (RijndaelManaged rijAlg = new RijndaelManaged())
	            {
	                rijAlg.Key = Key;
	                rijAlg.IV = IV;
	
	                ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);
	
	                using (MemoryStream msEncrypt = new MemoryStream())
	                {
	                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
	                    {
	                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
	                        {
	
	                            swEncrypt.Write(plainText);
	                        }
	                        encrypted = msEncrypt.ToArray();
	                    }
	                }
	            }
	
	
	            return encrypted;
	
	        }
	
	        static string DecryptStringFromBytes(byte[] cipherText, byte[] Key, byte[] IV)
	        {
	            if (cipherText == null || cipherText.Length <= 0)
	                throw new ArgumentNullException("cipherText");
	            if (Key == null || Key.Length <= 0)
	                throw new ArgumentNullException("Key");
	            if (IV == null || IV.Length <= 0)
	                throw new ArgumentNullException("IV");
	
	            string plaintext = null;
	
	            using (RijndaelManaged rijAlg = new RijndaelManaged())
	            {
	                rijAlg.Key = Key;
	                rijAlg.IV = IV;
	
	                ICryptoTransform decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);
	
	                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
	                {
	                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
	                    {
	                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
	                        {
	                            plaintext = srDecrypt.ReadToEnd();
	                        }
	                    }
	                }
	
	            }
	
	            return plaintext;
	
	        }
	    }
	}

snippet fieldbuilder_setcustomattributes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/FieldBuilder_SetCustomAttributes/fieldbuilder_setcustomattributes.cs

	
	/*
	   The following program demonstrates 'SetCustomAttribute(ConstructorInfo,byte[])'
	   and 'SetCustomAttribute(CustomAttributeBuilder)' methods of 'FieldBuilder' class.
	   A dynamic assembly is created. A new class of type 'MyClass' is created.
	   A 'Method' and a 'Field are defined in the class.Two 'CustomAttributes' are
	   set to the field.The method initializes a value to 'Field'.Value of the field
	   is displayed to console.Values of Attributes applied to field are retreived and
	   displayed to console.
	*/
	
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	
	namespace MySample
	{
	   [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
	   public class MyAttribute1 :Attribute
	   {
	      public string myCustomAttributeValue;
	      public MyAttribute1(string myString)
	      {
	         myCustomAttributeValue = myString;
	
	      }
	   }
	   [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
	   public class MyAttribute2 :Attribute
	   {
	      public bool myCustomAttributeValue;
	      public MyAttribute2(bool myBool)
	      {
	         myCustomAttributeValue = myBool;
	
	      }
	   }
	
	   class FieldBuilder_Sample
	   {
	      private static Type CreateCallee(AppDomain currentDomain)
	      {
	
	         AssemblyName myAssemblyName = new AssemblyName();
	         myAssemblyName.Name = "EmittedAssembly";
	         AssemblyBuilder myAssemblyBuilder =
	            currentDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	         ModuleBuilder myModuleBuilder =
	                  myAssemblyBuilder.DefineDynamicModule("EmittedModule","EmittedModule.mod");
	         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("CustomClass",
	            TypeAttributes.Public);
	         FieldBuilder myFieldBuilder =
	            myTypeBuilder.DefineField("MyField", typeof(String), FieldAttributes.Public);
	         Type myAttributeType1 = typeof(MyAttribute1);
	         ConstructorInfo myConstructorInfo = myAttributeType1.GetConstructor(
	            new Type[1]{typeof(string)});
	         CustomAttributeBuilder attributeBuilder =
	                     new CustomAttributeBuilder( myConstructorInfo,new object[1]{"Test"});
	         myFieldBuilder.SetCustomAttribute(attributeBuilder);
	
	          Type myAttributeType2 = typeof(MyAttribute2);
	        ConstructorInfo myConstructorInfo2 = myAttributeType2.GetConstructor(
	            new Type[1]{typeof(bool)});
	         myFieldBuilder.SetCustomAttribute(myConstructorInfo2,new byte[]{01,00,01,00,00});
	
	         MethodBuilder myMethodBuilder= myTypeBuilder.DefineMethod("MyMethod",
	            MethodAttributes.Public,null,new Type[2]{typeof(string),typeof(int)});
	
	         ILGenerator myILGenerator = myMethodBuilder.GetILGenerator();
	         myILGenerator.Emit(OpCodes.Ldarg_0);
	         myILGenerator.Emit(OpCodes.Ldarg_1);
	         myILGenerator.Emit(OpCodes.Stfld, myFieldBuilder);
	         myILGenerator.EmitWriteLine("Value of the Field is :");
	         myILGenerator.EmitWriteLine(myFieldBuilder);
	         myILGenerator.Emit(OpCodes.Ret);
	
	         return myTypeBuilder.CreateType();
	      }
	      public static void Main()
	      {
	         try
	         {
	            Type myCustomClass = CreateCallee(Thread.GetDomain());
	            Object myObject = Activator.CreateInstance(myCustomClass);
	            Console.WriteLine( "FieldBuilder Sample");
	            MethodInfo myMethodInfo = myCustomClass.GetMethod("MyMethod");
	            myMethodInfo.Invoke(myObject, new object[2]{"Sample string",3});
	            FieldInfo[] myFieldInfo = myCustomClass.GetFields();
	            for(int i =0;i<myFieldInfo.Length;i++)
	            {
	               object[] attributes = myFieldInfo[i].GetCustomAttributes(true);
	               for(int index=0; index < attributes.Length; index++)
	               {
	                  if(attributes[index] is MyAttribute1)
	                  {
	                     MyAttribute1 myCustomAttribute = (MyAttribute1)attributes[index];
	                     Console.WriteLine("Attribute Value of (MyAttribute1): "
	                                       + myCustomAttribute.myCustomAttributeValue);
	                  }
	                  if(attributes[index] is MyAttribute2)
	                  {
	                     MyAttribute2 myCustomAttribute = (MyAttribute2)attributes[index];
	                     Console.WriteLine("Attribute Value of (MyAttribute2): "
	                                       + myCustomAttribute.myCustomAttributeValue);
	                  }
	               }
	            }
	         }
	         catch (Exception e)
	         {
	            Console.WriteLine("Exception Caught "+e.Message);
	         }
	      }
	   }
	}
snippet resourcepermissionbase

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ResourcePermissionBase/resourcepermissionbase.cs

	using System;        
	using System.Security.Permissions;  
	using System.Collections;
	
	[Serializable()]
	public class MailslotPermission: ResourcePermissionBase
	{
	 
		private ArrayList innerCollection;
	
		public MailslotPermission() 
		{
			SetNames();
		}                                                                
	
		public MailslotPermission(PermissionState state):base(state)
		{
			SetNames();
		}  
	
		public MailslotPermission(MailslotPermissionAccess permissionAccess, string name, string machineName)
		{
			SetNames();
			this.AddPermissionAccess(new MailslotPermissionEntry(permissionAccess, name, machineName));              
		}
	
		public MailslotPermission(MailslotPermissionEntry[] permissionAccessEntries) 
		{
			SetNames();
			if (permissionAccessEntries == null)
				throw new ArgumentNullException("permissionAccessEntries");
	      
			for (int index = 0; index < permissionAccessEntries.Length; ++index)
				this.AddPermissionAccess(permissionAccessEntries[index]);                          
		}
	
		public ArrayList PermissionEntries 
		{
			get 
			{
				if (this.innerCollection == null)                     
					this.innerCollection = new ArrayList();
				this.innerCollection.InsertRange(0,base.GetPermissionEntries()); 
	
				return this.innerCollection;                                                               
			}
		}
	
		internal void AddPermissionAccess(MailslotPermissionEntry entry) 
		{
			base.AddPermissionAccess(entry.GetBaseEntry());
		}
	
		internal new void Clear() 
		{
			base.Clear();
		}
	
		internal void RemovePermissionAccess(MailslotPermissionEntry entry) 
		{
			base.RemovePermissionAccess(entry.GetBaseEntry());
		}
	
		private void SetNames() 
		{
			this.PermissionAccessType = typeof(MailslotPermissionAccess);
			this.TagNames = new string[]{"Name","Machine"};
		}                                
	}
	
	[Flags]         
	public enum MailslotPermissionAccess 
	{
		None = 0,
		Send = 1 << 1,
		Receive = 1 << 2 | Send,
	} 
	
	[Serializable()]     
	public class MailslotPermissionEntry 
	{
		private string name;
		private string machineName;
		private MailslotPermissionAccess permissionAccess;
	
		public MailslotPermissionEntry(MailslotPermissionAccess permissionAccess, string name, string machineName) 
		{
			this.permissionAccess = permissionAccess;
			this.name = name;
			this.machineName = machineName;
		}  
	
		internal MailslotPermissionEntry(ResourcePermissionBaseEntry baseEntry) 
		{
			this.permissionAccess = (MailslotPermissionAccess)baseEntry.PermissionAccess;
			this.name = baseEntry.PermissionAccessPath[0]; 
			this.machineName = baseEntry.PermissionAccessPath[1]; 
		}
	
		public string Name 
		{
			get 
			{                
				return this.name;                
			}                        
		}
	
		public string MachineName 
		{
			get 
			{                
				return this.machineName;                
			}                        
		}
	
		public MailslotPermissionAccess PermissionAccess 
		{
			get 
			{
				return this.permissionAccess;
			}                        
		}      
	
		internal ResourcePermissionBaseEntry GetBaseEntry() 
		{
			ResourcePermissionBaseEntry baseEntry = new ResourcePermissionBaseEntry((int)this.PermissionAccess, new string[] {this.Name,this.MachineName});            
			return baseEntry;
		}
	
	}

snippet conceptual_clscompliant

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_clscompliant/event1.cs

	using System;
	using System.Collections;
	using System.Collections.Generic;
	
	[assembly: CLSCompliant(true)]
	
	public class TemperatureChangedEventArgs : EventArgs
	{
	   private Decimal originalTemp;
	   private Decimal newTemp; 
	   private DateTimeOffset when;
	   
	   public TemperatureChangedEventArgs(Decimal original, Decimal @new, DateTimeOffset time)
	   {
	      originalTemp = original;
	      newTemp = @new;
	      when = time;
	   }   
	   
	   public Decimal OldTemperature
	   {
	      get { return originalTemp; }
	   } 
	   
	   public Decimal CurrentTemperature
	   {
	      get { return newTemp; }
	   } 
	   
	   public DateTimeOffset Time
	   {
	      get { return when; }
	   }
	}
	
	public delegate void TemperatureChanged(Object sender, TemperatureChangedEventArgs e);
	
	public class Temperature
	{
	   private struct TemperatureInfo
	   {
	      public Decimal Temperature;
	      public DateTimeOffset Recorded;
	   }
	   
	   public event TemperatureChanged TemperatureChanged;
	
	   private Decimal previous;
	   private Decimal current;
	   private Decimal tolerance;
	   private List<TemperatureInfo> tis = new List<TemperatureInfo>();
	      
	   public Temperature(Decimal temperature, Decimal tolerance)
	   {
	      current = temperature;
	      TemperatureInfo ti = new TemperatureInfo();
	      ti.Temperature = temperature;
	      tis.Add(ti);
	      ti.Recorded = DateTimeOffset.UtcNow;
	      this.tolerance = tolerance;
	   }
	 
	   public Decimal CurrentTemperature
	   {
	      get { return current; }
	      set {
	         TemperatureInfo ti = new TemperatureInfo();
	         ti.Temperature = value;
	         ti.Recorded = DateTimeOffset.UtcNow;
	         previous = current;
	         current = value;
	         if (Math.Abs(current - previous) >= tolerance) 
	            raise_TemperatureChanged(new TemperatureChangedEventArgs(previous, current, ti.Recorded));
	      }
	   }
	   
	   public void raise_TemperatureChanged(TemperatureChangedEventArgs eventArgs)
	   {
	      if (TemperatureChanged == null)
	         return; 
	
	      foreach (TemperatureChanged d in TemperatureChanged.GetInvocationList()) {
	         if (d.Method.Name.Contains("Duplicate"))
	            Console.WriteLine("Duplicate event handler; event handler not executed.");
	         else
	            d.Invoke(this, eventArgs);
	      }
	   }
	}
	
	public class Example
	{
	   public Temperature temp;
	   
	   public static void Main()
	   {
	      Example ex = new Example();
	   }
	
	   public Example()
	   {
	      temp = new Temperature(65, 3);
	      temp.TemperatureChanged += this.TemperatureNotification;
	      RecordTemperatures();
	      Example ex = new Example(temp);
	      ex.RecordTemperatures();
	   }
	      
	   public Example(Temperature t)
	   {
	      temp = t;
	      RecordTemperatures();
	   }
	   
	   public void RecordTemperatures()
	   {
	      temp.TemperatureChanged += this.DuplicateTemperatureNotification;
	      temp.CurrentTemperature = 66;
	      temp.CurrentTemperature = 63;
	   }
	   
	   internal void TemperatureNotification(Object sender, TemperatureChangedEventArgs e) 
	   {
	      Console.WriteLine("Notification 1: The temperature changed from {0} to {1}", e.OldTemperature, e.CurrentTemperature);   
	   }
	   
	   public void DuplicateTemperatureNotification(Object sender, TemperatureChangedEventArgs e)
	   { 
	      Console.WriteLine("Notification 2: The temperature changed from {0} to {1}", e.OldTemperature, e.CurrentTemperature);   
	   }
	}
	

snippet methodinfo_generics

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MethodInfo_Generics/source.cs

	using System;
	using System.Reflection;
	
	public class Example
	{
	    public static void Generic<T>(T toDisplay)
	    {
	        Console.WriteLine("\r\nHere it is: {0}", toDisplay);
	    }
	}
	
	public class Test
	{
	    public static void Main()
	    {
	        Console.WriteLine("\r\n--- Examine a generic method.");
	
	        Type ex = typeof(Example);
	        MethodInfo mi = ex.GetMethod("Generic");
	
	        DisplayGenericMethodInfo(mi);
	
	        MethodInfo miConstructed = mi.MakeGenericMethod(typeof(int));
	
	        DisplayGenericMethodInfo(miConstructed);
	
	        object[] args = {42};
	        miConstructed.Invoke(null, args);
	
	        Example.Generic<int>(42);
	
	        MethodInfo miDef = miConstructed.GetGenericMethodDefinition();
	        Console.WriteLine("\r\nThe definition is the same: {0}",
	            miDef == mi);
	    }
	        
	    private static void DisplayGenericMethodInfo(MethodInfo mi)
	    {
	        Console.WriteLine("\r\n{0}", mi);
	
	        Console.WriteLine("\tIs this a generic method definition? {0}", 
	            mi.IsGenericMethodDefinition);
	
	        Console.WriteLine("\tIs it a generic method? {0}", 
	            mi.IsGenericMethod);
	
	        Console.WriteLine("\tDoes it have unassigned generic parameters? {0}", 
	            mi.ContainsGenericParameters);
	
	        if (mi.IsGenericMethod)
	        {
	            Type[] typeArguments = mi.GetGenericArguments();
	
	            Console.WriteLine("\tList type arguments ({0}):", 
	                typeArguments.Length);
	
	            foreach (Type tParam in typeArguments)
	            {
	                if (tParam.IsGenericParameter)
	                {
	                    Console.WriteLine("\t\t{0}  parameter position {1}" +
	                        "\n\t\t   declaring method: {2}",
	                        tParam,
	                        tParam.GenericParameterPosition,
	                        tParam.DeclaringMethod);
	                }
	                else
	                {
	                    Console.WriteLine("\t\t{0}", tParam);
	                }
	            }
	        }
	    }
	}
	
	/* This example produces the following output:
	
	--- Examine a generic method.
	
	Void Generic[T](T)
	        Is this a generic method definition? True
	        Is it a generic method? True
	        Does it have unassigned generic parameters? True
	        List type arguments (1):
	                T  parameter position 0
	                   declaring method: Void Generic[T](T)
	
	Void Generic[Int32](Int32)
	        Is this a generic method definition? False
	        Is it a generic method? True
	        Does it have unassigned generic parameters? False
	        List type arguments (1):
	                System.Int32
	
	Here it is: 42
	
	Here it is: 42
	
	The definition is the same: True
	
	 */

snippet formatting_howto_padnumber

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_PadNumber/Pad1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      PadInteger();
	      Console.WriteLine("-----");
	      PadIntegerWithNZeroes();
	      Console.WriteLine("-----");
	      PadNumber();
	      Console.WriteLine("-----");
	      PadNumberWithNZeroes();
	   }
	
	   private static void PadInteger()
	   {
	      byte byteValue = 254;
	      short shortValue = 10342;
	      int intValue = 1023983;
	      long lngValue = 6985321;               
	      ulong ulngValue = UInt64.MaxValue;
	      
	      Console.WriteLine("{0,22} {1,22}", byteValue.ToString("D8"), byteValue.ToString("X8"));
	      Console.WriteLine("{0,22} {1,22}", shortValue.ToString("D8"), shortValue.ToString("X8"));
	      Console.WriteLine("{0,22} {1,22}", intValue.ToString("D8"), intValue.ToString("X8"));
	      Console.WriteLine("{0,22} {1,22}", lngValue.ToString("D8"), lngValue.ToString("X8"));
	      Console.WriteLine("{0,22} {1,22}", ulngValue.ToString("D8"), ulngValue.ToString("X8"));
	      Console.WriteLine();
	      
	      Console.WriteLine("{0,22:D8} {0,22:X8}", byteValue);
	      Console.WriteLine("{0,22:D8} {0,22:X8}", shortValue);
	      Console.WriteLine("{0,22:D8} {0,22:X8}", intValue);
	      Console.WriteLine("{0,22:D8} {0,22:X8}", lngValue);
	      Console.WriteLine("{0,22:D8} {0,22:X8}", ulngValue);
	   }
	
	   private static void PadIntegerWithNZeroes()
	   {
	      int value = 160934;
	      int decimalLength = value.ToString("D").Length + 5;
	      int hexLength = value.ToString("X").Length + 5;
	      Console.WriteLine(value.ToString("D" + decimalLength.ToString()));
	      Console.WriteLine(value.ToString("X" + hexLength.ToString()));
	   }
	
	   private static void PadNumber()
	   {
	      string fmt = "00000000.##";
	      int intValue = 1053240;
	      decimal decValue = 103932.52m;
	      float sngValue = 1549230.10873992f;
	      double dblValue = 9034521202.93217412;
	      
	      Console.WriteLine(intValue.ToString(fmt));
	      Console.WriteLine(decValue.ToString(fmt));           
	      Console.WriteLine(sngValue.ToString(fmt));
	      Console.WriteLine(dblValue.ToString(fmt));           
	      Console.WriteLine();
	      
	      string formatString = " {0,15:" + fmt + "}";
	      Console.WriteLine(formatString, intValue);      
	      Console.WriteLine(formatString, decValue);      
	      Console.WriteLine(formatString, sngValue);      
	      Console.WriteLine(formatString, dblValue);      
	   }
	   
	   private static void PadNumberWithNZeroes()
	   {
	      double[] dblValues = { 9034521202.93217412, 9034521202 };
	      foreach (double dblValue in dblValues)
	      {
	         string decSeparator = System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator;
	         string fmt, formatString;
	         
	         if (dblValue.ToString().Contains(decSeparator))
	         {
	            int digits = dblValue.ToString().IndexOf(decSeparator);
	            fmt = new String('0', 5) + new String('#', digits) + ".##";
	         }
	         else
	         {
	            fmt = new String('0', dblValue.ToString().Length);   
	         }
	         formatString = "{0,20:" + fmt + "}";
	
	         Console.WriteLine(dblValue.ToString(fmt));
	         Console.WriteLine(formatString, dblValue);
	      }
	   }
	}

snippet hmacmd5

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HMACMD5/hmacmd5.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	public class HMACMD5example
	{
	
	    public static void Main(string[] Fileargs)
	    {
	        string dataFile;
	        string signedFile;
	        if (Fileargs.Length < 2)
	        {
	            dataFile = @"text.txt";
	            signedFile = "signedFile.enc";
	
	            if (!File.Exists(dataFile))
	            {
	                using (StreamWriter sw = File.CreateText(dataFile))
	                {
	                    sw.WriteLine("Here is a message to sign");
	                }
	            }
	
	        }
	        else
	        {
	            dataFile = Fileargs[0];
	            signedFile = Fileargs[1];
	        }
	        try
	        {
	            byte[] secretkey = new Byte[64];
	            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
	            {
	                rng.GetBytes(secretkey);
	
	                SignFile(secretkey, dataFile, signedFile);
	
	                VerifyFile(secretkey, signedFile);
	            }
	        }
	        catch (IOException e)
	        {
	            Console.WriteLine("Error: File not found", e);
	        }
	
	    public static void SignFile(byte[] key, String sourceFile, String destFile)
	    {
	        using (HMACMD5 hmac = new HMACMD5(key))
	        {
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                using (FileStream outStream = new FileStream(destFile, FileMode.Create))
	                {
	                    byte[] hashValue = hmac.ComputeHash(inStream);
	                    inStream.Position = 0;
	                    outStream.Write(hashValue, 0, hashValue.Length);
	                    int bytesRead;
	                    byte[] buffer = new byte[1024];
	                    do
	                    {
	                        bytesRead = inStream.Read(buffer, 0, 1024);
	                        outStream.Write(buffer, 0, bytesRead);
	                    } while (bytesRead > 0);
	                }
	            }
	        }
	        return;
	
	
	    public static bool VerifyFile(byte[] key, String sourceFile)
	    {
	        bool err = false;
	        using (HMACMD5 hmac = new HMACMD5(key))
	        {
	            byte[] storedHash = new byte[hmac.HashSize / 8];
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                inStream.Read(storedHash, 0, storedHash.Length);
	                byte[] computedHash = hmac.ComputeHash(inStream);
	
	                for (int i = 0; i < storedHash.Length; i++)
	                {
	                    if (computedHash[i] != storedHash[i])
	                    {
	                        err = true;
	                    }
	                }
	            }
	        }
	        if (err)
	        {
	            Console.WriteLine("Hash values differ! Signed file has been tampered with!");
	            return false;
	        }
	        else
	        {
	            Console.WriteLine("Hash values agree -- no tampering occurred.");
	            return true;
	        }
	
	
snippet hmacsha1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HMACSHA1/hmacsha1.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	public class HMACSHA1example
	{
	
	    public static void Main(string[] Fileargs)
	    {
	        string dataFile;
	        string signedFile;
	        if (Fileargs.Length < 2)
	        {
	            dataFile = @"text.txt";
	            signedFile = "signedFile.enc";
	
	            if (!File.Exists(dataFile))
	            {
	                using (StreamWriter sw = File.CreateText(dataFile))
	                {
	                    sw.WriteLine("Here is a message to sign");
	                }
	            }
	
	        }
	        else
	        {
	            dataFile = Fileargs[0];
	            signedFile = Fileargs[1];
	        }
	        try
	        {
	            byte[] secretkey = new Byte[64];
	            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
	            {
	                rng.GetBytes(secretkey);
	
	                SignFile(secretkey, dataFile, signedFile);
	
	                VerifyFile(secretkey, signedFile);
	            }
	        }
	        catch (IOException e)
	        {
	            Console.WriteLine("Error: File not found", e);
	        }
	
	    public static void SignFile(byte[] key, String sourceFile, String destFile)
	    {
	        using (HMACSHA1 hmac = new HMACSHA1(key))
	        {
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                using (FileStream outStream = new FileStream(destFile, FileMode.Create))
	                {
	                    byte[] hashValue = hmac.ComputeHash(inStream);
	                    inStream.Position = 0;
	                    outStream.Write(hashValue, 0, hashValue.Length);
	                    int bytesRead;
	                    byte[] buffer = new byte[1024];
	                    do
	                    {
	                        bytesRead = inStream.Read(buffer, 0, 1024);
	                        outStream.Write(buffer, 0, bytesRead);
	                    } while (bytesRead > 0);
	                }
	            }
	        }
	        return;
	
	
	    public static bool VerifyFile(byte[] key, String sourceFile)
	    {
	        bool err = false;
	        using (HMACSHA1 hmac = new HMACSHA1(key))
	        {
	            byte[] storedHash = new byte[hmac.HashSize / 8];
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                inStream.Read(storedHash, 0, storedHash.Length);
	                byte[] computedHash = hmac.ComputeHash(inStream);
	
	                for (int i = 0; i < storedHash.Length; i++)
	                {
	                    if (computedHash[i] != storedHash[i])
	                    {
	                        err = true;
	                    }
	                }
	            }
	        }
	        if (err)
	        {
	            Console.WriteLine("Hash values differ! Signed file has been tampered with!");
	            return false;
	        }
	        else
	        {
	            Console.WriteLine("Hash values agree -- no tampering occurred.");
	            return true;
	        }
	
	
snippet hmacsha256

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HMACSHA256/hmacsha256.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	public class HMACSHA256example
	{
	
	    public static void Main(string[] Fileargs)
	    {
	        string dataFile;
	        string signedFile;
	        if (Fileargs.Length < 2)
	        {
	            dataFile = @"text.txt";
	            signedFile = "signedFile.enc";
	
	            if (!File.Exists(dataFile))
	            {
	                using (StreamWriter sw = File.CreateText(dataFile))
	                {
	                    sw.WriteLine("Here is a message to sign");
	                }
	            }
	
	        }
	        else
	        {
	            dataFile = Fileargs[0];
	            signedFile = Fileargs[1];
	        }
	        try
	        {
	            byte[] secretkey = new Byte[64];
	            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
	            {
	                rng.GetBytes(secretkey);
	
	                SignFile(secretkey, dataFile, signedFile);
	
	                VerifyFile(secretkey, signedFile);
	            }
	        }
	        catch (IOException e)
	        {
	            Console.WriteLine("Error: File not found", e);
	        }
	
	    public static void SignFile(byte[] key, String sourceFile, String destFile)
	    {
	        using (HMACSHA256 hmac = new HMACSHA256(key))
	        {
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                using (FileStream outStream = new FileStream(destFile, FileMode.Create))
	                {
	                    byte[] hashValue = hmac.ComputeHash(inStream);
	                    inStream.Position = 0;
	                    outStream.Write(hashValue, 0, hashValue.Length);
	                    int bytesRead;
	                    byte[] buffer = new byte[1024];
	                    do
	                    {
	                        bytesRead = inStream.Read(buffer, 0, 1024);
	                        outStream.Write(buffer, 0, bytesRead);
	                    } while (bytesRead > 0);
	                }
	            }
	        }
	        return;
	
	
	    public static bool VerifyFile(byte[] key, String sourceFile)
	    {
	        bool err = false;
	        using (HMACSHA256 hmac = new HMACSHA256(key))
	        {
	            byte[] storedHash = new byte[hmac.HashSize / 8];
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                inStream.Read(storedHash, 0, storedHash.Length);
	                byte[] computedHash = hmac.ComputeHash(inStream);
	
	                for (int i = 0; i < storedHash.Length; i++)
	                {
	                    if (computedHash[i] != storedHash[i])
	                    {
	                        err = true;
	                    }
	                }
	            }
	        }
	        if (err)
	        {
	            Console.WriteLine("Hash values differ! Signed file has been tampered with!");
	            return false;
	        }
	        else
	        {
	            Console.WriteLine("Hash values agree -- no tampering occurred.");
	            return true;
	        }
	
	
snippet hmacsha384

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HMACSHA384/hmacsha384.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	public class HMACSHA384example
	{
	
	    public static void Main(string[] Fileargs)
	    {
	        string dataFile;
	        string signedFile;
	        if (Fileargs.Length < 2)
	        {
	            dataFile = @"text.txt";
	            signedFile = "signedFile.enc";
	
	            if (!File.Exists(dataFile))
	            {
	                using (StreamWriter sw = File.CreateText(dataFile))
	                {
	                    sw.WriteLine("Here is a message to sign");
	                }
	            }
	
	        }
	        else
	        {
	            dataFile = Fileargs[0];
	            signedFile = Fileargs[1];
	        }
	        try
	        {
	            byte[] secretkey = new Byte[64];
	            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
	            {
	                rng.GetBytes(secretkey);
	
	                SignFile(secretkey, dataFile, signedFile);
	
	                VerifyFile(secretkey, signedFile);
	            }
	        }
	        catch (IOException e)
	        {
	            Console.WriteLine("Error: File not found", e);
	        }
	
	    public static void SignFile(byte[] key, String sourceFile, String destFile)
	    {
	        using (HMACSHA384 hmac = new HMACSHA384(key))
	        {
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                using (FileStream outStream = new FileStream(destFile, FileMode.Create))
	                {
	                    byte[] hashValue = hmac.ComputeHash(inStream);
	                    inStream.Position = 0;
	                    outStream.Write(hashValue, 0, hashValue.Length);
	                    int bytesRead;
	                    byte[] buffer = new byte[1024];
	                    do
	                    {
	                        bytesRead = inStream.Read(buffer, 0, 1024);
	                        outStream.Write(buffer, 0, bytesRead);
	                    } while (bytesRead > 0);
	                }
	            }
	        }
	        return;
	
	
	    public static bool VerifyFile(byte[] key, String sourceFile)
	    {
	        bool err = false;
	        using (HMACSHA384 hmac = new HMACSHA384(key))
	        {
	            byte[] storedHash = new byte[hmac.HashSize / 8];
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                inStream.Read(storedHash, 0, storedHash.Length);
	                byte[] computedHash = hmac.ComputeHash(inStream);
	
	                for (int i = 0; i < storedHash.Length; i++)
	                {
	                    if (computedHash[i] != storedHash[i])
	                    {
	                        err = true;
	                    }
	                }
	            }
	        }
	        if (err)
	        {
	            Console.WriteLine("Hash values differ! Signed file has been tampered with!");
	            return false;
	        }
	        else
	        {
	            Console.WriteLine("Hash values agree -- no tampering occurred.");
	            return true;
	        }
	
	
snippet hmacsha512

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HMACSHA512/hmacsha512.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	public class HMACSHA512example
	{
	
	    public static void Main(string[] Fileargs)
	    {
	        string dataFile;
	        string signedFile;
	        if (Fileargs.Length < 2)
	        {
	            dataFile = @"text.txt";
	            signedFile = "signedFile.enc";
	
	            if (!File.Exists(dataFile))
	            {
	                using (StreamWriter sw = File.CreateText(dataFile))
	                {
	                    sw.WriteLine("Here is a message to sign");
	                }
	            }
	
	        }
	        else
	        {
	            dataFile = Fileargs[0];
	            signedFile = Fileargs[1];
	        }
	        try
	        {
	            byte[] secretkey = new Byte[64];
	            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
	            {
	                rng.GetBytes(secretkey);
	
	                SignFile(secretkey, dataFile, signedFile);
	
	                VerifyFile(secretkey, signedFile);
	            }
	        }
	        catch (IOException e)
	        {
	            Console.WriteLine("Error: File not found", e);
	        }
	
	    public static void SignFile(byte[] key, String sourceFile, String destFile)
	    {
	        using (HMACSHA512 hmac = new HMACSHA512(key))
	        {
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                using (FileStream outStream = new FileStream(destFile, FileMode.Create))
	                {
	                    byte[] hashValue = hmac.ComputeHash(inStream);
	                    inStream.Position = 0;
	                    outStream.Write(hashValue, 0, hashValue.Length);
	                    int bytesRead;
	                    byte[] buffer = new byte[1024];
	                    do
	                    {
	                        bytesRead = inStream.Read(buffer, 0, 1024);
	                        outStream.Write(buffer, 0, bytesRead);
	                    } while (bytesRead > 0);
	                }
	            }
	        }
	        return;
	
	
	    public static bool VerifyFile(byte[] key, String sourceFile)
	    {
	        bool err = false;
	        using (HMACSHA512 hmac = new HMACSHA512(key))
	        {
	            byte[] storedHash = new byte[hmac.HashSize / 8];
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                inStream.Read(storedHash, 0, storedHash.Length);
	                byte[] computedHash = hmac.ComputeHash(inStream);
	
	                for (int i = 0; i < storedHash.Length; i++)
	                {
	                    if (computedHash[i] != storedHash[i])
	                    {
	                        err = true;
	                    }
	                }
	            }
	        }
	        if (err)
	        {
	            Console.WriteLine("Hash values differ! Signed file has been tampered with!");
	            return false;
	        }
	        else
	        {
	            Console.WriteLine("Hash values agree -- no tampering occurred.");
	            return true;
	        }
	
	
snippet mac3des

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MAC3DES/program.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	public class MACTripleDESexample
	{
	
	    public static void Main(string[] Fileargs)
	    {
	        string dataFile;
	        string signedFile;
	        if (Fileargs.Length < 2)
	        {
	            dataFile = @"text.txt";
	            signedFile = "signedFile.enc";
	
	            if (!File.Exists(dataFile))
	            {
	                using (StreamWriter sw = File.CreateText(dataFile))
	                {
	                    sw.WriteLine("Here is a message to sign");
	                }
	            }
	
	        }
	        else
	        {
	            dataFile = Fileargs[0];
	            signedFile = Fileargs[1];
	        }
	        try
	        {
	            byte[] secretkey = new Byte[24];
	            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
	            {
	                rng.GetBytes(secretkey);
	
	                SignFile(secretkey, dataFile, signedFile);
	
	                VerifyFile(secretkey, signedFile);
	            }
	        }
	        catch (IOException e)
	        {
	            Console.WriteLine("Error: File not found", e);
	        }
	
	    public static void SignFile(byte[] key, String sourceFile, String destFile)
	    {
	        using (MACTripleDES hmac = new MACTripleDES(key))
	        {
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                using (FileStream outStream = new FileStream(destFile, FileMode.Create))
	                {
	                    byte[] hashValue = hmac.ComputeHash(inStream);
	                    inStream.Position = 0;
	                    outStream.Write(hashValue, 0, hashValue.Length);
	                    int bytesRead;
	                    byte[] buffer = new byte[1024];
	                    do
	                    {
	                        bytesRead = inStream.Read(buffer, 0, 1024);
	                        outStream.Write(buffer, 0, bytesRead);
	                    } while (bytesRead > 0);
	                }
	            }
	        }
	        return;
	
	
	    public static bool VerifyFile(byte[] key, String sourceFile)
	    {
	        bool err = false;
	        using (MACTripleDES hmac = new MACTripleDES(key))
	        {
	            byte[] storedHash = new byte[hmac.HashSize / 8];
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                inStream.Read(storedHash, 0, storedHash.Length);
	                byte[] computedHash = hmac.ComputeHash(inStream);
	
	                for (int i = 0; i < storedHash.Length; i++)
	                {
	                    if (computedHash[i] != storedHash[i])
	                    {
	                        err = true;
	                    }
	                }
	            }
	        }
	        if (err)
	        {
	            Console.WriteLine("Hash values differ! Signed file has been tampered with!");
	            return false;
	        }
	        else
	        {
	            Console.WriteLine("Hash values agree -- no tampering occurred.");
	            return true;
	        }
	
	
snippet hmacripemd160

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/hmacripemd160.cs

	using System;
	using System.IO;
	using System.Security.Cryptography;
	
	public class HMACRIPEMD160example
	{
	
	    public static void Main(string[] Fileargs)
	    {
	        string dataFile;
	        string signedFile;
	        if (Fileargs.Length < 2)
	        {
	            dataFile = @"text.txt";
	            signedFile = "signedFile.enc";
	
	            if (!File.Exists(dataFile))
	            {
	                using (StreamWriter sw = File.CreateText(dataFile))
	                {
	                    sw.WriteLine("Here is a message to sign");
	                }
	            }
	
	        }
	        else
	        {
	            dataFile = Fileargs[0];
	            signedFile = Fileargs[1];
	        }
	        try
	        {
	            byte[] secretkey = new Byte[64];
	            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
	            {
	                rng.GetBytes(secretkey);
	
	                SignFile(secretkey, dataFile, signedFile);
	
	                VerifyFile(secretkey, signedFile);
	            }
	        }
	        catch (IOException e)
	        {
	            Console.WriteLine("Error: File not found", e);
	        }
	
	    public static void SignFile(byte[] key, String sourceFile, String destFile)
	    {
	        using (HMACRIPEMD160 hmac = new HMACRIPEMD160(key))
	        {
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                using (FileStream outStream = new FileStream(destFile, FileMode.Create))
	                {
	                    byte[] hashValue = hmac.ComputeHash(inStream);
	                    inStream.Position = 0;
	                    outStream.Write(hashValue, 0, hashValue.Length);
	                    int bytesRead;
	                    byte[] buffer = new byte[1024];
	                    do
	                    {
	                        bytesRead = inStream.Read(buffer, 0, 1024);
	                        outStream.Write(buffer, 0, bytesRead);
	                    } while (bytesRead > 0);
	                }
	            }
	        }
	        return;
	
	
	    public static bool VerifyFile(byte[] key, String sourceFile)
	    {
	        bool err = false;
	        using (HMACRIPEMD160 hmac = new HMACRIPEMD160(key))
	        {
	            byte[] storedHash = new byte[hmac.HashSize / 8];
	            using (FileStream inStream = new FileStream(sourceFile, FileMode.Open))
	            {
	                inStream.Read(storedHash, 0, storedHash.Length);
	                byte[] computedHash = hmac.ComputeHash(inStream);
	
	                for (int i = 0; i < storedHash.Length; i++)
	                {
	                    if (computedHash[i] != storedHash[i])
	                    {
	                        err = true;
	                    }
	                }
	            }
	        }
	        if (err)
	        {
	            Console.WriteLine("Hash values differ! Signed file has been tampered with!");
	            return false;
	        }
	        else
	        {
	            Console.WriteLine("Hash values agree -- no tampering occurred.");
	            return true;
	        }
	
	
snippet cryptography_xml_xmlencmapkeyx509

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_XMLEncMapKeyX509/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	using System.Security.Cryptography.X509Certificates;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	
	        XmlDocument xmlDoc = new XmlDocument();
	
	        try
	        {
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	            return;
	        }
	
	
	
	        X509Certificate2 cert = new X509Certificate2("test.pfx");
	
	        X509Store store = new X509Store(StoreLocation.CurrentUser);
	
	        store.Open(OpenFlags.ReadWrite);
	
	        store.Add(cert);
	
	        store.Close();
	
	
	        try
	        {
	            Encrypt(xmlDoc, "creditcard", cert);
	
	            Console.WriteLine("Encrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	
	            Decrypt(xmlDoc);
	
	            Console.WriteLine();
	            Console.WriteLine("Decrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	
	    }
	
	    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, X509Certificate2 Cert)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (ElementToEncrypt == null)
	            throw new ArgumentNullException("ElementToEncrypt");
	        if (Cert == null)
	            throw new ArgumentNullException("Cert");
	
	
	        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	
	        if (elementToEncrypt == null)
	        {
	            throw new XmlException("The specified element was not found");
	
	        }
	
	
	        EncryptedXml eXml = new EncryptedXml();
	
	        EncryptedData edElement = eXml.Encrypt(elementToEncrypt, Cert);
	
	
	
	        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	
	    }
	
	    public static void Decrypt(XmlDocument Doc)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	
	        EncryptedXml exml = new EncryptedXml(Doc);
	
	        exml.DecryptDocument();
	
	    }
	
	
	}
snippet formatting_howto_calendar

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_Calendar/Calendar1.cs

	using System;
	using System.Globalization;
	
	public class CalendarDates
	{
	   public static void Main()
	   {
	      HijriCalendar hijriCal = new HijriCalendar();
	      CalendarUtility hijriUtil = new CalendarUtility(hijriCal);
	      DateTime dateValue1 = new DateTime(1429, 6, 29, hijriCal);
	      DateTimeOffset dateValue2 = new DateTimeOffset(dateValue1, 
	                                  TimeZoneInfo.Local.GetUtcOffset(dateValue1));
	      CultureInfo jc = CultureInfo.CreateSpecificCulture("ar-JO");
	
	      Console.WriteLine("Using the system default culture: {0}", 
	                        dateValue1.ToString("d"));
	      Console.WriteLine("Using the ar-JO culture's original default calendar: {0}", 
	                        dateValue1.ToString("d", jc));
	      Console.WriteLine("Using the ar-JO culture with Hijri as the default calendar:");
	      Console.WriteLine(hijriUtil.DisplayDate(dateValue1, jc));
	      Console.WriteLine(hijriUtil.DisplayDate(dateValue2, jc));
	      
	      Console.WriteLine();
	      
	      PersianCalendar persianCal = new PersianCalendar();
	      CalendarUtility persianUtil = new CalendarUtility(persianCal);
	      CultureInfo ic = CultureInfo.CreateSpecificCulture("fa-IR");
	      
	      Console.WriteLine("Using the ir-FA culture's default calendar: {0}",       
	                        dateValue1.ToString("d", ic));
	      Console.WriteLine(persianUtil.DisplayDate(dateValue1, ic));
	      Console.WriteLine(persianUtil.DisplayDate(dateValue2, ic));
	   }
	}
	
	public class CalendarUtility
	{
	   private Calendar thisCalendar;
	   private CultureInfo targetCulture;
	   
	   public CalendarUtility(Calendar cal)
	   {
	      this.thisCalendar = cal;
	   }
	
	   private bool CalendarExists(CultureInfo culture)
	   {
	      this.targetCulture = culture;
	      return Array.Exists(this.targetCulture.OptionalCalendars, 
	                          this.HasSameName);
	   }
	
	   private bool HasSameName(Calendar cal)
	   {
	      if (cal.ToString() == thisCalendar.ToString())
	         return true;
	      else
	         return false;
	   }
	
	   public string DisplayDate(DateTime dateToDisplay, CultureInfo culture)
	   {
	      DateTimeOffset displayOffsetDate = dateToDisplay;
	      return DisplayDate(displayOffsetDate, culture);
	   }
	
	   public string DisplayDate(DateTimeOffset dateToDisplay, 
	                             CultureInfo culture)
	   {
	      string specifier = "yyyy/MM/dd";
	      
	      if (this.CalendarExists(culture))
	      {
	         Console.WriteLine("Displaying date in supported {0} calendar...", 
	                           this.thisCalendar.GetType().Name);
	         culture.DateTimeFormat.Calendar = this.thisCalendar;
	         return dateToDisplay.ToString(specifier, culture);
	      }
	      else
	      {
	         Console.WriteLine("Displaying date in unsupported {0} calendar...", 
	                           thisCalendar.GetType().Name);
	         
	         string separator = targetCulture.DateTimeFormat.DateSeparator;
	         
	         return thisCalendar.GetYear(dateToDisplay.DateTime).ToString("0000") +
	                separator +
	                thisCalendar.GetMonth(dateToDisplay.DateTime).ToString("00") + 
	                separator +
	                thisCalendar.GetDayOfMonth(dateToDisplay.DateTime).ToString("00"); 
	      }
	   } 
	}
	
	public class AdditionalSnippets
	{
	   public static void BadDate()
	   {
	      PersianCalendar persianCal = new PersianCalendar();
	      
	      DateTime persianDate = persianCal.ToDateTime(1387, 3, 18, 12, 0, 0, 0);
	      Console.WriteLine(persianDate.ToString());
	
	      persianDate = new DateTime(1387, 3, 18, persianCal);
	      Console.WriteLine(persianDate.ToString());
	   }
	}

snippet process_asyncstreams

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/sort_async.cs

	
	
	
	using System;
	using System.Text;
	using System.IO;
	using System.Diagnostics;
	using System.Threading;
	using System.ComponentModel;
	
	namespace ProcessAsyncStreamSamples
	{
	    class SortOutputRedirection
	    {
	        private static StringBuilder sortOutput = null;
	        private static int numOutputLines = 0;
	
	        public static void SortInputListText()
	        {
	
	            Process sortProcess = new Process();
	            sortProcess.StartInfo.FileName = "Sort.exe";
	
	            sortProcess.StartInfo.UseShellExecute = false;
	
	            sortProcess.StartInfo.RedirectStandardOutput = true;
	            sortOutput = new StringBuilder();
	
	            sortProcess.OutputDataReceived += SortOutputHandler;
	
	            sortProcess.StartInfo.RedirectStandardInput = true;
	
	            sortProcess.Start();
	
	            StreamWriter sortStreamWriter = sortProcess.StandardInput;
	
	            sortProcess.BeginOutputReadLine();
	
	            Console.WriteLine("Ready to sort up to 50 lines of text");
	
	            String inputText;
	            int numInputLines = 0;
	            do
	            {
	                Console.WriteLine("Enter a text line (or press the Enter key to stop):");
	
	                inputText = Console.ReadLine();
	                if (!String.IsNullOrEmpty(inputText))
	                {
	                    numInputLines++;
	                    sortStreamWriter.WriteLine(inputText);
	                }
	            }
	            while (!String.IsNullOrEmpty(inputText) && (numInputLines < 50));
	            Console.WriteLine("<end of input stream>");
	            Console.WriteLine();
	
	            sortStreamWriter.Close();
	
	            sortProcess.WaitForExit();
	
	            if (numOutputLines > 0)
	            {
	                Console.WriteLine($" Sort results = {numOutputLines} sorted text line(s) ");
	                Console.WriteLine("----------");
	                Console.WriteLine(sortOutput);
	            }
	            else
	            {
	                Console.WriteLine(" No input lines were sorted.");
	            }
	
	            sortProcess.Close();
	        }
	
	        private static void SortOutputHandler(object sendingProcess,
	            DataReceivedEventArgs outLine)
	        {
	            if (!String.IsNullOrEmpty(outLine.Data))
	            {
	                numOutputLines++;
	
	                sortOutput.Append(Environment.NewLine +
	                    $"[{numOutputLines}] - {outLine.Data}");
	            }
	        }
	    }
	}
	
	namespace ProcessAsyncStreamSamples
	{
	
	    class ProcessSampleMain
	    {
	        static void Main()
	        {
	            try
	            {
	                SortOutputRedirection.SortInputListText();
	            }
	            catch (InvalidOperationException e)
	            {
	                Console.WriteLine("Exception:");
	                Console.WriteLine(e);
	            }
	        }
	    }
	}

snippet sys_txt_fallbackdecexc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_txt_fallbackDecExc/fallDecExc.cs

	
	using System;
	using System.Text;
	
	class Sample 
	{
	    public static void Main() 
	    {
	
	
	    Encoding ae = Encoding.GetEncoding(
	                  "us-ascii",
	                  new EncoderExceptionFallback(), 
	                  new DecoderExceptionFallback());
	    string inputString = "XYZ";
	    string decodedString;
	    string twoNewLines = "\n\n";
	    byte[] encodedBytes = new byte[ae.GetByteCount(inputString)];
	    int numberOfEncodedBytes = 0;
	
	    Console.Clear();
	
	    Console.WriteLine("The name of the encoding is \"{0}\".\n", ae.WebName);
	
	    Console.WriteLine("Input string ({0} characters): \"{1}\"", 
	                       inputString.Length, inputString);
	
	    Console.Write("Input string in hexadecimal: ");
	    foreach (char c in inputString.ToCharArray()) 
	        {
	        Console.Write("0x{0:X2} ", (int)c);
	        }
	    Console.Write(twoNewLines);
	
	
	    Console.WriteLine("Encode the input string...");
	    numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, 
	                                       encodedBytes, 0);
	    Console.WriteLine("Encoded bytes in hexadecimal ({0} bytes):\n", 
	                       numberOfEncodedBytes);
	    foreach (byte b in encodedBytes)
	        {
	        Console.Write("0x{0:X2} ", (int)b);
	        }
	    Console.Write(twoNewLines);
	
	
	
	    encodedBytes[0] = 0xFF;
	    encodedBytes[2] = 0xFF;
	
	    Console.WriteLine("Display the corrupted byte sequence...");
	    Console.WriteLine("Encoded bytes in hexadecimal ({0} bytes):\n", 
	                       numberOfEncodedBytes);
	    foreach (byte b in encodedBytes)
	        {
	        Console.Write("0x{0:X2} ", (int)b);
	        }
	    Console.Write(twoNewLines);
	
	
	    Console.WriteLine("Compare the decoded bytes to the input string...");
	
	    try {
	        decodedString = ae.GetString(encodedBytes);
	        }
	    catch (DecoderFallbackException dfe)
	        {
	        Console.WriteLine(dfe);
	        Console.WriteLine("\n*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***");
	        return;
	        }
	
	    Console.WriteLine("This statement is never executed.");
	    }
	}
	/*
	This code example produces the following results:
	
	The name of the encoding is "us-ascii".
	
	Input string (3 characters): "XYZ"
	Input string in hexadecimal: 0x58 0x59 0x5A
	
	Encode the input string...
	Encoded bytes in hexadecimal (3 bytes):
	
	0x58 0x59 0x5A
	
	Display the corrupted byte sequence...
	Encoded bytes in hexadecimal (3 bytes):
	
	0xFF 0x59 0xFF
	
	Compare the decoded bytes to the input string...
	System.Text.DecoderFallbackException: Unable to translate bytes [FF] at index 0 from speci
	fied code page to Unicode.
	   at System.Text.DecoderExceptionFallbackBuffer.Throw(Byte[] bytesUnknown, Int32 index)
	   at System.Text.DecoderExceptionFallbackBuffer.Fallback(Byte[] bytesUnknown, Int32 index
	)
	   at System.Text.DecoderFallbackBuffer.InternalFallback(Byte[] bytes, Byte* pBytes)
	   at System.Text.ASCIIEncoding.GetCharCount(Byte* bytes, Int32 count, DecoderNLS decoder)
	
	   at System.String.CreateStringFromEncoding(Byte* bytes, Int32 byteLength, Encoding encod
	ing)
	   at System.Text.ASCIIEncoding.GetString(Byte[] bytes, Int32 byteIndex, Int32 byteCount)
	   at System.Text.Encoding.GetString(Byte[] bytes)
	   at Sample.Main()
	
	*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***
	
	*/
snippet propertyinfo_setvalue

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo_SetValue/Example.cs

	using System;
	using System.Reflection;
	using System.Collections.Generic;
	using System.Runtime.CompilerServices;
	
	class Example
	{
	    private static int _staticProperty = 41;
	    public static int StaticProperty    
	    {
	        get
	        {
	            return _staticProperty;
	        }
	        set
	        {
	            _staticProperty = value;
	        }
	    }
	
	    private int _instanceProperty = 42;
	    public int InstanceProperty    
	    {
	        get
	        {
	            return _instanceProperty;
	        }
	        set
	        {
	            _instanceProperty = value;
	        }
	    }
	
	    private Dictionary<int, string> _indexedInstanceProperty = 
	        new Dictionary<int, string>();
	    [IndexerNameAttribute("IndexedInstanceProperty")]
	    public string this[int key]    
	    {
	        get
	        {
	            string returnValue = null;
	            if (_indexedInstanceProperty.TryGetValue(key, out returnValue))
	            {
	                return returnValue;
	            }
	            else
	            {
	                return null;
	            }
	        }
	        set
	        {
	            if (value == null)
	            {
	                throw new ArgumentNullException("IndexedInstanceProperty value can be an empty string, but it cannot be null.");
	            }
	            else
	            {
	                if (_indexedInstanceProperty.ContainsKey(key))
	                {
	                    _indexedInstanceProperty[key] = value;
	                }
	                else
	                {
	                    _indexedInstanceProperty.Add(key, value);
	                }
	            }
	        }
	    }
	
	    public static void Main()
	    {
	        Console.WriteLine("Initial value of class-level property: {0}", 
	            Example.StaticProperty);
	
	        PropertyInfo piShared = typeof(Example).GetProperty("StaticProperty");
	        piShared.SetValue(null, 76, null);
	                 
	        Console.WriteLine("Final value of class-level property: {0}", 
	            Example.StaticProperty);
	
	
	        Example exam = new Example();
	
	        Console.WriteLine("\nInitial value of instance property: {0}", 
	            exam.InstanceProperty);
	
	        PropertyInfo piInstance = 
	            typeof(Example).GetProperty("InstanceProperty");
	        piInstance.SetValue(exam, 37, null);
	                 
	        Console.WriteLine("Final value of instance property: {0}", 
	            exam.InstanceProperty);
	
	
	        exam[17] = "String number 17";
	        exam[46] = "String number 46";
	        exam[9] = "String number 9";
	
	        Console.WriteLine(
	            "\nInitial value of indexed instance property(17): '{0}'", 
	            exam[17]);
	
	        PropertyInfo piIndexedInstance = 
	            typeof(Example).GetProperty("IndexedInstanceProperty");
	        piIndexedInstance.SetValue(
	            exam, 
	            "New value for string number 17", 
	            new object[] { (int) 17 });
	                 
	        Console.WriteLine(
	            "Final value of indexed instance property(17): '{0}'", 
	            exam[17]);       
	    }
	}
	
	/* This example produces the following output:
	
	Initial value of class-level property: 41
	Final value of class-level property: 76
	
	Initial value of instance property: 42
	Final value of instance property: 37
	
	Initial value of indexed instance property(17): 'String number 17'
	Final value of indexed instance property(17): 'New value for string number 17'
	 */
	
	
	

snippet conceptual_string_basicops

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_string_basicops/basicops.cs

	using System;
	    
	class MainClass
	{
	   static void Main()
	   {
	      MailToData MyData = new MailToData();
	
	      Console.Write("Enter Your Name: ");
	      MyData.Name = Console.ReadLine();
	      Console.Write("Enter Your Address: ");
	      MyData.Address = Console.ReadLine();
	      Console.Write("Enter Your City, State, and ZIP Code separated by spaces: ");
	      MyData.CityStateZip = Console.ReadLine();
	      Console.WriteLine();
	      
	      if (MyData.Validated) {
	         Console.WriteLine("Name: {0}", MyData.Name);
	         Console.WriteLine("Address: {0}", MyData.Address);
	         Console.WriteLine("City: {0}", MyData.City);
	         Console.WriteLine("State: {0}", MyData.State);
	         Console.WriteLine("Zip: {0}", MyData.Zip);
	   
	         Console.WriteLine("\nThe following address will be used:");
	         Console.WriteLine(MyData.Address);
	         Console.WriteLine(MyData.CityStateZip);
	      }
	   }
	}
	
	public class MailToData
	{
	   string name = "";
	   string address = ""; 
	   string citystatezip = "";
	   string city = ""; 
	   string state = ""; 
	   string zip = "";
	   bool parseSucceeded = false;
	   
	   public string Name
	   {
	      get{return name;}
	      set{name = value;}
	   }
	
	   public string Address
	   {
	      get{return address;}
	      set{address = value;}
	   }
	
	   public string CityStateZip
	   {
	      get { 
	         return String.Format("{0}, {1} {2}", city, state, zip); 
	      }
	      set {
	         citystatezip = value.Trim();
	         ParseCityStateZip();
	      }
	   }
	
	   public string City
	   {
	      get{return city;}
	      set{city = value;}
	   }
	
	   public string State
	   {
	      get{return state;}
	      set{state = value;}
	   }
	
	   public string Zip
	   {
	      get{return zip;}
	      set{zip = value;}
	   }
	
	   public bool Validated
	   {
	      get { return parseSucceeded; }
	   }
	
	   private void ParseCityStateZip()
	   {  
	      string msg = "";
	      const string msgEnd = "\nYou must enter spaces between city, state, and zip code.\n";
	
	      try
	      {
	         int zipIndex = citystatezip.LastIndexOf(" ");
	         if (zipIndex == -1) { 
	            msg = "\nCannot identify a zip code." + msgEnd;
	            throw new FormatException(msg);
	         }
	         zip = citystatezip.Substring(zipIndex + 1);        
	
	         int stateIndex = citystatezip.LastIndexOf(" ", zipIndex - 1);
	         if (stateIndex == -1) {  
	            msg = "\nCannot identify a state." + msgEnd;
	            throw new FormatException(msg);
	         }
	         state = citystatezip.Substring(stateIndex + 1, zipIndex - stateIndex - 1);        
	         state = state.ToUpper();
	
	         city = citystatezip.Substring(0, stateIndex);
	         if (city.Length == 0) {
	            msg = "\nCannot identify a city." + msgEnd;
	            throw new FormatException(msg);
	         }
	         parseSucceeded = true;
	      }
	      catch (FormatException ex)
	      {
	         Console.WriteLine(ex.Message);
	      } 
	   }
	
	   private string ReturnCityStateZip()
	    {
	        state = state.ToUpper();
	
	        string MyCityStateZip = String.Concat(city, ", ", state, " ", zip);
	            
	        return MyCityStateZip;
	    }
	}

snippet xmldsig___signature___detached

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG___Signature___Detached/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	using System.Text;
	using System.Xml;
	
	public class SignVerifyEnvelope
	{
	
	    public static void Main(String[] args)
	    {
	       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();
	
	       try
	       {
	
	
	           Console.WriteLine("XML file signed.");
	
	           Console.WriteLine("Verifying signature...");
	
	           bool result = VerifyXmlFile("SignedExample.xml");
	
	           if (result)
	           {
	               Console.WriteLine("The XML signature is valid.");
	           }
	           else
	           {
	               Console.WriteLine("The XML signature is not valid.");
	           }
	       }
	       catch (CryptographicException e)
	       {
	           Console.WriteLine(e.Message);
	       }
	       finally
	       {
	           Key.Clear();
	       }
	   }
	
	    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)
	    {
	        if (URIString == null)
	            throw new ArgumentNullException("URIString");
	        if (XmlSigFileName == null)
	            throw new ArgumentNullException("XmlSigFileName");
	        if (Key == null)
	            throw new ArgumentNullException("Key");
	
	        SignedXml signedXml = new SignedXml();
	
	        signedXml.SigningKey = Key;
	
	        Signature XMLSignature = signedXml.Signature;
	
	        Reference reference = new Reference();
	
	        reference.Uri = URIString;
	
	        XMLSignature.SignedInfo.AddReference(reference);
	
	        KeyInfo keyInfo = new KeyInfo();
	        keyInfo.AddClause(new RSAKeyValue((RSA)Key));
	
	        XMLSignature.KeyInfo = keyInfo;
	
	        signedXml.ComputeSignature();
	
	        XmlElement xmlDigitalSignature = signedXml.GetXml();
	
	        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));
	        xmlDigitalSignature.WriteTo(xmltw);
	        xmltw.Close();
	    }
	
	
	    public static Boolean VerifyXmlFile(String Name)
	    {
	        if (Name == null)
	            throw new ArgumentNullException("Name");
	
	        XmlDocument xmlDocument = new XmlDocument();
	
	        xmlDocument.PreserveWhitespace = true;
	
	        xmlDocument.Load(Name);
	
	        SignedXml signedXml = new SignedXml(xmlDocument);
	
	        XmlNodeList nodeList = xmlDocument.GetElementsByTagName("Signature");
	
	        signedXml.LoadXml((XmlElement)nodeList[0]);
	
	        return signedXml.CheckSignature();
	    }
	}
snippet environment_getsetenvar

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/environment_getsetenvar/gsev.cs

	using System;
	using System.Collections;
	using Microsoft.Win32;
	
	class Sample 
	{
	    public static void Main() 
	    {
	        string defaultEnvVar = nameof(defaultEnvVar);
	        string processEnvVar = nameof(processEnvVar);
	        string userEnvVar = nameof(userEnvVar);
	        string machineEnvVar = nameof(machineEnvVar);
	
	        string dft = nameof(dft);
	        string process = nameof(process);
	        string user = nameof(user);
	        string machine = nameof(machine);
	
	        Console.WriteLine("Setting environment variables for each target...\n");
	        Environment.SetEnvironmentVariable(defaultEnvVar, dft);
	        Environment.SetEnvironmentVariable(processEnvVar, process, 
	                                           EnvironmentVariableTarget.Process);
	        Environment.SetEnvironmentVariable(userEnvVar, user, 
	                                           EnvironmentVariableTarget.User);
	        Environment.SetEnvironmentVariable(machineEnvVar, machine, 
	                                           EnvironmentVariableTarget.Machine);
	
	        string[] envVars = { defaultEnvVar,processEnvVar, userEnvVar, machineEnvVar };
	        
	        Console.WriteLine("Retrieving environment variables from the default target:");
	        foreach (var envVar in envVars)
	        {
	          var value = Environment.GetEnvironmentVariable(envVar) ?? "(none)";
	          Console.WriteLine($"   {envVar}: {value}");
	        }
	        Console.WriteLine("\nRetrieving environment variables from the Process target:");
	        foreach (var envVar in envVars)
	        {
	          var value = Environment.GetEnvironmentVariable(envVar, EnvironmentVariableTarget.Process) ?? "(none)";
	          Console.WriteLine($"   {envVar}: {value}");
	        }
	        Console.WriteLine("\nRetrieving environment variables from the User target:");
	        foreach (var envVar in envVars)
	        {
	          var value = Environment.GetEnvironmentVariable(envVar, EnvironmentVariableTarget.User) ?? "(none)";
	          Console.WriteLine($"   {envVar}: {value}");
	        }
	        Console.WriteLine("\nRetrieving environment variables from the Machine target:");
	        foreach (var envVar in envVars)
	        {
	          var value = Environment.GetEnvironmentVariable(envVar, EnvironmentVariableTarget.Machine) ?? "(none)";
	          Console.WriteLine($"   {envVar}: {value}");
	        }
	
	        Console.WriteLine("\nDeleting environment variables for each target...\n");
	        Environment.SetEnvironmentVariable(defaultEnvVar, null);
	        Environment.SetEnvironmentVariable(processEnvVar, null, 
	                                           EnvironmentVariableTarget.Process);
	        Environment.SetEnvironmentVariable(userEnvVar, null, 
	                                           EnvironmentVariableTarget.User);
	        Environment.SetEnvironmentVariable(machineEnvVar, null, 
	                                           EnvironmentVariableTarget.Machine);
	    }
	}
snippet sys_glob_dtfi1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_glob_DTFI1/dtfi1.cs

	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string[] myDateTimePatterns = new string[] {"MM/dd/yy", "MM/dd/yyyy"};
	
	    CultureInfo ci = new CultureInfo("en-US");
	    DateTimeFormatInfo dtfi = ci.DateTimeFormat;
	
	    Console.WriteLine("This code example uses the {0} culture.", ci.Name);
	
	    Console.WriteLine("\nNativeCalendarName...");
	    Console.WriteLine("\"{0}\"", dtfi.NativeCalendarName);
	
	    Console.WriteLine("\nMonthGenitiveNames...");
	    foreach (string name in dtfi.MonthGenitiveNames) 
	    {
	    Console.WriteLine("\"{0}\"", name);
	    }
	
	    Console.WriteLine("\nAbbreviatedMonthGenitiveNames...");
	    foreach (string name in dtfi.AbbreviatedMonthGenitiveNames) 
	    {
	    Console.WriteLine("\"{0}\"", name);
	    }
	
	    Console.WriteLine("\nShortestDayNames...");
	    foreach (string name in dtfi.ShortestDayNames) 
	    {
	    Console.WriteLine("\"{0}\"", name);
	    }
	
	    Console.WriteLine("\nGetShortestDayName(DayOfWeek.Sunday)...");
	    Console.WriteLine("\"{0}\"", dtfi.GetShortestDayName(DayOfWeek.Sunday));
	
	    Console.WriteLine("\nInitial DateTime format patterns for the 'd' format specifier...");
	    foreach (string name in dtfi.GetAllDateTimePatterns('d')) 
	    {
	    Console.WriteLine("\"{0}\"", name);
	    }
	
	    Console.WriteLine("\nChange the initial DateTime format patterns for the \n" +
	                      "'d' format specifier to my format patterns...");
	    dtfi.SetAllDateTimePatterns(myDateTimePatterns, 'd');
	
	    Console.WriteLine("\nNew DateTime format patterns for the 'd' format specifier...");
	    foreach (string name in dtfi.GetAllDateTimePatterns('d')) 
	    {
	    Console.WriteLine("\"{0}\"", name);
	    }
	    }
	}
	/*
	This code example produces the following results:
	
	This code example uses the en-US culture.
	
	NativeCalendarName...
	"Gregorian Calendar"
	
	MonthGenitiveNames...
	"January"
	"February"
	"March"
	"April"
	"May"
	"June"
	"July"
	"August"
	"September"
	"October"
	"November"
	"December"
	""
	
	AbbreviatedMonthGenitiveNames...
	"Jan"
	"Feb"
	"Mar"
	"Apr"
	"May"
	"Jun"
	"Jul"
	"Aug"
	"Sep"
	"Oct"
	"Nov"
	"Dec"
	""
	
	ShortestDayNames...
	"Su"
	"Mo"
	"Tu"
	"We"
	"Th"
	"Fr"
	"Sa"
	
	GetShortestDayName(DayOfWeek.Sunday)...
	"Su"
	
	Initial DateTime format patterns for the 'd' format specifier...
	"M/d/yyyy"
	"M/d/yy"
	"MM/dd/yy"
	"MM/dd/yyyy"
	"yy/MM/dd"
	"yyyy-MM-dd"
	"dd-MMM-yy"
	
	Change the initial DateTime format patterns for the
	'd' format specifier to my format patterns...
	
	New DateTime format patterns for the 'd' format specifier...
	"MM/dd/yy"
	"MM/dd/yyyy"
	
	*/
snippet performancecountertype_numberofitems64

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType_NumberOfItems64/numberofitems64.cs

	using System;
	using System.Collections;
	using System.Collections.Specialized;
	using System.Diagnostics;
	
	public class NumberOfItems64
	{
	
		private static PerformanceCounter PC;
	
		public static void Main()
		{	
			ArrayList samplesList = new ArrayList();
	
	        if (SetupCategory())
	            return;
			CreateCounters();
			CollectSamples(samplesList);
			CalculateResults(samplesList);
		}
	
		private static bool SetupCategory()
		{		
			if ( !PerformanceCounterCategory.Exists("NumberOfItems64SampleCategory") ) 
			{
	
				CounterCreationDataCollection CCDC = new CounterCreationDataCollection();
	
				CounterCreationData NOI64 = new CounterCreationData();
				NOI64.CounterType = PerformanceCounterType.NumberOfItems64;
				NOI64.CounterName = "NumberOfItems64Sample";
				CCDC.Add(NOI64);
	
				PerformanceCounterCategory.Create("NumberOfItems64SampleCategory",
	                "Demonstrates usage of the NumberOfItems64 performance counter type.",
	                PerformanceCounterCategoryType.SingleInstance, CCDC);
				return(true);
			}
			else
			{
				Console.WriteLine("Category exists - NumberOfItems64SampleCategory");
				return(false);
			}
		}
	
	    private static void CreateCounters()
	    {
	        PC = new PerformanceCounter("NumberOfItems64SampleCategory", 
	            "NumberOfItems64Sample", 
	            false);
	
	        PC.RawValue=0;
	        
	    }
	
	    private static void CollectSamples(ArrayList samplesList)
	    {
			
	        Random r = new Random( DateTime.Now.Millisecond );
	
	        for (int j = 0; j < 100; j++) 
	        {
		        
	            int value = r.Next(1, 10);
	            Console.Write(j + " = " + value);
	
	            PC.IncrementBy(value);
	
	            if ((j % 10) == 9) 
	            {
	                OutputSample(PC.NextSample());
	                samplesList.Add( PC.NextSample() );
	            }
	            else
	                Console.WriteLine();
		        
	            System.Threading.Thread.Sleep(50);
	        }
	
	    }
	
		private static void CalculateResults(ArrayList samplesList)
		{
			for(int i = 0; i < (samplesList.Count - 1); i++)
			{
				OutputSample( (CounterSample)samplesList[i] );
				OutputSample( (CounterSample)samplesList[i+1] );
	
				Console.WriteLine(".NET computed counter value = " + 
					CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],
					(CounterSample)samplesList[i+1]) );
	
				Console.WriteLine("My computed counter value = " + 
					MyComputeCounterValue((CounterSample)samplesList[i],
					(CounterSample)samplesList[i+1]) );
	
			}
		}
	
		
		private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)
		{
			Single counterValue = s1.RawValue;
			return(counterValue);
		}
		
	    private static void OutputSample(CounterSample s)
		{
			Console.WriteLine("\r\n+++++++++++");
			Console.WriteLine("Sample values - \r\n");
			Console.WriteLine("   BaseValue        = " + s.BaseValue);
			Console.WriteLine("   CounterFrequency = " + s.CounterFrequency);
			Console.WriteLine("   CounterTimeStamp = " + s.CounterTimeStamp);
			Console.WriteLine("   CounterType      = " + s.CounterType);
			Console.WriteLine("   RawValue         = " + s.RawValue);
			Console.WriteLine("   SystemFrequency  = " + s.SystemFrequency);
			Console.WriteLine("   TimeStamp        = " + s.TimeStamp);
			Console.WriteLine("   TimeStamp100nSec = " + s.TimeStamp100nSec);
			Console.WriteLine("++++++++++++++++++++++");
		}
	
	}

snippet eventlog_eventsourcecreation_properties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/source.cs

	
	using System;
	using System.Globalization;
	using System.Diagnostics;
	
	namespace EventLogSamples
	{
	    class CreateSourceSample
	    {
	        [STAThread]
	        static void Main(string[] args)
	        {
	            EventSourceCreationData mySourceData = new EventSourceCreationData("", "");
	            bool registerSource = true;
	
	            if (args.Length > 0)
	            {
	
	                mySourceData.Source = args[0];
	
	                if (args.Length > 1)
	                {
	                    mySourceData.LogName = args[1];
	                }
	
	                if (args.Length > 2)
	                {
	                    mySourceData.MachineName = args[2];
	                }
	                if ((args.Length > 3) && (args[3].Length > 0))
	                {
	                    mySourceData.MessageResourceFile = args[3];
	                }
	            }
	            else 
	            {
	                Console.WriteLine("Input:");
	                Console.WriteLine(" source [event log] [machine name] [resource file]");
	
	                registerSource = false;
	            }
	
	            if (mySourceData.MachineName.Length == 0)
	            {
	                mySourceData.MachineName = ".";
	            }
	            if (mySourceData.LogName.Length == 0)
	            {
	                mySourceData.LogName = "Application";
	            }
	
	            if (!EventLog.SourceExists(mySourceData.Source, 
	                                       mySourceData.MachineName))
	            {
	
	
	                if ((mySourceData.MessageResourceFile != null) &&
	                    (mySourceData.MessageResourceFile.Length > 0))
	                {
	                    if (mySourceData.MachineName == ".") 
	                    {
	                        if (!System.IO.File.Exists(mySourceData.MessageResourceFile))
	                        {
	                            Console.WriteLine("File {0} not found - message file not set for source.",
	                                mySourceData.MessageResourceFile);
	                            registerSource = false;
	                        }
	                    }
	                    else 
	                    {
	
	                        Console.WriteLine("Message resource file ignored for remote event log.");
	                        registerSource = false;
	                    }
	                }
	            }
	            else
	            {
	                registerSource = false;
	
	                string sourceLog;
	                sourceLog = EventLog.LogNameFromSourceName(mySourceData.Source,
	                                mySourceData.MachineName);
	
	
	                if (sourceLog.ToUpper(CultureInfo.InvariantCulture) != mySourceData.LogName.ToUpper(CultureInfo.InvariantCulture)) 
	                {
	                    Console.WriteLine("Warning: source {0} is already registered to write to event log {1}",
	                        mySourceData.Source, sourceLog);
	                }
	                else 
	                {
	
	                    Console.WriteLine("Source {0} already registered to write to event log {1}",
	                        mySourceData.Source, sourceLog);
	                }
	            }
	        
	
	            if (registerSource)
	            {
	
	                Console.WriteLine("Registering new source {0} for event log {1}.",
	                    mySourceData.Source, mySourceData.LogName);
	                EventLog.CreateEventSource(mySourceData);
	                Console.WriteLine("Event source was registered successfully!");
	            }
	        }
	    }
	}
snippet registrysecurity101

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegistrySecurity101/source.cs

	using System;
	using System.Reflection;
	using System.Security;
	using System.Security.AccessControl;
	using Microsoft.Win32;
	
	public class Example
	{
	    public static void Main()
	    {
	        try
	        {
	            Registry.CurrentUser.DeleteSubKey("RegistryRightsExample");
	            Console.WriteLine("Example key has been deleted.");
	        }
	        catch (ArgumentException)
	        {
	        }
	        catch (Exception ex)
	        {
	            Console.WriteLine("Unable to delete the example key: {0}", ex);
	            return;
	        }
	
	        string user = Environment.UserDomainName + "\\" + Environment.UserName;
	
	        RegistrySecurity rs = new RegistrySecurity();
	
	        rs.AddAccessRule(new RegistryAccessRule(user, 
	            RegistryRights.ReadKey | RegistryRights.Delete, 
	            InheritanceFlags.None, 
	            PropagationFlags.None, 
	            AccessControlType.Allow));
	
	        rs.AddAccessRule(new RegistryAccessRule(user, 
	            RegistryRights.WriteKey | RegistryRights.ChangePermissions, 
	            InheritanceFlags.None, 
	            PropagationFlags.None, 
	            AccessControlType.Deny));
	
	        RegistryKey rk = null;
	        try
	        {
	            rk = Registry.CurrentUser.CreateSubKey("RegistryRightsExample", 
	                RegistryKeyPermissionCheck.Default, rs);
	            Console.WriteLine("\r\nExample key created.");
	            rk.SetValue("ValueName", "StringValue");
	        }
	        catch (Exception ex)
	        {
	            Console.WriteLine("\r\nUnable to create the example key: {0}", ex);
	        }
	        if (rk != null) rk.Close();
	
	        rk = Registry.CurrentUser;
	
	        RegistryKey rk2;
	        
	        rk2 = rk.OpenSubKey("RegistryRightsExample", false);
	        Console.WriteLine("\r\nRetrieved value: {0}", rk2.GetValue("ValueName"));
	        rk2.Close();
	
	        try
	        {
	            rk2 = rk.OpenSubKey("RegistryRightsExample", true);
	        }
	        catch (SecurityException ex)
	        {
	            Console.WriteLine("\nUnable to write to the example key." +
	                " Caught SecurityException: {0}", ex.Message);
	        }
	        if (rk2 != null) rk2.Close();
	
	        try
	        {
	            rs = new RegistrySecurity();
	            rs.AddAccessRule(new RegistryAccessRule(user, 
	                RegistryRights.WriteKey, 
	                InheritanceFlags.None, 
	                PropagationFlags.None, 
	                AccessControlType.Allow));
	            rk2 = rk.OpenSubKey("RegistryRightsExample", false);
	            rk2.SetAccessControl(rs);
	            Console.WriteLine("\r\nExample key permissions were changed.");
	        }
	        catch (UnauthorizedAccessException ex)
	        {
	            Console.WriteLine("\nUnable to change permissions for the example key." +
	                " Caught UnauthorizedAccessException: {0}", ex.Message);
	        }
	        if (rk2 != null) rk2.Close();
	
	        Console.WriteLine("\r\nPress Enter to delete the example key.");
	        Console.ReadLine();
	
	        try
	        {
	            rk.DeleteSubKey("RegistryRightsExample");
	            Console.WriteLine("Example key was deleted.");
	        }
	        catch(Exception ex)
	        {
	            Console.WriteLine("Unable to delete the example key: {0}", ex);
	        }
	
	        rk.Close();
	    }
	}
	
	/* This code example produces the following output:
	
	Example key created.
	
	Retrieved value: StringValue
	
	Unable to write to the example key. Caught SecurityException: Requested registry access is not allowed.
	
	Unable to change permissions for the example key. Caught UnauthorizedAccessException: Cannot write to the registry key.
	
	Press Enter to delete the example key.
	
	Example key was deleted.
	 */
	

snippet multicast_delegate_introduction

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Multicast_Delegate_Introduction/delegatestring.cs

	using System;
	using System.Collections.Generic;
	
	class StringContainer
	{
	   public delegate void CheckAndDisplayDelegate(string str);
	
	   private List<String> container = new List<String>();
	
	   public void AddString(string str) 
	   {
	      container.Add(str);
	   }
	
	   public void DisplayAllQualified(CheckAndDisplayDelegate displayDelegate) 
	   {
	      foreach (var str in container) {
	         displayDelegate(str);
	      }
	   }
	 }    
	
	class StringExtensions
	{
	   public static void ConStart(string str) 
	   {
	      if (!(str[0]=='a'||str[0]=='e'||str[0]=='i'||str[0]=='o'||str[0]=='u'))
	          Console.WriteLine(str);
	   }
	
	   public static void VowelStart(string str) 
	   {
	      if ((str[0]=='a'||str[0]=='e'||str[0]=='i'||str[0]=='o'||str[0]=='u'))
	          Console.WriteLine(str);
	   }
	}
	
	class Test
	{
	   static public void Main()
	   {
	      StringContainer container = new StringContainer();
	      container.AddString("This");
	      container.AddString("is");
	      container.AddString("a");
	      container.AddString("multicast");
	      container.AddString("delegate");
	      container.AddString("example");
	
	      StringContainer.CheckAndDisplayDelegate conStart = StringExtensions.ConStart;
	      StringContainer.CheckAndDisplayDelegate vowelStart = StringExtensions.VowelStart;
	
	      Delegate[] delegateList = conStart.GetInvocationList();
	      Console.WriteLine("conStart contains {0} delegate(s).", delegateList.Length);
	      delegateList = vowelStart.GetInvocationList();
	      Console.WriteLine("vowelStart contains {0} delegate(s).\n", delegateList.Length);
	
	      if (conStart is System.MulticastDelegate && vowelStart is System.MulticastDelegate) 
	          Console.WriteLine("conStart and vowelStart are derived from MulticastDelegate.\n");
	
	      Console.WriteLine("Executing the conStart delegate:");
	      container.DisplayAllQualified(conStart);
	      Console.WriteLine();
	      Console.WriteLine("Executing the vowelStart delegate:");
	      container.DisplayAllQualified(vowelStart);
	      Console.WriteLine();
	      
	      StringContainer.CheckAndDisplayDelegate multipleDelegates = 
	            (StringContainer.CheckAndDisplayDelegate) Delegate.Combine(conStart, vowelStart);
	
	      delegateList = multipleDelegates.GetInvocationList();
	      Console.WriteLine("\nmultipleDelegates contains {0} delegates.\n",
	                        delegateList.Length);
	
	      Console.WriteLine("Executing the multipleDelegate delegate.");
	      container.DisplayAllQualified(multipleDelegates);
	
	      multipleDelegates = (StringContainer.CheckAndDisplayDelegate) Delegate.Remove(multipleDelegates, vowelStart);
	      multipleDelegates = (StringContainer.CheckAndDisplayDelegate) Delegate.Combine(multipleDelegates, conStart);
	
	      Console.WriteLine("\nExecuting the multipleDelegate delegate with two conStart delegates:");
	      container.DisplayAllQualified(multipleDelegates);
	   }
	}
	

snippet installcontext_installcontext

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/installcontext_installcontext.cs

	
	/* The following example demonstrates the 'InstallContext()' and
	   InstallContext(string, string[]) constructors, the 'Parameters' property
	   and the 'LogMessage' and 'IsParameterTrue' methods of the
	   'InstallContext' class.
	   When the program is invoked without any arguments an empty InstallContext
	   object is created and when the '/LogFile' and '/LogtoConsole' are
	   specified the InstallContext object is created by passing the respective
	   arguments to InstallContext(string, string[]). When the install method of the
	   installer is called, it checks for parameters from the command line and
	   depending on that it displays the progress messages onto the console and
	   also saves it to the specified log file.
	*/
	
	using System;
	using System.ComponentModel;
	using System.Configuration.Install;
	using System.Collections;
	using System.Collections.Specialized;
	
	namespace MyInstallContextNamespace
	{
	   [RunInstallerAttribute(true)]
	   class InstallContext_Example : Installer
	   {
	      public InstallContext myInstallContext;
	
	      public override void Install( IDictionary mySavedState )
	      {
	         StringDictionary myStringDictionary = myInstallContext.Parameters;
	         if( myStringDictionary.Count == 0 )
	         {
	            Console.WriteLine( "No parameters have been entered in the command line "
	               +"hence, the install will take place in the silent mode" );
	         }
	         else
	         {
	            if( myInstallContext.IsParameterTrue( "LogtoConsole" ) == true )
	            {
	               myInstallContext.LogMessage( "The 'Install' method has been called" );
	            }
	         }
	
	      }
	
	      public override void Uninstall( IDictionary mySavedState )
	      {
	      }
	
	      public override void Rollback( IDictionary mySavedState )
	      {
	         if( myInstallContext.IsParameterTrue( "LogtoConsole" ) == true )
	         {
	            myInstallContext.LogMessage( "The 'Rollback' method has been called" );
	         }
	
	      }
	
	      public override void Commit( IDictionary mySavedState )
	      {
	         if( myInstallContext.IsParameterTrue( "LogtoConsole" ) == true )
	         {
	            myInstallContext.LogMessage( "The 'Commit' method has been called" );
	         }
	
	      }
	
	      static void Main( string[] args )
	      {
	         InstallContext_Example myInstallObject = new InstallContext_Example();
	
	         IDictionary mySavedState = new Hashtable();
	
	         if( args.Length < 1 )
	         {
	            myInstallObject.myInstallContext = new InstallContext();
	         }
	
	         else if( ( args.Length == 1 ) && ( args[ 0 ] == "/?" ) )
	         {
	            Console.WriteLine( "Specify the '/Logfile' and '/LogtoConsole' parameters" );
	            Console.WriteLine( "Example: " );
	            Console.WriteLine( "InstallContext_InstallContext.exe /LogFile=example.log"
	                                          +" /LogtoConsole=true" );
	            return;
	         }
	
	         else
	         {
	            String[] commandLine = new string[ args.Length ];
	            for( int i = 0; i < args.Length; i++ )
	            {
	               commandLine[ i ] = args[ i ];
	            }
	            myInstallObject.myInstallContext = new InstallContext( args[ 0 ], commandLine);
	         }
	
	         try
	         {
	            myInstallObject.Install( mySavedState );
	
	            myInstallObject.Commit( mySavedState );
	         }
	         catch( Exception )
	         {
	            myInstallObject.Rollback( mySavedState );
	         }
	      }
	   }
	}

snippet asyncdesignpattern

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncDesignPattern/Factorizer.cs

	using System;
	using System.Threading;
	using System.Runtime.Remoting.Messaging;
	
	namespace Examples.AdvancedProgramming.AsynchronousOperations
	{
	    public class PrimeFactorFinder
	    {
	       public static bool Factorize(
	                    int number,
	                    ref int primefactor1,
	                    ref int primefactor2)
	       {
	          primefactor1 = 1;
	          primefactor2 = number;
	
	          for (int i=2;i<number;i++)
	          {
	             if (0 == (number % i))
	             {
	                primefactor1 = i;
	                primefactor2 = number / i;
	                break;
	             }
	          }
	          if (1 == primefactor1 )
	             return false;
	          else
	             return true   ;
	       }
	    }
	
	    public delegate bool AsyncFactorCaller (
	             int number, 
	             ref int primefactor1,
	             ref int primefactor2);
	
	    public class DemonstrateAsyncPattern
	    {
	        ManualResetEvent waiter;
	        
	        public void FactorizedResults(IAsyncResult result)
	           {
	              int factor1=0;
	              int factor2=0; 
	        
	              AsyncFactorCaller factorDelegate = (AsyncFactorCaller)((AsyncResult)result).AsyncDelegate;
	              int number = (int) result.AsyncState;
	              bool answer = factorDelegate.EndInvoke(ref factor1, ref factor2, result);
	              Console.WriteLine("On CallBack: Factors of {0} : {1} {2} - {3}", 
	                  number, factor1, factor2, answer);
	              waiter.Set();
	           }
	
	       public void FactorizeNumberUsingCallback()
	       {
	          AsyncFactorCaller factorDelegate = new AsyncFactorCaller (PrimeFactorFinder.Factorize);
	          int number = 1000589023;
	          int temp=0; 
	           waiter = new ManualResetEvent(false);
	
	          AsyncCallback callBack = new AsyncCallback(this.FactorizedResults);
	
	          IAsyncResult result = factorDelegate.BeginInvoke(
	                               number, 
	                               ref temp, 
	                               ref temp, 
	                               callBack, 
	                               number); 
	
	
	          waiter.WaitOne();
	       }
	
	       public void FactorizeNumberAndWait()
	       {
	          AsyncFactorCaller factorDelegate = new AsyncFactorCaller (PrimeFactorFinder.Factorize);
	
	          int number = 1000589023;
	          int temp=0; 
	
	          IAsyncResult result = factorDelegate.BeginInvoke(
	                            number, 
	                            ref temp, 
	                            ref temp, 
	                            null, 
	                            null); 
	                            
	          while (!result.IsCompleted)
	          {
	            result.AsyncWaitHandle.WaitOne(10000, false);
	          }
	          result.AsyncWaitHandle.Close();
	
	          int factor1=0;
	          int factor2=0; 
	
	         bool answer = factorDelegate.EndInvoke(ref factor1, ref factor2, result);
	
	         Console.WriteLine("Sequential : Factors of {0} : {1} {2} - {3}", 
	                           number, factor1, factor2, answer);
	       }
	
	       public static void Main()
	       {
	          DemonstrateAsyncPattern demonstrator = new DemonstrateAsyncPattern();
	          demonstrator.FactorizeNumberUsingCallback();
	          demonstrator.FactorizeNumberAndWait();
	       }
	    }
	}
	

snippet delegate_createdelegatetom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Delegate_CreateDelegateTOM/openClosedOver.cs

	using System;
	using System.Reflection;
	using System.Security.Permissions;
	
	public delegate void D1(C c, string s);
	public delegate void D2(string s);
	public delegate void D3();
	
	public class C
	{
	    private int id;
	    public C(int id) { this.id = id; }
	
	    public void M1(string s) 
	    { 
	        Console.WriteLine("Instance method M1 on C:  id = {0}, s = {1}",
	            this.id, s);
	    }
	  
	    public static void M2(string s)
	    { 
	        Console.WriteLine("Static method M2 on C:  s = {0}", s); 
	    }
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        C c1 = new C(42);
	
	        MethodInfo mi1 = typeof(C).GetMethod("M1", 
	            BindingFlags.Public | BindingFlags.Instance);
	        MethodInfo mi2 = typeof(C).GetMethod("M2",
	            BindingFlags.Public | BindingFlags.Static);
	
	        D1 d1;
	        D2 d2;
	        D3 d3;
	
	
	        Console.WriteLine("\nAn instance method closed over C.");
	        Delegate test = 
	            Delegate.CreateDelegate(typeof(D2), c1, mi1, false);
	
	        if (test != null)
	        {
	            d2 = (D2) test;
	
	            d2("Hello, World!");
	            d2("Hi, Mom!");
	        }
	
	
	        Console.WriteLine("\nAn open instance method.");
	        d1 = (D1) Delegate.CreateDelegate(typeof(D1), null, mi1);
	
	        d1(c1, "Hello, World!");
	        d1(new C(5280), "Hi, Mom!");
	
	
	        Console.WriteLine("\nAn open static method.");
	        d2 = (D2) Delegate.CreateDelegate(typeof(D2), null, mi2);
	
	        d2("Hello, World!");
	        d2("Hi, Mom!");
	
	
	        Console.WriteLine("\nA static method closed over the first argument (String).");
	        d3 = (D3) Delegate.CreateDelegate(typeof(D3), 
	            "Hello, World!", mi2);
	
	        d3();
	    }
	}
	
	/* This code example produces the following output:
	
	An instance method closed over C.
	Instance method M1 on C:  id = 42, s = Hello, World!
	Instance method M1 on C:  id = 42, s = Hi, Mom!
	
	An open instance method.
	Instance method M1 on C:  id = 42, s = Hello, World!
	Instance method M1 on C:  id = 5280, s = Hi, Mom!
	
	An open static method.
	Static method M2 on C:  s = Hello, World!
	Static method M2 on C:  s = Hi, Mom!
	
	A static method closed over the first argument (String).
	Static method M2 on C:  s = Hello, World!
	 */

snippet match

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Match/match.cs

	using System;
	using System.Collections.Generic;
	using System.Reflection;
	
	[AttributeUsage(AttributeTargets.Method)]
	public class AuthorsAttribute : Attribute 
	{
	   protected List<string> _authors;
	
		public AuthorsAttribute(params string[] names) 
	   {
	      _authors = new List<string>(names);
		}
	
	   public List<string> Authors 
	   {
		   get { return _authors; }
	   }
	
		public override bool Match(object obj) 
	   {
	      AuthorsAttribute authors2 = obj as AuthorsAttribute;
	      if (authors2 == null) return false;
	      
	      if (Object.ReferenceEquals(this, authors2))
	         return true;
	
	      if (_authors.Count != authors2._authors.Count)
	         return false;
	         
	      bool matches = false;
	      foreach (var author in _authors) 
	      { 
	         for (int ctr = 0; ctr < authors2._authors.Count; ctr++)
	         {
	            if (author == authors2._authors[ctr])
	            {
	               matches = true;
	               break;
	            }
	            if (ctr == authors2._authors.Count)
	            {
	               matches = false;
	            }
	         }
	      }
	      return matches;
	   }
	
	   public override string ToString()
	   {
	      string retval = "";
	      for (int ctr = 0; ctr < _authors.Count; ctr++)
	      {
	         retval += $"{_authors[ctr]}{(ctr < _authors.Count - 1 ? ", " : String.Empty)}";
	      }
	      if (retval.Trim().Length == 0)
	      {
	         return "<unknown>";
	      }
	      return retval;
	   }
	}
	
	public class TestClass {
		[Authors("Leo Tolstoy", "John Milton")]
		public void Method1()
		{}
	
		[Authors("Anonymous")]
		public void Method2()
		{}
	
		[Authors("Leo Tolstoy", "John Milton", "Nathaniel Hawthorne")]
		public void Method3()
		{}
	
		[Authors("John Milton", "Leo Tolstoy")]
		public void Method4()
		{}
	}
	
	
	class Example 
	{
		static void Main() 
	   {
			Type clsType = typeof(TestClass);
	
	      AuthorsAttribute authors = null;
			foreach(var method in clsType.GetMethods()) 
	      {
				AuthorsAttribute authAttr = (AuthorsAttribute)  Attribute.GetCustomAttribute(method, 
					                         typeof(AuthorsAttribute));
				if (authAttr != null) 
	         {
					Console.WriteLine($"{clsType.Name}.{method.Name} was authored by {authAttr}.");
	
	            if (method.Name == "Method1")
	            {
					   authors = authAttr;
	               Console.WriteLine();
	               continue;
	            }
	         
	            if (authors.Match(authAttr))
	            {
						Console.WriteLine("TestClass.Method1 was also authored by the same team.");
	            }
	
	            Console.WriteLine($"{authors} {(authors.Equals(authAttr) ? "=" : "<>")} {authAttr}");
	            Console.WriteLine();
				}
			}
		}
	}
	

snippet conceptual_exception_handling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_exception_handling/source.cs

	using System;
	using System.IO;
	using System.Data;
	using System.Data.SqlClient;
	
	public class FileReaderException : Exception
	{
	    public FileReaderException(string description) : base(description)
	    {
	    }
	}
	
	[FlagsAttribute]
	public enum ConnectionState
	{
	    Closed = 0,
	    Open = 1
	}
	
	public class DemoDBClient
	{
	    private ConnectionState state;
	
	    public DemoDBClient()
	    {
	        state = ConnectionState.Open;
	    }
	
	    public ConnectionState State
	    {
	        get
	        {
	            return state;
	        }
	    }
	
	    public void Close()
	    {
	        state = ConnectionState.Closed;
	    }
	}
	
	public class FileUtils
	{
	    public static byte[] ReadFromFile(string filename, int bytes)
	    {
	        return File.ReadAllBytes(filename);
	    }
	}
	
	public class MyFileNotFoundException : Exception
	{
	}
	
	
	public class ExceptionHandling
	{
	    public static void Main()
	    {
	        DemoDBClient conn = new DemoDBClient();
	
	        if (conn.State != ConnectionState.Closed)
	        {
	            conn.Close();
	        }
	
	        try
	        {
	            conn.Close();
	        }
	        catch (InvalidOperationException ex)
	        {
	            Console.WriteLine(ex.GetType().FullName);
	            Console.WriteLine(ex.Message);
	        }
	    }
	}
	
	class FileRead
	{
	    public void ReadAll(FileStream fileToRead)
	    {
	        if (fileToRead == null)
	        {
	            throw new System.ArgumentNullException();
	        }
	
	        int b;
	
	        fileToRead.Seek(0, SeekOrigin.Begin);
	
	        for (int i = 0; i < fileToRead.Length; i++)
	        {
	            b = fileToRead.ReadByte();
	            Console.Write(b.ToString());
	        }
	    }
	}
	
	class FileReader
	{
	    private string fileName;
	
	    public FileReader(string path)
	    {
	        fileName = path;
	    }
	
	    public byte[] Read(int bytes)
	    {
	        byte[] results = FileUtils.ReadFromFile(fileName, bytes);
	        if (results == null)
	        {
	            throw NewFileIOException();
	        }
	        return results;
	    }
	
	    FileReaderException NewFileIOException()
	    {
	        string description = "My NewFileIOException Description";
	
	        return new FileReaderException(description);
	    }
	}

snippet propertybuilder_setgetmethod_4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/propertybuilder_setgetmethod_4.cs

	
	/*
	   This following program demonstrates methods 'SetGetMethod','SetSetMethod' and
	   'AddOtherMethod' of class 'PropertyBuilder'.
	
	   A dynamic assembly is generated with  a class having a property 'Greeting'.
	   Its 'get' and 'set' method are created by returning and setting a string respectively.
	   This property value is reset with default string using othermethod.
	 */
	
	using System;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	
	public class App
	{
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      Type helloWorldType = CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.RunAndSave);
	
	      Object helloWorld = Activator.CreateInstance(helloWorldType, new object[] { "HelloWorld" });
	      Object returnValue = helloWorldType.InvokeMember("Greeting",
	                     BindingFlags.Default |BindingFlags.GetProperty
	                     ,null, helloWorld, null);
	      Console.WriteLine("HelloWorld.GetGreeting returned: \"" + returnValue + "\"");
	
	      helloWorldType.InvokeMember("Greeting",
	                  BindingFlags.Default |BindingFlags.SetProperty
	                  ,null, helloWorld, new object [] {"New Message !!!"});
	      returnValue = helloWorldType.InvokeMember("Greeting",
	                  BindingFlags.Default |BindingFlags.GetProperty
	                  ,null, helloWorld, null);
	      Console.WriteLine("After Set operation HelloWorld.GetGreeting returned: \"" + returnValue + "\"");
	
	      helloWorldType.InvokeMember("reset_Greeting",
	                              BindingFlags.Default |BindingFlags.InvokeMethod
	                              ,null, helloWorld, null);
	      returnValue = helloWorldType.InvokeMember("Greeting",
	                              BindingFlags.Default |BindingFlags.GetProperty
	                              ,null, helloWorld, null);
	      Console.WriteLine("After Reset operation HelloWorld.GetGreeting returned: \"" + returnValue + "\"");
	
	      AssemblyBuilder myAssembly = (AssemblyBuilder) helloWorldType.Assembly;
	      myAssembly.Save("EmittedAssembly.dll");
	   }
	
	   private static Type CreateCallee(AppDomain myAppDomain, AssemblyBuilderAccess access)
	   {
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "EmittedAssembly";
	      AssemblyBuilder myAssemblyBuilder =
	                     myAppDomain.DefineDynamicAssembly(myAssemblyName, access);
	      ModuleBuilder myModule;
	      if (access == AssemblyBuilderAccess.Run)
	      {
	         myModule = myAssemblyBuilder.DefineDynamicModule("EmittedModule");
	      }
	      else
	      {
	         myModule = myAssemblyBuilder.DefineDynamicModule("EmittedModule", "EmittedModule.mod");
	      }
	      TypeBuilder helloWorldTypeBuilder = myModule.DefineType("HelloWorld", TypeAttributes.Public);
	      FieldBuilder greetingFieldBuilder = helloWorldTypeBuilder.DefineField("m_greeting",
	                                                typeof(String), FieldAttributes.Private);
	      Type[] constructorArgs = { typeof(String) };
	      ConstructorBuilder constructor = helloWorldTypeBuilder.DefineConstructor(
	         MethodAttributes.Public, CallingConventions.Standard, constructorArgs);
	
	      ILGenerator constructorIL = constructor.GetILGenerator();
	      constructorIL.Emit(OpCodes.Ldarg_0);
	      constructorIL.Emit(OpCodes.Ldarg_1);
	      constructorIL.Emit(OpCodes.Stfld, greetingFieldBuilder);
	      constructorIL.Emit(OpCodes.Ret);
	      PropertyBuilder greetingPropertyBuilder = helloWorldTypeBuilder.DefineProperty(
	                               "Greeting",PropertyAttributes.None,typeof(string),null);
	
	      MethodBuilder getGreetingMethod = helloWorldTypeBuilder.DefineMethod("get_Greeting",
	         MethodAttributes.Public|MethodAttributes.HideBySig|MethodAttributes.SpecialName,
	         typeof(String),null);
	      ILGenerator methodIL = getGreetingMethod.GetILGenerator();
	      methodIL.Emit(OpCodes.Ldarg_0);
	      methodIL.Emit(OpCodes.Ldfld, greetingFieldBuilder);
	      methodIL.Emit(OpCodes.Ret);
	      greetingPropertyBuilder.SetGetMethod(getGreetingMethod);
	
	      Type[] methodArgs = {typeof(string)};
	      MethodBuilder setGreetingMethod = helloWorldTypeBuilder.DefineMethod("set_Greeting",
	         MethodAttributes.Public|MethodAttributes.HideBySig|MethodAttributes.SpecialName,
	         typeof(void), methodArgs);
	      methodIL = setGreetingMethod.GetILGenerator();
	      methodIL.Emit(OpCodes.Ldarg_0);
	      methodIL.Emit(OpCodes.Ldarg_1);
	      methodIL.Emit(OpCodes.Stfld,greetingFieldBuilder);
	      methodIL.Emit(OpCodes.Ret);
	      greetingPropertyBuilder.SetSetMethod(setGreetingMethod);
	      MethodBuilder otherGreetingMethod = helloWorldTypeBuilder.DefineMethod("reset_Greeting",
	         MethodAttributes.Public|MethodAttributes.HideBySig,
	         typeof(void), null);
	      methodIL = otherGreetingMethod.GetILGenerator();
	      methodIL.Emit(OpCodes.Ldarg_0);
	      methodIL.Emit(OpCodes.Ldstr,"Default String.");
	      methodIL.Emit(OpCodes.Stfld, greetingFieldBuilder);
	      methodIL.Emit(OpCodes.Ret);
	      greetingPropertyBuilder.AddOtherMethod(otherGreetingMethod);
	      return(helloWorldTypeBuilder.CreateType());
	   }
	}

snippet list`1_sortsearchcomparerrange

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/source.cs

	using System;
	using System.Collections.Generic;
	
	public class DinoComparer: IComparer<string>
	{
	    public int Compare(string x, string y)
	    {
	        if (x == null)
	        {
	            if (y == null)
	            {
	                return 0;
	            }
	            else
	            {
	                return -1;
	            }
	        }
	        else
	        {
	            if (y == null)
	            {
	                return 1;
	            }
	            else
	            {
	                int retval = x.Length.CompareTo(y.Length);
	
	                if (retval != 0)
	                {
	                    return retval;
	                }
	                else
	                {
	                    return x.CompareTo(y);
	                }
	            }
	        }
	    }
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>();
	
	        dinosaurs.Add("Pachycephalosaurus");
	        dinosaurs.Add("Parasauralophus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("Galimimus");
	        dinosaurs.Add("Mamenchisaurus");
	        dinosaurs.Add("Deinonychus");
	        dinosaurs.Add("Oviraptor");
	        dinosaurs.Add("Tyrannosaurus");
	
	        int herbivores = 5;
	        Display(dinosaurs);
	
	        DinoComparer dc = new DinoComparer();
	
	        Console.WriteLine("\nSort a range with the alternate comparer:");
	        dinosaurs.Sort(0, herbivores, dc);
	        Display(dinosaurs);
	
	        Console.WriteLine("\nBinarySearch a range and Insert \"{0}\":",
	            "Brachiosaurus");
	
	        int index = dinosaurs.BinarySearch(0, herbivores, "Brachiosaurus", dc);
	
	        if (index < 0)
	        {
	            dinosaurs.Insert(~index, "Brachiosaurus");
	            herbivores++;
	        }
	
	        Display(dinosaurs);
	    }
	
	    private static void Display(List<string> list)
	    {
	        Console.WriteLine();
	        foreach( string s in list )
	        {
	            Console.WriteLine(s);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Pachycephalosaurus
	Parasauralophus
	Amargasaurus
	Galimimus
	Mamenchisaurus
	Deinonychus
	Oviraptor
	Tyrannosaurus
	
	Sort a range with the alternate comparer:
	
	Galimimus
	Amargasaurus
	Mamenchisaurus
	Parasauralophus
	Pachycephalosaurus
	Deinonychus
	Oviraptor
	Tyrannosaurus
	
	BinarySearch a range and Insert "Brachiosaurus":
	
	Galimimus
	Amargasaurus
	Brachiosaurus
	Mamenchisaurus
	Parasauralophus
	Pachycephalosaurus
	Deinonychus
	Oviraptor
	Tyrannosaurus
	 */
	
	

snippet timezone2_serialization

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TimeZone2_Serialization/SerializeTimeZoneData.cs

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Globalization;
	using System.IO;
	using System.Reflection;
	using System.Resources;
	using System.Windows.Forms;
	
	[assembly:CLSCompliant(true)]
	class TimeZoneSerialization
	{
	   private const string resxName = "SerializedTimeZones.resx";
	
	   static void Main()
	   {
	      TimeZoneSerialization tzSerialization = new TimeZoneSerialization();
	      tzSerialization.DeserializeTimeZones();
	   }
	
	   TimeZoneSerialization()
	   {
	      TextWriter writeStream;
	      Dictionary<string, string> resources = new Dictionary<string, string>();
	      if (File.Exists(resxName))
	      {
	         TextReader readStream = new StreamReader(resxName);
	         ResXResourceReader resReader = new ResXResourceReader(readStream);
	         foreach (DictionaryEntry item in resReader)
	         {
	            if (! (((string) item.Key) == "CentralStandardTime" || 
	                   ((string) item.Key) == "PalmerStandardTime" )) 
	               resources.Add((string)item.Key, (string) item.Value);
	         }
	         readStream.Close();
	         File.Delete(resxName);
	      }
	
	      try
	      {
	         writeStream = new StreamWriter(resxName, true);
	      }
	      catch (FileNotFoundException e)
	      {
	         Console.WriteLine("{0}: The file {1} could not be found.", e.GetType().Name, resxName);
	         return;
	      }
	
	      ResXResourceWriter resWriter = new ResXResourceWriter(writeStream);
	
	      foreach (KeyValuePair<string, string> item in resources)
	      {
	         resWriter.AddResource(item.Key, item.Value);
	      }
	
	      try
	      {
	         TimeZoneInfo cst = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
	         resWriter.AddResource(cst.Id.Replace(" ", string.Empty), cst.ToSerializedString());
	      }
	      catch (TimeZoneNotFoundException)
	      {
	         Console.WriteLine("The Central Standard Time zone could not be found.");
	      }
	
	      TimeZoneInfo.TransitionTime startTransition = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 4, 0, 0), 
	                                                                                                 10, 2, DayOfWeek.Sunday);
	      TimeZoneInfo.TransitionTime endTransition = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 3, 0, 0), 
	                                                                                               3, 2, DayOfWeek.Sunday);
	      TimeSpan delta = new TimeSpan(1, 0, 0);
	      TimeZoneInfo.AdjustmentRule adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(new DateTime(1999, 10, 1), 
	                                            DateTime.MaxValue.Date, delta, startTransition, endTransition);
	      TimeZoneInfo.AdjustmentRule[] adjustments = {adjustment};
	      string DisplayName = "(GMT-04:00) Antarctica/Palmer Time";
	      string standardName = "Palmer Standard Time";
	      string daylightName = "Palmer Daylight Time";
	      TimeSpan offset = new TimeSpan(-4, 0, 0);
	      TimeZoneInfo palmer = TimeZoneInfo.CreateCustomTimeZone(standardName, offset, DisplayName, standardName, daylightName, adjustments);
	      resWriter.AddResource(palmer.Id.Replace(" ", String.Empty), palmer.ToSerializedString());
	
	      resWriter.Generate();
	      resWriter.Close();
	      writeStream.Close();
	   }
	
	   private void DeserializeTimeZones()
	   {
	      TimeZoneInfo cst, palmer;
	      string timeZoneString;
	      ResourceManager resMgr = new ResourceManager("SerializeTimeZoneData.SerializedTimeZones", this.GetType().Assembly);
	
	      try
	      {
	         cst = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
	      }
	      catch (TimeZoneNotFoundException)
	      {
	         timeZoneString = resMgr.GetString("CentralStandardTime");
	         if (! String.IsNullOrEmpty(timeZoneString))
	         {
	            cst = TimeZoneInfo.FromSerializedString(timeZoneString);
	         }
	         else
	         {
	            MessageBox.Show("Unable to create Central Standard Time Zone. Application must exit.", "Application Error");
	            return;
	         }
	      }
	      try
	      {
	         timeZoneString = resMgr.GetString("PalmerStandardTime");
	         palmer = TimeZoneInfo.FromSerializedString(timeZoneString);
	      }
	      catch (MissingManifestResourceException) 
	      {
	         MessageBox.Show("Unable to retrieve the Palmer Standard Time Zone from the resource file. Application must exit.");
	         return;
	      }
	   }
	}

snippet conceptual_tap_patterns

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_tap_patterns/patterns1.cs

	using System;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Drawing;
	using System.Threading;
	using System.Threading.Tasks;
	
	public static class StaticPattern
	{
	    public static Task<int> ReadTask(this Stream stream, byte[] buffer, int offset, int count, object state)
	    {
	        var tcs = new TaskCompletionSource<int>();
	        stream.BeginRead(buffer, offset, count, ar =>
	        {
	            try { tcs.SetResult(stream.EndRead(ar)); }
	            catch (Exception exc) { tcs.SetException(exc); }
	        }, state);
	        return tcs.Task;
	    }
	
	    public static Task<DateTimeOffset> Delay(int millisecondsTimeout)
	    {
	        TaskCompletionSource<DateTimeOffset> tcs = null;
	        Timer timer = null;
	 
	        timer = new Timer(delegate
	        {
	            timer.Dispose();
	            tcs.TrySetResult(DateTimeOffset.UtcNow);
	        }, null, Timeout.Infinite, Timeout.Infinite);
	 
	        tcs = new TaskCompletionSource<DateTimeOffset>(timer);
	        timer.Change(millisecondsTimeout, Timeout.Infinite);
	        return tcs.Task;
	    }
	
	   public static async Task Poll(Uri url, CancellationToken cancellationToken, 
	                                 IProgress<bool> progress)
	   {
	       while(true)
	       {
	           await Task.Delay(TimeSpan.FromSeconds(10), cancellationToken);
	           bool success = false;
	           try
	           {
	               await DownloadStringAsync(url);
	               success = true;
	           }
	           catch { /* ignore errors */ }
	           progress.Report(success);
	       }
	   }
	   
	   static Task<string> DownloadStringAsync(Uri url) 
	   { 
	      var tcs = new TaskCompletionSource<string>();
	      return tcs.Task; 
	   }
	
	}
	
	public class Pattern
	{
	   int value = 0;
	
	   public Task<int> MethodAsync(string input)
	   {
	       if (input == null) throw new ArgumentNullException("input");
	       return MethodAsyncInternal(input);
	   }
	   
	   private async Task<int> MethodAsyncInternal(string input)
	   {
	
	
	      return value;
	   }
	   
	   internal Task<Bitmap> RenderAsync(
	                 ImageData data, CancellationToken cancellationToken)
	   {
	       return Task.Run(() =>
	       {
	           var bmp = new Bitmap(data.Width, data.Height);
	           for(int y=0; y<data.Height; y++)
	           {
	               cancellationToken.ThrowIfCancellationRequested();
	               for(int x=0; x<data.Width; x++)
	               {
	               }
	           }
	           return bmp;
	       }, cancellationToken);
	   }
	     
	   public static Task<bool> Delay(int millisecondsTimeout)
	   {
	        TaskCompletionSource<bool> tcs = null;
	        Timer timer = null;
	 
	        timer = new Timer(delegate
	        {
	            timer.Dispose();
	            tcs.TrySetResult(true);
	        }, null, Timeout.Infinite, Timeout.Infinite);
	 
	        tcs = new TaskCompletionSource<bool>(timer);
	        timer.Change(millisecondsTimeout, Timeout.Infinite);
	        return tcs.Task;
	   }
	   
	   public async Task<Bitmap> DownloadDataAndRenderImageAsync(
	       CancellationToken cancellationToken)
	   {
	       var imageData = await DownloadImageDataAsync(cancellationToken);
	       return await RenderAsync(imageData, cancellationToken);
	   }
	   
	   private async Task<ImageData> DownloadImageDataAsync(CancellationToken c)
	   {
	      return new ImageData();
	   }
	}
	
	internal class ImageData
	{
	    public int Width = 0;
	    public int Height = 0;
	} 
snippet performancecountertype_numberofitems32

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType_NumberOfItems32/numberofitems32.cs

	using System;
	using System.Collections;
	using System.Collections.Specialized;
	using System.Diagnostics;
	
	public class NumberOfItems64
	{
	
		private static PerformanceCounter PC;
	
		public static void Main()
		{	
			ArrayList samplesList = new ArrayList();
	
	        if (SetupCategory())
	            return;
	        CreateCounters();
			CollectSamples(samplesList);
			CalculateResults(samplesList);
		}
	
	    private static bool SetupCategory()
	    {		
	        if ( !PerformanceCounterCategory.Exists("NumberOfItems32SampleCategory") ) 
	        {
	
	            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();
	
	            CounterCreationData NOI64 = new CounterCreationData();
	            NOI64.CounterType = PerformanceCounterType.NumberOfItems64;
	            NOI64.CounterName = "NumberOfItems32Sample";
	            CCDC.Add(NOI64);
	
	            PerformanceCounterCategory.Create("NumberOfItems32SampleCategory",
	                "Demonstrates usage of the NumberOfItems32 performance counter type.",
	                PerformanceCounterCategoryType.SingleInstance, CCDC);
	
	            return(true);
	        }
	        else
	        {
	            Console.WriteLine("Category exists - NumberOfItems32SampleCategory");
	            return(false);
	        }
	    }
	
	    private static void CreateCounters()
	    {
	        PC = new PerformanceCounter("NumberOfItems32SampleCategory", 
				"NumberOfItems32Sample", 
				false);
	
	        PC.RawValue=0;
	        
	    }
	
		private static void CollectSamples(ArrayList samplesList)
		{
		
			
			
			Random r = new Random( DateTime.Now.Millisecond );
	
			for (int j = 0; j < 100; j++) 
			{
		        
				int value = r.Next(1, 10);
				Console.Write(j + " = " + value);
	
				PC.IncrementBy(value);
	
				if ((j % 10) == 9) 
				{
					OutputSample(PC.NextSample());
					samplesList.Add( PC.NextSample() );
				}
				else
					Console.WriteLine();
		        
				System.Threading.Thread.Sleep(50);
			}
	
			
		}
	
	
	    private static void CalculateResults(ArrayList samplesList)
	    {
	        for(int i = 0; i < (samplesList.Count - 1); i++)
	        {
	            OutputSample( (CounterSample)samplesList[i] );
	            OutputSample( (CounterSample)samplesList[i+1] );
	
	            Console.WriteLine(".NET computed counter value = " + 
	                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],
	                (CounterSample)samplesList[i+1]) );
	
	            Console.WriteLine("My computed counter value = " + 
	                MyComputeCounterValue((CounterSample)samplesList[i],
	                (CounterSample)samplesList[i+1]) );
	
	        }
	    }
		
	
		private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)
		{
			Single counterValue = s1.RawValue;
			return(counterValue);
		}
		
		private static void OutputSample(CounterSample s)
		{
			Console.WriteLine("\r\n+++++++++++");
			Console.WriteLine("Sample values - \r\n");
			Console.WriteLine("   BaseValue        = " + s.BaseValue);
			Console.WriteLine("   CounterFrequency = " + s.CounterFrequency);
			Console.WriteLine("   CounterTimeStamp = " + s.CounterTimeStamp);
			Console.WriteLine("   CounterType      = " + s.CounterType);
			Console.WriteLine("   RawValue         = " + s.RawValue);
			Console.WriteLine("   SystemFrequency  = " + s.SystemFrequency);
			Console.WriteLine("   TimeStamp        = " + s.TimeStamp);
			Console.WriteLine("   TimeStamp100nSec = " + s.TimeStamp100nSec);
			Console.WriteLine("++++++++++++++++++++++");
		}
	
	
		
	}
snippet keyedhashalgorithm

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/keyedhashalgorithm/program.cs

	using System;
	using System.Security.Cryptography;
	
	public class TestHMACMD5
	{
	    static private void PrintByteArray(Byte[] arr)
	    {
	        int i;
	        Console.WriteLine("Length: " + arr.Length);
	        for (i = 0; i < arr.Length; i++)
	        {
	            Console.Write("{0:X}", arr[i]);
	            Console.Write("    ");
	            if ((i + 9) % 8 == 0) Console.WriteLine();
	        }
	        if (i % 8 != 0) Console.WriteLine();
	    }
	    public static void Main()
	    {
	        byte[] key1 = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b };
	        HMACMD5 hmac1 = new HMACMD5(key1);
	
	        byte[] key2 = System.Text.Encoding.ASCII.GetBytes("KeyString");
	        HMACMD5 hmac2 = new HMACMD5(key2);
	
	        byte[] data1 = System.Text.Encoding.ASCII.GetBytes("Hi There");
	        PrintByteArray(hmac1.ComputeHash(data1));
	
	        byte[] data2 = System.Text.Encoding.ASCII.GetBytes("This data will be hashed.");
	        PrintByteArray(hmac2.ComputeHash(data2));
	    }
	}
	public class HMACMD5 : KeyedHashAlgorithm
	{
	    private MD5 hash1;
	    private MD5 hash2;
	    private bool bHashing = false;
	
	    private byte[] rgbInner = new byte[64];
	    private byte[] rgbOuter = new byte[64];
	
	    public HMACMD5(byte[] rgbKey)
	    {
	        HashSizeValue = 128;
	        hash1 = MD5.Create();
	        hash2 = MD5.Create();
	        if (rgbKey.Length > 64)
	        {
	            KeyValue = hash1.ComputeHash(rgbKey);
	        }
	        else
	        {
	            KeyValue = (byte[])rgbKey.Clone();
	        }
	        int i = 0;
	        for (i = 0; i < 64; i++)
	        {
	            rgbInner[i] = 0x36;
	            rgbOuter[i] = 0x5C;
	        }
	        for (i = 0; i < KeyValue.Length; i++)
	        {
	            rgbInner[i] ^= KeyValue[i];
	            rgbOuter[i] ^= KeyValue[i];
	        }
	    }
	
	    public override byte[] Key
	    {
	        get { return (byte[])KeyValue.Clone(); }
	        set
	        {
	            if (bHashing)
	            {
	                throw new Exception("Cannot change key during hash operation");
	            }
	            if (value.Length > 64)
	            {
	                KeyValue = hash1.ComputeHash(value);
	            }
	            else
	            {
	                KeyValue = (byte[])value.Clone();
	            }
	            int i = 0;
	            for (i = 0; i < 64; i++)
	            {
	                rgbInner[i] = 0x36;
	                rgbOuter[i] = 0x5C;
	            }
	            for (i = 0; i < KeyValue.Length; i++)
	            {
	                rgbInner[i] ^= KeyValue[i];
	                rgbOuter[i] ^= KeyValue[i];
	            }
	        }
	    }
	    public override void Initialize()
	    {
	        hash1.Initialize();
	        hash2.Initialize();
	        bHashing = false;
	    }
	    protected override void HashCore(byte[] rgb, int ib, int cb)
	    {
	        if (bHashing == false)
	        {
	            hash1.TransformBlock(rgbInner, 0, 64, rgbInner, 0);
	            bHashing = true;
	        }
	        hash1.TransformBlock(rgb, ib, cb, rgb, ib);
	    }
	
	    protected override byte[] HashFinal()
	    {
	        if (bHashing == false)
	        {
	            hash1.TransformBlock(rgbInner, 0, 64, rgbInner, 0);
	            bHashing = true;
	        }
	        hash1.TransformFinalBlock(new byte[0], 0, 0);
	        hash2.TransformBlock(rgbOuter, 0, 64, rgbOuter, 0);
	        hash2.TransformFinalBlock(hash1.Hash, 0, hash1.Hash.Length);
	        bHashing = false;
	        return hash2.Hash;
	    }
	}
snippet process_start_static

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Process_Start_static/processstartstatic.cs

	using System;
	using System.Diagnostics;
	using System.ComponentModel;
	
	namespace MyProcessSample
	{
	    class MyProcess
	    {
	        void OpenApplication(string myFavoritesPath)
	        {
	            Process.Start("IExplore.exe");
	
	            Process.Start(myFavoritesPath);
	        }
	
	        void OpenWithArguments()
	        {
	            Process.Start("IExplore.exe", "www.northwindtraders.com");
	
	            Process.Start("IExplore.exe", "C:\\myPath\\myFile.htm");
	            Process.Start("IExplore.exe", "C:\\myPath\\myFile.asp");
	        }
	
	        void OpenWithStartInfo()
	        {
	            ProcessStartInfo startInfo = new ProcessStartInfo("IExplore.exe");
	            startInfo.WindowStyle = ProcessWindowStyle.Minimized;
	
	            Process.Start(startInfo);
	
	            startInfo.Arguments = "www.northwindtraders.com";
	
	            Process.Start(startInfo);
	        }
	
	        static void Main()
	        {
	            string myFavoritesPath =
	                Environment.GetFolderPath(Environment.SpecialFolder.Favorites);
	
	            MyProcess myProcess = new MyProcess();
	
	            myProcess.OpenApplication(myFavoritesPath);
	            myProcess.OpenWithArguments();
	            myProcess.OpenWithStartInfo();
	        }
	    }
	}
	
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using System.Threading.Tasks;
	using System.Diagnostics;
	
	namespace StartArgsEcho
	{
	    class Program
	    {
	        static void Main()
	        {
	            ProcessStartInfo startInfo = new ProcessStartInfo("argsecho.exe");
	            startInfo.WindowStyle = ProcessWindowStyle.Normal;
	
	            startInfo.Arguments = "/a";
	            Process.Start(startInfo);
	
	            startInfo.Arguments = "/a /b c:\\temp";
	            Process.Start(startInfo);
	
	            startInfo.Arguments = "/a \"literal string arg\"";
	            Process.Start(startInfo);
	
	            startInfo.Arguments = "/a /b:\"\"string in double quotes\"\"";
	            Process.Start(startInfo);
	
	            startInfo.Arguments = "/a /b:\"\"\"quoted string\"\"\"";
	            Process.Start(startInfo);
	        }
	    }
	}
	
	using System;
	
	namespace StartArgs
	{
	    class ArgsEcho
	    {
	        static void Main(string[] args)
	        {
	            Console.WriteLine("Received the following arguments:\n");
	
	            for (var i = 0; i < args.Length; i++)
	            {
	                Console.WriteLine($"[{i}] = {args[i]}");
	            }
	
	            Console.WriteLine("\nPress any key to exit");
	            Console.ReadLine();
	        }
	    }
	}

snippet cryptography_xml_encrypteddata___encryptedtype

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_EncryptedData___EncryptedType/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	
	        XmlDocument xmlDoc = new XmlDocument();
	
	        try
	        {
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	
	        TripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();
	
	
	        try
	        {
	            Encrypt(xmlDoc, "creditcard", tDESkey);
	
	            Console.WriteLine("Encrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	
	            Decrypt(xmlDoc, tDESkey);
	
	            Console.WriteLine();
	            Console.WriteLine("Decrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	            tDESkey.Clear();
	        }
	
	    }
	
	    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, TripleDESCryptoServiceProvider Alg)
	    {
	
	
	        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	
	        if (elementToEncrypt == null)
	        {
	            throw new XmlException("The specified element was not found");
	
	        }
	
	
	        EncryptedXml eXml = new EncryptedXml();
	
	        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, Alg, false);
	
	
	
	        EncryptedData edElement = new EncryptedData();
	        
	        edElement.Type = EncryptedXml.XmlEncElementUrl;
	
	  
	
	        edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl);
	
	        edElement.CipherData.CipherValue = encryptedElement;
	
	
	        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	
	    }
	
	    public static void Decrypt(XmlDocument Doc, SymmetricAlgorithm Alg)
	    {
	
	        XmlElement encryptedElement = Doc.GetElementsByTagName("EncryptedData")[0] as XmlElement;
	
	        if (encryptedElement == null)
	        {
	            throw new XmlException("The EncryptedData element was not found.");
	        }
	
	        EncryptedData edElement = new EncryptedData();
	        edElement.LoadXml(encryptedElement);
	
	        EncryptedXml exml = new EncryptedXml();
	
	        byte[] rgbOutput = exml.DecryptData(edElement, Alg);
	
	        exml.ReplaceData(encryptedElement, rgbOutput);
	
	    }
	
	
	}
snippet reflection_dynamicmethod_closedover

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Reflection_DynamicMethod_ClosedOver/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public class Example
	{
	    private int id = 0;
	    public Example(int id)
	    {
	        this.id = id;
	    }
	    public int ID { get { return id; }}
	}
	
	public class DerivedFromExample : Example
	{
	    public DerivedFromExample(int id) : base(id) {} 
	}
	
	public delegate int UseLikeInstance(int newID);
	public delegate int UseLikeStatic(Example ex, int newID);
	
	public class Demo
	{
	    public static void Main()
	    {
	        DynamicMethod changeID = new DynamicMethod(
	            "",
	            typeof(int),
	            new Type[] { typeof(Example), typeof(int) },
	            typeof(Example)
	        );
	
	        FieldInfo fid = typeof(Example).GetField(
	            "id",
	            BindingFlags.NonPublic | BindingFlags.Instance
	        );
	    
	        ILGenerator ilg = changeID.GetILGenerator();
	
	        ilg.Emit(OpCodes.Ldarg_0);
	        ilg.Emit(OpCodes.Ldfld, fid);
	
	        ilg.Emit(OpCodes.Ldarg_0);
	        ilg.Emit(OpCodes.Ldarg_1);
	        ilg.Emit(OpCodes.Stfld, fid);
	
	        ilg.Emit(OpCodes.Ret);
	
	
	        UseLikeStatic uls = 
	            (UseLikeStatic) changeID.CreateDelegate(
	                typeof(UseLikeStatic)
	            );
	
	        Example ex = new Example(42);
	
	        UseLikeInstance uli = 
	            (UseLikeInstance) changeID.CreateDelegate(
	                typeof(UseLikeInstance),
	                ex
	            );
	
	        Console.WriteLine(
	            "Change the value of id; previous value: {0}",
	            uls(ex, 1492)
	        );
	
	        Console.WriteLine(
	            "Change the value of id; previous value: {0}",
	            uli(2700)
	        );
	
	        Console.WriteLine("Final value of id: {0}", ex.ID);
	
	
	        DerivedFromExample dfex = new DerivedFromExample(71);
	
	        uli = (UseLikeInstance) changeID.CreateDelegate(
	                typeof(UseLikeInstance),
	                dfex
	            );
	
	        Console.WriteLine(
	            "Change the value of id; previous value: {0}",
	            uls(dfex, 73)
	        );
	        Console.WriteLine(
	            "Change the value of id; previous value: {0}",
	            uli(79)
	        );
	        Console.WriteLine("Final value of id: {0}", dfex.ID);
	    }
	}
	
	/* This code example produces the following output:
	
	Change the value of id; previous value: 42
	Change the value of id; previous value: 1492
	Final value of id: 2700
	Change the value of id; previous value: 71
	Change the value of id; previous value: 73
	Final value of id: 79
	 */
snippet methodbody

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MethodBody/source.cs

	using System;
	using System.Reflection;
	
	public class Example
	{
	    public static void Main()
	    {
	        MethodInfo mi = typeof(Example).GetMethod("MethodBodyExample");
	        MethodBody mb = mi.GetMethodBody();
	        Console.WriteLine("\r\nMethod: {0}", mi);
	
	        Console.WriteLine("    Local variables are initialized: {0}", 
	            mb.InitLocals);
	        Console.WriteLine("    Maximum number of items on the operand stack: {0}", 
	            mb.MaxStackSize);
	
	        Console.WriteLine();
	        foreach (LocalVariableInfo lvi in mb.LocalVariables)
	        {
	            Console.WriteLine("Local variable: {0}", lvi);
	        }
	
	        Console.WriteLine();
	        foreach (ExceptionHandlingClause ehc in mb.ExceptionHandlingClauses)
	        {
	            Console.WriteLine(ehc.Flags.ToString());
	
	            switch (ehc.Flags)
	            {
	                case ExceptionHandlingClauseOptions.Filter:
	                    Console.WriteLine("        Filter Offset: {0}", 
	                        ehc.FilterOffset);
	                    break;
	                case ExceptionHandlingClauseOptions.Finally:
	                    break;
	                default:
	                    Console.WriteLine("    Type of exception: {0}", 
	                        ehc.CatchType);
	                    break;
	            }
	
	            Console.WriteLine("       Handler Length: {0}", ehc.HandlerLength);
	            Console.WriteLine("       Handler Offset: {0}", ehc.HandlerOffset);
	            Console.WriteLine("     Try Block Length: {0}", ehc.TryLength);
	            Console.WriteLine("     Try Block Offset: {0}", ehc.TryOffset);
	        }
	    }
	
	    public void MethodBodyExample(object arg)
	    {
	        int var1 = 42;
	        string var2 = "Forty-two";
	
	        try
	        {
	            if (arg == null)
	            {
	                throw new ArgumentNullException("The argument cannot be null.");
	            }
	            if (arg.GetType() == typeof(string))
	            {
	                throw new ArgumentException("The argument cannot be a string.");
	            }        
	        }
	
	
	        catch(Exception ex)
	        {
	            Console.WriteLine("Ordinary exception-handling clause caught: {0}", 
	                ex.GetType());
	        }        
	        finally
	        {
	            var1 = 3033;
	            var2 = "Another string.";
	        }
	    }
	}
	
	
	
	

snippet string_split3

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/string_split3/omit.cs

	using System;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    string s1 = ",ONE,,TWO,,,THREE,,";
	    string s2 = "[stop]" +
	                "ONE[stop][stop]" +
	                "TWO[stop][stop][stop]" +
	                "THREE[stop][stop]";
	    char[] charSeparators = new char[] {','};
	    string[] stringSeparators = new string[] {"[stop]"};
	    string[] result;
	    Console.WriteLine("1) Split a string delimited by characters:\n");
	
	    Console.WriteLine("1a )The original string is \"{0}\".", s1);
	    Console.WriteLine("The delimiter character is '{0}'.\n", 
	                       charSeparators[0]);
	
	    Console.WriteLine("1b) Split a string delimited by characters and " +
	                      "return all elements:");
	    result = s1.Split(charSeparators, StringSplitOptions.None);
	    Show(result);
	
	    Console.WriteLine("1c) Split a string delimited by characters and " +
	                      "return all non-empty elements:");
	    result = s1.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries);
	    Show(result);
	
	    Console.WriteLine("1d) Split a string delimited by characters and " +
	                      "return 2 elements:");
	    result = s1.Split(charSeparators, 2, StringSplitOptions.None);
	    Show(result);
	
	    Console.WriteLine("1e) Split a string delimited by characters and " +
	                      "return 2 non-empty elements:");
	    result = s1.Split(charSeparators, 2, StringSplitOptions.RemoveEmptyEntries);
	    Show(result);
	
	    Console.WriteLine("2) Split a string delimited by another string:\n");
	
	    Console.WriteLine("2a) The original string is \"{0}\".", s2);
	    Console.WriteLine("The delimiter string is \"{0}\".\n", stringSeparators[0]);
	
	    Console.WriteLine("2b) Split a string delimited by another string and " +
	                      "return all elements:");
	    result = s2.Split(stringSeparators, StringSplitOptions.None);
	    Show(result);
	
	    Console.WriteLine("2c) Split a string delimited by another string and " +
	                      "return all non-empty elements:");
	    result = s2.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	    Show(result);
	
	    Console.WriteLine("2d) Split a string delimited by another string and " +
	                      "return 2 elements:");
	    result = s2.Split(stringSeparators, 2, StringSplitOptions.None);
	    Show(result);
	
	    Console.WriteLine("2e) Split a string delimited by another string and " + 
	                      "return 2 non-empty elements:");
	    result = s2.Split(stringSeparators, 2, StringSplitOptions.RemoveEmptyEntries);
	    Show(result);
	
	    void Show(string[] entries)
	    {
	        Console.WriteLine("The return value contains these {0} elements:", entries.Length);
	        foreach (string entry in entries)
	        {
	            Console.Write("<{0}>", entry);
	        }
	        Console.Write("\n\n");
	    }
	
	    /*
	    This example produces the following results:
	
	    1) Split a string delimited by characters:
	
	    1a )The original string is ",ONE,,TWO,,,THREE,,".
	    The delimiter character is ','.
	
	    1b) Split a string delimited by characters and return all elements:
	    The return value contains these 9 elements:
	    <><ONE><><TWO><><><THREE><><>
	
	    1c) Split a string delimited by characters and return all non-empty elements:
	    The return value contains these 3 elements:
	    <ONE><TWO><THREE>
	
	    1d) Split a string delimited by characters and return 2 elements:
	    The return value contains these 2 elements:
	    <><ONE,,TWO,,,THREE,,>
	
	    1e) Split a string delimited by characters and return 2 non-empty elements:
	    The return value contains these 2 elements:
	    <ONE><TWO,,,THREE,,>
	
	    2) Split a string delimited by another string:
	
	    2a) The original string is "[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]".
	    The delimiter string is "[stop]".
	
	    2b) Split a string delimited by another string and return all elements:
	    The return value contains these 9 elements:
	    <><ONE><><TWO><><><THREE><><>
	
	    2c) Split a string delimited by another string and return all non-empty elements:
	    The return value contains these 3 elements:
	    <ONE><TWO><THREE>
	
	    2d) Split a string delimited by another string and return 2 elements:
	    The return value contains these 2 elements:
	    <><ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]>
	
	    2e) Split a string delimited by another string and return 2 non-empty elements:
	    The return value contains these 2 elements:
	    <ONE><TWO[stop][stop][stop]THREE[stop][stop]>
	
	    */
	    }
	
	}

snippet conceptual_disposable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_disposable/derived1.cs

	using Microsoft.Win32.SafeHandles;
	using System;
	using System.IO;
	using System.Runtime.InteropServices;
	using System.Threading;
	
	public class DisposableStreamResource2 : DisposableStreamResource
	{
	   protected const uint GENERIC_WRITE = 0x40000000; 
	   protected const uint OPEN_ALWAYS = 4;
	   
	   [DllImport("kernel32.dll")]   
	   protected static extern bool WriteFile(
	                                SafeFileHandle safeHandle, string lpBuffer, 
	                                int nNumberOfBytesToWrite, out int lpNumberOfBytesWritten,
	                                IntPtr lpOverlapped);
	   
	   private bool disposed = false;
	   private string filename;
	   private bool created = false;
	   private SafeFileHandle safeHandle;
	   
	   public DisposableStreamResource2(string filename) : base(filename)
	   {
	      this.filename = filename;
	   }
	   
	   public void WriteFileInfo()
	   { 
	      if (! created) {
	         IntPtr hFile = CreateFile(@".\FileInfo.txt", GENERIC_WRITE, 0, 
	                                   IntPtr.Zero, OPEN_ALWAYS, 
	                                   FILE_ATTRIBUTE_NORMAL, IntPtr.Zero);
	         if (hFile != INVALID_HANDLE_VALUE)
	            safeHandle = new SafeFileHandle(hFile, true);
	         else
	            throw new IOException("Unable to create output file.");
	
	         created = true;
	      }
	
	      string output = String.Format("{0}: {1:N0} bytes\n", filename, Size);
	      int bytesWritten;
	      bool result = WriteFile(safeHandle, output, output.Length, out bytesWritten, IntPtr.Zero);                                     
	   }
	
	   protected override void Dispose(bool disposing)
	   {
	      if (disposed) return;
	      
	      if (disposing)
	         safeHandle.Dispose();
	      
	      disposed = true;
	      
	      
	      base.Dispose(disposing);
	   }
	}
	
	public class Example
	{
	   public static void Main()
	   {
	      DisposableStreamResource2 d = new DisposableStreamResource2(@"C:\Windows\Explorer.exe");
	      d.WriteFileInfo();
	      d.Dispose();
	   }
	}
	
	public class DisposableStreamResource : IDisposable
	{
	   protected const uint GENERIC_READ = 0x80000000;
	   protected const uint FILE_SHARE_READ = 0x00000001;
	   protected const uint OPEN_EXISTING = 3;
	   protected const uint FILE_ATTRIBUTE_NORMAL = 0x80;
	   protected IntPtr INVALID_HANDLE_VALUE = new IntPtr(-1);
	   private const int INVALID_FILE_SIZE = unchecked((int) 0xFFFFFFFF);
	   
	   [DllImport("kernel32.dll", EntryPoint = "CreateFileW", CharSet = CharSet.Unicode)]
	   protected static extern IntPtr CreateFile (
	                                  string lpFileName, uint dwDesiredAccess, 
	                                  uint dwShareMode, IntPtr lpSecurityAttributes, 
	                                  uint dwCreationDisposition, uint dwFlagsAndAttributes, 
	                                  IntPtr hTemplateFile);
	   
	   [DllImport("kernel32.dll")]
	   private static extern int GetFileSize(SafeFileHandle hFile, out int lpFileSizeHigh);
	    
	   private bool disposed = false;
	   private SafeFileHandle safeHandle; 
	   private long bufferSize;
	   private int upperWord;
	   
	   public DisposableStreamResource(string filename)
	   {
	      if (filename == null)
	         throw new ArgumentNullException("The filename cannot be null.");
	      else if (filename == "")
	         throw new ArgumentException("The filename cannot be an empty string.");
	            
	      IntPtr handle = CreateFile(filename, GENERIC_READ, FILE_SHARE_READ,
	                                 IntPtr.Zero, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL,
	                                 IntPtr.Zero);
	      if (handle != INVALID_HANDLE_VALUE)
	         safeHandle = new SafeFileHandle(handle, true);
	      else
	         throw new FileNotFoundException(String.Format("Cannot open '{0}'", filename));
	      
	      bufferSize = GetFileSize(safeHandle, out upperWord); 
	      if (bufferSize == INVALID_FILE_SIZE)
	         bufferSize = -1;
	      else if (upperWord > 0) 
	         bufferSize = (((long)upperWord) << 32) + bufferSize;
	   }
	   
	   public long Size 
	   { get { return bufferSize; } }
	
	   public void Dispose()
	   {
	      Dispose(true);
	      GC.SuppressFinalize(this);
	   }           
	
	   protected virtual void Dispose(bool disposing)
	   {
	      if (disposed) return;
	
	      if (disposing)
	         safeHandle.Dispose();
	      
	      
	      disposed = true;
	   }  
	}

snippet constructorbuilder_attributes_4

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ConstructorBuilder_Attributes_4/constructorbuilder_attributes_4.cs

	
	/* The following program demonstrates the 'AddDeclarativeSecurity',
	   'DefineParameter' methods, and  'Attributes', 'DeclaringType' properties
	   of the ConstructorBuilder class. Create the assembly in the current domain
	   with dynamic module in the assembly. Constructor  builder is used in
	   conjunction with the 'TypeBuilder' class to create constructor at run time.
	   Add declarative security to the constructor. Display the 'Attributes',
	   'DeclaringType' and 'DefineParameter'.
	*/
	
	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Security.Permissions;
	using System.Security;
	
	internal class MyConstructorBuilder
	{
	   Type myType1;
	   ModuleBuilder myModuleBuilder=null;
	   AssemblyBuilder myAssemblyBuilder = null;
	
	   internal MyConstructorBuilder()
	   {
	      MethodBuilder myMethodBuilder=null;
	
	      AppDomain myCurrentDomain = AppDomain.CurrentDomain;
	      AssemblyName myAssemblyName = new AssemblyName();
	      myAssemblyName.Name = "TempAssembly";
	      myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly
	         (myAssemblyName, AssemblyBuilderAccess.RunAndSave);
	      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule("TempModule");
	      FieldInfo myFieldInfo =
	         myModuleBuilder.DefineUninitializedData("myField",2,FieldAttributes.Public);
	      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType("TempClass",TypeAttributes.Public);
	      FieldBuilder myGreetingField = myTypeBuilder.DefineField("Greeting",
	         typeof(String), FieldAttributes.Public);
	      Type[] myConstructorArgs = { typeof(String) };
	      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(
	         MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);
	      PermissionSet myPset = new PermissionSet(PermissionState.Unrestricted);
	      Console.WriteLine("Adding declarative security to the constructor.....");
	      Console.WriteLine("The Security action to be taken is \"DENY\" and" +
	         " Permission set is \"UNRESTRICTED\".");
	      myConstructor.AddDeclarativeSecurity(SecurityAction.Deny,myPset);
	      MethodAttributes myMethodAttributes = myConstructor.Attributes;
	      Type myAttributeType = typeof(MethodAttributes);
	      int myAttribValue = (int) myMethodAttributes;
	      if(! myAttributeType.IsEnum)
	      {
	         Console.WriteLine("This is not an Enum");
	      }
	      FieldInfo[] myFieldInfo1 = myAttributeType.GetFields(BindingFlags.Public | BindingFlags.Static);
	      Console.WriteLine("The Field info names of the Attributes for the constructor are:");
	      for (int i = 0; i < myFieldInfo1.Length; i++)
	      {
	         int myFieldValue = (Int32)myFieldInfo1[i].GetValue(null);
	         if ((myFieldValue & myAttribValue) == myFieldValue)
	         {
	            Console.WriteLine("   " + myFieldInfo1[i].Name);
	         }
	      }
	
	      Type myType2 = myConstructor.DeclaringType;
	      Console.WriteLine("The declaring type is : "+myType2.ToString());
	      ParameterBuilder myParameterBuilder1 =
	         myConstructor.DefineParameter(1,  ParameterAttributes.Out, "My Parameter Name1");
	      Console.WriteLine("The name of the parameter is : " +
	         myParameterBuilder1.Name);
	      if(myParameterBuilder1.IsIn)
	         Console.WriteLine(myParameterBuilder1.Name +" is Input parameter.");
	      else
	         Console.WriteLine(myParameterBuilder1.Name +" is not Input Parameter.");
	      ParameterBuilder myParameterBuilder2 =
	         myConstructor.DefineParameter(1, ParameterAttributes.In, "My Parameter Name2");
	      Console.WriteLine("The Parameter name is : " +
	         myParameterBuilder2.Name);
	      if(myParameterBuilder2.IsIn)
	         Console.WriteLine(myParameterBuilder2.Name +" is Input parameter.");
	      else
	         Console.WriteLine(myParameterBuilder2.Name + " is not Input Parameter.");
	      ILGenerator myILGenerator3 = myConstructor.GetILGenerator();
	      myILGenerator3.Emit(OpCodes.Ldarg_0);
	      ConstructorInfo myConstructorInfo = typeof(Object).GetConstructor(new Type[0]);
	      myILGenerator3.Emit(OpCodes.Call, myConstructorInfo);
	      myILGenerator3.Emit(OpCodes.Ldarg_0);
	      myILGenerator3.Emit(OpCodes.Ldarg_1);
	      myILGenerator3.Emit(OpCodes.Stfld, myGreetingField);
	      myILGenerator3.Emit(OpCodes.Ret);
	      myMethodBuilder = myTypeBuilder.DefineMethod
	            ("HelloWorld",MethodAttributes.Public,null,null);
	      ILGenerator myILGenerator2 = myMethodBuilder.GetILGenerator();
	      myILGenerator2.EmitWriteLine("Hello World from global");
	      myILGenerator2.Emit(OpCodes.Ret);
	      myModuleBuilder.CreateGlobalFunctions();
	      myType1 = myTypeBuilder.CreateType();
	   }
	   internal Type MyTypeProperty
	   {
	      get
	      {
	         return this.myType1;
	      }
	   }
	
	   [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	   public static void Main()
	   {
	      MyConstructorBuilder myConstructorBuilder = new MyConstructorBuilder();
	      Type myType1 = myConstructorBuilder.MyTypeProperty;
	      if (null != myType1)
	      {
	         Console.WriteLine("Instantiating the new type...");
	         Object[] myObject = {"hello"};
	         object myObject1 = Activator.CreateInstance(myType1,myObject,null);
	         MethodInfo myMethodInfo = myType1.GetMethod("HelloWorld");
	         if (null != myMethodInfo)
	         {
	            Console.WriteLine("Invoking dynamically created HelloWorld method...");
	            myMethodInfo.Invoke(myObject1, null);
	         }
	         else
	         {
	            Console.WriteLine("Could not locate HelloWorld method");
	         }
	      }
	      else
	      {
	         Console.WriteLine("Could not access Type.");
	      }
	   }
	} 
snippet typebuilder_getfield_generic

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_GetField_Generic/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public class Sample<T>
	{
	  public T Field;
	  public static void GM<U>(U val)
	  {
	    Sample<U> s = new Sample<U>();
	    s.Field = val;
	    Console.WriteLine(s.Field);
	  }
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        AppDomain myDomain = AppDomain.CurrentDomain;
	        AssemblyName myAsmName = 
	            new AssemblyName("TypeBuilderGetFieldExample");
	        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(
	            myAsmName, AssemblyBuilderAccess.Save);
	        ModuleBuilder myModule = myAssembly.DefineDynamicModule(
	            myAsmName.Name, 
	            myAsmName.Name + ".exe");
	
	        TypeBuilder myType = myModule.DefineType("Sample", 
	            TypeAttributes.Class | TypeAttributes.Public);
	
	        string[] typeParamNames = {"T"};  
	        GenericTypeParameterBuilder[] typeParams = 
	            myType.DefineGenericParameters(typeParamNames);
	
	        ConstructorBuilder ctor = myType.DefineDefaultConstructor(
	            MethodAttributes.PrivateScope | MethodAttributes.Public |
	            MethodAttributes.HideBySig | MethodAttributes.SpecialName |
	            MethodAttributes.RTSpecialName);
	
	        FieldBuilder myField = myType.DefineField("Field", 
	            typeParams[0],
	            FieldAttributes.Public);
	
	        MethodBuilder genMethod = myType.DefineMethod("GM", 
	            MethodAttributes.Public | MethodAttributes.Static);
	        string[] methodParamNames = {"U"};
	        GenericTypeParameterBuilder[] methodParams = 
	            genMethod.DefineGenericParameters(methodParamNames);
	        
	        genMethod.SetSignature(null, null, null, 
	            new Type[] { methodParams[0] }, null, null);
	
	        ILGenerator ilg = genMethod.GetILGenerator();
	        Type SampleOfU = myType.MakeGenericType( methodParams[0] );
	        ilg.DeclareLocal(SampleOfU);
	        ConstructorInfo ctorOfU = TypeBuilder.GetConstructor(
	            SampleOfU, ctor);
	        ilg.Emit(OpCodes.Newobj, ctorOfU);
	        ilg.Emit(OpCodes.Stloc_0); 
	        ilg.Emit(OpCodes.Ldloc_0); 
	        ilg.Emit(OpCodes.Ldarg_0);
	        FieldInfo FieldOfU = TypeBuilder.GetField(
	            SampleOfU, myField);
	        ilg.Emit(OpCodes.Stfld, FieldOfU);
	        ilg.Emit(OpCodes.Ldloc_0);
	        ilg.Emit(OpCodes.Ldfld, FieldOfU);
	        ilg.Emit(OpCodes.Box, methodParams[0]);
	        MethodInfo writeLineObj = 
	            typeof(Console).GetMethod("WriteLine", 
	                new Type[] { typeof(object) });
	        ilg.EmitCall(OpCodes.Call, writeLineObj, null);
	        ilg.Emit(OpCodes.Ret);
	
	        TypeBuilder dummy = myModule.DefineType("Dummy", 
	            TypeAttributes.Class | TypeAttributes.NotPublic);
	        MethodBuilder entryPoint = dummy.DefineMethod("Main", 
	            MethodAttributes.Public | MethodAttributes.Static,
	            null, null);
	        ilg = entryPoint.GetILGenerator();
	        Type SampleOfInt = 
	            myType.MakeGenericType( typeof(int) );
	        MethodInfo SampleOfIntGM = TypeBuilder.GetMethod(SampleOfInt, 
	            genMethod);
	        MethodInfo GMOfString = 
	            SampleOfIntGM.MakeGenericMethod( typeof(string) );
	        ilg.Emit(OpCodes.Ldstr, "Hello, world!");
	        ilg.EmitCall(OpCodes.Call, GMOfString, null);
	        ilg.Emit(OpCodes.Ret);
	
	        myType.CreateType();
	        dummy.CreateType();
	        myAssembly.SetEntryPoint(entryPoint);
	        myAssembly.Save(myAsmName.Name + ".exe");
	
	        Console.WriteLine(myAsmName.Name + ".exe has been saved.");
	    }
	}
snippet projectn_reflection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/method1.cs

	using System;
	using System.Globalization;
	using System.Reflection;
	
	namespace ContosoApplication
	{
	    public sealed class Example
	    {
	       public void Execute()
	       {
	          TextBlock outputBlock = MainPage.outputBlock;
	
	          string testString = "A Test String";
	          outputBlock.Text += String.Format("'{0}'\n",
	                               Stringify.ConvertToString(new object[] { testString, 0, 0 }));
	
	          CultureInfo fr = new CultureInfo("fr-FR");
	          int s = 1603;
	          int b = 2;
	          outputBlock.Text += String.Format("'{0}'\n",
	                              Stringify.ConvertToString(new object[] { s, b }));
	
	           outputBlock.Text += String.Format("'{0}'\n",
	                              Stringify.ConvertToString(new object[] { s, "C2", fr }));
	
	         string f = "D";
	          outputBlock.Text += String.Format("'{0}'\n",
	                              Stringify.ConvertToString(new object[] { s, f }));
	
	          byte byt = 214;
	          b = 16;
	
	          outputBlock.Text += String.Format("'{0}'\n",
	                              Stringify.ConvertToString(new object[] { byt, b }));
	
	          outputBlock.Text += String.Format("'{0}'\n",
	                              Stringify.ConvertToString(new object[] { byt, "D" }));
	
	          double pi = Math.PI;
	          outputBlock.Text += String.Format("'{0}'\n",
	                              Stringify.ConvertToString(new object[] { pi, "F7" }));
	
	          float fl = 1.603e-22f;
	          outputBlock.Text += String.Format("'{0}'\n",
	                              Stringify.ConvertToString(new object[] { fl, "e2" }));
	
	           f = "C";
	          long lng = Int64.MaxValue;
	          outputBlock.Text += String.Format("'{0}'\n", 
	                               Stringify.ConvertToString(new object[] { lng, f }));
	
	          outputBlock.Text += String.Format("'{0}'\n", 
	                               Stringify.ConvertToString(new object[] { lng, "N1", fr }));
	
	          Person p = new Person();
	          outputBlock.Text += String.Format("'{0}'\n", 
	                               Stringify.ConvertToString(new object[] { p }));
	
	          DateTime date = DateTime.Now;
	          outputBlock.Text += String.Format("'{0}'\n", 
	                               Stringify.ConvertToString(new object[] { date, "F" }));
	
	          outputBlock.Text += String.Format("'{0}'\n", 
	                               Stringify.ConvertToString(new object[] { date, "F", fr }));
	
	        }
	    }
	
	    public class Person { }
	
	    public class Stringify
	    {
	       public static string ConvertToString(Object[] obj)
	       {
	          if (obj == null)
	             throw new NullReferenceException("The obj parameter cannot be null.");
	
	          if (obj.Length == 0) return String.Empty;
	
	          if (obj[0].GetType() == typeof(String))
	             return obj[0] as string;
	
	          if (obj.Length == 1) return obj[0].ToString();
	
	          if (obj.Length > 3)
	             throw new ArgumentOutOfRangeException("The array can have from zero to three elements.");
	
	          string retval = "";
	
	
	          if (obj[1].GetType() == typeof(String)) {
	             Type t = obj[0].GetType();
	             if (obj.Length == 2)
	             {
	                MethodInfo m = t.GetRuntimeMethod("ToString", new Type[] { typeof(String) });
	                retval = m.Invoke(obj[0], new object[] { obj[1] }).ToString();
	             }
	             else
	             {
	                 MethodInfo m = t.GetRuntimeMethod("ToString", new Type[] { typeof(String), obj[2].GetType() });
	                 retval = m.Invoke(obj[0], new object[] { obj[1], obj[2] }).ToString();
	             }
	          }   
	          else if (obj[1] is IFormatProvider)
	          {
	              Type t = obj[0].GetType();
	              MethodInfo m = t.GetRuntimeMethod("ToString", new Type[] { obj[1].GetType() } );
	              retval = m.Invoke(obj[0], new object[] { obj[1] }).ToString();
	          }
	          else {
	              Type t = typeof(Convert);
	              MethodInfo m = t.GetRuntimeMethod("ToString", new Type[] { obj[0].GetType(), obj[1].GetType() } );
	              retval = m.Invoke(null, obj).ToString();
	          }
	          return retval;
	       }
	    }
	
	public class Page
	{ }
	
	public class MainPage : Page
	{
	   static MainPage()
	   {
	      outputBlock = new TextBlock();
	      outputBlock.Text = "";
	   }
	
	   internal static TextBlock outputBlock;
	}
	
	internal class TextBlock
	{
	   private String s;
	   
	   public String Text 
	   {
	      get { return s; }
	      set { s = value; }
	   }
	}
	   
	
	}

snippet codedomhelloworldsample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDomHelloWorldSample/program.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.IO;
	using System.Text.RegularExpressions;
	
	namespace BasicCodeDomApp
	{
	    class Program
	    {
	        static string providerName = "cs";
	        static string sourceFileName = "test.cs";
	        static void Main(string[] args)
	        {
	            CodeDomProvider provider = 
	                CodeDomProvider.CreateProvider(providerName);
	
	            LogMessage("Building CodeDOM graph...");
	
	            CodeCompileUnit cu = new CodeCompileUnit();
	
	            cu = BuildHelloWorldGraph();
	
	            StreamWriter sourceFile = new StreamWriter(sourceFileName);
	            provider.GenerateCodeFromCompileUnit(cu, sourceFile, null);
	            sourceFile.Close();
	
	            CompilerParameters opt = new CompilerParameters(new string[]{
	                                      "System.dll" });
	            opt.GenerateExecutable = true;
	            opt.OutputAssembly = "HelloWorld.exe";
	            opt.TreatWarningsAsErrors = true;
	            opt.IncludeDebugInformation = true;
	            opt.GenerateInMemory = true;
	            opt.CompilerOptions = "/doc:HelloWorldDoc.xml";
	
	            CompilerResults results;
	
	            LogMessage("Compiling with " + providerName);
	            results = provider.CompileAssemblyFromFile(opt, sourceFileName);
	
	            OutputResults(results);
	            if (results.NativeCompilerReturnValue != 0)
	            {
	                LogMessage("");
	                LogMessage("Compilation failed.");
	            }
	            else
	            {
	                LogMessage("");
	                LogMessage("Demo completed successfully.");
	            }
	            File.Delete(sourceFileName);
	        }
	
	        public static CodeCompileUnit BuildHelloWorldGraph()
	        {
	            CodeCompileUnit compileUnit = new CodeCompileUnit();
	
	            CodeNamespace samples = new CodeNamespace("Samples");
	            compileUnit.Namespaces.Add(samples);
	
	            samples.Imports.Add(new CodeNamespaceImport("System"));
	
	            CodeTypeDeclaration class1 = new CodeTypeDeclaration("Class1");
	
	            class1.Comments.Add(new CodeCommentStatement("<summary>", true));
	            class1.Comments.Add(new CodeCommentStatement(
	                "Create a Hello World application.", true));
	            class1.Comments.Add(new CodeCommentStatement(
	                @"<seealso cref=" + '"' + "Class1.Main" + '"' + "/>", true));
	            class1.Comments.Add(new CodeCommentStatement("</summary>", true));
	
	            samples.Types.Add(class1);
	
	            CodeEntryPointMethod start = new CodeEntryPointMethod();
	            start.Comments.Add(new CodeCommentStatement("<summary>", true));
	            start.Comments.Add(new CodeCommentStatement(
	                "Main method for HelloWorld application.", true));
	            start.Comments.Add(new CodeCommentStatement(
	                @"<para>Add a new paragraph to the description.</para>", true));
	            start.Comments.Add(new CodeCommentStatement("</summary>", true));
	
	            CodeTypeReferenceExpression csSystemConsoleType = 
	                new CodeTypeReferenceExpression("System.Console");
	
	            CodeMethodInvokeExpression cs1 = new CodeMethodInvokeExpression(
	                csSystemConsoleType, "WriteLine",
	                new CodePrimitiveExpression("Hello World!"));
	
	            start.Statements.Add(cs1);
	
	            CodeMethodInvokeExpression cs2 = new CodeMethodInvokeExpression(
	                csSystemConsoleType, "WriteLine", new CodePrimitiveExpression(
	                "Press the ENTER key to continue."));
	
	            start.Statements.Add(cs2);
	
	            CodeMethodInvokeExpression csReadLine = 
	                new CodeMethodInvokeExpression(csSystemConsoleType, "ReadLine");
	
	            start.Statements.Add(csReadLine);
	
	            class1.Members.Add(start);
	
	            return compileUnit;
	        }
	        static void LogMessage(string text)
	        {
	            Console.WriteLine(text);
	        }
	
	        static void OutputResults(CompilerResults results)
	        {
	            LogMessage("NativeCompilerReturnValue=" +
	                results.NativeCompilerReturnValue.ToString());
	            foreach (string s in results.Output)
	            {
	                LogMessage(s);
	            }
	        }
	    }
	}

snippet addinp1host

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInP1Host/MathHost1.cs

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.AddIn.Hosting;
	using CalcHVAs;
	
	namespace MathHost
	{
	    class Program
	    {
	        static void Main()
	        {
	            String addInRoot = Environment.CurrentDirectory + "\\Pipeline";
	            
	            string[] warnings = AddInStore.Update(addInRoot);
	            foreach (string warning in warnings)
	            {
	                Console.WriteLine(warning);
	            }
	            
	            Collection<AddInToken> tokens = 
	                AddInStore.FindAddIns(typeof(ICalculator), addInRoot);
	            
	            AddInToken calcToken = ChooseCalculator(tokens);
	
	            ICalculator calc = 
	                calcToken.Activate<ICalculator>(AddInSecurityLevel.Internet);
	            
	            RunCalculator(calc);
	        }
	
	        private static AddInToken ChooseCalculator(Collection<AddInToken> tokens)
	        {
	            if (tokens.Count == 0)
	            {
	                Console.WriteLine("No calculators are available");
	                return null;
	            }
	            Console.WriteLine("Available Calculators: ");
	            int tokNumber = 1;
	            foreach (AddInToken tok in tokens)
	            {
	                Console.WriteLine(String.Format("\t[{0}]: {1} - {2}\n\t{3}\n\t\t {4}\n\t\t {5} - {6}",
	                    tokNumber.ToString(),
	                    tok.Name,
	                    tok.AddInFullName,
	                    tok.AssemblyName,
	                    tok.Description,
	                    tok.Version,
	                    tok.Publisher));
	                tokNumber++;
	            }
	            Console.WriteLine("Which calculator do you want to use?");
	            String line = Console.ReadLine();
	            int selection;
	            if (Int32.TryParse(line, out selection))
	            {
	                if (selection <= tokens.Count)
	                {
	                    return tokens[selection - 1];
	                }
	            }
	            Console.WriteLine("Invalid selection: {0}. Please choose again.", line);
	            return ChooseCalculator(tokens);
	        }
	
	        private static void RunCalculator(ICalculator calc)
	        {
	            
	            if (calc == null)
	            {
	                Console.ReadLine();
	            }
	            Console.WriteLine("Available operations: +, -, *, /");
	            Console.WriteLine("Request a calculation , such as: 2 + 2");
	            Console.WriteLine("Type \"exit\" to exit");
	            String line = Console.ReadLine();
	            while (!line.Equals("exit"))
	            {
	                try
	                {
	                    Parser c = new Parser(line);
	                    switch (c.Action)
	                    {
	                        case "+":
	                            Console.WriteLine(calc.Add(c.A, c.B));
	                            break;
	                        case "-":
	                            Console.WriteLine(calc.Subtract(c.A, c.B));
	                            break;
	                        case "*":
	                            Console.WriteLine(calc.Multiply(c.A, c.B));
	                            break;
	                        case "/":
	                            Console.WriteLine(calc.Divide(c.A, c.B));
	                            break;
	                        default:
	                            Console.WriteLine("{0} is an invalid command. Valid commands are +,-,*,/", c.Action);
	                            break;
	                    }
	                }
	                catch
	                {
	                    Console.WriteLine("Invalid command: {0}. Commands must be formated: [number] [operation] [number]", line);
	                }
	                
	                line = Console.ReadLine();
	            }
	        }
	    }
	
	    internal class Parser
	    {
	        double a;
	        double b;
	        string action;
	
	        internal Parser(string line)
	        {
	            string[] parts = line.Split(' ');
	            a = double.Parse(parts[0]);
	            action = parts[1];
	            b = double.Parse(parts[2]);
	        }
	
	        public double A
	        {
	            get { return a; }
	        }
	
	        public double B
	        {
	            get { return b; }
	        }
	
	        public string Action
	        {
	            get { return action; }
	        }
	    }
	}
snippet array_findetal

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Array_FindEtAl/source.cs

	using System;
	
	public class DinoDiscoverySet
	{
	    public static void Main()
	    {
	        string[] dinosaurs =
	        {
	            "Compsognathus", "Amargasaurus", "Oviraptor",
	            "Velociraptor",  "Deinonychus",  "Dilophosaurus",
	            "Gallimimus",    "Triceratops"
	        };
	
	        DinoDiscoverySet GoMesozoic = new DinoDiscoverySet(dinosaurs);
	        
	        GoMesozoic.DiscoverAll();
	        GoMesozoic.DiscoverByEnding("saurus");
	    }
	
	    private string[] dinosaurs;
	
	    public DinoDiscoverySet(string[] items)
	    {
	        dinosaurs = items;
	    }
	
	    public void DiscoverAll()
	    {
	        Console.WriteLine();
	        foreach(string dinosaur in dinosaurs)
	        {
	            Console.WriteLine(dinosaur);
	        }
	    }
	
	    public void DiscoverByEnding(string Ending)
	    {
	        Predicate<string> dinoType;
	
	        switch (Ending.ToLower())
	        {
	            case "raptor":
	                dinoType = EndsWithRaptor;
	                break;
	            case "tops":
	                dinoType = EndsWithTops;
	                break;
	            case "saurus":
	            default:
	                dinoType = EndsWithSaurus;
	                break;
	        }
	        Console.WriteLine(
	            "\nArray.Exists(dinosaurs, \"{0}\"): {1}",
	            Ending,
	            Array.Exists(dinosaurs, dinoType));
	
	        Console.WriteLine(
	            "\nArray.TrueForAll(dinosaurs, \"{0}\"): {1}",
	            Ending,
	            Array.TrueForAll(dinosaurs, dinoType));
	
	        Console.WriteLine(
	            "\nArray.Find(dinosaurs, \"{0}\"): {1}",
	            Ending,
	            Array.Find(dinosaurs, dinoType));
	
	        Console.WriteLine(
	            "\nArray.FindLast(dinosaurs, \"{0}\"): {1}",
	            Ending,
	            Array.FindLast(dinosaurs, dinoType));
	
	        Console.WriteLine(
	            "\nArray.FindAll(dinosaurs, \"{0}\"):", Ending);
	
	        string[] subArray =
	            Array.FindAll(dinosaurs, dinoType);
	
	        foreach(string dinosaur in subArray)
	        {
	            Console.WriteLine(dinosaur);
	        }
	    }
	
	    private bool EndsWithSaurus(string s)
	    {
	        if ((s.Length > 5) &&
	            (s.Substring(s.Length - 6).ToLower() == "saurus"))
	        {
	            return true;
	        }
	        else
	        {
	            return false;
	        }
	    }
	
	    private bool EndsWithRaptor(String s)
	    {
	        if ((s.Length > 5) &&
	            (s.Substring(s.Length - 6).ToLower() == "raptor"))
	        {
	            return true;
	        }
	        else
	        {
	            return false;
	        }
	    }
	
	    private bool EndsWithTops(String s)
	    {
	        if ((s.Length > 3) &&
	            (s.Substring(s.Length - 4).ToLower() == "tops"))
	        {
	            return true;
	        }
	        else
	        {
	            return false;
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Compsognathus
	Amargasaurus
	Oviraptor
	Velociraptor
	Deinonychus
	Dilophosaurus
	Gallimimus
	Triceratops
	
	Array.Exists(dinosaurs, "saurus"): True
	
	Array.TrueForAll(dinosaurs, "saurus"): False
	
	Array.Find(dinosaurs, "saurus"): Amargasaurus
	
	Array.FindLast(dinosaurs, "saurus"): Dilophosaurus
	
	Array.FindAll(dinosaurs, "saurus"):
	Amargasaurus
	Dilophosaurus
	*/
	
	

snippet definemanifestresource

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DefineManifestResource/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.IO;
	
	public class Example
	{
	    public static void Main()
	    {
	        AssemblyName asmName = 
	            new AssemblyName("EmittedManifestResourceAssembly");
	        AssemblyBuilder asmBuilder =
	            AppDomain.CurrentDomain.DefineDynamicAssembly(
	                asmName,
	                AssemblyBuilderAccess.RunAndSave
	            ); 
	        ModuleBuilder modBuilder = asmBuilder.DefineDynamicModule(
	            asmName.Name,
	            asmName.Name + ".exe"
	        );
	
	        MemoryStream ms = new MemoryStream(1024);
	
	        modBuilder.DefineManifestResource(
	            "MyBinaryData",
	            ms,
	            ResourceAttributes.Public
	        );
	
	        TypeBuilder tb = modBuilder.DefineType("Example");
	        MethodBuilder main = tb.DefineMethod("Main", 
	            MethodAttributes.Public | MethodAttributes.Static
	        );
	
	        Type asm = typeof(Assembly);
	        Type str = typeof(Stream);
	
	        MethodInfo getEx = asm.GetMethod("GetExecutingAssembly");
	        MethodInfo getMRS = asm.GetMethod(
	            "GetManifestResourceStream", 
	            new Type[] {typeof(string)}
	        );
	        MethodInfo rByte = str.GetMethod("ReadByte");
	        MethodInfo write = typeof(Console).GetMethod(
	            "WriteLine", 
	            new Type[] {typeof(int)}
	        );
	
	        ILGenerator ilg = main.GetILGenerator();
	
	        LocalBuilder s = ilg.DeclareLocal(str);
	        LocalBuilder b = ilg.DeclareLocal(typeof(int));
	
	        ilg.EmitCall(OpCodes.Call, getEx, null);
	        ilg.Emit(OpCodes.Ldstr, "MyBinaryData");
	        ilg.EmitCall(OpCodes.Callvirt, getMRS, null);
	
	        ilg.Emit(OpCodes.Stloc_0);
	
	        Label loop = ilg.DefineLabel();
	        ilg.MarkLabel(loop);
	
	        ilg.Emit(OpCodes.Ldloc_0);
	        ilg.EmitCall(OpCodes.Callvirt, rByte, null);
	        ilg.Emit(OpCodes.Stloc_1);
	
	        ilg.Emit(OpCodes.Ldloc_1);
	        ilg.EmitCall(OpCodes.Call, write, null);
	
	        ilg.Emit(OpCodes.Ldloc_1);
	        ilg.Emit(OpCodes.Ldc_I4_M1);
	        ilg.Emit(OpCodes.Ceq);
	        ilg.Emit(OpCodes.Brfalse_S, loop);
	
	        ilg.Emit(OpCodes.Ret);
	
	        tb.CreateType();
	
	        ms.Write(new byte[] { 105, 36, 74, 97, 109 }, 0, 5);
	        ms.SetLength(5);
	
	        asmBuilder.SetEntryPoint(main);
		asmBuilder.Save(asmName.Name + ".exe");
	
	        Console.WriteLine("Now run EmittedManifestResourceAssembly.exe");
	    }
	}
	
	/* This code example doesn't produce any output. The assembly it
	   emits, EmittedManifestResourceAssembly.exe, produces the following
	   output:
	
	105
	36
	74
	97
	109
	-1
	
	 */
snippet memoryfailpoint

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/program.cs

	using System;
	using System.Runtime;
	using System.IO;
	using System.Threading;
	using System.Collections.Generic;
	using System.Collections;
	
	class MemoryFailPointExample
	{
	    private const uint chunkSize = 64 << 20;
	    private const uint numWorkItems = 1 + ((1U << 31) / chunkSize);
	    static Queue workQueue = new Queue(50);
	
	    private static int EstimateMemoryUsageInMB()
	    {
	        int memUsageInMB = 0;
	
	        long memBefore = GC.GetTotalMemory(true);
	        int numGen0Collections = GC.CollectionCount(0);
	        ThreadMethod();
	        long memAfter = GC.GetTotalMemory(false);
	        Console.WriteLine("Did a GC occur while measuring?  {0}", numGen0Collections == GC.CollectionCount(0));
	        long memUsage = (memAfter - memBefore);
	        if (memUsage < 0)
	        {
	            Console.WriteLine("GC's occurred while measuring memory usage.  Try measuring again.");
	            memUsage = 1 << 20;
	        }
	
	        memUsageInMB = (int)(1 + (memUsage >> 20));
	        Console.WriteLine("Memory usage estimate: {0} bytes, rounded to {1} MB", memUsage, memUsageInMB);
	        return memUsageInMB;
	    }
	
	    static void Main()
	    {
	        Console.WriteLine("Attempts to allocate more than 2 GB of memory across worker threads.");
	        int memUsageInMB = EstimateMemoryUsageInMB();
	
	        Thread[] threads = new Thread[numWorkItems];
	        int n = 0;
	        for (n = 0; n < numWorkItems; n++)
	            workQueue.Enqueue(n);
	        while (workQueue.Count > 0)
	        {
	            Console.WriteLine(" GC heap (live + garbage): {0} MB", GC.GetTotalMemory(false) >> 20);
	            MemoryFailPoint memFailPoint = null;
	            try
	            {
	                memFailPoint = new MemoryFailPoint(memUsageInMB);
	                n = (int)workQueue.Dequeue();
	                threads[n] =
	                    new Thread(new ParameterizedThreadStart(ThreadMethod));
	                WorkerState state = new WorkerState(n, memFailPoint);
	                threads[n].Start(state);
	                Thread.Sleep(10);
	            }
	            catch (InsufficientMemoryException e)
	            {
	                Console.WriteLine("Expected InsufficientMemoryException thrown.  Message: " + e.Message);
	                Thread.Sleep(1000);
	            }
	        }
	
	        Console.WriteLine("WorkQueue is empty - blocking to ensure all threads quit (each thread sleeps for 10 seconds)");
	        foreach (Thread t in threads)
	            t.Join();
	        Console.WriteLine("All worker threads are finished - exiting application.");
	    }
	
	    static void ThreadMethod()
	    {
	        byte[] bytes = new byte[chunkSize];
	    }
	
	    internal class WorkerState
	    {
	        internal int _threadNumber;
	        internal MemoryFailPoint _memFailPoint;
	
	        internal WorkerState(int threadNumber, MemoryFailPoint memoryFailPoint)
	        {
	            _threadNumber = threadNumber;
	            _memFailPoint = memoryFailPoint;
	        }
	
	        internal int ThreadNumber
	        {
	            get { return _threadNumber; }
	        }
	
	        internal MemoryFailPoint MemoryFailPoint
	        {
	            get { return _memFailPoint; }
	        }
	    }
	
	    static void ThreadMethod(Object o)
	    {
	        WorkerState state = (WorkerState)o;
	        Console.WriteLine("Executing ThreadMethod, " +
	            "thread number {0}.", state.ThreadNumber);
	        byte[] bytes = null;
	        try
	        {
	            bytes = new byte[chunkSize];
	            state.MemoryFailPoint.Dispose();
	        }
	        catch (OutOfMemoryException oom)
	        {
	            Console.Beep();
	            Console.WriteLine("Unexpected OutOfMemory exception thrown: " + oom);
	        }
	
	
	        Thread.Sleep(10000);
	
	        GC.KeepAlive(bytes);
	        Console.WriteLine("Thread {0} is finished.", state.ThreadNumber);
	
	    }
	}
	
	

snippet codememberfieldinit

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeMemberFieldInit/program.cs

	using System;
	using System.Reflection;
	using System.IO;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using Microsoft.CSharp;
	
	namespace SampleCodeDom
	{
	    class Sample
	    {
	        CodeCompileUnit targetUnit;
	
	        CodeTypeDeclaration targetClass;
	
	        private const string outputFileName = "SampleCode.cs";
	
	        public Sample()
	        {
	            targetUnit = new CodeCompileUnit();
	            CodeNamespace samples = new CodeNamespace("CodeDOMSample");
	            samples.Imports.Add(new CodeNamespaceImport("System"));
	            targetClass = new CodeTypeDeclaration("CodeDOMCreatedClass");
	            targetClass.IsClass = true;
	            targetClass.TypeAttributes =
	                TypeAttributes.Public | TypeAttributes.Sealed;
	            samples.Types.Add(targetClass);
	            targetUnit.Namespaces.Add(samples);
	        }
	
	        public void AddField()
	        {
	
	            CodeMemberField testField = new CodeMemberField();
	            testField.Name = "today";
	            testField.Type = new CodeTypeReference(typeof(System.DateTime));
	            testField.Attributes = MemberAttributes.Private | MemberAttributes.Static;
	            testField.InitExpression =
	                new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("System.DateTime"), "Today");
	
	            targetClass.Members.Add(testField);
	
	        }
	
	        public void AddConstructor()
	        {
	            CodeConstructor constructor = new CodeConstructor();
	            constructor.Attributes =
	                MemberAttributes.Public | MemberAttributes.Final;
	
	            targetClass.Members.Add(constructor);
	        }
	
	        public void AddEntryPoint()
	        {
	            CodeEntryPointMethod start = new CodeEntryPointMethod();
	            CodeObjectCreateExpression objectCreate =
	                new CodeObjectCreateExpression(
	                new CodeTypeReference("CodeDOMCreatedClass"));
	            start.Statements.Add(new CodeVariableDeclarationStatement(
	                new CodeTypeReference("CodeDOMCreatedClass"), "testClass",
	                objectCreate));
	
	            CodeMethodInvokeExpression toStringInvoke =
	                new CodeMethodInvokeExpression(
	                new CodeVariableReferenceExpression("today"), "ToString");
	
	            start.Statements.Add(new CodeMethodInvokeExpression(
	                new CodeTypeReferenceExpression("System.Console"),
	                "WriteLine", toStringInvoke));
	            targetClass.Members.Add(start);
	        }
	        public void GenerateCSharpCode(string fileName)
	        {
	            CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
	            CodeGeneratorOptions options = new CodeGeneratorOptions();
	            options.BracingStyle = "C";
	            using (StreamWriter sourceWriter = new StreamWriter(fileName))
	            {
	                provider.GenerateCodeFromCompileUnit(
	                    targetUnit, sourceWriter, options);
	            }
	        }
	
	        static void Main()
	        {
	            Sample sample = new Sample();
	            sample.AddField();
	            sample.AddConstructor();
	            sample.AddEntryPoint();
	            sample.GenerateCSharpCode(outputFileName);
	        }
	    }
	}
	
	
	
	
	
snippet obfuscationattribute

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ObfuscationAttribute/source.cs

	using System;
	using System.Reflection;
	
	[assembly:ObfuscateAssemblyAttribute(false)]
	
	public class Type1
	{
	
	    [ObfuscationAttribute(Exclude=true)]
	    public void MethodA() {}
	
	    public void MethodB() {}
	}
	
	[ObfuscationAttribute(Exclude=true, ApplyToMembers=false)]
	public class Type2
	{
	
	    [ObfuscationAttribute(Exclude=false, Feature="default", 
	        StripAfterObfuscation=false)]
	    public void MethodA() {}
	
	    public void MethodB() {}
	
	}
	
	internal class Test
	{
	
	    public static void Main()
	    {
	
	        Assembly assem = typeof(Test).Assembly;
	        object[] assemAttrs = assem.GetCustomAttributes(
	            typeof(ObfuscateAssemblyAttribute), false);
	
	        foreach( Attribute a in assemAttrs )
	        {
	            ShowObfuscateAssembly((ObfuscateAssemblyAttribute) a);
	        }
	
	        foreach( Type t in assem.GetTypes() )
	        {
	            if (t.IsVisible)
	            {
	                object[] tAttrs = t.GetCustomAttributes(
	                    typeof(ObfuscationAttribute), false);
	
	                foreach( Attribute a in tAttrs )
	                {
	                    ShowObfuscation(((ObfuscationAttribute) a),
	                        t.Name);
	                }
	
	                foreach( MemberInfo m in t.GetMembers() )
	                {
	                    object[] mAttrs = m.GetCustomAttributes(
	                        typeof(ObfuscationAttribute), false);
	
	                    foreach( Attribute a in mAttrs )
	                    {
	                        ShowObfuscation(((ObfuscationAttribute) a), 
	                            t.Name + "." + m.Name);
	                    }
	                }
	            }
	        }
	    }
	
	    private static void ShowObfuscateAssembly(
	        ObfuscateAssemblyAttribute ob)
	    {
	        Console.WriteLine("\r\nObfuscateAssemblyAttribute properties:");
	        Console.WriteLine("   AssemblyIsPrivate: {0}", 
	            ob.AssemblyIsPrivate);
	        Console.WriteLine("   StripAfterObfuscation: {0}",
	            ob.StripAfterObfuscation);
	    }
	
	    private static void ShowObfuscation(
	        ObfuscationAttribute ob, string target)
	    {
	        Console.WriteLine("\r\nObfuscationAttribute properties for: {0}",
	            target);
	        Console.WriteLine("   Exclude: {0}", ob.Exclude);
	        Console.WriteLine("   Feature: {0}", ob.Feature);
	        Console.WriteLine("   StripAfterObfuscation: {0}",
	            ob.StripAfterObfuscation);
	        Console.WriteLine("   ApplyToMembers: {0}", ob.ApplyToMembers);
	    }
	}
	
	/* This code example produces the following output:
	
	ObfuscateAssemblyAttribute properties:
	   AssemblyIsPrivate: False
	   StripAfterObfuscation: True
	
	ObfuscationAttribute properties for: Type1.MethodA
	   Exclude: True
	   Feature: all
	   StripAfterObfuscation: True
	   ApplyToMembers: True
	
	ObfuscationAttribute properties for: Type2
	   Exclude: True
	   Feature: all
	   StripAfterObfuscation: True
	   ApplyToMembers: False
	
	ObfuscationAttribute properties for: Type2.MethodA
	   Exclude: False
	   Feature: default
	   StripAfterObfuscation: False
	   ApplyToMembers: True
	 */
	
	
	

snippet cryptography_xml_signature___envelope

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_Signature___Envelope/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	using System.Text;
	using System.Xml;
	
	public class SignVerifyEnvelope
	{
	
	    public static void Main(String[] args)
	    {
	       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();
	
	       try
	       {
	
	           SignXmlFile("Test.xml", "SignedExample.xml", Key);
	           Console.WriteLine("XML file signed.");
	
	           Console.WriteLine("Verifying signature...");
	
	           bool result = VerifyXmlFile("SignedExample.xml");
	
	           if (result)
	           {
	               Console.WriteLine("The XML signature is valid.");
	           }
	           else
	           {
	               Console.WriteLine("The XML signature is not valid.");
	           }
	       }
	       catch (CryptographicException e)
	       {
	           Console.WriteLine(e.Message);
	       }
	       finally
	       {
	           Key.Clear();
	       }
	   }
	
	    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)
	    {
	        if (FileName == null)
	            throw new ArgumentNullException("FileName");
	        if (SignedFileName == null)
	            throw new ArgumentNullException("SignedFileName");
	        if (Key == null)
	            throw new ArgumentNullException("Key");
	
	
	        XmlDocument doc = new XmlDocument();
	
	        doc.PreserveWhitespace = false;
	
	        doc.Load(new XmlTextReader(FileName));
	
	        SignedXml signedXml = new SignedXml(doc);
	
	        signedXml.SigningKey = Key;
	
	        Signature XMLSignature = signedXml.Signature;
	
	        Reference reference = new Reference("");
	
	        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
	        reference.AddTransform(env);
	
	        XMLSignature.SignedInfo.AddReference(reference);
	
	        KeyInfo keyInfo = new KeyInfo();
	        keyInfo.AddClause(new RSAKeyValue((RSA)Key));
	
	        XMLSignature.KeyInfo = keyInfo;
	
	        signedXml.ComputeSignature();
	
	        XmlElement xmlDigitalSignature = signedXml.GetXml();
	
	        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));
	
	
	        if (doc.FirstChild is XmlDeclaration)
	        {
	            doc.RemoveChild(doc.FirstChild);
	        }
	
	        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));
	        doc.WriteTo(xmltw);
	        xmltw.Close();
	    }
	    public static Boolean VerifyXmlFile(String Name)
	    {
	        if (Name == null)
	            throw new ArgumentNullException("Name");
	
	        XmlDocument xmlDocument = new XmlDocument();
	
	        xmlDocument.PreserveWhitespace = true;
	
	        xmlDocument.Load(Name);
	
	        SignedXml signedXml = new SignedXml(xmlDocument);
	
	        XmlNodeList nodeList = xmlDocument.GetElementsByTagName("Signature");
	
	        signedXml.LoadXml((XmlElement)nodeList[0]);
	
	        return signedXml.CheckSignature();
	    }
	}
snippet conceptual_encoding

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_encoding/custom1.cs

	using System;
	using System.Collections.Generic;
	using System.Text;
	
	class Program
	{
	   static void Main()
	   {
	      Encoding enc = Encoding.GetEncoding("us-ascii", new CustomMapper(), new DecoderExceptionFallback());
	
	      string str1 = "\u24C8 \u2075 \u221E";
	      Console.WriteLine(str1);
	      for (int ctr = 0; ctr <= str1.Length - 1; ctr++) {
	         Console.Write("{0} ", Convert.ToUInt16(str1[ctr]).ToString("X4"));
	         if (ctr == str1.Length - 1) 
	            Console.WriteLine();
	      }
	      Console.WriteLine();
	
	      byte[] bytes = enc.GetBytes(str1);
	      Console.Write("Encoded bytes: ");
	      foreach (var byt in bytes)
	         Console.Write("{0:X2} ", byt);
	
	      Console.WriteLine("\n");
	
	      string str2 = enc.GetString(bytes);
	      Console.WriteLine("Round-trip: {0}", str1.Equals(str2));
	      if (! str1.Equals(str2)) {
	         Console.WriteLine(str2);
	         foreach (var ch in str2)
	            Console.Write("{0} ", Convert.ToUInt16(ch).ToString("X4"));
	
	         Console.WriteLine();
	      }
	   }
	}
	
	public class CustomMapper : EncoderFallback
	{
	   public string DefaultString;
	   internal Dictionary<ushort, ulong> mapping;
	
	   public CustomMapper() : this("*")
	   {   
	   }
	   
	   public CustomMapper(string defaultString)
	   {
	      this.DefaultString = defaultString;
	
	      mapping = new Dictionary<ushort, ulong>();
	      mapping.Add(0x24C8, 0x53);
	      mapping.Add(0x2075, 0x35);
	      mapping.Add(0x221E, 0x49004E0046);
	   }
	
	   public override EncoderFallbackBuffer CreateFallbackBuffer()
	   {
	      return new CustomMapperFallbackBuffer(this);
	   }
	
	   public override int MaxCharCount
	   {
	      get { return 3; }
	   } 
	}
	
	public class CustomMapperFallbackBuffer : EncoderFallbackBuffer
	{
	   CustomMapper fb; 
	   string charsToReturn; 
	
	   public CustomMapperFallbackBuffer(CustomMapper fallback)
	   {
	      this.fb = fallback;
	   }
	
	   public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index)
	   {
	      return false;
	   }
	
	   public override bool Fallback(char charUnknown, int index)
	   {
	      if (count >= 1) return false;
	
	      charsToReturn = String.Empty;
	
	      ushort key = Convert.ToUInt16(charUnknown);
	      if (fb.mapping.ContainsKey(key)) {
	         byte[] bytes = BitConverter.GetBytes(fb.mapping[key]);
	         int ctr = 0;
	         foreach (var byt in bytes) {
	            if (byt > 0) {
	               ctr++;
	               charsToReturn += (char) byt;
	            }
	         }
	         count = ctr;
	      }
	      else {
	         charsToReturn = fb.DefaultString;
	         count = 1;
	      }
	      this.index = charsToReturn.Length - 1;
	
	      return true;
	   }
	
	   public override char GetNextChar()
	   {
	      count--;
	      if (count < 0) 
	         return '\u0000';
	
	      this.index--;
	      return charsToReturn[this.index + 1];
	   }
	
	   public override bool MovePrevious()
	   {
	      if (count >= -1) {
	         count++;
	         return true;
	      }
	      else {
	         return false;
	      }
	   }
	
	   public override int Remaining 
	   {
	      get { return count < 0 ? 0 : count; }
	   }
	
	   public override void Reset()
	   {
	      count = -1;
	      index = -1;
	   }
	}

snippet performancecountertype_samplefraction

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType_SampleFraction/program.cs

	using System;
	using System.Collections;
	using System.Collections.Specialized;
	using System.Diagnostics;
	
	public class App
	{
	
	    private static PerformanceCounter perfCounter;
	    private static PerformanceCounter basePerfCounter;
	    private static Process thisProcess = Process.GetCurrentProcess();
	
	    public static void Main()
	    {
	
	        ArrayList samplesList = new ArrayList();
	
	        if (SetupCategory())
	            return;
	        CreateCounters();
	        CollectSamples(samplesList);
	        CalculateResults(samplesList);
	
	    }
	
	
	    private static bool SetupCategory()
	    {
	        if (!PerformanceCounterCategory.Exists("SampleFractionCategory"))
	        {
	
	            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();
	
	            CounterCreationData sampleFraction = new CounterCreationData();
	            sampleFraction.CounterType = PerformanceCounterType.SampleFraction;
	            sampleFraction.CounterName = "SampleFractionSample";
	            CCDC.Add(sampleFraction);
	
	            CounterCreationData sampleFractionBase = new CounterCreationData();
	            sampleFractionBase.CounterType = PerformanceCounterType.SampleBase;
	            sampleFractionBase.CounterName = "SampleFractionSampleBase";
	            CCDC.Add(sampleFractionBase);
	
	            PerformanceCounterCategory.Create("SampleFractionCategory",
	                "Demonstrates usage of the SampleFraction performance counter type.",
	                PerformanceCounterCategoryType.SingleInstance, CCDC);
	
	            return (true);
	        }
	        else
	        {
	            Console.WriteLine("Category exists - SampleFractionCategory");
	            return (false);
	        }
	    }
	
	    private static void CreateCounters()
	    {
	
	        perfCounter = new PerformanceCounter("SampleFractionCategory",
	            "SampleFractionSample",
	            false);
	
	
	        basePerfCounter = new PerformanceCounter("SampleFractionCategory",
	            "SampleFractionSampleBase",
	            false);
	
	
	        perfCounter.RawValue = thisProcess.UserProcessorTime.Ticks;
	        basePerfCounter.RawValue = thisProcess.TotalProcessorTime.Ticks;
	    }
	    private static void CollectSamples(ArrayList samplesList)
	    {
	
	
	        for (int j = 0; j < 100; j++)
	        {
	
	            perfCounter.IncrementBy(thisProcess.UserProcessorTime.Ticks);
	
	            basePerfCounter.IncrementBy(thisProcess.TotalProcessorTime.Ticks);
	
	            if ((j % 10) == 9)
	            {
	                OutputSample(perfCounter.NextSample());
	                samplesList.Add(perfCounter.NextSample());
	            }
	            else
	                Console.WriteLine();
	
	            System.Threading.Thread.Sleep(50);
	        }
	
	    }
	
	    private static void CalculateResults(ArrayList samplesList)
	    {
	        for (int i = 0; i < (samplesList.Count - 1); i++)
	        {
	            OutputSample((CounterSample)samplesList[i]);
	            OutputSample((CounterSample)samplesList[i + 1]);
	
	            Console.WriteLine(".NET computed counter value = " +
	                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],
	                (CounterSample)samplesList[i + 1]));
	
	            Console.WriteLine("My computed counter value = " +
	                MyComputeCounterValue((CounterSample)samplesList[i],
	                (CounterSample)samplesList[i + 1]));
	
	        }
	    }
	
	
	    private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)
	    {
	        Single numerator = (Single)s1.RawValue - (Single)s0.RawValue;
	        Single denomenator = (Single)s1.BaseValue - (Single)s0.BaseValue;
	        Single counterValue = 100 * (numerator / denomenator);
	        return (counterValue);
	    }
	
	    private static void OutputSample(CounterSample s)
	    {
	        Console.WriteLine("\r\n+++++++++++");
	        Console.WriteLine("Sample values - \r\n");
	        Console.WriteLine("   BaseValue        = " + s.BaseValue);
	        Console.WriteLine("   CounterFrequency = " + s.CounterFrequency);
	        Console.WriteLine("   CounterTimeStamp = " + s.CounterTimeStamp);
	        Console.WriteLine("   CounterType      = " + s.CounterType);
	        Console.WriteLine("   RawValue         = " + s.RawValue);
	        Console.WriteLine("   SystemFrequency  = " + s.SystemFrequency);
	        Console.WriteLine("   TimeStamp        = " + s.TimeStamp);
	        Console.WriteLine("   TimeStamp100nSec = " + s.TimeStamp100nSec);
	        Console.WriteLine("++++++++++++++++++++++");
	    }
	}
snippet asyncdesignpattern

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AsyncDesignPattern/AsyncDelegateWithStateObject.cs

	/*
	The following example demonstrates using asynchronous methods to
	get Domain Name System information for the specified host computer.
	*/
	
	using System;
	using System.Net;
	using System.Net.Sockets;
	using System.Threading;
	using System.Collections;
	
	namespace Examples.AdvancedProgramming.AsynchronousOperations
	{
	    public class HostRequest
	    {
	        private string hostName;
	        private SocketException e;
	        private IPHostEntry entry;
	
	        public HostRequest(string name)
	        {
	            hostName = name;
	        }
	        
	        public string HostName
	        {
	            get 
	            {
	                return hostName;
	            }
	        }
	        
	        public SocketException ExceptionObject
	        {
	            get 
	            {
	                return e;
	            }
	            set 
	            {
	                 e = value;
	            }
	        }
	
	        public IPHostEntry HostEntry
	        {
	            get 
	            {
	                return entry;
	            }
	            set 
	            {
	                entry = value;
	            }
	        }
	    }
	    
	    public class UseDelegateAndStateForAsyncCallback
	    {
	        static int requestCounter;
	        static ArrayList hostData = new ArrayList();
	        static void UpdateUserInterface()
	        {
	            Console.WriteLine("{0} requests remaining.", requestCounter);
	        }
	        public static void Main()
	        {
	            AsyncCallback callBack = new AsyncCallback(ProcessDnsInformation);
	            string host;
	            do
	            {
	                Console.Write(" Enter the name of a host computer or <enter> to finish: ");
	                host = Console.ReadLine();
	                if (host.Length > 0)
	                {
	                    Interlocked.Increment(ref requestCounter);
	                    HostRequest request = new HostRequest(host);
	                    hostData.Add(request);
	                    Dns.BeginGetHostEntry(host, callBack, request);
	                 }
	            } while (host.Length > 0);
	            while (requestCounter > 0)
	            {
	                UpdateUserInterface();
	            }
	            foreach(HostRequest r in hostData)
	            {
	                    if (r.ExceptionObject != null)
	                    {
	                        Console.WriteLine("Request for host {0} returned the following error: {1}.", 
	                            r.HostName, r.ExceptionObject.Message);
	                    }
	                    else
	                    {
	                        IPHostEntry h = r.HostEntry;
	                        string[] aliases = h.Aliases;
	                        IPAddress[] addresses = h.AddressList;
	                        if (aliases.Length > 0)
	                        {
	                            Console.WriteLine("Aliases for {0}", r.HostName);
	                            for (int j = 0; j < aliases.Length; j++)
	                            {
	                                Console.WriteLine("{0}", aliases[j]);
	                            }
	                        }
	                        if (addresses.Length > 0)
	                        {
	                            Console.WriteLine("Addresses for {0}", r.HostName);
	                            for (int k = 0; k < addresses.Length; k++)
	                            {
	                                Console.WriteLine("{0}",addresses[k].ToString());
	                            }
	                        }
	                    }
	            }
	       }
	
	        static void ProcessDnsInformation(IAsyncResult result)
	        {
	           HostRequest request = (HostRequest) result.AsyncState;
	            try 
	            {
	                IPHostEntry host = Dns.EndGetHostEntry(result);
	                request.HostEntry = host;
	            }
	            catch (SocketException e)
	            {
	                request.ExceptionObject = e;
	            }
	            finally 
	            {
	                Interlocked.Decrement(ref requestCounter);
	            }
	        }
	    }
	}
	

snippet cryptography_xml_signverifyenvelope___specify_element

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_SignVerifyEnvelope___Specify_Element/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	using System.Text;
	using System.Xml;
	
	public class SignVerifyEnvelope
	{
	
	    public static void Main(String[] args)
	    {
	       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();
	
	       try
	       {
	           string[] elements =  { "#tag1" };
	
	           SignXmlFile("Test.xml", "SignedExample.xml", Key, elements);
	           Console.WriteLine("XML file signed.");
	
	           Console.WriteLine("Verifying signature...");
	
	           bool result = VerifyXmlFile("SignedExample.xml");
	
	           if (result)
	           {
	               Console.WriteLine("The XML signature is valid.");
	           }
	           else
	           {
	               Console.WriteLine("The XML signature is not valid.");
	           }
	       }
	       catch (CryptographicException e)
	       {
	           Console.WriteLine(e.Message);
	       }
	       finally
	       {
	           Key.Clear();
	       }
	   }
	
	    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string[] ElementsToSign)
	    {
	        if (FileName == null)
	            throw new ArgumentNullException("FileName");
	        if (SignedFileName == null)
	            throw new ArgumentNullException("SignedFileName");
	        if (Key == null)
	            throw new ArgumentNullException("Key");
	        if (ElementsToSign == null)
	            throw new ArgumentNullException("ElementsToSign");
	
	        XmlDocument doc = new XmlDocument();
	
	        doc.PreserveWhitespace = false;
	
	        doc.Load(new XmlTextReader(FileName));
	
	        SignedXml signedXml = new SignedXml(doc);
	
	        signedXml.SigningKey = Key;
	
	        foreach (string s in ElementsToSign)
	        {
	            Reference reference = new Reference();
	            reference.Uri = s;
	
	            XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
	            reference.AddTransform(env);
	
	            signedXml.AddReference(reference);
	
	        }
	
	
	
	        KeyInfo keyInfo = new KeyInfo();
	        keyInfo.AddClause(new RSAKeyValue((RSA)Key));
	        signedXml.KeyInfo = keyInfo;
	
	        signedXml.ComputeSignature();
	
	        XmlElement xmlDigitalSignature = signedXml.GetXml();
	
	        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));
	
	
	        if (doc.FirstChild is XmlDeclaration)
	        {
	            doc.RemoveChild(doc.FirstChild);
	        }
	
	        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));
	        doc.WriteTo(xmltw);
	        xmltw.Close();
	    }
	    public static Boolean VerifyXmlFile(String Name)
	    {
	        if (Name == null)
	            throw new ArgumentNullException("Name");
	
	        XmlDocument xmlDocument = new XmlDocument();
	
	        xmlDocument.PreserveWhitespace = true;
	
	        xmlDocument.Load(Name);
	
	        SignedXml signedXml = new SignedXml(xmlDocument);
	
	        XmlNodeList nodeList = xmlDocument.GetElementsByTagName("Signature");
	
	        signedXml.LoadXml((XmlElement)nodeList[0]);
	
	        return signedXml.CheckSignature();
	    }
	}
snippet performancecountertype_rateofcountspersecond64

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType_RateOfCountsPerSecond64/rateofcountspersecond64.cs

	using System;
	using System.Collections;
	using System.Collections.Specialized;
	using System.Diagnostics;
	
	public class App
	{
	    private static PerformanceCounter PC;
	
	    public static void Main()
	    {
	        ArrayList samplesList = new ArrayList();
	
	        if (SetupCategory())
	            return;
	        CreateCounters();
	        CollectSamples(samplesList);
	        CalculateResults(samplesList);
	    }
	
	    private static bool SetupCategory()
	    {
	
	
	        if (!PerformanceCounterCategory.Exists("RateOfCountsPerSecond64SampleCategory"))
	        {
	
	
	            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();
	
	            CounterCreationData rateOfCounts64 = new CounterCreationData();
	            rateOfCounts64.CounterType = PerformanceCounterType.RateOfCountsPerSecond64;
	            rateOfCounts64.CounterName = "RateOfCountsPerSecond64Sample";
	            CCDC.Add(rateOfCounts64);
	
	            PerformanceCounterCategory.Create("RateOfCountsPerSecond64SampleCategory",
	                "Demonstrates usage of the RateOfCountsPerSecond64 performance counter type.",
	                PerformanceCounterCategoryType.SingleInstance, CCDC);
	            return (true);
	        }
	        else
	        {
	            Console.WriteLine("Category exists - RateOfCountsPerSecond64SampleCategory");
	            return (false);
	        }
	    }
	
	    private static void CreateCounters()
	    {
	        PC = new PerformanceCounter("RateOfCountsPerSecond64SampleCategory",
	            "RateOfCountsPerSecond64Sample",
	            false);
	
	        PC.RawValue = 0;
	
	    }
	
	    private static void CollectSamples(ArrayList samplesList)
	    {
	
	        Random r = new Random(DateTime.Now.Millisecond);
	
	        PC.NextSample();
	
	        for (int j = 0; j < 100; j++)
	        {
	
	            int value = r.Next(1, 10);
	            PC.IncrementBy(value);
	            Console.Write(j + " = " + value);
	
	            if ((j % 10) == 9)
	            {
	                Console.WriteLine(";       NextValue() = " + PC.NextValue().ToString());
	                OutputSample(PC.NextSample());
	                samplesList.Add(PC.NextSample());
	            }
	            else
	                Console.WriteLine();
	
	            System.Threading.Thread.Sleep(50);
	        }
	
	    }
	
	    private static void CalculateResults(ArrayList samplesList)
	    {
	        for (int i = 0; i < (samplesList.Count - 1); i++)
	        {
	            OutputSample((CounterSample)samplesList[i]);
	            OutputSample((CounterSample)samplesList[i + 1]);
	
	
	            Console.WriteLine(".NET computed counter value = " +
	                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],
	                (CounterSample)samplesList[i + 1]));
	
	            Console.WriteLine("My computed counter value = " +
	                MyComputeCounterValue((CounterSample)samplesList[i],
	                (CounterSample)samplesList[i + 1]));
	
	
	        }
	    }
	
	    private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)
	    {
	        Single numerator = (Single)(s1.RawValue - s0.RawValue);
	        Single denomenator = (Single)(s1.TimeStamp - s0.TimeStamp) / (Single)s1.SystemFrequency;
	        Single counterValue = numerator / denomenator;
	        return (counterValue);
	    }
	
	    private static void OutputSample(CounterSample s)
	    {
	        Console.WriteLine("\r\n+++++++++++");
	        Console.WriteLine("Sample values - \r\n");
	        Console.WriteLine("   BaseValue        = " + s.BaseValue);
	        Console.WriteLine("   CounterFrequency = " + s.CounterFrequency);
	        Console.WriteLine("   CounterTimeStamp = " + s.CounterTimeStamp);
	        Console.WriteLine("   CounterType      = " + s.CounterType);
	        Console.WriteLine("   RawValue         = " + s.RawValue);
	        Console.WriteLine("   SystemFrequency  = " + s.SystemFrequency);
	        Console.WriteLine("   TimeStamp        = " + s.TimeStamp);
	        Console.WriteLine("   TimeStamp100nSec = " + s.TimeStamp100nSec);
	        Console.WriteLine("++++++++++++++++++++++");
	    }
	}
	

snippet performancecountertype_rateofcountspersecond

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType_RateOfCountsPerSecond/rateofcountspersecond32.cs

	using System;
	using System.Collections;
	using System.Collections.Specialized;
	using System.Diagnostics;
	
	public class App 
	{
	    private static PerformanceCounter PC;
	
		public static void Main()
		{	
			ArrayList samplesList = new ArrayList();
	
	        if (SetupCategory())
	            return;
	        CreateCounters();
			CollectSamples(samplesList);
			CalculateResults(samplesList);
		}
	
	    private static bool SetupCategory()
	    {
			
	        if ( !PerformanceCounterCategory.Exists("RateOfCountsPerSecond32SampleCategory") ) 
	        {
	
	
	            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();
	
	            CounterCreationData rateOfCounts32 = new CounterCreationData();
	            rateOfCounts32.CounterType = PerformanceCounterType.RateOfCountsPerSecond32;
	            rateOfCounts32.CounterName = "RateOfCountsPerSecond32Sample";
	            CCDC.Add(rateOfCounts32);
		        
	            PerformanceCounterCategory.Create("RateOfCountsPerSecond32SampleCategory", 
	                "Demonstrates usage of the RateOfCountsPerSecond32 performance counter type.",
	                PerformanceCounterCategoryType.SingleInstance, CCDC); 
	              return(true);
	        }
	        else
	        {
	            Console.WriteLine("Category exists - RateOfCountsPerSecond32SampleCategory");
	            return(false);
	        }
	    }
	
	    private static void CreateCounters()
	    {
	        PC = new PerformanceCounter("RateOfCountsPerSecond32SampleCategory", 
	            "RateOfCountsPerSecond32Sample", 
	            false);
	
	        PC.RawValue=0;
	        
	    }
	
	    private static void CollectSamples(ArrayList samplesList)
	    {
		
	        Random r = new Random( DateTime.Now.Millisecond );
	
	        PC.NextSample();
	
	        for (int j = 0; j < 100; j++) 
	        {
		        
	            int value = r.Next(1, 10);
	            PC.IncrementBy(value);
	            Console.Write(j + " = " + value);
	
	            if ((j % 10) == 9) 
	            {
	                Console.WriteLine(";       NextValue() = " + PC.NextValue().ToString());
	                OutputSample(PC.NextSample());
	                samplesList.Add( PC.NextSample() );
	            }
	            else
	                Console.WriteLine();
		        
	            System.Threading.Thread.Sleep(50);
	        }
	    }
	
		private static void CalculateResults(ArrayList samplesList)
		{
			for(int i = 0; i < (samplesList.Count - 1); i++)
			{
				OutputSample( (CounterSample)samplesList[i] );
				OutputSample( (CounterSample)samplesList[i+1] );
	
	
				Console.WriteLine(".NET computed counter value = " + 
					CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],
					(CounterSample)samplesList[i+1]) );
	
	            Console.WriteLine("My computed counter value = " + 
					MyComputeCounterValue((CounterSample)samplesList[i],
					(CounterSample)samplesList[i+1]) );
	
	
			}
		}
	
	
		private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)
		{
			Single numerator = (Single)(s1.RawValue - s0.RawValue);
			Single denomenator = (Single)(s1.TimeStamp - s0.TimeStamp) / (Single)s1.SystemFrequency;
			Single counterValue = numerator / denomenator;
			return(counterValue);
		}
		
		private static void OutputSample(CounterSample s)
		{
			Console.WriteLine("\r\n+++++++++++");
			Console.WriteLine("Sample values - \r\n");
			Console.WriteLine("   BaseValue        = " + s.BaseValue);
			Console.WriteLine("   CounterFrequency = " + s.CounterFrequency);
			Console.WriteLine("   CounterTimeStamp = " + s.CounterTimeStamp);
			Console.WriteLine("   CounterType      = " + s.CounterType);
			Console.WriteLine("   RawValue         = " + s.RawValue);
			Console.WriteLine("   SystemFrequency  = " + s.SystemFrequency);
			Console.WriteLine("   TimeStamp        = " + s.TimeStamp);
			Console.WriteLine("   TimeStamp100nSec = " + s.TimeStamp100nSec);
			Console.WriteLine("++++++++++++++++++++++");
		}
	
	}
	

snippet conceptual_conversion

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_conversion/explicit1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      PerformIntegerConversion();
	      Console.WriteLine("-----");
	      PerformCustomConversion();
	      Console.WriteLine("-----");
	      CheckedAndUnchecked();
	   }
	
	   private static void PerformIntegerConversion()
	   {
	      long number1 = int.MaxValue + 20L;
	      uint number2 = int.MaxValue - 1000;
	      ulong number3 = int.MaxValue;
	
	      int intNumber;
	      
	      try {
	         intNumber = checked((int) number1);
	         Console.WriteLine("After assigning a {0} value, the Integer value is {1}.", 
	                           number1.GetType().Name, intNumber); 
	      }
	      catch (OverflowException) {
	         if (number1 > int.MaxValue)
	            Console.WriteLine("Conversion failed: {0} exceeds {1}.", 
	                              number1, int.MaxValue);
	         else
	            Console.WriteLine("Conversion failed: {0} is less than {1}.", 
	                              number1, int.MinValue);
	      }
	
	      try {
	         intNumber = checked((int) number2);
	         Console.WriteLine("After assigning a {0} value, the Integer value is {1}.", 
	                           number2.GetType().Name, intNumber); 
	      }
	      catch (OverflowException) {
	         Console.WriteLine("Conversion failed: {0} exceeds {1}.", 
	                           number2, int.MaxValue);
	      }
	
	      try {
	         intNumber = checked((int) number3);
	         Console.WriteLine("After assigning a {0} value, the Integer value is {1}.", 
	                           number3.GetType().Name, intNumber); 
	      }
	      catch (OverflowException) {
	         Console.WriteLine("Conversion failed: {0} exceeds {1}.", 
	                           number1, int.MaxValue);
	      }
	
	   }
	
	   private static void PerformCustomConversion()
	   {
	      ByteWithSign value;
	      
	      try {
	         int intValue = -120;
	         value = (ByteWithSign) intValue;
	         Console.WriteLine(value);
	      }
	      catch (OverflowException e) {
	         Console.WriteLine(e.Message);
	      }
	      
	      try {
	         uint uintValue = 1024;
	         value = (ByteWithSign) uintValue;
	         Console.WriteLine(value);
	      }
	      catch (OverflowException e) {
	          Console.WriteLine(e.Message);
	      }
	   }
	
	   private static void CheckedAndUnchecked()
	   {
	      int largeValue = Int32.MaxValue;
	      byte newValue;
	      
	      try {
	         newValue = unchecked((byte) largeValue);
	         Console.WriteLine("Converted the {0} value {1} to the {2} value {3}.", 
	                           largeValue.GetType().Name, largeValue,
	                           newValue.GetType().Name, newValue);
	      }
	      catch (OverflowException) {
	         Console.WriteLine("{0} is outside the range of the Byte data type.", 
	                           largeValue);
	      }
	   
	      try {
	         newValue = checked((byte) largeValue);
	         Console.WriteLine("Converted the {0} value {1} to the {2} value {3}.", 
	                           largeValue.GetType().Name, largeValue,
	                           newValue.GetType().Name, newValue);
	      }
	      catch (OverflowException) {
	         Console.WriteLine("{0} is outside the range of the Byte data type.", 
	                           largeValue);
	      }
	   }
	}
	
	public struct ByteWithSign
	{
	   private SByte signValue; 
	   private Byte value;
	
	   private const byte MaxValue = byte.MaxValue;
	   private const int MinValue = -1 * byte.MaxValue;
	   
	   public static explicit operator ByteWithSign(int value) 
	   {
	      if (value > ByteWithSign.MaxValue || value < ByteWithSign.MinValue)
	         throw new OverflowException(String.Format("'{0}' is out of range of the ByteWithSign data type.", 
	                                                   value));
	      
	      ByteWithSign newValue;
	      newValue.signValue = (SByte) Math.Sign(value);
	      newValue.value = (byte) Math.Abs(value);
	      return newValue;
	   }  
	   
	   public static explicit operator ByteWithSign(uint value)
	   {
	      if (value > ByteWithSign.MaxValue) 
	         throw new OverflowException(String.Format("'{0}' is out of range of the ByteWithSign data type.", 
	                                                   value));
	
	      ByteWithSign newValue;
	      newValue.signValue = 1;
	      newValue.value = (byte) value;
	      return newValue;
	   }
	   
	   public override string ToString()
	   { 
	      return (signValue * value).ToString();
	   }
	}

snippet list`1_sortsearchcomparer

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/source.cs

	using System;
	using System.Collections.Generic;
	
	public class DinoComparer: IComparer<string>
	{
	    public int Compare(string x, string y)
	    {
	        if (x == null)
	        {
	            if (y == null)
	            {
	                return 0;
	            }
	            else
	            {
	                return -1;
	            }
	        }
	        else
	        {
	            if (y == null)
	            {
	                return 1;
	            }
	            else
	            {
	                int retval = x.Length.CompareTo(y.Length);
	
	                if (retval != 0)
	                {
	                    return retval;
	                }
	                else
	                {
	                    return x.CompareTo(y);
	                }
	            }
	        }
	    }
	}
	
	public class Example
	{
	    public static void Main()
	    {
	        List<string> dinosaurs = new List<string>();
	        dinosaurs.Add("Pachycephalosaurus");
	        dinosaurs.Add("Amargasaurus");
	        dinosaurs.Add("Mamenchisaurus");
	        dinosaurs.Add("Deinonychus");
	        Display(dinosaurs);
	
	        DinoComparer dc = new DinoComparer();
	
	        Console.WriteLine("\nSort with alternate comparer:");
	        dinosaurs.Sort(dc);
	        Display(dinosaurs);
	
	        SearchAndInsert(dinosaurs, "Coelophysis", dc);
	        Display(dinosaurs);
	
	        SearchAndInsert(dinosaurs, "Oviraptor", dc);
	        Display(dinosaurs);
	
	        SearchAndInsert(dinosaurs, "Tyrannosaur", dc);
	        Display(dinosaurs);
	
	        SearchAndInsert(dinosaurs, null, dc);
	        Display(dinosaurs);
	    }
	
	    private static void SearchAndInsert(List<string> list, 
	        string insert, DinoComparer dc)
	    {
	        Console.WriteLine("\nBinarySearch and Insert \"{0}\":", insert);
	
	        int index = list.BinarySearch(insert, dc);
	
	        if (index < 0)
	        {
	            list.Insert(~index, insert);
	        }
	    }
	
	    private static void Display(List<string> list)
	    {
	        Console.WriteLine();
	        foreach( string s in list )
	        {
	            Console.WriteLine(s);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Pachycephalosaurus
	Amargasaurus
	Mamenchisaurus
	Deinonychus
	
	Sort with alternate comparer:
	
	Deinonychus
	Amargasaurus
	Mamenchisaurus
	Pachycephalosaurus
	
	BinarySearch and Insert "Coelophysis":
	
	Coelophysis
	Deinonychus
	Amargasaurus
	Mamenchisaurus
	Pachycephalosaurus
	
	BinarySearch and Insert "Oviraptor":
	
	Oviraptor
	Coelophysis
	Deinonychus
	Amargasaurus
	Mamenchisaurus
	Pachycephalosaurus
	
	BinarySearch and Insert "Tyrannosaur":
	
	Oviraptor
	Coelophysis
	Deinonychus
	Tyrannosaur
	Amargasaurus
	Mamenchisaurus
	Pachycephalosaurus
	
	BinarySearch and Insert "":
	
	
	Oviraptor
	Coelophysis
	Deinonychus
	Tyrannosaur
	Amargasaurus
	Mamenchisaurus
	Pachycephalosaurus
	 */
	
	

snippet delegate_createdelegatetom_2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Delegate_CreateDelegateTOM_2/source.cs

	using System;
	using System.Reflection;
	using System.Security.Permissions;
	
	public delegate void D(C c);
	
	public class C
	{
	    private int id;
	    public int ID { get { return id; }}
	    public C(int id) { this.id = id; }
	
	    public void M1(C c) 
	    { 
	        Console.WriteLine("Instance method M1(C c) on C:  this.id = {0}, c.ID = {1}",
	            this.id, c.ID);
	    }
	  
	    public void M2() 
	    { 
	        Console.WriteLine("Instance method M2() on C:  this.id = {0}",
	            this.id);
	    }
	  
	    public static void M3(C c)
	    { 
	        Console.WriteLine("Static method M3(C c) on C:  c.ID = {0}", c.ID); 
	    }
	
	    public static void M4(C c1, C c2) 
	    { 
	        Console.WriteLine("Static method M4(C c1, C c2) on C:  c1.ID = {0}, c2.ID = {1}",
	            c1.ID, c2.ID);
	    }
	}
	
	public class F
	{
	    public void M1(C c) 
	    { 
	        Console.WriteLine("Instance method M1(C c) on F:  c.ID = {0}",
	            c.ID);
	    }
	  
	    public static void M3(C c)
	    { 
	        Console.WriteLine("Static method M3(C c) on F:  c.ID = {0}", c.ID); 
	    }
	
	    public static void M4(F f, C c) 
	    { 
	        Console.WriteLine("Static method M4(F f, C c) on F:  c.ID = {0}",
	            c.ID);
	    }
	}
	
	
	public class Example
	{
	    public static void Main()
	    {
	        C c1 = new C(42);
	        C c2 = new C(1491);
	        F f1 = new F();
	
	        D d;
	
	        MethodInfo cmi1 = typeof(C).GetMethod("M1"); 
	        MethodInfo cmi2 = typeof(C).GetMethod("M2"); 
	        MethodInfo cmi3 = typeof(C).GetMethod("M3"); 
	        MethodInfo cmi4 = typeof(C).GetMethod("M4"); 
	
	        MethodInfo fmi1 = typeof(F).GetMethod("M1");
	        MethodInfo fmi3 = typeof(F).GetMethod("M3"); 
	        MethodInfo fmi4 = typeof(F).GetMethod("M4"); 
	
	        Console.WriteLine("\nAn instance method on any type, with an argument of type C.");
	        d = (D) Delegate.CreateDelegate(typeof(D), c1, cmi1);
	        d(c2);
	        d = (D) Delegate.CreateDelegate(typeof(D), f1, fmi1);
	        d(c2);
	
	        Console.WriteLine("\nAn instance method on C with no arguments.");
	        d = (D) Delegate.CreateDelegate(typeof(D), null, cmi2);
	        d(c1);
	
	        Console.WriteLine("\nA static method on any type, with an argument of type C.");
	        d = (D) Delegate.CreateDelegate(typeof(D), null, cmi3);
	        d(c1);
	        d = (D) Delegate.CreateDelegate(typeof(D), null, fmi3);
	        d(c1);
	
	        Console.WriteLine("\nA static method on any type, with an argument of");
	        Console.WriteLine("    that type and an argument of type C.");
	        d = (D) Delegate.CreateDelegate(typeof(D), c1, cmi4);
	        d(c2);
	        Delegate test = 
	            Delegate.CreateDelegate(typeof(D), f1, fmi4, false);
	
	        if (test != null)
	        {
	            d = (D) test;
	            d(c2);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	An instance method on any type, with an argument of type C.
	Instance method M1(C c) on C:  this.id = 42, c.ID = 1491
	Instance method M1(C c) on F:  c.ID = 1491
	
	An instance method on C with no arguments.
	Instance method M2() on C:  this.id = 42
	
	A static method on any type, with an argument of type C.
	Static method M3(C c) on C:  c.ID = 42
	Static method M3(C c) on F:  c.ID = 42
	
	A static method on any type, with an argument of
	    that type and an argument of type C.
	Static method M4(C c1, C c2) on C:  c1.ID = 42, c2.ID = 1491
	Static method M4(F f, C c) on F:  c.ID = 1491
	*/

snippet conceptual_resources_portable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portable/uilibrary.cs

	using System;
	using System.Resources;
	using MyCompany.Employees;
	
	[assembly: NeutralResourcesLanguage("en-US")]
	
	namespace MyCompany.Employees
	{
	   public class UILibrary
	   {
	      private const int nFields = 4;
	
	      public static string GetTitle()
	      {
	         string retval = LibResources.Born; 
	         if (String.IsNullOrEmpty(retval))
	            retval = "";
	
	         return retval;
	      }
	
	      public static string[] GetFieldNames()
	      {
	         string[] fieldnames = new string[nFields];
	         fieldnames[0] = LibResources.Name;
	         fieldnames[1] = LibResources.ID;
	         fieldnames[2] = LibResources.Born;
	         fieldnames[3] = LibResources.Hired;
	         return fieldnames;
	      }
	
	      public static int[] GetFieldLengths()
	      {
	         int[] fieldLengths = new int[nFields];
	         fieldLengths[0] = Int32.Parse(LibResources.NameLength);
	         fieldLengths[1] = Int32.Parse(LibResources.IDLength);
	         fieldLengths[2] = Int32.Parse(LibResources.BornLength);
	         fieldLengths[3] = Int32.Parse(LibResources.HiredLength);
	         return fieldLengths;
	      }
	   }
	}
	
	namespace MyCompany.Employees 
	{
	   public class LibResources {
	        
	        private static global::System.Resources.ResourceManager resourceMan;
	        
	        private static global::System.Globalization.CultureInfo resourceCulture;
	        
	        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
	        internal LibResources() {
	        }
	        
	        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
	        public static global::System.Resources.ResourceManager ResourceManager {
	            get {
	                if (object.ReferenceEquals(resourceMan, null)) {
	                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MyCompany.Employees.LibResources", typeof(LibResources).Assembly);
	                    resourceMan = temp;
	                }
	                return resourceMan;
	            }
	        }
	        
	        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
	        public static global::System.Globalization.CultureInfo Culture {
	            get {
	                return resourceCulture;
	            }
	            set {
	                resourceCulture = value;
	            }
	        }
	        
	        public static string Born {
	            get {
	                return ResourceManager.GetString("Born", resourceCulture);
	            }
	        }
	        
	        public static string BornLength {
	            get {
	                return ResourceManager.GetString("BornLength", resourceCulture);
	            }
	        }
	        
	        public static string Hired {
	            get {
	                return ResourceManager.GetString("Hired", resourceCulture);
	            }
	        }
	        
	        public static string HiredLength {
	            get {
	                return ResourceManager.GetString("HiredLength", resourceCulture);
	            }
	        }
	        
	        public static string ID {
	            get {
	                return ResourceManager.GetString("ID", resourceCulture);
	            }
	        }
	        
	        public static string IDLength {
	            get {
	                return ResourceManager.GetString("IDLength", resourceCulture);
	            }
	        }
	        
	        public static string Name {
	            get {
	                return ResourceManager.GetString("Name", resourceCulture);
	            }
	        }
	        
	        public static string NameLength {
	            get {
	                return ResourceManager.GetString("NameLength", resourceCulture);
	            }
	        }
	        
	        public static string Title {
	            get {
	                return ResourceManager.GetString("Title", resourceCulture);
	            }
	        }
	    }
	}
	 
	   
	

snippet cryptography_xml_mainxmlencdecryptdataoop

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_MainXMLEncDecryptDataOOP/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
		class Program
		{
			static void Main(string[] args)
			{
	
				XmlDocument xmlDoc = new XmlDocument();
	
				try
				{
					xmlDoc.PreserveWhitespace = true;
					xmlDoc.Load("test.xml");
				}
				catch (Exception e)
				{
					Console.WriteLine(e.Message);
					return;
				}
	
				TripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();
	
				TrippleDESDocumentEncryption xmlTDES = new TrippleDESDocumentEncryption(xmlDoc, tDESkey);
				
				try
				{
					xmlTDES.Encrypt("creditcard");
	
					Console.WriteLine("Encrypted XML:");
					Console.WriteLine();
					Console.WriteLine(xmlTDES.Doc.OuterXml);
	
					xmlTDES.Decrypt();
	
					Console.WriteLine();
					Console.WriteLine("Decrypted XML:");
					Console.WriteLine();
					Console.WriteLine(xmlTDES.Doc.OuterXml);
				}
				catch (Exception e)
				{
					Console.WriteLine(e.Message);
				}
				finally
				{
					xmlTDES.Clear();
				}
	
			}
	
		}
	
	class TrippleDESDocumentEncryption
	{
		protected XmlDocument docValue;
		protected TripleDES algValue;
	
		public TrippleDESDocumentEncryption(XmlDocument Doc, TripleDES Key)
		{
			if (Doc != null)
			{
				docValue = Doc;
			}
			else
			{
				throw new ArgumentNullException("Doc");
			}
	
			if (Key != null)
			{
	
				algValue = Key;
			}
			else
			{
				throw new ArgumentNullException("Key");
			}
		}
	
		public XmlDocument Doc { set { docValue = value; } get { return docValue; } }
		public TripleDES Alg { set { algValue = value; } get { return algValue; } }
	
		public void Clear()
		{
			if (algValue != null)
			{
				algValue.Clear();
			}
			else
			{
				throw new Exception("No TripleDES key was found to clear.");
			}
		}
	
		public void Encrypt(string Element)
		{
			XmlElement inputElement = docValue.GetElementsByTagName(Element)[0] as XmlElement;
	
			if (inputElement == null)
			{
				throw new Exception("The element was not found.");
			}
	
			EncryptedXml exml = new EncryptedXml(docValue);
	
			byte[] rgbOutput = exml.EncryptData(inputElement, algValue, false);
	
			EncryptedData ed = new EncryptedData();
	
			ed.Type = EncryptedXml.XmlEncElementUrl;
	
			ed.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl);
	
			ed.CipherData = new CipherData();
	
			ed.CipherData.CipherValue = rgbOutput;
	
			EncryptedXml.ReplaceElement(inputElement, ed, false);
		}
	
		public void Decrypt()
		{
	
			XmlElement encryptedElement = docValue.GetElementsByTagName("EncryptedData")[0] as XmlElement;
	
			if (encryptedElement == null)
			{
				throw new Exception("The EncryptedData element was not found.");
			}
	
			EncryptedData ed = new EncryptedData();
			ed.LoadXml(encryptedElement);
	
			EncryptedXml exml = new EncryptedXml();
	
			byte[] rgbOutput = exml.DecryptData(ed, algValue);
	
			exml.ReplaceData(encryptedElement, rgbOutput);
	
		}
	
	}
snippet performancecountertype_averagecounter64

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType_AverageCounter64/averagecount32.cs

	
	using System;
	using System.Collections;
	using System.Collections.Specialized;
	using System.Diagnostics;
	
	public class App {
	
	    private static PerformanceCounter avgCounter64Sample;
	    private static PerformanceCounter avgCounter64SampleBase;
	
	    public static void Main()
	    {
	    
	        ArrayList samplesList = new ArrayList();
	
	        if (SetupCategory())
	            return;
	        CreateCounters();
	        CollectSamples(samplesList);
	        CalculateResults(samplesList);
	
	    }
	
	    private static bool SetupCategory()
	    {
	        if ( !PerformanceCounterCategory.Exists("AverageCounter64SampleCategory") ) 
	        {
	
	            CounterCreationDataCollection counterDataCollection = new CounterCreationDataCollection();
	
	            CounterCreationData averageCount64 = new CounterCreationData();
	            averageCount64.CounterType = PerformanceCounterType.AverageCount64;
	            averageCount64.CounterName = "AverageCounter64Sample";
	            counterDataCollection.Add(averageCount64);
	
	            CounterCreationData averageCount64Base = new CounterCreationData();
	            averageCount64Base.CounterType = PerformanceCounterType.AverageBase;
	            averageCount64Base.CounterName = "AverageCounter64SampleBase";
	            counterDataCollection.Add(averageCount64Base);
	
	            PerformanceCounterCategory.Create("AverageCounter64SampleCategory",
	                "Demonstrates usage of the AverageCounter64 performance counter type.",
	                PerformanceCounterCategoryType.SingleInstance, counterDataCollection);
	
	            return(true);
	        }
	        else
	        {
	            Console.WriteLine("Category exists - AverageCounter64SampleCategory");
	            return(false);
	        }
	    }
	
	    private static void CreateCounters()
	    {
	
	        avgCounter64Sample = new PerformanceCounter("AverageCounter64SampleCategory", 
	            "AverageCounter64Sample", 
	            false);
	
	
	        avgCounter64SampleBase = new PerformanceCounter("AverageCounter64SampleCategory", 
	            "AverageCounter64SampleBase", 
	            false);
	
	        avgCounter64Sample.RawValue=0;
	        avgCounter64SampleBase.RawValue=0;
	    }
	    private static void CollectSamples(ArrayList samplesList)
	    {
	
	        Random r = new Random( DateTime.Now.Millisecond );
	
	        for (int j = 0; j < 100; j++) 
	        {
	
	            int value = r.Next(1, 10);
	            Console.Write(j + " = " + value);
	
	            avgCounter64Sample.IncrementBy(value);
	
	            avgCounter64SampleBase.Increment();
	
	            if ((j % 10) == 9) 
	            {
	                OutputSample(avgCounter64Sample.NextSample());
	                samplesList.Add( avgCounter64Sample.NextSample() );
	            }
	            else
	                Console.WriteLine();
	
	            System.Threading.Thread.Sleep(50);
	        }
	
	    }
	
	    private static void CalculateResults(ArrayList samplesList)
	    {
	        for(int i = 0; i < (samplesList.Count - 1); i++)
	        {
	            OutputSample( (CounterSample)samplesList[i] );
	            OutputSample( (CounterSample)samplesList[i+1] );
	
	            Console.WriteLine(".NET computed counter value = " +
	                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],
	                (CounterSample)samplesList[i+1]) );
	
	            Console.WriteLine("My computed counter value = " + 
	                MyComputeCounterValue((CounterSample)samplesList[i],
	                (CounterSample)samplesList[i+1]) );
	
	        }
	    }
	
	    private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)
	    {
	        Single numerator = (Single)s1.RawValue - (Single)s0.RawValue;
	        Single denomenator = (Single)s1.BaseValue - (Single)s0.BaseValue;
	        Single counterValue = numerator / denomenator;
	        return(counterValue);
	    }
	
	    private static void OutputSample(CounterSample s)
	    {
	        Console.WriteLine("\r\n+++++++++++");
	        Console.WriteLine("Sample values - \r\n");
	        Console.WriteLine("   BaseValue        = " + s.BaseValue);
	        Console.WriteLine("   CounterFrequency = " + s.CounterFrequency);
	        Console.WriteLine("   CounterTimeStamp = " + s.CounterTimeStamp);
	        Console.WriteLine("   CounterType      = " + s.CounterType);
	        Console.WriteLine("   RawValue         = " + s.RawValue);
	        Console.WriteLine("   SystemFrequency  = " + s.SystemFrequency);
	        Console.WriteLine("   TimeStamp        = " + s.TimeStamp);
	        Console.WriteLine("   TimeStamp100nSec = " + s.TimeStamp100nSec);
	        Console.WriteLine("++++++++++++++++++++++");
	    }
	}
	

snippet cryptography_xml_xmldsigexcc14nwithcommentstransform

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_XmlDsigExcC14NWithCommentsTransform/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	using System.Security.Cryptography.Xml;
	using System.Text;
	using System.Xml;
	
	public class SignVerifyEnvelope
	{
	
	    public static void Main(String[] args)
	    {
	        try
	        {
	            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();
	
	            CreateSomeXml("Example.xml");
	            Console.WriteLine("New XML file created.");
	
	            Console.WriteLine("XML file signed.");
	
	            Console.WriteLine("Verifying signature...");
	            bool result = VerifyXmlFile("SignedExample.xml");
	
	            if (result)
	            {
	                Console.WriteLine("The XML signature is valid.");
	            }
	            else
	            {
	                Console.WriteLine("The XML signature is not valid.");
	            }
	        }
	        catch (CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	        }
	    }
	
	    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)
	    {
	        XmlDocument doc = new XmlDocument();
	
	        doc.PreserveWhitespace = false;
	
	        doc.Load(new XmlTextReader(FileName));
	
	        SignedXml signedXml = new SignedXml(doc);
	
	        signedXml.SigningKey = Key;
	
	        signedXml.SignedInfo.CanonicalizationMethod = SignedXml.XmlDsigExcC14NWithCommentsTransformUrl;
	
	        XmlDsigExcC14NWithCommentsTransform canMethod = (XmlDsigExcC14NWithCommentsTransform)signedXml.SignedInfo.CanonicalizationMethodObject;
	        canMethod.InclusiveNamespacesPrefixList = "Sign";
	
	        Reference reference = new Reference();
	        reference.Uri = "";
	
	        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
	        reference.AddTransform(env);
	
	        signedXml.AddReference(reference);
	
	
	        KeyInfo keyInfo = new KeyInfo();
	        keyInfo.AddClause(new RSAKeyValue((RSA)Key));
	        signedXml.KeyInfo = keyInfo;
	
	        signedXml.ComputeSignature();
	
	        XmlElement xmlDigitalSignature = signedXml.GetXml();
	
	        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));
	
	
	        if (doc.FirstChild is XmlDeclaration)
	        {
	            doc.RemoveChild(doc.FirstChild);
	        }
	
	        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));
	        doc.WriteTo(xmltw);
	        xmltw.Close();
	    }
	    public static Boolean VerifyXmlFile(String Name)
	    {
	        XmlDocument xmlDocument = new XmlDocument();
	
	        xmlDocument.PreserveWhitespace = true;
	
	        xmlDocument.Load(Name);
	
	        SignedXml signedXml = new SignedXml(xmlDocument);
	
	        XmlNodeList nodeList = xmlDocument.GetElementsByTagName("Signature");
	
	        signedXml.LoadXml((XmlElement)nodeList[0]);
	
	        return signedXml.CheckSignature();
	
	    }
	
	    public static void CreateSomeXml(string FileName)
	    {
	        XmlDocument document = new XmlDocument();
	
	        XmlNode node = document.CreateNode(XmlNodeType.Element, "", "MyXML", "Don't_Sign");
	
	        document.AppendChild(node);
	
	        XmlNode subnode = document.CreateNode(XmlNodeType.Element, "", "TempElement", "Sign");
	
	        subnode.InnerText = "Here is some data to sign.";
	
	        document.DocumentElement.AppendChild(subnode);
	
	        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));
	        document.WriteTo(xmltw);
	        xmltw.Close();
	    }
	}

snippet cryptography_xml_xmldsigexcc14ntransform

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_XmlDsigExcC14NTransform/example.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	using System.Security.Cryptography.Xml;
	using System.Text;
	using System.Xml;
	
	public class SignVerifyEnvelope
	{
	
	    public static void Main(String[] args)
	    {
	        try
	        {
	            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();
	
	            CreateSomeXml("Example.xml");
	            Console.WriteLine("New XML file created.");
	
	            SignXmlFile("Example.xml", "SignedExample.xml", Key);
	            Console.WriteLine("XML file signed.");
	
	            Console.WriteLine("Verifying signature...");
	            bool result = VerifyXmlFile("SignedExample.xml");
	
	            if (result)
	            {
	                Console.WriteLine("The XML signature is valid.");
	            }
	            else
	            {
	                Console.WriteLine("The XML signature is not valid.");
	            }
	
	        }
	        catch (CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	        }
	    }
	
	    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)
	    {
	        XmlDocument doc = new XmlDocument();
	
	        doc.PreserveWhitespace = false;
	
	        doc.Load(new XmlTextReader(FileName));
	
	        SignedXml signedXml = new SignedXml(doc);
	
	        signedXml.SigningKey = Key;
	
	        signedXml.SignedInfo.CanonicalizationMethod = SignedXml.XmlDsigExcC14NTransformUrl;
	
	        XmlDsigExcC14NTransform canMethod = (XmlDsigExcC14NTransform)signedXml.SignedInfo.CanonicalizationMethodObject;
	        canMethod.InclusiveNamespacesPrefixList = "Sign";
	
	        Reference reference = new Reference();
	        reference.Uri = "";
	
	        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
	        reference.AddTransform(env);
	
	        signedXml.AddReference(reference);
	
	
	        KeyInfo keyInfo = new KeyInfo();
	        keyInfo.AddClause(new RSAKeyValue((RSA)Key));
	        signedXml.KeyInfo = keyInfo;
	
	        signedXml.ComputeSignature();
	
	        XmlElement xmlDigitalSignature = signedXml.GetXml();
	
	        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));
	
	
	        if (doc.FirstChild is XmlDeclaration)
	        {
	            doc.RemoveChild(doc.FirstChild);
	        }
	
	        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));
	        doc.WriteTo(xmltw);
	        xmltw.Close();
	    }
	    public static Boolean VerifyXmlFile(String Name)
	    {
	        XmlDocument xmlDocument = new XmlDocument();
	
	        xmlDocument.PreserveWhitespace = true;
	
	        xmlDocument.Load(Name);
	
	        SignedXml signedXml = new SignedXml(xmlDocument);
	
	        XmlNodeList nodeList = xmlDocument.GetElementsByTagName("Signature");
	
	        signedXml.LoadXml((XmlElement)nodeList[0]);
	
	        return signedXml.CheckSignature();
	
	    }
	
	    public static void CreateSomeXml(string FileName)
	    {
	        XmlDocument document = new XmlDocument();
	
	        XmlNode node = document.CreateNode(XmlNodeType.Element, "", "MyXML", "Don't_Sign");
	
	        document.AppendChild(node);
	
	        XmlNode subnode = document.CreateNode(XmlNodeType.Element, "", "TempElement", "Sign");
	
	        subnode.InnerText = "Here is some data to sign.";
	
	        document.DocumentElement.AppendChild(subnode);
	
	        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));
	        document.WriteTo(xmltw);
	        xmltw.Close();
	    }
	}

snippet cryptography_rsacsp_ctor_csp

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RSACSP_ctor_csp/example.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	class RSACSPSample
	{
	
	    static void Main()
	    {
	        try
	        {
	            string KeyContainerName = "MyKeyContainer";
	
	            RSAPersistKeyInCSP(KeyContainerName);
	
	            UnicodeEncoding ByteConverter = new UnicodeEncoding();
	
	            byte[] dataToEncrypt = ByteConverter.GetBytes("Data to Encrypt");
	            byte[] encryptedData;
	            byte[] decryptedData;
	
	            encryptedData = RSAEncrypt(dataToEncrypt,KeyContainerName, false);
	
	            decryptedData = RSADecrypt(encryptedData,KeyContainerName, false);
	
	            Console.WriteLine("Decrypted plaintext: {0}", ByteConverter.GetString(decryptedData));
	
	            RSADeleteKeyInCSP(KeyContainerName);
	        }
	        catch(ArgumentNullException)
	        {
	            Console.WriteLine("Encryption failed.");
	
	        }
	    }
	
	    public static void RSAPersistKeyInCSP(string ContainerName)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);
	
	            Console.WriteLine("The RSA key was persisted in the container, \"{0}\".", ContainerName);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	        }
	    }
	
	    public static void RSADeleteKeyInCSP(string ContainerName)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);
	
	            RSAalg.PersistKeyInCsp = false;
	
	            RSAalg.Clear();
	
	            Console.WriteLine("The RSA key was deleted from the container, \"{0}\".", ContainerName);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	        }
	    }
	
	    static public byte[] RSAEncrypt(byte[] DataToEncrypt, string ContainerName, bool DoOAEPPadding)
	    {
	        try
	        {	
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);
	
	            return RSAalg.Encrypt(DataToEncrypt, DoOAEPPadding);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	            return null;
	        }
	
	    }
	
	    static public byte[] RSADecrypt(byte[] DataToDecrypt, string ContainerName, bool DoOAEPPadding)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);
	
	            return RSAalg.Decrypt(DataToDecrypt, DoOAEPPadding);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.ToString());
	
	            return null;
	        }
	
	    }
	}
snippet generic_dictionary

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_Dictionary/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        Dictionary<string, string> openWith = 
	            new Dictionary<string, string>();
	
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	
	        try
	        {
	            openWith.Add("txt", "winword.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("An element with Key = \"txt\" already exists.");
	        }
	
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["rtf"] = "winword.exe";
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["doc"] = "winword.exe";
	
	        try
	        {
	            Console.WriteLine("For key = \"tif\", value = {0}.", 
	                openWith["tif"]);
	        }
	        catch (KeyNotFoundException)
	        {
	            Console.WriteLine("Key = \"tif\" is not found.");
	        }
	
	        string value = "";
	        if (openWith.TryGetValue("tif", out value))
	        {
	            Console.WriteLine("For key = \"tif\", value = {0}.", value);
	        }
	        else
	        {
	            Console.WriteLine("Key = \"tif\" is not found.");
	        }
	
	        if (!openWith.ContainsKey("ht"))
	        {
	            openWith.Add("ht", "hypertrm.exe");
	            Console.WriteLine("Value added for key = \"ht\": {0}", 
	                openWith["ht"]);
	        }
	
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	                kvp.Key, kvp.Value);
	        }
	
	        Dictionary<string, string>.ValueCollection valueColl =
	            openWith.Values;
	
	        Console.WriteLine();
	        foreach( string s in valueColl )
	        {
	            Console.WriteLine("Value = {0}", s);
	        }
	
	        Dictionary<string, string>.KeyCollection keyColl =
	            openWith.Keys;
	
	        Console.WriteLine();
	        foreach( string s in keyColl )
	        {
	            Console.WriteLine("Key = {0}", s);
	        }
	
	        Console.WriteLine("\nRemove(\"doc\")");
	        openWith.Remove("doc");
	
	        if (!openWith.ContainsKey("doc"))
	        {
	            Console.WriteLine("Key \"doc\" is not found.");
	        }
	
	        /* This code example produces the following output:
	
	        An element with Key = "txt" already exists.
	        For key = "rtf", value = wordpad.exe.
	        For key = "rtf", value = winword.exe.
	        Key = "tif" is not found.
	        Key = "tif" is not found.
	        Value added for key = "ht": hypertrm.exe
	
	        Key = txt, Value = notepad.exe
	        Key = bmp, Value = paint.exe
	        Key = dib, Value = paint.exe
	        Key = rtf, Value = winword.exe
	        Key = doc, Value = winword.exe
	        Key = ht, Value = hypertrm.exe
	
	        Value = notepad.exe
	        Value = paint.exe
	        Value = paint.exe
	        Value = winword.exe
	        Value = winword.exe
	        Value = hypertrm.exe
	
	        Key = txt
	        Key = bmp
	        Key = dib
	        Key = rtf
	        Key = doc
	        Key = ht
	
	        Remove("doc")
	        Key "doc" is not found.
	        */
	    }
	}

snippet generic_idictionary

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_IDictionary/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        IDictionary<string, string> openWith = 
	            new Dictionary<string, string>();
	
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	
	        try
	        {
	            openWith.Add("txt", "winword.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("An element with Key = \"txt\" already exists.");
	        }
	
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["rtf"] = "winword.exe";
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["doc"] = "winword.exe";
	
	        try
	        {
	            Console.WriteLine("For key = \"tif\", value = {0}.", 
	                openWith["tif"]);
	        }
	        catch (KeyNotFoundException)
	        {
	            Console.WriteLine("Key = \"tif\" is not found.");
	        }
	
	        string value = "";
	        if (openWith.TryGetValue("tif", out value))
	        {
	            Console.WriteLine("For key = \"tif\", value = {0}.", value);
	        }
	        else
	        {
	            Console.WriteLine("Key = \"tif\" is not found.");
	        }
	
	        if (!openWith.ContainsKey("ht"))
	        {
	            openWith.Add("ht", "hypertrm.exe");
	            Console.WriteLine("Value added for key = \"ht\": {0}", 
	                openWith["ht"]);
	        }
	
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	                kvp.Key, kvp.Value);
	        }
	
	        ICollection<string> icoll = openWith.Values;
	
	        Console.WriteLine();
	        foreach( string s in icoll )
	        {
	            Console.WriteLine("Value = {0}", s);
	        }
	
	        icoll = openWith.Keys;
	
	        Console.WriteLine();
	        foreach( string s in icoll )
	        {
	            Console.WriteLine("Key = {0}", s);
	        }
	
	        Console.WriteLine("\nRemove(\"doc\")");
	        openWith.Remove("doc");
	
	        if (!openWith.ContainsKey("doc"))
	        {
	            Console.WriteLine("Key \"doc\" is not found.");
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	An element with Key = "txt" already exists.
	For key = "rtf", value = wordpad.exe.
	For key = "rtf", value = winword.exe.
	Key = "tif" is not found.
	Key = "tif" is not found.
	Value added for key = "ht": hypertrm.exe
	
	Key = txt, Value = notepad.exe
	Key = bmp, Value = paint.exe
	Key = dib, Value = paint.exe
	Key = rtf, Value = winword.exe
	Key = doc, Value = winword.exe
	Key = ht, Value = hypertrm.exe
	
	Value = notepad.exe
	Value = paint.exe
	Value = paint.exe
	Value = winword.exe
	Value = winword.exe
	Value = hypertrm.exe
	
	Key = txt
	Key = bmp
	Key = dib
	Key = rtf
	Key = doc
	Key = ht
	
	Remove("doc")
	Key "doc" is not found.
	 */
	
	

snippet cryptography_rsacsp_ctor_int32_csp

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_RSACSP_ctor_int32_csp/example.cs

	using System;
	using System.Security.Cryptography;
	using System.Text;
	
	class RSACSPSample
	{
	
	    static void Main()
	    {
	        try
	        {
	            string KeyContainerName = "MyKeyContainer";
	
	            RSAPersistKeyInCSP(KeyContainerName);
	
	            UnicodeEncoding ByteConverter = new UnicodeEncoding();
	
	            byte[] dataToEncrypt = ByteConverter.GetBytes("Data to Encrypt");
	            byte[] encryptedData;
	            byte[] decryptedData;
	
	            encryptedData = RSAEncrypt(dataToEncrypt,KeyContainerName, false);
	
	            decryptedData = RSADecrypt(encryptedData,KeyContainerName, false);
	
	            Console.WriteLine("Decrypted plaintext: {0}", ByteConverter.GetString(decryptedData));
	
	            RSADeleteKeyInCSP(KeyContainerName);
	        }
	        catch(ArgumentNullException)
	        {
	            Console.WriteLine("Encryption failed.");
	
	        }
	    }
	
	    public static void RSAPersistKeyInCSP(string ContainerName)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider( 2048, cspParams);
	
	            Console.WriteLine("The RSA key with a key-size of {0} was persisted in the container, \"{1}\".", 
	                              RSAalg.KeySize , ContainerName);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	        }
	    }
	
	    public static void RSADeleteKeyInCSP(string ContainerName)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);
	
	            RSAalg.PersistKeyInCsp = false;
	
	            RSAalg.Clear();
	
	            Console.WriteLine("The RSA key was deleted from the container, \"{0}\".", ContainerName);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	        }
	    }
	
	    static public byte[] RSAEncrypt(byte[] DataToEncrypt, string ContainerName, bool DoOAEPPadding)
	    {
	        try
	        {	
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);
	
	            return RSAalg.Encrypt(DataToEncrypt, DoOAEPPadding);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	
	            return null;
	        }
	
	    }
	
	    static public byte[] RSADecrypt(byte[] DataToDecrypt, string ContainerName, bool DoOAEPPadding)
	    {
	        try
	        {
	            CspParameters cspParams = new CspParameters();
	
	            cspParams.KeyContainerName = ContainerName;
	
	            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);
	
	            return RSAalg.Decrypt(DataToDecrypt, DoOAEPPadding);
	        }
	        catch(CryptographicException e)
	        {
	            Console.WriteLine(e.ToString());
	
	            return null;
	        }
	
	    }
	}
snippet performancecountertype_rawfraction

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType_RawFraction/rawfraction.cs

	using System;
	using System.Collections;
	using System.Collections.Specialized;
	using System.Diagnostics;
	
	
	public class App
	{
	    private static PerformanceCounter PC;
	    private static PerformanceCounter BPC;
	
	    public static void Main()
	    {
	        ArrayList samplesList = new ArrayList();
	
	        if (SetupCategory())
	            return;
	        CreateCounters();
	        CollectSamples(samplesList);
	        CalculateResults(samplesList);
	    }
	
	    private static bool SetupCategory()
	    {
	
	
	        if (!PerformanceCounterCategory.Exists("RawFractionSampleCategory"))
	        {
	
	
	            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();
	
	            CounterCreationData rf = new CounterCreationData();
	            rf.CounterType = PerformanceCounterType.RawFraction;
	            rf.CounterName = "RawFractionSample";
	            CCDC.Add(rf);
	
	            CounterCreationData rfBase = new CounterCreationData();
	            rfBase.CounterType = PerformanceCounterType.RawBase;
	            rfBase.CounterName = "RawFractionSampleBase";
	            CCDC.Add(rfBase);
	
	            PerformanceCounterCategory.Create("RawFractionSampleCategory",
	                "Demonstrates usage of the RawFraction performance counter type.",
	                PerformanceCounterCategoryType.SingleInstance, CCDC);
	
	            return (true);
	        }
	        else
	        {
	            Console.WriteLine("Category exists - RawFractionSampleCategory");
	            return (false);
	        }
	    }
	
	    private static void CreateCounters()
	    {
	        PC = new PerformanceCounter("RawFractionSampleCategory",
	            "RawFractionSample",
	            false);
	
	        BPC = new PerformanceCounter("RawFractionSampleCategory",
	            "RawFractionSampleBase",
	            false);
	
	        PC.RawValue = 0;
	        BPC.RawValue = 0;
	    }
	
	    private static void CollectSamples(ArrayList samplesList)
	    {
	
	        Random r = new Random(DateTime.Now.Millisecond);
	
	        PC.NextSample();
	
	        for (int j = 0; j < 100; j++)
	        {
	            int value = r.Next(1, 10);
	            Console.Write(j + " = " + value);
	
	            BPC.Increment();
	
	            if (value >= 9)
	                PC.Increment();
	
	            if ((j % 10) == 9)
	            {
	                Console.WriteLine(";       NextValue() = " + PC.NextValue().ToString());
	                OutputSample(PC.NextSample());
	                samplesList.Add(PC.NextSample());
	            }
	            else
	                Console.WriteLine();
	
	            System.Threading.Thread.Sleep(50);
	        }
	
	    }
	
	
	    private static void CalculateResults(ArrayList samplesList)
	    {
	        for (int i = 0; i < samplesList.Count; i++)
	        {
	            OutputSample((CounterSample)samplesList[i]);
	
	            Console.WriteLine(".NET computed counter value = " +
	                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i]));
	
	            Console.WriteLine("My computed counter value = " +
	                MyComputeCounterValue((CounterSample)samplesList[i]));
	
	        }
	    }
	
	    private static Single MyComputeCounterValue(CounterSample rfSample)
	    {
	        Single numerator = (Single)rfSample.RawValue;
	        Single denomenator = (Single)rfSample.BaseValue;
	        Single counterValue = (numerator / denomenator) * 100;
	        return (counterValue);
	    }
	
	    private static void OutputSample(CounterSample s)
	    {
	        Console.WriteLine("+++++++++++");
	        Console.WriteLine("Sample values - \r\n");
	        Console.WriteLine("   BaseValue        = " + s.BaseValue);
	        Console.WriteLine("   CounterFrequency = " + s.CounterFrequency);
	        Console.WriteLine("   CounterTimeStamp = " + s.CounterTimeStamp);
	        Console.WriteLine("   CounterType      = " + s.CounterType);
	        Console.WriteLine("   RawValue         = " + s.RawValue);
	        Console.WriteLine("   SystemFrequency  = " + s.SystemFrequency);
	        Console.WriteLine("   TimeStamp        = " + s.TimeStamp);
	        Console.WriteLine("   TimeStamp100nSec = " + s.TimeStamp100nSec);
	        Console.WriteLine("++++++++++++++++++++++");
	    }
	
	
	
	}
	
snippet generic_sorteddictionary

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedDictionary/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        SortedDictionary<string, string> openWith = 
	            new SortedDictionary<string, string>();
	
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	
	        try
	        {
	            openWith.Add("txt", "winword.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("An element with Key = \"txt\" already exists.");
	        }
	
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["rtf"] = "winword.exe";
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["doc"] = "winword.exe";
	
	        try
	        {
	            Console.WriteLine("For key = \"tif\", value = {0}.", 
	                openWith["tif"]);
	        }
	        catch (KeyNotFoundException)
	        {
	            Console.WriteLine("Key = \"tif\" is not found.");
	        }
	
	        string value = "";
	        if (openWith.TryGetValue("tif", out value))
	        {
	            Console.WriteLine("For key = \"tif\", value = {0}.", value);
	        }
	        else
	        {
	            Console.WriteLine("Key = \"tif\" is not found.");
	        }
	
	        if (!openWith.ContainsKey("ht"))
	        {
	            openWith.Add("ht", "hypertrm.exe");
	            Console.WriteLine("Value added for key = \"ht\": {0}", 
	                openWith["ht"]);
	        }
	
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	                kvp.Key, kvp.Value);
	        }
	
	        SortedDictionary<string, string>.ValueCollection valueColl = 
	            openWith.Values;
	
	        Console.WriteLine();
	        foreach( string s in valueColl )
	        {
	            Console.WriteLine("Value = {0}", s);
	        }
	
	        SortedDictionary<string, string>.KeyCollection keyColl = 
	            openWith.Keys;
	
	        Console.WriteLine();
	        foreach( string s in keyColl )
	        {
	            Console.WriteLine("Key = {0}", s);
	        }
	
	        Console.WriteLine("\nRemove(\"doc\")");
	        openWith.Remove("doc");
	
	        if (!openWith.ContainsKey("doc"))
	        {
	            Console.WriteLine("Key \"doc\" is not found.");
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	An element with Key = "txt" already exists.
	For key = "rtf", value = wordpad.exe.
	For key = "rtf", value = winword.exe.
	Key = "tif" is not found.
	Key = "tif" is not found.
	Value added for key = "ht": hypertrm.exe
	
	Key = bmp, Value = paint.exe
	Key = dib, Value = paint.exe
	Key = doc, Value = winword.exe
	Key = ht, Value = hypertrm.exe
	Key = rtf, Value = winword.exe
	Key = txt, Value = notepad.exe
	
	Value = paint.exe
	Value = paint.exe
	Value = winword.exe
	Value = hypertrm.exe
	Value = winword.exe
	Value = notepad.exe
	
	Key = bmp
	Key = dib
	Key = doc
	Key = ht
	Key = rtf
	Key = txt
	
	Remove("doc")
	Key "doc" is not found.
	 */
	
	

snippet hookupdelegate

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HookUpDelegate/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Windows.Forms;
	
	class ExampleForm : Form 
	{
	    public ExampleForm() : base()
	    {
	        this.Text = "Click me";
	    }
	}
	
	class Example
	{
	    public static void Main()
	    {
	        Example ex = new Example();
	        ex.HookUpDelegate();
	    }
	
	    private void HookUpDelegate()
	    {
	        Assembly assem = typeof(Example).Assembly;
	 
	        Type tExForm = assem.GetType("ExampleForm");
	        Object exFormAsObj = Activator.CreateInstance(tExForm);
	
	        EventInfo evClick = tExForm.GetEvent("Click");
	        Type tDelegate = evClick.EventHandlerType;
	
	        MethodInfo miHandler = 
	            typeof(Example).GetMethod("LuckyHandler", 
	                BindingFlags.NonPublic | BindingFlags.Instance);
				
	        Delegate d = Delegate.CreateDelegate(tDelegate, this, miHandler);
	
	        MethodInfo addHandler = evClick.GetAddMethod();
	        Object[] addHandlerArgs = { d };
	        addHandler.Invoke(exFormAsObj, addHandlerArgs);
	
	        Type returnType = GetDelegateReturnType(tDelegate);
	        if (returnType != typeof(void))
	            throw new ApplicationException("Delegate has a return type.");
	            
	        DynamicMethod handler = 
	            new DynamicMethod("", 
	                              null,
	                              GetDelegateParameterTypes(tDelegate),
	                              typeof(Example));
	
	        ILGenerator ilgen = handler.GetILGenerator();
	
	        Type[] showParameters = { typeof(String) };
	        MethodInfo simpleShow = 
	            typeof(MessageBox).GetMethod("Show", showParameters);
	
	        ilgen.Emit(OpCodes.Ldstr, 
	            "This event handler was constructed at run time.");
	        ilgen.Emit(OpCodes.Call, simpleShow);
	        ilgen.Emit(OpCodes.Pop);
	        ilgen.Emit(OpCodes.Ret);
	
	        Delegate dEmitted = handler.CreateDelegate(tDelegate);
	        addHandler.Invoke(exFormAsObj, new Object[] { dEmitted });
	
	        Application.Run((Form) exFormAsObj);
	    }
	
	    private void LuckyHandler(Object sender, EventArgs e)
	    {
	        MessageBox.Show("This event handler just happened to be lying around.");
	    }
	
	    private Type[] GetDelegateParameterTypes(Type d)
	    {
	        if (d.BaseType != typeof(MulticastDelegate))
	            throw new ApplicationException("Not a delegate.");
	
	        MethodInfo invoke = d.GetMethod("Invoke");
	        if (invoke == null)
	            throw new ApplicationException("Not a delegate.");
	
	        ParameterInfo[] parameters = invoke.GetParameters();
	        Type[] typeParameters = new Type[parameters.Length];
	        for (int i = 0; i < parameters.Length; i++)
	        {
	            typeParameters[i] = parameters[i].ParameterType;
	        }
	        return typeParameters;
	    }
	
	    private Type GetDelegateReturnType(Type d)
	    {
	        if (d.BaseType != typeof(MulticastDelegate))
	            throw new ApplicationException("Not a delegate.");
	
	        MethodInfo invoke = d.GetMethod("Invoke");
	        if (invoke == null)
	            throw new ApplicationException("Not a delegate.");
	
	        return invoke.ReturnType;
	    }
	}
snippet dynamicmethodhowto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DynamicMethodHowTo/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	public class Example
	{
	    private int test;
	    public Example(int test) { this.test = test; }
	
	    private delegate long SquareItInvoker(int input);
	
	    private delegate TReturn OneParameter<TReturn, TParameter0>
	        (TParameter0 p0);
	
	    public static void Main()
	    {
	        Type[] methodArgs = {typeof(int)};
	
	        DynamicMethod squareIt = new DynamicMethod(
	            "SquareIt", 
	            typeof(long), 
	            methodArgs, 
	            typeof(Example).Module);
	
	        ILGenerator il = squareIt.GetILGenerator();
	        il.Emit(OpCodes.Ldarg_0);
	        il.Emit(OpCodes.Conv_I8);
	        il.Emit(OpCodes.Dup);
	        il.Emit(OpCodes.Mul);
	        il.Emit(OpCodes.Ret);
	
	        OneParameter<long, int> invokeSquareIt = 
	            (OneParameter<long, int>)
	            squareIt.CreateDelegate(typeof(OneParameter<long, int>));
	
	        Console.WriteLine("123456789 squared = {0}",
	            invokeSquareIt(123456789));
	
	        Type[] methodArgs2 = { typeof(Example), typeof(int) };
	
	        DynamicMethod multiplyHidden = new DynamicMethod(
	            "", 
	            typeof(int), 
	            methodArgs2, 
	            typeof(Example));
	
	        ILGenerator ilMH = multiplyHidden.GetILGenerator();
	        ilMH.Emit(OpCodes.Ldarg_0);
	
	        FieldInfo testInfo = typeof(Example).GetField("test",
	            BindingFlags.NonPublic | BindingFlags.Instance);
	
	        ilMH.Emit(OpCodes.Ldfld, testInfo);
	        ilMH.Emit(OpCodes.Ldarg_1);
	        ilMH.Emit(OpCodes.Mul);
	        ilMH.Emit(OpCodes.Ret);
	
	        OneParameter<int, int> invoke = (OneParameter<int, int>)
	            multiplyHidden.CreateDelegate(
	                typeof(OneParameter<int, int>), 
	                new Example(42)
	            );
	
	        Console.WriteLine("3 * test = {0}", invoke(3));
	    }
	}
	/* This code example produces the following output:
	
	123456789 squared = 15241578750190521
	3 * test = 126
	 */
snippet t_tryparse

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/T_TryParse/tp.cs

	
	
	using System;
	using System.Globalization;
	
	class Sample 
	{
	    public static void Main() 
	    {
	    bool     success;
	    CultureInfo ci;
	    string   nl = Environment.NewLine;
	    string   msg1 = 
	             "This example demonstrates overloads of the TryParse method for{0}" +
	             "several base types, as well as the TryParseExact method for DateTime.{0}";
	    string   msg2 = "Non-numeric types:{0}";
	    string   msg3 = "{0}Numeric types:{0}";
	    string   msg4 = "{0}The following types are not CLS-compliant:{0}";
	
	    Boolean  booleanVal;
	    Char     charVal;
	    DateTime datetimeVal;
	
	    Byte     byteVal;
	    Int16    int16Val;
	    Int32    int32Val;
	    Int64    int64Val;
	    Decimal  decimalVal;
	    Single   singleVal;
	    Double   doubleVal;
	
	    SByte    sbyteVal;
	    UInt16   uint16Val;
	    UInt32   uint32Val;
	    UInt64   uint64Val;
	    Console.WriteLine(msg1, nl);
	
	    Console.WriteLine(msg2, nl);
	    success = DateTime.TryParse("7/4/2004 12:34:56", out datetimeVal);
	    Show(success, "DateTime #1", datetimeVal.ToString());
	
	    ci = new CultureInfo("fr-FR");
	    success = DateTime.TryParse("4/7/2004 12:34:56", 
	             ci, DateTimeStyles.None, out datetimeVal);
	    Show(success, "DateTime #2", datetimeVal.ToString());
	
	    success = DateTime.TryParseExact("04/07/2004 12:34:56", "G", 
	             ci, DateTimeStyles.None, out datetimeVal);
	    Show(success, "DateTime #3", datetimeVal.ToString());
	
	    string[] dateFormats = {"f", "F", "g", "G"};
	    success = DateTime.TryParseExact("7/4/2004 12:34:56 PM", 
	             dateFormats, null, DateTimeStyles.None, 
	             out datetimeVal);
	    Show(success, "DateTime #4", datetimeVal.ToString());
	
	    Console.WriteLine();
	    success = Boolean.TryParse("true", out booleanVal);
	    Show(success, "Boolean", booleanVal.ToString());
	    success = Char.TryParse("A", out charVal);
	    Show(success, "Char", charVal.ToString());
	
	    Console.WriteLine(msg3, nl);
	    success = Byte.TryParse("1", NumberStyles.Integer, null, out byteVal);
	    Show(success, "Byte", byteVal.ToString());
	    success = Int16.TryParse("-2", NumberStyles.Integer, null, out int16Val);
	    Show(success, "Int16", int16Val.ToString());
	    success = Int32.TryParse("3", NumberStyles.Integer, null, out int32Val);
	    Show(success, "Int32", int32Val.ToString());
	    success = Int64.TryParse("4", NumberStyles.Integer, null, out int64Val);
	    Show(success, "Int64", int64Val.ToString());
	    success = Decimal.TryParse("-5.5", NumberStyles.Number, null, out decimalVal);
	    Show(success, "Decimal", decimalVal.ToString());
	    success = Single.TryParse("6.6", 
	             (NumberStyles.Float | NumberStyles.AllowThousands), 
	             null, out singleVal);
	    Show(success, "Single", singleVal.ToString());
	    success = Double.TryParse("-7", 
	             (NumberStyles.Float | NumberStyles.AllowThousands), 
	             null, out doubleVal);
	    Show(success, "Double", doubleVal.ToString());
	
	
	    success = Double.TryParse("abc", out doubleVal);
	    Show(success, "Double #2", doubleVal.ToString());
	    Console.WriteLine(msg4, nl);
	    success = SByte.TryParse("-8", NumberStyles.Integer, null, out sbyteVal);
	    Show(success, "SByte", sbyteVal.ToString());
	    success = UInt16.TryParse("9", NumberStyles.Integer, null, out uint16Val);
	    Show(success, "UInt16", uint16Val.ToString());
	    success = UInt32.TryParse("10", NumberStyles.Integer, null, out uint32Val);
	    Show(success, "UInt32", uint32Val.ToString());
	    success = UInt64.TryParse("11", NumberStyles.Integer, null, out uint64Val);
	    Show(success, "UInt64", uint64Val.ToString());
	    }
	
	    protected static void Show(bool parseSuccess, string typeName, 
	                               string parseValue)
	    {
	    string msgSuccess = "Parse for {0} = {1}";
	    string msgFailure = "** Parse for {0} failed. Invalid input.";
	    if (parseSuccess == true)
	        Console.WriteLine(msgSuccess, typeName, parseValue);
	    else
	        Console.WriteLine(msgFailure, typeName);
	   }
	}
	/*
	This example produces the following results:
	
	This example demonstrates overloads of the TryParse method for
	several base types, as well as the TryParseExact method for DateTime.
	
	Non-numeric types:
	
	Parse for DateTime #1 = 7/4/2004 12:34:56 PM
	Parse for DateTime #2 = 7/4/2004 12:34:56 PM
	Parse for DateTime #3 = 7/4/2004 12:34:56 PM
	Parse for DateTime #4 = 7/4/2004 12:34:56 PM
	
	Parse for Boolean = True
	Parse for Char = A
	
	Numeric types:
	
	Parse for Byte = 1
	Parse for Int16 = -2
	Parse for Int32 = 3
	Parse for Int64 = 4
	Parse for Decimal = -5.5
	Parse for Single = 6.6
	Parse for Double = -7
	** Parse for Double #2 failed. Invalid input.
	
	The following types are not CLS-compliant:
	
	Parse for SByte = -8
	Parse for UInt16 = 9
	Parse for UInt32 = 10
	Parse for UInt64 = 11
	*/

snippet addyno

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ADDyno/addyno.cs

	
	using System;
	using System.IO;
	using System.Threading;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Runtime.Remoting;
	
	class ADDyno
	
	{
	
	   public static Type CreateADynamicAssembly(ref AppDomain myNewDomain,
						     string executableNameNoExe)
	   {
	
		string executableName = executableNameNoExe + ".exe";
	
		AssemblyName myAsmName = new AssemblyName();
		myAsmName.Name = executableNameNoExe;
		myAsmName.CodeBase = Environment.CurrentDirectory;
	
		AssemblyBuilder myAsmBuilder = myNewDomain.DefineDynamicAssembly(myAsmName,
							AssemblyBuilderAccess.RunAndSave);
		Console.WriteLine("-- Dynamic Assembly instantiated.");
	
		ModuleBuilder myModBuilder = myAsmBuilder.DefineDynamicModule(executableNameNoExe,
									      executableName);
	
		TypeBuilder myTypeBuilder = myModBuilder.DefineType(executableNameNoExe,
							TypeAttributes.Public,
							typeof(MarshalByRefObject));
	
		MethodBuilder myFCMethod = myTypeBuilder.DefineMethod("CountLocalFiles",
							MethodAttributes.Public |
							MethodAttributes.Static,
							null,
							new Type[] {  });
	
		MethodInfo currentDirGetMI = typeof(Environment).GetProperty("CurrentDirectory").GetGetMethod();
		MethodInfo writeLine0objMI = typeof(Console).GetMethod("WriteLine",
					     new Type[] { typeof(string) });
		MethodInfo writeLine2objMI = typeof(Console).GetMethod("WriteLine",
					     new Type[] { typeof(string), typeof(object), typeof(object) });
		MethodInfo getFilesMI = typeof(Directory).GetMethod("GetFiles", 
					new Type[] { typeof(string) });
	
		myFCMethod.InitLocals = true;
	
		ILGenerator myFCIL = myFCMethod.GetILGenerator();
	
		Console.WriteLine("-- Generating MSIL method body...");
		LocalBuilder v0 = myFCIL.DeclareLocal(typeof(string));
		LocalBuilder v1 = myFCIL.DeclareLocal(typeof(int));
		LocalBuilder v2 = myFCIL.DeclareLocal(typeof(string));
		LocalBuilder v3 = myFCIL.DeclareLocal(typeof(string[]));
	
		Label evalForEachLabel = myFCIL.DefineLabel();
		Label topOfForEachLabel = myFCIL.DefineLabel();
	
	
		myFCIL.EmitCall(OpCodes.Call, currentDirGetMI, null);
		myFCIL.Emit(OpCodes.Stloc_S, v0);
		myFCIL.Emit(OpCodes.Ldc_I4_0);
		myFCIL.Emit(OpCodes.Stloc_S, v1);
		myFCIL.Emit(OpCodes.Ldstr, "---");
		myFCIL.EmitCall(OpCodes.Call, writeLine0objMI, null);
		myFCIL.Emit(OpCodes.Ldloc_S, v0);
		myFCIL.EmitCall(OpCodes.Call, getFilesMI, null);
		myFCIL.Emit(OpCodes.Stloc_S, v3);
	
		myFCIL.Emit(OpCodes.Br_S, evalForEachLabel);
	
		myFCIL.MarkLabel(topOfForEachLabel);
		
		myFCIL.Emit(OpCodes.Ldloc_S, v3);
		myFCIL.Emit(OpCodes.Ldloc_S, v1);
		myFCIL.Emit(OpCodes.Ldelem_Ref);
		myFCIL.Emit(OpCodes.Stloc_S, v2);
	
		myFCIL.Emit(OpCodes.Ldloc_S, v2);
		myFCIL.EmitCall(OpCodes.Call, writeLine0objMI, null);
	
		myFCIL.Emit(OpCodes.Ldloc_S, v1);
		myFCIL.Emit(OpCodes.Ldc_I4_1);
		myFCIL.Emit(OpCodes.Add);
		myFCIL.Emit(OpCodes.Stloc_S, v1);
	
		myFCIL.MarkLabel(evalForEachLabel);
		myFCIL.Emit(OpCodes.Ldloc_S, v1);
		myFCIL.Emit(OpCodes.Ldloc_S, v3);
		myFCIL.Emit(OpCodes.Ldlen);
		myFCIL.Emit(OpCodes.Conv_I4);
		myFCIL.Emit(OpCodes.Blt_S, topOfForEachLabel);
	
		myFCIL.Emit(OpCodes.Ldstr, "---");
		myFCIL.EmitCall(OpCodes.Call, writeLine0objMI, null);
		myFCIL.Emit(OpCodes.Ldstr, "There are {0} files in {1}.");
		myFCIL.Emit(OpCodes.Ldloc_S, v1);
		myFCIL.Emit(OpCodes.Box, typeof(int));
		myFCIL.Emit(OpCodes.Ldloc_S, v0);
		myFCIL.EmitCall(OpCodes.Call, writeLine2objMI, null);
	
		myFCIL.Emit(OpCodes.Ret);
	
		Type myType = myTypeBuilder.CreateType();
	
		myAsmBuilder.SetEntryPoint(myFCMethod);
		myAsmBuilder.Save(executableName);		
		Console.WriteLine("-- Method generated, type completed, and assembly saved to disk."); 
	
		return myType;
	
	   }
	
	   public static void Main() 
	   {
	
		string domainDir, executableName = null;
		
		Console.Write("Enter a name for the file counting assembly: ");
		string executableNameNoExe = Console.ReadLine();
		executableName = executableNameNoExe + ".exe";
		Console.WriteLine("---");
	
		domainDir = Environment.CurrentDirectory;
	
		AppDomain curDomain = Thread.GetDomain();	
	
	
	
		Console.WriteLine("Current Directory: {0}", Environment.CurrentDirectory);
		AppDomainSetup mySetupInfo = new AppDomainSetup();
		mySetupInfo.ApplicationBase = domainDir;
		mySetupInfo.ApplicationName = executableNameNoExe;
		mySetupInfo.LoaderOptimization = LoaderOptimization.SingleDomain;
	
		AppDomain myDomain = AppDomain.CreateDomain(executableNameNoExe,
						null, mySetupInfo);
	
		Console.WriteLine("Creating a new AppDomain '{0}'...",
						executableNameNoExe);
	
		Console.WriteLine("-- Base Directory = '{0}'", myDomain.BaseDirectory); 
		Console.WriteLine("-- Shadow Copy? = '{0}'", myDomain.ShadowCopyFiles); 
	
		Console.WriteLine("---");
		Type myFCType = CreateADynamicAssembly(ref curDomain, 
						 executableNameNoExe);
	
		Console.WriteLine("Loading '{0}' from '{1}'...", executableName,
				  myDomain.BaseDirectory.ToString());
	
	
		BindingFlags bFlags = (BindingFlags.Public | BindingFlags.CreateInstance |
				       BindingFlags.Instance);
	
		Object myObjInstance = myDomain.CreateInstanceAndUnwrap(executableNameNoExe,
					executableNameNoExe, false, bFlags, 
					null, null, null, null, null);
	
		Console.WriteLine("Executing method 'CountLocalFiles' in {0}...",
				   myObjInstance.ToString());
	
		myFCType.InvokeMember("CountLocalFiles", BindingFlags.InvokeMethod, null,
					myObjInstance, new object[] { });
				
			
	   }
	
	}
	

snippet cryptography_xml_xmlencimbedkey

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_XMLEncImbedKey/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	
	        XmlDocument xmlDoc = new XmlDocument();
	
	        try
	        {
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	            return;
	        }
	
	        RSA rsaKey = new RSACryptoServiceProvider();
	
	
	        try
	        {
	            Encrypt(xmlDoc, "creditcard", rsaKey, "rsaKey");
	
	            Console.WriteLine("Encrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	            xmlDoc.Save("test.xml");
	
	            Decrypt(xmlDoc, rsaKey, "rsaKey");
	            xmlDoc.Save("test.xml");
	
	            Console.WriteLine();
	            Console.WriteLine("Decrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	            rsaKey.Clear();
	        }
	
	    }
	
	    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, RSA Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (ElementToEncrypt == null)
	            throw new ArgumentNullException("ElementToEncrypt");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	
	
	        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	
	        if (elementToEncrypt == null)
	        {
	            throw new XmlException("The specified element was not found");
	
	        }
	
	
	        RijndaelManaged sessionKey = new RijndaelManaged();
	        sessionKey.KeySize = 256;
	
	        EncryptedXml eXml = new EncryptedXml();
	
	        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);
	
	
	
	        EncryptedData edElement = new EncryptedData();
	        edElement.Type = EncryptedXml.XmlEncElementUrl;
	
	
	        edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);
	
	        EncryptedKey ek = new EncryptedKey();
	
	        byte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);
	
	        ek.CipherData = new CipherData(encryptedKey);
	
	        ek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);
	
	
	        edElement.KeyInfo = new KeyInfo();
	
	        KeyInfoName kin = new KeyInfoName();
	
	        kin.Value = KeyName;
	
	        ek.KeyInfo.AddClause(kin);
	
	
	        edElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));
	
	        edElement.CipherData.CipherValue = encryptedElement;
	
	
	        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	
	    }
	
	    public static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	        if (KeyName == null)
	            throw new ArgumentNullException("KeyName");
	
	        EncryptedXml exml = new EncryptedXml(Doc);
	
	        exml.AddKeyNameMapping(KeyName, Alg);
	
	        exml.DecryptDocument();
	
	    }
	
	}
snippet formatting_howto_roundtrip

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_HowTo_RoundTrip/RoundTrip.cs

	using System;
	using System.Globalization;
	using System.IO;
	using System.Runtime.Serialization;
	using System.Runtime.Serialization.Formatters.Binary;
	
	public class Class1
	{
	   public static void Main()
	   {
	      RoundTripDateTime();
	      Console.WriteLine();
	      RoundTripDateTimeOffset();
	      Console.WriteLine();
	      RoundTripTimeWithTimeZone();
	   }
	
	   private static void RoundTripDateTime()
	   {
	      const string fileName = @".\DateFile.txt";
	
	      StreamWriter outFile = new StreamWriter(fileName);
	
	      DateTime dateToSave = DateTime.SpecifyKind(new DateTime(2008, 6, 12, 18, 45, 15), 
	                                                 DateTimeKind.Local);
	      string dateString = dateToSave.ToString("o");      
	      Console.WriteLine("Converted {0} ({1}) to {2}.", 
	                        dateToSave.ToString(), 
	                        dateToSave.Kind.ToString(), 
	                        dateString);      
	      outFile.WriteLine(dateString);
	      Console.WriteLine("Wrote {0} to {1}.", dateString, fileName);
	      outFile.Close();
	            
	      DateTime restoredDate;
	            
	      StreamReader inFile = new StreamReader(fileName);
	      dateString = inFile.ReadLine();
	      inFile.Close();
	      restoredDate = DateTime.Parse(dateString, null, DateTimeStyles.RoundtripKind);
	      Console.WriteLine("Read {0} ({2}) from {1}.", restoredDate.ToString(), 
	                                                    fileName, 
	                                                    restoredDate.Kind.ToString());
	   }
	   
	   private static void RoundTripDateTimeOffset()
	   {
	      const string fileName = @".\DateOff.txt";
	
	      StreamWriter outFile = new StreamWriter(fileName);
	
	      DateTimeOffset dateToSave = new DateTimeOffset(2008, 6, 12, 18, 45, 15, 
	                                                     new TimeSpan(7, 0, 0));
	      string dateString = dateToSave.ToString("o");      
	      Console.WriteLine("Converted {0} to {1}.", dateToSave.ToString(), 
	                        dateString);      
	      outFile.WriteLine(dateString);
	      Console.WriteLine("Wrote {0} to {1}.", dateString, fileName);
	      outFile.Close();
	            
	      DateTimeOffset restoredDateOff;
	            
	      StreamReader inFile = new StreamReader(fileName);
	      dateString = inFile.ReadLine();
	      inFile.Close();
	      restoredDateOff = DateTimeOffset.Parse(dateString, null, 
	                                             DateTimeStyles.RoundtripKind);
	      Console.WriteLine("Read {0} from {1}.", restoredDateOff.ToString(), 
	                        fileName);
	   }
	
	   private static void RoundTripTimeWithTimeZone()
	   {
	      const string fileName = @".\DateWithTz.dat";
	
	      DateTime tempDate = new DateTime(2008, 9, 3, 19, 0, 0);
	      TimeZoneInfo tempTz = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
	      DateInTimeZone dateWithTz = new DateInTimeZone(new DateTimeOffset(tempDate, 
	                                      tempTz.GetUtcOffset(tempDate)), 
	                                      tempTz);
	                                      
	      FileStream outFile = new FileStream(fileName, FileMode.Create);
	      try
	      {
	         BinaryFormatter formatter = new BinaryFormatter();
	         formatter.Serialize(outFile, dateWithTz);
	         Console.WriteLine("Saving {0} {1} to {2}", dateWithTz.DateAndTime, 
	                           dateWithTz.TimeZone.IsDaylightSavingTime(dateWithTz.DateAndTime) ? 
	                           dateWithTz.TimeZone.DaylightName : dateWithTz.TimeZone.DaylightName, 
	                           fileName);
	      }
	      catch (SerializationException)
	      {
	         Console.WriteLine("Unable to serialize time data to {0}.", fileName);
	      }
	      finally
	      {         
	         outFile.Close();
	      }
	   
	      if (File.Exists(fileName))
	      {
	         FileStream inFile = new FileStream(fileName, FileMode.Open);
	         DateInTimeZone dateWithTz2 = new DateInTimeZone();
	         try
	         {
	            BinaryFormatter formatter = new BinaryFormatter();
	            dateWithTz2 = formatter.Deserialize(inFile) as DateInTimeZone;   
	            Console.WriteLine("Restored {0} {1} from {2}", dateWithTz2.DateAndTime, 
	                              dateWithTz2.TimeZone.IsDaylightSavingTime(dateWithTz2.DateAndTime) ? 
	                              dateWithTz2.TimeZone.DaylightName : dateWithTz2.TimeZone.DaylightName, 
	                              fileName);
	         }
	         catch (SerializationException)
	         {
	            Console.WriteLine("Unable to retrieve date and time information from {0}", 
	                              fileName);
	         }
	         finally
	         {
	            inFile.Close();
	         }
	      }
	   }
	}
	
	[Serializable] public class DateInTimeZone
	{
	   private TimeZoneInfo tz;
	   private DateTimeOffset thisDate;
	   
	   public DateInTimeZone() {}
	
	   public DateInTimeZone(DateTimeOffset date, TimeZoneInfo timeZone)
	   {
	      if (timeZone == null) 
	         throw new ArgumentNullException("The time zone cannot be null.");
	
	      this.thisDate = date;
	      this.tz = timeZone;
	   }
	   
	   public DateTimeOffset DateAndTime
	   {
	      get { 
	         return this.thisDate;
	      }
	      set {
	         if (value.Offset != this.tz.GetUtcOffset(value)) 
	            this.thisDate = TimeZoneInfo.ConvertTime(value, tz);
	         else
	            this.thisDate = value;
	      }
	   }
	   
	   public TimeZoneInfo TimeZone
	   {
	      get {
	         return this.tz;
	      }
	   }
	}

snippet cryptography_xml_xmlencminimaldecryptdata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_XMLEncMinimalDecryptData/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	
	        XmlDocument xmlDoc = new XmlDocument();
	
	        try
	        {
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	            return;
	        }
	
	        TripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();
	
	
	        try
	        {
	            Encrypt(xmlDoc, "creditcard", tDESkey);
	
	            Console.WriteLine("Encrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	
	            Decrypt(xmlDoc, tDESkey);
	
	            Console.WriteLine();
	            Console.WriteLine("Decrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	            tDESkey.Clear();
	        }
	
	    }
	
	    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, SymmetricAlgorithm Alg)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (ElementToEncrypt == null)
	            throw new ArgumentNullException("ElementToEncrypt");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	
	
	        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	
	        if (elementToEncrypt == null)
	        {
	            throw new XmlException("The specified element was not found");
	
	        }
	
	
	        EncryptedXml eXml = new EncryptedXml();
	
	        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, Alg, false);
	
	
	
	        EncryptedData edElement = new EncryptedData();
	        edElement.Type = EncryptedXml.XmlEncElementUrl;
	
	
	        string encryptionMethod = null;
	
	        if (Alg is TripleDES)
	        {
	            encryptionMethod = EncryptedXml.XmlEncTripleDESUrl;
	        }
	        else if (Alg is DES)
	        {
	            encryptionMethod = EncryptedXml.XmlEncDESUrl;
	        }
	        else if (Alg is Rijndael)
	        {
	            switch (Alg.KeySize)
	            {
	                case 128:
	                    encryptionMethod = EncryptedXml.XmlEncAES128Url;
	                    break;
	                case 192:
	                    encryptionMethod = EncryptedXml.XmlEncAES192Url;
	                    break;
	                case 256:
	                    encryptionMethod = EncryptedXml.XmlEncAES256Url;
	                    break;
	            }
	        }
	        else
	        {
	            throw new CryptographicException("The specified algorithm is not supported for XML Encryption.");
	        }
	
	        edElement.EncryptionMethod = new EncryptionMethod(encryptionMethod);
	
	        edElement.CipherData.CipherValue = encryptedElement;
	
	
	        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	
	    }
	
	    public static void Decrypt(XmlDocument Doc, SymmetricAlgorithm Alg)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	
	        XmlElement encryptedElement = Doc.GetElementsByTagName("EncryptedData")[0] as XmlElement;
	
	        if (encryptedElement == null)
	        {
	            throw new XmlException("The EncryptedData element was not found.");
	        }
	
	        EncryptedData edElement = new EncryptedData();
	        edElement.LoadXml(encryptedElement);
	
	        EncryptedXml exml = new EncryptedXml();
	
	        byte[] rgbOutput = exml.DecryptData(edElement, Alg);
	
	        exml.ReplaceData(encryptedElement, rgbOutput);
	
	    }
	
	
	}
snippet eventlogproperties

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/source.cs

	
	using System;
	using System.IO;
	using System.Globalization;
	using System.Data;
	using System.Diagnostics;
	using Microsoft.Win32;
	
	namespace EventLogSamples
	{
	    class EventLogProperties
	    {
	        [STAThread]
	        static void Main(string[] args)
	        {
	            DisplayEventLogProperties();
	
	            Console.WriteLine();
	            Console.WriteLine("Enter the name of an event log to change the");
	            Console.WriteLine("overflow policy (or press Enter to exit): ");
	            String input = Console.ReadLine();
	
	            if (!String.IsNullOrEmpty(input))
	            {
	                ChangeEventLogOverflowAction(input);
	            }
	        }
	
	
	        static void GetNewOverflowSetting(ref OverflowAction newOverflow,
	            ref Int32 numDays)
	        {
	
	            Console.Write("Enter the new overflow policy setting [");
	            Console.Write(" OverwriteOlder,");
	            Console.Write(" DoNotOverwrite,");
	            Console.Write(" OverwriteAsNeeded");
	            Console.WriteLine("] : ");
	    
	            String input = Console.ReadLine();
	
	            if (!String.IsNullOrEmpty(input))
	            {
	                switch (input.Trim().ToUpper(CultureInfo.InvariantCulture))
	                {
	                    case "OVERWRITEOLDER":
	                        newOverflow = OverflowAction.OverwriteOlder;
	                        Console.WriteLine("Enter the number of days to retain events: ");
	                        input = Console.ReadLine();
	                        if ((!Int32.TryParse(input, out numDays)) ||
	                            (numDays == 0))
	                        {
	                            Console.WriteLine("  Invalid input, defaulting to 7 days.");
	                            numDays = 7;
	                        }
	                        break;
	                    case "DONOTOVERWRITE":
	                        newOverflow = OverflowAction.DoNotOverwrite;
	                        break;
	                    case "OVERWRITEASNEEDED":
	                        newOverflow = OverflowAction.OverwriteAsNeeded;
	                        break;
	                    default:
	                        Console.WriteLine("Unrecognized overflow policy value.");
	                        break;
	                }
	
	            }
	            Console.WriteLine();
	        }
	
	
	        static void DisplayEventLogProperties()
	        {
	
	            EventLog[] eventLogs = EventLog.GetEventLogs();
	            foreach (EventLog e in eventLogs)
	            {
	                Int64 sizeKB = 0;
	
	                Console.WriteLine();
	                Console.WriteLine("{0}:", e.LogDisplayName);
	                Console.WriteLine("  Log name = \t\t {0}", e.Log); 
	
	                Console.WriteLine("  Number of event log entries = {0}", e.Entries.Count.ToString());
	                            
	                RegistryKey regEventLog = Registry.LocalMachine.OpenSubKey("System\\CurrentControlSet\\Services\\EventLog\\" + e.Log);
	                if (regEventLog != null)
	                {
	                    Object temp = regEventLog.GetValue("File");
	                    if (temp != null)
	                    {
	                        Console.WriteLine("  Log file path = \t {0}", temp.ToString());
	                        FileInfo file = new FileInfo(temp.ToString());
	
	                        if (file.Exists)
	                        {
	                            sizeKB = file.Length / 1024;
	                            if ((file.Length % 1024) != 0)
	                            {
	                                sizeKB++;
	                            }
	                            Console.WriteLine("  Current size = \t {0} kilobytes", sizeKB.ToString());
	                        }
	                    }
	                    else
	                    {
	                        Console.WriteLine("  Log file path = \t <not set>");
	                    }
	                }
	                            
	
	                sizeKB = e.MaximumKilobytes;
	                Console.WriteLine("  Maximum size = \t {0} kilobytes", sizeKB.ToString());
	                Console.WriteLine("  Overflow setting = \t {0}", e.OverflowAction.ToString());
	
	                switch (e.OverflowAction)
	                {
	                    case OverflowAction.OverwriteOlder:
	                        Console.WriteLine("\t Entries are retained a minimum of {0} days.", 
	                            e.MinimumRetentionDays);
	                        break;
	                    case OverflowAction.DoNotOverwrite:
	                        Console.WriteLine("\t Older entries are not overwritten.");
	                        break;
	                    case OverflowAction.OverwriteAsNeeded:
	                        Console.WriteLine("\t If number of entries equals max size limit, a new event log entry overwrites the oldest entry.");
	                        break;
	                    default:
	                        break;
	                }
	            }
	        }
	
	        public static void ChangeEventLogOverflowAction(String logName)
	        {
	            if (EventLog.Exists(logName))
	            {
	                EventLog inputLog = new EventLog(logName);
	                Console.WriteLine("  Event log {0}", inputLog.Log);
	
	                OverflowAction logOverflow = inputLog.OverflowAction;
	                Int32 numDays = inputLog.MinimumRetentionDays;
	
	                Console.WriteLine("  Current overflow setting = {0}",
	                    logOverflow.ToString());
	                if (logOverflow == OverflowAction.OverwriteOlder)
	                {
	                    Console.WriteLine("\t Entries are retained a minimum of {0} days.", 
	                        numDays.ToString());
	                }
	
	                GetNewOverflowSetting(ref logOverflow, ref numDays);
	
	                if (logOverflow != inputLog.OverflowAction)
	                {
	                    inputLog.ModifyOverflowPolicy(logOverflow, numDays);
	                    Console.WriteLine("Event log overflow policy was modified successfully!");
	                }
	                else 
	                {
	                    Console.WriteLine("Event log overflow policy was not modified.");
	                }
	            }
	            else 
	            {
	                Console.WriteLine("Event log {0} was not found.", logName);
	            }
	        }
	    }
	}
snippet objectmodel_collectioninherited

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ObjectModel_CollectionInherited/source.cs

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	
	public class Dinosaurs : Collection<string>
	{
	    public event EventHandler<DinosaursChangedEventArgs> Changed;
	
	    protected override void InsertItem(int index, string newItem)
	    {
	        base.InsertItem(index, newItem);
	
	        EventHandler<DinosaursChangedEventArgs> temp = Changed;
	        if (temp != null)
	        {
	            temp(this, new DinosaursChangedEventArgs(
	                ChangeType.Added, newItem, null));
	        }
	    }
	
	    protected override void SetItem(int index, string newItem)
	    {
	        string replaced = Items[index];
	        base.SetItem(index, newItem);
	
	        EventHandler<DinosaursChangedEventArgs> temp = Changed;
	        if (temp != null)
	        {
	            temp(this, new DinosaursChangedEventArgs(
	                ChangeType.Replaced, replaced, newItem));
	        }
	    }
	
	    protected override void RemoveItem(int index)
	    {
	        string removedItem = Items[index];
	        base.RemoveItem(index);
	
	        EventHandler<DinosaursChangedEventArgs> temp = Changed;
	        if (temp != null)
	        {
	            temp(this, new DinosaursChangedEventArgs(
	                ChangeType.Removed, removedItem, null));
	        }
	    }
	
	    protected override void ClearItems()
	    {
	        base.ClearItems();
	
	        EventHandler<DinosaursChangedEventArgs> temp = Changed;
	        if (temp != null)
	        {
	            temp(this, new DinosaursChangedEventArgs(
	                ChangeType.Cleared, null, null));
	        }
	    }
	}
	
	public class DinosaursChangedEventArgs : EventArgs
	{
	    public readonly string ChangedItem;
	    public readonly ChangeType ChangeType;
	    public readonly string ReplacedWith;
	
	    public DinosaursChangedEventArgs(ChangeType change, string item, 
	        string replacement)
	    {
	        ChangeType = change;
	        ChangedItem = item;
	        ReplacedWith = replacement;
	    }
	}
	
	public enum ChangeType
	{
	    Added, 
	    Removed, 
	    Replaced, 
	    Cleared
	};
	
	public class Demo
	{
	    public static void Main()
	    {
	        Dinosaurs dinosaurs = new Dinosaurs();
	
	        dinosaurs.Changed += ChangedHandler; 
	
	        dinosaurs.Add("Psitticosaurus");
	        dinosaurs.Add("Caudipteryx");
	        dinosaurs.Add("Compsognathus");
	        dinosaurs.Add("Muttaburrasaurus");
	
	        Display(dinosaurs);
	    
	        Console.WriteLine("\nIndexOf(\"Muttaburrasaurus\"): {0}", 
	            dinosaurs.IndexOf("Muttaburrasaurus"));
	
	        Console.WriteLine("\nContains(\"Caudipteryx\"): {0}", 
	            dinosaurs.Contains("Caudipteryx"));
	
	        Console.WriteLine("\nInsert(2, \"Nanotyrannus\")");
	        dinosaurs.Insert(2, "Nanotyrannus");
	
	        Console.WriteLine("\ndinosaurs[2]: {0}", dinosaurs[2]);
	
	        Console.WriteLine("\ndinosaurs[2] = \"Microraptor\"");
	        dinosaurs[2] = "Microraptor";
	
	        Console.WriteLine("\nRemove(\"Microraptor\")");
	        dinosaurs.Remove("Microraptor");
	
	        Console.WriteLine("\nRemoveAt(0)");
	        dinosaurs.RemoveAt(0);
	
	        Display(dinosaurs);
	    }
	    
	    private static void Display(Collection<string> cs)
	    {
	        Console.WriteLine();
	        foreach( string item in cs )
	        {
	            Console.WriteLine(item);
	        }
	    }
	
	    private static void ChangedHandler(object source, 
	        DinosaursChangedEventArgs e)
	    {
	
	        if (e.ChangeType==ChangeType.Replaced)
	        {
	            Console.WriteLine("{0} was replaced with {1}", e.ChangedItem, 
	                e.ReplacedWith);
	        }
	        else if(e.ChangeType==ChangeType.Cleared)
	        {
	            Console.WriteLine("The dinosaur list was cleared.");
	        }
	        else
	        {
	            Console.WriteLine("{0} was {1}.", e.ChangedItem, e.ChangeType);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Psitticosaurus was Added.
	Caudipteryx was Added.
	Compsognathus was Added.
	Muttaburrasaurus was Added.
	
	Psitticosaurus
	Caudipteryx
	Compsognathus
	Muttaburrasaurus
	
	IndexOf("Muttaburrasaurus"): 3
	
	Contains("Caudipteryx"): True
	
	Insert(2, "Nanotyrannus")
	Nanotyrannus was Added.
	
	dinosaurs[2]: Nanotyrannus
	
	dinosaurs[2] = "Microraptor"
	Nanotyrannus was replaced with Microraptor
	
	Remove("Microraptor")
	Microraptor was Removed.
	
	RemoveAt(0)
	Psitticosaurus was Removed.
	
	Caudipteryx
	Compsognathus
	Muttaburrasaurus
	 */
	
	

snippet cryptography_xml_xmldsigxpathtransform

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_XmlDsigXPathTransform/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	using System.Security.Cryptography.Xml;
	using System.Text;
	using System.Xml;
	
	public class SignVerifyEnvelope
	{
	
	    public static void Main(String[] args)
	    {
	        RSACryptoServiceProvider Key = new RSACryptoServiceProvider();
	
	        try
	        {
	            CreateSomeXml("Example.xml");
	            Console.WriteLine("New XML file created.");
	
	            SignXmlFile("Example.xml", "SignedExample.xml", Key, "ancestor-or-self::TempElement");
	            Console.WriteLine("XML file signed.");
	
	            Console.WriteLine("Verifying signature...");
	            bool result = VerifyXmlFile("SignedExample.xml");
	
	            if (result)
	            {
	                Console.WriteLine("The XML signature is valid.");
	            }
	            else
	            {
	                Console.WriteLine("The XML signature is not valid.");
	            }
	        }
	        catch (CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	            Key.Clear();
	        }
	    }
	
	    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string XPathString)
	    {
	        XmlDocument doc = new XmlDocument();
	
	        doc.PreserveWhitespace = false;
	
	        doc.Load(new XmlTextReader(FileName));
	
	        SignedXml signedXml = new SignedXml(doc);
	
	        signedXml.SigningKey = Key;
	
	        Reference reference = new Reference();
	        reference.Uri = "";
	
	
	        XmlDsigXPathTransform XPathTransform = CreateXPathTransform(XPathString);
	        
	        reference.AddTransform(XPathTransform);
	
	        signedXml.AddReference(reference);
	
	        KeyInfo keyInfo = new KeyInfo();
	        keyInfo.AddClause(new RSAKeyValue((RSA)Key));
	        signedXml.KeyInfo = keyInfo;
	
	        signedXml.ComputeSignature();
	
	        XmlElement xmlDigitalSignature = signedXml.GetXml();
	
	        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));
	
	        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));
	        doc.WriteTo(xmltw);
	        xmltw.Close();
	    }
	    public static Boolean VerifyXmlFile(String Name)
	    {
	        XmlDocument xmlDocument = new XmlDocument();
	
	        xmlDocument.PreserveWhitespace = true;
	
	        xmlDocument.Load(Name);
	
	        SignedXml signedXml = new SignedXml(xmlDocument);
	
	        XmlNodeList nodeList = xmlDocument.GetElementsByTagName("Signature");
	
	        signedXml.LoadXml((XmlElement)nodeList[0]);
	
	        return signedXml.CheckSignature();
	
	    }
	
	    private static XmlDsigXPathTransform CreateXPathTransform(string XPathString)
	    {
	        XmlDocument doc = new XmlDocument();
	
	        XmlElement xPathElem = doc.CreateElement("XPath");
	
	        xPathElem.InnerText = XPathString;
	
	        XmlDsigXPathTransform xForm = new XmlDsigXPathTransform();
	
	        xForm.LoadInnerXml(xPathElem.SelectNodes("."));
	
	        return xForm;
	    }
	
	    public static void CreateSomeXml(string FileName)
	    {
	        XmlDocument document = new XmlDocument();
	
	        XmlNode node = document.CreateNode(XmlNodeType.Element, "", "MyXML", "Don't_Sign");
	
	        document.AppendChild(node);
	
	        XmlNode subnode = document.CreateNode(XmlNodeType.Element, "", "TempElement", "Sign");
	
	        subnode.InnerText = "Here is some data to sign.";
	
	        document.DocumentElement.AppendChild(subnode);
	
	        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));
	        document.WriteTo(xmltw);
	        xmltw.Close();
	    }
	}
snippet generic_sortedlist

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedList/source.cs

	using System;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        SortedList<string, string> openWith = 
	            new SortedList<string, string>();
	
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	
	        try
	        {
	            openWith.Add("txt", "winword.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("An element with Key = \"txt\" already exists.");
	        }
	
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["rtf"] = "winword.exe";
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["doc"] = "winword.exe";
	
	        try
	        {
	            Console.WriteLine("For key = \"tif\", value = {0}.", 
	                openWith["tif"]);
	        }
	        catch (KeyNotFoundException)
	        {
	            Console.WriteLine("Key = \"tif\" is not found.");
	        }
	
	        string value = "";
	        if (openWith.TryGetValue("tif", out value))
	        {
	            Console.WriteLine("For key = \"tif\", value = {0}.", value);
	        }
	        else
	        {
	            Console.WriteLine("Key = \"tif\" is not found.");
	        }
	
	        if (!openWith.ContainsKey("ht"))
	        {
	            openWith.Add("ht", "hypertrm.exe");
	            Console.WriteLine("Value added for key = \"ht\": {0}", 
	                openWith["ht"]);
	        }
	
	        Console.WriteLine();
	        foreach( KeyValuePair<string, string> kvp in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	                kvp.Key, kvp.Value);
	        }
	
	        IList<string> ilistValues = openWith.Values;
	
	        Console.WriteLine();
	        foreach( string s in ilistValues )
	        {
	            Console.WriteLine("Value = {0}", s);
	        }
	
	        Console.WriteLine("\nIndexed retrieval using the Values " +
	            "property: Values[2] = {0}", openWith.Values[2]);
	
	        IList<string> ilistKeys = openWith.Keys;
	
	        Console.WriteLine();
	        foreach( string s in ilistKeys )
	        {
	            Console.WriteLine("Key = {0}", s);
	        }
	
	        Console.WriteLine("\nIndexed retrieval using the Keys " +
	            "property: Keys[2] = {0}", openWith.Keys[2]);
	
	        Console.WriteLine("\nRemove(\"doc\")");
	        openWith.Remove("doc");
	
	        if (!openWith.ContainsKey("doc"))
	        {
	            Console.WriteLine("Key \"doc\" is not found.");
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	An element with Key = "txt" already exists.
	For key = "rtf", value = wordpad.exe.
	For key = "rtf", value = winword.exe.
	Key = "tif" is not found.
	Key = "tif" is not found.
	Value added for key = "ht": hypertrm.exe
	
	Key = bmp, Value = paint.exe
	Key = dib, Value = paint.exe
	Key = doc, Value = winword.exe
	Key = ht, Value = hypertrm.exe
	Key = rtf, Value = winword.exe
	Key = txt, Value = notepad.exe
	
	Value = paint.exe
	Value = paint.exe
	Value = winword.exe
	Value = hypertrm.exe
	Value = winword.exe
	Value = notepad.exe
	
	Indexed retrieval using the Values property: Values[2] = winword.exe
	
	Key = bmp
	Key = dib
	Key = doc
	Key = ht
	Key = rtf
	Key = txt
	
	Indexed retrieval using the Keys property: Keys[2] = doc
	
	Remove("doc")
	Key "doc" is not found.
	 */
	
	

snippet cryptowalkthru

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CryptoWalkThru/Form1.Designer.cs

	namespace CryptoWalkThru
	{
	    partial class Form1
	    {
	        private System.ComponentModel.IContainer components = null;
	
	        protected override void Dispose(bool disposing)
	        {
	            if (disposing && (components != null))
	            {
	                components.Dispose();
	            }
	            base.Dispose(disposing);
	        }
	
	        #region Windows Form Designer generated code
	
	        private void InitializeComponent()
	        {
	            this.CloseButton = new System.Windows.Forms.Button();
	            this.buttonDecryptFile = new System.Windows.Forms.Button();
	            this.groupBox3 = new System.Windows.Forms.GroupBox();
	            this.buttonEncryptFile = new System.Windows.Forms.Button();
	            this.openFileDialog1 = new System.Windows.Forms.OpenFileDialog();
	            this.buttonCreateAsmKeys = new System.Windows.Forms.Button();
	            this.openFileDialog2 = new System.Windows.Forms.OpenFileDialog();
	            this.grpAsmKeys = new System.Windows.Forms.GroupBox();
	            this.buttonGetPrivateKey = new System.Windows.Forms.Button();
	            this.buttonImportPublicKey = new System.Windows.Forms.Button();
	            this.buttonExportPublicKey = new System.Windows.Forms.Button();
	            this.label1 = new System.Windows.Forms.Label();
	            this.groupBox3.SuspendLayout();
	            this.grpAsmKeys.SuspendLayout();
	            this.SuspendLayout();
	            this.CloseButton.Location = new System.Drawing.Point(139, 281);
	            this.CloseButton.Name = "CloseButton";
	            this.CloseButton.Size = new System.Drawing.Size(75, 23);
	            this.CloseButton.TabIndex = 14;
	            this.CloseButton.Text = "Close";
	            this.CloseButton.UseVisualStyleBackColor = true;
	            this.CloseButton.Click += new System.EventHandler(this.Close_Click);
	            this.buttonDecryptFile.Location = new System.Drawing.Point(23, 48);
	            this.buttonDecryptFile.Name = "buttonDecryptFile";
	            this.buttonDecryptFile.Size = new System.Drawing.Size(110, 23);
	            this.buttonDecryptFile.TabIndex = 31;
	            this.buttonDecryptFile.Text = "Decrypt File";
	            this.buttonDecryptFile.UseVisualStyleBackColor = true;
	            this.buttonDecryptFile.Click += new System.EventHandler(this.buttonDecryptFile_Click);
	            this.groupBox3.Controls.Add(this.buttonEncryptFile);
	            this.groupBox3.Controls.Add(this.buttonDecryptFile);
	            this.groupBox3.Location = new System.Drawing.Point(32, 12);
	            this.groupBox3.Name = "groupBox3";
	            this.groupBox3.Size = new System.Drawing.Size(160, 85);
	            this.groupBox3.TabIndex = 34;
	            this.groupBox3.TabStop = false;
	            this.groupBox3.Text = "Encryption";
	            this.buttonEncryptFile.Location = new System.Drawing.Point(23, 19);
	            this.buttonEncryptFile.Name = "buttonEncryptFile";
	            this.buttonEncryptFile.Size = new System.Drawing.Size(110, 23);
	            this.buttonEncryptFile.TabIndex = 0;
	            this.buttonEncryptFile.Text = "Encrypt File";
	            this.buttonEncryptFile.UseVisualStyleBackColor = true;
	            this.buttonEncryptFile.Click += new System.EventHandler(this.buttonEncryptFile_Click);
	            this.openFileDialog1.Filter = "All files (*.*)|*.*";
	            this.openFileDialog1.InitialDirectory = "c:\\meow";
	            this.buttonCreateAsmKeys.Location = new System.Drawing.Point(23, 19);
	            this.buttonCreateAsmKeys.Name = "buttonCreateAsmKeys";
	            this.buttonCreateAsmKeys.Size = new System.Drawing.Size(110, 23);
	            this.buttonCreateAsmKeys.TabIndex = 37;
	            this.buttonCreateAsmKeys.Text = "Create Keys";
	            this.buttonCreateAsmKeys.UseVisualStyleBackColor = true;
	            this.buttonCreateAsmKeys.Click += new System.EventHandler(this.buttonCreateAsmKeys_Click);
	            this.openFileDialog2.Filter = "Encrypted files (*.enc) | *.enc|All files (*.*)|*.*";
	            this.openFileDialog2.InitialDirectory = "c:\\encrypt";
	            this.grpAsmKeys.Controls.Add(this.buttonGetPrivateKey);
	            this.grpAsmKeys.Controls.Add(this.buttonImportPublicKey);
	            this.grpAsmKeys.Controls.Add(this.buttonExportPublicKey);
	            this.grpAsmKeys.Controls.Add(this.buttonCreateAsmKeys);
	            this.grpAsmKeys.Location = new System.Drawing.Point(31, 103);
	            this.grpAsmKeys.Name = "grpAsmKeys";
	            this.grpAsmKeys.Size = new System.Drawing.Size(160, 138);
	            this.grpAsmKeys.TabIndex = 42;
	            this.grpAsmKeys.TabStop = false;
	            this.grpAsmKeys.Text = "Asymetric Keys";
	            this.buttonGetPrivateKey.Location = new System.Drawing.Point(23, 107);
	            this.buttonGetPrivateKey.Name = "buttonGetPrivateKey";
	            this.buttonGetPrivateKey.Size = new System.Drawing.Size(110, 23);
	            this.buttonGetPrivateKey.TabIndex = 40;
	            this.buttonGetPrivateKey.Text = "Get Private Key";
	            this.buttonGetPrivateKey.UseVisualStyleBackColor = true;
	            this.buttonGetPrivateKey.Click += new System.EventHandler(this.buttonGetPrivateKey_Click);
	            this.buttonImportPublicKey.Location = new System.Drawing.Point(23, 78);
	            this.buttonImportPublicKey.Name = "buttonImportPublicKey";
	            this.buttonImportPublicKey.Size = new System.Drawing.Size(110, 23);
	            this.buttonImportPublicKey.TabIndex = 39;
	            this.buttonImportPublicKey.Text = "Import Public Key";
	            this.buttonImportPublicKey.UseVisualStyleBackColor = true;
	            this.buttonImportPublicKey.Click += new System.EventHandler(this.buttonImportPublicKey_Click);
	            this.buttonExportPublicKey.Location = new System.Drawing.Point(23, 48);
	            this.buttonExportPublicKey.Name = "buttonExportPublicKey";
	            this.buttonExportPublicKey.Size = new System.Drawing.Size(110, 23);
	            this.buttonExportPublicKey.TabIndex = 38;
	            this.buttonExportPublicKey.Text = "Export Public Key";
	            this.buttonExportPublicKey.UseVisualStyleBackColor = true;
	            this.buttonExportPublicKey.Click += new System.EventHandler(this.buttonExportPublicKey_Click);
	            this.label1.AutoSize = true;
	            this.label1.Location = new System.Drawing.Point(9, 256);
	            this.label1.Name = "label1";
	            this.label1.Size = new System.Drawing.Size(63, 13);
	            this.label1.TabIndex = 41;
	            this.label1.Text = "Key not set.";
	            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
	            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
	            this.ClientSize = new System.Drawing.Size(226, 316);
	            this.Controls.Add(this.label1);
	            this.Controls.Add(this.grpAsmKeys);
	            this.Controls.Add(this.groupBox3);
	            this.Controls.Add(this.CloseButton);
	            this.Name = "Form1";
	            this.Text = "CryptoWalkThru";
	            this.groupBox3.ResumeLayout(false);
	            this.grpAsmKeys.ResumeLayout(false);
	            this.ResumeLayout(false);
	            this.PerformLayout();
	
	        }
	
	        #endregion
	
	        private System.Windows.Forms.Button CloseButton;
	        private System.Windows.Forms.Button buttonDecryptFile;
	        private System.Windows.Forms.GroupBox groupBox3;
	        private System.Windows.Forms.Button buttonEncryptFile;
	        private System.Windows.Forms.OpenFileDialog openFileDialog1;
	        private System.Windows.Forms.Button buttonCreateAsmKeys;
	        private System.Windows.Forms.OpenFileDialog openFileDialog2;
	        private System.Windows.Forms.GroupBox grpAsmKeys;
	        private System.Windows.Forms.Button buttonExportPublicKey;
	        private System.Windows.Forms.Button buttonImportPublicKey;
	        private System.Windows.Forms.Button buttonGetPrivateKey;
	        private System.Windows.Forms.Label label1;
	    }
	}
	

snippet cryptography_xml_xmlencmapkey

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_XMLEncMapKey/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	
	        XmlDocument xmlDoc = new XmlDocument();
	
	        try
	        {
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	            return;
	        }
	
	        TripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();
	
	
	        try
	        {
	            Encrypt(xmlDoc, "creditcard", tDESkey, "tDESKey");
	
	            Console.WriteLine("Encrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	
	            Decrypt(xmlDoc, tDESkey, "tDESKey");
	
	            Console.WriteLine();
	            Console.WriteLine("Decrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	            tDESkey.Clear();
	        }
	
	    }
	
	    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, SymmetricAlgorithm Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (ElementToEncrypt == null)
	            throw new ArgumentNullException("ElementToEncrypt");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	
	
	        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	
	        if (elementToEncrypt == null)
	        {
	            throw new XmlException("The specified element was not found");
	
	        }
	
	
	        EncryptedXml eXml = new EncryptedXml();
	
	        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, Alg, false);
	
	
	
	        EncryptedData edElement = new EncryptedData();
	        edElement.Type = EncryptedXml.XmlEncElementUrl;
	
	
	        string encryptionMethod = null;
	
	        if (Alg is TripleDES)
	        {
	            encryptionMethod = EncryptedXml.XmlEncTripleDESUrl;
	        }
	        else if (Alg is DES)
	        {
	            encryptionMethod = EncryptedXml.XmlEncDESUrl;
	        }
	        else if (Alg is Rijndael)
	        {
	            switch (Alg.KeySize)
	            {
	                case 128:
	                    encryptionMethod = EncryptedXml.XmlEncAES128Url;
	                    break;
	                case 192:
	                    encryptionMethod = EncryptedXml.XmlEncAES192Url;
	                    break;
	                case 256:
	                    encryptionMethod = EncryptedXml.XmlEncAES256Url;
	                    break;
	            }
	        }
	        else
	        {
	            throw new CryptographicException("The specified algorithm is not supported for XML Encryption.");
	        }
	
	        edElement.EncryptionMethod = new EncryptionMethod(encryptionMethod);
	
	
	        edElement.KeyInfo = new KeyInfo();
	
	        KeyInfoName kin = new KeyInfoName();
	
	        kin.Value = KeyName;
	
	        edElement.KeyInfo.AddClause(kin);
	
	        edElement.CipherData.CipherValue = encryptedElement;
	
	
	        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	
	    }
	
	    public static void Decrypt(XmlDocument Doc, SymmetricAlgorithm Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	        if (KeyName == null)
	            throw new ArgumentNullException("KeyName");
	
	        EncryptedXml exml = new EncryptedXml(Doc);
	
	        exml.AddKeyNameMapping(KeyName, Alg);
	
	        exml.DecryptDocument();
	
	    }
	
	
	}
snippet cryptography_xml_xmldsigxslttransform

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_XmlDsigXsltTransform/sample.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	using System.Security.Cryptography.Xml;
	using System.Text;
	using System.Xml;
	
	public class SignVerifyEnvelope
	{
	
	    public static void Main(String[] args)
	    {
	        RSACryptoServiceProvider Key = new RSACryptoServiceProvider();
	
	        string xsl = @"
	        <xs:template match='/'>
	            <xs:apply-templates/>
	        </xs:template>
	        <xs:template match='ElementToTransform'> 
	            <transformedElement/>
	        </xs:template>
	    </xs:transform>";
	
	        try
	        {
	            CreateSomeXml("Example.xml");
	            Console.WriteLine("New XML file created.");
	
	            SignXmlFile("Example.xml", "SignedExample.xml", Key, xsl);
	            Console.WriteLine("XML file signed.");
	
	            Console.WriteLine("Verifying signature...");
	            bool result = VerifyXmlFile("SignedExample.xml");
	
	            if (result)
	            {
	                Console.WriteLine("The XML signature is valid.");
	            }
	            else
	            {
	                Console.WriteLine("The XML signature is not valid.");
	            }
	        }
	        catch (CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	            Key.Clear();
	        }
	
	    }
	
	    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string XSLString)
	    {
	        XmlDocument doc = new XmlDocument();
	
	        doc.PreserveWhitespace = false;
	
	        doc.Load(new XmlTextReader(FileName));
	
	        SignedXml signedXml = new SignedXml(doc);
	
	        signedXml.SigningKey = Key;
	
	        Reference reference = new Reference();
	        reference.Uri = "";
	
	        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
	        reference.AddTransform(env);
	
	
	        XmlDsigXsltTransform XsltTransform = CreateXsltTransform(XSLString);
	
	        reference.AddTransform(XsltTransform);
	
	        signedXml.AddReference(reference);
	
	        KeyInfo keyInfo = new KeyInfo();
	        keyInfo.AddClause(new RSAKeyValue((RSA)Key));
	        signedXml.KeyInfo = keyInfo;
	
	        signedXml.ComputeSignature();
	
	        XmlElement xmlDigitalSignature = signedXml.GetXml();
	
	        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));
	
	        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));
	        doc.WriteTo(xmltw);
	        xmltw.Close();
	    }
	    public static Boolean VerifyXmlFile(String Name)
	    {
	        XmlDocument xmlDocument = new XmlDocument();
	
	        xmlDocument.PreserveWhitespace = true;
	
	        xmlDocument.Load(Name);
	
	        SignedXml signedXml = new SignedXml(xmlDocument);
	
	        XmlNodeList nodeList = xmlDocument.GetElementsByTagName("Signature");
	
	        signedXml.LoadXml((XmlElement)nodeList[0]);
	
	        return signedXml.CheckSignature();
	
	    }
	
	    public static XmlDsigXsltTransform CreateXsltTransform(string xsl)
	    {
	        XmlDocument doc = new XmlDocument();
	        doc.LoadXml(xsl);
	
	        XmlDsigXsltTransform xform = new XmlDsigXsltTransform();
	        xform.LoadInnerXml(doc.ChildNodes);
	
	        return xform;
	    }
	
	    public static void CreateSomeXml(string FileName)
	    {
	        XmlDocument document = new XmlDocument();
	
	        XmlNode node = document.CreateNode(XmlNodeType.Element, "", "MyXML", "Don't_Sign");
	
	        document.AppendChild(node);
	
	        XmlNode subnode = document.CreateNode(XmlNodeType.Element, "", "ElementToTransform", "Sign");
	
	        subnode.InnerText = "Here is some data to sign.";
	
	        document.DocumentElement.AppendChild(subnode);
	
	        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));
	        document.WriteTo(xmltw);
	        xmltw.Close();
	    }
	}

snippet dpapi_howto

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DPAPI_HowTO/sample.cs

	using System;
	using System.IO;
	using System.Text;
	using System.Security.Cryptography;
	
	public class MemoryProtectionSample
	{
	    public static void Main()
	    {
	        Run();
	    }
	
	    public static void Run()
	    {
	        try
	        {
	
	
	            byte[] toEncrypt = UnicodeEncoding.ASCII.GetBytes("ThisIsSomeData16");
	
	            Console.WriteLine("Original data: " + UnicodeEncoding.ASCII.GetString(toEncrypt));
	            Console.WriteLine("Encrypting...");
	
	            EncryptInMemoryData(toEncrypt, MemoryProtectionScope.SameLogon);
	
	            Console.WriteLine("Encrypted data: " + UnicodeEncoding.ASCII.GetString(toEncrypt));
	            Console.WriteLine("Decrypting...");
	
	            DecryptInMemoryData(toEncrypt, MemoryProtectionScope.SameLogon);
	
	            Console.WriteLine("Decrypted data: " + UnicodeEncoding.ASCII.GetString(toEncrypt));
	
	
	
	            toEncrypt = UnicodeEncoding.ASCII.GetBytes("This is some data of any length.");
	
	            FileStream fStream = new FileStream("Data.dat", FileMode.OpenOrCreate);
	
	            byte[] entropy = CreateRandomEntropy();
	
	            Console.WriteLine();
	            Console.WriteLine("Original data: " + UnicodeEncoding.ASCII.GetString(toEncrypt));
	            Console.WriteLine("Encrypting and writing to disk...");
	
	            int bytesWritten = EncryptDataToStream(toEncrypt, entropy, DataProtectionScope.CurrentUser, fStream);
	
	            fStream.Close();
	
	            Console.WriteLine("Reading data from disk and decrypting...");
	
	            fStream = new FileStream("Data.dat", FileMode.Open);
	
	            byte[] decryptData = DecryptDataFromStream(entropy, DataProtectionScope.CurrentUser, fStream, bytesWritten);
	
	            fStream.Close();
	
	            Console.WriteLine("Decrypted data: " + UnicodeEncoding.ASCII.GetString(decryptData));
	
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine("ERROR: " + e.Message);
	        }
	
	    }
	
	
	    public static void EncryptInMemoryData(byte[] Buffer, MemoryProtectionScope Scope )
	    {
	        if (Buffer == null)
	            throw new ArgumentNullException("Buffer");
	        if (Buffer.Length <= 0)
	            throw new ArgumentException("Buffer");
	        
	
	        ProtectedMemory.Protect(Buffer, Scope);
	
	    }
	
	    public static void DecryptInMemoryData(byte[] Buffer, MemoryProtectionScope Scope)
	    {
	        if (Buffer == null)
	            throw new ArgumentNullException("Buffer");
	        if (Buffer.Length <= 0)
	            throw new ArgumentException("Buffer");
	        
	
	        ProtectedMemory.Unprotect(Buffer, Scope);
	
	    }
	
	    public static byte[] CreateRandomEntropy()
	    {
	        byte[] entropy = new byte[16];
	
	        new RNGCryptoServiceProvider().GetBytes(entropy);
	
	        return entropy;
	
	
	    }
	
	    public static int EncryptDataToStream(byte[] Buffer, byte[] Entropy, DataProtectionScope Scope, Stream S)
	    {
	        if (Buffer == null)
	            throw new ArgumentNullException("Buffer");
	        if (Buffer.Length <= 0)
	            throw new ArgumentException("Buffer");
	        if (Entropy == null)
	            throw new ArgumentNullException("Entropy");
	        if (Entropy.Length <= 0)
	            throw new ArgumentException("Entropy");
	        if (S == null)
	            throw new ArgumentNullException("S");
	       
	        int length = 0;
	
	        byte[] encryptedData = ProtectedData.Protect(Buffer, Entropy, Scope);
	
	        if (S.CanWrite && encryptedData != null)
	        {
	            S.Write(encryptedData, 0, encryptedData.Length);
	
	            length = encryptedData.Length;
	        }
	
	        return length;
	        
	    }
	
	    public static byte[] DecryptDataFromStream(byte[] Entropy, DataProtectionScope Scope, Stream S, int Length)
	    {
	        if (S == null)
	            throw new ArgumentNullException("S");
	        if (Length <= 0 )
	            throw new ArgumentException("Length");
	        if (Entropy == null)
	            throw new ArgumentNullException("Entropy");
	        if (Entropy.Length <= 0)
	            throw new ArgumentException("Entropy");
	        
	
	        
	        byte[] inBuffer = new byte[Length];
	        byte[] outBuffer;
	
	        if (S.CanRead)
	        {
	            S.Read(inBuffer, 0, Length);
	
	            outBuffer = ProtectedData.Unprotect(inBuffer, Entropy, Scope);
	        }
	        else
	        {
	            throw new IOException("Could not read the stream.");
	        }
	
	        return outBuffer;
	
	    }
	
	
	}

snippet howtogeneric

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/ur.cs

	using System;
	using System.Reflection;
	using System.Collections.Generic;
	using System.Security.Permissions;
	
	public interface ITestArgument {}
	
	public class TestBase {}
	
	public class Test<T> where T : TestBase, ITestArgument, new() {}
	
	public class TestArgument : TestBase, ITestArgument
	{
	    public TestArgument() {}
	}
	
	public class Example
	{
	    private static void DisplayGenericType(Type t)
	    {
	        Console.WriteLine("\r\n {0}", t);
	        Console.WriteLine("   Is this a generic type? {0}",
	            t.IsGenericType);
	        Console.WriteLine("   Is this a generic type definition? {0}",
	            t.IsGenericTypeDefinition);
	
	        Type[] typeParameters = t.GetGenericArguments();
	
	        Console.WriteLine("   List {0} type arguments:", 
	            typeParameters.Length);
	        foreach( Type tParam in typeParameters )
	        {
	            if (tParam.IsGenericParameter)
	            {
	                DisplayGenericParameter(tParam);
	            }
	            else
	            {
	                Console.WriteLine("      Type argument: {0}",
	                    tParam);
	            }
	        }
	    }
	
	    private static void DisplayGenericParameter(Type tp)
	    {
	        Console.WriteLine("      Type parameter: {0} position {1}", 
	            tp.Name, tp.GenericParameterPosition);
	
	        Type classConstraint = null;
	
	        foreach(Type iConstraint in tp.GetGenericParameterConstraints())
	        {
	            if (iConstraint.IsInterface)
	            {
	                Console.WriteLine("         Interface constraint: {0}",
	                    iConstraint);
	            }
	        }
	
	        if (classConstraint != null)
	        {
	            Console.WriteLine("         Base type constraint: {0}", 
	                tp.BaseType);
	        }
	        else
	            Console.WriteLine("         Base type constraint: None"); 
	
	        GenericParameterAttributes sConstraints = 
	            tp.GenericParameterAttributes & 
	            GenericParameterAttributes.SpecialConstraintMask;
	
	        if (sConstraints == GenericParameterAttributes.None)
	        {
	            Console.WriteLine("         No special constraints.");
	        }
	        else
	        {
	            if (GenericParameterAttributes.None != (sConstraints &
	                GenericParameterAttributes.DefaultConstructorConstraint))
	            {
	                Console.WriteLine("         Must have a parameterless constructor.");
	            }
	            if (GenericParameterAttributes.None != (sConstraints &
	                GenericParameterAttributes.ReferenceTypeConstraint))
	            {
	                Console.WriteLine("         Must be a reference type.");
	            }
	            if (GenericParameterAttributes.None != (sConstraints &
	                GenericParameterAttributes.NotNullableValueTypeConstraint))
	            {
	                Console.WriteLine("         Must be a non-nullable value type.");
	            }
	        }
	    }
	
	    [PermissionSetAttribute(SecurityAction.Demand, Name="FullTrust")]
	    public static void Main()
	    {
	        Type d1 = typeof(Dictionary<,>);
	
	        Dictionary<string, Example> d2 = new Dictionary<string, Example>();
	        Type d3 = d2.GetType();
	        Type d4 = d3.GetGenericTypeDefinition();
	
	        DisplayGenericType(d1);
	        DisplayGenericType(d2.GetType());
	
	        Type[] typeArgs = {typeof(string), typeof(Example)};
	
	        Type constructed = d1.MakeGenericType(typeArgs);
	
	        DisplayGenericType(constructed);
	
	        object o = Activator.CreateInstance(constructed);
	
	        Console.WriteLine("\r\nCompare types obtained by different methods:");
	        Console.WriteLine("   Are the constructed types equal? {0}",
	            (d2.GetType()==constructed));
	        Console.WriteLine("   Are the generic definitions equal? {0}",
	            (d1==constructed.GetGenericTypeDefinition()));
	
	        DisplayGenericType(typeof(Test<>));
	    }
	}
	
	

snippet customattributedata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/source.cs

	using System;
	using System.Reflection;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	
	[assembly:Example(ExampleKind.ThirdKind, Note="This is a note on the assembly.")]
	
	public enum ExampleKind
	{
	    FirstKind, 
	    SecondKind, 
	    ThirdKind, 
	    FourthKind
	};
	
	[AttributeUsage(AttributeTargets.All)]
	public class ExampleAttribute : Attribute
	{
	    private ExampleKind kindValue;
	    private string noteValue;
	    private string[] arrayStrings;
	    private int[] arrayNumbers;
	
	    public ExampleAttribute(ExampleKind initKind, string[] initStrings)
	    {
	        kindValue = initKind;
	        arrayStrings = initStrings;
	    }
	    public ExampleAttribute(ExampleKind initKind) : this(initKind, null) {}
	    public ExampleAttribute() : this(ExampleKind.FirstKind, null) {}
	
	    public ExampleKind Kind { get { return kindValue; }}
	    public string[] Strings { get { return arrayStrings; }}
	    public string Note    
	    {
	        get { return noteValue; }
	        set { noteValue = value; }
	    }
	    public int[] Numbers
	    {
	        get { return arrayNumbers; }
	        set { arrayNumbers = value; }
	    }
	}
	
	[Example(ExampleKind.SecondKind, 
	         new string[] { "String array argument, line 1", 
	                        "String array argument, line 2", 
	                        "String array argument, line 3" }, 
	         Note="This is a note on the class.",
	         Numbers = new int[] { 53, 57, 59 })] 
	public class Test
	{
	    [Example(Note="This is a note on a method.")]
	    public void TestMethod([Example] object arg) { }
	
	    public static void Main()
	    {
	        Assembly asm = Assembly.ReflectionOnlyLoad("Source");
	        Type t = asm.GetType("Test");
	        MethodInfo m = t.GetMethod("TestMethod");
	        ParameterInfo[] p = m.GetParameters();
	
	        Console.WriteLine("\r\nAttributes for assembly: '{0}'", asm);
	        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm));
	        Console.WriteLine("\r\nAttributes for type: '{0}'", t);
	        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t));
	        Console.WriteLine("\r\nAttributes for member: '{0}'", m);
	        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m));
	        Console.WriteLine("\r\nAttributes for parameter: '{0}'", p);
	        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p[0]));
	    }
	
	    private static void ShowAttributeData(
	        IList<CustomAttributeData> attributes)
	    {
	        foreach( CustomAttributeData cad in attributes )
	        {
	            Console.WriteLine("   {0}", cad);
	            Console.WriteLine("      Constructor: '{0}'", cad.Constructor);
	
	            Console.WriteLine("      Constructor arguments:");
	            foreach( CustomAttributeTypedArgument cata 
	                in cad.ConstructorArguments )
	            {
	                ShowValueOrArray(cata);
	            }
	
	            Console.WriteLine("      Named arguments:");
	            foreach( CustomAttributeNamedArgument cana 
	                in cad.NamedArguments )
	            {
	                Console.WriteLine("         MemberInfo: '{0}'", 
	                    cana.MemberInfo);
	                ShowValueOrArray(cana.TypedValue);
	            }
	        }
	    }
	
	    private static void ShowValueOrArray(CustomAttributeTypedArgument cata)
	    {
	        if (cata.Value.GetType() == typeof(ReadOnlyCollection<CustomAttributeTypedArgument>))
	        {
	            Console.WriteLine("         Array of '{0}':", cata.ArgumentType);
	
	            foreach (CustomAttributeTypedArgument cataElement in 
	                (ReadOnlyCollection<CustomAttributeTypedArgument>) cata.Value)
	            {
	                Console.WriteLine("             Type: '{0}'  Value: '{1}'",
	                    cataElement.ArgumentType, cataElement.Value);
	            }
	        }
	        else
	        {
	            Console.WriteLine("         Type: '{0}'  Value: '{1}'", 
	                cata.ArgumentType, cata.Value);
	        }
	    }
	}
	
	/* This code example produces output similar to the following:
	
	Attributes for assembly: 'source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'
	   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]
	      Constructor: 'Void .ctor(Int32)'
	      Constructor arguments:
	         Type: 'System.Int32'  Value: '8'
	      Named arguments:
	   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]
	      Constructor: 'Void .ctor()'
	      Constructor arguments:
	      Named arguments:
	         MemberInfo: 'Boolean WrapNonExceptionThrows'
	         Type: 'System.Boolean'  Value: 'True'
	   [ExampleAttribute((ExampleKind)2, Note = "This is a note on the assembly.")]
	      Constructor: 'Void .ctor(ExampleKind)'
	      Constructor arguments:
	         Type: 'ExampleKind'  Value: '2'
	      Named arguments:
	         MemberInfo: 'System.String Note'
	         Type: 'System.String'  Value: 'This is a note on the assembly.'
	
	Attributes for type: 'Test'
	   [ExampleAttribute((ExampleKind)1, new String[3] { "String array argument, line 1", "String array argument, line 2", "String array argument, line 3" }, Note = "This is a note on the class.", Numbers = new Int32[3] { 53, 57, 59 })]
	      Constructor: 'Void .ctor(ExampleKind, System.String[])'
	      Constructor arguments:
	         Type: 'ExampleKind'  Value: '1'
	         Array of 'System.String[]':
	             Type: 'System.String'  Value: 'String array argument, line 1'
	             Type: 'System.String'  Value: 'String array argument, line 2'
	             Type: 'System.String'  Value: 'String array argument, line 3'
	      Named arguments:
	         MemberInfo: 'System.String Note'
	         Type: 'System.String'  Value: 'This is a note on the class.'
	         MemberInfo: 'Int32[] Numbers'
	         Array of 'System.Int32[]':
	             Type: 'System.Int32'  Value: '53'
	             Type: 'System.Int32'  Value: '57'
	             Type: 'System.Int32'  Value: '59'
	
	Attributes for member: 'Void TestMethod(System.Object)'
	   [ExampleAttribute(Note = "This is a note on a method.")]
	      Constructor: 'Void .ctor()'
	      Constructor arguments:
	      Named arguments:
	         MemberInfo: 'System.String Note'
	         Type: 'System.String'  Value: 'This is a note on a method.'
	
	Attributes for parameter: 'System.Object arg'
	   [ExampleAttribute()]
	      Constructor: 'Void .ctor()'
	      Constructor arguments:
	      Named arguments:
	*/
	
	

snippet sys_txt_encoderdecoder_convert

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/sys_txt_EncoderDecoder_convert/edCvt.cs

	
	    using System;
	    using System.Text;
	    using System.IO;
	
	    public class Sample
	    {
	    static void Main(string[] args)
	        {
	
	            CreateTestFile("Example.txt");
	
	 
	
	            EncoderConvert("Example.txt", "UTF8.txt", Encoding.UTF8);
	
	
	            DecoderConvert("UTF8.txt", "UTF16.txt", Encoding.UTF8);
	        }
	
	        static void EncoderConvert(String inputFileName, String outputFileName, Encoding enc)
	        {
	
	            FileStream fs = new FileStream(outputFileName, FileMode.Create);
	            BinaryWriter outputFile = new BinaryWriter(fs);
	
	            StreamReader inputFile = new StreamReader(inputFileName);
	
	            Encoder encoder = enc.GetEncoder();
	            
	            int UseBufferSize = 64;
	            if (UseBufferSize < enc.GetMaxByteCount(10))
	                    UseBufferSize = enc.GetMaxByteCount(10);
	            byte[] bytes = new byte[UseBufferSize];
	
	
	            char[] chars = new char[UseBufferSize * 4];
	            int charsRead;
	            do
	            {
	                charsRead = inputFile.Read(chars, 0, UseBufferSize * 4);
	   
	                bool completed = false;
	                int charIndex = 0;
	                int charsUsed;
	                int bytesUsed;
	
	                while (!completed)
	                {
	
	                    bool flush = (charsRead == 0);
	                    encoder.Convert(chars, charIndex, charsRead - charIndex,
	                                    bytes, 0, UseBufferSize, flush,
	                                    out charsUsed, out bytesUsed, out completed);
	
	                    outputFile.Write(bytes, 0, bytesUsed);
	
	                    charIndex += charsUsed;
	                }
	            }
	            while(charsRead != 0);
	
	            outputFile.Close();
	            fs.Close();
	            inputFile.Close();
	        }
	
	        static void DecoderConvert(String inputFileName, String outputFileName, Encoding enc)
	        {
	
	            StreamWriter outputFile = new StreamWriter(outputFileName, false, Encoding.Unicode);
	
	            FileStream fs = new FileStream(inputFileName, FileMode.Open);
	            BinaryReader inputFile = new BinaryReader(fs);
	
	            Decoder decoder = enc.GetDecoder();
	            
	            int UseBufferSize = 64;
	            if (UseBufferSize < enc.GetMaxCharCount(10))
	                    UseBufferSize = enc.GetMaxCharCount(10);
	            char[] chars = new char[UseBufferSize];
	
	
	            byte[] bytes = new byte[UseBufferSize * 4];
	            int bytesRead;
	            do
	            {
	
	                bytesRead = inputFile.Read(bytes, 0, UseBufferSize * 4);
	   
	                bool completed = false;
	                int byteIndex = 0;
	                int bytesUsed;
	                int charsUsed;
	
	                while (!completed)
	                {
	
	                    bool flush = (bytesRead == 0);
	                    decoder.Convert(bytes, byteIndex, bytesRead - byteIndex,
	                                    chars, 0, UseBufferSize, flush,
	                                    out bytesUsed, out charsUsed, out completed);
	
	
	                    outputFile.Write(chars, 0, charsUsed);
	
	                    byteIndex += bytesUsed;
	                }
	            }
	            while(bytesRead != 0);
	
	            outputFile.Close();
	            fs.Close();
	            inputFile.Close();
	        }        
	
	        static void CreateTestFile(String FileName)
	        {
	            StreamWriter file = new StreamWriter(FileName, false, Encoding.Unicode);
	
	            for (int i = 0; i < 100; i++)
	            {
	                file.WriteLine("This is an example input file used by the convert example.");
	            }
	
	            for (char c = (char)0; c < (char)0xD800; c++)
	            {
	                file.Write(c);
	            }
	            file.Close();
	        }
	    }
	
	/*
	This code example produces the following results:
	
	(Execute the -dir- console window command and examine the files created.)
	
	Example.txt, which contains 122,594 bytes (61,297 UTF-16 encoded characters).
	UTF8.txt, which contains 169,712 UTF-8 encoded bytes.
	UTF16.txt, which contains 122,594 bytes (61,297 UTF-16 encoded characters).
	
	(Execute the -comp- console window command and compare the two Unicode files.)
	
	>comp example.txt utf16.txt /L
	Comparing example.txt and utf16.txt...
	Files compare OK
	
	(The two files are equal.)
	
	*/
snippet cryptography_xml_encrypteddata

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_EncryptedData/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	class Program
	{
		static void Main(string[] args)
		{
	
			XmlDocument xmlDoc = new XmlDocument();
	
			try
			{
				xmlDoc.PreserveWhitespace = true;
				xmlDoc.Load("test.xml");
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
			}
	
			RSA rsaKey = new RSACryptoServiceProvider();
	
	
			try
			{
				Encrypt(xmlDoc, "creditcard", rsaKey, "rsaKey");
	
				InspectElement(xmlDoc);
	
				Decrypt(xmlDoc, rsaKey, "rsaKey");
	
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
			}
			finally
			{
				rsaKey.Clear();
			}
	
		}
	
		public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, RSA Alg, string KeyName)
		{
			if (Doc == null)
				throw new ArgumentNullException("Doc");
			if (ElementToEncrypt == null)
				throw new ArgumentNullException("ElementToEncrypt");
			if (Alg == null)
				throw new ArgumentNullException("Alg");
	
	
			XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	
			if (elementToEncrypt == null)
			{
				throw new XmlException("The specified element was not found");
	
			}
	
	
			RijndaelManaged sessionKey = new RijndaelManaged();
			sessionKey.KeySize = 256;
	
			EncryptedXml eXml = new EncryptedXml();
	
			byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);
	
	
	
			EncryptedData edElement = new EncryptedData();
			edElement.Type = EncryptedXml.XmlEncElementUrl;
	
	
			edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);
	
			EncryptedKey ek = new EncryptedKey();
	
			byte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);
	
			ek.CipherData = new CipherData(encryptedKey);
	
			ek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);
	
	
			edElement.KeyInfo = new KeyInfo();
	
			KeyInfoName kin = new KeyInfoName();
	
			kin.Value = KeyName;
	
			ek.KeyInfo.AddClause(kin);
	
	
			edElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));
	
			edElement.CipherData.CipherValue = encryptedElement;
	
	
			EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	
		}
	
		public static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)
		{
			if (Doc == null)
				throw new ArgumentNullException("Doc");
			if (Alg == null)
				throw new ArgumentNullException("Alg");
			if (KeyName == null)
				throw new ArgumentNullException("KeyName");
	
			EncryptedXml exml = new EncryptedXml(Doc);
	
			exml.AddKeyNameMapping(KeyName, Alg);
	
			exml.DecryptDocument();
	
		}
	
		static void InspectElement(XmlDocument Doc)
		{
			XmlElement encryptedData = Doc.GetElementsByTagName("EncryptedData")[0] as XmlElement;
	
			EncryptedData encData = new EncryptedData();
	
			encData.LoadXml(encryptedData);
	
	
	
			
			Console.WriteLine("EncryptedData.CipherData: " + encData.CipherData.GetXml().InnerXml);
			Console.WriteLine("EncryptedData.Encoding: " + encData.Encoding);
			Console.WriteLine("EncryptedData.EncryptionMethod: " + encData.EncryptionMethod.GetXml().InnerXml);
			if (encData.EncryptionProperties.Count >= 1)
			{
				Console.WriteLine("EncryptedData.EncryptionProperties: " + encData.EncryptionProperties[0].GetXml().InnerXml);
			}
	
			Console.WriteLine("EncryptedData.Id: " + encData.Id);
			Console.WriteLine("EncryptedData.KeyInfo: " + encData.KeyInfo.GetXml().InnerXml);
			Console.WriteLine("EncryptedData.MimeType: " + encData.MimeType);
		}
	
	}
snippet howtoencryptxmlelementsymmetric

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HowToEncryptXMLElementSymmetric/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	
	namespace CSCrypto
	{
		class Program
		{
			static void Main(string[] args)
			{
				RijndaelManaged key = null;
	
				try
				{
					key = new RijndaelManaged();
					XmlDocument xmlDoc = new XmlDocument();
					xmlDoc.PreserveWhitespace = true;
					xmlDoc.Load("test.xml");
	
					Encrypt(xmlDoc, "creditcard", key);
	
					Console.WriteLine("The element was encrypted");
	
					Console.WriteLine(xmlDoc.InnerXml);
	
					Decrypt(xmlDoc, key);
	
					Console.WriteLine("The element was decrypted");
	
					Console.WriteLine(xmlDoc.InnerXml);
	
					
				}
				catch (Exception e)
				{
					Console.WriteLine(e.Message);
				}
				finally
				{
					if (key != null)
					{
						key.Clear();
					}
				}
	
			}
	
			public static void Encrypt(XmlDocument Doc, string ElementName, SymmetricAlgorithm Key)
			{
				if (Doc == null)
					throw new ArgumentNullException("Doc");
				if (ElementName == null)
					throw new ArgumentNullException("ElementToEncrypt");
				if (Key == null)
					throw new ArgumentNullException("Alg");
	
				XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementName)[0] as XmlElement;
				if (elementToEncrypt == null)
				{
					throw new XmlException("The specified element was not found");
	
				}
	
	
				EncryptedXml eXml = new EncryptedXml();
	
				byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, Key, false);
	
				EncryptedData edElement = new EncryptedData();
				edElement.Type = EncryptedXml.XmlEncElementUrl;
	
	
				string encryptionMethod = null;
	
				if (Key is TripleDES)
				{
					encryptionMethod = EncryptedXml.XmlEncTripleDESUrl;
				}
				else if (Key is DES)
				{
					encryptionMethod = EncryptedXml.XmlEncDESUrl;
				}
				if (Key is Rijndael)
				{
					switch (Key.KeySize)
					{
						case 128:
							encryptionMethod = EncryptedXml.XmlEncAES128Url;
							break;
						case 192:
							encryptionMethod = EncryptedXml.XmlEncAES192Url;
							break;
						case 256:
							encryptionMethod = EncryptedXml.XmlEncAES256Url;
							break;
					}
				}
				else
				{
					throw new CryptographicException("The specified algorithm is not supported for XML Encryption.");
				}
	
				edElement.EncryptionMethod = new EncryptionMethod(encryptionMethod);
	
				edElement.CipherData.CipherValue = encryptedElement;
	
				EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
			}
	
			public static void Decrypt(XmlDocument Doc, SymmetricAlgorithm Alg)
			{
				if (Doc == null)
					throw new ArgumentNullException("Doc");
				if (Alg == null)
					throw new ArgumentNullException("Alg");
	
				XmlElement encryptedElement = Doc.GetElementsByTagName("EncryptedData")[0] as XmlElement;
	
				if (encryptedElement == null)
				{
					throw new XmlException("The EncryptedData element was not found.");
				}
	
				
				EncryptedData edElement = new EncryptedData();
				edElement.LoadXml(encryptedElement);
	
				EncryptedXml exml = new EncryptedXml();
				
	
				byte[] rgbOutput = exml.DecryptData(edElement, Alg);
	
				exml.ReplaceData(encryptedElement, rgbOutput);
	
			}
	
		}
	
	
	}
snippet keyedcollection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/source.cs

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	
	public class SimpleOrder : KeyedCollection<int, OrderItem>
	{
	       
	    protected override int GetKeyForItem(OrderItem item)
	    {
	        return item.PartNumber;
	    }
	}
	
	public class Demo
	{    
	    public static void Main()
	    {
	        SimpleOrder weekly = new SimpleOrder();
	
	        weekly.Add(new OrderItem(110072674, "Widget", 400, 45.17));
	        weekly.Add(new OrderItem(110072675, "Sprocket", 27, 5.3));
	        weekly.Add(new OrderItem(101030411, "Motor", 10, 237.5));
	        weekly.Add(new OrderItem(110072684, "Gear", 175, 5.17));
	        
	        Display(weekly);
	    
	        Console.WriteLine("\nContains(101030411): {0}", 
	            weekly.Contains(101030411));
	
	        Console.WriteLine("\nweekly[101030411].Description: {0}", 
	            weekly[101030411].Description);
	
	        Console.WriteLine("\nRemove(101030411)");
	        weekly.Remove(101030411);
	        Display(weekly);
	
	        Console.WriteLine("\nInsert(2, New OrderItem(...))");
	        weekly.Insert(2, new OrderItem(111033401, "Nut", 10, .5));
	        Display(weekly);
	
	        Collection<OrderItem> coweekly = weekly;
	        Console.WriteLine("\ncoweekly[2].Description: {0}", 
	            coweekly[2].Description);
	 
	        Console.WriteLine("\ncoweekly[2] = new OrderItem(...)");
	        coweekly[2] = new OrderItem(127700026, "Crank", 27, 5.98);
	
	        OrderItem temp = coweekly[2];
	
	        Console.WriteLine("\nIndexOf(temp): {0}", weekly.IndexOf(temp));
	
	        Console.WriteLine("\nRemove(temp)");
	        weekly.Remove(temp);
	        Display(weekly);
	
	        Console.WriteLine("\nRemoveAt(0)");
	        weekly.RemoveAt(0);
	        Display(weekly);
	
	    }
	    
	    private static void Display(SimpleOrder order)
	    {
	        Console.WriteLine();
	        foreach( OrderItem item in order )
	        {
	            Console.WriteLine(item);
	        }
	    }
	}
	
	public class OrderItem
	{
	    public readonly int PartNumber;
	    public readonly string Description;
	    public readonly double UnitPrice;
	    
	    private int _quantity = 0;
	    
	    public OrderItem(int partNumber, string description, 
	        int quantity, double unitPrice)
	    {
	        this.PartNumber = partNumber;
	        this.Description = description;
	        this.Quantity = quantity;
	        this.UnitPrice = unitPrice;
	    } 
	    
	    public int Quantity    
	    {
	        get { return _quantity; }
	        set
	        {
	            if (value<0)
	                throw new ArgumentException("Quantity cannot be negative.");
	            
	            _quantity = value;
	        }
	    }
	        
	    public override string ToString()
	    {
	        return String.Format(
	            "{0,9} {1,6} {2,-12} at {3,8:#,###.00} = {4,10:###,###.00}", 
	            PartNumber, _quantity, Description, UnitPrice, 
	            UnitPrice * _quantity);
	    }
	}
	
	/* This code example produces the following output:
	
	110072674    400 Widget       at    45.17 =  18,068.00
	110072675     27 Sprocket     at     5.30 =     143.10
	101030411     10 Motor        at   237.50 =   2,375.00
	110072684    175 Gear         at     5.17 =     904.75
	
	Contains(101030411): True
	
	weekly[101030411].Description: Motor
	
	Remove(101030411)
	
	110072674    400 Widget       at    45.17 =  18,068.00
	110072675     27 Sprocket     at     5.30 =     143.10
	110072684    175 Gear         at     5.17 =     904.75
	
	Insert(2, New OrderItem(...))
	
	110072674    400 Widget       at    45.17 =  18,068.00
	110072675     27 Sprocket     at     5.30 =     143.10
	111033401     10 Nut          at      .50 =       5.00
	110072684    175 Gear         at     5.17 =     904.75
	
	coweekly[2].Description: Nut
	
	coweekly[2] = new OrderItem(...)
	
	IndexOf(temp): 2
	
	Remove(temp)
	
	110072674    400 Widget       at    45.17 =  18,068.00
	110072675     27 Sprocket     at     5.30 =     143.10
	110072684    175 Gear         at     5.17 =     904.75
	
	RemoveAt(0)
	
	110072675     27 Sprocket     at     5.30 =     143.10
	110072684    175 Gear         at     5.17 =     904.75
	 */
	
	

snippet cryptography_xml_encryptedkey

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_EncryptedKey/example.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	class Program
	{
		static void Main(string[] args)
		{
	
			XmlDocument xmlDoc = new XmlDocument();
	
			try
			{
				xmlDoc.PreserveWhitespace = true;
				xmlDoc.Load("test.xml");
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
			}
	
			RSA rsaKey = new RSACryptoServiceProvider();
	
	
			try
			{
				Encrypt(xmlDoc, "creditcard", rsaKey, "rsaKey");
	
				InspectElement(xmlDoc);
	
				Decrypt(xmlDoc, rsaKey, "rsaKey");
	
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
			}
			finally
			{
				rsaKey.Clear();
			}
	
		}
	
		public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, RSA Alg, string KeyName)
		{
			if (Doc == null)
				throw new ArgumentNullException("Doc");
			if (ElementToEncrypt == null)
				throw new ArgumentNullException("ElementToEncrypt");
			if (Alg == null)
				throw new ArgumentNullException("Alg");
	
	
			XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	
			if (elementToEncrypt == null)
			{
				throw new XmlException("The specified element was not found");
	
			}
	
	
			RijndaelManaged sessionKey = new RijndaelManaged();
			sessionKey.KeySize = 256;
	
			EncryptedXml eXml = new EncryptedXml();
	
			byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);
	
	
	
			EncryptedData edElement = new EncryptedData();
			edElement.Type = EncryptedXml.XmlEncElementUrl;
	
	
			edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);
	
			EncryptedKey ek = new EncryptedKey();
	
			byte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);
	
			ek.CipherData = new CipherData(encryptedKey);
	
			ek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);
	
	
			edElement.KeyInfo = new KeyInfo();
	
			KeyInfoName kin = new KeyInfoName();
	
			kin.Value = KeyName;
	
			ek.KeyInfo.AddClause(kin);
	
	
			edElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));
	
			edElement.CipherData.CipherValue = encryptedElement;
	
	
			EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	
		}
	
		public static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)
		{
			if (Doc == null)
				throw new ArgumentNullException("Doc");
			if (Alg == null)
				throw new ArgumentNullException("Alg");
			if (KeyName == null)
				throw new ArgumentNullException("KeyName");
	
			EncryptedXml exml = new EncryptedXml(Doc);
	
			exml.AddKeyNameMapping(KeyName, Alg);
	
			exml.DecryptDocument();
	
		}
	
		static void InspectElement(XmlDocument Doc)
		{
			XmlElement encryptedKey = Doc.GetElementsByTagName("EncryptedKey")[0] as XmlElement;
	
			EncryptedKey k = new EncryptedKey();
	
			k.LoadXml(encryptedKey);
	
			Console.WriteLine("EncryptedKey.KeyInfo: " + k.KeyInfo.GetXml().InnerXml);
			Console.WriteLine("EncryptedKey.Id: " + k.Id);
			Console.WriteLine("EncryptedKey.CarriedKeyName: " + k.CarriedKeyName);
			Console.WriteLine("EncryptedKey.CipherData: " + k.CipherData.GetXml().InnerXml);
			Console.WriteLine("EncryptedKey.Encoding: " + k.Encoding);
			Console.WriteLine("EncryptedKey.EncryptionMethod: " + k.EncryptionMethod.GetXml().InnerXml);
			if (k.EncryptionProperties.Count >= 1)
			{
				Console.WriteLine("EncryptedKey.EncryptionProperties: " + k.EncryptionProperties[0].GetXml().InnerXml);
			}
			Console.WriteLine("EncryptedKey.MimeType: " + k.MimeType);
			Console.WriteLine("EncryptedKey.Recipient: " + k.Recipient);
	
			if (k.ReferenceList.Count >= 1)
			{
				Console.WriteLine("EncryptedKey.ReferenceList: " + k.ReferenceList[0].GetXml().InnerXml);
			}
		}
	
	}
snippet permission

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Permission/Permission.cs

	using System;
	using System.Security;
	using System.Security.Permissions;
	using System.Reflection;
	
	[Serializable]
	public enum SoundPermissionState
	{
	    NoSound = 0,
	    PlaySystemSounds = 1,
	    PlayAnySound = 2
	}
	
	
	public sealed class SoundPermission : CodeAccessPermission, IPermission,
	    IUnrestrictedPermission, ISecurityEncodable, ICloneable
	{
	    private Boolean m_specifiedAsUnrestricted = false;
	    private SoundPermissionState m_flags = SoundPermissionState.NoSound;
	
	    public SoundPermission(PermissionState state)
	    {
	        m_specifiedAsUnrestricted = (state == PermissionState.Unrestricted);
	    }
	
	    public SoundPermission(SoundPermissionState flags)
	    {
	        if (!Enum.IsDefined(typeof(SoundPermissionState), flags))
	            throw new ArgumentException
	                ("flags value is not valid for the SoundPermissionState enuemrated type");
	        m_specifiedAsUnrestricted = false;
	        m_flags = flags;
	    }
	
	    public override String ToString() { return ToXml().ToString(); }
	
	    private SoundPermission VerifyTypeMatch(IPermission target)
	    {
	        if (GetType() != target.GetType())
	            throw new ArgumentException(String.Format("target must be of the {0} type",
	                GetType().FullName));
	        return (SoundPermission)target;
	    }
	
	    private SoundPermission Clone(Boolean specifiedAsUnrestricted, SoundPermissionState flags)
	    {
	        SoundPermission soundPerm = (SoundPermission)Clone();
	        soundPerm.m_specifiedAsUnrestricted = specifiedAsUnrestricted;
	        soundPerm.m_flags = specifiedAsUnrestricted ? SoundPermissionState.PlayAnySound : m_flags;
	        return soundPerm;
	    }
	
	    #region IPermission Members
	    public override IPermission Intersect(IPermission target)
	    {
	        if (target == null) return null;
	
	        SoundPermission soundPerm = VerifyTypeMatch(target);
	
	        if (m_specifiedAsUnrestricted && soundPerm.m_specifiedAsUnrestricted)
	            return Clone(true, SoundPermissionState.PlayAnySound);
	
	        SoundPermissionState val = (SoundPermissionState)
	            Math.Min((Int32)m_flags, (Int32)soundPerm.m_flags);
	        if (val == 0) return null;
	
	        return Clone(false, val);
	    }
	
	    public override Boolean IsSubsetOf(IPermission target)
	    {
	        if (target == null) return m_flags == 0;
	
	        SoundPermission soundPerm = VerifyTypeMatch(target);
	
	        return m_flags <= soundPerm.m_flags;
	    }
	
	    public sealed override IPermission Copy()
	    {
	        return (IPermission)Clone();
	    }
	
	    public override IPermission Union(IPermission target)
	    {
	        if (target == null) return Copy();
	
	        SoundPermission soundPerm = VerifyTypeMatch(target);
	
	        if (m_specifiedAsUnrestricted || soundPerm.m_specifiedAsUnrestricted)
	            return Clone(true, SoundPermissionState.PlayAnySound);
	
	        return Clone(false, (SoundPermissionState)
	            Math.Max((Int32)m_flags, (Int32)soundPerm.m_flags));
	    }
	    #endregion
	
	    #region ISecurityEncodable Members
	    public override void FromXml(SecurityElement e)
	    {
	        m_specifiedAsUnrestricted = false;
	        m_flags = 0;
	
	        String s = (String)e.Attributes["Unrestricted"];
	        if (s != null)
	        {
	            m_specifiedAsUnrestricted = Convert.ToBoolean(s);
	            if (m_specifiedAsUnrestricted)
	                m_flags = SoundPermissionState.PlayAnySound;
	        }
	
	        if (!m_specifiedAsUnrestricted)
	        {
	            s = (String)e.Attributes["Flags"];
	            if (s != null)
	            {
	                m_flags = (SoundPermissionState)
	                Convert.ToInt32(Enum.Parse(typeof(SoundPermission), s, true));
	            }
	        }
	    }
	
	    public override SecurityElement ToXml()
	    {
	        SecurityElement e = new SecurityElement("IPermission");
	        e.AddAttribute("class", GetType().AssemblyQualifiedName.Replace('\"', '\''));
	        e.AddAttribute("version", "1");
	
	        if (!m_specifiedAsUnrestricted)
	            e.AddAttribute("Flags", Enum.Format(typeof(SoundPermissionState), m_flags, "G"));
	        else
	            e.AddAttribute("Unrestricted", "true");
	        return e;
	    }
	    #endregion
	
	    #region IUnrestrictedPermission Members
	    public Boolean IsUnrestricted()
	    {
	        return m_flags == SoundPermissionState.PlayAnySound;
	    }
	    #endregion
	
	    #region ICloneable Members
	
	    public Object Clone() { return MemberwiseClone(); }
	
	    #endregion
	}
snippet timer_stop

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Timer_Stop/source.cs

	using System;
	using System.Timers;
	using System.Threading;
	
	public class Test
	{    
	    private static int testRuns = 100;
	    private static int testRunsFor = 500;
	    private static int timerIntervalBase = 100;
	    private static int timerIntervalDelta = 20;
	
	    private static System.Timers.Timer Timer1 = new System.Timers.Timer();
	    private static System.Timers.Timer Timer2 = new System.Timers.Timer();
	    private static System.Timers.Timer currentTimer = null;
	
	    private static Random rand = new Random();
	
	    private static int syncPoint = 0;
	
	    private static int numEvents = 0;
	    private static int numExecuted = 0;
	    private static int numSkipped = 0;
	    private static int numLate = 0;
	
	    private static int numWaits = 0;
	
	    [MTAThread]
	    public static void Main()
	    {
	        Timer1.Elapsed += new ElapsedEventHandler(Timer1_ElapsedEventHandler);
	        Timer2.Elapsed += new ElapsedEventHandler(Timer2_ElapsedEventHandler);
	
	        Console.WriteLine();
	        for(int i = 1; i <= testRuns; i++)
	        {
	            TestRun();
	            Console.Write("\rTest {0}/{1}    ", i, testRuns);
	        }
	
	        Console.WriteLine("{0} test runs completed.", testRuns);
	        Console.WriteLine("{0} events were raised.", numEvents);
	        Console.WriteLine("{0} events executed.", numExecuted);
	        Console.WriteLine("{0} events were skipped for concurrency.", numSkipped);
	        Console.WriteLine("{0} events were skipped because they were late.", numLate);
	        Console.WriteLine("Control thread waited {0} times for an event to complete.", numWaits);
	    }
	
	    public static void TestRun()
	    {
	        syncPoint = 0;
	
	        if (currentTimer == Timer1)
	            currentTimer = Timer2;
	        else
	            currentTimer = Timer1;
	
	        currentTimer.Interval = timerIntervalBase 
	            - timerIntervalDelta + rand.Next(timerIntervalDelta * 2);
	        currentTimer.Enabled = true;
	
	        Thread t = new Thread(ControlThreadProc);
	        t.Start();
	
	        t.Join();
	
	    }
	
	
	    private static void ControlThreadProc()
	    {
	        Thread.Sleep(testRunsFor);
	        currentTimer.Stop();
	
	        bool counted = false;
	
	        while (Interlocked.CompareExchange(ref syncPoint, -1, 0) != 0)
	        {
	            Thread.Sleep(1);
	
	            if (!counted)
	            {
	                numWaits += 1;
	                counted = true;
	            }
	        }
	
	    }
	
	
	    private static void Timer1_ElapsedEventHandler(object sender, 
	        ElapsedEventArgs e)
	    {
	        HandleElapsed(sender, e);
	    }
	
	    private static void Timer2_ElapsedEventHandler(object sender, 
	        ElapsedEventArgs e)
	    {
	        HandleElapsed(sender, e);
	    }
	
	    private static void HandleElapsed(object sender, ElapsedEventArgs e)
	    {
	        numEvents += 1;
	
	        int sync = Interlocked.CompareExchange(ref syncPoint, 1, 0);
	        if (sync == 0)
	        {
	            int delay = timerIntervalBase 
	                - timerIntervalDelta / 2 + rand.Next(timerIntervalDelta);
	            Thread.Sleep(delay);
	            numExecuted += 1;
	
	            syncPoint = 0;
	        }
	        else
	        {
	            if (sync == 1) { numSkipped += 1; } else { numLate += 1; }
	        }
	    }
	}
	
	/* On a dual-processor computer, this code example produces
	   results similar to the following:
	
	Test 100/100    100 test runs completed.
	436 events were raised.
	352 events executed.
	84 events were skipped for concurrency.
	0 events were skipped because they were late.
	Control thread waited 77 times for an event to complete.
	 */
	
	
	

snippet conceptual_attributes_usage

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_attributes_usage/source2.cs

	using System;
	
	namespace CustomCodeAttributes
	{
	    [AttributeUsage(AttributeTargets.All)]
	    public class DeveloperAttribute : Attribute
	    {
	        private string name;
	        private string level;
	        private bool reviewed;
	
	
	        public DeveloperAttribute(string name, string level)
	        {
	            this.name = name;
	            this.level = level;
	            this.reviewed = false;
	        }
	
	
	        public virtual string Name
	        {
	            get {return name;}
	        }
	
	
	        public virtual string Level
	        {
	            get {return level;}
	        }
	
	
	        public virtual bool Reviewed
	        {
	            get {return reviewed;}
	            set {reviewed = value;}
	        }
	    }
	}
	
	namespace CustomCodeAttributes_Examples1
	{
	    [AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = true)]
	    public class DummyAttribute1 : Attribute
	    {
	    }
	
	    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
	    public class DummyAttribute2 : Attribute
	    {
	    }
	
	    public class MyAttribute : Attribute
	    {
	    }
	
	    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
	    public class YourAttribute : Attribute
	    {
	    }
	
	    public class MyClass
	    {
	        [MyAttribute]
	        [YourAttribute]
	        public virtual void MyMethod()
	        {
	        }
	    }
	
	    public class YourClass : MyClass
	    {
	        public override void MyMethod()
	        {
	        }
	
	    }
	}
	
	namespace CustomCodeAttributes_Examples2
	{
	    public class MyAttribute : Attribute
	    {
	    }
	
	    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
	    public class YourAttribute : Attribute
	    {
	    }
	
	#if false
	    [Developer("Joan Smith", "1")]
	    
	    -or-
	    
	    [Developer("Joan Smith", "1", Reviewed = true)]
	
	    public class MyClass
	    {
	        [MyAttribute]
	        [MyAttribute]
	        public void MyMethod()
	        {
	        }
	
	        [YourAttribute]
	        [YourAttribute]
	        public void YourMethod()
	        {
	        }
	    }
	#endif
	}
	
	namespace CustomCodeAttributes_Examples3
	{
	    [AttributeUsage(AttributeTargets.Method)]
	    public class MyAttribute : Attribute
	    {
	    }
	}
	
	namespace CustomCodeAttributes_Examples4
	{
	    public class MyAttribute : Attribute
	    {
	        private bool myvalue;
	        private string myoptional;
	
	        public MyAttribute(bool myvalue)
	        {
	            this.myvalue = myvalue;
	        }
	
	        public bool MyProperty
	        {
	            get {return this.myvalue;}
	            set {this.myvalue = value;}
	        }
	
	        public string OptionalParameter
	        {
	            get {return this.myoptional;}
	            set {this.myoptional = value;}
	        }
	    }
	
	    [MyAttribute(false, OptionalParameter = "optional data")]
	    public class SomeClass
	    {
	    }
	    [MyAttribute(false)]
	    public class SomeOtherClass
	    {
	    }
	}
	

snippet list`1_find_methods

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/program.cs

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Xml.Linq;
	
	namespace Find
	{
	    class Program
	    {
	        private static string IDtoFind = "bk109";
	
	        private static List<Book> Books = new List<Book>();
	        public static void Main(string[] args)
	        {
	            FillList();
	            
	            Book result = Books.Find(
	            delegate(Book bk)
	            {
	                return bk.ID == IDtoFind;
	            }
	            );
	            if (result != null)
	            {
	                DisplayResult(result, "Find by ID: " + IDtoFind);   
	            }
	            else
	            {
	                Console.WriteLine("\nNot found: {0}", IDtoFind);
	            }
	
	
	            result = Books.FindLast(
	            delegate(Book bk)
	            {
	                DateTime year2001 = new DateTime(2001,01,01);
	                return bk.Publish_date < year2001;
	            });
	            if (result != null)
	            {
	                DisplayResult(result, "Last book in collection published before 2001:");
	            }
	            else
	            {
	                Console.WriteLine("\nNot found: {0}", IDtoFind);
	            }
	
	
	            List<Book> results = Books.FindAll(FindComputer);
	            if (results.Count != 0)
	            {
	                DisplayResults(results, "All computer:");
	            }
	            else
	            {
	                Console.WriteLine("\nNo books found.");
	            }
	
	            results = Books.FindAll(
	            delegate(Book bk)
	            {
	                return bk.Price < 10.00;
	            }
	            );
	            if (results.Count != 0)
	            {
	                DisplayResults(results, "Books under $10:");
	            }
	            else
	            {
	                Console.WriteLine("\nNo books found.");
	            }
	            
	
	            Console.WriteLine();
	            int ndx = Books.FindIndex(FindComputer);
	            Console.WriteLine("Index of first computer book: {0}", ndx);
	            ndx = Books.FindLastIndex(FindComputer);
	            Console.WriteLine("Index of last computer book: {0}", ndx);
	
	            int mid = Books.Count / 2;
	            ndx = Books.FindIndex(mid, mid, FindComputer);
	            Console.WriteLine("Index of first computer book in the second half of the collection: {0}", ndx);
	            
	            ndx = Books.FindLastIndex(Books.Count - 1, mid, FindComputer);
	            Console.WriteLine("Index of last computer book in the second half of the collection: {0}", ndx);
	
	        }
	
	
	
	
	
	        private static void FillList()
	        {
	            
	            XElement xTree = XElement.Load(@"c:\temp\books.xml");
	
	            IEnumerable<XElement> elements = xTree.Elements();
	
	            foreach (XElement el in elements)
	            {
	                Book book = new Book();
	                book.ID = el.Attribute("id").Value;
	                IEnumerable<XElement> props = el.Elements();
	                foreach (XElement p in props)
	                {
	
	
	                    if (p.Name.ToString().ToLower() == "author")
	                    {
	                        book.Author = p.Value;
	                    }
	                    else if (p.Name.ToString().ToLower() == "title")
	                    {
	                        book.Title = p.Value;
	                    }
	                    else if (p.Name.ToString().ToLower() == "genre")
	                    {
	                        book.Genre = p.Value;
	                    }
	                    else if (p.Name.ToString().ToLower() == "price")
	                    {
	                        book.Price = Convert.ToDouble(p.Value);
	                    }
	                    else if (p.Name.ToString().ToLower() == "publish_date")
	                    {
	                        book.Publish_date = Convert.ToDateTime(p.Value);
	                    }
	                    else if (p.Name.ToString().ToLower() == "description")
	                    {
	                        book.Description = p.Value;
	                    }
	                }
	
	                Books.Add(book);
	
	            }
	
	            DisplayResults(Books, "All books:");
	
	        }
	
	        private static bool FindComputer(Book bk)
	        {
	
	            if (bk.Genre == "Computer")
	            {
	                return true;
	            }
		    else
	            {
	                return false;
	            }
	
	        }
	
	        private static void DisplayResult(Book result, string title)
	        {
	            Console.WriteLine();
	            Console.WriteLine(title);
	            Console.WriteLine("\n{0}\t{1}\t{2}\t{3}\t{4}\t{5}", result.ID,
	                result.Author, result.Title, result.Genre, result.Price,
	                result.Publish_date.ToShortDateString());
	            Console.WriteLine();
	
	
	        }
	
	        private static void DisplayResults(List<Book> results, string title)
	        {
	            Console.WriteLine();
	            Console.WriteLine(title);
	            foreach (Book b in results)
	            {
	
	                Console.Write("\n{0}\t{1}\t{2}\t{3}\t{4}\t{5}", b.ID,
	                    b.Author, b.Title, b.Genre, b.Price,
	                    b.Publish_date.ToShortDateString());
	            }
	            Console.WriteLine();
	
	        }
	
	    }
	
	    public class Book
	    {
	        public string ID { get; set; }
	        public string Author { get; set; }
	        public string Title { get; set; }
	        public string Genre { get; set; }
	        public double Price { get; set; }
	        public DateTime Publish_date { get; set; }
	        public string Description { get; set; }
	    }
	}

snippet conceptual_interop_marshaling

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_interop_marshaling/arrays.cs

	using System;
	using System.Runtime.InteropServices;
	
	[StructLayout(LayoutKind.Sequential)]
	public struct MyPoint
	{
	    public int X;
	    public int Y;
	
	    public MyPoint(int x, int y)
	    {
	        this.X = x;
	        this.Y = y;
	    }
	}
	
	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
	public struct MyPerson
	{
	    public string First;
	    public string Last;
	
	    public MyPerson(string first, string last)
	    {
	        this.First = first;
	        this.Last = last;
	    }
	}
	
	public class LibWrap
	{
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern int TestArrayOfInts(
	        [In, Out] int[] array, int size);
	
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern int TestRefArrayOfInts(
	        ref IntPtr array, ref int size);
	
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern int TestMatrixOfInts(
	        [In, Out] int[,] pMatrix, int row);
	
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern int TestArrayOfstrings(
	        [In, Out] string[] stringArray, int size);
	
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern int TestArrayOfStructs(
	        [In, Out] MyPoint[] pointArray, int size);
	
	    [DllImport("..\\LIB\\PinvokeLib.dll", CallingConvention = CallingConvention.Cdecl)]
	    public static extern int TestArrayOfStructs2(
	        [In, Out] MyPerson[] personArray, int size);
	}
	
	public class App
	{
	    public static void Main()
	    {
	        int[] array1 = new int[10];
	        Console.WriteLine("Integer array passed ByVal before call:");
	        for (int i = 0; i < array1.Length; i++)
	        {
	            array1[i] = i;
	            Console.Write(" " + array1[i]);
	        }
	
	        int sum1 = LibWrap.TestArrayOfInts(array1, array1.Length);
	        Console.WriteLine("\nSum of elements:" + sum1);
	        Console.WriteLine("\nInteger array passed ByVal after call:");
	
	        foreach (int i in array1)
	        {
	            Console.Write(" " + i);
	        }
	
	        int[] array2 = new int[10];
	        int size = array2.Length;
	        Console.WriteLine("\n\nInteger array passed ByRef before call:");
	        for (int i = 0; i < array2.Length; i++)
	        {
	            array2[i] = i;
	            Console.Write(" " + array2[i]);
	        }
	
	        IntPtr buffer = Marshal.AllocCoTaskMem(Marshal.SizeOf(size)
	           * array2.Length);
	        Marshal.Copy(array2, 0, buffer, array2.Length);
	
	        int sum2 = LibWrap.TestRefArrayOfInts(ref buffer, ref size);
	        Console.WriteLine("\nSum of elements:" + sum2);
	        if (size > 0)
	        {
	            int[] arrayRes = new int[size];
	            Marshal.Copy(buffer, arrayRes, 0, size);
	            Marshal.FreeCoTaskMem(buffer);
	            Console.WriteLine("\nInteger array passed ByRef after call:");
	            foreach (int i in arrayRes)
	            {
	                Console.Write(" " + i);
	            }
	        }
	        else
	        {
	            Console.WriteLine("\nArray after call is empty");
	        }
	
	        const int DIM = 5;
	        int[,] matrix = new int[DIM, DIM];
	
	        Console.WriteLine("\n\nMatrix before call:");
	        for (int i = 0; i < DIM; i++)
	        {
	            for (int j = 0; j < DIM; j++)
	            {
	                matrix[i, j] = j;
	                Console.Write(" " + matrix[i, j]);
	            }
	
	            Console.WriteLine("");
	        }
	
	        int sum3 = LibWrap.TestMatrixOfInts(matrix, DIM);
	        Console.WriteLine("\nSum of elements:" + sum3);
	        Console.WriteLine("\nMatrix after call:");
	        for (int i = 0; i < DIM; i++)
	        {
	            for (int j = 0; j < DIM; j++)
	            {
	                Console.Write(" " + matrix[i, j]);
	            }
	
	            Console.WriteLine("");
	        }
	
	        string[] strArray = { "one", "two", "three", "four", "five" };
	        Console.WriteLine("\n\nstring array before call:");
	        foreach (string s in strArray)
	        {
	            Console.Write(" " + s);
	        }
	
	        int lenSum = LibWrap.TestArrayOfstrings(strArray, strArray.Length);
	        Console.WriteLine("\nSum of string lengths:" + lenSum);
	        Console.WriteLine("\nstring array after call:");
	        foreach (string s in strArray)
	        {
	            Console.Write(" " + s);
	        }
	
	        MyPoint[] points = { new MyPoint(1, 1), new MyPoint(2, 2), new MyPoint(3, 3) };
	        Console.WriteLine("\n\nPoints array before call:");
	        foreach (MyPoint p in points)
	        {
	            Console.WriteLine($"X = {p.X}, Y = {p.Y}");
	        }
	
	        int allSum = LibWrap.TestArrayOfStructs(points, points.Length);
	        Console.WriteLine("\nSum of points:" + allSum);
	        Console.WriteLine("\nPoints array after call:");
	        foreach (MyPoint p in points)
	        {
	            Console.WriteLine($"X = {p.X}, Y = {p.Y}");
	        }
	
	        MyPerson[] persons =
	        {
	            new MyPerson("Kim", "Akers"),
	            new MyPerson("Adam", "Barr"),
	            new MyPerson("Jo", "Brown")
	        };
	
	        Console.WriteLine("\n\nPersons array before call:");
	        foreach (MyPerson pe in persons)
	        {
	            Console.WriteLine($"First = {pe.First}, Last = {pe.Last}");
	        }
	
	        int namesSum = LibWrap.TestArrayOfStructs2(persons, persons.Length);
	        Console.WriteLine("\nSum of name lengths:" + namesSum);
	        Console.WriteLine("\n\nPersons array after call:");
	        foreach (MyPerson pe in persons)
	        {
	            Console.WriteLine($"First = {pe.First}, Last = {pe.Last}");
	        }
	    }
	}

snippet conceptual_resources_portablemetro

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetro/richtextcolumns.cs

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Threading.Tasks;
	using Windows.Foundation;
	using Windows.UI.Xaml;
	using Windows.UI.Xaml.Controls;
	using Windows.UI.Xaml.Data;
	using Windows.UI.Xaml.Documents;
	
	namespace ConsumerCS.Common
	{
	    [Windows.UI.Xaml.Markup.ContentProperty(Name = "RichTextContent")]
	    public sealed class RichTextColumns : Panel
	    {
	        public static readonly DependencyProperty RichTextContentProperty =
	            DependencyProperty.Register("RichTextContent", typeof(RichTextBlock),
	            typeof(RichTextColumns), new PropertyMetadata(null, ResetOverflowLayout));
	
	        public static readonly DependencyProperty ColumnTemplateProperty =
	            DependencyProperty.Register("ColumnTemplate", typeof(DataTemplate),
	            typeof(RichTextColumns), new PropertyMetadata(null, ResetOverflowLayout));
	
	        public RichTextColumns()
	        {
	            this.HorizontalAlignment = HorizontalAlignment.Left;
	        }
	
	        public RichTextBlock RichTextContent
	        {
	            get { return (RichTextBlock)GetValue(RichTextContentProperty); }
	            set { SetValue(RichTextContentProperty, value); }
	        }
	
	        public DataTemplate ColumnTemplate
	        {
	            get { return (DataTemplate)GetValue(ColumnTemplateProperty); }
	            set { SetValue(ColumnTemplateProperty, value); }
	        }
	
	        private static void ResetOverflowLayout(DependencyObject d, DependencyPropertyChangedEventArgs e)
	        {
	            var target = d as RichTextColumns;
	            if (target != null)
	            {
	                target._overflowColumns = null;
	                target.Children.Clear();
	                target.InvalidateMeasure();
	            }
	        }
	
	        private List<RichTextBlockOverflow> _overflowColumns = null;
	
	        protected override Size MeasureOverride(Size availableSize)
	        {
	            if (this.RichTextContent == null) return new Size(0, 0);
	
	            if (this._overflowColumns == null)
	            {
	                Children.Add(this.RichTextContent);
	                this._overflowColumns = new List<RichTextBlockOverflow>();
	            }
	
	            this.RichTextContent.Measure(availableSize);
	            var maxWidth = this.RichTextContent.DesiredSize.Width;
	            var maxHeight = this.RichTextContent.DesiredSize.Height;
	            var hasOverflow = this.RichTextContent.HasOverflowContent;
	
	            int overflowIndex = 0;
	            while (hasOverflow && maxWidth < availableSize.Width && this.ColumnTemplate != null)
	            {
	                RichTextBlockOverflow overflow;
	                if (this._overflowColumns.Count > overflowIndex)
	                {
	                    overflow = this._overflowColumns[overflowIndex];
	                }
	                else
	                {
	                    overflow = (RichTextBlockOverflow)this.ColumnTemplate.LoadContent();
	                    this._overflowColumns.Add(overflow);
	                    this.Children.Add(overflow);
	                    if (overflowIndex == 0)
	                    {
	                        this.RichTextContent.OverflowContentTarget = overflow;
	                    }
	                    else
	                    {
	                        this._overflowColumns[overflowIndex - 1].OverflowContentTarget = overflow;
	                    }
	                }
	
	                overflow.Measure(new Size(availableSize.Width - maxWidth, availableSize.Height));
	                maxWidth += overflow.DesiredSize.Width;
	                maxHeight = Math.Max(maxHeight, overflow.DesiredSize.Height);
	                hasOverflow = overflow.HasOverflowContent;
	                overflowIndex++;
	            }
	
	            if (this._overflowColumns.Count > overflowIndex)
	            {
	                if (overflowIndex == 0)
	                {
	                    this.RichTextContent.OverflowContentTarget = null;
	                }
	                else
	                {
	                    this._overflowColumns[overflowIndex - 1].OverflowContentTarget = null;
	                }
	                while (this._overflowColumns.Count > overflowIndex)
	                {
	                    this._overflowColumns.RemoveAt(overflowIndex);
	                    this.Children.RemoveAt(overflowIndex + 1);
	                }
	            }
	
	            return new Size(maxWidth, maxHeight);
	        }
	
	        protected override Size ArrangeOverride(Size finalSize)
	        {
	            double maxWidth = 0;
	            double maxHeight = 0;
	            foreach (var child in Children)
	            {
	                child.Arrange(new Rect(maxWidth, 0, child.DesiredSize.Width, finalSize.Height));
	                maxWidth += child.DesiredSize.Width;
	                maxHeight = Math.Max(maxHeight, child.DesiredSize.Height);
	            }
	            return new Size(maxWidth, maxHeight);
	        }
	    }
	}

snippet conceptual_resources_portablemetroloc

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_resources_portablemetroloc/richtextcolumns.cs

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Threading.Tasks;
	using Windows.Foundation;
	using Windows.UI.Xaml;
	using Windows.UI.Xaml.Controls;
	using Windows.UI.Xaml.Data;
	using Windows.UI.Xaml.Documents;
	
	namespace LocConsumerCS.Common
	{
	    [Windows.UI.Xaml.Markup.ContentProperty(Name = "RichTextContent")]
	    public sealed class RichTextColumns : Panel
	    {
	        public static readonly DependencyProperty RichTextContentProperty =
	            DependencyProperty.Register("RichTextContent", typeof(RichTextBlock),
	            typeof(RichTextColumns), new PropertyMetadata(null, ResetOverflowLayout));
	
	        public static readonly DependencyProperty ColumnTemplateProperty =
	            DependencyProperty.Register("ColumnTemplate", typeof(DataTemplate),
	            typeof(RichTextColumns), new PropertyMetadata(null, ResetOverflowLayout));
	
	        public RichTextColumns()
	        {
	            this.HorizontalAlignment = HorizontalAlignment.Left;
	        }
	
	        public RichTextBlock RichTextContent
	        {
	            get { return (RichTextBlock)GetValue(RichTextContentProperty); }
	            set { SetValue(RichTextContentProperty, value); }
	        }
	
	        public DataTemplate ColumnTemplate
	        {
	            get { return (DataTemplate)GetValue(ColumnTemplateProperty); }
	            set { SetValue(ColumnTemplateProperty, value); }
	        }
	
	        private static void ResetOverflowLayout(DependencyObject d, DependencyPropertyChangedEventArgs e)
	        {
	            var target = d as RichTextColumns;
	            if (target != null)
	            {
	                target._overflowColumns = null;
	                target.Children.Clear();
	                target.InvalidateMeasure();
	            }
	        }
	
	        private List<RichTextBlockOverflow> _overflowColumns = null;
	
	        protected override Size MeasureOverride(Size availableSize)
	        {
	            if (this.RichTextContent == null) return new Size(0, 0);
	
	            if (this._overflowColumns == null)
	            {
	                Children.Add(this.RichTextContent);
	                this._overflowColumns = new List<RichTextBlockOverflow>();
	            }
	
	            this.RichTextContent.Measure(availableSize);
	            var maxWidth = this.RichTextContent.DesiredSize.Width;
	            var maxHeight = this.RichTextContent.DesiredSize.Height;
	            var hasOverflow = this.RichTextContent.HasOverflowContent;
	
	            int overflowIndex = 0;
	            while (hasOverflow && maxWidth < availableSize.Width && this.ColumnTemplate != null)
	            {
	                RichTextBlockOverflow overflow;
	                if (this._overflowColumns.Count > overflowIndex)
	                {
	                    overflow = this._overflowColumns[overflowIndex];
	                }
	                else
	                {
	                    overflow = (RichTextBlockOverflow)this.ColumnTemplate.LoadContent();
	                    this._overflowColumns.Add(overflow);
	                    this.Children.Add(overflow);
	                    if (overflowIndex == 0)
	                    {
	                        this.RichTextContent.OverflowContentTarget = overflow;
	                    }
	                    else
	                    {
	                        this._overflowColumns[overflowIndex - 1].OverflowContentTarget = overflow;
	                    }
	                }
	
	                overflow.Measure(new Size(availableSize.Width - maxWidth, availableSize.Height));
	                maxWidth += overflow.DesiredSize.Width;
	                maxHeight = Math.Max(maxHeight, overflow.DesiredSize.Height);
	                hasOverflow = overflow.HasOverflowContent;
	                overflowIndex++;
	            }
	
	            if (this._overflowColumns.Count > overflowIndex)
	            {
	                if (overflowIndex == 0)
	                {
	                    this.RichTextContent.OverflowContentTarget = null;
	                }
	                else
	                {
	                    this._overflowColumns[overflowIndex - 1].OverflowContentTarget = null;
	                }
	                while (this._overflowColumns.Count > overflowIndex)
	                {
	                    this._overflowColumns.RemoveAt(overflowIndex);
	                    this.Children.RemoveAt(overflowIndex + 1);
	                }
	            }
	
	            return new Size(maxWidth, maxHeight);
	        }
	
	        protected override Size ArrangeOverride(Size finalSize)
	        {
	            double maxWidth = 0;
	            double maxHeight = 0;
	            foreach (var child in Children)
	            {
	                child.Arrange(new Rect(maxWidth, 0, child.DesiredSize.Width, finalSize.Height));
	                maxWidth += child.DesiredSize.Width;
	                maxHeight = Math.Max(maxHeight, child.DesiredSize.Height);
	            }
	            return new Size(maxWidth, maxHeight);
	        }
	    }
	}

snippet conceptual_types_dynamic

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_types_dynamic/source2.cs

	using System;
	using System.Reflection;
	using System.Globalization;
	
	class CustomBinder : Binder
	{
	    public override MethodBase BindToMethod(
	        BindingFlags bindingAttr,
	        MethodBase[] match,
	        ref object[] args,
	        ParameterModifier[] modifiers,
	        CultureInfo culture,
	        string[] names,
	        out object state)
	    {
	        if (match == null)
	        {
	            throw new ArgumentNullException(nameof(match));
	        }
	        state = null;
	        foreach (MethodBase mb in match)
	        {
	            ParameterInfo[] parameters = mb.GetParameters();
	
	            if (ParametersMatch(parameters, args))
	            {
	                return mb;
	            }
	        }
	        return null;
	    }
	
	    public override FieldInfo BindToField(BindingFlags bindingAttr, 
	        FieldInfo[] match, object value, CultureInfo culture)
	    {
	        if (match == null)
	        {
	            throw new ArgumentNullException(nameof(match));
	        }
	        foreach (FieldInfo fi in match)
	        {
	            if (fi.GetType() == value.GetType())
	            {
	                return fi;
	            }
	        }
	        return null;
	    }
	
	    public override MethodBase SelectMethod(
	        BindingFlags bindingAttr,
	        MethodBase[] match,
	        Type[] types,
	        ParameterModifier[] modifiers)
	    {
	        if (match == null)
	        {
	            throw new ArgumentNullException(nameof(match));
	        }
	
	        foreach (MethodBase mb in match)
	        {
	            ParameterInfo[] parameters = mb.GetParameters();
	            if (ParametersMatch(parameters, types))
	            {
	                return mb;
	            }
	        }
	
	        return null;
	    }
	
	    public override PropertyInfo SelectProperty(
	        BindingFlags bindingAttr,
	        PropertyInfo[] match,
	        Type returnType,
	        Type[] indexes,
	        ParameterModifier[] modifiers)
	    {
	        if (match == null)
	        {
	            throw new ArgumentNullException(nameof(match));
	        }
	        foreach (PropertyInfo pi in match)
	        {
	            if (pi.GetType() == returnType &&
	                ParametersMatch(pi.GetIndexParameters(), indexes))
	            {
	                return pi;
	            }
	        }
	        return null;
	    }
	
	    public override object ChangeType(
	        object value,
	        Type myChangeType,
	        CultureInfo culture)
	    {
	        try
	        {
	            object newType;
	            newType = Convert.ChangeType(value, myChangeType);
	            return newType;
	        }
	        catch (InvalidCastException)
	        {
	            return null;
	        }
	    }
	
	    public override void ReorderArgumentArray(ref object[] args,
	        object state)
	    {
	
	    }
	
	    private bool ParametersMatch(ParameterInfo[] a, object[] b)
	    {
	        if (a.Length != b.Length)
	        {
	            return false;
	        }
	        for (int i = 0; i < a.Length; i++)
	        {
	            if (a[i].ParameterType != b[i].GetType())
	            {
	                return false;
	            }
	        }
	        return true;
	    }
	
	    private bool ParametersMatch(ParameterInfo[] a, Type[] b)
	    {
	        if (a.Length != b.Length)
	        {
	            return false;
	        }
	        for (int i = 0; i < a.Length; i++)
	        {
	            if (a[i].ParameterType != b[i])
	            {
	                return false;
	            }
	        }
	        return true;
	    }
	}
	
	
	public class CustomBinderDriver
	{
	    public static void Main()
	    {
	        Type t = typeof(CustomBinderDriver);
	        CustomBinder binder = new CustomBinder();
	        BindingFlags flags = BindingFlags.InvokeMethod | BindingFlags.Instance |
	            BindingFlags.Public | BindingFlags.Static;
	        object[] args;
	
	        args = new object[] {};
	        t.InvokeMember("PrintBob", flags, binder, null, args);
	
	        args = new object[] {42};
	        t.InvokeMember("PrintValue", flags, binder, null, args);
	
	        args = new object[] {"5.5"};
	        t.InvokeMember("PrintNumber", flags, binder, null, args);
	    }
	
	    public static void PrintBob()
	    {
	        Console.WriteLine("PrintBob");
	    }
	
	    public static void PrintValue(long value)
	    {
	        Console.WriteLine("PrintValue({0})", value);
	    }
	    
	    public static void PrintValue(string value)
	    {
	        Console.WriteLine("PrintValue\"{0}\")", value);
	    }
	
	    public static void PrintNumber(double value)
	    {
	        Console.WriteLine("PrintNumber ({0})", value);
	    }
	}

snippet regularexpressions_classes

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Classes/Example.cs

	using System;
	using System.Text.RegularExpressions;
	using System.Collections.Generic;
	
	public class Example
	{
	   public static void Main()
	   {
	      InstantiateRegex();
	      UseMatch();
	      Console.WriteLine();
	      UseMatchCollection();
	      Console.WriteLine();
	      UseGroupCollection();
	      Console.WriteLine();
	      UseCaptureCollection();
	      Console.WriteLine();
	      UseGroup();
	      Console.WriteLine();
	      UseCapture();
	      Console.WriteLine();
	      UseNamedGroups();
	   }
	
	   private static void InstantiateRegex()
	   {
	       Regex r; 
	       r = new Regex("\\s2000"); 
	   }
	
	   private static void UseMatch()
	   {
	       Regex r = new Regex("abc"); 
	       Match m = r.Match("123abc456"); 
	       if (m.Success) 
	       {
	           Console.WriteLine("Found match at position " + m.Index);
	       }
	   }
	
	   private static void UseMatchCollection()
	   {
	      MatchCollection mc;
	      List<string> results = new List<string>();
	      List<int> matchposition = new List<int>();
	       
	      Regex r = new Regex("abc"); 
	      mc = r.Matches("123abc4abcd");
	      for (int i = 0; i < mc.Count; i++) 
	      {
	         results.Add(mc[i].Value);
	         matchposition.Add(mc[i].Index);   
	      }
	      for(int ctr = 0; ctr <= results.Count - 1; ctr++)
	         Console.WriteLine("'{0}' found at position {1}.", results[ctr], matchposition[ctr]);   
	
	   }
	
	   private static void UseGroupCollection()
	   {
	      Regex r = new Regex("(a(b))c"); 
	      Match m = r.Match("abdabc");
	      Console.WriteLine("Number of groups found = " + m.Groups.Count);
	   }
	
	   private static void UseCaptureCollection()
	   {
	      int counter;
	      Match m;
	      CaptureCollection cc;
	      GroupCollection gc;
	
	      Regex r = new Regex("(Abc)+"); 
	      m = r.Match("XYZAbcAbcAbcXYZAbcAb"); 
	      gc = m.Groups;
	
	      Console.WriteLine("Captured groups = " + gc.Count.ToString());
	
	      for (int i=0; i < gc.Count; i++) 
	      {
	         cc = gc[i].Captures;
	         counter = cc.Count;
	          
	         Console.WriteLine("Captures count = " + counter.ToString());
	          
	         for (int ii = 0; ii < counter; ii++) 
	         {
	            Console.WriteLine(cc[ii] + "   Starts at character " + 
	                 cc[ii].Index);
	         }
	      }
	   }
	   
	   private static void UseGroup()
	   {
	      List<int> matchposition = new List<int>();
	      List<string> results = new List<string>();
	      Regex r = new Regex("(a(b))c"); 
	      Match m = r.Match("abdabc");
	      for (int i = 0; m.Groups[i].Value != ""; i++) 
	      {
	         results.Add(m.Groups[i].Value); 
	         matchposition.Add(m.Groups[i].Index); 
	      }
	   
	      for (int ctr = 0; ctr < results.Count; ctr++)
	         Console.WriteLine("{0} at position {1}", 
	                           results[ctr], matchposition[ctr]);
	   }
	
	   private static void UseCapture()
	   {
	      Regex r;
	      Match m;
	      CaptureCollection cc;
	      int posn, length;
	   
	      r = new Regex("(abc)+");
	      m = r.Match("bcabcabc");
	      for (int i=0; m.Groups[i].Value != ""; i++) 
	      {
	         Console.WriteLine(m.Groups[i].Value);
	         cc = m.Groups[i].Captures; 
	         for (int j = 0; j < cc.Count; j++) 
	         {
	            Console.WriteLine("   Capture at position {0} for {1} characters.", 
	                              cc[j].Index, cc[j].Length);
	            posn = cc[j].Index; 
	            length = cc[j].Length; 
	         }
	      }
	   }
	
	   private static void UseNamedGroups()
	   {
	      Regex r = new Regex("^(?<name>\\w+):(?<value>\\w+)");
	      Match m = r.Match("Section1:119900");
	      Console.WriteLine(m.Groups["name"].Value);
	      Console.WriteLine(m.Groups["value"].Value);
	   }
	}

snippet conceptual_events_other

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_events_other/example.cs

	
	
	using System;
	
	namespace EventSample
	{
	    public class AlarmEventArgs : EventArgs
	    {
	        private bool snoozePressed;
	        private int nrings;
	
	        public AlarmEventArgs(bool snoozePressed, int nrings)
	        {
	            this.snoozePressed = snoozePressed;
	            this.nrings = nrings;
	        }
	
	        public int NumRings
	        {
	            get { return nrings;}
	        }
	
	        public bool SnoozePressed
	        {
	            get {return snoozePressed;}
	        }
	
	        public string AlarmText
	        {
	            get
	            {
	                if (snoozePressed)
	                {
	                    return ("Wake Up!!! Snooze time is over.");
	                }
	                else
	                {
	                    return ("Wake Up!");
	                }
	            }
	        }
	    }
	
	    public delegate void AlarmEventHandler(object sender, AlarmEventArgs e);
	
	    public class AlarmClock
	    {
	        private bool snoozePressed = false;
	        private int nrings = 0;
	        private bool stop = false;
	
	        public bool Stop
	        {
	            get {return stop;}
	            set {stop = value;}
	        }
	
	        public bool SnoozePressed
	        {
	            get {return snoozePressed;}
	            set {snoozePressed = value;}
	        }
	        
	        public event AlarmEventHandler Alarm;
	
	        protected virtual void OnAlarm(AlarmEventArgs e)
	        {
	            AlarmEventHandler handler = Alarm;
	            if (handler != null)
	            {
	                handler(this, e);
	            }
	        }
	
	        public void Start()
	        {
	            for (;;)
	            {
	                nrings++;
	                if (stop)
	                {
	                    break;
	                }
	                else
	                {
	                    if (snoozePressed)
	                    {
	                        System.Threading.Thread.Sleep(1000);
	                    }
	                    else
	                    {
	                        System.Threading.Thread.Sleep(300);
	                    }
	                    AlarmEventArgs e = new AlarmEventArgs(snoozePressed, nrings);
	                    OnAlarm(e);
	                }
	            }
	        }
	    }
	
	    public class WakeMeUp
	    {
	        public void AlarmRang(object sender, AlarmEventArgs e)
	        {
	            Console.WriteLine(e.AlarmText +"\n");
	
	            if (!(e.SnoozePressed))
	            {
	                if (e.NumRings % 10 == 0)
	                {
	                    Console.WriteLine(" Let alarm ring? Enter Y");
	                    Console.WriteLine(" Press Snooze? Enter N");
	                    Console.WriteLine(" Stop Alarm? Enter Q");
	                    String input = Console.ReadLine();
	
	                    if (input.Equals("Y") ||input.Equals("y"))
	                    {
	                        return;
	                    }
	                    else if (input.Equals("N") || input.Equals("n"))
	                    {
	                        ((AlarmClock)sender).SnoozePressed = true;
	                        return;
	                    }
	                    else
	                    {
	                        ((AlarmClock)sender).Stop = true;
	                        return;
	                    }
	                }
	            }
	            else
	            {
	                Console.WriteLine(" Let alarm ring? Enter Y");
	                Console.WriteLine(" Stop Alarm? Enter Q");
	                String input = Console.ReadLine();
	                if (input.Equals("Y") || input.Equals("y"))
	                {
	                    return;
	                }
	                else
	                {
	                    ((AlarmClock)sender).Stop = true;
	                    return;
	                }
	            }
	        }
	    }
	
	
	    public class AlarmDriver
	    {
	        public static void Main(string[] args)
	        {
	            WakeMeUp w = new WakeMeUp();
	
	            AlarmClock clock = new AlarmClock();
	
	            clock.Alarm += new AlarmEventHandler(w.AlarmRang);
	
	            clock.Start();
	        }
	    }
	}

snippet conceptual_types_dynamic

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_types_dynamic/source1.cs

	using System;
	using System.Reflection;
	using System.Globalization;
	using Simple_Type;
	
	namespace Simple_Type
	{
	    public class MySimpleClass
	    {
	        public void MyMethod(string str, int i)
	        {
	            Console.WriteLine("MyMethod parameters: {0}, {1}", str, i);
	        }
	
	        public void MyMethod(string str, int i, int j)
	        {
	            Console.WriteLine("MyMethod parameters: {0}, {1}, {2}",
	                str, i, j);
	        }
	    }
	}
	
	namespace Custom_Binder
	{
	    class MyMainClass
	    {
	        static void Main()
	        {
	            Type myType = typeof(MySimpleClass);
	
	            MySimpleClass myInstance = new MySimpleClass();
	            MyCustomBinder myCustomBinder = new MyCustomBinder();
	
	            MethodInfo myMethod = myType.GetMethod("MyMethod", 
	                BindingFlags.Public | BindingFlags.Instance,
	                myCustomBinder, new Type[] {typeof(string), 
	                typeof(int)}, null);
	            Console.WriteLine(myMethod.ToString());
	            
	            myType.InvokeMember("MyMethod", BindingFlags.InvokeMethod, 
	                myCustomBinder, myInstance,
	                new Object[] {"Testing...", (int)32});
	        }
	    }
	
	    class MyCustomBinder : Binder
	    {
	        public override MethodBase BindToMethod(
	            BindingFlags bindingAttr,
	            MethodBase[] match,
	            ref object[] args,
	            ParameterModifier[] modifiers,
	            CultureInfo culture,
	            string[] names,
	            out object state)
	        {
	            if (match == null)
	            {
	                throw new ArgumentNullException("match");
	            }
	            state = null;
	            foreach (MethodBase mb in match)
	            {
	                ParameterInfo[] parameters = mb.GetParameters();
	
	                if (ParametersMatch(parameters, args))
	                {
	                    return mb;
	                }
	            }
	            return null;
	        }
	
	        public override FieldInfo BindToField(BindingFlags bindingAttr, 
	            FieldInfo[] match, object value, CultureInfo culture)
	        {
	            if (match == null)
	            {
	                throw new ArgumentNullException("match");
	            }
	            foreach (FieldInfo fi in match)
	            {
	                if (fi.GetType() == value.GetType())
	                {
	                    return fi;
	                }
	            }
	            return null;
	        }
	
	        public override MethodBase SelectMethod(
	            BindingFlags bindingAttr,
	            MethodBase[] match,
	            Type[] types,
	            ParameterModifier[] modifiers)
	        {
	            if (match == null)
	            {
	                throw new ArgumentNullException("match");
	            }
	
	            foreach (MethodBase mb in match)
	            {
	                ParameterInfo[] parameters = mb.GetParameters();
	                if (ParametersMatch(parameters, types))
	                {
	                    return mb;
	                }
	            }
	
	            return null;
	        }
	
	        public override PropertyInfo SelectProperty(
	            BindingFlags bindingAttr,
	            PropertyInfo[] match,
	            Type returnType,
	            Type[] indexes,
	            ParameterModifier[] modifiers)
	        {
	            if (match == null)
	            {
	                throw new ArgumentNullException("match");
	            }
	            foreach (PropertyInfo pi in match)
	            {
	                if (pi.GetType() == returnType &&
	                    ParametersMatch(pi.GetIndexParameters(), indexes))
	                {
	                    return pi;
	                }
	            }
	            return null;
	        }
	
	        public override object ChangeType(
	            object value,
	            Type myChangeType,
	            CultureInfo culture)
	        {
	            try
	            {
	                object newType;
	                newType = Convert.ChangeType(value, myChangeType);
	                return newType;
	            }
	            catch (InvalidCastException)
	            {
	                return null;
	            }
	        }
	
	        public override void ReorderArgumentArray(ref object[] args,
	            object state)
	        {
	
	        }
	
	        private bool ParametersMatch(ParameterInfo[] a, object[] b)
	        {
	            if (a.Length != b.Length)
	            {
	                return false;
	            }
	            for (int i = 0; i < a.Length; i++)
	            {
	                if (a[i].ParameterType != b[i].GetType())
	                {
	                    return false;
	                }
	            }
	            return true;
	        }
	
	        private bool ParametersMatch(ParameterInfo[] a, Type[] b)
	        {
	            if (a.Length != b.Length)
	            {
	                return false;
	            }
	            for (int i = 0; i < a.Length; i++)
	            {
	                if (a[i].ParameterType != b[i])
	                {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }
	}

snippet reflection

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Reflection/Reflection.cs

	using System;
	using System.Reflection;
	
	class Module1
	{
	    public static void Main()
	    {
	        Int32 indent = 0;
	        Assembly a = typeof(Module1).Assembly;
	        Display(indent, "Assembly identity={0}", a.FullName);
	        Display(indent+1, "Codebase={0}", a.CodeBase);
	
	      
	        Display(indent, "Referenced assemblies:");
	        foreach (AssemblyName an in a.GetReferencedAssemblies() )
	        {
	             Display(indent + 1, "Name={0}, Version={1}, Culture={2}, PublicKey token={3}", an.Name, an.Version, an.CultureInfo.Name, (BitConverter.ToString (an.GetPublicKeyToken())));
	        }
	        Display(indent, "");
	        
	        foreach (Assembly b in AppDomain.CurrentDomain.GetAssemblies())
	        {
	            Display(indent, "Assembly: {0}", b);
	
	            foreach ( Module m in b.GetModules(true) )
	            {
	                Display(indent+1, "Module: {0}", m.Name);
	            }
	
	           
	            indent += 1;
	            foreach ( Type t in b.GetExportedTypes() )
	            {
	                Display(0, "");
	                Display(indent, "Type: {0}", t);
	
	           
	                indent += 1;
	                foreach (MemberInfo mi in t.GetMembers() )
	                {
	                    Display(indent, "Member: {0}", mi.Name);
	                    DisplayAttributes(indent, mi);
	
	                    
	                    if (mi.MemberType==MemberTypes.Method)
	                    {
	                        foreach ( ParameterInfo pi in ((MethodInfo) mi).GetParameters() )
	                        {
	                            Display(indent+1, "Parameter: Type={0}, Name={1}", pi.ParameterType, pi.Name);
	                        }
	                    }
	
	                    if (mi.MemberType==MemberTypes.Property)
	                    {
	                        foreach ( MethodInfo am in ((PropertyInfo) mi).GetAccessors() )
	                        {
	                            Display(indent+1, "Accessor method: {0}", am);
	                        }
	                    }
	                }
	                indent -= 1;
	            }
	            indent -= 1;
	        }
	    }
	
	    public static void DisplayAttributes(Int32 indent, MemberInfo mi)
	    {
	        object[] attrs = mi.GetCustomAttributes(false);
	        if (attrs.Length==0) {return;}
	
	        Display(indent+1, "Attributes:");
	        foreach ( object o in attrs )
	        {
	            Display(indent+2, "{0}", o.ToString());
	        }
	    }
	
	    public static void Display(Int32 indent, string format, params object[] param) 
	
	    {
	        Console.Write(new string(' ', indent*2));
	        Console.WriteLine(format, param);
	    }
	}
	

snippet cryptography_xml_datareference

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_DataReference/sample.cs

	
	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	
	        XmlDocument xmlDoc = new XmlDocument();
	
	        try
	        {
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	
	        RSA rsaKey = new RSACryptoServiceProvider();
	
	
	        try
	        {
	            Encrypt(xmlDoc, "creditcard", "EncryptedElement1", rsaKey, "rsaKey");
	
	            Encrypt(xmlDoc, "creditcard2", "EncryptedElement2", rsaKey, "rsaKey");
	
	            Console.WriteLine("Encrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	
	            Decrypt(xmlDoc, rsaKey, "rsaKey");
	
	            Console.WriteLine();
	            Console.WriteLine("Decrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	            rsaKey.Clear();
	        }
	
	        Console.ReadLine();
	
	
	    }
	
	    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, string EncryptionElementID, RSA Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (ElementToEncrypt == null)
	            throw new ArgumentNullException("ElementToEncrypt");
	        if (EncryptionElementID == null)
	            throw new ArgumentNullException("EncryptionElementID");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	        if (KeyName == null)
	            throw new ArgumentNullException("KeyName");
	
	
	        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	
	        if (elementToEncrypt == null)
	        {
	            throw new XmlException("The specified element was not found");
	
	        }
	
	
	        RijndaelManaged sessionKey = new RijndaelManaged();
	        sessionKey.KeySize = 256;
	
	        EncryptedXml eXml = new EncryptedXml();
	
	        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);
	
	
	
	        EncryptedData edElement = new EncryptedData();
	        edElement.Type = EncryptedXml.XmlEncElementUrl;
	        edElement.Id = EncryptionElementID;
	
	
	        edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);
	
	        EncryptedKey ek = new EncryptedKey();
	
	        byte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);
	
	        ek.CipherData = new CipherData(encryptedKey);
	
	        ek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);
	
	
	        edElement.KeyInfo = new KeyInfo();
	
	        KeyInfoName kin = new KeyInfoName();
	
	        kin.Value = KeyName;
	
	        ek.KeyInfo.AddClause(kin);
	
	        DataReference dRef = new DataReference();
	
	        dRef.Uri = "#" + EncryptionElementID;
	
	        ek.AddReference(dRef);
	
	
	        edElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));
	
	        edElement.CipherData.CipherValue = encryptedElement;
	
	
	        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	
	    }
	
	    public static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	        if (KeyName == null)
	            throw new ArgumentNullException("KeyName");
	
	        EncryptedXml exml = new EncryptedXml(Doc);
	
	        exml.AddKeyNameMapping(KeyName, Alg);
	
	        exml.DecryptDocument();
	
	    }
	
	}
	

snippet stopwatchperfsample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/source.cs

	
	using System;
	using System.Diagnostics;
	
	namespace StopWatchSample
	{
	    class OperationsTimer
	    {
	        public static void Main()
	        {
	            DisplayTimerProperties();
	
	            Console.WriteLine();
	            Console.WriteLine("Press the Enter key to begin:");
	            Console.ReadLine();
	            Console.WriteLine();
	
	            TimeOperations();
	        }
	
	        public static void DisplayTimerProperties()
	        {
	            if (Stopwatch.IsHighResolution)
	            {
	                Console.WriteLine("Operations timed using the system's high-resolution performance counter.");
	            }
	            else 
	            {
	                Console.WriteLine("Operations timed using the DateTime class.");
	            }
	
	            long frequency = Stopwatch.Frequency;
	            Console.WriteLine("  Timer frequency in ticks per second = {0}",
	                frequency);
	            long nanosecPerTick = (1000L*1000L*1000L) / frequency;
	            Console.WriteLine("  Timer is accurate within {0} nanoseconds", 
	                nanosecPerTick);
	        }
	        
	        private static void TimeOperations()
	        {
	            long nanosecPerTick = (1000L*1000L*1000L) / Stopwatch.Frequency;
	            const long numIterations = 10000;
	
	            String [] operationNames = {"Operation: Int32.Parse(\"0\")",
	                                           "Operation: Int32.TryParse(\"0\")",
	                                           "Operation: Int32.Parse(\"a\")",
	                                           "Operation: Int32.TryParse(\"a\")"};
	         
	
	
	            for (int operation = 0; operation <= 3; operation++)
	            {
	                long numTicks = 0;
	                long numRollovers = 0;
	                long maxTicks = 0;
	                long minTicks = Int64.MaxValue;
	                int indexFastest = -1;
	                int indexSlowest = -1;
	                long milliSec = 0;
	
	                Stopwatch time10kOperations = Stopwatch.StartNew();
	
	
	                for (int i=0; i<=numIterations; i++) 
	                {
	                    long ticksThisTime = 0;
	                    int inputNum;
	                    Stopwatch timePerParse;
	
	                    switch (operation)
	                    {
	                        case 0:
	
	                            timePerParse = Stopwatch.StartNew();
	
	                            try 
	                            {
	                                inputNum = Int32.Parse("0");
	                            }
	                            catch (FormatException)
	                            {
	                                inputNum = 0;
	                            }
	
	
	                            timePerParse.Stop();
	                            ticksThisTime = timePerParse.ElapsedTicks;
	                            break;
	                        case 1:
	
	                            timePerParse = Stopwatch.StartNew();
	
	                            if (!Int32.TryParse("0", out inputNum))
	                            { 
	                                inputNum = 0;
	                            }
	
	                            timePerParse.Stop();
	                            ticksThisTime = timePerParse.ElapsedTicks;
	                            break;
	                        case 2:
	
	                            timePerParse = Stopwatch.StartNew();
	
	                            try 
	                            {
	                                inputNum = Int32.Parse("a");
	                            }
	                            catch (FormatException)
	                            {
	                                inputNum = 0;
	                            }
	
	                            timePerParse.Stop();
	                            ticksThisTime = timePerParse.ElapsedTicks;
	                            break;
	                        case 3:
	
	                            timePerParse = Stopwatch.StartNew();
	
	                            if (!Int32.TryParse("a", out inputNum))
	                            { 
	                                inputNum = 0;
	                            }
	
	                            timePerParse.Stop();
	                            ticksThisTime = timePerParse.ElapsedTicks;
	                            break;
	
	                        default:
	                            break;
	                    }
	
	                    if (i == 0)
	                    {
	                        time10kOperations.Reset();
	                        time10kOperations.Start();
	                    }
	                    else 
	                    {
	
	                        if (maxTicks < ticksThisTime)
	                        {
	                            indexSlowest = i;
	                            maxTicks = ticksThisTime;
	                        }
	                        if (minTicks > ticksThisTime)
	                        {
	                            indexFastest = i;
	                            minTicks = ticksThisTime;
	                        }
	                        numTicks += ticksThisTime;
	                        if (numTicks < ticksThisTime)
	                        {
	                            numRollovers ++;
	                        }
	                    }
	                }  
	                
	
	                time10kOperations.Stop();
	                milliSec = time10kOperations.ElapsedMilliseconds;
	
	                Console.WriteLine();
	                Console.WriteLine("{0} Summary:", operationNames[operation]);
	                Console.WriteLine("  Slowest time:  #{0}/{1} = {2} ticks",
	                    indexSlowest, numIterations, maxTicks);
	                Console.WriteLine("  Fastest time:  #{0}/{1} = {2} ticks",
	                    indexFastest, numIterations, minTicks);
	                Console.WriteLine("  Average time:  {0} ticks = {1} nanoseconds", 
	                    numTicks / numIterations, 
	                    (numTicks * nanosecPerTick) / numIterations );
	                Console.WriteLine("  Total time looping through {0} operations: {1} milliseconds", 
	                    numIterations, milliSec);
	            }
	        }
	     }
	}
	 

snippet cryptography_xml_encryptionproperty

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Cryptography_XML_EncryptionProperty/sample.cs

	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	
	        XmlDocument xmlDoc = new XmlDocument();
	
	        try
	        {
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	
	        RSA rsaKey = new RSACryptoServiceProvider();
	
	
	        try
	        {
	            Encrypt(xmlDoc, "creditcard", rsaKey, "rsaKey");
	
	            InspectElement(xmlDoc);
	
	            Decrypt(xmlDoc, rsaKey, "rsaKey");
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	            rsaKey.Clear();
	        }
	
	    }
	
	    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, RSA Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (ElementToEncrypt == null)
	            throw new ArgumentNullException("ElementToEncrypt");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	
	
	        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	
	        if (elementToEncrypt == null)
	        {
	            throw new XmlException("The specified element was not found");
	
	        }
	
	
	        RijndaelManaged sessionKey = new RijndaelManaged();
	        sessionKey.KeySize = 256;
	
	        EncryptedXml eXml = new EncryptedXml();
	
	        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);
	
	
	
	        EncryptedData edElement = new EncryptedData();
	        edElement.Type = EncryptedXml.XmlEncElementUrl;
	
	
	        edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);
	
	        EncryptedKey ek = new EncryptedKey();
	
	        byte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);
	
	        ek.CipherData = new CipherData(encryptedKey);
	
	        ek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);
	
	
	        XmlElement element =  new XmlDocument().CreateElement("EncryptionProperty", EncryptedXml.XmlEncNamespaceUrl);
	
	        element.InnerText = "LibVersion1";
	
	        EncryptionProperty encProp = new EncryptionProperty(element);
	
	        edElement.AddProperty(encProp);
	
	
	        edElement.KeyInfo = new KeyInfo();
	
	        KeyInfoName kin = new KeyInfoName();
	
	        kin.Value = KeyName;
	
	        ek.KeyInfo.AddClause(kin);
	
	
	        edElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));
	
	        edElement.CipherData.CipherValue = encryptedElement;
	
	
	        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	
	    }
	
	    public static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	        if (KeyName == null)
	            throw new ArgumentNullException("KeyName");
	
	        EncryptedXml exml = new EncryptedXml(Doc);
	
	        exml.AddKeyNameMapping(KeyName, Alg);
	
	        exml.DecryptDocument();
	
	    }
	
	    static void InspectElement(XmlDocument Doc)
	    {
	        XmlElement encryptedData = Doc.GetElementsByTagName("EncryptedData")[0] as XmlElement;
	
	        EncryptedData encData = new EncryptedData();
	
	        encData.LoadXml(encryptedData);
	
	
	        Console.WriteLine("EncryptedData.CipherData: " + encData.CipherData.GetXml().InnerXml);
	        Console.WriteLine("EncryptedData.Encoding: " + encData.Encoding);
	        Console.WriteLine("EncryptedData.EncryptionMethod: " + encData.EncryptionMethod.GetXml().InnerXml);
	
	        EncryptionPropertyCollection encPropCollection = encData.EncryptionProperties;
	
	        Console.WriteLine("Number of elements in the EncryptionPropertyCollection: " + encPropCollection.Count);
	
	        foreach(EncryptionProperty encProp in encPropCollection)
	        {
	                Console.WriteLine("EncryptionProperty.ID: " + encProp.Id);
	                Console.WriteLine("EncryptionProperty.PropertyElement: " + encProp.PropertyElement.InnerXml);
	                Console.WriteLine("EncryptionProperty.Target: " + encProp.Target);
	                 
	        }
	
	    
	
	        Console.WriteLine("EncryptedData.Id: " + encData.Id);
	        Console.WriteLine("EncryptedData.KeyInfo: " + encData.KeyInfo.GetXml().InnerXml);
	        Console.WriteLine("EncryptedData.MimeType: " + encData.MimeType);
	    }
	
	}
snippet performancecountertype_elapsedtime

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType_ElapsedTime/elapsedtime.cs

	
	
	#if (BELOW_WHIDBEY_BUILD)
	
	using System;
	using System.Collections;
	using System.Collections.Specialized;
	using System.Diagnostics;
	using System.Runtime.InteropServices;
	
	public class App 
	{
	    private static PerformanceCounter PC;
	
	
		public static void Main()
		{	
			ArrayList samplesList = new ArrayList();
	
			SetupCategory();
	        CreateCounters();
			CollectSamples(samplesList);
		}
	
	
	    private static bool SetupCategory()
	    {
	        if ( !PerformanceCounterCategory.Exists("ElapsedTimeSampleCategory") ) 
	        {
	
	            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();
	
	            CounterCreationData ETimeData = new CounterCreationData();
	            ETimeData.CounterType = PerformanceCounterType.ElapsedTime;
	            ETimeData.CounterName = "ElapsedTimeSample";
	            CCDC.Add(ETimeData);	   
			
	            PerformanceCounterCategory.Create("ElapsedTimeSampleCategory", 
	                "Demonstrates usage of the ElapsedTime performance counter type.",    
	                CCDC);
	
	            return(true);
	        }
	        else
	        {
	            Console.WriteLine("Category exists - ElapsedTimeSampleCategory");
	            return(false);
	        }
	    }
	
	    private static void CreateCounters()
	    {
	        PC = new PerformanceCounter("ElapsedTimeSampleCategory", 
	            "ElapsedTimeSample", 
	            false);
	  
	    }
	
	    private static void CollectSamples(ArrayList samplesList)
	    {
		
	        long pcValue;
	        DateTime Start;
	
	        QueryPerformanceCounter(out pcValue);
	        PC.RawValue = pcValue;
	        Start = DateTime.Now;
	
	        for (int j = 0; j < 1000; j++) 
	        {
	            if ((j % 10) == 9) 
	            {
	                Console.WriteLine("NextValue() = " + PC.NextValue().ToString());
	                Console.WriteLine("Actual elapsed time = " + DateTime.Now.Subtract(Start).ToString());
	                OutputSample(PC.NextSample());
	                samplesList.Add( PC.NextSample() );
	            }
	
	            if (j % 100 == 0)
	            {
	                QueryPerformanceCounter(out pcValue);
	                PC.RawValue = pcValue;
	                Start = DateTime.Now;
	            }
	            System.Threading.Thread.Sleep(50);
	        }
	
	        Console.WriteLine("Elapsed time = " + DateTime.Now.Subtract(Start).ToString());
	    }
	
		
		private static void OutputSample(CounterSample s)
		{
			Console.WriteLine("\r\n+++++++++++");
			Console.WriteLine("Sample values - \r\n");
			Console.WriteLine("   BaseValue        = " + s.BaseValue);
			Console.WriteLine("   CounterFrequency = " + s.CounterFrequency);
			Console.WriteLine("   CounterTimeStamp = " + s.CounterTimeStamp);
			Console.WriteLine("   CounterType      = " + s.CounterType);
			Console.WriteLine("   RawValue         = " + s.RawValue);
			Console.WriteLine("   SystemFrequency  = " + s.SystemFrequency);
			Console.WriteLine("   TimeStamp        = " + s.TimeStamp);
			Console.WriteLine("   TimeStamp100nSec = " + s.TimeStamp100nSec);
			Console.WriteLine("++++++++++++++++++++++");
		}
	
	
		[DllImport("Kernel32.dll")]
		public static extern bool QueryPerformanceCounter(out long value);
	}
	
	#else
	
	
	using System;
	using System.Collections;
	using System.Collections.Specialized;
	using System.Diagnostics;
	using System.Runtime.InteropServices;
	
	public class App 
	{
	
	    public static void Main()
	    {	
	        CollectSamples();
	    }
	
	   
	    public static void CollectSamples()
	    {
	        const String categoryName = "ElapsedTimeSampleCategory";
	        const String counterName = "ElapsedTimeSample";
	
	        if ( !PerformanceCounterCategory.Exists(categoryName) ) 
	        {
	
	            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();
	
	            CounterCreationData ETimeData = new CounterCreationData();
	            ETimeData.CounterType = PerformanceCounterType.ElapsedTime;
	            ETimeData.CounterName = counterName;
	            CCDC.Add(ETimeData);	   
			
	            PerformanceCounterCategory.Create(categoryName,
	                    "Demonstrates ElapsedTime performance counter usage.",
	                PerformanceCounterCategoryType.SingleInstance, CCDC);
	            return;
	
	        }
	        else
	        {
	            Console.WriteLine("Category exists - {0}", categoryName);
	        }        
	
	        PerformanceCounter PC = new PerformanceCounter(categoryName, 
	                                                       counterName, 
	                                                       false);
	        PC.RawValue = Stopwatch.GetTimestamp();
	
	        DateTime Start = DateTime.Now;
	
	        for (int j = 0; j < 100; j++) 
	        {
	            if ((j % 10) == 9) 
	            {
	                Console.WriteLine("NextValue() = " + PC.NextValue().ToString());
	                Console.WriteLine("Actual elapsed time = " + DateTime.Now.Subtract(Start).ToString());
	                OutputSample(PC.NextSample());
	            }
	
	            if (j % 20 == 0)
	            {
	                PC.RawValue = Stopwatch.GetTimestamp();
	                Start = DateTime.Now;
	            }
	            System.Threading.Thread.Sleep(50);
	        }
	
	        Console.WriteLine("Elapsed time = " + DateTime.Now.Subtract(Start).ToString());
	    }
	
		
	    private static void OutputSample(CounterSample s)
	    {
	        Console.WriteLine("\r\n+++++++++++");
	        Console.WriteLine("Sample values - \r\n");
	        Console.WriteLine("   BaseValue        = " + s.BaseValue);
	        Console.WriteLine("   CounterFrequency = " + s.CounterFrequency);
	        Console.WriteLine("   CounterTimeStamp = " + s.CounterTimeStamp);
	        Console.WriteLine("   CounterType      = " + s.CounterType);
	        Console.WriteLine("   RawValue         = " + s.RawValue);
	        Console.WriteLine("   SystemFrequency  = " + s.SystemFrequency);
	        Console.WriteLine("   TimeStamp        = " + s.TimeStamp);
	        Console.WriteLine("   TimeStamp100nSec = " + s.TimeStamp100nSec);
	        Console.WriteLine("++++++++++++++++++++++");
	    }
	}
	#endif 
snippet formatting_numeric_standard

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_Numeric_Standard/Standard.cs

	using System;
	using System.Globalization;
	
	class formatting
	{
	   public static void Main()
	   {
	      Console.Clear();
	      Console.WriteLine(CultureInfo.CurrentUICulture.Name);
	      Console.WriteLine(CultureInfo.CurrentCulture.Name);
	      Console.WriteLine();
	      Console.WriteLine("Currency Format Specifier:");
	      ShowCurrency();
	      Console.WriteLine();
	      Console.WriteLine("Decimal Format Specifier:");
	      ShowDecimal();
	      Console.WriteLine();
	      Console.WriteLine("Exponentiation Format Specifier:");
	      ShowExponentiation();
	      Console.WriteLine();
	      Console.WriteLine("Fixed Point Format Specifier:");
	      ShowFixedPoint();
	      Console.WriteLine();
	      Console.WriteLine("'G' Format Specifier:");
	      ShowGeneral();
	      Console.WriteLine();
	      Console.WriteLine("'N' Format Specifier:");
	      ShowNumeric();
	      Console.WriteLine();
	      Console.WriteLine("Percent Format Specifier:");
	      ShowPercent();
	      Console.WriteLine();
	      Console.WriteLine("Round-trip Format Specifier:");
	      ShowRoundTrip();
	      Console.WriteLine();
	      Console.WriteLine("Hexadecimal Format Specifier:");
	      ShowHex();
	   }
	   
	   public static void ShowCurrency()
	   {
	      double value = 12345.6789;
	      Console.WriteLine(value.ToString("C", CultureInfo.CurrentCulture));
	
	      Console.WriteLine(value.ToString("C3", CultureInfo.CurrentCulture));
	
	      Console.WriteLine(value.ToString("C3", 
	                        CultureInfo.CreateSpecificCulture("da-DK")));
	   }
	   
	   public static void ShowDecimal()
	   {
	      int value; 
	      
	      value = 12345;
	      Console.WriteLine(value.ToString("D"));
	      Console.WriteLine(value.ToString("D8"));
	
	      value = -12345;
	      Console.WriteLine(value.ToString("D"));
	      Console.WriteLine(value.ToString("D8"));
	   }
	   
	   public static void ShowExponentiation()
	   {
	      double value = 12345.6789;
	      Console.WriteLine(value.ToString("E", CultureInfo.InvariantCulture));
	      
	      Console.WriteLine(value.ToString("E10", CultureInfo.InvariantCulture));
	      
	      Console.WriteLine(value.ToString("e4", CultureInfo.InvariantCulture));
	      
	      Console.WriteLine(value.ToString("E", 
	                        CultureInfo.CreateSpecificCulture("fr-FR")));
	   }
	   
	   public static void ShowFixedPoint()
	   {
	      int integerNumber;
	      integerNumber = 17843;
	      Console.WriteLine(integerNumber.ToString("F", 
	                        CultureInfo.InvariantCulture));
	      
	      integerNumber = -29541;
	      Console.WriteLine(integerNumber.ToString("F3", 
	                        CultureInfo.InvariantCulture));
	      
	      double doubleNumber;
	      doubleNumber = 18934.1879;
	      Console.WriteLine(doubleNumber.ToString("F", CultureInfo.InvariantCulture));
	      
	      Console.WriteLine(doubleNumber.ToString("F0", CultureInfo.InvariantCulture));
	      
	      doubleNumber = -1898300.1987;
	      Console.WriteLine(doubleNumber.ToString("F1", CultureInfo.InvariantCulture));  
	
	      Console.WriteLine(doubleNumber.ToString("F3", 
	                        CultureInfo.CreateSpecificCulture("es-ES")));
	   }
	   
	   public static void ShowGeneral()
	   {
	      double number;
	      
	      number = 12345.6789;      
	      Console.WriteLine(number.ToString("G", CultureInfo.InvariantCulture));
	      Console.WriteLine(number.ToString("G", 
	                        CultureInfo.CreateSpecificCulture("fr-FR")));
	                              
	      Console.WriteLine(number.ToString("G7", CultureInfo.InvariantCulture));
	      
	      number = .0000023;
	      Console.WriteLine(number.ToString("G", CultureInfo.InvariantCulture));
	      Console.WriteLine(number.ToString("G", 
	                        CultureInfo.CreateSpecificCulture("fr-FR")));
	      
	      number = .0023;
	      Console.WriteLine(number.ToString("G", CultureInfo.InvariantCulture));
	
	      number = 1234;
	      Console.WriteLine(number.ToString("G2", CultureInfo.InvariantCulture));
	
	      number = Math.PI;
	      Console.WriteLine(number.ToString("G5", CultureInfo.InvariantCulture));
	   }
	   
	   public static void ShowNumeric()
	   {
	      double dblValue = -12445.6789;
	      Console.WriteLine(dblValue.ToString("N", CultureInfo.InvariantCulture));
	      Console.WriteLine(dblValue.ToString("N1", 
	                        CultureInfo.CreateSpecificCulture("sv-SE")));
	      
	      int intValue = 123456789;
	      Console.WriteLine(intValue.ToString("N1", CultureInfo.InvariantCulture));
	   }
	   
	   public static void ShowPercent()
	   {
	      double number = .2468013;
	      Console.WriteLine(number.ToString("P", CultureInfo.InvariantCulture));
	      Console.WriteLine(number.ToString("P", 
	                        CultureInfo.CreateSpecificCulture("hr-HR")));
	      Console.WriteLine(number.ToString("P1", CultureInfo.InvariantCulture));
	   }
	   
	   public static void ShowRoundTrip()
	   {
	      double value;
	      
	      value = Math.PI;
	      Console.WriteLine(value.ToString("r"));
	      Console.WriteLine(value.ToString("r", 
	                        CultureInfo.CreateSpecificCulture("fr-FR")));
	      value = 1.623e-21;
	      Console.WriteLine(value.ToString("r"));
	   }
	   
	   public static void ShowHex()
	   {
	      int value; 
	      
	      value = 0x2045e;
	      Console.WriteLine(value.ToString("x"));
	      Console.WriteLine(value.ToString("X"));
	      Console.WriteLine(value.ToString("X8"));
	      
	      value = 123456789;
	      Console.WriteLine(value.ToString("X"));
	      Console.WriteLine(value.ToString("X2"));
	   }
	}

snippet generic_dictionary_idictionary

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_Dictionary_IDictionary/source.cs

	using System;
	using System.Collections;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        IDictionary openWith = new Dictionary<string, string>();
	
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	        try
	        {
	            openWith.Add(42, new Example());
	        }
	        catch (ArgumentException ex)
	        {
	            Console.WriteLine("An exception was caught for " + 
	                "IDictionary.Add. Exception message:\n\t{0}\n",
	                ex.Message);
	        }
	
	        try
	        {
	            openWith.Add("txt", "winword.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("An element with Key = \"txt\" already exists.");
	        }
	
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["rtf"] = "winword.exe";
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["doc"] = "winword.exe";
	
	        Console.WriteLine("The indexer returns null" 
	            + " if the key is of the wrong type:");
	        Console.WriteLine("For key = 2, value = {0}.", 
	            openWith[2]);
	
	        try
	        {
	            openWith[2] = "This does not get added.";
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("A key of the wrong type was specified" 
	                + " when assigning to the indexer.");
	        }
	
	        Console.WriteLine("For key = \"tif\", value = {0}.", 
	            openWith["tif"]);
	
	        if (!openWith.Contains("ht"))
	        {
	            openWith.Add("ht", "hypertrm.exe");
	            Console.WriteLine("Value added for key = \"ht\": {0}", 
	                openWith["ht"]);
	        }
	
	        Console.WriteLine("openWith.Contains(29.7) returns {0}",
	            openWith.Contains(29.7));
	
	        Console.WriteLine();
	        foreach( DictionaryEntry de in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	                de.Key, de.Value);
	        }
	
	        ICollection icoll = openWith.Values;
	
	        Console.WriteLine();
	        foreach( string s in icoll )
	        {
	            Console.WriteLine("Value = {0}", s);
	        }
	
	        icoll = openWith.Keys;
	
	        Console.WriteLine();
	        foreach( string s in icoll )
	        {
	            Console.WriteLine("Key = {0}", s);
	        }
	
	        Console.WriteLine("\nRemove(\"dib\")");
	        openWith.Remove("dib");
	
	        if (!openWith.Contains("dib"))
	        {
	            Console.WriteLine("Key \"dib\" is not found.");
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	An exception was caught for IDictionary.Add. Exception message:
	        The value "42" is not of type "System.String" and cannot be used in this generic collection.
	Parameter name: key
	
	An element with Key = "txt" already exists.
	For key = "rtf", value = wordpad.exe.
	For key = "rtf", value = winword.exe.
	The indexer returns null if the key is of the wrong type:
	For key = 2, value = .
	A key of the wrong type was specified when assigning to the indexer.
	For key = "tif", value = .
	Value added for key = "ht": hypertrm.exe
	openWith.Contains(29.7) returns False
	
	Key = txt, Value = notepad.exe
	Key = bmp, Value = paint.exe
	Key = dib, Value = paint.exe
	Key = rtf, Value = winword.exe
	Key = doc, Value = winword.exe
	Key = ht, Value = hypertrm.exe
	
	Value = notepad.exe
	Value = paint.exe
	Value = paint.exe
	Value = winword.exe
	Value = winword.exe
	Value = hypertrm.exe
	
	Key = txt
	Key = bmp
	Key = dib
	Key = rtf
	Key = doc
	Key = ht
	
	Remove("dib")
	Key "dib" is not found.
	 */
	
	

snippet generic_sorteddictionary_idictionary

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedDictionary_IDictionary/source.cs

	using System;
	using System.Collections;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        IDictionary openWith = new SortedDictionary<string, string>();
	
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	        try
	        {
	            openWith.Add(42, new Example());
	        }
	        catch (ArgumentException ex)
	        {
	            Console.WriteLine("An exception was caught for " + 
	                "IDictionary.Add. Exception message:\n\t{0}\n",
	                ex.Message);
	        }
	
	        try
	        {
	            openWith.Add("txt", "winword.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("An element with Key = \"txt\" already exists.");
	        }
	
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["rtf"] = "winword.exe";
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["doc"] = "winword.exe";
	
	        Console.WriteLine("The indexer returns null" 
	            + " if the key is of the wrong type:");
	        Console.WriteLine("For key = 2, value = {0}.", 
	            openWith[2]);
	
	        try
	        {
	            openWith[2] = "This does not get added.";
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("A key of the wrong type was specified" 
	                + " when assigning to the indexer.");
	        }
	
	        Console.WriteLine("For key = \"tif\", value = {0}.", 
	            openWith["tif"]);
	
	        if (!openWith.Contains("ht"))
	        {
	            openWith.Add("ht", "hypertrm.exe");
	            Console.WriteLine("Value added for key = \"ht\": {0}", 
	                openWith["ht"]);
	        }
	
	        Console.WriteLine("openWith.Contains(29.7) returns {0}",
	            openWith.Contains(29.7));
	
	        Console.WriteLine();
	        foreach( DictionaryEntry de in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	                de.Key, de.Value);
	        }
	
	        ICollection icoll = openWith.Values;
	
	        Console.WriteLine();
	        foreach( string s in icoll )
	        {
	            Console.WriteLine("Value = {0}", s);
	        }
	
	        icoll = openWith.Keys;
	
	        Console.WriteLine();
	        foreach( string s in icoll )
	        {
	            Console.WriteLine("Key = {0}", s);
	        }
	
	        Console.WriteLine("\nRemove(\"dib\")");
	        openWith.Remove("dib");
	
	        if (!openWith.Contains("dib"))
	        {
	            Console.WriteLine("Key \"dib\" is not found.");
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	An exception was caught for IDictionary.Add. Exception message:
	        The value "42" is not of type "System.String" and cannot be used in this generic collection.
	Parameter name: key
	
	An element with Key = "txt" already exists.
	For key = "rtf", value = wordpad.exe.
	For key = "rtf", value = winword.exe.
	The indexer returns null if the key is of the wrong type:
	For key = 2, value = .
	A key of the wrong type was specified when assigning to the indexer.
	For key = "tif", value = .
	Value added for key = "ht": hypertrm.exe
	openWith.Contains(29.7) returns False
	
	Key = bmp, Value = paint.exe
	Key = dib, Value = paint.exe
	Key = doc, Value = winword.exe
	Key = ht, Value = hypertrm.exe
	Key = rtf, Value = winword.exe
	Key = txt, Value = notepad.exe
	
	Value = paint.exe
	Value = paint.exe
	Value = winword.exe
	Value = hypertrm.exe
	Value = winword.exe
	Value = notepad.exe
	
	Key = bmp
	Key = dib
	Key = doc
	Key = ht
	Key = rtf
	Key = txt
	
	Remove("dib")
	Key "dib" is not found.
	 */
	
	

snippet generic_sortedlist_idictionary

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_SortedList_IDictionary/source.cs

	using System;
	using System.Collections;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        IDictionary openWith = new SortedList<string, string>();
	
	        openWith.Add("txt", "notepad.exe");
	        openWith.Add("bmp", "paint.exe");
	        openWith.Add("dib", "paint.exe");
	        openWith.Add("rtf", "wordpad.exe");
	        try
	        {
	            openWith.Add(42, new Example());
	        }
	        catch (ArgumentException ex)
	        {
	            Console.WriteLine("An exception was caught for " + 
	                "IDictionary.Add. Exception message:\n\t{0}\n",
	                ex.Message);
	        }
	
	        try
	        {
	            openWith.Add("txt", "winword.exe");
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("An element with Key = \"txt\" already exists.");
	        }
	
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["rtf"] = "winword.exe";
	        Console.WriteLine("For key = \"rtf\", value = {0}.", 
	            openWith["rtf"]);
	
	        openWith["doc"] = "winword.exe";
	
	        Console.WriteLine("The indexer returns null" 
	            + " if the key is of the wrong type:");
	        Console.WriteLine("For key = 2, value = {0}.", 
	            openWith[2]);
	
	        try
	        {
	            openWith[2] = "This does not get added.";
	        }
	        catch (ArgumentException)
	        {
	            Console.WriteLine("A key of the wrong type was specified" 
	                + " when assigning to the indexer.");
	        }
	
	        Console.WriteLine("For key = \"tif\", value = {0}.", 
	            openWith["tif"]);
	
	        if (!openWith.Contains("ht"))
	        {
	            openWith.Add("ht", "hypertrm.exe");
	            Console.WriteLine("Value added for key = \"ht\": {0}", 
	                openWith["ht"]);
	        }
	
	        Console.WriteLine("openWith.Contains(29.7) returns {0}",
	            openWith.Contains(29.7));
	
	        Console.WriteLine();
	        foreach( DictionaryEntry de in openWith )
	        {
	            Console.WriteLine("Key = {0}, Value = {1}", 
	                de.Key, de.Value);
	        }
	
	        ICollection icoll = openWith.Values;
	
	        Console.WriteLine();
	        foreach( string s in icoll )
	        {
	            Console.WriteLine("Value = {0}", s);
	        }
	
	        icoll = openWith.Keys;
	
	        Console.WriteLine();
	        foreach( string s in icoll )
	        {
	            Console.WriteLine("Key = {0}", s);
	        }
	
	        Console.WriteLine("\nRemove(\"dib\")");
	        openWith.Remove("dib");
	
	        if (!openWith.Contains("dib"))
	        {
	            Console.WriteLine("Key \"dib\" is not found.");
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	An exception was caught for IDictionary.Add. Exception message:
	        The value "42" is not of type "System.String" and cannot be used in this generic collection.
	Parameter name: key
	
	An element with Key = "txt" already exists.
	For key = "rtf", value = wordpad.exe.
	For key = "rtf", value = winword.exe.
	The indexer returns null if the key is of the wrong type:
	For key = 2, value = .
	A key of the wrong type was specified when assigning to the indexer.
	For key = "tif", value = .
	Value added for key = "ht": hypertrm.exe
	openWith.Contains(29.7) returns False
	
	Key = txt, Value = notepad.exe
	Key = bmp, Value = paint.exe
	Key = dib, Value = paint.exe
	Key = rtf, Value = winword.exe
	Key = doc, Value = winword.exe
	Key = ht, Value = hypertrm.exe
	
	Value = notepad.exe
	Value = paint.exe
	Value = paint.exe
	Value = winword.exe
	Value = winword.exe
	Value = hypertrm.exe
	
	Key = txt
	Key = bmp
	Key = dib
	Key = rtf
	Key = doc
	Key = ht
	
	Remove("dib")
	Key "dib" is not found.
	 */
	
	

snippet regularexpressions_quantifiers

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions_Quantifiers/Quantifiers1.cs

	using System;
	using System.Text.RegularExpressions;
	
	[assembly: CLSCompliant(true)]
	public class Class1
	{
	   public static void Main()
	   {
	      Console.WriteLine("* quantifier:");
	      ShowStar();
	      Console.WriteLine();
	      Console.WriteLine("+ quantifier:");
	      ShowPlus();
	      Console.WriteLine();
	      Console.WriteLine("? quantifier:");
	      ShowQuestion();
	      Console.WriteLine();
	      Console.WriteLine("{n} quantifier:");
	      ShowN();
	      Console.WriteLine();
	      Console.WriteLine("{n,} quantifier:");
	      ShowNComma();
	      Console.WriteLine();
	      Console.WriteLine("{n,m} quantifier:");
	      ShowNM();
	      Console.WriteLine();      
	      Console.WriteLine("*? quantifier:");
	      ShowLazyStar();
	      Console.WriteLine();      
	      Console.WriteLine("+? quantifier:");
	      ShowLazyPlus();
	      Console.WriteLine();      
	      Console.WriteLine("?? quantifier:");
	      ShowLazyQuestion();
	      Console.WriteLine();      
	      Console.WriteLine("{n}? quantifier:");
	      ShowLazyN();
	      Console.WriteLine();
	      Console.WriteLine("{n,}? quantifier: NO EXAMPLE");
	      ShowLazyNComma();
	      Console.WriteLine();
	      Console.WriteLine("{n,m}? quantifier:");
	      ShowLazyNM();
	   }
	
	   private static void ShowStar()
	   {
	      string pattern = @"\b91*9*\b";   
	      string input = "99 95 919 929 9119 9219 999 9919 91119";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);
	           
	   }
	   
	   private static void ShowPlus()
	   {
	      string pattern = @"\ban+\w*?\b";
	      
	      string input = "Autumn is a great time for an annual announcement to all antique collectors.";
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.IgnoreCase))
	         Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);
	         
	   }
	   
	   private static void ShowQuestion()
	   {
	      string pattern = @"\ban?\b";
	      string input = "An amiable animal with a large snount and an animated nose.";
	      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.IgnoreCase))
	         Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);
	        
	   }
	   
	   private static void ShowN()
	   {
	      string pattern = @"\b\d+\,\d{3}\b";
	      string input = "Sales totaled 103,524 million in January, " + 
	                            "106,971 million in February, but only " + 
	                            "943 million in March.";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);
	           
	   }
	   
	   private static void ShowNComma()
	   {
	      string pattern = @"\b\d{2,}\b\D+";   
	      string input = "7 days, 10 weeks, 300 years";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);
	       
	   }
	   
	   private static void ShowNM()
	   {
	      string pattern = @"(00\s){2,4}";
	      string input = "0x00 FF 00 00 18 17 FF 00 00 00 21 00 00 00 00 00";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);
	       
	   }
	   
	   private static void ShowLazyStar()
	   {
	       string pattern = @"\b\w*?oo\w*?\b";
	       string input = "woof root root rob oof woo woe";
	       foreach (Match match in Regex.Matches(input, pattern, RegexOptions.IgnoreCase))
	          Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);
	        
	   }
	   
	   private static void ShowLazyPlus()
	   {
	      string pattern = @"\b\w+?\b";
	      string input = "Aa Bb Cc Dd Ee Ff";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);
	       
	   }
	   
	   private static void ShowLazyQuestion()
	   {
	      string pattern = @"^\s*(System.)??Console.Write(Line)??\(??";
	      string input = "System.Console.WriteLine(\"Hello!\")\n" + 
	                            "Console.Write(\"Hello!\")\n" + 
	                            "Console.WriteLine(\"Hello!\")\n" + 
	                            "Console.ReadLine()\n" + 
	                            "   Console.WriteLine";
	      foreach (Match match in Regex.Matches(input, pattern, 
	                                            RegexOptions.IgnorePatternWhitespace | 
	                                            RegexOptions.IgnoreCase | 
	                                            RegexOptions.Multiline))
	         Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);
	       
	   }
	   
	   private static void ShowLazyN()
	   {
	      string pattern = @"\b(\w{3,}?\.){2}?\w{3,}?\b";
	      string input = "www.microsoft.com msdn.microsoft.com mywebsite mycompany.com";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);
	           
	   }
	   
	   private static void ShowLazyNComma()
	   {
	   }
	   
	   private static void ShowLazyNM()
	   {
	      string pattern = @"\b[A-Z](\w*?\s*?){1,10}[.!?]";
	      string input = "Hi. I am writing a short note. Its purpose is " + 
	                            "to test a regular expression that attempts to find " + 
	                            "sentences with ten or fewer words. Most sentences " + 
	                            "in this note are short.";
	      foreach (Match match in Regex.Matches(input, pattern))
	         Console.WriteLine("'{0}' found at position {1}.", match.Value, match.Index);
	       
	   }
	}

snippet process_asyncstreams

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/net_async.cs

	
	
	
	using System;
	using System.Text;
	using System.Globalization;
	using System.IO;
	using System.Diagnostics;
	using System.Threading;
	using System.ComponentModel;
	
	
	namespace ProcessAsyncStreamSamples
	{
	
	    class ProcessNetStreamRedirection
	    {
	        private static StreamWriter streamError =null;
	        private static String netErrorFile = "";
	        private static StringBuilder netOutput = null;
	        private static bool errorRedirect = false;
	        private static bool errorsWritten = false;
	
	        public static void RedirectNetCommandStreams()
	        {
	            String netArguments;
	            Process netProcess;
	
	            Console.WriteLine("Enter the computer name for the net view command:");
	            netArguments = Console.ReadLine().ToUpper(CultureInfo.InvariantCulture);
	            if (String.IsNullOrEmpty(netArguments))
	            {
	                netArguments = "/?";
	            }
	               
	            errorsWritten = false;
	            Console.WriteLine("Enter a fully qualified path to an error log file");
	            Console.WriteLine("  or just press Enter to write errors to console:");
	            netErrorFile = Console.ReadLine().ToUpper(CultureInfo.InvariantCulture);
	            if (!String.IsNullOrEmpty(netErrorFile))
	            {
	                errorRedirect = true;
	            }
	
	      
	            netProcess = new Process();
	            netProcess.StartInfo.FileName = "Net.exe";
	            
	            netProcess.StartInfo.Arguments = String.Format("view {0}", 
	                netArguments);
	
	            netProcess.StartInfo.UseShellExecute = false;
	
	            netProcess.StartInfo.RedirectStandardOutput = true;
	            netProcess.OutputDataReceived += new DataReceivedEventHandler(NetOutputDataHandler);
	            netOutput = new StringBuilder();
	   
	            if (errorRedirect)
	            {
	                netProcess.StartInfo.RedirectStandardError = true;
	                netProcess.ErrorDataReceived += new DataReceivedEventHandler(NetErrorDataHandler);
	            }
	            else 
	            {
	                netProcess.StartInfo.RedirectStandardError = false;
	            }
	
	            Console.WriteLine("\nStarting process: net {0}", 
	                netProcess.StartInfo.Arguments);
	            if (errorRedirect)
	            {
	                Console.WriteLine("Errors will be written to the file {0}", 
	                    netErrorFile);
	            }
	
	            netProcess.Start();
	
	            netProcess.BeginOutputReadLine();
	
	            if (errorRedirect)
	            {
	                netProcess.BeginErrorReadLine();
	            }
	
	            netProcess.WaitForExit();
	
	            if (streamError != null)
	            {
	                streamError.Close();
	            }
	            else 
	            {
	                errorsWritten = false;
	            }
	
	            if (netOutput.Length > 0)
	            {
	                Console.WriteLine("\nPublic network shares from net view:\n{0}\n", 
	                    netOutput);
	            }
	
	            if (errorsWritten)
	            {
	                String [] errorOutput = File.ReadAllLines(netErrorFile);
	                if (errorOutput.Length > 0)
	                {
	                    Console.WriteLine("\nThe following error output was appended to {0}.",
	                        netErrorFile);
	                    foreach (String errLine in errorOutput)
	                    {
	                        Console.WriteLine("  {0}", errLine);
	                    }
	                }
	                Console.WriteLine();
	            }
	
	            netProcess.Close();
	
	        }
	
	        private static void NetOutputDataHandler(object sendingProcess, 
	            DataReceivedEventArgs outLine)
	        {
	            if (!String.IsNullOrEmpty(outLine.Data))
	            {
	                netOutput.Append(Environment.NewLine + "  " + outLine.Data);
	            }
	        }
	
	        private static void NetErrorDataHandler(object sendingProcess, 
	            DataReceivedEventArgs errLine)
	        {
	
	            if (!String.IsNullOrEmpty(errLine.Data))
	            {
	                if (!errorsWritten)
	                {
	                    if (streamError == null)
	                    {
	                        try 
	                        {
	                            streamError = new StreamWriter(netErrorFile, true);
	                        }
	                        catch (Exception e)
	                        {
	                            Console.WriteLine("Could not open error file!");
	                            Console.WriteLine(e.Message.ToString());
	                        }
	                    }
	
	                    if (streamError != null)
	                    {
	                        streamError.WriteLine();
	                        streamError.WriteLine(DateTime.Now.ToString());
	                        streamError.WriteLine("Net View error output:");
	                    }
	                    errorsWritten = true;
	                }
	
	                if (streamError != null)
	                {
	                    streamError.WriteLine(errLine.Data);
	                    streamError.Flush();
	                }
	            }
	        }
	    }
	} 
	
	
	namespace ProcessAsyncStreamSamples
	{
	
	    class ProcessSampleMain
	    {
	        static void Main()
	        {
	            try 
	            {
	                ProcessNetStreamRedirection.RedirectNetCommandStreams();
	            }
	            catch (InvalidOperationException e)
	            {
	                Console.WriteLine("Exception:");
	                Console.WriteLine(e.ToString());
	            }
	        }
	    }
	} 
snippet addincollectionpipelinehost

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHost/Program.cs

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Text;
	using LibraryContractsHAV;
	using System.AddIn.Hosting;
	using System.Xml;
	
	
	namespace ListAdaptersHost
	{
	class Program
	{
	static void Main(string[] args)
	{
	
	    String pipeRoot = Environment.CurrentDirectory;
	
	    string[] warnings = AddInStore.Update(pipeRoot);
	    if (warnings.Length > 0)
	    {
	        foreach (string one in warnings)
	        {
	            Console.WriteLine(one);
	        }
	    }
	
	    Collection<AddInToken> tokens = AddInStore.FindAddIns(typeof(LibraryManager), pipeRoot);
	    AddInToken selectedToken = ChooseAddIn(tokens);
	
	    LibraryManager manager = selectedToken.Activate<LibraryManager>(AddInSecurityLevel.FullTrust);
	
	    IList<BookInfo> books = CreateBooks();
	
	    Console.WriteLine("Number of books:  {0}",books.Count.ToString());
	
	    manager.ProcessBooks(books);
	
	    foreach (BookInfo bk in books)
	    {
	        Console.WriteLine(bk.Genre());
	    }
	
	    Console.WriteLine("Number of books: {0}", books.Count.ToString());
	
	    Console.WriteLine();
	    BookInfo bestBook = manager.GetBestSeller();
	    Console.WriteLine("Best seller is {0} by {1}", bestBook.Title(), bestBook.Author());
	
	    manager.Data("sales tax");
	
	    AddInController ctrl = AddInController.GetAddInController(manager);
	    ctrl.Shutdown();
	    Console.WriteLine("Press any key to exit.");
	    Console.ReadLine();
	}
	
	
	
	private static AddInToken ChooseAddIn(Collection<AddInToken> tokens)
	{
	    if (tokens.Count == 0)
	    {
	        Console.WriteLine("No add-ins of this type are available");
	        return null;
	    }
	    Console.WriteLine("{0} Available add-in(s):",tokens.Count.ToString());
	    for (int i = 0; i < tokens.Count; i++)
	    {
	        Console.WriteLine("[{0}] - {1}, Publisher: {2}, Version: {3}, Description: {4}",
	            (i + 1).ToString(), tokens[i].Name, tokens[i].Publisher,
	            tokens[i].Version, tokens[i].Description);
	    }
	    Console.WriteLine("Select add-in by number:");
	    String line = Console.ReadLine();
	    int selection;
	    if (Int32.TryParse(line, out selection))
	    {
	        if (selection <= tokens.Count)
	        {
	            return tokens[selection - 1];
	        }
	    }
	    Console.WriteLine("Invalid selection: {0}. Please choose again.", line);
	    return ChooseAddIn(tokens);
	}
	
	
	internal static IList<BookInfo> CreateBooks()
	{
	    List<BookInfo> books = new List<BookInfo>();
	
	    string ParamId = "";
	    string ParamAuthor = "";
	    string ParamTitle = "";
	    string ParamGenre = "";
	    string ParamPrice = "";
	    string ParamPublish_Date = "";
	    string ParamDescription = "";
	
	    XmlDocument xDoc = new XmlDocument();
	    xDoc.Load(@"c:\Books.xml");
	
	     XmlNode xRoot = xDoc.DocumentElement;
	     if (xRoot.Name == "catalog")
	    {
	        XmlNodeList bklist = xRoot.ChildNodes;
	        foreach (XmlNode bk in bklist)
	        {
	            ParamId = bk.Attributes[0].Value;
	            XmlNodeList dataItems = bk.ChildNodes;
	            int items = dataItems.Count;
	            foreach (XmlNode di in dataItems)
	            {
	                switch (di.Name)
	                {
	                    case "author":
	                        ParamAuthor = di.InnerText;
	                        break;
	                    case "title":
	                        ParamTitle = di.InnerText;
	                        break;
	                    case "genre":
	                        ParamGenre = di.InnerText;
	                        break;
	                     case "price":
	                        ParamPrice = di.InnerText;
	                        break;
	                     case "publish_date":
	                        ParamAuthor = di.InnerText;
	                        break;
	                     case "description":
	                        ParamDescription = di.InnerText;
	                        break;
	                      default:
	                        break;
	                }
	
	            }
	            books.Add(new MyBookInfo(ParamId, ParamAuthor, ParamTitle, ParamGenre,
	                            ParamPrice, ParamPublish_Date, ParamDescription));
	        }
	
	    }
	    return books;
	}
	
	
	}
	
	class MyBookInfo : BookInfo
	{
	    private string _id;
	    private string _author;
	    private string _title;
	    private string _genre;
	    private string _price;
	    private string _publish_date;
	    private string _description;
	
	    public MyBookInfo(string id, string author, string title,
	                        string genre, string price,
	                        string publish_date, string description)
	    {
	        _id = id;
	        _author = author;
	        _title = title;
	        _genre = genre;
	        _price = price;
	        _publish_date = publish_date;
	        _description = description;
	    }
	
	    public override string ID()
	    {
	        return _id;
	    }
	
	    public override string Title()
	    {
	        return _title;
	    }
	
	    public override string Author()
	    {
	        return _author;
	    }
	
	     public override string Genre()
	    {
	        return _genre;
	    }
	    public override string Price()
	    {
	        return _price;
	    }
	    public override string Publish_Date()
	    {
	        return _publish_date;
	    }
	    public override string Description()
	    {
	        return _description;
	    }
	}
	}
snippet gcnotification

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/GCNotification/Program.cs

	using System;
	using System.Collections.Generic;
	using System.Threading;
	
	namespace GCNotify
	{
	    class Program
	    {
	        static bool checkForNotify = false;
	
	        static bool bAllocate = false;
	
	        static bool finalExit = false;
	
	        static List<byte[]> load = new List<byte[]>();
	
	
	        public static void Main(string[] args)
	        {
	            try
	            {
	                GC.RegisterForFullGCNotification(10, 10);
	                Console.WriteLine("Registered for GC notification.");
	
	                checkForNotify = true;
	                bAllocate = true;
	
	                Thread thWaitForFullGC = new Thread(new ThreadStart(WaitForFullGCProc));
	                thWaitForFullGC.Start();
	
	                try
	                {
	
	                    int lastCollCount = 0;
	                    int newCollCount = 0;
	                    
	                    
	                    while (true)
	                    {
	                        if (bAllocate)
	                        {
	                            load.Add(new byte[1000]);
	                            newCollCount = GC.CollectionCount(2);
	                            if (newCollCount != lastCollCount)
	                            {
	                                Console.WriteLine("Gen 2 collection count: {0}", GC.CollectionCount(2).ToString());
	                                lastCollCount = newCollCount;
	                            }
	                           
	                            if (newCollCount == 500)
	                            {
	                                finalExit = true;
	                                checkForNotify = false;
	                                break;
	                            }
	                        }
	                    }
	
	                }
	                catch (OutOfMemoryException)
	                {
	                    Console.WriteLine("Out of memory.");
	                }
	
	
	                finalExit = true;
	                checkForNotify = false;
	                GC.CancelFullGCNotification();
	
	            }
	            catch (InvalidOperationException invalidOp)
	            {
	
	                Console.WriteLine("GC Notifications are not supported while concurrent GC is enabled.\n"
	                    + invalidOp.Message);
	            }
	        }
	
	        public static void OnFullGCApproachNotify()
	        {
	
	            Console.WriteLine("Redirecting requests.");
	
	            RedirectRequests();
	
	            FinishExistingRequests();
	
	            GC.Collect();
	            Console.WriteLine("Induced a collection.");
	
	        }
	
	
	        public static void OnFullGCCompleteEndNotify()
	        {
	            AcceptRequests();
	            Console.WriteLine("Accepting requests again.");
	        }
	
	        public static void WaitForFullGCProc()
	        {
	            while (true)
	            {
	                while (checkForNotify)
	                {
	                    GCNotificationStatus s = GC.WaitForFullGCApproach();
	                    if (s == GCNotificationStatus.Succeeded)
	                    {
	                        Console.WriteLine("GC Notification raised.");
	                        OnFullGCApproachNotify();
	                    }
	                    else if (s == GCNotificationStatus.Canceled)
	                    {
	                        Console.WriteLine("GC Notification cancelled.");
	                        break;
	                    }
	                    else
	                    {
	                        Console.WriteLine("GC Notification not applicable.");
	                        break;
	                    }
	
	                    GCNotificationStatus status = GC.WaitForFullGCComplete();
	                    if (status == GCNotificationStatus.Succeeded)
	                    {
	                        Console.WriteLine("GC Notification raised.");
	                        OnFullGCCompleteEndNotify();
	                    }
	                    else if (status == GCNotificationStatus.Canceled)
	                    {
	                        Console.WriteLine("GC Notification cancelled.");
	                        break;
	                    }
	                    else
	                    {
	                        Console.WriteLine("GC Notification not applicable.");
	                        break;
	                    }
	                }
	
	
	                Thread.Sleep(500);
	                if (finalExit)
	                {
	                    break;
	                }
	            }
	
	        }
	
	        private static void RedirectRequests()
	        {
	
	            bAllocate = false;
	
	        }
	
	        private static void FinishExistingRequests()
	        {
	
	            load.Clear();
	
	        }
	
	        private static void AcceptRequests()
	        {
	
	            bAllocate = true;
	
	        }
	    }
	}

snippet compilerparametersexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/source.cs

	
	using System;
	using System.Globalization;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Diagnostics;
	
	namespace CompilerParametersExample
	{
	    class CompileClass
	    {
	        public static CodeCompileUnit BuildHelloWorldGraph()
	        {            
	            CodeCompileUnit compileUnit = new CodeCompileUnit();
	
	            CodeNamespace samples = new CodeNamespace("Samples");
	            compileUnit.Namespaces.Add( samples );
	
	            samples.Imports.Add( new CodeNamespaceImport("System") );            
	
	            CodeTypeDeclaration class1 = new CodeTypeDeclaration("Class1");
	            samples.Types.Add(class1);
	            
	            CodeEntryPointMethod start = new CodeEntryPointMethod();
	
	            CodeTypeReferenceExpression csSystemConsoleType = new CodeTypeReferenceExpression("System.Console");
	
	            CodeMethodInvokeExpression cs1 = new CodeMethodInvokeExpression( 
	                csSystemConsoleType, "WriteLine", 
	                new CodePrimitiveExpression("Hello World!") );
	
	            start.Statements.Add(cs1);
	
	            CodeMethodInvokeExpression cs2 = new CodeMethodInvokeExpression(
	                csSystemConsoleType, "WriteLine",
	                new CodePrimitiveExpression("Press the Enter key to continue.") );
	            start.Statements.Add(cs2);
	
	            CodeMethodInvokeExpression csReadLine = new CodeMethodInvokeExpression(
	                csSystemConsoleType, "ReadLine");
	
	            start.Statements.Add(csReadLine);
	
	            class1.Members.Add( start );
	
	            return compileUnit;
	        }
	
	        public static String GenerateCode(CodeDomProvider provider, 
	                                          CodeCompileUnit compileunit)
	        {
	            String sourceFile;
	            if (provider.FileExtension[0] == '.')
	            {
	                sourceFile = "HelloWorld" + provider.FileExtension;
	            }
	            else 
	            {
	                sourceFile = "HelloWorld." + provider.FileExtension;
	            }
	
	            IndentedTextWriter tw = new IndentedTextWriter(new StreamWriter(sourceFile, false), "    ");
	            provider.GenerateCodeFromCompileUnit(compileunit, tw, new CodeGeneratorOptions());
	            tw.Close();            
	
	            return sourceFile;
	        }
	    
	        public static bool CompileCode(CodeDomProvider provider, 
	            String sourceFile, 
	            String exeFile)
	        {
	
	            CompilerParameters cp = new CompilerParameters();
	
	            cp.GenerateExecutable = true;
	
	            cp.OutputAssembly = exeFile;
	
	            cp.IncludeDebugInformation = true;
	
	            cp.ReferencedAssemblies.Add( "System.dll" );
	
	            cp.GenerateInMemory = false;
	
	            cp.WarningLevel = 3;
	
	            cp.TreatWarningsAsErrors = false;
	            
	            cp.CompilerOptions = "/optimize";
	
	            cp.TempFiles = new TempFileCollection(".", true);
	
	            if (provider.Supports(GeneratorSupport.EntryPointMethod))
	            {
	                cp.MainClass = "Samples.Class1";
	            }
	  
	            if (Directory.Exists("Resources"))
	            {
	                if (provider.Supports(GeneratorSupport.Resources))
	                {
	                    cp.EmbeddedResources.Add("Resources\\Default.resources");
	
	                    cp.LinkedResources.Add("Resources\\nb-no.resources");
	                }
	            }
	
	            CompilerResults cr = provider.CompileAssemblyFromFile(cp, sourceFile);
	
	            if(cr.Errors.Count > 0)
	            {
	                Console.WriteLine("Errors building {0} into {1}",  
	                    sourceFile, cr.PathToAssembly);
	                foreach(CompilerError ce in cr.Errors)
	                {
	                    Console.WriteLine("  {0}", ce.ToString());
	                    Console.WriteLine();
	                }
	            }
	            else
	            {
	                Console.WriteLine("Source {0} built into {1} successfully.",
	                    sourceFile, cr.PathToAssembly);
	                Console.WriteLine("{0} temporary files created during the compilation.",
	                    cp.TempFiles.Count.ToString());
	
	            }
	          
	            if (cr.Errors.Count > 0)
	            {
	                return false;
	            }
	            else 
	            {
	                return true;
	            }
	        }
	 
	        [STAThread]
	        static void Main() 
	        {
	            CodeDomProvider provider = null;
	            String exeName = "HelloWorld.exe";
	
	            Console.WriteLine("Enter the source language for Hello World (cs, vb, etc):");
	            String inputLang = Console.ReadLine();
	            Console.WriteLine();
	
	            if (CodeDomProvider.IsDefinedLanguage(inputLang))
	            {
	                provider = CodeDomProvider.CreateProvider(inputLang);
	            }
	
	            if (provider == null)
	            {
	                Console.WriteLine("There is no CodeDomProvider for the input language.");
	            }
	            else 
	            {
	                CodeCompileUnit helloWorld = BuildHelloWorldGraph();
	
	                String sourceFile = GenerateCode(provider, helloWorld);
	
	                Console.WriteLine("HelloWorld source code generated.");
	
	                if (CompileCode(provider, sourceFile, exeName ))
	                {
	                    Console.WriteLine("Starting HelloWorld executable.");
	                    Process.Start(exeName);            
	                }
	            }
	
	        }
	    }
	}

snippet dg_exceptiondesign

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/dg_exceptionDesign/example1.cs

	using System;
	using System.IO;
	using System.Net;
	using System.Runtime.Serialization;
	using System.Collections.Generic;
	
	namespace Examples.DesignGuidelines.Exceptions
	{
	    public class BadExceptionHandlingExample1
	    {
	        public void DoWork()
	        {
	        }
	        public void MethodWithBadHandler()
	        {
	            try
	            {
	                DoWork();
	            }
	            catch (Exception e)
	            {
	            }
	        }
	    }
	
	    public class BadExceptionHandlingExample2
	    {
	        public void DoWork()
	        {
	        }
	        public void MethodWithBadHandler()
	        {
	            try
	            {
	                DoWork();
	            }
	            catch (Exception e)
	            {
	                if (e is StackOverflowException ||
	                    e is OutOfMemoryException)
	                    throw;
	            }
	        }
	    }
	
	
	public class ThrowExample1
	{
	        public void DoWork(Object anObject)
	        {
	            if (anObject == null)
	            {
	                throw new ArgumentNullException("anObject",
	                    "Specify a non-null argument.");
	            }
	        }
	        public void MethodWithBadCatch(Object anObject)
	        {
	            try
	            {
	                DoWork(anObject);
	            }
	            catch (ArgumentNullException e)
	            {
	               System.Diagnostics.Debug.Write(e.Message);
	               throw e;
	            }
	        }
	        public void MethodWithBetterCatch()
	        {
	            try
	            {
	                DoWork(null);
	            }
	            catch (ArgumentNullException e)
	            {
	               System.Diagnostics.Debug.Write(e.Message);
	               throw;
	            }
	        }
	}
	
	
	public class Wrapper
	{
	    public void EstablishConnection(){}
	
	
	    public void SendMessages()
	    {
	        try
	        {
	            EstablishConnection();
	        }
	        catch (System.Net.Sockets.SocketException e)
	        {
	            throw new CommunicationFailureException(
	                "Cannot access remote computer.",
	                e);
	        }
	    }
	
	    IPAddress address = IPAddress.Loopback;
	    public IPAddress Address
	    {
	        get
	        {
	            return address;
	        }
	        set
	        {
	            if(value == null)
	            {
	                throw new ArgumentNullException("value");
	            }
	            address = value;
	        }
	    }
	}
	public class CommunicationFailureException : Exception
	{
	    public CommunicationFailureException(string message) : base(message)
	    {
	    }
	    public CommunicationFailureException(string message, Exception innerException)
	        : base(message)
	    {
	    }
	}
	
	public class BaseException: Exception{}
	
	public class NewException : BaseException, ISerializable
	{
	    public NewException()
	    {
	    }
	    public NewException(string message)
	    {
	    }
	    public NewException(string message, Exception inner)
	    {
	    }
	
	   protected NewException(SerializationInfo info, StreamingContext context)
	   {
	   }
	}
	public class Doer
	{
	    public static void ProcessMessage(string message)
	    {
	        if (message == null)
	        {
	            throw new ArgumentNullException("message");
	        }
	    }
	}
	
	public class Tester
	{
	    public static void TesterDoer(ICollection<string> messages)
	    {
	        foreach (string message in messages)
	        {
	            if (message != null)
	            {
	                Doer.ProcessMessage(message);
	            }
	        }
	    }
	}
	
	public class BadParser
	{
	    Uri ParseUri(string uriValue, bool throwOnError)
	}
	
	public class TestMain
	{
	    public static void Main()
	    {
	        ThrowExample1 t = new ThrowExample1();
	    }
	}
	
	}

snippet assemblybuilderclass

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilderClass/24895.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	
	class DemoAssemblyBuilder
	{
	    public static void Main()
	    {
	        /*
	        public class MyDynamicType
	        {
	            private int m_number;
	        
	            public MyDynamicType() : this(42) {}
	            public MyDynamicType(int initNumber)
	            {
	                m_number = initNumber;
	            }
	
	            public int Number
	            {
	                get { return m_number; }
	                set { m_number = value; }
	            }
	
	            public int MyMethod(int multiplier)
	            {
	                return m_number * multiplier;
	            }
	        }
	        */
	      
	        AssemblyName aName = new AssemblyName("DynamicAssemblyExample");
	        AssemblyBuilder ab = 
	            AppDomain.CurrentDomain.DefineDynamicAssembly(
	                aName, 
	                AssemblyBuilderAccess.RunAndSave);
	
	        ModuleBuilder mb = 
	            ab.DefineDynamicModule(aName.Name, aName.Name + ".dll");
	      
	        TypeBuilder tb = mb.DefineType(
	            "MyDynamicType", 
	             TypeAttributes.Public);
	
	        FieldBuilder fbNumber = tb.DefineField(
	            "m_number", 
	            typeof(int), 
	            FieldAttributes.Private);
	
	        Type[] parameterTypes = { typeof(int) };
	        ConstructorBuilder ctor1 = tb.DefineConstructor(
	            MethodAttributes.Public, 
	            CallingConventions.Standard, 
	            parameterTypes);
	
	        ILGenerator ctor1IL = ctor1.GetILGenerator();
	        ctor1IL.Emit(OpCodes.Ldarg_0);
	        ctor1IL.Emit(OpCodes.Call, 
	            typeof(object).GetConstructor(Type.EmptyTypes));
	        ctor1IL.Emit(OpCodes.Ldarg_0);
	        ctor1IL.Emit(OpCodes.Ldarg_1);
	        ctor1IL.Emit(OpCodes.Stfld, fbNumber);
	        ctor1IL.Emit(OpCodes.Ret);
	
	        ConstructorBuilder ctor0 = tb.DefineConstructor(
	            MethodAttributes.Public, 
	            CallingConventions.Standard, 
	            Type.EmptyTypes);
	
	        ILGenerator ctor0IL = ctor0.GetILGenerator();
	        ctor0IL.Emit(OpCodes.Ldarg_0);
	        ctor0IL.Emit(OpCodes.Ldc_I4_S, 42);
	        ctor0IL.Emit(OpCodes.Call, ctor1);
	        ctor0IL.Emit(OpCodes.Ret);
	
	        PropertyBuilder pbNumber = tb.DefineProperty(
	            "Number", 
	            PropertyAttributes.HasDefault, 
	            typeof(int), 
	            null);
	      
	        MethodAttributes getSetAttr = MethodAttributes.Public | 
	            MethodAttributes.SpecialName | MethodAttributes.HideBySig;
	
	        MethodBuilder mbNumberGetAccessor = tb.DefineMethod(
	            "get_Number", 
	            getSetAttr, 
	            typeof(int), 
	            Type.EmptyTypes);
	      
	        ILGenerator numberGetIL = mbNumberGetAccessor.GetILGenerator();
	        numberGetIL.Emit(OpCodes.Ldarg_0);
	        numberGetIL.Emit(OpCodes.Ldfld, fbNumber);
	        numberGetIL.Emit(OpCodes.Ret);
	        
	        MethodBuilder mbNumberSetAccessor = tb.DefineMethod(
	            "set_Number", 
	            getSetAttr, 
	            null, 
	            new Type[] { typeof(int) });
	      
	        ILGenerator numberSetIL = mbNumberSetAccessor.GetILGenerator();
	        numberSetIL.Emit(OpCodes.Ldarg_0);
	        numberSetIL.Emit(OpCodes.Ldarg_1);
	        numberSetIL.Emit(OpCodes.Stfld, fbNumber);
	        numberSetIL.Emit(OpCodes.Ret);
	      
	        pbNumber.SetGetMethod(mbNumberGetAccessor);
	        pbNumber.SetSetMethod(mbNumberSetAccessor);
	
	        MethodBuilder meth = tb.DefineMethod(
	            "MyMethod", 
	            MethodAttributes.Public, 
	            typeof(int), 
	            new Type[] { typeof(int) });
	
	        ILGenerator methIL = meth.GetILGenerator();
	        methIL.Emit(OpCodes.Ldarg_0);
	        methIL.Emit(OpCodes.Ldfld, fbNumber);
	        methIL.Emit(OpCodes.Ldarg_1);
	        methIL.Emit(OpCodes.Mul);
	        methIL.Emit(OpCodes.Ret);
	
	        Type t = tb.CreateType();
	     
	        ab.Save(aName.Name + ".dll");
	
	        MethodInfo mi = t.GetMethod("MyMethod");
	        PropertyInfo pi = t.GetProperty("Number");
	  
	        object o1 = Activator.CreateInstance(t);
	
	        Console.WriteLine("o1.Number: {0}", pi.GetValue(o1, null));
	        pi.SetValue(o1, 127, null);
	        Console.WriteLine("o1.Number: {0}", pi.GetValue(o1, null));
	
	        object[] arguments = { 22 };
	        Console.WriteLine("o1.MyMethod(22): {0}", 
	            mi.Invoke(o1, arguments));
	
	        object o2 = Activator.CreateInstance(t, 
	            new object[] { 5280 });
	        Console.WriteLine("o2.Number: {0}", pi.GetValue(o2, null));
	    }
	}
	
	/* This code produces the following output:
	
	o1.Number: 42
	o1.Number: 127
	o1.MyMethod(22): 2794
	o2.Number: 5280
	 */
	
	

snippet howtoemitcodeinpartialtrust

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HowToEmitCodeInPartialTrust/source.cs

	using System;
	using System.Reflection.Emit;
	using System.Reflection;
	using System.Security;
	using System.Security.Permissions;
	using System.Security.Policy;
	using System.Collections;
	using System.Diagnostics;
	
	
	public delegate void Test(Worker w);
	public delegate void Test1();
	public delegate char Test2(String instance);
	
	public class Worker : MarshalByRefObject
	{
	    private void PrivateMethod()
	    {
	        Console.WriteLine("Worker.PrivateMethod()");
	    }
	
	    public void SimpleEmitDemo()
	    {
	        DynamicMethod meth = new DynamicMethod("", null, null);
	        ILGenerator il = meth.GetILGenerator();
	        il.EmitWriteLine("Hello, World!");
	        il.Emit(OpCodes.Ret);
	
	        Test1 t1 = (Test1) meth.CreateDelegate(typeof(Test1));
	        t1();
	    }
	
	    public void AccessPrivateMethod(bool restrictedSkipVisibility) 
	    {
	        DynamicMethod meth = new DynamicMethod(
	            "", 
	            null, 
	            new Type[] { typeof(Worker) }, 
	            restrictedSkipVisibility);
	
	        MethodInfo pvtMeth = typeof(Worker).GetMethod("PrivateMethod",
	            BindingFlags.NonPublic | BindingFlags.Instance);
	
	        ILGenerator il = meth.GetILGenerator();
	
	        il.Emit(OpCodes.Ldarg_0);
	        il.EmitCall(OpCodes.Call, pvtMeth, null);
	        il.Emit(OpCodes.Ret);
	
	        try 
	        {
	            Test t = (Test) meth.CreateDelegate(typeof(Test));
	            try 
	            {
	                t(this);
	            }
	            catch (Exception ex) 
	            {
	                Console.WriteLine("{0} was thrown when the delegate was invoked.", 
	                    ex.GetType().Name);
	            }
	        } 
	        catch (Exception ex) 
	        {
	            Console.WriteLine("{0} was thrown when the delegate was compiled.", 
	                ex.GetType().Name);
	        }
	    }
	
	    public void AccessPrivateMethod() 
	    {
	        DynamicMethod meth = new DynamicMethod("",
	                                               typeof(char), 
	                                               new Type[] { typeof(String) }, 
	                                               true);
	
	        PropertyInfo pi = typeof(System.String).GetProperty(
	            "FirstChar",
	            BindingFlags.NonPublic | BindingFlags.Instance);
	        MethodInfo pvtMeth = pi.GetGetMethod(true);
	
	        ILGenerator il = meth.GetILGenerator();
	
	        il.Emit(OpCodes.Ldarg_0);
	        il.EmitCall(OpCodes.Call, pvtMeth, null);
	        il.Emit(OpCodes.Ret);
	
	        try 
	        {
	            Test2 t = (Test2) meth.CreateDelegate(typeof(Test2));
	            char first = t("Hello, World!");
	            Console.WriteLine("{0} is the first character.", first);
	        } 
	        catch (Exception ex) 
	        {
	            Console.WriteLine("{0} was thrown when the delegate was compiled.", 
	                ex.GetType().Name);
	        }
	    }
	
	
	    static void Main()
	    {
	        String asmName = typeof(Worker).Assembly.FullName;
	
	        Evidence ev = new Evidence();
	        ev.AddHostEvidence(new Zone(SecurityZone.Internet));
	        PermissionSet pset = new NamedPermissionSet("Internet", SecurityManager.GetStandardSandbox(ev));
	
	        AppDomainSetup adSetup = new AppDomainSetup();
	        adSetup.ApplicationBase = ".";
	
	        AppDomain ad = AppDomain.CreateDomain("Sandbox", ev, adSetup, pset, null);
	
	        Worker w = (Worker) ad.CreateInstanceAndUnwrap(asmName, "Worker");
	
	        w.SimpleEmitDemo();
	
	        w.AccessPrivateMethod(false);
	
	        w.AccessPrivateMethod(true);
	
	
	        AppDomain.Unload(ad);
	        pset.SetPermission(
	            new ReflectionPermission(
	                ReflectionPermissionFlag.RestrictedMemberAccess));
	        ad = AppDomain.CreateDomain("Sandbox2", ev, adSetup, pset, null);
	
	        w = (Worker) ad.CreateInstanceAndUnwrap(asmName, "Worker");
	
	        w.AccessPrivateMethod(true);
	
	        w.AccessPrivateMethod();
	    }
	}
	
	/* This code example produces the following output:
	
	Hello, World!
	MethodAccessException was thrown when the delegate was invoked.
	MethodAccessException was thrown when the delegate was invoked.
	Worker.PrivateMethod()
	MethodAccessException was thrown when the delegate was compiled.
	 */
snippet module_methodresolve

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Module_MethodResolve/source.cs

	using System;
	using System.Reflection;
	
	namespace ResolveMethodExample
	{
	    enum Tokens
	    {
	        Case1 = 0x2b000001,
	        Case2 = 0x0A000006,
	        Case3 = 0x2b000002,
	        Case4 = 0x06000006,
	        Case5 = 0x2b000002        
	    }
	
	    class G1<Tg1>
	    {
	        public void GM1<Tgm1> (Tg1 param1, Tgm1 param2) {}
	        public void M1(Tg1 param) {}
	    }
	
	    class G2<Tg2>
	    {
	        public void GM2<Tgm2> (Tg2 param1, Tgm2 param2)
	        {
	            G1<Tg2> g = new G1<Tg2>();
	            g.GM1<Tgm2>(param1, param2);
	
	            g.M1(param1);
	
	            G1<int> gi = new G1<int>();
	            gi.GM1<object>(42, new Object());
	
	            Example e = new Example();
	            e.M();
	        } 
	    }
	
	    class Example
	    {
	        public void M()
	        {
	            G1<int> g = new G1<int>();
	            g.GM1<object>(42, new Object());
	        }
	
	        static void Main ()
	        {      
	            Module mod = typeof(Example).Assembly.ManifestModule;
	            MethodInfo miResolved2 = null;
	
	            Type t = typeof(G1<>).MakeGenericType(typeof(G2<>).GetGenericArguments());
	            MethodInfo mi = typeof(G2<>).GetMethod("GM2");
	            MethodInfo miTest = t.GetMethod("GM1").MakeGenericMethod(mi.GetGenericArguments());
	            Console.WriteLine("\nCase 1:\n{0}", miTest);
	
	            MethodInfo miResolved = (MethodInfo) mod.ResolveMethod(
	                (int)Tokens.Case1, 
	                typeof(G2<>).GetGenericArguments(), 
	                typeof(G2<>).GetMethod("GM2").GetGenericArguments());
	            Console.WriteLine(miResolved);
	            Console.WriteLine("Is the resolved method the same? {0}", miResolved == miTest);
	
	            try 
	            { 
	                miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case1);
	            } 
	            catch (Exception ex) 
	            { 
	                Console.WriteLine("{0}: {1}", ex.GetType(), ex.Message); 
	            }
	
	
	            t = typeof(G1<>).MakeGenericType(typeof(G2<>).GetGenericArguments());
	            miTest = t.GetMethod("M1");
	            Console.WriteLine("\nCase 2:\n{0}", miTest);
	
	            miResolved = (MethodInfo) mod.ResolveMethod(
	                (int)Tokens.Case2, 
	                typeof(G2<>).GetGenericArguments(), 
	                typeof(G2<>).GetMethod("GM2").GetGenericArguments());
	            Console.WriteLine(miResolved);
	            Console.WriteLine("Is the resolved method the same? {0}", miResolved == miTest);
	
	            try 
	            { 
	                miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case2);
	            } 
	            catch (Exception ex) 
	            { 
	                Console.WriteLine("{0}: {1}", ex.GetType(), ex.Message); 
	            }
	
	
	            mi = typeof(G1<int>).GetMethod("GM1");
	            miTest = mi.MakeGenericMethod(new Type[] { typeof(object) });
	            Console.WriteLine("\nCase 3:\n{0}", miTest);
	
	            miResolved = (MethodInfo) mod.ResolveMethod(
	                (int)Tokens.Case3, 
	                typeof(G2<>).GetGenericArguments(), 
	                typeof(G2<>).GetMethod("GM2").GetGenericArguments());
	            Console.WriteLine(miResolved);
	            Console.WriteLine("Is the resolved method the same? {0}", miResolved == miTest);
	
	            miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case3);
	
	
	            miTest = typeof(Example).GetMethod("M");
	            Console.WriteLine("\nCase 4:\n{0}", miTest);
	
	            miResolved = (MethodInfo) mod.ResolveMethod(
	                (int)Tokens.Case4, 
	                typeof(G2<>).GetGenericArguments(), 
	                typeof(G2<>).GetMethod("GM2").GetGenericArguments());
	            Console.WriteLine(miResolved);
	            Console.WriteLine("Is the resolved method the same? {0}", miResolved == miTest);
	
	            miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case4);
	
	
	            mi = typeof(G1<int>).GetMethod("GM1");
	            miTest = mi.MakeGenericMethod(new Type[] { typeof(object) });
	            Console.WriteLine("\nCase 5:\n{0}", miTest);
	
	            miResolved = (MethodInfo) mod.ResolveMethod(
	                (int)Tokens.Case5, 
	                typeof(Example).GetGenericArguments(),
	                typeof(Example).GetMethod("M").GetGenericArguments());
	            Console.WriteLine(miResolved);
	            Console.WriteLine("Is the resolved method the same? {0}", miResolved == miTest);
	
	            miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case5);
	        }
	    }
	}
	/* This example produces the following output:
	
	Case 1:
	Void GM1[Tgm2](Tg2, Tgm2)
	Void GM1[Tgm2](Tg2, Tgm2)
	Is the resolved method the same? True
	System.ArgumentException: A BadImageFormatException has been thrown while parsing the signature. This is likely due to lack of a generic context. Ensure genericTypeArguments and genericMethodArguments are provided and contain enough context.
	
	Case 2:
	Void M1(Tg2)
	Void M1(Tg2)
	Is the resolved method the same? True
	System.ArgumentException: A BadImageFormatException has been thrown while parsing the signature. This is likely due to lack of a generic context. Ensure genericTypeArguments and genericMethodArguments are provided and contain enough context.
	
	Case 3:
	Void GM1[Object](Int32, System.Object)
	Void GM1[Object](Int32, System.Object)
	Is the resolved method the same? True
	
	Case 4:
	Void M()
	Void M()
	Is the resolved method the same? True
	
	Case 5:
	Void GM1[Object](Int32, System.Object)
	Void GM1[Object](Int32, System.Object)
	Is the resolved method the same? True
	 */

snippet howtoencryptxmlelementasymmetric

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/HowToEncryptXMLElementAsymmetric/sample.cs

	
	using System;
	using System.Xml;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	
	class Program
	{
	    static void Main(string[] args)
	    {
	        XmlDocument xmlDoc = new XmlDocument();
	
	        try
	        {
	            xmlDoc.PreserveWhitespace = true;
	            xmlDoc.Load("test.xml");
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	
	        CspParameters cspParams = new CspParameters();
	        cspParams.KeyContainerName = "XML_ENC_RSA_KEY";
	
	        RSACryptoServiceProvider rsaKey = new RSACryptoServiceProvider(cspParams);
	
	        try
	        {
	            Encrypt(xmlDoc, "creditcard", "EncryptedElement1", rsaKey, "rsaKey");
	
	
	            xmlDoc.Save("test.xml");
	
	            Console.WriteLine("Encrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	            Decrypt(xmlDoc, rsaKey, "rsaKey");
	            xmlDoc.Save("test.xml");
	            Console.WriteLine();
	            Console.WriteLine("Decrypted XML:");
	            Console.WriteLine();
	            Console.WriteLine(xmlDoc.OuterXml);
	
	        }
	        catch (Exception e)
	        {
	            Console.WriteLine(e.Message);
	        }
	        finally
	        {
	            rsaKey.Clear();
	        }
	
	
	        Console.ReadLine();
	    }
	
	    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, string EncryptionElementID, RSA Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (ElementToEncrypt == null)
	            throw new ArgumentNullException("ElementToEncrypt");
	        if (EncryptionElementID == null)
	            throw new ArgumentNullException("EncryptionElementID");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	        if (KeyName == null)
	            throw new ArgumentNullException("KeyName");
	
	        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;
	
	        if (elementToEncrypt == null)
	        {
	            throw new XmlException("The specified element was not found");
	
	        }
	        RijndaelManaged sessionKey = null;
	
	        try
	        {
	
	            sessionKey = new RijndaelManaged();
	            sessionKey.KeySize = 256;
	
	            EncryptedXml eXml = new EncryptedXml();
	
	            byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);
	
	            EncryptedData edElement = new EncryptedData();
	            edElement.Type = EncryptedXml.XmlEncElementUrl;
	            edElement.Id = EncryptionElementID;
	
	            edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);
	            EncryptedKey ek = new EncryptedKey();
	
	            byte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);
	
	            ek.CipherData = new CipherData(encryptedKey);
	
	            ek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);
	
	            DataReference dRef = new DataReference();
	
	            dRef.Uri = "#" + EncryptionElementID;
	
	            ek.AddReference(dRef);
	
	            edElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));
	
	
	            KeyInfoName kin = new KeyInfoName();
	
	            kin.Value = KeyName;
	
	            ek.KeyInfo.AddClause(kin);
	            edElement.CipherData.CipherValue = encryptedElement;
	            EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
	        }
	        catch (Exception e)
	        {
	            throw e;
	        }
	        finally
	        {
	            if (sessionKey != null)
	            {
	                sessionKey.Clear();
	            }
	
	        }
	
	    }
	
	    public static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)
	    {
	        if (Doc == null)
	            throw new ArgumentNullException("Doc");
	        if (Alg == null)
	            throw new ArgumentNullException("Alg");
	        if (KeyName == null)
	            throw new ArgumentNullException("KeyName");
	
	        EncryptedXml exml = new EncryptedXml(Doc);
	
	        exml.AddKeyNameMapping(KeyName, Alg);
	
	        exml.DecryptDocument();
	
	    }
	
	}
	
snippet security_cryptography_xml_signedxml_checksignature

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Security_Cryptography_Xml_SignedXml_CheckSignature/sample.cs

	
	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.Xml;
	using System.Security.Cryptography.X509Certificates;
	using System.Text;
	using System.Xml;
	
	public class SignVerifyEnvelope
	{
	
	    public static void Main(String[] args)
	    {
	
	        string Certificate = "CN=XMLDSIG_Test";
	
	        try
	        {
	
	            CreateSomeXml("Example.xml");
	            Console.WriteLine("New XML file created.");
	
	            SignXmlFile("Example.xml", "SignedExample.xml", Certificate);
	            Console.WriteLine("XML file signed.");
	
	            if (VerifyXmlFile("SignedExample.xml", Certificate))
	            {
	                Console.WriteLine("The XML signature is valid.");
	            }
	            else
	            {
	                Console.WriteLine("The XML signature is not valid.");
	            }
	        }
	        catch (CryptographicException e)
	        {
	            Console.WriteLine(e.Message);
	        }
	    }
	
	    public static void SignXmlFile(string FileName, string SignedFileName, string SubjectName)
	    {
	        if (null == FileName)
	            throw new ArgumentNullException("FileName");
	        if (null == SignedFileName)
	            throw new ArgumentNullException("SignedFileName");
	        if (null == SubjectName)
	            throw new ArgumentNullException("SubjectName");
	
	        X509Certificate2 cert = GetCertificateBySubject(SubjectName);
	
	        XmlDocument doc = new XmlDocument();
	
	        doc.PreserveWhitespace = false;
	
	        doc.Load(new XmlTextReader(FileName));
	
	        SignedXml signedXml = new SignedXml(doc);
	
	        signedXml.SigningKey = cert.PrivateKey;
	
	        Reference reference = new Reference();
	        reference.Uri = "";
	
	        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
	        reference.AddTransform(env);
	
	        signedXml.AddReference(reference);
	
	        KeyInfo keyInfo = new KeyInfo();
	
	        keyInfo.AddClause(new KeyInfoX509Data(cert));
	
	        signedXml.KeyInfo = keyInfo;
	
	        signedXml.ComputeSignature();
	
	        XmlElement xmlDigitalSignature = signedXml.GetXml();
	
	        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));
	
	
	        if (doc.FirstChild is XmlDeclaration)
	        {
	            doc.RemoveChild(doc.FirstChild);
	        }
	
	        using (XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false)))
	        {
	            doc.WriteTo(xmltw);
	            xmltw.Close();
	        }
	
	    }
	
	    public static Boolean VerifyXmlFile(String FileName, String CertificateSubject)
	    {
	        if (null == FileName)
	            throw new ArgumentNullException("FileName");
	        if (null == CertificateSubject)
	            throw new ArgumentNullException("CertificateSubject");
	
	        X509Certificate2 cert = GetCertificateBySubject(CertificateSubject);
	
	        XmlDocument xmlDocument = new XmlDocument();
	
	        xmlDocument.Load(FileName);
	
	        SignedXml signedXml = new SignedXml(xmlDocument);
	
	        XmlNodeList nodeList = xmlDocument.GetElementsByTagName("Signature");
	
	        signedXml.LoadXml((XmlElement)nodeList[0]);
	
	        return signedXml.CheckSignature(cert, true);
	
	    }
	
	
	    public static X509Certificate2 GetCertificateBySubject(string CertificateSubject)
	    {
	        if (null == CertificateSubject)
	            throw new ArgumentNullException("CertificateSubject");
	
	
	        X509Certificate2 cert = null;
	
	        X509Store store = new X509Store("My", StoreLocation.CurrentUser);
	
	        try
	        {
	            store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);
	
	            X509Certificate2Collection CertCol = store.Certificates;
	
	            foreach (X509Certificate2 c in CertCol)
	            {
	                if (c.Subject == CertificateSubject)
	                {
	                    cert = c;
	                    break;
	                }
	            }
	
	            if (cert == null)
	            {
	                throw new CryptographicException("The certificate could not be found.");
	            }
	        }
	        finally
	        {
	            store.Close();
	        }
	        
	        return cert;
	    }
	
	    public static void CreateSomeXml(string FileName)
	    {
	        if (null == FileName)
	            throw new ArgumentNullException("FileName");
	
	        XmlDocument document = new XmlDocument();
	
	        XmlNode node = document.CreateNode(XmlNodeType.Element, "", "MyElement", "samples");
	
	        node.InnerText = "Example text to be signed.";
	
	        document.AppendChild(node);
	
	        using (XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false)))
	        {
	            document.WriteTo(xmltw);
	
	            xmltw.Close();
	        }
	    }
	}
snippet safehandle

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/program.cs

	using System;
	using System.Runtime.InteropServices;
	using System.IO;
	using System.ComponentModel;
	using System.Security.Permissions;
	using System.Security;
	using System.Threading;
	using Microsoft.Win32.SafeHandles;
	using System.Runtime.ConstrainedExecution;
	
	namespace SafeHandleDemo
	{
	    [SecurityPermission(SecurityAction.InheritanceDemand, UnmanagedCode = true)]
	    [SecurityPermission(SecurityAction.Demand, UnmanagedCode = true)]
	    internal class MySafeFileHandle : SafeHandleZeroOrMinusOneIsInvalid
	    {
	        private MySafeFileHandle()
	            : base(true)
	        {
	        }
	        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]
	        override protected bool ReleaseHandle()
	        {
	            return NativeMethods.CloseHandle(handle);
	        }
	    }
	
	    [SuppressUnmanagedCodeSecurity()]
	    internal static class NativeMethods
	    {
	        internal const int GENERIC_READ = unchecked((int)0x80000000);
	
	        [DllImport("kernel32", SetLastError = true, CharSet = CharSet.Unicode)]
	        internal extern static MySafeFileHandle CreateFile(String fileName,
	           int dwDesiredAccess, System.IO.FileShare dwShareMode,
	           IntPtr securityAttrs_MustBeZero, System.IO.FileMode dwCreationDisposition,
	           int dwFlagsAndAttributes, IntPtr hTemplateFile_MustBeZero);
	
	        [DllImport("kernel32", SetLastError = true)]
	        internal extern static int ReadFile(MySafeFileHandle handle, byte[] bytes,
	           int numBytesToRead, out int numBytesRead, IntPtr overlapped_MustBeZero);
	
	        [DllImport("kernel32", SetLastError = true)]
	        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]
	        internal extern static bool CloseHandle(IntPtr handle);
	    }
	
	    public class MyFileReader : IDisposable
	    {
	        private MySafeFileHandle _handle;
	
	        public MyFileReader(String fileName)
	        {
	            String fullPath = Path.GetFullPath(fileName);
	            new FileIOPermission(FileIOPermissionAccess.Read, fullPath).Demand();
	
	
	            MySafeFileHandle tmpHandle;
	            tmpHandle = NativeMethods.CreateFile(fileName, NativeMethods.GENERIC_READ,
	                FileShare.Read, IntPtr.Zero, FileMode.Open, 0, IntPtr.Zero);
	
	
	            Thread.Sleep(500);
	
	            if (_handle.IsInvalid)
	                throw new Win32Exception(Marshal.GetLastWin32Error(), fileName);
	        }
	
	        {
	            Dispose(true);
	            GC.SuppressFinalize(this);
	        }
	
	        [SecurityPermission(SecurityAction.Demand, UnmanagedCode = true)]
	        protected virtual void Dispose(bool disposing)
	        {
	            if (_handle != null && !_handle.IsInvalid)
	            {
	                _handle.Dispose();
	            }
	        }
	
	
	        [SecurityPermission(SecurityAction.Demand, UnmanagedCode = true)]
	        public byte[] ReadContents(int length)
	        {
	                throw new ObjectDisposedException("FileReader is closed");
	
	            byte[] bytes = new byte[length];
	            int numRead = 0;
	            int r = NativeMethods.ReadFile(_handle, bytes, length, out numRead, IntPtr.Zero);
	            if (r == 0)
	                throw new Win32Exception(Marshal.GetLastWin32Error());
	            if (numRead < length)
	            {
	                byte[] newBytes = new byte[numRead];
	                Array.Copy(bytes, newBytes, numRead);
	                bytes = newBytes;
	            }
	            return bytes;
	        }
	    }
	
	    static class Program
	    {
	        private static bool _printToConsole = false;
	        private static bool _workerStarted = false;
	
	        private static void Usage()
	        {
	            Console.WriteLine("Usage:");
	            Console.WriteLine("HexViewer <fileName> [-fault]");
	            Console.WriteLine(" -fault Runs hex viewer repeatedly, injecting faults.");
	        }
	
	        private static void ViewInHex(Object fileName)
	        {
	            _workerStarted = true;
	            byte[] bytes;
	            using (MyFileReader reader = new MyFileReader((String)fileName))
	            {
	                bytes = reader.ReadContents(20);
	
	            if (_printToConsole)
	            {
	                int printNBytes = Math.Min(20, bytes.Length);
	                Console.WriteLine("First {0} bytes of {1} in hex", printNBytes, fileName);
	                for (int i = 0; i < printNBytes; i++)
	                    Console.Write("{0:x} ", bytes[i]);
	                Console.WriteLine();
	            }
	        }
	
	        static void Main(string[] args)
	        {
	            if (args.Length == 0 || args.Length > 2 ||
	                args[0] == "-?" || args[0] == "/?")
	            {
	                Usage();
	                return;
	            }
	
	            String fileName = args[0];
	            bool injectFaultMode = args.Length > 1;
	            if (!injectFaultMode)
	            {
	                _printToConsole = true;
	                ViewInHex(fileName);
	            }
	            else
	            {
	                Console.WriteLine("Injecting faults - watch handle count in perfmon (press Ctrl-C when done)");
	                int numIterations = 0;
	                while (true)
	                {
	                    _workerStarted = false;
	                    Thread t = new Thread(new ParameterizedThreadStart(ViewInHex));
	                    t.Start(fileName);
	                    Thread.Sleep(1);
	                    while (!_workerStarted)
	                    {
	                        Thread.Sleep(0);
	                    }
	                    numIterations++;
	                    if (numIterations % 10 == 0)
	                        GC.Collect();
	                    if (numIterations % 10000 == 0)
	                        Console.WriteLine(numIterations);
	                }
	            }
	
	        }
	    }
	}

snippet generic_linkedlist

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Generic_LinkedList/source.cs

	using System;
	using System.Text;
	using System.Collections.Generic;
	
	public class Example
	{
	    public static void Main()
	    {
	        string[] words =
	            { "the", "fox", "jumps", "over", "the", "dog" };
	        LinkedList<string> sentence = new LinkedList<string>(words);
	        Display(sentence, "The linked list values:");
	        Console.WriteLine("sentence.Contains(\"jumps\") = {0}",
	            sentence.Contains("jumps"));
	
	        sentence.AddFirst("today");
	        Display(sentence, "Test 1: Add 'today' to beginning of the list:");
	
	        LinkedListNode<string> mark1 = sentence.First;
	        sentence.RemoveFirst();
	        sentence.AddLast(mark1);
	        Display(sentence, "Test 2: Move first node to be last node:");
	
	        sentence.RemoveLast();
	        sentence.AddLast("yesterday");
	        Display(sentence, "Test 3: Change the last node to 'yesterday':");
	
	        mark1 = sentence.Last;
	        sentence.RemoveLast();
	        sentence.AddFirst(mark1);
	        Display(sentence, "Test 4: Move last node to be first node:");
	
	
	        sentence.RemoveFirst();
	        LinkedListNode<string> current = sentence.FindLast("the");
	        IndicateNode(current, "Test 5: Indicate last occurence of 'the':");
	
	        sentence.AddAfter(current, "old");
	        sentence.AddAfter(current, "lazy");
	        IndicateNode(current, "Test 6: Add 'lazy' and 'old' after 'the':");
	
	        current = sentence.Find("fox");
	        IndicateNode(current, "Test 7: Indicate the 'fox' node:");
	
	        sentence.AddBefore(current, "quick");
	        sentence.AddBefore(current, "brown");
	        IndicateNode(current, "Test 8: Add 'quick' and 'brown' before 'fox':");
	
	        mark1 = current;
	        LinkedListNode<string> mark2 = current.Previous;
	        current = sentence.Find("dog");
	        IndicateNode(current, "Test 9: Indicate the 'dog' node:");
	
	        Console.WriteLine("Test 10: Throw exception by adding node (fox) already in the list:");
	        try
	        {
	            sentence.AddBefore(current, mark1);
	        }
	        catch (InvalidOperationException ex)
	        {
	            Console.WriteLine("Exception message: {0}", ex.Message);
	        }
	        Console.WriteLine();
	
	        sentence.Remove(mark1);
	        sentence.AddBefore(current, mark1);
	        IndicateNode(current, "Test 11: Move a referenced node (fox) before the current node (dog):");
	
	        sentence.Remove(current);
	        IndicateNode(current, "Test 12: Remove current node (dog) and attempt to indicate it:");
	
	        sentence.AddAfter(mark2, current);
	        IndicateNode(current, "Test 13: Add node removed in test 11 after a referenced node (brown):");
	
	        sentence.Remove("old");
	        Display(sentence, "Test 14: Remove node that has the value 'old':");
	
	        sentence.RemoveLast();
	        ICollection<string> icoll = sentence;
	        icoll.Add("rhinoceros");
	        Display(sentence, "Test 15: Remove last node, cast to ICollection, and add 'rhinoceros':");
	
	        Console.WriteLine("Test 16: Copy the list to an array:");
	        string[] sArray = new string[sentence.Count];
	        sentence.CopyTo(sArray, 0);
	
	        foreach (string s in sArray)
	        {
	            Console.WriteLine(s);
	        }
	
	        sentence.Clear();
	
	        Console.WriteLine();
	        Console.WriteLine("Test 17: Clear linked list. Contains 'jumps' = {0}",
	            sentence.Contains("jumps"));
	
	        Console.ReadLine();
	    }
	
	    private static void Display(LinkedList<string> words, string test)
	    {
	        Console.WriteLine(test);
	        foreach (string word in words)
	        {
	            Console.Write(word + " ");
	        }
	        Console.WriteLine();
	        Console.WriteLine();
	    }
	
	    private static void IndicateNode(LinkedListNode<string> node, string test)
	    {
	        Console.WriteLine(test);
	        if (node.List == null)
	        {
	            Console.WriteLine("Node '{0}' is not in the list.\n",
	                node.Value);
	            return;
	        }
	
	        StringBuilder result = new StringBuilder("(" + node.Value + ")");
	        LinkedListNode<string> nodeP = node.Previous;
	
	        while (nodeP != null)
	        {
	            result.Insert(0, nodeP.Value + " ");
	            nodeP = nodeP.Previous;
	        }
	
	        node = node.Next;
	        while (node != null)
	        {
	            result.Append(" " + node.Value);
	            node = node.Next;
	        }
	
	        Console.WriteLine(result);
	        Console.WriteLine();
	    }
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
snippet conceptual_conversion

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_conversion/iconvertible2.cs

	using System;
	
	public abstract class Temperature : IConvertible
	{
	   protected decimal temp;
	   
	   public Temperature(decimal temperature)
	   {
	      this.temp = temperature;
	   }
	
	   public decimal Value
	   { 
	      get { return this.temp; } 
	      set { this.temp = value; }        
	   }
	
	   public override string ToString()
	   {
	      return temp.ToString(null as IFormatProvider) + "º";
	   }
	
	   public TypeCode GetTypeCode() { 
	      return TypeCode.Object;
	   }   
	
	   public bool ToBoolean(IFormatProvider provider) {
	      throw new InvalidCastException(String.Format("Temperature-to-Boolean conversion is not supported."));
	   }
	   
	   public byte ToByte(IFormatProvider provider) {
	      if (temp < Byte.MinValue || temp > Byte.MaxValue)
	         throw new OverflowException(String.Format("{0} is out of range of the Byte data type.", temp));
	      else
	         return (byte) temp;
	   }
	
	   public char ToChar(IFormatProvider provider) {
	      throw new InvalidCastException("Temperature-to-Char conversion is not supported.");
	   }
	   
	   public DateTime ToDateTime(IFormatProvider provider) {
	      throw new InvalidCastException("Temperature-to-DateTime conversion is not supported.");
	   }
	   
	   public decimal ToDecimal(IFormatProvider provider) {
	      return temp;
	   }
	   
	   public double ToDouble(IFormatProvider provider) {
	      return (double) temp;
	   }
	   
	   public short ToInt16(IFormatProvider provider) {
	      if (temp < Int16.MinValue || temp > Int16.MaxValue)
	         throw new OverflowException(String.Format("{0} is out of range of the Int16 data type.", temp));
	      else
	         return (short) Math.Round(temp);
	   }
	
	   public int ToInt32(IFormatProvider provider) {
	      if (temp < Int32.MinValue || temp > Int32.MaxValue)
	         throw new OverflowException(String.Format("{0} is out of range of the Int32 data type.", temp));
	      else
	         return (int) Math.Round(temp);
	   }
	   
	   public long ToInt64(IFormatProvider provider) {
	      if (temp < Int64.MinValue || temp > Int64.MaxValue)
	         throw new OverflowException(String.Format("{0} is out of range of the Int64 data type.", temp));
	      else
	         return (long) Math.Round(temp);
	   }
	   
	   public sbyte ToSByte(IFormatProvider provider) {
	      if (temp < SByte.MinValue || temp > SByte.MaxValue)
	         throw new OverflowException(String.Format("{0} is out of range of the SByte data type.", temp));
	      else
	         return (sbyte) temp;
	   }
	
	   public float ToSingle(IFormatProvider provider) {
	      return (float) temp;
	   }
	   
	   public virtual string ToString(IFormatProvider provider) {
	      return temp.ToString(provider) + "°";
	   }
	   
	   public virtual object ToType(Type conversionType, IFormatProvider provider) {
	      switch (Type.GetTypeCode(conversionType))
	      {
	         case TypeCode.Boolean:
	            return this.ToBoolean(provider);
	         case TypeCode.Byte:
	            return this.ToByte(provider);
	         case TypeCode.Char:
	            return this.ToChar(provider);
	         case TypeCode.DateTime:
	            return this.ToDateTime(provider);
	         case TypeCode.Decimal:
	            return this.ToDecimal(provider);
	         case TypeCode.Double:
	            return this.ToDouble(provider);
	         case TypeCode.Empty:
	            throw new NullReferenceException("The target type is null.");
	         case TypeCode.Int16:
	            return this.ToInt16(provider);
	         case TypeCode.Int32:
	            return this.ToInt32(provider);
	         case TypeCode.Int64:
	            return this.ToInt64(provider);
	         case TypeCode.Object:
	            throw new InvalidCastException(String.Format("Cannot convert from Temperature to {0}.", 
	                                           conversionType.Name));
	         case TypeCode.SByte:
	            return this.ToSByte(provider);
	         case TypeCode.Single:
	            return this.ToSingle(provider);
	         case TypeCode.String:
	            IConvertible iconv = this;
	            return iconv.ToString(provider);
	         case TypeCode.UInt16:
	            return this.ToUInt16(provider);
	         case TypeCode.UInt32:
	            return this.ToUInt32(provider);
	         case TypeCode.UInt64:
	            return this.ToUInt64(provider);
	         default:
	            throw new InvalidCastException("Conversion not supported.");
	      }
	   }
	   
	   public ushort ToUInt16(IFormatProvider provider) {
	      if (temp < UInt16.MinValue || temp > UInt16.MaxValue)
	         throw new OverflowException(String.Format("{0} is out of range of the UInt16 data type.", temp));
	      else
	         return (ushort) Math.Round(temp);
	   }
	   
	   public uint ToUInt32(IFormatProvider provider) {
	      if (temp < UInt32.MinValue || temp > UInt32.MaxValue)
	         throw new OverflowException(String.Format("{0} is out of range of the UInt32 data type.", temp));
	      else
	         return (uint) Math.Round(temp);
	   }
	   
	   public ulong ToUInt64(IFormatProvider provider) {
	      if (temp < UInt64.MinValue || temp > UInt64.MaxValue)
	         throw new OverflowException(String.Format("{0} is out of range of the UInt64 data type.", temp));
	      else
	         return (ulong) Math.Round(temp);
	   }
	}
	
	public class TemperatureCelsius : Temperature, IConvertible
	{
	   public TemperatureCelsius(decimal value) : base(value)
	   {
	   }
	   
	   public override string ToString()
	   {
	      return this.ToString(null);
	   }
	
	   public override string ToString(IFormatProvider provider)
	   {
	      return temp.ToString(provider) + "°C"; 
	   }
	   
	   public override object ToType(Type conversionType, IFormatProvider provider) {
	      if (Type.GetTypeCode(conversionType) != TypeCode.Object) {
	         return base.ToType(conversionType, provider);
	      }   
	      else
	      {   
	         if (conversionType.Equals(typeof(TemperatureCelsius)))
	            return this;
	         else if (conversionType.Equals(typeof(TemperatureFahrenheit)))
	            return new TemperatureFahrenheit((decimal) this.temp * 9 / 5 + 32);
	         else
	            throw new InvalidCastException(String.Format("Cannot convert from Temperature to {0}.", 
	                                           conversionType.Name));
	      }
	   }
	}
	
	public class TemperatureFahrenheit : Temperature, IConvertible 
	{
	   public TemperatureFahrenheit(decimal value) : base(value)
	   {
	   }
	   
	   public override string ToString()
	   {
	      return this.ToString(null);
	   }
	
	   public override string ToString(IFormatProvider provider)
	   {
	      return temp.ToString(provider) + "°F"; 
	   }
	
	   public override object ToType(Type conversionType, IFormatProvider provider)
	   { 
	      if (Type.GetTypeCode(conversionType) != TypeCode.Object) {
	         return base.ToType(conversionType, provider);
	      }   
	      else
	      {   
	         if (conversionType.Equals(typeof(TemperatureFahrenheit))) 
	            return this;
	         else if (conversionType.Equals(typeof(TemperatureCelsius)))
	            return new TemperatureCelsius((decimal) (this.temp - 32) * 5 / 9);
	         else
	            throw new InvalidCastException(String.Format("Cannot convert from Temperature to {0}.", 
	                                           conversionType.Name));
	      }                                 
	   }
	}   
	
	public class Example
	{
	   public static void Main()
	   {
	      TemperatureCelsius tempC1 = new TemperatureCelsius(0);
	      TemperatureFahrenheit tempF1 = (TemperatureFahrenheit) Convert.ChangeType(tempC1, typeof(TemperatureFahrenheit), null);
	      Console.WriteLine("{0} equals {1}.", tempC1, tempF1);
	      TemperatureCelsius tempC2 = (TemperatureCelsius) Convert.ChangeType(tempC1, typeof(TemperatureCelsius), null);
	      Console.WriteLine("{0} equals {1}.", tempC1, tempC2);
	      TemperatureFahrenheit tempF2 = new TemperatureFahrenheit(212);
	      TemperatureCelsius tempC3 = (TemperatureCelsius) Convert.ChangeType(tempF2, typeof(TemperatureCelsius), null);
	      Console.WriteLine("{0} equals {1}.", tempF2, tempC3);
	      TemperatureFahrenheit tempF3 = (TemperatureFahrenheit) Convert.ChangeType(tempF2, typeof(TemperatureFahrenheit), null);
	      Console.WriteLine("{0} equals {1}.", tempF2, tempF3);
	   }
	}
	

snippet reflection_dynamicmethod_all

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Reflection_DynamicMethod_All/source.cs

	using System;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Globalization;
	
	public class Test
	{
	    private delegate int HelloDelegate(string msg, int ret);
	
	    public static void Main()
	    {
	        Type[] helloArgs = {typeof(string), typeof(int)};
	
	        DynamicMethod hello = new DynamicMethod("Hello", 
	            typeof(int), 
	            helloArgs, 
	            typeof(string).Module);
	
	        Type[] writeStringArgs = {typeof(string)};
	        MethodInfo writeString = typeof(Console).GetMethod("WriteLine", 
	            writeStringArgs);
	
	        ILGenerator il = hello.GetILGenerator(256);
	        il.Emit(OpCodes.Ldarg_0);
	        il.EmitCall(OpCodes.Call, writeString, null);
	        il.Emit(OpCodes.Ldarg_1);
	        il.Emit(OpCodes.Ret);
	
	        hello.DefineParameter(1, ParameterAttributes.In, "message");
	        hello.DefineParameter(2, ParameterAttributes.In, "valueToReturn");
	
	        HelloDelegate hi = 
	            (HelloDelegate) hello.CreateDelegate(typeof(HelloDelegate));
	
	        Console.WriteLine("\r\nUse the delegate to execute the dynamic method:");
	        int retval = hi("\r\nHello, World!", 42);
	        Console.WriteLine("Invoking delegate hi(\"Hello, World!\", 42) returned: " + retval);
	
	        retval = hi("\r\nHi, Mom!", 5280);
	        Console.WriteLine("Invoking delegate hi(\"Hi, Mom!\", 5280) returned: " + retval);
	
	        Console.WriteLine("\r\nUse the Invoke method to execute the dynamic method:");
	        object[] invokeArgs = {"\r\nHello, World!", 42};
	        object objRet = hello.Invoke(null, BindingFlags.ExactBinding, null, invokeArgs, new CultureInfo("en-us"));
	        Console.WriteLine("hello.Invoke returned: " + objRet);
	
	        Console.WriteLine("\r\n ----- Display information about the dynamic method -----");
	        Console.WriteLine("\r\nMethod Attributes: {0}", hello.Attributes);
	
	        Console.WriteLine("\r\nCalling convention: {0}", hello.CallingConvention);
	
	        if (hello.DeclaringType == null)
	        {
	            Console.WriteLine("\r\nDeclaringType is always null for dynamic methods.");
	        }
	        else
	        {
	            Console.WriteLine("DeclaringType: {0}", hello.DeclaringType);
	        }
	
	        if (hello.InitLocals)
	        {
	            Console.Write("\r\nThis method contains verifiable code.");
	        }
	        else
	        {
	            Console.Write("\r\nThis method contains unverifiable code.");
	        }
	        Console.WriteLine(" (InitLocals = {0})", hello.InitLocals);
	
	        Console.WriteLine("\r\nModule: {0}", hello.Module);
	
	        Console.WriteLine("\r\nName: {0}", hello.Name);
	
	        if (hello.ReflectedType == null)
	        {
	            Console.WriteLine("\r\nReflectedType is null.");
	        }
	        else
	        {
	            Console.WriteLine("\r\nReflectedType: {0}", hello.ReflectedType);
	        }
	
	        if (hello.ReturnParameter == null)
	        {
	            Console.WriteLine("\r\nMethod has no return parameter.");
	        }
	        else
	        {
	            Console.WriteLine("\r\nReturn parameter: {0}", hello.ReturnParameter);
	        }
	
	        Console.WriteLine("\r\nReturn type: {0}", hello.ReturnType);
	
	        if (hello.ReturnType == typeof(void))
	        {
	            Console.WriteLine("The method has no return type.");
	        }
	        else
	        {
	            ICustomAttributeProvider caProvider = hello.ReturnTypeCustomAttributes;
	            object[] returnAttributes = caProvider.GetCustomAttributes(true);
	            if (returnAttributes.Length == 0)
	            {
	                Console.WriteLine("\r\nThe return type has no custom attributes.");
	            }
	            else
	            {
	                Console.WriteLine("\r\nThe return type has the following custom attributes:");
	                foreach( object attr in returnAttributes )
	                {
	                    Console.WriteLine("\t{0}", attr.ToString());
	                }
	            }
	        }
	
	        Console.WriteLine("\r\nToString: {0}", hello.ToString());
	
	        ParameterInfo[] parameters = hello.GetParameters();
	        Console.WriteLine("\r\nParameters: name, type, ParameterAttributes");
	        foreach( ParameterInfo p in parameters )
	        {
	            Console.WriteLine("\t{0}, {1}, {2}", 
	                p.Name, p.ParameterType, p.Attributes);
	        }
	    }
	}
	
	/* This code example produces the following output:
	
	Use the delegate to execute the dynamic method:
	
	Hello, World!
	Invoking delegate hi("Hello, World!", 42) returned: 42
	
	Hi, Mom!
	Invoking delegate hi("Hi, Mom!", 5280) returned: 5280
	
	Use the Invoke method to execute the dynamic method:
	
	Hello, World!
	hello.Invoke returned: 42
	
	 ----- Display information about the dynamic method -----
	
	Method Attributes: PrivateScope, Public, Static
	
	Calling convention: Standard
	
	DeclaringType is always null for dynamic methods.
	
	This method contains verifiable code. (InitLocals = True)
	
	Module: CommonLanguageRuntimeLibrary
	
	Name: Hello
	
	ReflectedType is null.
	
	Method has no return parameter.
	
	Return type: System.Int32
	
	The return type has no custom attributes.
	
	ToString: Int32 Hello(System.String, Int32)
	
	Parameters: name, type, ParameterAttributes
	        message, System.String, In
	        valueToReturn, System.Int32, In
	 */
	
	
	

snippet keyedcollectionmutable

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/source.cs

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	
	public class MutableKeys : KeyedCollection<int, MutableKey>
	{
	    public MutableKeys() : base(null, 0) {}
	    
	    protected override int GetKeyForItem(MutableKey item)
	    {
	        return item.Key;
	    }
	
	    protected override void InsertItem(int index, MutableKey newItem)
	    {
	        if (newItem.Collection != null) 
	            throw new ArgumentException("The item already belongs to a collection.");
	
	        base.InsertItem(index, newItem);
	        newItem.Collection = this;
	    }
	
	    protected override void SetItem(int index, MutableKey newItem)
	    {
	        MutableKey replaced = Items[index];
	
	        if (newItem.Collection != null) 
	            throw new ArgumentException("The item already belongs to a collection.");
	
	        base.SetItem(index, newItem);
	        newItem.Collection = this;
	        replaced.Collection = null;
	    }
	
	    protected override void RemoveItem(int index)
	    {
	        MutableKey removedItem = Items[index];
	
	        base.RemoveItem(index);
	        removedItem.Collection = null;
	    }
	
	    protected override void ClearItems()
	    {
	        foreach( MutableKey mk in Items )
	        {
	            mk.Collection = null;
	        }
	        
	        base.ClearItems();
	    }
	
	    internal void ChangeKey(MutableKey item, int newKey)
	    {
	        base.ChangeItemKey(item, newKey);
	    }
	    
	    public void Dump()
	    {
	        Console.WriteLine("\nDUMP:");
	        if (Dictionary == null)
	        {
	            Console.WriteLine("    The dictionary has not been created.");
	        }
	        else
	        {
	            Console.WriteLine("    Dictionary entries");
	            Console.WriteLine("    ------------------");
	
	            foreach( KeyValuePair<int, MutableKey> kvp in Dictionary )
	            {
	                Console.WriteLine("    {0} : {1}", kvp.Key, kvp.Value);
	            }
	        }
	
	        Console.WriteLine("\n    List of items");
	        Console.WriteLine("    -------------");
	
	        foreach( MutableKey mk in Items )
	        {
	            Console.WriteLine("    {0}", mk);
	        }
	    }
	}
	
	public class Demo
	{
	    public static void Main()
	    {
	        MutableKeys mkeys = new MutableKeys();
	
	        mkeys.Add(new MutableKey(110072674, "Widget"));
	        mkeys.Add(new MutableKey(110072675, "Sprocket"));
	
	        mkeys.Dump();
	    
	        Console.WriteLine("\nCreate and insert a new item:");
	        MutableKey test = new MutableKey(110072684, "Gear");
	        mkeys.Insert(1, test);
	
	        mkeys.Dump();
	
	        try
	        {
	            Console.WriteLine("\nTry to insert the item again:");
	            mkeys.Insert(1, test);
	        }
	        catch(ArgumentException ex)
	        {
	            Console.WriteLine("Error: {0}", ex.Message);
	        }
	
	        Console.WriteLine("\nChange the Key property of the item:");
	        test.Key = 100000072;
	
	        mkeys.Dump();
	
	        try
	        {
	            Console.WriteLine("\nTry to set the Key property to an existing key:");
	            test.Key = 110072674;
	        }
	        catch(ArgumentException ex)
	        {
	            Console.WriteLine("Error: {0}", ex.Message);
	        }
	
	        mkeys.Dump();
	    }
	    
	    private static void Display(MutableKeys order)
	    {
	        Console.WriteLine();
	        foreach( MutableKey item in order )
	        {
	            Console.WriteLine(item);
	        }
	    }
	}
	
	public class MutableKey
	{
	
	    public MutableKey(int newKey, string newValue)
	    {
	        _key = newKey;
	        Value = newValue;
	    
	    public string Value;
	    internal MutableKeys Collection;
	    
	    private int _key;
	    public int Key    
	    {
	        get
	        {
	            return _key;
	        }
	        set
	        {
	            if (Collection != null)
	            {
	                Collection.ChangeKey(this, value);
	            }
	
	            _key = value;
	        }
	    }
	
	    public override string ToString()
	    {
	        return String.Format("{0,9} {1}", _key, Value);
	    }
	        
	}
	
	/* This code example produces the following output:
	
	DUMP:
	    Dictionary entries
	    ------------------
	    110072674 : 110072674 Widget
	    110072675 : 110072675 Sprocket
	
	    List of items
	    -------------
	    110072674 Widget
	    110072675 Sprocket
	
	Create and insert a new item:
	
	DUMP:
	    Dictionary entries
	    ------------------
	    110072674 : 110072674 Widget
	    110072675 : 110072675 Sprocket
	    110072684 : 110072684 Gear
	
	    List of items
	    -------------
	    110072674 Widget
	    110072684 Gear
	    110072675 Sprocket
	
	Try to insert the item again:
	Error: The item already belongs to a collection.
	
	Change the Key property of the item:
	
	DUMP:
	    Dictionary entries
	    ------------------
	    110072674 : 110072674 Widget
	    110072675 : 110072675 Sprocket
	    100000072 : 100000072 Gear
	
	    List of items
	    -------------
	    110072674 Widget
	    100000072 Gear
	    110072675 Sprocket
	
	Try to set the Key property to an existing key:
	Error: An item with the same key has already been added.
	
	DUMP:
	    Dictionary entries
	    ------------------
	    110072674 : 110072674 Widget
	    110072675 : 110072675 Sprocket
	    100000072 : 100000072 Gear
	
	    List of items
	    -------------
	    110072674 Widget
	    100000072 Gear
	    110072675 Sprocket
	 */
	
	

snippet formatting_numeric_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/formatting_numeric_custom/custom.cs

	using System;
	using System.Globalization;
	
	public class CustomNumericFormatting
	{
	   public static void Main()
	   {
	      Console.WriteLine("Zero Placeholder:");
	      ShowZeroPlaceholder();
	      Console.WriteLine();
	      Console.WriteLine("Digit Placeholder:");
	      ShowDigitPlaceholder();
	      Console.WriteLine();
	      Console.WriteLine("Decimal Point:");
	      ShowDecimalPoint();
	      Console.WriteLine();
	      Console.WriteLine("Thousand Specifier:");
	      ShowThousandSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("Scaling Specifier:");
	      ShowScalingSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("Percentage Placeholder:");
	      ShowPercentagePlaceholder();
	      Console.WriteLine();
	      Console.WriteLine("Scientific Notation:");
	      ShowScientificNotation();
	      Console.WriteLine();
	      Console.WriteLine("Section Specifier:");
	      ShowSectionSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("Per Mille Placeholder:");
	      ShowPerMillePlaceholder();
	   }
	   
	   private static void ShowZeroPlaceholder()
	   {
	      double value;
	      
	      value = 123;
	      Console.WriteLine(value.ToString("00000"));
	      Console.WriteLine(String.Format("{0:00000}", value));
	      
	      value = 1.2;
	      Console.WriteLine(value.ToString("0.00", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                        "{0:0.00}", value));
	
	      Console.WriteLine(value.ToString("00.00", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:00.00}", value));
	
	      CultureInfo daDK = CultureInfo.CreateSpecificCulture("da-DK");
	      Console.WriteLine(value.ToString("00.00", daDK)); 
	      Console.WriteLine(String.Format(daDK, "{0:00.00}", value));
	      
	      value = .56;
	      Console.WriteLine(value.ToString("0.0", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:0.0}", value));
	
	      value = 1234567890;
	      Console.WriteLine(value.ToString("0,0", CultureInfo.InvariantCulture));	
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:0,0}", value));	
	      
	      CultureInfo elGR = CultureInfo.CreateSpecificCulture("el-GR");
	      Console.WriteLine(value.ToString("0,0", elGR));	
	     Console.WriteLine(String.Format(elGR, "{0:0,0}", value));	
	      
	      value = 1234567890.123456;
	      Console.WriteLine(value.ToString("0,0.0", CultureInfo.InvariantCulture));	
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:0,0.0}", value));	
	      
	      value = 1234.567890;
	      Console.WriteLine(value.ToString("0,0.00", CultureInfo.InvariantCulture));	
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:0,0.00}", value));	
	   }
	
	   private static void ShowDigitPlaceholder()
	   {
	      double value;
	      
	      value = 1.2;
	      Console.WriteLine(value.ToString("#.##", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:#.##}", value));
	      
	      value = 123;
	      Console.WriteLine(value.ToString("#####"));
	      Console.WriteLine(String.Format("{0:#####}", value));
	
	      value = 123456;
	      Console.WriteLine(value.ToString("[##-##-##]"));      
	      Console.WriteLine(String.Format("{0:[##-##-##]}", value));      
	
	      value = 1234567890;
	      Console.WriteLine(value.ToString("#"));
	      Console.WriteLine(String.Format("{0:#}", value));
	      
	      Console.WriteLine(value.ToString("(###) ###-####"));
	      Console.WriteLine(String.Format("{0:(###) ###-####}", value));
	   }
	
	   private static void ShowDecimalPoint()
	   {
	      double value;
	      
	      value = 1.2;
	      Console.WriteLine(value.ToString("0.00", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:0.00}", value));
	
	      Console.WriteLine(value.ToString("00.00", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:00.00}", value));
	
	      Console.WriteLine(value.ToString("00.00", 
	                        CultureInfo.CreateSpecificCulture("da-DK")));
	      Console.WriteLine(String.Format(CultureInfo.CreateSpecificCulture("da-DK"),
	                        "{0:00.00}", value));
	
	      value = .086;
	      Console.WriteLine(value.ToString("#0.##%", CultureInfo.InvariantCulture)); 
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:#0.##%}", value)); 
	       
	      value = 86000;
	      Console.WriteLine(value.ToString("0.###E+0", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                        "{0:0.###E+0}", value));
	   }
	
	   private static void ShowThousandSpecifier()
	   {
	      double value = 1234567890;
	      Console.WriteLine(value.ToString("#,#", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:#,#}", value));
	
	      Console.WriteLine(value.ToString("#,##0,,", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:#,##0,,}", value));
	   }
	   
	   private static void ShowScalingSpecifier()
	   {
	      double value = 1234567890;
	      Console.WriteLine(value.ToString("#,,", CultureInfo.InvariantCulture));	
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:#,,}", value));	
	      
	      Console.WriteLine(value.ToString("#,,,", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:#,,,}", value));
	      
	      Console.WriteLine(value.ToString("#,##0,,", CultureInfo.InvariantCulture));       
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:#,##0,,}", value));       
	   }
	
	   private static void ShowPercentagePlaceholder()
	   {
	      double value = .086;
	      Console.WriteLine(value.ToString("#0.##%", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:#0.##%}", value));
	   }
	   
	   private static void ShowScientificNotation()
	   {
	      double value = 86000;
	      Console.WriteLine(value.ToString("0.###E+0", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:0.###E+0}", value));
	      
	      Console.WriteLine(value.ToString("0.###E+000", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:0.###E+000}", value));
	      
	      Console.WriteLine(value.ToString("0.###E-000", CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:0.###E-000}", value));
	   }
	
	   private static void ShowSectionSpecifier()
	   {
	      double posValue = 1234;
	      double negValue = -1234;
	      double zeroValue = 0;
	
	      string fmt2 = "##;(##)";
	      string fmt3 = "##;(##);**Zero**";
	
	      Console.WriteLine(posValue.ToString(fmt2));  
	      Console.WriteLine(String.Format("{0:" + fmt2 + "}", posValue));    
	
	      Console.WriteLine(negValue.ToString(fmt2));  
	      Console.WriteLine(String.Format("{0:" + fmt2 + "}", negValue));    
	      
	      Console.WriteLine(zeroValue.ToString(fmt3)); 
	      Console.WriteLine(String.Format("{0:" + fmt3 + "}", zeroValue));
	   }
	
	   private static void ShowPerMillePlaceholder()
	   {
	      double value = .00354;
	      string perMilleFmt = "#0.## " + '\u2030';
	      Console.WriteLine(value.ToString(perMilleFmt, CultureInfo.InvariantCulture));
	      Console.WriteLine(String.Format(CultureInfo.InvariantCulture, 
	                                      "{0:" + perMilleFmt + "}", value));
	   }
	}

snippet process_asyncstreams

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/nmake_async.cs

	
	using System;
	using System.Text;
	using System.IO;
	using System.Diagnostics;
	using System.Threading;
	using System.ComponentModel;
	
	namespace ProcessAsyncStreamSamples
	{
	    class ProcessNMakeStreamRedirection
	    {
	        private static StreamWriter buildLogStream =null;
	        private static Mutex logMutex = new Mutex();
	        private static int maxLogLines = 25;
	        private static int currentLogLines = 0;
	
	        public static void RedirectNMakeCommandStreams()
	        {
	            String nmakeArguments = null;
	            Process nmakeProcess;
	
	            Console.WriteLine("Enter the NMake command line arguments " +
	                "(@commandfile or /f makefile, etc):");
	            String inputText = Console.ReadLine();
	            if (!String.IsNullOrEmpty(inputText))
	            {
	                nmakeArguments = inputText;
	            }
	               
	            Console.WriteLine("Enter max line limit for log file (default is 25):");
	            inputText = Console.ReadLine();
	            if (!String.IsNullOrEmpty(inputText))
	            {
	                if (!Int32.TryParse(inputText, out maxLogLines))
	                {
	                    maxLogLines = 25;
	                }
	            }
	            Console.WriteLine("Output beyond {0} lines will be ignored.",
	                maxLogLines);
	
	            nmakeProcess = new Process();
	            nmakeProcess.StartInfo.FileName = "NMake.exe";
	            
	            if (!String.IsNullOrEmpty(nmakeArguments))
	            {
	                nmakeProcess.StartInfo.Arguments = nmakeArguments;
	            }
	
	            nmakeProcess.StartInfo.UseShellExecute = false;
	
	            nmakeProcess.StartInfo.RedirectStandardOutput = true;
	            nmakeProcess.OutputDataReceived += new DataReceivedEventHandler(NMakeOutputDataHandler);
	   
	            nmakeProcess.StartInfo.RedirectStandardError = true;
	            nmakeProcess.ErrorDataReceived += new DataReceivedEventHandler(NMakeErrorDataHandler);
	
	            logMutex.WaitOne();
	
	            currentLogLines = 0;
	
	            const String buildLogFile = "NmakeCmd.Txt";
	            try 
	            {
	                buildLogStream = new StreamWriter(buildLogFile, true);
	            }
	            catch (Exception e)
	            {
	                Console.WriteLine("Could not open output file {0}", buildLogFile);
	                Console.WriteLine("Exception = {0}", e.ToString());
	                Console.WriteLine(e.Message);
	
	                buildLogStream = null;
	            }
	
	            if (buildLogStream != null)
	            {   
	                Console.WriteLine("Nmake output logged to {0}", 
	                    buildLogFile);
	    
	                buildLogStream.WriteLine();
	                buildLogStream.WriteLine(DateTime.Now.ToString());
	                if (!String.IsNullOrEmpty(nmakeArguments))
	                {
	                    buildLogStream.Write("Command line = NMake {0}",
	                        nmakeArguments);
	                }
	                else 
	                {
	                    buildLogStream.Write("Command line = Nmake");
	                }
	                buildLogStream.WriteLine();
	                buildLogStream.Flush();
	            
	                logMutex.ReleaseMutex();
	
	                Console.WriteLine();
	                Console.WriteLine("\nStarting Nmake command...");
	                Console.WriteLine();
	                nmakeProcess.Start();
	
	                nmakeProcess.BeginErrorReadLine();
	
	                nmakeProcess.BeginOutputReadLine();
	    
	                nmakeProcess.WaitForExit();
	
	                nmakeProcess.Close();
	                buildLogStream.Close();
	                logMutex.Dispose();
	            }
	        }
	
	        private static void NMakeOutputDataHandler(object sendingProcess, 
	            DataReceivedEventArgs outLine)
	        {
	
	            if (!String.IsNullOrEmpty(outLine.Data))
	            {
	                logMutex.WaitOne();
	
	                currentLogLines++;
	                if (currentLogLines > maxLogLines)
	                {
	                    Console.WriteLine("StdOut: {0}", outLine.Data);
	                }
	                else if (currentLogLines == maxLogLines)
	                {
	                    LogToFile("StdOut", "<Max build log limit reached!>", 
	                        true);
	    
	                    Process p = sendingProcess as Process;
	                    if (p != null)
	                    {
	                        p.CancelOutputRead();
	                        p.CancelErrorRead();
	                    }
	                }
	                else 
	                {
	                    LogToFile("StdOut", outLine.Data, true);
	                }
	                logMutex.ReleaseMutex();
	            }
	        }
	
	        private static void NMakeErrorDataHandler(object sendingProcess, 
	            DataReceivedEventArgs errLine)
	        {
	
	            if (!String.IsNullOrEmpty(errLine.Data))
	            {
	                logMutex.WaitOne();
	
	                currentLogLines++;
	                if (currentLogLines > maxLogLines)
	                {
	                    Console.WriteLine("StdErr: {0}", errLine.Data);
	                }
	                else if (currentLogLines == maxLogLines)
	                {
	                    LogToFile("StdErr", "<Max build log limit reached!>", 
	                        true);
	    
	                    Process p = sendingProcess as Process;
	                    if (p != null)
	                    {
	                        p.CancelErrorRead();
	                        p.CancelOutputRead();
	
	                    }
	                }
	                else 
	                {
	                    LogToFile("StdErr", errLine.Data, true);
	                }
	
	                logMutex.ReleaseMutex();
	            }
	        }
	
	        private static void LogToFile(String logPrefix, 
	            String logText, bool echoToConsole)
	        {
	            StringBuilder logString = new StringBuilder();
	
	            if (!String.IsNullOrEmpty(logPrefix))
	            {
	                logString.AppendFormat("{0}> ", logPrefix);
	            }
	
	            if (!String.IsNullOrEmpty(logText))
	            {
	                logString.Append(logText); 
	            }
	
	            if (buildLogStream != null)
	            {
	                buildLogStream.WriteLine("[{0}] {1}",
	                    DateTime.Now.ToString(), logString.ToString());
	                buildLogStream.Flush();
	            }
	            
	            if (echoToConsole)
	            {
	                Console.WriteLine(logString.ToString());
	            }
	        }
	    }
	} 
	
	namespace ProcessAsyncStreamSamples
	{
	
	    class ProcessSampleMain
	    {
	        static void Main()
	        {
	            try 
	            {
	                ProcessNMakeStreamRedirection.RedirectNMakeCommandStreams();
	            }
	            catch (InvalidOperationException e)
	            {
	                Console.WriteLine("Exception:");
	                Console.WriteLine(e.ToString());
	            }
	        }
	    }
	} 
snippet stackframesample1

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/StackFrameSample1/source.cs

	
	using System;
	using System.Diagnostics;
	
	using SampleInternal;
	
	namespace SamplePublic
	{
	    class ConsoleApp
	    {
	       [STAThread]
	       static void Main()
	        {
	            ClassLevel1 mainClass = new ClassLevel1();
	
	            try {
	                mainClass.InternalMethod();
	            }
	            catch (Exception) {
	               Console.WriteLine(" Main method exception handler");
	
	               StackTrace st = new StackTrace(new StackFrame(true));
	               Console.WriteLine(" Stack trace for current level: {0}",
	                   st.ToString());
	               Console.WriteLine(" File: {0}", 
	                  st.GetFrame(0).GetFileName());
	               Console.WriteLine(" Line Number: {0}",
	                   st.GetFrame(0).GetFileLineNumber().ToString());
	
	               Console.WriteLine();
	               Console.WriteLine("-------------------------------------------------\n");
	            }
	        }
	    }
	}
	
	namespace SampleInternal
	{
	   public class ClassLevel1
	   {
	      public void InternalMethod()
	      {
	         try
	         {
	            ClassLevel2 nestedClass = new ClassLevel2();
	            nestedClass.Level2Method();
	         }
	         catch (Exception e)
	         {
	            Console.WriteLine(" InternalMethod exception handler");
	
	            StackTrace st = new StackTrace(new StackFrame(1));
	            Console.WriteLine(" Stack trace for next level frame: {0}",
	               st.ToString());
	            Console.WriteLine(" Stack frame for next level: ");
	            Console.WriteLine("   {0}", st.GetFrame(0).ToString());
	
	            Console.WriteLine(" Line Number: {0}",
	               st.GetFrame(0).GetFileLineNumber().ToString());
	
	            Console.WriteLine();
	            Console.WriteLine("   ... throwing exception to next level ...");
	            Console.WriteLine("-------------------------------------------------\n");
	            throw e;
	         }
	      }
	   }
	
	   public class ClassLevel2
	   {
	      public void Level2Method()
	      {
	         try 
	         {
	            ClassLevel3 nestedClass = new ClassLevel3();
	            nestedClass.Level3Method();
	
	         }
	         catch (Exception e) 
	         {
	            Console.WriteLine(" Level2Method exception handler");
	
	            StackTrace st1 = new StackTrace(true);
	            Console.WriteLine(" Stack trace for this level: {0}",
	               st1.ToString());
	
	            StackTrace st2 = new StackTrace(new StackFrame(1, true));
	            Console.WriteLine(" Stack trace built with next level frame: {0}",
	               st2.ToString());
	
	            StackTrace st3 = new StackTrace(1, true);
	            Console.WriteLine(" Stack trace built from the next level up: {0}",
	               st3.ToString());
	
	            Console.WriteLine();
	            Console.WriteLine("   ... throwing exception to next level ...");
	            Console.WriteLine("-------------------------------------------------\n");
	            throw e;
	         }
	      }
	   }
	
	   public class ClassLevel3
	   {
	      public void Level3Method()
	      {
	         try 
	         {
	            ClassLevel4 nestedClass = new ClassLevel4();
	            nestedClass.Level4Method();
	         }
	         catch (Exception e) 
	         {
	            Console.WriteLine(" Level3Method exception handler");
	
	            StackTrace st = new StackTrace(new StackFrame("source.cs", 60));
	            Console.WriteLine(" Stack trace with dummy stack frame: {0}", 
	                        st.ToString());
	            for(int i =0; i< st.FrameCount; i++ )
	            {
	               StackFrame sf = st.GetFrame(i);
	               Console.WriteLine(" File: {0}", sf.GetFileName());
	               Console.WriteLine(" Line Number: {0}", 
	                  sf.GetFileLineNumber());
	               Console.WriteLine(" Column Number: {0}", 
	                  sf.GetFileColumnNumber());
	               if (sf.GetILOffset() != StackFrame.OFFSET_UNKNOWN)
	               {
	                  Console.WriteLine(" Intermediate Language Offset: {0}", 
	                     sf.GetILOffset());
	               }
	               if (sf.GetNativeOffset() != StackFrame.OFFSET_UNKNOWN)
	               {
	                  Console.WriteLine(" Native Offset: {0}", 
	                     sf.GetNativeOffset());
	               }
	            }
	            Console.WriteLine();
	            Console.WriteLine("   ... throwing exception to next level ...");
	            Console.WriteLine("-------------------------------------------------\n");
	            throw e;
	         }
	      }
	   }
	
	   public class ClassLevel4
	   {
	      public void Level4Method()
	      {
	         try 
	         {
	            ClassLevel5 nestedClass = new ClassLevel5();
	            nestedClass.Level5Method();
	         }
	         catch (Exception e) 
	         {
	            Console.WriteLine(" Level4Method exception handler");
	
	            StackTrace st = new StackTrace(new StackFrame("source.cs", 79, 24));
	            Console.WriteLine(" Stack trace with dummy stack frame: {0}", 
	                           st.ToString());
	
	            for(int i =0; i< st.FrameCount; i++ )
	            {
	               StackFrame sf = st.GetFrame(i);
	               Console.WriteLine(" File: {0}", sf.GetFileName());
	               Console.WriteLine(" Line Number: {0}", 
	                  sf.GetFileLineNumber());
	               Console.WriteLine(" Column Number: {0}", 
	                  sf.GetFileColumnNumber());
	            }
	            Console.WriteLine();
	            Console.WriteLine("   ... throwing exception to next level ...");
	            Console.WriteLine("-------------------------------------------------\n");
	            throw e;
	         }
	      }
	   }
	
	   public class ClassLevel5
	   {
	      public void Level5Method()
	      {
	         try 
	         {
	            ClassLevel6 nestedClass = new ClassLevel6();
	            nestedClass.Level6Method();
	         }
	         catch (Exception e) 
	         {
	            Console.WriteLine(" Level5Method exception handler");
	
	            StackTrace st = new StackTrace();
	            
	            StackFrame sf = st.GetFrame(0);
	            Console.WriteLine();
	            Console.WriteLine("  Exception in method: ");
	            Console.WriteLine("      {0}", sf.GetMethod());
	
	            if (st.FrameCount >1)
	            {
	               sf = st.GetFrame(st.FrameCount-1);
	               Console.WriteLine("  Original function call at top of call stack):");
	               Console.WriteLine("      {0}", sf.GetMethod());
	            }
	
	            Console.WriteLine();
	            Console.WriteLine("   ... throwing exception to next level ...");
	            Console.WriteLine("-------------------------------------------------\n");
	            throw e;
	         }        
	      }
	
	   }
	
	   public class ClassLevel6
	   {
	      public void Level6Method()
	      {
	         throw new Exception("An error occurred in the lowest internal class method.");
	      }
	
	   }
	}
snippet conceptual_timespan_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_custom/f_specifiers1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      FSpecifier();
	      Console.WriteLine("-----");
	      FFSpecifier();
	      Console.WriteLine("-----");
	      FFFSpecifier();
	      Console.WriteLine("-----");
	      FFFFSpecifier();
	      Console.WriteLine("-----");
	      FFFFFSpecifier();
	      Console.WriteLine("-----");
	      FFFFFFSpecifier();
	      Console.WriteLine("-----");
	      F7Specifier();
	   }
	
	   private static void FSpecifier()
	   {
	      Console.WriteLine("Formatting:");
	      TimeSpan ts1 = TimeSpan.Parse("0:0:3.669");
	      Console.WriteLine("{0} ('%F') --> {0:%F}", ts1);
	      
	      TimeSpan ts2 = TimeSpan.Parse("0:0:3.091");
	      Console.WriteLine("{0} ('ss\\.F') --> {0:ss\\.F}", ts2);
	      Console.WriteLine();
	      
	      Console.WriteLine("Parsing:");
	      string[] inputs = { "0:0:03.", "0:0:03.1", "0:0:03.12" };
	      string fmt = @"h\:m\:ss\.F";
	      TimeSpan ts3;
	      
	      foreach (string input in inputs) {
	         if (TimeSpan.TryParseExact(input, fmt, null, out ts3))
	            Console.WriteLine("{0} ('{1}') --> {2}", input, fmt, ts3);
	         else
	            Console.WriteLine("Cannot parse {0} with '{1}'.", 
	                              input, fmt);
	      }                        
	   }
	
	   private static void FFSpecifier()
	   {
	      Console.WriteLine("Formatting:");
	      TimeSpan ts1 = TimeSpan.Parse("0:0:3.697");
	      Console.WriteLine("{0} ('FF') --> {0:FF}", ts1);
	      
	      TimeSpan ts2 = TimeSpan.Parse("0:0:3.809");
	      Console.WriteLine("{0} ('ss\\.FF') --> {0:ss\\.FF}", ts2);
	      Console.WriteLine();
	      
	      Console.WriteLine("Parsing:");
	      string[] inputs = { "0:0:03.", "0:0:03.1", "0:0:03.127" };
	      string fmt = @"h\:m\:ss\.FF";
	      TimeSpan ts3;
	      
	      foreach (string input in inputs) {
	         if (TimeSpan.TryParseExact(input, fmt, null, out ts3))
	            Console.WriteLine("{0} ('{1}') --> {2}", input, fmt, ts3);
	         else
	            Console.WriteLine("Cannot parse {0} with '{1}'.", 
	                              input, fmt);
	      }
	   }
	
	   private static void FFFSpecifier()
	   {
	      Console.WriteLine("Formatting:");
	      TimeSpan ts1 = TimeSpan.Parse("0:0:3.6974");
	      Console.WriteLine("{0} ('FFF') --> {0:FFF}", ts1);
	      
	      TimeSpan ts2 = TimeSpan.Parse("0:0:3.8009");
	      Console.WriteLine("{0} ('ss\\.FFF') --> {0:ss\\.FFF}", ts2);
	      Console.WriteLine();
	      
	      Console.WriteLine("Parsing:");
	      string[] inputs = { "0:0:03.", "0:0:03.12", "0:0:03.1279" };
	      string fmt = @"h\:m\:ss\.FFF";
	      TimeSpan ts3;
	      
	      foreach (string input in inputs) {
	         if (TimeSpan.TryParseExact(input, fmt, null, out ts3))
	            Console.WriteLine("{0} ('{1}') --> {2}", input, fmt, ts3);
	         else
	            Console.WriteLine("Cannot parse {0} with '{1}'.", 
	                              input, fmt);
	      }
	   }
	
	   private static void FFFFSpecifier()
	   {
	      Console.WriteLine("Formatting:");
	      TimeSpan ts1 = TimeSpan.Parse("0:0:3.69749");
	      Console.WriteLine("{0} ('FFFF') --> {0:FFFF}", ts1);
	      
	      TimeSpan ts2 = TimeSpan.Parse("0:0:3.80009");
	      Console.WriteLine("{0} ('ss\\.FFFF') --> {0:ss\\.FFFF}", ts2);
	      Console.WriteLine();
	      
	      Console.WriteLine("Parsing:");
	      string[] inputs = { "0:0:03.", "0:0:03.12", "0:0:03.12795" };
	      string fmt = @"h\:m\:ss\.FFFF";
	      TimeSpan ts3;
	      
	      foreach (string input in inputs) {
	         if (TimeSpan.TryParseExact(input, fmt, null, out ts3))
	            Console.WriteLine("{0} ('{1}') --> {2}", input, fmt, ts3);
	         else
	            Console.WriteLine("Cannot parse {0} with '{1}'.", 
	                              input, fmt);
	      }
	   }
	
	   private static void FFFFFSpecifier()
	   {
	      Console.WriteLine("Formatting:");
	      TimeSpan ts1 = TimeSpan.Parse("0:0:3.697497");
	      Console.WriteLine("{0} ('FFFFF') --> {0:FFFFF}", ts1);
	      
	      TimeSpan ts2 = TimeSpan.Parse("0:0:3.800009");
	      Console.WriteLine("{0} ('ss\\.FFFFF') --> {0:ss\\.FFFFF}", ts2);
	      Console.WriteLine();
	      
	      Console.WriteLine("Parsing:");
	      string[] inputs = { "0:0:03.", "0:0:03.12", "0:0:03.127956" };
	      string fmt = @"h\:m\:ss\.FFFFF";
	      TimeSpan ts3;
	      
	      foreach (string input in inputs) {
	         if (TimeSpan.TryParseExact(input, fmt, null, out ts3))
	            Console.WriteLine("{0} ('{1}') --> {2}", input, fmt, ts3);
	         else
	            Console.WriteLine("Cannot parse {0} with '{1}'.", 
	                              input, fmt);
	      }                       
	   }
	
	   private static void FFFFFFSpecifier()
	   {
	      Console.WriteLine("Formatting:");
	      TimeSpan ts1 = TimeSpan.Parse("0:0:3.6974974");
	      Console.WriteLine("{0} ('FFFFFF') --> {0:FFFFFF}", ts1);
	      
	      TimeSpan ts2 = TimeSpan.Parse("0:0:3.8000009");
	      Console.WriteLine("{0} ('ss\\.FFFFFF') --> {0:ss\\.FFFFFF}", ts2);
	      Console.WriteLine();
	      
	      Console.WriteLine("Parsing:");
	      string[] inputs = { "0:0:03.", "0:0:03.12", "0:0:03.1279569" };
	      string fmt = @"h\:m\:ss\.FFFFFF";
	      TimeSpan ts3;
	      
	      foreach (string input in inputs) {
	         if (TimeSpan.TryParseExact(input, fmt, null, out ts3))
	            Console.WriteLine("{0} ('{1}') --> {2}", input, fmt, ts3);
	         else
	            Console.WriteLine("Cannot parse {0} with '{1}'.", 
	                              input, fmt);
	      }                       
	   }
	
	   private static void F7Specifier()
	   {
	      Console.WriteLine("Formatting:");
	      TimeSpan ts1 = TimeSpan.Parse("0:0:3.6974974");
	      Console.WriteLine("{0} ('FFFFFFF') --> {0:FFFFFFF}", ts1);
	      
	      TimeSpan ts2 = TimeSpan.Parse("0:0:3.9500000");
	      Console.WriteLine("{0} ('ss\\.FFFFFFF') --> {0:ss\\.FFFFFFF}", ts2);
	      Console.WriteLine();
	      
	      Console.WriteLine("Parsing:");
	      string[] inputs = { "0:0:03.", "0:0:03.12", "0:0:03.1279569" };
	      string fmt = @"h\:m\:ss\.FFFFFFF";
	      TimeSpan ts3;
	      
	      foreach (string input in inputs) {
	         if (TimeSpan.TryParseExact(input, fmt, null, out ts3))
	            Console.WriteLine("{0} ('{1}') --> {2}", input, fmt, ts3);
	         else
	            Console.WriteLine("Cannot parse {0} with '{1}'.", 
	                              input, fmt);
	      }
	   }
	}

snippet dictionary

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Dictionary/Dictionary.cs

	using System;
	using System.Collections;
	
	public class SimpleDictionary : IDictionary
	{
	    private DictionaryEntry[] items;
	    private Int32 ItemsInUse = 0;
	
	    public SimpleDictionary(Int32 numItems)
	    {
	        items = new DictionaryEntry[numItems];
	    }
	
	
	    #region IDictionary Members
	    public bool IsReadOnly { get { return false; } }
	    public bool Contains(object key)
	    {
	       Int32 index;
	       return TryGetIndexOfKey(key, out index);
	    }
	    public bool IsFixedSize { get { return false; } }
	    public void Remove(object key)
	    {
	        if (key == null) throw new ArgumentNullException("key");
	        Int32 index;
	        if (TryGetIndexOfKey(key, out index))
	        {
	            Array.Copy(items, index + 1, items, index, ItemsInUse - index - 1);
	            ItemsInUse--;
	        } 
	        else
	        {
	        }
	    }
	    public void Clear() { ItemsInUse = 0; }
	    public void Add(object key, object value) 
	    {
	        if (ItemsInUse == items.Length)
	            throw new InvalidOperationException("The dictionary cannot hold any more items.");
	        items[ItemsInUse++] = new DictionaryEntry(key, value);
	    }
	    public ICollection Keys
	    {
	        get
	        {
	            Object[] keys = new Object[ItemsInUse];
	            for (Int32 n = 0; n < ItemsInUse; n++)
	                keys[n] = items[n].Key;
	            return keys;
	        }
	    }
	    public ICollection Values
	    {
	        get
	        {
	            Object[] values = new Object[ItemsInUse];
	            for (Int32 n = 0; n < ItemsInUse; n++)
	                values[n] = items[n].Value;
	            return values;
	        }
	    }
	    public object this[object key]
	    {
	        get
	        {   
	            Int32 index;
	            if (TryGetIndexOfKey(key, out index))
	            {
	                return items[index].Value;
	            } 
	            else
	            {
	                return null;
	            }
	        }
	
	        set
	        {
	            Int32 index;
	            if (TryGetIndexOfKey(key, out index))
	            {
	                items[index].Value = value;
	            } 
	            else
	            {
	                Add(key, value);
	            }
	        }
	    }
	    private Boolean TryGetIndexOfKey(Object key, out Int32 index)
	    {
	        for (index = 0; index < ItemsInUse; index++)
	        {
	            if (items[index].Key.Equals(key)) return true;
	        }
	      
	        return false;
	    }
	    private class SimpleDictionaryEnumerator : IDictionaryEnumerator
	    {
	        DictionaryEntry[] items;
	        Int32 index = -1;
	
	        public SimpleDictionaryEnumerator(SimpleDictionary sd)
	        {
	            items = new DictionaryEntry[sd.Count];
	            Array.Copy(sd.items, 0, items, 0, sd.Count);
	        }
	
	        public Object Current { get { ValidateIndex(); return items[index]; } }
	
	        public DictionaryEntry Entry
	        {
	            get { return (DictionaryEntry) Current; }
	        }
	
	        public Object Key { get { ValidateIndex();  return items[index].Key; } }
	
	        public Object Value { get { ValidateIndex();  return items[index].Value; } }
	
	        public Boolean MoveNext()
	        {
	            if (index < items.Length - 1) { index++; return true; }
	            return false;
	        }
	
	        private void ValidateIndex()
	        {
	            if (index < 0 || index >= items.Length)
	            throw new InvalidOperationException("Enumerator is before or after the collection.");
	        }
	
	        public void Reset()
	        {
	            index = -1;
	        }
	    }
	    public IDictionaryEnumerator GetEnumerator()
	    {
	        return new SimpleDictionaryEnumerator(this);
	    }
	    #endregion
	
	    #region ICollection Members
	    public bool IsSynchronized { get { return false; } }
	    public object SyncRoot { get { throw new NotImplementedException(); } }
	    public int Count { get { return ItemsInUse; } }
	    public void CopyTo(Array array, int index) { throw new NotImplementedException(); }
	    #endregion
	
	    #region IEnumerable Members
	    IEnumerator IEnumerable.GetEnumerator() 
	    {
	        return ((IDictionary)this).GetEnumerator();
	    }
	    #endregion
	}
	
	public sealed class App
	{
	    static void Main()
	    {
	        IDictionary d = new SimpleDictionary(3);
	
	        d.Add("Jeff", 40);
	        d.Add("Kristin", 34);
	        d.Add("Aidan", 1);
	
	        Console.WriteLine("Number of elements in dictionary = {0}", d.Count);
	
	        Console.WriteLine("Does dictionary contain 'Jeff'? {0}", d.Contains("Jeff"));
	        Console.WriteLine("Jeff's age is {0}", d["Jeff"]);
	
	        foreach (DictionaryEntry de in d)
	        {
	            Console.WriteLine("{0} is {1} years old.", de.Key, de.Value);
	        }
	
	        d.Remove("Jeff");
	
	        d.Remove("Max");
	
	        foreach (String s in d.Keys)
	            Console.WriteLine(s);
	
	        foreach (Int32 age in d.Values)
	            Console.WriteLine(age);
	    }
	}
	
snippet addinp3host

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/P3Host.cs

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Text;
	using System.AddIn.Hosting;
	using CalcHVAs;
	
	namespace MathHost
	{
	    class Program
	    {
	        static void Main()
	        {
	
	String pipeRoot = Environment.CurrentDirectory;
	
	string[] warnings = AddInStore.Update(pipeRoot);
	
	foreach (string warning in warnings)
	{
	    Console.WriteLine(warning);
	}
	
	
	Collection<AddInToken> tokens = 
	            AddInStore.FindAddIns(typeof(Calculator),PipelineStoreLocation.ApplicationBase);
	
	AddInToken selectedToken = ChooseAddIn(tokens);
	
	Calculator CalcAddIn = selectedToken.Activate<Calculator>(AddInSecurityLevel.Internet);
	            
	RunCalculator(CalcAddIn);
	
	
	string addInFilePath = pipeRoot + @"\AddIns\P3AddIn2\P3AddIn2.dll";
	
	Collection<AddInToken> tokenColl = AddInStore.FindAddIn(typeof(Calculator),
	    pipeRoot, addInFilePath, "CalcAddIns.P3AddIn2");
	Console.WriteLine("Found {0}", tokenColl[0].Name);
	
	AddInController aiController = AddInController.GetAddInController(CalcAddIn);
	
	AddInToken selectedToken2 = ChooseAddIn(tokens);
	
	AddInEnvironment aiEnvironment = aiController.AddInEnvironment;
	Calculator CalcAddIn2 =
		selectedToken2.Activate<Calculator>(aiEnvironment);
	
	AddInController aiController2 = AddInController.GetAddInController(CalcAddIn2);
	Console.WriteLine("Add-ins in same application domain: {0}", aiController.AppDomain.Equals(aiController2.AppDomain));
	Console.WriteLine("Add-ins in same process: {0}", aiEnvironment.Process.Equals(aiController2.AddInEnvironment.Process));
	
	
	AddInController aiCtrl = AddInController.GetAddInController(CalcAddIn);
	AppDomain AddInAppDom = aiCtrl.AppDomain;
	
	Calculator CalcAddIn3 =
		selectedToken2.Activate<Calculator>(AddInAppDom);
	
	AddInController aic = AddInController.GetAddInController(CalcAddIn3);
	Console.WriteLine("Add-in loaded into existing application domain: {0}",
		aic.AppDomain.Equals(AddInAppDom));
	
	AddInProcess pExternal = new AddInProcess();
	
	Calculator CalcAddIn4 =
		selectedToken.Activate<Calculator>(pExternal,
		AddInSecurityLevel.FullTrust);
	
	AddInController AddinCtl = AddInController.GetAddInController(CalcAddIn4);
	Console.WriteLine("Add-in in host's process: {0}",
		AddinCtl.AddInEnvironment.Process.IsCurrentProcess);
	
	if (selectedToken.QualificationData[AddInSegmentType.AddIn]["Isolation"].Equals("NewProcess"))
	{
		AddInProcess external = new AddInProcess();
	
	    Calculator CalcAddIn5 =
			selectedToken.Activate<Calculator>(external,
			AddInSecurityLevel.FullTrust);
		Console.WriteLine("Add-in activated per qualification data.");
	}
	else
		Console.WriteLine("This add-in is not designated to be activated in a new process.");
	
	foreach (AddInToken token in tokens)
	{
	    foreach (QualificationDataItem qdi in token)
	    {
	        Console.WriteLine("{0} {1}\n\t QD Name: {2}, QD Value: {3}",
	            token.Name,
	            qdi.Segment, 
	            qdi.Name, 
	            qdi.Value);
	    }
	}
	
	    
	 }
	
	private static AddInToken ChooseAddIn(Collection<AddInToken> tokens)
	{
	    if (tokens.Count == 0)
	    {
	        Console.WriteLine("No add-ins are available");
	        return null;
	    }
	
	    Console.WriteLine("Available add-ins: ");
	
	    int tokNumber = 1;
		foreach (AddInToken tok in tokens)
		{
			Console.WriteLine(String.Format("\t[{0}]: {1} - {2}\n\t{3}\n\t\t {4}\n\t\t {5} - {6}",
				tokNumber.ToString(), 
				tok.Name,
				tok.AddInFullName,
				tok.AssemblyName,
				tok.Description,
				tok.Version,
				tok.Publisher));
	        tokNumber++;
		}
	
	    Console.WriteLine("Which calculator do you want to use?");
	    String line = Console.ReadLine();
	    int selection;
	    if (Int32.TryParse(line, out selection))
	    {
	        if (selection <= tokens.Count)
	        {
	            return tokens[selection - 1];
	        }
	    }
	    Console.WriteLine("Invalid selection: {0}. Please choose again.", line);
	    return ChooseAddIn(tokens);
	}
	
	        private static void RunCalculator(Calculator calc)
	        {
	            
	            if (calc == null)
	            {
	                Console.ReadLine();
	            }
	            Console.WriteLine("Available operations: " + calc.Operations);
	            Console.WriteLine("Type \"exit\" to exit");
	            String line = Console.ReadLine();
	            while (!line.Equals("exit"))
	            {
	                try
	                {
	                    Parser c = new Parser(line);
	                    Console.WriteLine(calc.Operate(c.Action, c.A, c.B));
	                }
	                catch
	                {
	                    Console.WriteLine("Invalid command: {0}. Commands must be formated: [number] [operation] [number]", line);
	                    Console.WriteLine("Available operations: " + calc.Operations);
	                }
	                
	                line = Console.ReadLine();
	            }
	        }
	    }
	
	
	    internal class Parser
	    {
	        internal Parser(String line)
	        {
	            String[] parts = line.Trim().Split(' ');
	            a = Double.Parse(parts[0]);
	            action = parts[1];
	            b = Double.Parse(parts[2]);
	        }
	
	        double a;
	
	        public double A
	        {
	            get { return a; }
	        }
	        double b;
	
	        public double B
	        {
	            get { return b; }
	        }
	        String action;
	
	        public String Action
	        {
	            get { return action; }
	        }
	    }
	}
snippet formatting_dateandtime_standard

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Standard/Standard1.cs

	using System;
	using System.Globalization;
	
	public class Class1
	{
	   public static void Main()
	   {
	      Console.Clear();
	      Console.WriteLine();
	      Console.WriteLine("***d Specifier***");
	      ShowdSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***D Specifier***");
	      ShowDSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***f Specifier***");
	      ShowfSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***F Specifier***");
	      ShowFSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***g Specifier***");
	      ShowgSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***G Specifier***");
	      ShowGSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***M Specifier***");
	      ShowMSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***O Specifier***");
	      ShowOSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***R Specifier***");
	      ShowRSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***S Specifier***");
	      ShowSSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***t Specifier***");
	      ShowtSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***T Specifier***");
	      ShowTSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***u Specifier***");
	      ShowuSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***U Specifier***");
	      ShowUSpecifier();
	      Console.WriteLine();
	      Console.WriteLine("***Y Specifier***");
	      ShowYSpecifier();
	   }
	
	   private static void ShowdSpecifier()
	   {
	      DateTime date1 = new DateTime(2008,4, 10);
	      Console.WriteLine(date1.ToString("d", DateTimeFormatInfo.InvariantInfo));
	      Console.WriteLine(date1.ToString("d", 
	                        CultureInfo.CreateSpecificCulture("en-US")));
	      Console.WriteLine(date1.ToString("d", 
	                        CultureInfo.CreateSpecificCulture("en-NZ")));
	      Console.WriteLine(date1.ToString("d", 
	                        CultureInfo.CreateSpecificCulture("de-DE")));
	   }
	   
	   private static void ShowDSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10);
	      Console.WriteLine(date1.ToString("D", 
	                        CultureInfo.CreateSpecificCulture("en-US")));
	      Console.WriteLine(date1.ToString("D", 
	                        CultureInfo.CreateSpecificCulture("pt-BR")));
	      Console.WriteLine(date1.ToString("D", 
	                        CultureInfo.CreateSpecificCulture("es-MX")));
	   }
	   
	   private static void ShowfSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      Console.WriteLine(date1.ToString("f", 
	                        CultureInfo.CreateSpecificCulture("en-US")));
	      Console.WriteLine(date1.ToString("f", 
	                        CultureInfo.CreateSpecificCulture("fr-FR")));
	   }
	   
	   private static void ShowFSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      Console.WriteLine(date1.ToString("F", 
	                        CultureInfo.CreateSpecificCulture("en-US")));
	      Console.WriteLine(date1.ToString("F", 
	                        CultureInfo.CreateSpecificCulture("fr-FR")));
	   }
	
	   private static void ShowgSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      Console.WriteLine(date1.ToString("g", 
	                        DateTimeFormatInfo.InvariantInfo));
	      Console.WriteLine(date1.ToString("g", 
	                        CultureInfo.CreateSpecificCulture("en-us")));
	      Console.WriteLine(date1.ToString("g", 
	                        CultureInfo.CreateSpecificCulture("fr-BE")));
	   }
	   
	   private static void ShowGSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      Console.WriteLine(date1.ToString("G", 
	                        DateTimeFormatInfo.InvariantInfo));
	      Console.WriteLine(date1.ToString("G", 
	                        CultureInfo.CreateSpecificCulture("en-us")));
	      Console.WriteLine(date1.ToString("G", 
	                        CultureInfo.CreateSpecificCulture("nl-BE")));
	   }
	   
	   private static void ShowMSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      Console.WriteLine(date1.ToString("m", 
	                        CultureInfo.CreateSpecificCulture("en-us")));
	      Console.WriteLine(date1.ToString("m", 
	                        CultureInfo.CreateSpecificCulture("ms-MY")));
	   }
	   
	   private static void ShowOSpecifier()
	   {
	
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      DateTimeOffset dateOffset = new DateTimeOffset(date1, 
	                                  TimeZoneInfo.Local.GetUtcOffset(date1));
	      Console.WriteLine(date1.ToString("o"));
	      Console.WriteLine(dateOffset.ToString("o"));
	
	   }
	   
	   private static void ShowRSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      DateTimeOffset dateOffset = new DateTimeOffset(date1, 
	                                  TimeZoneInfo.Local.GetUtcOffset(date1));
	      Console.WriteLine(date1.ToUniversalTime().ToString("r"));
	      Console.WriteLine(dateOffset.ToUniversalTime().ToString("r"));
	   }
	   
	   private static void ShowSSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      Console.WriteLine(date1.ToString("s"));
	   }
	
	   private static void ShowtSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      Console.WriteLine(date1.ToString("t", 
	                        CultureInfo.CreateSpecificCulture("en-us")));
	      Console.WriteLine(date1.ToString("t", 
	                        CultureInfo.CreateSpecificCulture("es-ES")));
	   }
	   
	   private static void ShowTSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      Console.WriteLine(date1.ToString("T", 
	                        CultureInfo.CreateSpecificCulture("en-us")));
	      Console.WriteLine(date1.ToString("T", 
	                        CultureInfo.CreateSpecificCulture("es-ES")));
	   }
	   
	   private static void ShowuSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      Console.WriteLine(date1.ToUniversalTime().ToString("u"));
	   }
	   
	   private static void ShowUSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      Console.WriteLine(date1.ToString("U", 
	                        CultureInfo.CreateSpecificCulture("en-US")));
	      Console.WriteLine(date1.ToString("U", 
	                        CultureInfo.CreateSpecificCulture("sv-FI")));
	   }
	   
	   private static void ShowYSpecifier()
	   {
	      DateTime date1 = new DateTime(2008, 4, 10, 6, 30, 0);
	      Console.WriteLine(date1.ToString("Y", 
	                        CultureInfo.CreateSpecificCulture("en-US")));
	      Console.WriteLine(date1.ToString("y", 
	                        CultureInfo.CreateSpecificCulture("af-ZA")));
	   }
	}

snippet serviceprocess_serviceinstaller

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/simpleservice.cs

	
	
	#define TRACE
	
	using System;
	using System.ComponentModel;
	using System.IO;
	using System.ServiceProcess;
	using System.Threading;
	using System.Diagnostics;
	
	namespace SimpleServiceSample
	{
	    public enum SimpleServiceCustomCommands {StopWorker=128, RestartWorker, CheckWorker};
	
	    public class SimpleService : System.ServiceProcess.ServiceBase
		{
	        private const String logFile = @"C:\service_log.txt";
	        private static TextWriterTraceListener serviceTraceListener = null;
	        private Thread workerThread = null;
	
	        public SimpleService()
			{
	            CanPauseAndContinue = true;
	            ServiceName = "SimpleService";
			}
	
	        static void Main()
	        {
	
	            StreamWriter myFile = File.CreateText(logFile);
	      
	            serviceTraceListener = new TextWriterTraceListener(myFile);
	            Trace.Listeners.Add(serviceTraceListener);
	
	            Trace.AutoFlush = true;
	            Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                " - Service main method starting...",
	                "Main");
	
	            System.ServiceProcess.ServiceBase.Run(new SimpleService());
	
	            Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                " - Service main method exiting...",
	                "Main");
	
	            Trace.Listeners.Remove(serviceTraceListener);
	
	            serviceTraceListener.Close();
	            serviceTraceListener = null;
	            myFile.Close();
	        }
	
	        private void InitializeComponent()
	        {
	            this.CanPauseAndContinue = true;
	            this.CanShutdown = true;
	            this.ServiceName = "SimpleService";
	        }
	
	        protected override void OnStart(string[] args)
	        {
	
	            if ((workerThread == null) || 
	                ((workerThread.ThreadState &
	                 (System.Threading.ThreadState.Unstarted | System.Threading.ThreadState.Stopped)) != 0))
	            {
	                Trace.WriteLine(DateTime.Now.ToLongTimeString() +
	                    " - Starting service worker thread.",
	                    "OnStart");
	
	                workerThread = new Thread(new ThreadStart(ServiceWorkerMethod));
	                workerThread.Start();
	            }
	            if (workerThread != null)
	            {
	                Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                    " - Worker thread state = " + 
	                    workerThread.ThreadState.ToString(),
	                    "OnStart");
	            }
	
	
	        }
	 
	        protected override void OnStop()
	        {
	            if ((workerThread != null) && (workerThread.IsAlive))
	            {
	                Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                    " - Stopping service worker thread.",
	                    "OnStop");
	
	                workerThread.Abort();
	
	                workerThread.Join(500);
	            }
	            if (workerThread != null)
	            {
	                Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                    " - Worker thread state = " + 
	                    workerThread.ThreadState.ToString(),
	                    "OnStop");
	            }
	        }
	
	        protected override void OnPause()
	        {
	            if ((workerThread != null) && 
	                (workerThread.IsAlive) &&
	                ((workerThread.ThreadState & 
	                 (System.Threading.ThreadState.Suspended | System.Threading.ThreadState.SuspendRequested)) == 0))
	            {
	                Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                    " - Suspending service worker thread.",
	                    "OnPause");
	
	                workerThread.Suspend();
	            }
	            
	            if (workerThread != null)
	            {
	                Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                    " - Worker thread state = " + 
	                    workerThread.ThreadState.ToString(),
	                    "OnPause");
	            }
	        }
	
	        protected override void OnContinue()
	        {
	
	            if ((workerThread != null) && 
	                ((workerThread.ThreadState & 
	                 (System.Threading.ThreadState.Suspended | System.Threading.ThreadState.SuspendRequested)) != 0))
	            {
	                Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                    " - Resuming service worker thread.",
	                    "OnContinue");
	
	                workerThread.Resume();
	            }
	            if (workerThread != null)
	            {
	                Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                    " - Worker thread state = " + 
	                    workerThread.ThreadState.ToString(),
	                    "OnContinue");
	            }
	        }
	     
	        protected override void OnCustomCommand(int command)
	        {
	            Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                " - Custom command received: " +
	                command.ToString(),
	                "OnCustomCommand");
	
	
	            switch (command)
	            {
	                case (int) SimpleServiceCustomCommands.StopWorker:
	                    OnStop();
	                    break;
	
	                case (int) SimpleServiceCustomCommands.RestartWorker:
	
	                    OnStart(null);
	                    break;
	
	                case (int) SimpleServiceCustomCommands.CheckWorker:
	
	                    Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                        " - Worker thread state = " +
	                        workerThread.ThreadState.ToString(),
	                        "OnCustomCommand");
	
	                    break;
	    
	                default:
	                    Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                        " - Unrecognized custom command ignored!",
	                        "OnCustomCommand");
	                    break;
	            }
	        }
	
	        public void ServiceWorkerMethod()
	        {
	            Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                " - Starting service worker thread.",
	                "Worker");
	            
	            try 
	            {
	                do 
	                {
	
	                    Thread.Sleep(10000);
	                    Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                        " - heartbeat cycle.",
	                        "Worker");
	                }
	                while (true);
	            }
	            catch (ThreadAbortException)
	            {
	
	
	                Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                    " - Thread abort signalled.",
	                    "Worker");
	            }
	
	            Trace.WriteLine(DateTime.Now.ToLongTimeString() + 
	                " - Exiting service worker thread.",
	                "Worker");
	
	        }
		}
	}

snippet codearraycreateexpressionsnippet

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeArrayCreateExpressionSnippet/codearraycreateexpressionsnippet.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.Drawing;
	using System.Collections;
	using System.ComponentModel;
	using System.Windows.Forms;
	using System.Data;
	using System.IO;
	using Microsoft.CSharp;
	using Microsoft.VisualBasic;
	using Microsoft.JScript;
	
	namespace CodeDOMSamples
	{
	    public class Form1 : System.Windows.Forms.Form
	    {    
	        private System.CodeDom.CodeCompileUnit cu;
	        private System.Windows.Forms.TextBox textBox1;
	        private System.Windows.Forms.Button button1;
	        private System.Windows.Forms.Button button2;
	        private System.Windows.Forms.GroupBox groupBox1;
	        private System.Windows.Forms.RadioButton radioButton1;
	        private System.Windows.Forms.RadioButton radioButton2;
	        private System.Windows.Forms.RadioButton radioButton3;
	        private System.ComponentModel.Container components = null;
	
	        public Form1()
	        {            
	            InitializeComponent();                    
	            
	            cu = CreateGraph();
	        }
	
	        public CodeCompileUnit CreateGraph()
	        {
	            CodeCompileUnit cu = new CodeCompileUnit();
	
	            CodeNamespace cn = new CodeNamespace("TestSpace");        
	            
	            CodeTypeDeclaration cd = new CodeTypeDeclaration("TestClass");
	
	            CodeEntryPointMethod cm = new CodeEntryPointMethod();            
	                                
	            CodeArrayCreateExpression ca1 = new CodeArrayCreateExpression("System.Int32", 10);                        
	            
	            CodeVariableDeclarationStatement cv1 = new CodeVariableDeclarationStatement("System.Int32[]", "x", ca1);
	
	
	
	            cm.Statements.Add(cv1);            
	
	            cd.Members.Add(cm);
	            
	            cn.Types.Add(cd);
	
	            cu.Namespaces.Add(cn);
	
	            return cu;
	        }
	
	        private void OutputGraph()
	        {
	            StringWriter sw = new StringWriter();
	
	            System.CodeDom.Compiler.CodeDomProvider cp;
	            switch(language)
	            {
	                    cp = CodeDomProvider.CreateProvider("VisualBasic");
	                    break;
	                    cp = CodeDomProvider.CreateProvider("JScript");
	                    break;
	                    cp = CodeDomProvider.CreateProvider("CSharp");
	                    break;                
	            }
	            
	            ICodeGenerator cg = cp.CreateGenerator(sw);        
	            
	            cg.GenerateCodeFromCompileUnit(cu, sw, new CodeGeneratorOptions());
	
	            this.textBox1.Text = sw.ToString();            
	        }
	
	        protected override void Dispose( bool disposing )
	        {
	            if( disposing )
	            {
	                if (components != null) 
	                {
	                    components.Dispose();
	                }
	            }
	            base.Dispose( disposing );
	        }
	
	        #region Windows Form Designer generated code
	        private void InitializeComponent()
	        {
	            this.textBox1 = new System.Windows.Forms.TextBox();
	            this.button1 = new System.Windows.Forms.Button();
	            this.button2 = new System.Windows.Forms.Button();
	            this.groupBox1 = new System.Windows.Forms.GroupBox();
	            this.radioButton1 = new System.Windows.Forms.RadioButton();
	            this.radioButton2 = new System.Windows.Forms.RadioButton();
	            this.radioButton3 = new System.Windows.Forms.RadioButton();
	            this.groupBox1.SuspendLayout();
	            this.SuspendLayout();
	            this.textBox1.Location = new System.Drawing.Point(16, 112);
	            this.textBox1.Multiline = true;
	            this.textBox1.Name = "textBox1";
	            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Both;
	            this.textBox1.Size = new System.Drawing.Size(664, 248);
	            this.textBox1.TabIndex = 0;
	            this.textBox1.Text = "";
	            this.textBox1.WordWrap = false;
	            this.button1.BackColor = System.Drawing.Color.Aquamarine;
	            this.button1.Location = new System.Drawing.Point(16, 16);
	            this.button1.Name = "button1";
	            this.button1.TabIndex = 1;
	            this.button1.Text = "Generate";
	            this.button1.Click += new System.EventHandler(this.button1_Click);
	            this.button2.BackColor = System.Drawing.Color.MediumTurquoise;
	            this.button2.Location = new System.Drawing.Point(112, 16);
	            this.button2.Name = "button2";
	            this.button2.TabIndex = 2;
	            this.button2.Text = "Show Code";
	            this.button2.Click += new System.EventHandler(this.button2_Click);
	            this.groupBox1.Controls.AddRange(new System.Windows.Forms.Control[] {
	                                                                                    this.radioButton3,
	                                                                                    this.radioButton2,
	                                                                                    this.radioButton1});
	            this.groupBox1.Location = new System.Drawing.Point(16, 48);
	            this.groupBox1.Name = "groupBox1";
	            this.groupBox1.Size = new System.Drawing.Size(384, 56);
	            this.groupBox1.TabIndex = 3;
	            this.groupBox1.TabStop = false;
	            this.groupBox1.Text = "Language selection";
	            this.radioButton1.Checked = true;
	            this.radioButton1.Location = new System.Drawing.Point(16, 24);
	            this.radioButton1.Name = "radioButton1";
	            this.radioButton1.TabIndex = 0;
	            this.radioButton1.TabStop = true;
	            this.radioButton1.Text = "CSharp";
	            this.radioButton1.Click += new System.EventHandler(this.radioButton1_CheckedChanged);
	            this.radioButton2.Location = new System.Drawing.Point(144, 24);
	            this.radioButton2.Name = "radioButton2";
	            this.radioButton2.TabIndex = 1;
	            this.radioButton2.Text = "Visual Basic";
	            this.radioButton2.Click += new System.EventHandler(this.radioButton2_CheckedChanged);
	            this.radioButton3.Location = new System.Drawing.Point(272, 24);
	            this.radioButton3.Name = "radioButton3";
	            this.radioButton3.TabIndex = 2;
	            this.radioButton3.Text = "JScript";
	            this.radioButton3.Click += new System.EventHandler(this.radioButton3_CheckedChanged);
	            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
	            this.ClientSize = new System.Drawing.Size(714, 367);
	            this.Controls.AddRange(new System.Windows.Forms.Control[] {
	                                                                          this.groupBox1,
	                                                                          this.button2,
	                                                                          this.button1,
	                                                                          this.textBox1});
	            this.Name = "Form1";
	            this.Text = "CodeDOM Samples Framework";
	            this.groupBox1.ResumeLayout(false);
	            this.ResumeLayout(false);
	
	        }
	        #endregion
	
	        [STAThread]
	        static void Main() 
	        {
	            Application.Run(new Form1());
	        }
	
	        private void ShowCode()
	        {
	            this.textBox1.Text="";
	        }
	
	        private void button2_Click(object sender, System.EventArgs e)
	        {
	            ShowCode();
	        }
	
	        private void button1_Click(object sender, System.EventArgs e)
	        {        
	            OutputGraph();
	        }
	
	        private void radioButton1_CheckedChanged(object sender, System.EventArgs e)
	        {
	            radioButton1.Checked=true;
	            radioButton2.Checked=false;
	            radioButton3.Checked=false;
	
	            language=1;
	        }
	
	        private void radioButton2_CheckedChanged(object sender, System.EventArgs e)
	        {
	            radioButton1.Checked=false;
	            radioButton2.Checked=true;
	            radioButton3.Checked=false;
	
	            language=2;
	        }
	
	        private void radioButton3_CheckedChanged(object sender, System.EventArgs e)
	        {            
	            radioButton1.Checked=false;
	            radioButton2.Checked=false;
	            radioButton3.Checked=true;
	
	            language=3;
	        }            
	
	    }
	}
snippet codedom_class_sample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDOM_Class_Sample/program.cs

	using System;
	using System.Reflection;
	using System.IO;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using Microsoft.CSharp;
	
	namespace SampleCodeDom
	{
	    class Sample
	    {
	        CodeCompileUnit targetUnit;
	
	        CodeTypeDeclaration targetClass;
	
	        private const string outputFileName = "SampleCode.cs";
	
	        public Sample()
	        {
	            targetUnit = new CodeCompileUnit();
	            CodeNamespace samples = new CodeNamespace("CodeDOMSample");
	            samples.Imports.Add(new CodeNamespaceImport("System"));
	            targetClass = new CodeTypeDeclaration("CodeDOMCreatedClass");
	            targetClass.IsClass = true;
	            targetClass.TypeAttributes =
	                TypeAttributes.Public | TypeAttributes.Sealed;
	            samples.Types.Add(targetClass);
	            targetUnit.Namespaces.Add(samples);
	        }
	
	        public void AddFields()
	        {
	            CodeMemberField widthValueField = new CodeMemberField();
	            widthValueField.Attributes = MemberAttributes.Private;
	            widthValueField.Name = "widthValue";
	            widthValueField.Type = new CodeTypeReference(typeof(System.Double));
	            widthValueField.Comments.Add(new CodeCommentStatement(
	                "The width of the object."));
	            targetClass.Members.Add(widthValueField);
	
	            CodeMemberField heightValueField = new CodeMemberField();
	            heightValueField.Attributes = MemberAttributes.Private;
	            heightValueField.Name = "heightValue";
	            heightValueField.Type =
	                new CodeTypeReference(typeof(System.Double));
	            heightValueField.Comments.Add(new CodeCommentStatement(
	                "The height of the object."));
	            targetClass.Members.Add(heightValueField);
	        }
	        public void AddProperties()
	        {
	            CodeMemberProperty widthProperty = new CodeMemberProperty();
	            widthProperty.Attributes =
	                MemberAttributes.Public | MemberAttributes.Final;
	            widthProperty.Name = "Width";
	            widthProperty.HasGet = true;
	            widthProperty.Type = new CodeTypeReference(typeof(System.Double));
	            widthProperty.Comments.Add(new CodeCommentStatement(
	                "The Width property for the object."));
	            widthProperty.GetStatements.Add(new CodeMethodReturnStatement(
	                new CodeFieldReferenceExpression(
	                new CodeThisReferenceExpression(), "widthValue")));
	            targetClass.Members.Add(widthProperty);
	
	            CodeMemberProperty heightProperty = new CodeMemberProperty();
	            heightProperty.Attributes =
	                MemberAttributes.Public | MemberAttributes.Final;
	            heightProperty.Name = "Height";
	            heightProperty.HasGet = true;
	            heightProperty.Type = new CodeTypeReference(typeof(System.Double));
	            heightProperty.Comments.Add(new CodeCommentStatement(
	                "The Height property for the object."));
	            heightProperty.GetStatements.Add(new CodeMethodReturnStatement(
	                new CodeFieldReferenceExpression(
	                new CodeThisReferenceExpression(), "heightValue")));
	            targetClass.Members.Add(heightProperty);
	
	            CodeMemberProperty areaProperty = new CodeMemberProperty();
	            areaProperty.Attributes =
	                MemberAttributes.Public | MemberAttributes.Final;
	            areaProperty.Name = "Area";
	            areaProperty.HasGet = true;
	            areaProperty.Type = new CodeTypeReference(typeof(System.Double));
	            areaProperty.Comments.Add(new CodeCommentStatement(
	                "The Area property for the object."));
	
	            CodeBinaryOperatorExpression areaExpression =
	                new CodeBinaryOperatorExpression(
	                new CodeFieldReferenceExpression(
	                new CodeThisReferenceExpression(), "widthValue"),
	                CodeBinaryOperatorType.Multiply,
	                new CodeFieldReferenceExpression(
	                new CodeThisReferenceExpression(), "heightValue"));
	            areaProperty.GetStatements.Add(
	                new CodeMethodReturnStatement(areaExpression));
	            targetClass.Members.Add(areaProperty);
	        }
	
	        public void AddMethod()
	        {
	            CodeMemberMethod toStringMethod = new CodeMemberMethod();
	            toStringMethod.Attributes =
	                MemberAttributes.Public | MemberAttributes.Override;
	            toStringMethod.Name = "ToString";
	            toStringMethod.ReturnType =
	                new CodeTypeReference(typeof(System.String));
	
	            CodeFieldReferenceExpression widthReference =
	                new CodeFieldReferenceExpression(
	                new CodeThisReferenceExpression(), "Width");
	            CodeFieldReferenceExpression heightReference =
	                new CodeFieldReferenceExpression(
	                new CodeThisReferenceExpression(), "Height");
	            CodeFieldReferenceExpression areaReference =
	                new CodeFieldReferenceExpression(
	                new CodeThisReferenceExpression(), "Area");
	
	            CodeMethodReturnStatement returnStatement =
	                new CodeMethodReturnStatement();
	
	            string formattedOutput = "The object:" + Environment.NewLine +
	                " width = {0}," + Environment.NewLine +
	                " height = {1}," + Environment.NewLine +
	                " area = {2}";
	            returnStatement.Expression =
	                new CodeMethodInvokeExpression(
	                new CodeTypeReferenceExpression("System.String"), "Format",
	                new CodePrimitiveExpression(formattedOutput),
	                widthReference, heightReference, areaReference);
	            toStringMethod.Statements.Add(returnStatement);
	            targetClass.Members.Add(toStringMethod);
	        }
	        public void AddConstructor()
	        {
	            CodeConstructor constructor = new CodeConstructor();
	            constructor.Attributes =
	                MemberAttributes.Public | MemberAttributes.Final;
	
	            constructor.Parameters.Add(new CodeParameterDeclarationExpression(
	                typeof(System.Double), "width"));
	            constructor.Parameters.Add(new CodeParameterDeclarationExpression(
	                typeof(System.Double), "height"));
	
	            CodeFieldReferenceExpression widthReference =
	                new CodeFieldReferenceExpression(
	                new CodeThisReferenceExpression(), "widthValue");
	            constructor.Statements.Add(new CodeAssignStatement(widthReference,
	                new CodeArgumentReferenceExpression("width")));
	            CodeFieldReferenceExpression heightReference =
	                new CodeFieldReferenceExpression(
	                new CodeThisReferenceExpression(), "heightValue");
	            constructor.Statements.Add(new CodeAssignStatement(heightReference,
	                new CodeArgumentReferenceExpression("height")));
	            targetClass.Members.Add(constructor);
	        }
	
	        public void AddEntryPoint()
	        {
	            CodeEntryPointMethod start = new CodeEntryPointMethod();
	            CodeObjectCreateExpression objectCreate =
	                new CodeObjectCreateExpression(
	                new CodeTypeReference("CodeDOMCreatedClass"),
	                new CodePrimitiveExpression(5.3),
	                new CodePrimitiveExpression(6.9));
	
	            start.Statements.Add(new CodeVariableDeclarationStatement(
	                new CodeTypeReference("CodeDOMCreatedClass"), "testClass",
	                objectCreate));
	
	            CodeMethodInvokeExpression toStringInvoke =
	                new CodeMethodInvokeExpression(
	                new CodeVariableReferenceExpression("testClass"), "ToString");
	
	            start.Statements.Add(new CodeMethodInvokeExpression(
	                new CodeTypeReferenceExpression("System.Console"),
	                "WriteLine", toStringInvoke));
	            targetClass.Members.Add(start);
	        }
	        public void GenerateCSharpCode(string fileName)
	        {
	            CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
	            CodeGeneratorOptions options = new CodeGeneratorOptions();
	            options.BracingStyle = "C";
	            using (StreamWriter sourceWriter = new StreamWriter(fileName))
	            {
	                provider.GenerateCodeFromCompileUnit(
	                    targetUnit, sourceWriter, options);
	            }
	        }
	
	        static void Main()
	        {
	            Sample sample = new Sample();
	            sample.AddFields();
	            sample.AddProperties();
	            sample.AddMethod();
	            sample.AddConstructor();
	            sample.AddEntryPoint();
	            sample.GenerateCSharpCode(outputFileName);
	        }
	    }
	}

snippet x509certificate2

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/x509certificate2/program.cs

	using System;
	using System.Security.Cryptography;
	using System.Security.Cryptography.X509Certificates;
	using System.IO;
	using System.Text;
	
	
	namespace X509CertEncrypt
	{
	    class Program
	    {
	
	        private static string encrFolder = @"C:\Encrypt\";
	        private static string decrFolder = @"C:\Decrypt\";
	        private static string originalFile = "TestData.txt";
	        private static string encryptedFile = "TestData.enc";
	
	        static void Main(string[] args)
	        {
	
	            StreamWriter sw = File.CreateText(originalFile);
	            sw.WriteLine("Test data to be encrypted");
	            sw.Close();
	
	            X509Certificate2 cert = GetCertificateFromStore("CN=CERT_SIGN_TEST_CERT");
	            if (cert == null)
	            {
	                Console.WriteLine("Certificate 'CN=CERT_SIGN_TEST_CERT' not found.");
	                Console.ReadLine();
	            }
	
	
	            EncryptFile(originalFile, (RSACryptoServiceProvider)cert.PublicKey.Key);
	
	            DecryptFile(encryptedFile, (RSACryptoServiceProvider)cert.PrivateKey);
	
	            Console.WriteLine("Original:   {0}", File.ReadAllText(originalFile));
	            Console.WriteLine("Round Trip: {0}", File.ReadAllText(decrFolder + originalFile));
	            Console.WriteLine("Press the Enter key to exit.");
	            Console.ReadLine();
	        }
	        private static X509Certificate2 GetCertificateFromStore(string certName)
	        {
	
	            X509Store store = new X509Store(StoreLocation.CurrentUser);
	            try
	            {
	                store.Open(OpenFlags.ReadOnly);
	
	                X509Certificate2Collection certCollection = store.Certificates;
	                X509Certificate2Collection currentCerts = certCollection.Find(X509FindType.FindByTimeValid, DateTime.Now, false);
	                X509Certificate2Collection signingCert = currentCerts.Find(X509FindType.FindBySubjectDistinguishedName, certName, false);
	                if (signingCert.Count == 0)
	                    return null;
	                return signingCert[0];
	            }
	            finally
	            {
	                store.Close();
	            }
	
	        }
	
	        private static void EncryptFile(string inFile, RSACryptoServiceProvider rsaPublicKey)
	        {
	            using (AesManaged aesManaged = new AesManaged())
	            {
	                aesManaged.KeySize = 256;
	                aesManaged.BlockSize = 128;
	                aesManaged.Mode = CipherMode.CBC;
	                using (ICryptoTransform transform = aesManaged.CreateEncryptor())
	                {
	                    RSAPKCS1KeyExchangeFormatter keyFormatter = new RSAPKCS1KeyExchangeFormatter(rsaPublicKey);
	                    byte[] keyEncrypted = keyFormatter.CreateKeyExchange(aesManaged.Key, aesManaged.GetType());
	
	                    byte[] LenK = new byte[4];
	                    byte[] LenIV = new byte[4];
	
	                    int lKey = keyEncrypted.Length;
	                    LenK = BitConverter.GetBytes(lKey);
	                    int lIV = aesManaged.IV.Length;
	                    LenIV = BitConverter.GetBytes(lIV);
	
	
	                    int startFileName = inFile.LastIndexOf("\\") + 1;
	                    string outFile = encrFolder + inFile.Substring(startFileName, inFile.LastIndexOf(".") - startFileName) + ".enc";
	                    Directory.CreateDirectory(encrFolder);
	
	                    using (FileStream outFs = new FileStream(outFile, FileMode.Create))
	                    {
	
	                        outFs.Write(LenK, 0, 4);
	                        outFs.Write(LenIV, 0, 4);
	                        outFs.Write(keyEncrypted, 0, lKey);
	                        outFs.Write(aesManaged.IV, 0, lIV);
	
	                        using (CryptoStream outStreamEncrypted = new CryptoStream(outFs, transform, CryptoStreamMode.Write))
	                        {
	
	                            int count = 0;
	                            int offset = 0;
	
	                            int blockSizeBytes = aesManaged.BlockSize / 8;
	                            byte[] data = new byte[blockSizeBytes];
	                            int bytesRead = 0;
	
	                            using (FileStream inFs = new FileStream(inFile, FileMode.Open))
	                            {
	                                do
	                                {
	                                    count = inFs.Read(data, offset, blockSizeBytes);
	                                    offset += count;
	                                    outStreamEncrypted.Write(data, 0, count);
	                                    bytesRead += count;
	                                }
	                                while (count > 0);
	                                inFs.Close();
	                            }
	                            outStreamEncrypted.FlushFinalBlock();
	                            outStreamEncrypted.Close();
	                        }
	                        outFs.Close();
	                    }
	                }
	            }
	        }
	
	
	        private static void DecryptFile(string inFile, RSACryptoServiceProvider rsaPrivateKey)
	        {
	
	            using (AesManaged aesManaged = new AesManaged())
	            {
	                aesManaged.KeySize = 256;
	                aesManaged.BlockSize = 128;
	                aesManaged.Mode = CipherMode.CBC;
	
	                byte[] LenK = new byte[4];
	                byte[] LenIV = new byte[4];
	
	                string outFile = decrFolder + inFile.Substring(0, inFile.LastIndexOf(".")) + ".txt";
	
	                using (FileStream inFs = new FileStream(encrFolder + inFile, FileMode.Open))
	                {
	
	                    inFs.Seek(0, SeekOrigin.Begin);
	                    inFs.Seek(0, SeekOrigin.Begin);
	                    inFs.Read(LenK, 0, 3);
	                    inFs.Seek(4, SeekOrigin.Begin);
	                    inFs.Read(LenIV, 0, 3);
	
	                    int lenK = BitConverter.ToInt32(LenK, 0);
	                    int lenIV = BitConverter.ToInt32(LenIV, 0);
	
	                    int startC = lenK + lenIV + 8;
	                    int lenC = (int)inFs.Length - startC;
	
	                    byte[] KeyEncrypted = new byte[lenK];
	                    byte[] IV = new byte[lenIV];
	
	                    inFs.Seek(8, SeekOrigin.Begin);
	                    inFs.Read(KeyEncrypted, 0, lenK);
	                    inFs.Seek(8 + lenK, SeekOrigin.Begin);
	                    inFs.Read(IV, 0, lenIV);
	                    Directory.CreateDirectory(decrFolder);
	                    byte[] KeyDecrypted = rsaPrivateKey.Decrypt(KeyEncrypted, false);
	
	                    using (ICryptoTransform transform = aesManaged.CreateDecryptor(KeyDecrypted, IV))
	                    {
	
	                        using (FileStream outFs = new FileStream(outFile, FileMode.Create))
	                        {
	
	                            int count = 0;
	                            int offset = 0;
	
	                            int blockSizeBytes = aesManaged.BlockSize / 8;
	                            byte[] data = new byte[blockSizeBytes];
	
	
	                            inFs.Seek(startC, SeekOrigin.Begin);
	                            using (CryptoStream outStreamDecrypted = new CryptoStream(outFs, transform, CryptoStreamMode.Write))
	                            {
	                                do
	                                {
	                                    count = inFs.Read(data, offset, blockSizeBytes);
	                                    offset += count;
	                                    outStreamDecrypted.Write(data, 0, count);
	                                }
	                                while (count > 0);
	
	                                outStreamDecrypted.FlushFinalBlock();
	                                outStreamDecrypted.Close();
	                            }
	                            outFs.Close();
	                        }
	                        inFs.Close();
	                    }
	
	                }
	
	            }
	        }
	
	    }
	}

snippet codeassignstatement

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeAssignStatement/codeassignstatementsnippet.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.Drawing;
	using System.Collections;
	using System.ComponentModel;
	using System.Windows.Forms;
	using System.Data;
	using System.IO;
	using Microsoft.CSharp;
	using Microsoft.VisualBasic;
	using Microsoft.JScript;
	
	namespace CodeDOMSamples
	{
	    public class Form1 : System.Windows.Forms.Form
	    {    
	        private System.CodeDom.CodeCompileUnit cu;
	        private System.Windows.Forms.TextBox textBox1;
	        private System.Windows.Forms.Button button1;
	        private System.Windows.Forms.Button button2;
	        private System.Windows.Forms.GroupBox groupBox1;
	        private System.Windows.Forms.RadioButton radioButton1;
	        private System.Windows.Forms.RadioButton radioButton2;
	        private System.Windows.Forms.RadioButton radioButton3;
	        private System.ComponentModel.Container components = null;
	
	        public Form1()
	        {            
	            InitializeComponent();                    
	            
	            cu = CreateGraph();
	        }
	
	        public CodeCompileUnit CreateGraph()
	        {
	            CodeCompileUnit cu = new CodeCompileUnit();
	
	            CodeNamespace cn = new CodeNamespace("TestSpace");        
	            
	            CodeTypeDeclaration cd = new CodeTypeDeclaration("TestClass");
	
	            CodeEntryPointMethod cm = new CodeEntryPointMethod();
	                                
	            CodeVariableDeclarationStatement cv1 = new CodeVariableDeclarationStatement("System.Int32", "i");
	
	            cm.Statements.Add(cv1);
	
	            CodeAssignStatement as1 = new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodePrimitiveExpression(10));
	            
	
	
	            cm.Statements.Add(as1);            
	
	            cd.Members.Add(cm);
	            
	            cn.Types.Add(cd);
	
	            cu.Namespaces.Add(cn);
	
	            return cu;
	        }
	
	        private void OutputGraph()
	        {
	            StringWriter sw = new StringWriter();
	
	            System.CodeDom.Compiler.CodeDomProvider cp;
	            switch(language)
	            {
	                    cp = CodeDomProvider.CreateProvider("VisualBasic");
	                    break;
	                    cp = CodeDomProvider.CreateProvider("JScript");
	                    break;
	                    cp = CodeDomProvider.CreateProvider("CSharp");
	                    break;                
	            }
	            
	            ICodeGenerator cg = cp.CreateGenerator(sw);        
	            
	            cg.GenerateCodeFromCompileUnit(cu, sw, new CodeGeneratorOptions());
	
	            this.textBox1.Text = sw.ToString();            
	        }
	
	        protected override void Dispose( bool disposing )
	        {
	            if( disposing )
	            {
	                if (components != null) 
	                {
	                    components.Dispose();
	                }
	            }
	            base.Dispose( disposing );
	        }
	
	        #region Windows Form Designer generated code
	        private void InitializeComponent()
	        {
	            this.textBox1 = new System.Windows.Forms.TextBox();
	            this.button1 = new System.Windows.Forms.Button();
	            this.button2 = new System.Windows.Forms.Button();
	            this.groupBox1 = new System.Windows.Forms.GroupBox();
	            this.radioButton1 = new System.Windows.Forms.RadioButton();
	            this.radioButton2 = new System.Windows.Forms.RadioButton();
	            this.radioButton3 = new System.Windows.Forms.RadioButton();
	            this.groupBox1.SuspendLayout();
	            this.SuspendLayout();
	            this.textBox1.Location = new System.Drawing.Point(16, 112);
	            this.textBox1.Multiline = true;
	            this.textBox1.Name = "textBox1";
	            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Both;
	            this.textBox1.Size = new System.Drawing.Size(664, 248);
	            this.textBox1.TabIndex = 0;
	            this.textBox1.Text = "";
	            this.textBox1.WordWrap = false;
	            this.button1.BackColor = System.Drawing.Color.Aquamarine;
	            this.button1.Location = new System.Drawing.Point(16, 16);
	            this.button1.Name = "button1";
	            this.button1.TabIndex = 1;
	            this.button1.Text = "Generate";
	            this.button1.Click += new System.EventHandler(this.button1_Click);
	            this.button2.BackColor = System.Drawing.Color.MediumTurquoise;
	            this.button2.Location = new System.Drawing.Point(112, 16);
	            this.button2.Name = "button2";
	            this.button2.TabIndex = 2;
	            this.button2.Text = "Show Code";
	            this.button2.Click += new System.EventHandler(this.button2_Click);
	            this.groupBox1.Controls.AddRange(new System.Windows.Forms.Control[] {
	                                                                                    this.radioButton3,
	                                                                                    this.radioButton2,
	                                                                                    this.radioButton1});
	            this.groupBox1.Location = new System.Drawing.Point(16, 48);
	            this.groupBox1.Name = "groupBox1";
	            this.groupBox1.Size = new System.Drawing.Size(384, 56);
	            this.groupBox1.TabIndex = 3;
	            this.groupBox1.TabStop = false;
	            this.groupBox1.Text = "Language selection";
	            this.radioButton1.Checked = true;
	            this.radioButton1.Location = new System.Drawing.Point(16, 24);
	            this.radioButton1.Name = "radioButton1";
	            this.radioButton1.TabIndex = 0;
	            this.radioButton1.TabStop = true;
	            this.radioButton1.Text = "CSharp";
	            this.radioButton1.Click += new System.EventHandler(this.radioButton1_CheckedChanged);
	            this.radioButton2.Location = new System.Drawing.Point(144, 24);
	            this.radioButton2.Name = "radioButton2";
	            this.radioButton2.TabIndex = 1;
	            this.radioButton2.Text = "Visual Basic";
	            this.radioButton2.Click += new System.EventHandler(this.radioButton2_CheckedChanged);
	            this.radioButton3.Location = new System.Drawing.Point(272, 24);
	            this.radioButton3.Name = "radioButton3";
	            this.radioButton3.TabIndex = 2;
	            this.radioButton3.Text = "JScript";
	            this.radioButton3.Click += new System.EventHandler(this.radioButton3_CheckedChanged);
	            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
	            this.ClientSize = new System.Drawing.Size(714, 367);
	            this.Controls.AddRange(new System.Windows.Forms.Control[] {
	                                                                          this.groupBox1,
	                                                                          this.button2,
	                                                                          this.button1,
	                                                                          this.textBox1});
	            this.Name = "Form1";
	            this.Text = "CodeDOM Samples Framework";
	            this.groupBox1.ResumeLayout(false);
	            this.ResumeLayout(false);
	
	        }
	        #endregion
	
	        [STAThread]
	        static void Main() 
	        {
	            Application.Run(new Form1());
	        }
	
	        private void ShowCode()
	        {
	            this.textBox1.Text="";
	        }
	
	        private void button2_Click(object sender, System.EventArgs e)
	        {
	            ShowCode();
	        }
	
	        private void button1_Click(object sender, System.EventArgs e)
	        {        
	            OutputGraph();
	        }
	
	        private void radioButton1_CheckedChanged(object sender, System.EventArgs e)
	        {
	            radioButton1.Checked=true;
	            radioButton2.Checked=false;
	            radioButton3.Checked=false;
	
	            language=1;
	        }
	
	        private void radioButton2_CheckedChanged(object sender, System.EventArgs e)
	        {
	            radioButton1.Checked=false;
	            radioButton2.Checked=true;
	            radioButton3.Checked=false;
	
	            language=2;
	        }
	
	        private void radioButton3_CheckedChanged(object sender, System.EventArgs e)
	        {            
	            radioButton1.Checked=false;
	            radioButton2.Checked=false;
	            radioButton3.Checked=true;
	
	            language=3;
	        }            
	
	    }
	}
snippet conceptual_timespan_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/conceptual_timespan_custom/customexamples1.cs

	using System;
	
	public class Example
	{
	   public static void Main()
	   {
	      dSpecifier();
	      Console.WriteLine("-------");
	      ddSpecifier();
	      Console.WriteLine("-------");
	      hSpecifier();
	      Console.WriteLine("-------");
	      ParseH();
	      Console.WriteLine("-------");
	      ParseHH();
	      Console.WriteLine("-------");
	      hhSpecifier();
	      Console.WriteLine("-------");
	      ParseM();
	      Console.WriteLine("-------");
	      mSpecifier();
	      Console.WriteLine("-------");
	      ParseMM();
	      Console.WriteLine("-------");
	      mmSpecifier();
	      Console.WriteLine("-------");
	      sSpecifier();
	      Console.WriteLine("-------");
	      ParseS();
	      Console.WriteLine("-------");
	      ParseSS();
	      Console.WriteLine("-------");
	      ssSpecifier();
	      Console.WriteLine("-------");
	   }
	
	   private static void dSpecifier()
	   {
	      TimeSpan ts1 = new TimeSpan(16, 4, 3, 17, 250);
	      Console.WriteLine(ts1.ToString("%d"));
	      Console.WriteLine();
	      
	      TimeSpan ts2 = new TimeSpan(4, 3, 17);
	      Console.WriteLine(ts2.ToString(@"d\.hh\:mm\:ss"));
	      
	      TimeSpan ts3 = new TimeSpan(3, 4, 3, 17);
	      Console.WriteLine(ts3.ToString(@"d\.hh\:mm\:ss"));
	   }
	
	   private static void ddSpecifier()
	   {
	      TimeSpan ts1 = new TimeSpan(0, 23, 17, 47);
	      TimeSpan ts2 = new TimeSpan(365, 21, 19, 45);
	      
	      for (int ctr = 2; ctr <= 8; ctr++)
	      {
	         string fmt = new String('d', ctr) + @"\.hh\:mm\:ss";
	         Console.WriteLine("{0} --> {1:" + fmt + "}", fmt, ts1);  
	         Console.WriteLine("{0} --> {1:" + fmt + "}", fmt, ts2);
	         Console.WriteLine();
	      }  
	   } 
	   
	   private static void hSpecifier()
	   {
	      TimeSpan ts = new TimeSpan(3, 42, 0);
	      Console.WriteLine("{0:%h} hours {0:%m} minutes", ts);
	      
	      TimeSpan ts1 = new TimeSpan(14, 3, 17);
	      Console.WriteLine(ts1.ToString(@"d\.h\:mm\:ss"));
	      
	      TimeSpan ts2 = new TimeSpan(3, 4, 3, 17);
	      Console.WriteLine(ts2.ToString(@"d\.h\:mm\:ss"));
	   }
	
	   private static void ParseH()
	   {
	      string value = "8";
	      TimeSpan interval;
	      if (TimeSpan.TryParseExact(value, "%h", null, out interval))
	         Console.WriteLine(interval.ToString("c"));
	      else
	         Console.WriteLine("Unable to convert '{0}' to a time interval", 
	                           value);   
	   }   
	     
	   private static void ParseHH()
	   {
	      string value = "08";
	      TimeSpan interval;
	      if (TimeSpan.TryParseExact(value, "hh", null, out interval))
	         Console.WriteLine(interval.ToString("c"));
	      else
	         Console.WriteLine("Unable to convert '{0}' to a time interval", 
	                           value);   
	   }  
	    
	   private static void hhSpecifier()
	   {
	      TimeSpan ts1 = new TimeSpan(14, 3, 17);
	      Console.WriteLine(ts1.ToString(@"d\.hh\:mm\:ss"));
	      
	      TimeSpan ts2 = new TimeSpan(3, 4, 3, 17);
	      Console.WriteLine(ts2.ToString(@"d\.hh\:mm\:ss"));
	   }
	
	   private static void ParseM()
	   {
	      string value = "3";
	      TimeSpan interval;
	      if (TimeSpan.TryParseExact(value, "%m", null, out interval))
	         Console.WriteLine(interval.ToString("c"));
	      else
	         Console.WriteLine("Unable to convert '{0}' to a time interval", 
	                           value);   
	   }  
	    
	   private static void mSpecifier()
	   {
	      TimeSpan ts1 = new TimeSpan(0, 6, 32);
	      Console.WriteLine("{0:m\\:ss} minutes", ts1);
	      
	      TimeSpan ts2 = new TimeSpan(3, 4, 3, 17);
	      Console.WriteLine("Elapsed time: {0:m\\:ss}", ts2);
	   }
	
	   private static void ParseMM()
	   {
	      string value = "07";
	      TimeSpan interval;
	      if (TimeSpan.TryParseExact(value, "mm", null, out interval))
	         Console.WriteLine(interval.ToString("c"));
	      else
	         Console.WriteLine("Unable to convert '{0}' to a time interval", 
	                           value);   
	   }  
	   
	   private static void mmSpecifier()
	   {
	      TimeSpan departTime = new TimeSpan(11, 12, 00);
	      TimeSpan arriveTime = new TimeSpan(16, 28, 00);
	      Console.WriteLine("Travel time: {0:hh\\:mm}", 
	                        arriveTime - departTime);
	   }  
	   
	   private static void sSpecifier()
	   { 
	      TimeSpan ts = TimeSpan.FromSeconds(12.465);
	      Console.WriteLine(ts.ToString("%s"));
	      Console.WriteLine();
	
	      TimeSpan startTime = new TimeSpan(0, 12, 30, 15, 0);
	      TimeSpan endTime = new TimeSpan(0, 12, 30, 21, 3);
	      Console.WriteLine(@"Elapsed Time: {0:s\:fff} seconds", 
	                        endTime - startTime);
	   }   
	   
	   private static void ParseS()
	   {
	      string value = "9";
	      TimeSpan interval;
	      if (TimeSpan.TryParseExact(value, "%s", null, out interval))
	         Console.WriteLine(interval.ToString("c"));
	      else
	         Console.WriteLine("Unable to convert '{0}' to a time interval", 
	                           value);   
	   } 
	   
	   private static void ParseSS()
	   {
	      string[] values = { "49", "9", "06" };
	      TimeSpan interval;
	      foreach (string value in values)
	      {
	         if (TimeSpan.TryParseExact(value, "ss", null, out interval))
	            Console.WriteLine(interval.ToString("c"));
	         else
	            Console.WriteLine("Unable to convert '{0}' to a time interval", 
	                              value);   
	      }
	   } 
	
	   private static void ssSpecifier()
	   {
	      TimeSpan interval1 = TimeSpan.FromSeconds(12.60);
	      Console.WriteLine(interval1.ToString(@"ss\.fff"));
	      
	      TimeSpan interval2 = TimeSpan.FromSeconds(6.485);
	      Console.WriteLine(interval2.ToString(@"ss\.fff"));
	   }
	}
	

snippet formatting_dateandtime_custom

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/Formatting_DateAndTime_Custom/Custom1.cs

	using System;
	using System.Globalization;
	
	public class Class1
	{
	   public static void Main()
	   {
	      Show_dSpecifier();
	      Console.WriteLine();
	      Show_ddSpecifier();
	      Show_dddSpecifier();
	      Show_ddddSpecifier();
	      Show_fSpecifiers();
	      Show_gSpecifier();
	      Show_hSpecifier();
	      Show_hhSpecifier();
	      ShowHSpecifier();
	      ShowHHSpecifier();
	      ShowMSpecifier();
	      ShowKSpecifier();
	      Show_ySpecifier();
	      Show_zSpecifier();
	   }
	
	   private static void Show_dSpecifier()
	   {
	      Console.WriteLine("d format specifier");
	      DateTime date1 = new DateTime(2008, 8, 29, 19, 27, 15); 
	      
	      Console.WriteLine(date1.ToString("d, M", 
	                        CultureInfo.InvariantCulture)); 
	      
	      Console.WriteLine(date1.ToString("d MMMM", 
	                        CultureInfo.CreateSpecificCulture("en-US")));
	      Console.WriteLine(date1.ToString("d MMMM", 
	                        CultureInfo.CreateSpecificCulture("es-MX")));
	      Console.WriteLine();
	   }
	   
	   private static void Show_ddSpecifier()
	   {
	      Console.WriteLine("dd format specifier");
	      DateTime date1 = new DateTime(2008, 1, 2, 6, 30, 15);
	      
	      Console.WriteLine(date1.ToString("dd, MM", 
	                        CultureInfo.InvariantCulture)); 
	      Console.WriteLine();
	   }
	   
	   private static void Show_dddSpecifier()
	   {
	      Console.WriteLine("ddd format specifier");
	      DateTime date1 = new DateTime(2008, 8, 29, 19, 27, 15);
	      
	      Console.WriteLine(date1.ToString("ddd d MMM", 
	                        CultureInfo.CreateSpecificCulture("en-US")));
	      Console.WriteLine(date1.ToString("ddd d MMM", 
	                        CultureInfo.CreateSpecificCulture("fr-FR")));
	      Console.WriteLine();
	   }
	   
	   private static void Show_ddddSpecifier()
	   {
	      Console.WriteLine("dddd format specifier");
	      DateTime date1 = new DateTime(2008, 8, 29, 19, 27, 15);
	      
	      Console.WriteLine(date1.ToString("dddd dd MMMM", 
	                        CultureInfo.CreateSpecificCulture("en-US")));
	      Console.WriteLine(date1.ToString("dddd dd MMMM", 
	                        CultureInfo.CreateSpecificCulture("it-IT")));
	      Console.WriteLine();
	   }
	   
	   private static void Show_fSpecifiers()
	   {
	      Console.WriteLine("f and F format specifiers");
	      DateTime date1 = new DateTime(2008, 8, 29, 19, 27, 15, 18);
	      CultureInfo ci = CultureInfo.InvariantCulture;
	
	      Console.WriteLine(date1.ToString("hh:mm:ss.f", ci));
	      Console.WriteLine(date1.ToString("hh:mm:ss.F", ci));
	      Console.WriteLine(date1.ToString("hh:mm:ss.ff", ci));
	      Console.WriteLine(date1.ToString("hh:mm:ss.FF", ci));
	      Console.WriteLine(date1.ToString("hh:mm:ss.fff", ci));
	      Console.WriteLine(date1.ToString("hh:mm:ss.FFF", ci));
	      Console.WriteLine();
	   }
	
	   private static void Show_gSpecifier()
	   {
	      Console.WriteLine("g format specifier");
	      DateTime date1 = new DateTime(70, 08, 04);
	      
	      Console.WriteLine(date1.ToString("MM/dd/yyyy g", 
	                        CultureInfo.InvariantCulture));
	      Console.WriteLine(date1.ToString("MM/dd/yyyy g", 
	                        CultureInfo.CreateSpecificCulture("fr-FR")));                         
	      Console.WriteLine();
	    }
	    
	    private static void Show_hSpecifier()
	    {
	      Console.WriteLine("h format specifier");
	      DateTime date1; 
	      date1 = new DateTime(2008, 1, 1, 18, 9, 1);
	      Console.WriteLine(date1.ToString("h:m:s.F t", 
	                        CultureInfo.InvariantCulture));
	      Console.WriteLine(date1.ToString("h:m:s.F t", 
	                        CultureInfo.CreateSpecificCulture("el-GR")));
	      date1 = new DateTime(2008, 1, 1, 18, 9, 1, 500);
	      Console.WriteLine(date1.ToString("h:m:s.F t", 
	                        CultureInfo.InvariantCulture));
	      Console.WriteLine(date1.ToString("h:m:s.F t", 
	                        CultureInfo.CreateSpecificCulture("el-GR")));
	      Console.WriteLine();
	    }
	    
	    private static void Show_hhSpecifier()
	    {
	      Console.WriteLine("hh format specifier");
	      DateTime date1; 
	      date1 = new DateTime(2008, 1, 1, 18, 9, 1);
	      Console.WriteLine(date1.ToString("hh:mm:ss tt", 
	                        CultureInfo.InvariantCulture));
	      Console.WriteLine(date1.ToString("hh:mm:ss tt", 
	                        CultureInfo.CreateSpecificCulture("hu-HU")));
	      date1 = new DateTime(2008, 1, 1, 18, 9, 1, 500);
	      Console.WriteLine(date1.ToString("hh:mm:ss.ff tt", 
	                        CultureInfo.InvariantCulture));
	      Console.WriteLine(date1.ToString("hh:mm:ss.ff tt", 
	                        CultureInfo.CreateSpecificCulture("hu-HU")));
	      Console.WriteLine();
	   }
	    
	   private static void ShowHSpecifier()  
	   {
	      Console.WriteLine("H format specifier");
	      DateTime date1 = new DateTime(2008, 1, 1, 6, 9, 1);
	      Console.WriteLine(date1.ToString("H:mm:ss", 
	                        CultureInfo.InvariantCulture));
	      Console.WriteLine();
	   }
	   
	   private static void ShowHHSpecifier()
	   {
	      Console.WriteLine("HH format specifier");
	      DateTime date1 = new DateTime(2008, 1, 1, 6, 9, 1);
	      Console.WriteLine(date1.ToString("HH:mm:ss", 
	                        CultureInfo.InvariantCulture));
	      Console.WriteLine();
	   }
	   
	   private static void ShowMSpecifier()
	   {
	      Console.WriteLine("M format specifier");
	      DateTime date1 = new DateTime(2008, 8, 18);
	      Console.WriteLine(date1.ToString("(M) MMM, MMMM", 
	                        CultureInfo.CreateSpecificCulture("en-US")));
	      Console.WriteLine(date1.ToString("(M) MMM, MMMM", 
	                        CultureInfo.CreateSpecificCulture("nl-NL")));                       
	      Console.WriteLine(date1.ToString("(M) MMM, MMMM", 
	                        CultureInfo.CreateSpecificCulture("lv-LV")));                        
	      Console.WriteLine();
	   }
	
	   private static void ShowKSpecifier()
	   {
	      Console.WriteLine("K format specifier");
	      Console.WriteLine(DateTime.Now.ToString("%K"));
	      Console.WriteLine(DateTime.UtcNow.ToString("%K"));
	      Console.WriteLine("'{0}'", 
	                        DateTime.SpecifyKind(DateTime.Now, 
	                             DateTimeKind.Unspecified).ToString("%K"));
	      Console.WriteLine(DateTimeOffset.Now.ToString("%K"));
	      Console.WriteLine(DateTimeOffset.UtcNow.ToString("%K"));
	      Console.WriteLine(new DateTimeOffset(2008, 5, 1, 6, 30, 0, 
	                            new TimeSpan(5, 0, 0)).ToString("%K"));
	      Console.WriteLine();
	   }
	   
	   private static void Show_ySpecifier()
	   {
	      Console.WriteLine("y format specifier");
	      DateTime date1 = new DateTime(1, 12, 1);
	      DateTime date2 = new DateTime(2010, 1, 1);
	      Console.WriteLine(date1.ToString("%y"));
	      Console.WriteLine(date1.ToString("yy"));
	      Console.WriteLine(date1.ToString("yyy"));
	      Console.WriteLine(date1.ToString("yyyy"));
	      Console.WriteLine(date1.ToString("yyyyy"));
	      Console.WriteLine(date2.ToString("%y"));
	      Console.WriteLine(date2.ToString("yy"));
	      Console.WriteLine(date2.ToString("yyy"));
	      Console.WriteLine(date2.ToString("yyyy"));
	      Console.WriteLine(date2.ToString("yyyyy"));
	      Console.WriteLine();
	   }
	   
	   private static void Show_zSpecifier()
	   {
	      Console.WriteLine("z format specifier");
	      DateTime date1 = DateTime.UtcNow;
	      Console.WriteLine(String.Format("{0:%z}, {0:zz}, {0:zzz}", 
	                        date1));
	
	      DateTimeOffset date2 = new DateTimeOffset(2008, 8, 1, 0, 0, 0, 
	                                                new TimeSpan(6, 0, 0));
	      Console.WriteLine(String.Format("{0:%z}, {0:zz}, {0:zzz}", 
	                        date2));
	      Console.WriteLine();
	   }
	}

snippet parsemethod

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/Default.aspx.cs

	using System;
	using System.Data;
	using System.Configuration;
	using System.Collections;
	using System.Globalization;
	using System.Web;
	using System.Web.Security;
	using System.Web.UI;
	using System.Web.UI.WebControls;
	using System.Web.UI.WebControls.WebParts;
	using System.Web.UI.HtmlControls;
	
	public partial class Default2 : System.Web.UI.Page
	{
	   TextBox inputNumber;
	   Label outputNumber;
	
	   protected void OkToSingle_Click(object sender, EventArgs e)
	   {
	      string locale;
	      float number;
	      CultureInfo culture; 
	
	      if (String.IsNullOrEmpty(this.inputNumber.Text))
	         return;
	
	      if (Request.UserLanguages.Length == 0)
	         return;
	      locale = Request.UserLanguages[0];
	      if (String.IsNullOrEmpty(locale))
	         return; 
	
	      culture = new CultureInfo(locale);
	      
	      try
	      {
	         number = Single.Parse(this.inputNumber.Text, culture.NumberFormat);
	      }
	      catch (FormatException)
	      {
	         return;
	      }
	      catch (Exception)
	      {
	         return;
	      }
	      this.outputNumber.Text = "Number is " + number.ToString();
	   }
	
	   protected void OkToDouble_Click(object sender, EventArgs e)
	   {
	      string locale;
	      double number;
	      CultureInfo culture;
	
	      if (String.IsNullOrEmpty(this.inputNumber.Text))
	         return;
	
	      if (Request.UserLanguages.Length == 0)
	         return;
	      locale = Request.UserLanguages[0];
	      if (String.IsNullOrEmpty(locale))
	         return;
	
	      culture = new CultureInfo(locale);
	
	      try
	      {
	         number = Double.Parse(this.inputNumber.Text, culture.NumberFormat);
	      }
	      catch (FormatException)
	      {
	         return;
	      }
	      catch (OverflowException)
	      {
	         return;
	      }
	      this.outputNumber.Text = "Number is " + number.ToString();
	   }
	
	   protected void OkToDecimal_Click(object sender, EventArgs e)
	   {
	      string locale;
	      decimal number;
	      CultureInfo culture;
	
	      if (String.IsNullOrEmpty(this.inputNumber.Text))
	         return;
	
	      if (Request.UserLanguages.Length == 0)
	         return;
	      locale = Request.UserLanguages[0];
	      if (String.IsNullOrEmpty(locale))
	         return;
	
	      culture = new CultureInfo(locale);
	
	      try
	      {
	         number = Decimal.Parse(this.inputNumber.Text, culture.NumberFormat);
	      }
	      catch (FormatException)
	      {
	         return;
	      }
	      catch (Exception)
	      {
	         return;
	      }
	      this.outputNumber.Text = "Number is " + number.ToString();
	   }
	
	   protected void OkToInteger_Click(object sender, EventArgs e)
	   {
	      string locale;
	      int number;
	      CultureInfo culture;
	
	      if (String.IsNullOrEmpty(this.inputNumber.Text))
	         return;
	
	      if (Request.UserLanguages.Length == 0)
	         return;
	      locale = Request.UserLanguages[0];
	      if (String.IsNullOrEmpty(locale))
	         return;
	
	      culture = new CultureInfo(locale);
	
	      try
	      {
	         number = Int32.Parse(this.inputNumber.Text, culture.NumberFormat);
	      }
	      catch (FormatException)
	      {
	         return;
	      }
	      catch (Exception)
	      {
	         return;
	      }
	      this.outputNumber.Text = "Number is " + number.ToString();
	   }
	
	   protected void OkToLong_Click(object sender, EventArgs e)
	   {
	      string locale;
	      long number;
	      CultureInfo culture;
	
	      if (String.IsNullOrEmpty(this.inputNumber.Text))
	         return;
	
	      if (Request.UserLanguages.Length == 0)
	         return;
	      locale = Request.UserLanguages[0];
	      if (String.IsNullOrEmpty(locale))
	         return;
	
	      culture = new CultureInfo(locale);
	
	      try
	      {
	         number = Int64.Parse(this.inputNumber.Text, culture.NumberFormat);
	      }
	      catch (FormatException)
	      {
	         return;
	      }
	      catch (Exception)
	      {
	         return;
	      }
	      this.outputNumber.Text = "Number is " + number.ToString();
	   }
	
	   protected void OkToUInteger_Click(object sender, EventArgs e)
	   {
	      string locale;
	      uint number;
	      CultureInfo culture;
	
	      if (String.IsNullOrEmpty(this.inputNumber.Text))
	         return;
	
	      if (Request.UserLanguages.Length == 0)
	         return;
	      locale = Request.UserLanguages[0];
	      if (String.IsNullOrEmpty(locale))
	         return;
	
	      culture = new CultureInfo(locale);
	
	      try
	      {
	         number = UInt32.Parse(this.inputNumber.Text, culture.NumberFormat);
	      }
	      catch (FormatException)
	      {
	         return;
	      }
	      catch (Exception)
	      {
	         return;
	      }
	      this.outputNumber.Text = "Number is " + number.ToString();
	   }
	
	   protected void OkToULong_Click(object sender, EventArgs e)
	   {
	      string locale;
	      ulong number;
	      CultureInfo culture;
	
	      if (String.IsNullOrEmpty(this.inputNumber.Text))
	         return;
	
	      if (Request.UserLanguages.Length == 0)
	         return;
	      locale = Request.UserLanguages[0];
	      if (String.IsNullOrEmpty(locale))
	         return;
	
	      culture = new CultureInfo(locale);
	
	      try
	      {
	         number = UInt64.Parse(this.inputNumber.Text, culture.NumberFormat);
	      }
	      catch (FormatException)
	      {
	         return;
	      }
	      catch (Exception)
	      {
	         return;
	      }
	      this.outputNumber.Text = "Number is " + number.ToString();
	   }
	}

snippet securityelementmembers

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/securityelementmembers.cs

	using System;
	using System.Security;
	using System.Collections;
	
	class SecurityElementMembers
	{
	    [STAThread]
	    static void Main(string[] args)
	    {
	        SecurityElement xmlRootElement = 
	            new SecurityElement("RootTag", "XML security tree");
	
	        AddAttribute(xmlRootElement,"creationdate",DateTime.Now.ToString());
	        AddChildElement(xmlRootElement,"destroytime",
	            DateTime.Now.AddSeconds(1.0).ToString());
	
	        SecurityElement windowsRoleElement = 
	            new SecurityElement("WindowsMembership.WindowsRole");
	        
	        windowsRoleElement.AddAttribute("version","1.00");
	
	        AddChildElement(windowsRoleElement,"BabyElement",
	            "This is a child element");
	        AddAttribute(windowsRoleElement,"creationdate",
	            DateTime.Now.ToString());
	
	        xmlRootElement.AddChild(windowsRoleElement);
	
	        CompareAttributes(xmlRootElement, "creationdate");
	        ConvertToHashTable(xmlRootElement);
	
	        DisplaySummary(xmlRootElement);
	
	        xmlRootElement = DestroyTree(xmlRootElement);
	        if (xmlRootElement != null)
	        {
	            string elementInXml = xmlRootElement.ToString();
	            Console.WriteLine(elementInXml);
	        }
	        
	        Console.WriteLine("This sample completed successfully; " +
	            "press Enter to exit.");
	        Console.ReadLine();
	    }
	
	    private static SecurityElement AddAttribute(
	        SecurityElement xmlElement,
	        string attributeName,
	        string attributeValue)
	    {
	        if (xmlElement != null)
	        {
	            if (SecurityElement.IsValidAttributeName(attributeName) &&
	                SecurityElement.IsValidAttributeValue(attributeValue))
	            {
	                xmlElement.AddAttribute(attributeName, attributeValue);
	            }
	        }
	        return xmlElement;
	    }
	
	    private static SecurityElement AddChildElement(
	        SecurityElement parentElement,
	        string tagName,
	        string tagText)
	    {
	        if (parentElement != null)
	        {
	            if (!SecurityElement.IsValidText(tagText))
	            {
	                tagText = SecurityElement.Escape(tagText);
	            }
	
	            if (SecurityElement.IsValidTag(tagName))
	            {
	                SecurityElement childElement;
	                childElement = parentElement.SearchForChildByTag(tagName);
	
	                if (childElement != null)
	                {
	                    String elementText;
	                    elementText = parentElement.SearchForTextOfTag(tagName);
	
	                    if (!elementText.Equals(tagText))
	                    {
	                        parentElement.AddChild(
	                            new SecurityElement(tagName, tagText));
	                    }
	                }
	                else 
	                {
	                    parentElement.AddChild(
	                        new SecurityElement(tagName, tagText));
	                }
	            }
	        }
	        return parentElement;
	    }
	
	    private static void DisplaySummary(SecurityElement xmlElement)
	    {
	        string xmlTreeName = xmlElement.Tag.ToString();
	
	        string xmlTreeDescription = xmlElement.Text;
	        
	        string xmlCreationDate = xmlElement.Attribute("creationdate");
	        
	        string childrenCount = xmlElement.Children.Count.ToString();
	
	        string outputMessage = "The security XML tree named " + xmlTreeName;
	        outputMessage += "(" + xmlTreeDescription + ")";
	        outputMessage += " was created on " + xmlCreationDate + " and ";
	        outputMessage += "contains " + childrenCount + " child elements.";
	
	        Console.WriteLine(outputMessage);
	    }
	
	    private static void CompareAttributes(
	        SecurityElement xmlElement, string attributeName)
	    {
	        Hashtable attributeKeys = xmlElement.Attributes;
	        string attributeValue = attributeKeys[attributeName].ToString();
	
	        foreach(SecurityElement xmlChild in xmlElement.Children)
	        {
	            if (attributeValue.Equals(xmlChild.Attribute(attributeName)))
	            {
	            }
	        }
	    }
	
	    private static void ConvertToHashTable(SecurityElement xmlElement)
	    {
	        Hashtable xmlAsHash = new Hashtable();
	        int rootIndex = xmlElement.GetHashCode();
	        xmlAsHash.Add(rootIndex, "root");
	
	        int parentNum = 0;
	
	        foreach(SecurityElement xmlParent in xmlElement.Children)
	        {
	            parentNum++;
	            xmlAsHash.Add(xmlParent.GetHashCode(), "parent" + parentNum);
	            if ((xmlParent.Children != null) && 
	                (xmlParent.Children.Count > 0))
	            {
	                int childNum = 0;
	                foreach(SecurityElement xmlChild in xmlParent.Children)
	                {
	                    childNum++;
	                    xmlAsHash.Add(xmlChild.GetHashCode(), "child" + childNum);
	                }
	            }
	        }
	    }
	
	    private static SecurityElement DestroyTree(SecurityElement xmlElement)
	    {
	        SecurityElement localXmlElement = xmlElement;
	        SecurityElement destroyElement = 
	            localXmlElement.SearchForChildByTag("destroytime");
	
	        if (localXmlElement.SearchForChildByTag("destroytime") != null)
	        {
	            string storedDestroyTime =
	                localXmlElement.SearchForTextOfTag("destroytime");
	
	            DateTime destroyTime = DateTime.Parse(storedDestroyTime);
	            if (DateTime.Now > destroyTime)
	            {
	                localXmlElement = null;
	                Console.WriteLine("The XML security tree has been deleted.");
	            }
	        }
	
	        if (xmlElement.GetType().Equals(
	            typeof(System.Security.SecurityElement)))
	        {
	            if (xmlElement.Equals(localXmlElement))
	            {
	                if (xmlElement.Equal(localXmlElement))
	                {
	                    return xmlElement;
	                }
	            }
	        }
	
	        return localXmlElement;
	    }
	}
snippet databinding

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/DataBinding/webcustomcontrol1.cs

	
	
	/*The following example demonstrates the  members of 'DataBinding' and 
	' 'DataBindingCollection'.A new control 'SimpleWebControl'  is created 
	   and a 'Designer' attribute is attached to it which actually refers to the 
	   DesignTimeClass.The 'OnBindingsCollectionChanged(string)' method  is overridden 
	   to actually capture the DataBindingCollection instance and add the 
	   DataBinding Expression to the property in the ASPX file. When 'Text' property of the 
	   SimpleWebControl is bound to the 'Text' property of 'Button1' at the DesignTime 
	   using the IDE, the 'OnBindingCollectionChanged' method is called and 
	   the 'Text' property of the 'SimpleWebControl' is updated in .aspx file.
	   The actual DataBinding is done at the runtime.The  properties of the 'DataBinding'
	   and 'DataBindingCollection' are written into a text file (DataBindingOutput.txt)
	   in drive C.The Output is written at the design time itself.
	
	Note:This program has to be tested at "DesignTime".
	These are the instructions to be followed to successfully test the functionality of the program.
	1) Create a new "C# WebApplication" project.
	2) Add Reference "System.Design.dll" to the project. 
	3) Add the 'DataBinding.aspx' and 'WebCustomControl1.cs' files to the project, 
	  which are provided with this example.
	4) In the 'DataBinding.aspx' file, make the assembly name same as the 
	   "Project Name", created in step1.
	5)Build the project.
	6)Go to the "DesignTab" of the 'DataBinding.aspx' file.
	7)Go to the properties window of the SimpleWebcontrol, built in Step5.
	8)Go to the DataBindings column.
	9)Select the "Text" property.
	10)Select the "CustomBindingExpression" option.
	11)Associate the Text property to any property of any control which is of the 
	   type string.
	12)Observe in "C:\" a file created with the name "DataBindingOutput.txt".
	   This file contains the properties of 'DataBinding' and 'DataBindingCollection' 
	   classes demonstrated. 
	  */
	
	using System;
	using System.Web.UI;
	using System.Web.UI.WebControls;
	using System.ComponentModel;
	using System.Web.UI.Design;
	using System.IO;
	using System.Text;
	using System.Collections;
	
	namespace DataBindingTest
	{
	
	
	 public class SimpleDesigner : System.Web.UI.Design.ControlDesigner
	   {
	     public string Text
	      {
	         get
	         {
	            DataBinding myBinding = DataBindings["Text"];
	            if (myBinding != null)
	            {
	               return myBinding.Expression;
	            }
	            return String.Empty;
	         }
	         set
	         {
	            if ((value == null) || (value.Length == 0))
	            {
	               DataBindings.Remove("Text");
	            }
	            else
	            {
	               DataBinding binding = DataBindings["Text"];
	               if (binding == null)
	               {
	                  binding = new DataBinding("Text", typeof(string),value );
	               }
	               else
	               {
	                  binding.Expression = value;
	               }
	                DataBinding binding1=(DataBinding)DataBindings.SyncRoot;
	               DataBindings.Add(binding);
	               DataBindings.Add(binding1);
	
	            }
	            OnBindingsCollectionChanged("Text");
	         }
	      }
	
	      protected override void OnBindingsCollectionChanged(string propName)
	      {
	         IHtmlControlDesignerBehavior myHtmlControlDesignBehavior = Behavior;
	         DataBindingCollection myDataBindingCollection;
	         DataBinding myDataBinding1,myDataBinding2;
	         String myStringReplace1,myDataBindingExpression1,removedBinding,removedBindingAfterReplace,myDataBindingExpression2,myStringReplace2;
	         string[] removedBindings1,removedBindings2;
	         Int32 temp;
	         IEnumerator myEnumerator;
	
	         if ( myHtmlControlDesignBehavior == null)
	            return;
	         DataBindingCollection myDataBindingCollection1= new DataBindingCollection();
	         myDataBindingCollection1=myDataBindingCollection = DataBindings;
	
	         if (propName != null)
	         {
	            myDataBinding1 = myDataBindingCollection[propName];
	            myStringReplace1 = propName.Replace(".","-");
	            if (myDataBinding1 == null)
	            {
	               myHtmlControlDesignBehavior.RemoveAttribute(myStringReplace1,true);
	               return;
	            }
	            myDataBindingExpression1 = String.Concat("<%#",myDataBinding1.Expression,"%>");
	            myHtmlControlDesignBehavior.SetAttribute(myStringReplace1,myDataBindingExpression1,true);
	            int index = myStringReplace1.IndexOf("-");
	         }
	         else
	         {
	            removedBindings2 = removedBindings1 = DataBindings.RemovedBindings;
	            temp = 0;
	            while(removedBindings2.Length > temp)
	            {
	               removedBinding = removedBindings2[temp];
	               removedBindingAfterReplace = removedBinding.Replace('.','-');
	               myHtmlControlDesignBehavior.RemoveAttribute(removedBindingAfterReplace,true);
	               temp = temp + 1;
	            }
	            myDataBindingCollection = DataBindings;
	            myEnumerator = myDataBindingCollection.GetEnumerator();
	            while(myEnumerator.MoveNext())
	            {
	
	               myDataBinding2 = (DataBinding)myEnumerator.Current;
	               String dataBindingOutput1,dataBindingOutput2,dataBindingOutput3;
	               dataBindingOutput1=String.Concat("The property name is ",myDataBinding2.PropertyName);
	               dataBindingOutput2=String.Concat("The property type is ",myDataBinding2.PropertyType.ToString(),"-",dataBindingOutput1);
	               dataBindingOutput3=String.Concat("The expression is ",myDataBinding2.Expression,"-",dataBindingOutput2);
	               WriteToFile(dataBindingOutput3);
	               myDataBindingExpression2 = String.Concat("<%#",myDataBinding2.Expression,"%>");
	               myStringReplace2 = myDataBinding2.PropertyName.Replace(".","-");
	               myHtmlControlDesignBehavior.SetAttribute(myStringReplace2,myDataBindingExpression2,true);
	               int index = myStringReplace2.IndexOf('-');
	            string dataBindingOutput4,dataBindingOutput5,dataBindingOutput6,dataBindingOutput7,dataBindingOutput8;
	            dataBindingOutput4=String.Concat("The Count of the collection is ",myDataBindingCollection1.Count);
	            dataBindingOutput5=String.Concat("The IsSynchronised property of the collection is ",myDataBindingCollection1.IsSynchronized,"-",dataBindingOutput4);
	            dataBindingOutput6=String.Concat("The IsReadOnly property of the collection is ",myDataBindingCollection1.IsReadOnly,"-",dataBindingOutput5);
	            WriteToFile(dataBindingOutput6);
	
	            System.Array dataBindingCollectionArray =Array.CreateInstance(typeof(object),myDataBindingCollection1.Count);
	            myDataBindingCollection1.CopyTo(dataBindingCollectionArray,0);
	            dataBindingOutput7=String.Concat("The count of DataBindingArray is  ",dataBindingCollectionArray.Length);
	            WriteToFile(dataBindingOutput7);
	            IEnumerator myEnumerator1 =myDataBindingCollection1.GetEnumerator();
	            if(myEnumerator1.MoveNext())
	            {
	
	               myDataBinding1 = (DataBinding)myEnumerator1.Current;
	               dataBindingOutput8=String.Concat("The HashCode is",myDataBinding1.GetHashCode().ToString());
	               WriteToFile(dataBindingOutput8);
	               myDataBindingCollection1.Remove(myDataBinding1);
	               dataBindingOutput8=String.Concat("The Count of the collection after DataBinding is removed is  ",myDataBindingCollection1.Count);
	               WriteToFile(dataBindingOutput8);
	            }
	            else
	            {
	               myDataBinding1 = (DataBinding)myEnumerator1.Current;
	               myDataBindingCollection1.Remove("Text",true);
	               dataBindingOutput8=String.Concat("The Count of the collection after DataBinding is removed is  ",myDataBindingCollection1.Count);
	               WriteToFile(dataBindingOutput8);
	               myDataBindingCollection1.Clear();
	               dataBindingOutput8=String.Concat("The Count of the collection after clear method is called  ",myDataBindingCollection1.Count);
	               WriteToFile(dataBindingOutput8);
	            }
	     }
	      public void WriteToFile(string input)
	      {
	         StreamWriter myFile= File.AppendText("C:\\DataBindingOutput.txt");
	         ASCIIEncoding encoder= new ASCIIEncoding();
	         byte[] ByteArray=encoder.GetBytes(input);
	         char[] CharArray=encoder.GetChars(ByteArray);
	         myFile.WriteLine(CharArray,0,input.Length);
	         myFile.Close();
	      }
	    }
	[DefaultProperty("Text"),
	 ToolboxData("<{0}:Simple runat=server></{0}:Simple>"),
	 Designer("DataBindingTest.SimpleDesigner"),
	DataBindingHandlerAttribute(typeof(System.Web.UI.Design.TextDataBindingHandler))
	 ]
	   public class SimpleWebControl:WebControl
	   {
	      private string _Text;
	      [Bindable(true)]
	      public string Text
	      {
	         get
	         {
	            return _Text;
	         }
	         set
	         {
	            _Text=value;
	         }
	      }
	      protected override void Render(HtmlTextWriter output)
	      {
	         output.Write("<br>This is the Text of SimpleWebControl : " + _Text);
	         foreach (object attribute in (typeof(SimpleWebControl)).GetCustomAttributes(true))
	         {
	            if(attribute is DataBindingHandlerAttribute )
	            {
	               DataBindingHandlerAttribute myDataBindingHandlerAttribute= (DataBindingHandlerAttribute)attribute;
	               output.Write("<br><br><br>The IsDefaultAttribute of DataBindingHandlerAttribute is :" + myDataBindingHandlerAttribute.IsDefaultAttribute());
	               output.Write("<br><br><br>DataBinding HandlerTypeName:" + myDataBindingHandlerAttribute.HandlerTypeName);
	
	            }
	         }
	      }
	   }
	}

snippet codearrayindexerexpressionsnippet

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeArrayIndexerExpressionSnippet/codearrayindexerexpressionsnippet.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.Drawing;
	using System.Collections;
	using System.ComponentModel;
	using System.Windows.Forms;
	using System.Data;
	using System.IO;
	using Microsoft.CSharp;
	using Microsoft.VisualBasic;
	using Microsoft.JScript;
	
	namespace CodeDOMSamples
	{
	    public class Form1 : System.Windows.Forms.Form
	    {    
	        private System.CodeDom.CodeCompileUnit cu;
	        private System.Windows.Forms.TextBox textBox1;
	        private System.Windows.Forms.Button button1;
	        private System.Windows.Forms.Button button2;
	        private System.Windows.Forms.GroupBox groupBox1;
	        private System.Windows.Forms.RadioButton radioButton1;
	        private System.Windows.Forms.RadioButton radioButton2;
	        private System.Windows.Forms.RadioButton radioButton3;
	        private System.ComponentModel.Container components = null;
	
	        public Form1()
	        {            
	            InitializeComponent();                    
	            
	            cu = CreateGraph();
	        }
	
	        public CodeCompileUnit CreateGraph()
	        {
	            CodeCompileUnit cu = new CodeCompileUnit();
	
	            CodeNamespace cn = new CodeNamespace("TestSpace");        
	            
	            CodeTypeDeclaration cd = new CodeTypeDeclaration("TestClass");
	
	            CodeEntryPointMethod cm = new CodeEntryPointMethod();
	                                            
	            CodeArrayCreateExpression ca1 = new CodeArrayCreateExpression("System.Int32", 10);                        
	            
	            CodeVariableDeclarationStatement cv1 = new CodeVariableDeclarationStatement("System.Int32[]", "x", ca1);
	
	            cm.Statements.Add(cv1);            
	            
	            CodeArrayIndexerExpression ci1 = new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("x"), new CodePrimitiveExpression(5));
	
	
	
	            CodeVariableDeclarationStatement cv2 = new CodeVariableDeclarationStatement("System.Int32", "y");
	            cm.Statements.Add(cv2);
	
	            CodeAssignStatement as1 = new CodeAssignStatement(new CodeVariableReferenceExpression("y"), ci1);
	            
	            cm.Statements.Add(as1);            
	
	            cd.Members.Add(cm);
	            
	            cn.Types.Add(cd);
	
	            cu.Namespaces.Add(cn);
	
	            return cu;
	        }
	
	        private void OutputGraph()
	        {
	            StringWriter sw = new StringWriter();
	
	            System.CodeDom.Compiler.CodeDomProvider cp;
	            switch(language)
	            {
	                    cp = CodeDomProvider.CreateProvider("VisualBasic");
	                    break;
	                    cp = CodeDomProvider.CreateProvider("JScript");
	                    break;
	                    cp = CodeDomProvider.CreateProvider("CSharp");
	                    break;                
	            }
	            
	            ICodeGenerator cg = cp.CreateGenerator(sw);        
	            
	            cg.GenerateCodeFromCompileUnit(cu, sw, new CodeGeneratorOptions());
	
	            this.textBox1.Text = sw.ToString();            
	        }
	
	        protected override void Dispose( bool disposing )
	        {
	            if( disposing )
	            {
	                if (components != null) 
	                {
	                    components.Dispose();
	                }
	            }
	            base.Dispose( disposing );
	        }
	
	        #region Windows Form Designer generated code
	        private void InitializeComponent()
	        {
	            this.textBox1 = new System.Windows.Forms.TextBox();
	            this.button1 = new System.Windows.Forms.Button();
	            this.button2 = new System.Windows.Forms.Button();
	            this.groupBox1 = new System.Windows.Forms.GroupBox();
	            this.radioButton1 = new System.Windows.Forms.RadioButton();
	            this.radioButton2 = new System.Windows.Forms.RadioButton();
	            this.radioButton3 = new System.Windows.Forms.RadioButton();
	            this.groupBox1.SuspendLayout();
	            this.SuspendLayout();
	            this.textBox1.Location = new System.Drawing.Point(16, 112);
	            this.textBox1.Multiline = true;
	            this.textBox1.Name = "textBox1";
	            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Both;
	            this.textBox1.Size = new System.Drawing.Size(664, 248);
	            this.textBox1.TabIndex = 0;
	            this.textBox1.Text = "";
	            this.textBox1.WordWrap = false;
	            this.button1.BackColor = System.Drawing.Color.Aquamarine;
	            this.button1.Location = new System.Drawing.Point(16, 16);
	            this.button1.Name = "button1";
	            this.button1.TabIndex = 1;
	            this.button1.Text = "Generate";
	            this.button1.Click += new System.EventHandler(this.button1_Click);
	            this.button2.BackColor = System.Drawing.Color.MediumTurquoise;
	            this.button2.Location = new System.Drawing.Point(112, 16);
	            this.button2.Name = "button2";
	            this.button2.TabIndex = 2;
	            this.button2.Text = "Show Code";
	            this.button2.Click += new System.EventHandler(this.button2_Click);
	            this.groupBox1.Controls.AddRange(new System.Windows.Forms.Control[] {
	                                                                                    this.radioButton3,
	                                                                                    this.radioButton2,
	                                                                                    this.radioButton1});
	            this.groupBox1.Location = new System.Drawing.Point(16, 48);
	            this.groupBox1.Name = "groupBox1";
	            this.groupBox1.Size = new System.Drawing.Size(384, 56);
	            this.groupBox1.TabIndex = 3;
	            this.groupBox1.TabStop = false;
	            this.groupBox1.Text = "Language selection";
	            this.radioButton1.Checked = true;
	            this.radioButton1.Location = new System.Drawing.Point(16, 24);
	            this.radioButton1.Name = "radioButton1";
	            this.radioButton1.TabIndex = 0;
	            this.radioButton1.TabStop = true;
	            this.radioButton1.Text = "CSharp";
	            this.radioButton1.Click += new System.EventHandler(this.radioButton1_CheckedChanged);
	            this.radioButton2.Location = new System.Drawing.Point(144, 24);
	            this.radioButton2.Name = "radioButton2";
	            this.radioButton2.TabIndex = 1;
	            this.radioButton2.Text = "Visual Basic";
	            this.radioButton2.Click += new System.EventHandler(this.radioButton2_CheckedChanged);
	            this.radioButton3.Location = new System.Drawing.Point(272, 24);
	            this.radioButton3.Name = "radioButton3";
	            this.radioButton3.TabIndex = 2;
	            this.radioButton3.Text = "JScript";
	            this.radioButton3.Click += new System.EventHandler(this.radioButton3_CheckedChanged);
	            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
	            this.ClientSize = new System.Drawing.Size(714, 367);
	            this.Controls.AddRange(new System.Windows.Forms.Control[] {
	                                                                          this.groupBox1,
	                                                                          this.button2,
	                                                                          this.button1,
	                                                                          this.textBox1});
	            this.Name = "Form1";
	            this.Text = "CodeDOM Samples Framework";
	            this.groupBox1.ResumeLayout(false);
	            this.ResumeLayout(false);
	
	        }
	        #endregion
	
	        [STAThread]
	        static void Main() 
	        {
	            Application.Run(new Form1());
	        }
	
	        private void ShowCode()
	        {
	            this.textBox1.Text="";
	        }
	
	        private void button2_Click(object sender, System.EventArgs e)
	        {
	            ShowCode();
	        }
	
	        private void button1_Click(object sender, System.EventArgs e)
	        {        
	            OutputGraph();
	        }
	
	        private void radioButton1_CheckedChanged(object sender, System.EventArgs e)
	        {
	            radioButton1.Checked=true;
	            radioButton2.Checked=false;
	            radioButton3.Checked=false;
	
	            language=1;
	        }
	
	        private void radioButton2_CheckedChanged(object sender, System.EventArgs e)
	        {
	            radioButton1.Checked=false;
	            radioButton2.Checked=true;
	            radioButton3.Checked=false;
	
	            language=2;
	        }
	
	        private void radioButton3_CheckedChanged(object sender, System.EventArgs e)
	        {            
	            radioButton1.Checked=false;
	            radioButton2.Checked=false;
	            radioButton3.Checked=true;
	
	            language=3;
	        }            
	
	    }
	}
snippet codedomexample

	//deal with /root/linux_src/dotnet_samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/source.cs

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.Collections;
	using System.ComponentModel;
	using System.Diagnostics;
	using System.Drawing;
	using System.IO;
	using System.Windows.Forms;
	using Microsoft.CSharp;
	using Microsoft.VisualBasic;
	using Microsoft.JScript;
	
	namespace CodeDOMExample
	{
	    class CodeDomExample
	    {
	        public static CodeCompileUnit BuildHelloWorldGraph()
	        {
	            CodeCompileUnit compileUnit = new CodeCompileUnit();
	
	            CodeNamespace samples = new CodeNamespace("Samples");
	            compileUnit.Namespaces.Add(samples);
	
	            samples.Imports.Add(new CodeNamespaceImport("System"));
	
	            CodeTypeDeclaration class1 = new CodeTypeDeclaration("Class1");
	            samples.Types.Add(class1);
	
	            CodeEntryPointMethod start = new CodeEntryPointMethod();
	
	            CodeTypeReferenceExpression csSystemConsoleType = new CodeTypeReferenceExpression("System.Console");
	
	            CodeMethodInvokeExpression cs1 = new CodeMethodInvokeExpression(
	                csSystemConsoleType, "WriteLine",
	                new CodePrimitiveExpression("Hello World!"));
	
	            start.Statements.Add(cs1);
	
	            CodeMethodInvokeExpression cs2 = new CodeMethodInvokeExpression(
	                csSystemConsoleType, "WriteLine",
	                new CodePrimitiveExpression("Press the Enter key to continue."));
	
	            start.Statements.Add(cs2);
	
	            CodeMethodInvokeExpression csReadLine = new CodeMethodInvokeExpression(
	                csSystemConsoleType, "ReadLine");
	
	            start.Statements.Add(csReadLine);
	
	            class1.Members.Add(start);
	
	            return compileUnit;
	        }
	
	        public static void GenerateCode(CodeDomProvider provider,
	            CodeCompileUnit compileunit)
	        {
	            String sourceFile;
	            if (provider.FileExtension[0] == '.')
	            {
	                sourceFile = "TestGraph" + provider.FileExtension;
	            }
	            else
	            {
	                sourceFile = "TestGraph." + provider.FileExtension;
	            }
	
	            IndentedTextWriter tw = new IndentedTextWriter(new StreamWriter(sourceFile, false), "    ");
	            provider.GenerateCodeFromCompileUnit(compileunit, tw, new CodeGeneratorOptions());
	            tw.Close();
	        }
	
	        public static CompilerResults CompileCode(CodeDomProvider provider,
	                                                  String sourceFile,
	                                                  String exeFile)
	        {
	            String[] referenceAssemblies = { "System.dll" };
	            CompilerParameters cp = new CompilerParameters(referenceAssemblies,
	                                                           exeFile, false);
	            cp.GenerateExecutable = true;
	
	            CompilerResults cr = provider.CompileAssemblyFromFile(cp, sourceFile);
	            return cr;
	        }
	    }
	
	    public class CodeDomExampleForm : System.Windows.Forms.Form
	    {
	        private System.Windows.Forms.Button run_button = new System.Windows.Forms.Button();
	        private System.Windows.Forms.Button compile_button = new System.Windows.Forms.Button();
	        private System.Windows.Forms.Button generate_button = new System.Windows.Forms.Button();
	        private System.Windows.Forms.TextBox textBox1 = new System.Windows.Forms.TextBox();
	        private System.Windows.Forms.ComboBox comboBox1 = new System.Windows.Forms.ComboBox();
	        private System.Windows.Forms.Label label1 = new System.Windows.Forms.Label();
	
	        private void generate_button_Click(object sender, System.EventArgs e)
	        {
	            CodeDomProvider provider = GetCurrentProvider();
	            CodeDomExample.GenerateCode(provider, CodeDomExample.BuildHelloWorldGraph());
	
	            String sourceFile;
	            if (provider.FileExtension[0] == '.')
	            {
	                sourceFile = "TestGraph" + provider.FileExtension;
	            }
	            else
	            {
	                sourceFile = "TestGraph." + provider.FileExtension;
	            }
	
	            StreamReader sr = new StreamReader(sourceFile);
	            textBox1.Text = sr.ReadToEnd();
	            sr.Close();
	        }
	
	        private void compile_button_Click(object sender, System.EventArgs e)
	        {
	            CodeDomProvider provider = GetCurrentProvider();
	
	            String sourceFile;
	            if (provider.FileExtension[0] == '.')
	            {
	                sourceFile = "TestGraph" + provider.FileExtension;
	            }
	            else
	            {
	                sourceFile = "TestGraph." + provider.FileExtension;
	            }
	
	            CompilerResults cr = CodeDomExample.CompileCode(provider,
	                                                            sourceFile,
	                                                            "TestGraph.exe");
	
	            if (cr.Errors.Count > 0)
	            {
	                textBox1.Text = "Errors encountered while building " +
	                                sourceFile + " into " + cr.PathToAssembly + ": \r\n\n";
	                foreach (CompilerError ce in cr.Errors)
	                    textBox1.AppendText(ce.ToString() + "\r\n");
	                run_button.Enabled = false;
	            }
	            else
	            {
	                textBox1.Text = "Source " + sourceFile + " built into " +
	                                cr.PathToAssembly + " with no errors.";
	                run_button.Enabled = true;
	            }
	        }
	
	        private void run_button_Click(object sender,
	            System.EventArgs e)
	        {
	            Process.Start("TestGraph.exe");
	        }
	
	        private CodeDomProvider GetCurrentProvider()
	        {
	            CodeDomProvider provider;
	            switch ((string)this.comboBox1.SelectedItem)
	            {
	                case "CSharp":
	                    provider = CodeDomProvider.CreateProvider("CSharp");
	                    break;
	                case "Visual Basic":
	                    provider = CodeDomProvider.CreateProvider("VisualBasic");
	                    break;
	                case "JScript":
	                    provider = CodeDomProvider.CreateProvider("JScript");
	                    break;
	                default:
	                    provider = CodeDomProvider.CreateProvider("CSharp");
	                    break;
	            }
	            return provider;
	        }
	
	        public CodeDomExampleForm()
	        {
	            this.SuspendLayout();
	            this.label1.Location = new System.Drawing.Point(395, 20);
	            this.label1.Size = new Size(180, 22);
	            this.label1.Text = "Select a programming language:";
	            this.comboBox1.Location = new System.Drawing.Point(560, 16);
	            this.comboBox1.Size = new Size(190, 23);
	            this.comboBox1.Name = "comboBox1";
	            this.comboBox1.Items.AddRange(new string[] { "CSharp", "Visual Basic", "JScript" });
	            this.comboBox1.Anchor = System.Windows.Forms.AnchorStyles.Left
	                                    | System.Windows.Forms.AnchorStyles.Right
	                                    | System.Windows.Forms.AnchorStyles.Top;
	            this.comboBox1.SelectedIndex = 0;
	            this.generate_button.Location = new System.Drawing.Point(8, 16);
	            this.generate_button.Name = "generate_button";
	            this.generate_button.Size = new System.Drawing.Size(120, 23);
	            this.generate_button.Text = "Generate Code";
	            this.generate_button.Click += new System.EventHandler(this.generate_button_Click);
	            this.compile_button.Location = new System.Drawing.Point(136, 16);
	            this.compile_button.Name = "compile_button";
	            this.compile_button.Size = new System.Drawing.Size(120, 23);
	            this.compile_button.Text = "Compile";
	            this.compile_button.Click += new System.EventHandler(this.compile_button_Click);
	            this.run_button.Enabled = false;
	            this.run_button.Location = new System.Drawing.Point(264, 16);
	            this.run_button.Name = "run_button";
	            this.run_button.Size = new System.Drawing.Size(120, 23);
	            this.run_button.Text = "Run";
	            this.run_button.Click += new System.EventHandler(this.run_button_Click);
	            this.textBox1.Anchor = (System.Windows.Forms.AnchorStyles.Top
	                                     | System.Windows.Forms.AnchorStyles.Bottom
	                                     | System.Windows.Forms.AnchorStyles.Left
	                                     | System.Windows.Forms.AnchorStyles.Right);
	            this.textBox1.Location = new System.Drawing.Point(8, 48);
	            this.textBox1.Multiline = true;
	            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
	            this.textBox1.Name = "textBox1";
	            this.textBox1.Size = new System.Drawing.Size(744, 280);
	            this.textBox1.Text = "";
	            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
	            this.ClientSize = new System.Drawing.Size(768, 340);
	            this.MinimumSize = new System.Drawing.Size(750, 340);
	            this.Controls.AddRange(new System.Windows.Forms.Control[] {this.textBox1, 
	                this.run_button, this.compile_button, this.generate_button,
	                this.comboBox1, this.label1 });
	            this.Name = "CodeDomExampleForm";
	            this.Text = "CodeDom Hello World Example";
	            this.ResumeLayout(false);
	        }
	
	        protected override void Dispose(bool disposing)
	        {
	            base.Dispose(disposing);
	        }
	
	        [STAThread]
	        static void Main()
	        {
	            Application.Run(new CodeDomExampleForm());
	        }
	    }
	}
